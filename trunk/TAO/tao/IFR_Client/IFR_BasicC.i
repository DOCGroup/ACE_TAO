// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// *******************************************************************
// Sequence classes forward moved fron IFR_BaseC.i

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA::InterfaceDef **
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::InterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::InterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::InterfaceDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::freebuf (CORBA::InterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::InterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::InterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (this->maximum_);
      CORBA::InterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        tmp1[i] = CORBA::InterfaceDef::_duplicate (tmp2[i]);
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::InterfaceDef **tmp = ACE_reinterpret_cast (CORBA::InterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::InterfaceDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::InterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA::InterfaceDef **, this->buffer_);
    CORBA::InterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::InterfaceDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var>
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::InterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA::InterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::InterfaceDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::InterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::InterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::InterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::InterfaceDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::InterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INTERFACEDEFSEQ_CI_)
#define _CORBA_INTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_InterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (CORBA_InterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (const ::CORBA_InterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_InterfaceDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDefSeq_var::~CORBA_InterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_InterfaceDefSeq_var &
CORBA_InterfaceDefSeq_var::operator= (CORBA_InterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_InterfaceDefSeq_var &
CORBA_InterfaceDefSeq_var::operator= (const ::CORBA_InterfaceDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_InterfaceDefSeq *deep_copy =
            new CORBA_InterfaceDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_InterfaceDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_var::operator const ::CORBA_InterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_var::operator ::CORBA_InterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_var::operator ::CORBA_InterfaceDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_InterfaceDefSeq_var::operator ::CORBA_InterfaceDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::InterfaceDef, CORBA::InterfaceDef_var>
CORBA_InterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_InterfaceDefSeq &
CORBA_InterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq &
CORBA_InterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_InterfaceDefSeq *&
CORBA_InterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::_retn (void)
{
  ::CORBA_InterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_InterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (CORBA_InterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (CORBA_InterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (const ::CORBA_InterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_InterfaceDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_InterfaceDefSeq_out &
CORBA_InterfaceDefSeq_out::operator= (const ::CORBA_InterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_InterfaceDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_InterfaceDefSeq_out &
CORBA_InterfaceDefSeq_out::operator= (CORBA_InterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_out::operator ::CORBA_InterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *&
CORBA_InterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::InterfaceDef, CORBA::InterfaceDef_var>
CORBA_InterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_ABSTRACTINTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_ABSTRACTINTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA::AbstractInterfaceDef **
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::AbstractInterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::AbstractInterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::AbstractInterfaceDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::freebuf (CORBA::AbstractInterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::AbstractInterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::AbstractInterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (this->maximum_);
      CORBA::AbstractInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        tmp1[i] = CORBA::AbstractInterfaceDef::_duplicate (tmp2[i]);
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq &
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::AbstractInterfaceDef **tmp = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::AbstractInterfaceDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::AbstractInterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef **, this->buffer_);
    CORBA::AbstractInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::AbstractInterfaceDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::AbstractInterfaceDef,CORBA::AbstractInterfaceDef_var>
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::AbstractInterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::AbstractInterfaceDef,CORBA::AbstractInterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::AbstractInterfaceDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::AbstractInterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::AbstractInterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::AbstractInterfaceDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::AbstractInterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CI_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_AbstractInterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::CORBA_AbstractInterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::CORBA_AbstractInterfaceDefSeq_var (CORBA_AbstractInterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::CORBA_AbstractInterfaceDefSeq_var (const ::CORBA_AbstractInterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_AbstractInterfaceDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::~CORBA_AbstractInterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_AbstractInterfaceDefSeq_var &
CORBA_AbstractInterfaceDefSeq_var::operator= (CORBA_AbstractInterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq_var &
CORBA_AbstractInterfaceDefSeq_var::operator= (const ::CORBA_AbstractInterfaceDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_AbstractInterfaceDefSeq *deep_copy =
            new CORBA_AbstractInterfaceDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_AbstractInterfaceDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_var::operator const ::CORBA_AbstractInterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_var::operator ::CORBA_AbstractInterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_var::operator ::CORBA_AbstractInterfaceDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::operator ::CORBA_AbstractInterfaceDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::AbstractInterfaceDef, CORBA::AbstractInterfaceDef_var>
CORBA_AbstractInterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_AbstractInterfaceDefSeq &
CORBA_AbstractInterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq &
CORBA_AbstractInterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *&
CORBA_AbstractInterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::_retn (void)
{
  ::CORBA_AbstractInterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_AbstractInterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_out::CORBA_AbstractInterfaceDefSeq_out (CORBA_AbstractInterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_out::CORBA_AbstractInterfaceDefSeq_out (CORBA_AbstractInterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_out::CORBA_AbstractInterfaceDefSeq_out (const ::CORBA_AbstractInterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AbstractInterfaceDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq_out &
CORBA_AbstractInterfaceDefSeq_out::operator= (const ::CORBA_AbstractInterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AbstractInterfaceDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq_out &
CORBA_AbstractInterfaceDefSeq_out::operator= (CORBA_AbstractInterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_out::operator ::CORBA_AbstractInterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *&
CORBA_AbstractInterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::AbstractInterfaceDef, CORBA::AbstractInterfaceDef_var>
CORBA_AbstractInterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_LOCALINTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_LOCALINTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA::LocalInterfaceDef **
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::LocalInterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::LocalInterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::LocalInterfaceDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::freebuf (CORBA::LocalInterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::LocalInterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::LocalInterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (this->maximum_);
      CORBA::LocalInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::LocalInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        tmp1[i] = CORBA::LocalInterfaceDef::_duplicate (tmp2[i]);
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq &
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::LocalInterfaceDef **tmp = ACE_reinterpret_cast (CORBA::LocalInterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::LocalInterfaceDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::LocalInterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA::LocalInterfaceDef **, this->buffer_);
    CORBA::LocalInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::LocalInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::LocalInterfaceDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::LocalInterfaceDef,CORBA::LocalInterfaceDef_var>
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::LocalInterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA::LocalInterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::LocalInterfaceDef,CORBA::LocalInterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::LocalInterfaceDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::LocalInterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::LocalInterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::LocalInterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::LocalInterfaceDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::LocalInterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CI_)
#define _CORBA_LOCALINTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_LocalInterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::CORBA_LocalInterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::CORBA_LocalInterfaceDefSeq_var (CORBA_LocalInterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::CORBA_LocalInterfaceDefSeq_var (const ::CORBA_LocalInterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_LocalInterfaceDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::~CORBA_LocalInterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_LocalInterfaceDefSeq_var &
CORBA_LocalInterfaceDefSeq_var::operator= (CORBA_LocalInterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq_var &
CORBA_LocalInterfaceDefSeq_var::operator= (const ::CORBA_LocalInterfaceDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_LocalInterfaceDefSeq *deep_copy =
            new CORBA_LocalInterfaceDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_LocalInterfaceDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_var::operator const ::CORBA_LocalInterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_var::operator ::CORBA_LocalInterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_var::operator ::CORBA_LocalInterfaceDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::operator ::CORBA_LocalInterfaceDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::LocalInterfaceDef, CORBA::LocalInterfaceDef_var>
CORBA_LocalInterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_LocalInterfaceDefSeq &
CORBA_LocalInterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq &
CORBA_LocalInterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_LocalInterfaceDefSeq *&
CORBA_LocalInterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::_retn (void)
{
  ::CORBA_LocalInterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_LocalInterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_LocalInterfaceDefSeq_out::CORBA_LocalInterfaceDefSeq_out (CORBA_LocalInterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_out::CORBA_LocalInterfaceDefSeq_out (CORBA_LocalInterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_out::CORBA_LocalInterfaceDefSeq_out (const ::CORBA_LocalInterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_LocalInterfaceDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq_out &
CORBA_LocalInterfaceDefSeq_out::operator= (const ::CORBA_LocalInterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_LocalInterfaceDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq_out &
CORBA_LocalInterfaceDefSeq_out::operator= (CORBA_LocalInterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_out::operator ::CORBA_LocalInterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *&
CORBA_LocalInterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::LocalInterfaceDef, CORBA::LocalInterfaceDef_var>
CORBA_LocalInterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *******************************************************************

#if !defined (_CORBA_PRIMITIVEDEF___CI_)
#define _CORBA_PRIMITIVEDEF___CI_

ACE_INLINE
CORBA_PrimitiveDef::CORBA_PrimitiveDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_PrimitiveDef_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_PRIMITIVEDEF___VAR_CI_)
#define _CORBA_PRIMITIVEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_PrimitiveDef_var
// *************************************************************

ACE_INLINE
CORBA_PrimitiveDef_var::CORBA_PrimitiveDef_var (void) // default constructor
  : ptr_ (CORBA_PrimitiveDef::_nil ())
{}

ACE_INLINE CORBA_PrimitiveDef_ptr 
CORBA_PrimitiveDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_PrimitiveDef_var::CORBA_PrimitiveDef_var (const CORBA_PrimitiveDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_PrimitiveDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_PrimitiveDef_var::~CORBA_PrimitiveDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_PrimitiveDef_var &
CORBA_PrimitiveDef_var::operator= (CORBA_PrimitiveDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_PrimitiveDef_var &
CORBA_PrimitiveDef_var::operator= (const CORBA_PrimitiveDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA_PrimitiveDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_PrimitiveDef_var::operator const CORBA_PrimitiveDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_PrimitiveDef_var::operator CORBA_PrimitiveDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr 
CORBA_PrimitiveDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr
CORBA_PrimitiveDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr &
CORBA_PrimitiveDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr &
CORBA_PrimitiveDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_PrimitiveDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr 
CORBA_PrimitiveDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA_PrimitiveDef_ptr val = this->ptr_;
  this->ptr_ = CORBA_PrimitiveDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_PRIMITIVEDEF___OUT_CI_)
#define _CORBA_PRIMITIVEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_PrimitiveDef_out
// *************************************************************

ACE_INLINE
CORBA_PrimitiveDef_out::CORBA_PrimitiveDef_out (CORBA_PrimitiveDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA_PrimitiveDef::_nil ();
}

ACE_INLINE
CORBA_PrimitiveDef_out::CORBA_PrimitiveDef_out (CORBA_PrimitiveDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_PrimitiveDef::_nil ();
}

ACE_INLINE
CORBA_PrimitiveDef_out::CORBA_PrimitiveDef_out (const CORBA_PrimitiveDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PrimitiveDef_out&,p).ptr_)
{}

ACE_INLINE CORBA_PrimitiveDef_out &
CORBA_PrimitiveDef_out::operator= (const CORBA_PrimitiveDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PrimitiveDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA_PrimitiveDef_out &
CORBA_PrimitiveDef_out::operator= (const CORBA_PrimitiveDef_var &p)
{
  this->ptr_ = CORBA_PrimitiveDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_PrimitiveDef_out &
CORBA_PrimitiveDef_out::operator= (CORBA_PrimitiveDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_PrimitiveDef_out::operator CORBA_PrimitiveDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr &
CORBA_PrimitiveDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA_PrimitiveDef_ptr 
CORBA_PrimitiveDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_STRINGDEF___CI_)
#define _CORBA_STRINGDEF___CI_

ACE_INLINE
CORBA_StringDef::CORBA_StringDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_StringDef_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_STRINGDEF___VAR_CI_)
#define _CORBA_STRINGDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_StringDef_var
// *************************************************************

ACE_INLINE
CORBA_StringDef_var::CORBA_StringDef_var (void) // default constructor
  : ptr_ (CORBA_StringDef::_nil ())
{}

ACE_INLINE CORBA_StringDef_ptr 
CORBA_StringDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_StringDef_var::CORBA_StringDef_var (const CORBA_StringDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_StringDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_StringDef_var::~CORBA_StringDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_StringDef_var &
CORBA_StringDef_var::operator= (CORBA_StringDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_StringDef_var &
CORBA_StringDef_var::operator= (const CORBA_StringDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA_StringDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_StringDef_var::operator const CORBA_StringDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_StringDef_var::operator CORBA_StringDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr 
CORBA_StringDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr
CORBA_StringDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr &
CORBA_StringDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr &
CORBA_StringDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_StringDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr 
CORBA_StringDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA_StringDef_ptr val = this->ptr_;
  this->ptr_ = CORBA_StringDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_STRINGDEF___OUT_CI_)
#define _CORBA_STRINGDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_StringDef_out
// *************************************************************

ACE_INLINE
CORBA_StringDef_out::CORBA_StringDef_out (CORBA_StringDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA_StringDef::_nil ();
}

ACE_INLINE
CORBA_StringDef_out::CORBA_StringDef_out (CORBA_StringDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_StringDef::_nil ();
}

ACE_INLINE
CORBA_StringDef_out::CORBA_StringDef_out (const CORBA_StringDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_StringDef_out&,p).ptr_)
{}

ACE_INLINE CORBA_StringDef_out &
CORBA_StringDef_out::operator= (const CORBA_StringDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_StringDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA_StringDef_out &
CORBA_StringDef_out::operator= (const CORBA_StringDef_var &p)
{
  this->ptr_ = CORBA_StringDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_StringDef_out &
CORBA_StringDef_out::operator= (CORBA_StringDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_StringDef_out::operator CORBA_StringDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr &
CORBA_StringDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA_StringDef_ptr 
CORBA_StringDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_SEQUENCEDEF___CI_)
#define _CORBA_SEQUENCEDEF___CI_

ACE_INLINE
CORBA_SequenceDef::CORBA_SequenceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_SequenceDef_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_SEQUENCEDEF___VAR_CI_)
#define _CORBA_SEQUENCEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_SequenceDef_var
// *************************************************************

ACE_INLINE
CORBA_SequenceDef_var::CORBA_SequenceDef_var (void) // default constructor
  : ptr_ (CORBA_SequenceDef::_nil ())
{}

ACE_INLINE CORBA_SequenceDef_ptr 
CORBA_SequenceDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_SequenceDef_var::CORBA_SequenceDef_var (const CORBA_SequenceDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_SequenceDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_SequenceDef_var::~CORBA_SequenceDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_SequenceDef_var &
CORBA_SequenceDef_var::operator= (CORBA_SequenceDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_SequenceDef_var &
CORBA_SequenceDef_var::operator= (const CORBA_SequenceDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA_SequenceDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_SequenceDef_var::operator const CORBA_SequenceDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_SequenceDef_var::operator CORBA_SequenceDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr 
CORBA_SequenceDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr
CORBA_SequenceDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr &
CORBA_SequenceDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr &
CORBA_SequenceDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_SequenceDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr 
CORBA_SequenceDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA_SequenceDef_ptr val = this->ptr_;
  this->ptr_ = CORBA_SequenceDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_SEQUENCEDEF___OUT_CI_)
#define _CORBA_SEQUENCEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_SequenceDef_out
// *************************************************************

ACE_INLINE
CORBA_SequenceDef_out::CORBA_SequenceDef_out (CORBA_SequenceDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA_SequenceDef::_nil ();
}

ACE_INLINE
CORBA_SequenceDef_out::CORBA_SequenceDef_out (CORBA_SequenceDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_SequenceDef::_nil ();
}

ACE_INLINE
CORBA_SequenceDef_out::CORBA_SequenceDef_out (const CORBA_SequenceDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_SequenceDef_out&,p).ptr_)
{}

ACE_INLINE CORBA_SequenceDef_out &
CORBA_SequenceDef_out::operator= (const CORBA_SequenceDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_SequenceDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA_SequenceDef_out &
CORBA_SequenceDef_out::operator= (const CORBA_SequenceDef_var &p)
{
  this->ptr_ = CORBA_SequenceDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_SequenceDef_out &
CORBA_SequenceDef_out::operator= (CORBA_SequenceDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_SequenceDef_out::operator CORBA_SequenceDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr &
CORBA_SequenceDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA_SequenceDef_ptr 
CORBA_SequenceDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ARRAYDEF___CI_)
#define _CORBA_ARRAYDEF___CI_

ACE_INLINE
CORBA_ArrayDef::CORBA_ArrayDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ArrayDef_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_ARRAYDEF___VAR_CI_)
#define _CORBA_ARRAYDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ArrayDef_var
// *************************************************************

ACE_INLINE
CORBA_ArrayDef_var::CORBA_ArrayDef_var (void) // default constructor
  : ptr_ (CORBA_ArrayDef::_nil ())
{}

ACE_INLINE CORBA_ArrayDef_ptr 
CORBA_ArrayDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ArrayDef_var::CORBA_ArrayDef_var (const CORBA_ArrayDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ArrayDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ArrayDef_var::~CORBA_ArrayDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ArrayDef_var &
CORBA_ArrayDef_var::operator= (CORBA_ArrayDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ArrayDef_var &
CORBA_ArrayDef_var::operator= (const CORBA_ArrayDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA_ArrayDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ArrayDef_var::operator const CORBA_ArrayDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ArrayDef_var::operator CORBA_ArrayDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr 
CORBA_ArrayDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr
CORBA_ArrayDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr &
CORBA_ArrayDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr &
CORBA_ArrayDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_ArrayDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr 
CORBA_ArrayDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA_ArrayDef_ptr val = this->ptr_;
  this->ptr_ = CORBA_ArrayDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ARRAYDEF___OUT_CI_)
#define _CORBA_ARRAYDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ArrayDef_out
// *************************************************************

ACE_INLINE
CORBA_ArrayDef_out::CORBA_ArrayDef_out (CORBA_ArrayDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA_ArrayDef::_nil ();
}

ACE_INLINE
CORBA_ArrayDef_out::CORBA_ArrayDef_out (CORBA_ArrayDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_ArrayDef::_nil ();
}

ACE_INLINE
CORBA_ArrayDef_out::CORBA_ArrayDef_out (const CORBA_ArrayDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ArrayDef_out&,p).ptr_)
{}

ACE_INLINE CORBA_ArrayDef_out &
CORBA_ArrayDef_out::operator= (const CORBA_ArrayDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ArrayDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ArrayDef_out &
CORBA_ArrayDef_out::operator= (const CORBA_ArrayDef_var &p)
{
  this->ptr_ = CORBA_ArrayDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ArrayDef_out &
CORBA_ArrayDef_out::operator= (CORBA_ArrayDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ArrayDef_out::operator CORBA_ArrayDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr &
CORBA_ArrayDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA_ArrayDef_ptr 
CORBA_ArrayDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_WSTRINGDEF___CI_)
#define _CORBA_WSTRINGDEF___CI_

ACE_INLINE
CORBA_WstringDef::CORBA_WstringDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_WstringDef_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_WSTRINGDEF___VAR_CI_)
#define _CORBA_WSTRINGDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_WstringDef_var
// *************************************************************

ACE_INLINE
CORBA_WstringDef_var::CORBA_WstringDef_var (void) // default constructor
  : ptr_ (CORBA_WstringDef::_nil ())
{}

ACE_INLINE CORBA_WstringDef_ptr 
CORBA_WstringDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_WstringDef_var::CORBA_WstringDef_var (const CORBA_WstringDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_WstringDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_WstringDef_var::~CORBA_WstringDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_WstringDef_var &
CORBA_WstringDef_var::operator= (CORBA_WstringDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_WstringDef_var &
CORBA_WstringDef_var::operator= (const CORBA_WstringDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA_WstringDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_WstringDef_var::operator const CORBA_WstringDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_WstringDef_var::operator CORBA_WstringDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr 
CORBA_WstringDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr
CORBA_WstringDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr &
CORBA_WstringDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr &
CORBA_WstringDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_WstringDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr 
CORBA_WstringDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA_WstringDef_ptr val = this->ptr_;
  this->ptr_ = CORBA_WstringDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_WSTRINGDEF___OUT_CI_)
#define _CORBA_WSTRINGDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_WstringDef_out
// *************************************************************

ACE_INLINE
CORBA_WstringDef_out::CORBA_WstringDef_out (CORBA_WstringDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA_WstringDef::_nil ();
}

ACE_INLINE
CORBA_WstringDef_out::CORBA_WstringDef_out (CORBA_WstringDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA_WstringDef::_nil ();
}

ACE_INLINE
CORBA_WstringDef_out::CORBA_WstringDef_out (const CORBA_WstringDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_WstringDef_out&,p).ptr_)
{}

ACE_INLINE CORBA_WstringDef_out &
CORBA_WstringDef_out::operator= (const CORBA_WstringDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_WstringDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA_WstringDef_out &
CORBA_WstringDef_out::operator= (const CORBA_WstringDef_var &p)
{
  this->ptr_ = CORBA_WstringDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_WstringDef_out &
CORBA_WstringDef_out::operator= (CORBA_WstringDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_WstringDef_out::operator CORBA_WstringDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr &
CORBA_WstringDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA_WstringDef_ptr 
CORBA_WstringDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_REPOSITORY___CI_)
#define _CORBA_REPOSITORY___CI_

ACE_INLINE
CORBA_Repository::CORBA_Repository (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_Repository_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_REPOSITORY___VAR_CI_)
#define _CORBA_REPOSITORY___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_Repository_var
// *************************************************************

ACE_INLINE
CORBA_Repository_var::CORBA_Repository_var (void) // default constructor
  : ptr_ (CORBA_Repository::_nil ())
{}

ACE_INLINE ::CORBA_Repository_ptr
CORBA_Repository_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Repository_var::CORBA_Repository_var (const ::CORBA_Repository_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_Repository::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_Repository_var::~CORBA_Repository_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_Repository_var &
CORBA_Repository_var::operator= (CORBA_Repository_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_Repository_var &
CORBA_Repository_var::operator= (const ::CORBA_Repository_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_Repository::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_Repository_var::operator const ::CORBA_Repository_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_Repository_var::operator ::CORBA_Repository_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr
CORBA_Repository_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr
CORBA_Repository_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr &
CORBA_Repository_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr &
CORBA_Repository_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_Repository::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr
CORBA_Repository_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_Repository_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_Repository::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_REPOSITORY___OUT_CI_)
#define _CORBA_REPOSITORY___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_Repository_out
// *************************************************************

ACE_INLINE
CORBA_Repository_out::CORBA_Repository_out (CORBA_Repository_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_Repository::_nil ();
}

ACE_INLINE
CORBA_Repository_out::CORBA_Repository_out (CORBA_Repository_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_Repository::_nil ();
}

ACE_INLINE
CORBA_Repository_out::CORBA_Repository_out (const ::CORBA_Repository_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_Repository_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_Repository_out &
CORBA_Repository_out::operator= (const ::CORBA_Repository_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_Repository_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_Repository_out &
CORBA_Repository_out::operator= (const ::CORBA_Repository_var &p)
{
  this->ptr_ = ::CORBA_Repository::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_Repository_out &
CORBA_Repository_out::operator= (CORBA_Repository_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_Repository_out::operator ::CORBA_Repository_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr &
CORBA_Repository_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Repository_ptr
CORBA_Repository_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_MODULEDEF___CI_)
#define _CORBA_MODULEDEF___CI_

ACE_INLINE
CORBA_ModuleDef::CORBA_ModuleDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ModuleDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_MODULEDEF___VAR_CI_)
#define _CORBA_MODULEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ModuleDef_var
// *************************************************************

ACE_INLINE
CORBA_ModuleDef_var::CORBA_ModuleDef_var (void) // default constructor
  : ptr_ (CORBA_ModuleDef::_nil ())
{}

ACE_INLINE ::CORBA_ModuleDef_ptr
CORBA_ModuleDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ModuleDef_var::CORBA_ModuleDef_var (const ::CORBA_ModuleDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ModuleDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ModuleDef_var::~CORBA_ModuleDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ModuleDef_var &
CORBA_ModuleDef_var::operator= (CORBA_ModuleDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ModuleDef_var &
CORBA_ModuleDef_var::operator= (const ::CORBA_ModuleDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_ModuleDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ModuleDef_var::operator const ::CORBA_ModuleDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ModuleDef_var::operator ::CORBA_ModuleDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr
CORBA_ModuleDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr
CORBA_ModuleDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr &
CORBA_ModuleDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr &
CORBA_ModuleDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ModuleDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr
CORBA_ModuleDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_ModuleDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_ModuleDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_MODULEDEF___OUT_CI_)
#define _CORBA_MODULEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ModuleDef_out
// *************************************************************

ACE_INLINE
CORBA_ModuleDef_out::CORBA_ModuleDef_out (CORBA_ModuleDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_ModuleDef::_nil ();
}

ACE_INLINE
CORBA_ModuleDef_out::CORBA_ModuleDef_out (CORBA_ModuleDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ModuleDef::_nil ();
}

ACE_INLINE
CORBA_ModuleDef_out::CORBA_ModuleDef_out (const ::CORBA_ModuleDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ModuleDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_ModuleDef_out &
CORBA_ModuleDef_out::operator= (const ::CORBA_ModuleDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ModuleDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ModuleDef_out &
CORBA_ModuleDef_out::operator= (const ::CORBA_ModuleDef_var &p)
{
  this->ptr_ = ::CORBA_ModuleDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ModuleDef_out &
CORBA_ModuleDef_out::operator= (CORBA_ModuleDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ModuleDef_out::operator ::CORBA_ModuleDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr &
CORBA_ModuleDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDef_ptr
CORBA_ModuleDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_ModuleDescription_var
// *************************************************************

ACE_INLINE
CORBA_ModuleDescription_var::CORBA_ModuleDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ModuleDescription_var::CORBA_ModuleDescription_var (CORBA_ModuleDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ModuleDescription_var::CORBA_ModuleDescription_var (const ::CORBA_ModuleDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ModuleDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ModuleDescription_var::~CORBA_ModuleDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ModuleDescription_var &
CORBA_ModuleDescription_var::operator= (CORBA_ModuleDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ModuleDescription_var &
CORBA_ModuleDescription_var::operator= (const ::CORBA_ModuleDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ModuleDescription *deep_copy =
            new CORBA_ModuleDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ModuleDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ModuleDescription *
CORBA_ModuleDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDescription *
CORBA_ModuleDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ModuleDescription_var::operator const ::CORBA_ModuleDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ModuleDescription_var::operator ::CORBA_ModuleDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ModuleDescription_var::operator ::CORBA_ModuleDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ModuleDescription_var::operator ::CORBA_ModuleDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_ModuleDescription &
CORBA_ModuleDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDescription &
CORBA_ModuleDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ModuleDescription *&
CORBA_ModuleDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDescription *
CORBA_ModuleDescription_var::_retn (void)
{
  ::CORBA_ModuleDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ModuleDescription *
CORBA_ModuleDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ModuleDescription_out
// *************************************************************

ACE_INLINE
CORBA_ModuleDescription_out::CORBA_ModuleDescription_out (::CORBA_ModuleDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ModuleDescription_out::CORBA_ModuleDescription_out (CORBA_ModuleDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ModuleDescription_out::CORBA_ModuleDescription_out (const ::CORBA_ModuleDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ModuleDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_ModuleDescription_out &
CORBA_ModuleDescription_out::operator= (const ::CORBA_ModuleDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ModuleDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ModuleDescription_out &
CORBA_ModuleDescription_out::operator= (CORBA_ModuleDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ModuleDescription_out::operator ::CORBA_ModuleDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDescription *&
CORBA_ModuleDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ModuleDescription *
CORBA_ModuleDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_CONSTANTDEF___CI_)
#define _CORBA_CONSTANTDEF___CI_

ACE_INLINE
CORBA_ConstantDef::CORBA_ConstantDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ConstantDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_CONSTANTDEF___VAR_CI_)
#define _CORBA_CONSTANTDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ConstantDef_var
// *************************************************************

ACE_INLINE
CORBA_ConstantDef_var::CORBA_ConstantDef_var (void) // default constructor
  : ptr_ (CORBA_ConstantDef::_nil ())
{}

ACE_INLINE ::CORBA_ConstantDef_ptr
CORBA_ConstantDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ConstantDef_var::CORBA_ConstantDef_var (const ::CORBA_ConstantDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ConstantDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ConstantDef_var::~CORBA_ConstantDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ConstantDef_var &
CORBA_ConstantDef_var::operator= (CORBA_ConstantDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ConstantDef_var &
CORBA_ConstantDef_var::operator= (const ::CORBA_ConstantDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_ConstantDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ConstantDef_var::operator const ::CORBA_ConstantDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ConstantDef_var::operator ::CORBA_ConstantDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr
CORBA_ConstantDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr
CORBA_ConstantDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr &
CORBA_ConstantDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr &
CORBA_ConstantDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ConstantDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr
CORBA_ConstantDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_ConstantDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_ConstantDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONSTANTDEF___OUT_CI_)
#define _CORBA_CONSTANTDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ConstantDef_out
// *************************************************************

ACE_INLINE
CORBA_ConstantDef_out::CORBA_ConstantDef_out (CORBA_ConstantDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_ConstantDef::_nil ();
}

ACE_INLINE
CORBA_ConstantDef_out::CORBA_ConstantDef_out (CORBA_ConstantDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ConstantDef::_nil ();
}

ACE_INLINE
CORBA_ConstantDef_out::CORBA_ConstantDef_out (const ::CORBA_ConstantDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ConstantDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_ConstantDef_out &
CORBA_ConstantDef_out::operator= (const ::CORBA_ConstantDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ConstantDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ConstantDef_out &
CORBA_ConstantDef_out::operator= (const ::CORBA_ConstantDef_var &p)
{
  this->ptr_ = ::CORBA_ConstantDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ConstantDef_out &
CORBA_ConstantDef_out::operator= (CORBA_ConstantDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ConstantDef_out::operator ::CORBA_ConstantDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr &
CORBA_ConstantDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDef_ptr
CORBA_ConstantDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_ConstantDescription_var
// *************************************************************

ACE_INLINE
CORBA_ConstantDescription_var::CORBA_ConstantDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ConstantDescription_var::CORBA_ConstantDescription_var (CORBA_ConstantDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ConstantDescription_var::CORBA_ConstantDescription_var (const ::CORBA_ConstantDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ConstantDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ConstantDescription_var::~CORBA_ConstantDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ConstantDescription_var &
CORBA_ConstantDescription_var::operator= (CORBA_ConstantDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ConstantDescription_var &
CORBA_ConstantDescription_var::operator= (const ::CORBA_ConstantDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ConstantDescription *deep_copy =
            new CORBA_ConstantDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ConstantDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ConstantDescription *
CORBA_ConstantDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDescription *
CORBA_ConstantDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ConstantDescription_var::operator const ::CORBA_ConstantDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ConstantDescription_var::operator ::CORBA_ConstantDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ConstantDescription_var::operator ::CORBA_ConstantDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ConstantDescription_var::operator ::CORBA_ConstantDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_ConstantDescription &
CORBA_ConstantDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDescription &
CORBA_ConstantDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ConstantDescription *&
CORBA_ConstantDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDescription *
CORBA_ConstantDescription_var::_retn (void)
{
  ::CORBA_ConstantDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ConstantDescription *
CORBA_ConstantDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ConstantDescription_out
// *************************************************************

ACE_INLINE
CORBA_ConstantDescription_out::CORBA_ConstantDescription_out (::CORBA_ConstantDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ConstantDescription_out::CORBA_ConstantDescription_out (CORBA_ConstantDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ConstantDescription_out::CORBA_ConstantDescription_out (const ::CORBA_ConstantDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ConstantDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_ConstantDescription_out &
CORBA_ConstantDescription_out::operator= (const ::CORBA_ConstantDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ConstantDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ConstantDescription_out &
CORBA_ConstantDescription_out::operator= (CORBA_ConstantDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ConstantDescription_out::operator ::CORBA_ConstantDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDescription *&
CORBA_ConstantDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ConstantDescription *
CORBA_ConstantDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_STRUCTDEF___CI_)
#define _CORBA_STRUCTDEF___CI_

ACE_INLINE
CORBA_StructDef::CORBA_StructDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_StructDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_STRUCTDEF___VAR_CI_)
#define _CORBA_STRUCTDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_StructDef_var
// *************************************************************

ACE_INLINE
CORBA_StructDef_var::CORBA_StructDef_var (void) // default constructor
  : ptr_ (CORBA_StructDef::_nil ())
{}

ACE_INLINE ::CORBA_StructDef_ptr
CORBA_StructDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_StructDef_var::CORBA_StructDef_var (const ::CORBA_StructDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_StructDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_StructDef_var::~CORBA_StructDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_StructDef_var &
CORBA_StructDef_var::operator= (CORBA_StructDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_StructDef_var &
CORBA_StructDef_var::operator= (const ::CORBA_StructDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_StructDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_StructDef_var::operator const ::CORBA_StructDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_StructDef_var::operator ::CORBA_StructDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr
CORBA_StructDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr
CORBA_StructDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr &
CORBA_StructDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr &
CORBA_StructDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_StructDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr
CORBA_StructDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_StructDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_StructDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_STRUCTDEF___OUT_CI_)
#define _CORBA_STRUCTDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_StructDef_out
// *************************************************************

ACE_INLINE
CORBA_StructDef_out::CORBA_StructDef_out (CORBA_StructDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_StructDef::_nil ();
}

ACE_INLINE
CORBA_StructDef_out::CORBA_StructDef_out (CORBA_StructDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_StructDef::_nil ();
}

ACE_INLINE
CORBA_StructDef_out::CORBA_StructDef_out (const ::CORBA_StructDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_StructDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_StructDef_out &
CORBA_StructDef_out::operator= (const ::CORBA_StructDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_StructDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_StructDef_out &
CORBA_StructDef_out::operator= (const ::CORBA_StructDef_var &p)
{
  this->ptr_ = ::CORBA_StructDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_StructDef_out &
CORBA_StructDef_out::operator= (CORBA_StructDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_StructDef_out::operator ::CORBA_StructDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr &
CORBA_StructDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructDef_ptr
CORBA_StructDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_UNIONDEF___CI_)
#define _CORBA_UNIONDEF___CI_

ACE_INLINE
CORBA_UnionDef::CORBA_UnionDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_UnionDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_UNIONDEF___VAR_CI_)
#define _CORBA_UNIONDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_UnionDef_var
// *************************************************************

ACE_INLINE
CORBA_UnionDef_var::CORBA_UnionDef_var (void) // default constructor
  : ptr_ (CORBA_UnionDef::_nil ())
{}

ACE_INLINE ::CORBA_UnionDef_ptr
CORBA_UnionDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_UnionDef_var::CORBA_UnionDef_var (const ::CORBA_UnionDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_UnionDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_UnionDef_var::~CORBA_UnionDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_UnionDef_var &
CORBA_UnionDef_var::operator= (CORBA_UnionDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_UnionDef_var &
CORBA_UnionDef_var::operator= (const ::CORBA_UnionDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_UnionDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_UnionDef_var::operator const ::CORBA_UnionDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_UnionDef_var::operator ::CORBA_UnionDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr
CORBA_UnionDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr
CORBA_UnionDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr &
CORBA_UnionDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr &
CORBA_UnionDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_UnionDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr
CORBA_UnionDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_UnionDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_UnionDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_UNIONDEF___OUT_CI_)
#define _CORBA_UNIONDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_UnionDef_out
// *************************************************************

ACE_INLINE
CORBA_UnionDef_out::CORBA_UnionDef_out (CORBA_UnionDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_UnionDef::_nil ();
}

ACE_INLINE
CORBA_UnionDef_out::CORBA_UnionDef_out (CORBA_UnionDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_UnionDef::_nil ();
}

ACE_INLINE
CORBA_UnionDef_out::CORBA_UnionDef_out (const ::CORBA_UnionDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_UnionDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_UnionDef_out &
CORBA_UnionDef_out::operator= (const ::CORBA_UnionDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_UnionDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_UnionDef_out &
CORBA_UnionDef_out::operator= (const ::CORBA_UnionDef_var &p)
{
  this->ptr_ = ::CORBA_UnionDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_UnionDef_out &
CORBA_UnionDef_out::operator= (CORBA_UnionDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_UnionDef_out::operator ::CORBA_UnionDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr &
CORBA_UnionDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionDef_ptr
CORBA_UnionDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMDEF___CI_)
#define _CORBA_ENUMDEF___CI_

ACE_INLINE
CORBA_EnumDef::CORBA_EnumDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_EnumDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_ENUMDEF___VAR_CI_)
#define _CORBA_ENUMDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_EnumDef_var
// *************************************************************

ACE_INLINE
CORBA_EnumDef_var::CORBA_EnumDef_var (void) // default constructor
  : ptr_ (CORBA_EnumDef::_nil ())
{}

ACE_INLINE ::CORBA_EnumDef_ptr
CORBA_EnumDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_EnumDef_var::CORBA_EnumDef_var (const ::CORBA_EnumDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_EnumDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_EnumDef_var::~CORBA_EnumDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_EnumDef_var &
CORBA_EnumDef_var::operator= (CORBA_EnumDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_EnumDef_var &
CORBA_EnumDef_var::operator= (const ::CORBA_EnumDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_EnumDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_EnumDef_var::operator const ::CORBA_EnumDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_EnumDef_var::operator ::CORBA_EnumDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr
CORBA_EnumDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr
CORBA_EnumDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr &
CORBA_EnumDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr &
CORBA_EnumDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_EnumDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr
CORBA_EnumDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_EnumDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_EnumDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMDEF___OUT_CI_)
#define _CORBA_ENUMDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_EnumDef_out
// *************************************************************

ACE_INLINE
CORBA_EnumDef_out::CORBA_EnumDef_out (CORBA_EnumDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_EnumDef::_nil ();
}

ACE_INLINE
CORBA_EnumDef_out::CORBA_EnumDef_out (CORBA_EnumDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_EnumDef::_nil ();
}

ACE_INLINE
CORBA_EnumDef_out::CORBA_EnumDef_out (const ::CORBA_EnumDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_EnumDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_EnumDef_out &
CORBA_EnumDef_out::operator= (const ::CORBA_EnumDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_EnumDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_EnumDef_out &
CORBA_EnumDef_out::operator= (const ::CORBA_EnumDef_var &p)
{
  this->ptr_ = ::CORBA_EnumDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_EnumDef_out &
CORBA_EnumDef_out::operator= (CORBA_EnumDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_EnumDef_out::operator ::CORBA_EnumDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr &
CORBA_EnumDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumDef_ptr
CORBA_EnumDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ALIASDEF___CI_)
#define _CORBA_ALIASDEF___CI_

ACE_INLINE
CORBA_AliasDef::CORBA_AliasDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_AliasDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_ALIASDEF___VAR_CI_)
#define _CORBA_ALIASDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_AliasDef_var
// *************************************************************

ACE_INLINE
CORBA_AliasDef_var::CORBA_AliasDef_var (void) // default constructor
  : ptr_ (CORBA_AliasDef::_nil ())
{}

ACE_INLINE ::CORBA_AliasDef_ptr
CORBA_AliasDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_AliasDef_var::CORBA_AliasDef_var (const ::CORBA_AliasDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_AliasDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_AliasDef_var::~CORBA_AliasDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_AliasDef_var &
CORBA_AliasDef_var::operator= (CORBA_AliasDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_AliasDef_var &
CORBA_AliasDef_var::operator= (const ::CORBA_AliasDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_AliasDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_AliasDef_var::operator const ::CORBA_AliasDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_AliasDef_var::operator ::CORBA_AliasDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr
CORBA_AliasDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr
CORBA_AliasDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr &
CORBA_AliasDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr &
CORBA_AliasDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_AliasDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr
CORBA_AliasDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_AliasDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_AliasDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ALIASDEF___OUT_CI_)
#define _CORBA_ALIASDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_AliasDef_out
// *************************************************************

ACE_INLINE
CORBA_AliasDef_out::CORBA_AliasDef_out (CORBA_AliasDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_AliasDef::_nil ();
}

ACE_INLINE
CORBA_AliasDef_out::CORBA_AliasDef_out (CORBA_AliasDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_AliasDef::_nil ();
}

ACE_INLINE
CORBA_AliasDef_out::CORBA_AliasDef_out (const ::CORBA_AliasDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AliasDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_AliasDef_out &
CORBA_AliasDef_out::operator= (const ::CORBA_AliasDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AliasDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_AliasDef_out &
CORBA_AliasDef_out::operator= (const ::CORBA_AliasDef_var &p)
{
  this->ptr_ = ::CORBA_AliasDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_AliasDef_out &
CORBA_AliasDef_out::operator= (CORBA_AliasDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AliasDef_out::operator ::CORBA_AliasDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr &
CORBA_AliasDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AliasDef_ptr
CORBA_AliasDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_NATIVEDEF___CI_)
#define _CORBA_NATIVEDEF___CI_

ACE_INLINE
CORBA_NativeDef::CORBA_NativeDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_NativeDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_NATIVEDEF___VAR_CI_)
#define _CORBA_NATIVEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_NativeDef_var
// *************************************************************

ACE_INLINE
CORBA_NativeDef_var::CORBA_NativeDef_var (void) // default constructor
  : ptr_ (CORBA_NativeDef::_nil ())
{}

ACE_INLINE ::CORBA_NativeDef_ptr
CORBA_NativeDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_NativeDef_var::CORBA_NativeDef_var (const ::CORBA_NativeDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_NativeDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_NativeDef_var::~CORBA_NativeDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_NativeDef_var &
CORBA_NativeDef_var::operator= (CORBA_NativeDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_NativeDef_var &
CORBA_NativeDef_var::operator= (const ::CORBA_NativeDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_NativeDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_NativeDef_var::operator const ::CORBA_NativeDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_NativeDef_var::operator ::CORBA_NativeDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr
CORBA_NativeDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr
CORBA_NativeDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr &
CORBA_NativeDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr &
CORBA_NativeDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_NativeDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr
CORBA_NativeDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_NativeDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_NativeDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_NATIVEDEF___OUT_CI_)
#define _CORBA_NATIVEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_NativeDef_out
// *************************************************************

ACE_INLINE
CORBA_NativeDef_out::CORBA_NativeDef_out (CORBA_NativeDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_NativeDef::_nil ();
}

ACE_INLINE
CORBA_NativeDef_out::CORBA_NativeDef_out (CORBA_NativeDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_NativeDef::_nil ();
}

ACE_INLINE
CORBA_NativeDef_out::CORBA_NativeDef_out (const ::CORBA_NativeDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_NativeDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_NativeDef_out &
CORBA_NativeDef_out::operator= (const ::CORBA_NativeDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_NativeDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_NativeDef_out &
CORBA_NativeDef_out::operator= (const ::CORBA_NativeDef_var &p)
{
  this->ptr_ = ::CORBA_NativeDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_NativeDef_out &
CORBA_NativeDef_out::operator= (CORBA_NativeDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_NativeDef_out::operator ::CORBA_NativeDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr &
CORBA_NativeDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_NativeDef_ptr
CORBA_NativeDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_EXCEPTIONDEF___CI_)
#define _CORBA_EXCEPTIONDEF___CI_

ACE_INLINE
CORBA_ExceptionDef::CORBA_ExceptionDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ExceptionDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_EXCEPTIONDEF___VAR_CI_)
#define _CORBA_EXCEPTIONDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_ExceptionDef_var
// *************************************************************

ACE_INLINE
CORBA_ExceptionDef_var::CORBA_ExceptionDef_var (void) // default constructor
  : ptr_ (CORBA_ExceptionDef::_nil ())
{}

ACE_INLINE ::CORBA_ExceptionDef_ptr
CORBA_ExceptionDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ExceptionDef_var::CORBA_ExceptionDef_var (const ::CORBA_ExceptionDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_ExceptionDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_ExceptionDef_var::~CORBA_ExceptionDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_ExceptionDef_var &
CORBA_ExceptionDef_var::operator= (CORBA_ExceptionDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_ExceptionDef_var &
CORBA_ExceptionDef_var::operator= (const ::CORBA_ExceptionDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_ExceptionDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_ExceptionDef_var::operator const ::CORBA_ExceptionDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ExceptionDef_var::operator ::CORBA_ExceptionDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr
CORBA_ExceptionDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr
CORBA_ExceptionDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr &
CORBA_ExceptionDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr &
CORBA_ExceptionDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ExceptionDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr
CORBA_ExceptionDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_ExceptionDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_ExceptionDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_EXCEPTIONDEF___OUT_CI_)
#define _CORBA_EXCEPTIONDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_ExceptionDef_out
// *************************************************************

ACE_INLINE
CORBA_ExceptionDef_out::CORBA_ExceptionDef_out (CORBA_ExceptionDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_ExceptionDef::_nil ();
}

ACE_INLINE
CORBA_ExceptionDef_out::CORBA_ExceptionDef_out (CORBA_ExceptionDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_ExceptionDef::_nil ();
}

ACE_INLINE
CORBA_ExceptionDef_out::CORBA_ExceptionDef_out (const ::CORBA_ExceptionDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ExceptionDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_ExceptionDef_out &
CORBA_ExceptionDef_out::operator= (const ::CORBA_ExceptionDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ExceptionDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ExceptionDef_out &
CORBA_ExceptionDef_out::operator= (const ::CORBA_ExceptionDef_var &p)
{
  this->ptr_ = ::CORBA_ExceptionDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_ExceptionDef_out &
CORBA_ExceptionDef_out::operator= (CORBA_ExceptionDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ExceptionDef_out::operator ::CORBA_ExceptionDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr &
CORBA_ExceptionDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDef_ptr
CORBA_ExceptionDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_ExceptionDescription_var
// *************************************************************

ACE_INLINE
CORBA_ExceptionDescription_var::CORBA_ExceptionDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ExceptionDescription_var::CORBA_ExceptionDescription_var (CORBA_ExceptionDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ExceptionDescription_var::CORBA_ExceptionDescription_var (const ::CORBA_ExceptionDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ExceptionDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExceptionDescription_var::~CORBA_ExceptionDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ExceptionDescription_var &
CORBA_ExceptionDescription_var::operator= (CORBA_ExceptionDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ExceptionDescription_var &
CORBA_ExceptionDescription_var::operator= (const ::CORBA_ExceptionDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ExceptionDescription *deep_copy =
            new CORBA_ExceptionDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ExceptionDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ExceptionDescription *
CORBA_ExceptionDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDescription *
CORBA_ExceptionDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ExceptionDescription_var::operator const ::CORBA_ExceptionDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ExceptionDescription_var::operator ::CORBA_ExceptionDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ExceptionDescription_var::operator ::CORBA_ExceptionDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ExceptionDescription_var::operator ::CORBA_ExceptionDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_ExceptionDescription &
CORBA_ExceptionDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDescription &
CORBA_ExceptionDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ExceptionDescription *&
CORBA_ExceptionDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDescription *
CORBA_ExceptionDescription_var::_retn (void)
{
  ::CORBA_ExceptionDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ExceptionDescription *
CORBA_ExceptionDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ExceptionDescription_out
// *************************************************************

ACE_INLINE
CORBA_ExceptionDescription_out::CORBA_ExceptionDescription_out (::CORBA_ExceptionDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExceptionDescription_out::CORBA_ExceptionDescription_out (CORBA_ExceptionDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExceptionDescription_out::CORBA_ExceptionDescription_out (const ::CORBA_ExceptionDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ExceptionDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_ExceptionDescription_out &
CORBA_ExceptionDescription_out::operator= (const ::CORBA_ExceptionDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ExceptionDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ExceptionDescription_out &
CORBA_ExceptionDescription_out::operator= (CORBA_ExceptionDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ExceptionDescription_out::operator ::CORBA_ExceptionDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDescription *&
CORBA_ExceptionDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDescription *
CORBA_ExceptionDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_EXCEPTIONDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_EXCEPTIONDEFSEQ_CI_

  ACE_INLINE CORBA::ExceptionDef **
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::ExceptionDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::ExceptionDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::ExceptionDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::freebuf (CORBA::ExceptionDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (void)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ExceptionDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::ExceptionDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (this->maximum_);
      CORBA::ExceptionDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        tmp1[i] = CORBA::ExceptionDef::_duplicate (tmp2[i]);
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::ExceptionDef **tmp = ACE_reinterpret_cast (CORBA::ExceptionDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::ExceptionDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ExceptionDef **tmp1 = ACE_reinterpret_cast (CORBA::ExceptionDef **, this->buffer_);
    CORBA::ExceptionDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::ExceptionDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var>
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::ExceptionDef ** const tmp = ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::ExceptionDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ExceptionDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ExceptionDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ExceptionDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ExceptionDef* *
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_EXCEPTIONDEFSEQ_CI_)
#define _CORBA_EXCEPTIONDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ExceptionDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_ExceptionDefSeq_var::CORBA_ExceptionDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ExceptionDefSeq_var::CORBA_ExceptionDefSeq_var (CORBA_ExceptionDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ExceptionDefSeq_var::CORBA_ExceptionDefSeq_var (const ::CORBA_ExceptionDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ExceptionDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExceptionDefSeq_var::~CORBA_ExceptionDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ExceptionDefSeq_var &
CORBA_ExceptionDefSeq_var::operator= (CORBA_ExceptionDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ExceptionDefSeq_var &
CORBA_ExceptionDefSeq_var::operator= (const ::CORBA_ExceptionDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ExceptionDefSeq *deep_copy =
            new CORBA_ExceptionDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ExceptionDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ExceptionDefSeq *
CORBA_ExceptionDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDefSeq *
CORBA_ExceptionDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ExceptionDefSeq_var::operator const ::CORBA_ExceptionDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ExceptionDefSeq_var::operator ::CORBA_ExceptionDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ExceptionDefSeq_var::operator ::CORBA_ExceptionDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ExceptionDefSeq_var::operator ::CORBA_ExceptionDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ExceptionDef, CORBA::ExceptionDef_var>
CORBA_ExceptionDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_ExceptionDefSeq &
CORBA_ExceptionDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDefSeq &
CORBA_ExceptionDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ExceptionDefSeq *&
CORBA_ExceptionDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDefSeq *
CORBA_ExceptionDefSeq_var::_retn (void)
{
  ::CORBA_ExceptionDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ExceptionDefSeq *
CORBA_ExceptionDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ExceptionDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_ExceptionDefSeq_out::CORBA_ExceptionDefSeq_out (CORBA_ExceptionDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExceptionDefSeq_out::CORBA_ExceptionDefSeq_out (CORBA_ExceptionDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExceptionDefSeq_out::CORBA_ExceptionDefSeq_out (const ::CORBA_ExceptionDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ExceptionDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ExceptionDefSeq_out &
CORBA_ExceptionDefSeq_out::operator= (const ::CORBA_ExceptionDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ExceptionDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ExceptionDefSeq_out &
CORBA_ExceptionDefSeq_out::operator= (CORBA_ExceptionDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ExceptionDefSeq_out::operator ::CORBA_ExceptionDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDefSeq *&
CORBA_ExceptionDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExceptionDefSeq *
CORBA_ExceptionDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ExceptionDef, CORBA::ExceptionDef_var>
CORBA_ExceptionDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_EXCDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_EXCDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ExceptionDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::ExceptionDescription *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::ExceptionDescription[size], 0);
    return retval;
  }
  
  ACE_INLINE void CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (CORBA::ExceptionDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ExceptionDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::ExceptionDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (this->maximum_);
      CORBA::ExceptionDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ExceptionDescription *tmp = ACE_reinterpret_cast (CORBA::ExceptionDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ExceptionDescription *tmp1 = ACE_reinterpret_cast (CORBA::ExceptionDescription *, this->buffer_);
    CORBA::ExceptionDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ExceptionDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ExceptionDescription* tmp = ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ExceptionDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ExceptionDescription * const tmp = ACE_reinterpret_cast (CORBA::ExceptionDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ExceptionDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ExceptionDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ExceptionDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ExceptionDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ExceptionDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ExceptionDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ExceptionDescription *tmp = ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CI_)
#define _CORBA_EXCDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ExcDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA_ExcDescriptionSeq_var::CORBA_ExcDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ExcDescriptionSeq_var::CORBA_ExcDescriptionSeq_var (CORBA_ExcDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ExcDescriptionSeq_var::CORBA_ExcDescriptionSeq_var (const ::CORBA_ExcDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ExcDescriptionSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExcDescriptionSeq_var::~CORBA_ExcDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ExcDescriptionSeq_var &
CORBA_ExcDescriptionSeq_var::operator= (CORBA_ExcDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq_var &
CORBA_ExcDescriptionSeq_var::operator= (const ::CORBA_ExcDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ExcDescriptionSeq *deep_copy =
            new CORBA_ExcDescriptionSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ExcDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ExcDescriptionSeq *
CORBA_ExcDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq *
CORBA_ExcDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ExcDescriptionSeq_var::operator const ::CORBA_ExcDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ExcDescriptionSeq_var::operator ::CORBA_ExcDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ExcDescriptionSeq_var::operator ::CORBA_ExcDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ExcDescriptionSeq_var::operator ::CORBA_ExcDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription &
CORBA_ExcDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ExceptionDescription &
CORBA_ExcDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::ExceptionDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_ExcDescriptionSeq &
CORBA_ExcDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq &
CORBA_ExcDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ExcDescriptionSeq *&
CORBA_ExcDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq *
CORBA_ExcDescriptionSeq_var::_retn (void)
{
  ::CORBA_ExcDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq *
CORBA_ExcDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ExcDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA_ExcDescriptionSeq_out::CORBA_ExcDescriptionSeq_out (CORBA_ExcDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExcDescriptionSeq_out::CORBA_ExcDescriptionSeq_out (CORBA_ExcDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ExcDescriptionSeq_out::CORBA_ExcDescriptionSeq_out (const ::CORBA_ExcDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ExcDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ExcDescriptionSeq_out &
CORBA_ExcDescriptionSeq_out::operator= (const ::CORBA_ExcDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ExcDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq_out &
CORBA_ExcDescriptionSeq_out::operator= (CORBA_ExcDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ExcDescriptionSeq_out::operator ::CORBA_ExcDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq *&
CORBA_ExcDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ExcDescriptionSeq *
CORBA_ExcDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription &
CORBA_ExcDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_ATTRIBUTEDEF___CI_)
#define _CORBA_ATTRIBUTEDEF___CI_

ACE_INLINE
CORBA_AttributeDef::CORBA_AttributeDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_AttributeDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_ATTRIBUTEDEF___VAR_CI_)
#define _CORBA_ATTRIBUTEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_AttributeDef_var
// *************************************************************

ACE_INLINE
CORBA_AttributeDef_var::CORBA_AttributeDef_var (void) // default constructor
  : ptr_ (CORBA_AttributeDef::_nil ())
{}

ACE_INLINE ::CORBA_AttributeDef_ptr
CORBA_AttributeDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_AttributeDef_var::CORBA_AttributeDef_var (const ::CORBA_AttributeDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_AttributeDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_AttributeDef_var::~CORBA_AttributeDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_AttributeDef_var &
CORBA_AttributeDef_var::operator= (CORBA_AttributeDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_AttributeDef_var &
CORBA_AttributeDef_var::operator= (const ::CORBA_AttributeDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_AttributeDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_AttributeDef_var::operator const ::CORBA_AttributeDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_AttributeDef_var::operator ::CORBA_AttributeDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr
CORBA_AttributeDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr
CORBA_AttributeDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr &
CORBA_AttributeDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr &
CORBA_AttributeDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_AttributeDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr
CORBA_AttributeDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_AttributeDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_AttributeDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ATTRIBUTEDEF___OUT_CI_)
#define _CORBA_ATTRIBUTEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_AttributeDef_out
// *************************************************************

ACE_INLINE
CORBA_AttributeDef_out::CORBA_AttributeDef_out (CORBA_AttributeDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_AttributeDef::_nil ();
}

ACE_INLINE
CORBA_AttributeDef_out::CORBA_AttributeDef_out (CORBA_AttributeDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_AttributeDef::_nil ();
}

ACE_INLINE
CORBA_AttributeDef_out::CORBA_AttributeDef_out (const ::CORBA_AttributeDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AttributeDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_AttributeDef_out &
CORBA_AttributeDef_out::operator= (const ::CORBA_AttributeDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AttributeDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_AttributeDef_out &
CORBA_AttributeDef_out::operator= (const ::CORBA_AttributeDef_var &p)
{
  this->ptr_ = ::CORBA_AttributeDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_AttributeDef_out &
CORBA_AttributeDef_out::operator= (CORBA_AttributeDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AttributeDef_out::operator ::CORBA_AttributeDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr &
CORBA_AttributeDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDef_ptr
CORBA_AttributeDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_AttributeDescription_var
// *************************************************************

ACE_INLINE
CORBA_AttributeDescription_var::CORBA_AttributeDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_AttributeDescription_var::CORBA_AttributeDescription_var (CORBA_AttributeDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_AttributeDescription_var::CORBA_AttributeDescription_var (const ::CORBA_AttributeDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_AttributeDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_AttributeDescription_var::~CORBA_AttributeDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_AttributeDescription_var &
CORBA_AttributeDescription_var::operator= (CORBA_AttributeDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_AttributeDescription_var &
CORBA_AttributeDescription_var::operator= (const ::CORBA_AttributeDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_AttributeDescription *deep_copy =
            new CORBA_AttributeDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_AttributeDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_AttributeDescription *
CORBA_AttributeDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDescription *
CORBA_AttributeDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_AttributeDescription_var::operator const ::CORBA_AttributeDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_AttributeDescription_var::operator ::CORBA_AttributeDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_AttributeDescription_var::operator ::CORBA_AttributeDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_AttributeDescription_var::operator ::CORBA_AttributeDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_AttributeDescription &
CORBA_AttributeDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDescription &
CORBA_AttributeDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_AttributeDescription *&
CORBA_AttributeDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDescription *
CORBA_AttributeDescription_var::_retn (void)
{
  ::CORBA_AttributeDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_AttributeDescription *
CORBA_AttributeDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_AttributeDescription_out
// *************************************************************

ACE_INLINE
CORBA_AttributeDescription_out::CORBA_AttributeDescription_out (::CORBA_AttributeDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AttributeDescription_out::CORBA_AttributeDescription_out (CORBA_AttributeDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AttributeDescription_out::CORBA_AttributeDescription_out (const ::CORBA_AttributeDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AttributeDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_AttributeDescription_out &
CORBA_AttributeDescription_out::operator= (const ::CORBA_AttributeDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AttributeDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_AttributeDescription_out &
CORBA_AttributeDescription_out::operator= (CORBA_AttributeDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AttributeDescription_out::operator ::CORBA_AttributeDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDescription *&
CORBA_AttributeDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttributeDescription *
CORBA_AttributeDescription_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ParameterDescription_var
// *************************************************************

ACE_INLINE
CORBA_ParameterDescription_var::CORBA_ParameterDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ParameterDescription_var::CORBA_ParameterDescription_var (CORBA_ParameterDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ParameterDescription_var::CORBA_ParameterDescription_var (const ::CORBA_ParameterDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ParameterDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ParameterDescription_var::~CORBA_ParameterDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ParameterDescription_var &
CORBA_ParameterDescription_var::operator= (CORBA_ParameterDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ParameterDescription_var &
CORBA_ParameterDescription_var::operator= (const ::CORBA_ParameterDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ParameterDescription *deep_copy =
            new CORBA_ParameterDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ParameterDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ParameterDescription *
CORBA_ParameterDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParameterDescription *
CORBA_ParameterDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_ParameterDescription_var::operator const ::CORBA_ParameterDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ParameterDescription_var::operator ::CORBA_ParameterDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_ParameterDescription_var::operator ::CORBA_ParameterDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ParameterDescription_var::operator ::CORBA_ParameterDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_ParameterDescription &
CORBA_ParameterDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ParameterDescription &
CORBA_ParameterDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ParameterDescription *&
CORBA_ParameterDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParameterDescription *
CORBA_ParameterDescription_var::_retn (void)
{
  ::CORBA_ParameterDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ParameterDescription *
CORBA_ParameterDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ParameterDescription_out
// *************************************************************

ACE_INLINE
CORBA_ParameterDescription_out::CORBA_ParameterDescription_out (::CORBA_ParameterDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ParameterDescription_out::CORBA_ParameterDescription_out (CORBA_ParameterDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ParameterDescription_out::CORBA_ParameterDescription_out (const ::CORBA_ParameterDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ParameterDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_ParameterDescription_out &
CORBA_ParameterDescription_out::operator= (const ::CORBA_ParameterDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ParameterDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_ParameterDescription_out &
CORBA_ParameterDescription_out::operator= (CORBA_ParameterDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ParameterDescription_out::operator ::CORBA_ParameterDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParameterDescription *&
CORBA_ParameterDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParameterDescription *
CORBA_ParameterDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_PARDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_PARDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ParameterDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::ParameterDescription *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::ParameterDescription[size], 0);
    return retval;
  }
  
  ACE_INLINE void CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (CORBA::ParameterDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ParameterDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::ParameterDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (this->maximum_);
      CORBA::ParameterDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ParameterDescription *tmp = ACE_reinterpret_cast (CORBA::ParameterDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ParameterDescription *tmp1 = ACE_reinterpret_cast (CORBA::ParameterDescription *, this->buffer_);
    CORBA::ParameterDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ParameterDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ParameterDescription* tmp = ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ParameterDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ParameterDescription * const tmp = ACE_reinterpret_cast (CORBA::ParameterDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ParameterDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ParameterDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ParameterDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ParameterDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ParameterDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ParameterDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ParameterDescription *tmp = ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_PARDESCRIPTIONSEQ_CI_)
#define _CORBA_PARDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ParDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA_ParDescriptionSeq_var::CORBA_ParDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ParDescriptionSeq_var::CORBA_ParDescriptionSeq_var (CORBA_ParDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ParDescriptionSeq_var::CORBA_ParDescriptionSeq_var (const ::CORBA_ParDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ParDescriptionSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ParDescriptionSeq_var::~CORBA_ParDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ParDescriptionSeq_var &
CORBA_ParDescriptionSeq_var::operator= (CORBA_ParDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ParDescriptionSeq_var &
CORBA_ParDescriptionSeq_var::operator= (const ::CORBA_ParDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ParDescriptionSeq *deep_copy =
            new CORBA_ParDescriptionSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ParDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ParDescriptionSeq *
CORBA_ParDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParDescriptionSeq *
CORBA_ParDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ParDescriptionSeq_var::operator const ::CORBA_ParDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ParDescriptionSeq_var::operator ::CORBA_ParDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ParDescriptionSeq_var::operator ::CORBA_ParDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ParDescriptionSeq_var::operator ::CORBA_ParDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription &
CORBA_ParDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ParameterDescription &
CORBA_ParDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::ParameterDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_ParDescriptionSeq &
CORBA_ParDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ParDescriptionSeq &
CORBA_ParDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ParDescriptionSeq *&
CORBA_ParDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParDescriptionSeq *
CORBA_ParDescriptionSeq_var::_retn (void)
{
  ::CORBA_ParDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ParDescriptionSeq *
CORBA_ParDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ParDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA_ParDescriptionSeq_out::CORBA_ParDescriptionSeq_out (CORBA_ParDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ParDescriptionSeq_out::CORBA_ParDescriptionSeq_out (CORBA_ParDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ParDescriptionSeq_out::CORBA_ParDescriptionSeq_out (const ::CORBA_ParDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ParDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ParDescriptionSeq_out &
CORBA_ParDescriptionSeq_out::operator= (const ::CORBA_ParDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ParDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ParDescriptionSeq_out &
CORBA_ParDescriptionSeq_out::operator= (CORBA_ParDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ParDescriptionSeq_out::operator ::CORBA_ParDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParDescriptionSeq *&
CORBA_ParDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ParDescriptionSeq *
CORBA_ParDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription &
CORBA_ParDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONTEXTIDSEQ_CI_)
#define _CORBA_CONTEXTIDSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ContextIdSeq_var
// *************************************************************

ACE_INLINE
CORBA_ContextIdSeq_var::CORBA_ContextIdSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ContextIdSeq_var::CORBA_ContextIdSeq_var (CORBA_ContextIdSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ContextIdSeq_var::CORBA_ContextIdSeq_var (const ::CORBA_ContextIdSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ContextIdSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ContextIdSeq_var::~CORBA_ContextIdSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ContextIdSeq_var &
CORBA_ContextIdSeq_var::operator= (CORBA_ContextIdSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ContextIdSeq_var &
CORBA_ContextIdSeq_var::operator= (const ::CORBA_ContextIdSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ContextIdSeq *deep_copy =
            new CORBA_ContextIdSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ContextIdSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ContextIdSeq *
CORBA_ContextIdSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContextIdSeq *
CORBA_ContextIdSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ContextIdSeq_var::operator const ::CORBA_ContextIdSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ContextIdSeq_var::operator ::CORBA_ContextIdSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ContextIdSeq_var::operator ::CORBA_ContextIdSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ContextIdSeq_var::operator ::CORBA_ContextIdSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
CORBA_ContextIdSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_ContextIdSeq &
CORBA_ContextIdSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ContextIdSeq &
CORBA_ContextIdSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ContextIdSeq *&
CORBA_ContextIdSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContextIdSeq *
CORBA_ContextIdSeq_var::_retn (void)
{
  ::CORBA_ContextIdSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ContextIdSeq *
CORBA_ContextIdSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ContextIdSeq_out
// *************************************************************

ACE_INLINE
CORBA_ContextIdSeq_out::CORBA_ContextIdSeq_out (CORBA_ContextIdSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ContextIdSeq_out::CORBA_ContextIdSeq_out (CORBA_ContextIdSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ContextIdSeq_out::CORBA_ContextIdSeq_out (const ::CORBA_ContextIdSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ContextIdSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ContextIdSeq_out &
CORBA_ContextIdSeq_out::operator= (const ::CORBA_ContextIdSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ContextIdSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ContextIdSeq_out &
CORBA_ContextIdSeq_out::operator= (CORBA_ContextIdSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ContextIdSeq_out::operator ::CORBA_ContextIdSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContextIdSeq *&
CORBA_ContextIdSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContextIdSeq *
CORBA_ContextIdSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
CORBA_ContextIdSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_OPERATIONDEF___CI_)
#define _CORBA_OPERATIONDEF___CI_

ACE_INLINE
CORBA_OperationDef::CORBA_OperationDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_OperationDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_OPERATIONDEF___VAR_CI_)
#define _CORBA_OPERATIONDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_OperationDef_var
// *************************************************************

ACE_INLINE
CORBA_OperationDef_var::CORBA_OperationDef_var (void) // default constructor
  : ptr_ (CORBA_OperationDef::_nil ())
{}

ACE_INLINE ::CORBA_OperationDef_ptr
CORBA_OperationDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_OperationDef_var::CORBA_OperationDef_var (const ::CORBA_OperationDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_OperationDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_OperationDef_var::~CORBA_OperationDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_OperationDef_var &
CORBA_OperationDef_var::operator= (CORBA_OperationDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_OperationDef_var &
CORBA_OperationDef_var::operator= (const ::CORBA_OperationDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_OperationDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_OperationDef_var::operator const ::CORBA_OperationDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_OperationDef_var::operator ::CORBA_OperationDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr
CORBA_OperationDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr
CORBA_OperationDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr &
CORBA_OperationDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr &
CORBA_OperationDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_OperationDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr
CORBA_OperationDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_OperationDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_OperationDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_OPERATIONDEF___OUT_CI_)
#define _CORBA_OPERATIONDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_OperationDef_out
// *************************************************************

ACE_INLINE
CORBA_OperationDef_out::CORBA_OperationDef_out (CORBA_OperationDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_OperationDef::_nil ();
}

ACE_INLINE
CORBA_OperationDef_out::CORBA_OperationDef_out (CORBA_OperationDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_OperationDef::_nil ();
}

ACE_INLINE
CORBA_OperationDef_out::CORBA_OperationDef_out (const ::CORBA_OperationDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_OperationDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_OperationDef_out &
CORBA_OperationDef_out::operator= (const ::CORBA_OperationDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_OperationDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_OperationDef_out &
CORBA_OperationDef_out::operator= (const ::CORBA_OperationDef_var &p)
{
  this->ptr_ = ::CORBA_OperationDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_OperationDef_out &
CORBA_OperationDef_out::operator= (CORBA_OperationDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_OperationDef_out::operator ::CORBA_OperationDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr &
CORBA_OperationDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDef_ptr
CORBA_OperationDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_OperationDescription_var
// *************************************************************

ACE_INLINE
CORBA_OperationDescription_var::CORBA_OperationDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_OperationDescription_var::CORBA_OperationDescription_var (CORBA_OperationDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_OperationDescription_var::CORBA_OperationDescription_var (const ::CORBA_OperationDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_OperationDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_OperationDescription_var::~CORBA_OperationDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_OperationDescription_var &
CORBA_OperationDescription_var::operator= (CORBA_OperationDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_OperationDescription_var &
CORBA_OperationDescription_var::operator= (const ::CORBA_OperationDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_OperationDescription *deep_copy =
            new CORBA_OperationDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_OperationDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_OperationDescription *
CORBA_OperationDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDescription *
CORBA_OperationDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_OperationDescription_var::operator const ::CORBA_OperationDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_OperationDescription_var::operator ::CORBA_OperationDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_OperationDescription_var::operator ::CORBA_OperationDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_OperationDescription_var::operator ::CORBA_OperationDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_OperationDescription &
CORBA_OperationDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_OperationDescription &
CORBA_OperationDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_OperationDescription *&
CORBA_OperationDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDescription *
CORBA_OperationDescription_var::_retn (void)
{
  ::CORBA_OperationDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_OperationDescription *
CORBA_OperationDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_OperationDescription_out
// *************************************************************

ACE_INLINE
CORBA_OperationDescription_out::CORBA_OperationDescription_out (::CORBA_OperationDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_OperationDescription_out::CORBA_OperationDescription_out (CORBA_OperationDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_OperationDescription_out::CORBA_OperationDescription_out (const ::CORBA_OperationDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_OperationDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_OperationDescription_out &
CORBA_OperationDescription_out::operator= (const ::CORBA_OperationDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_OperationDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_OperationDescription_out &
CORBA_OperationDescription_out::operator= (CORBA_OperationDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_OperationDescription_out::operator ::CORBA_OperationDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDescription *&
CORBA_OperationDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OperationDescription *
CORBA_OperationDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_REPOSITORYIDSEQ_CI_)
#define _CORBA_REPOSITORYIDSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_RepositoryIdSeq_var
// *************************************************************

ACE_INLINE
CORBA_RepositoryIdSeq_var::CORBA_RepositoryIdSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_RepositoryIdSeq_var::CORBA_RepositoryIdSeq_var (CORBA_RepositoryIdSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_RepositoryIdSeq_var::CORBA_RepositoryIdSeq_var (const ::CORBA_RepositoryIdSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_RepositoryIdSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_RepositoryIdSeq_var::~CORBA_RepositoryIdSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_RepositoryIdSeq_var &
CORBA_RepositoryIdSeq_var::operator= (CORBA_RepositoryIdSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_RepositoryIdSeq_var &
CORBA_RepositoryIdSeq_var::operator= (const ::CORBA_RepositoryIdSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_RepositoryIdSeq *deep_copy =
            new CORBA_RepositoryIdSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_RepositoryIdSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_RepositoryIdSeq *
CORBA_RepositoryIdSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_RepositoryIdSeq *
CORBA_RepositoryIdSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_RepositoryIdSeq_var::operator const ::CORBA_RepositoryIdSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_RepositoryIdSeq_var::operator ::CORBA_RepositoryIdSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_RepositoryIdSeq_var::operator ::CORBA_RepositoryIdSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_RepositoryIdSeq_var::operator ::CORBA_RepositoryIdSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
CORBA_RepositoryIdSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_RepositoryIdSeq &
CORBA_RepositoryIdSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_RepositoryIdSeq &
CORBA_RepositoryIdSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_RepositoryIdSeq *&
CORBA_RepositoryIdSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_RepositoryIdSeq *
CORBA_RepositoryIdSeq_var::_retn (void)
{
  ::CORBA_RepositoryIdSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_RepositoryIdSeq *
CORBA_RepositoryIdSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_RepositoryIdSeq_out
// *************************************************************

ACE_INLINE
CORBA_RepositoryIdSeq_out::CORBA_RepositoryIdSeq_out (CORBA_RepositoryIdSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_RepositoryIdSeq_out::CORBA_RepositoryIdSeq_out (CORBA_RepositoryIdSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_RepositoryIdSeq_out::CORBA_RepositoryIdSeq_out (const ::CORBA_RepositoryIdSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_RepositoryIdSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_RepositoryIdSeq_out &
CORBA_RepositoryIdSeq_out::operator= (const ::CORBA_RepositoryIdSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_RepositoryIdSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_RepositoryIdSeq_out &
CORBA_RepositoryIdSeq_out::operator= (CORBA_RepositoryIdSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_RepositoryIdSeq_out::operator ::CORBA_RepositoryIdSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_RepositoryIdSeq *&
CORBA_RepositoryIdSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_RepositoryIdSeq *
CORBA_RepositoryIdSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
CORBA_RepositoryIdSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_OPDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_OPDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::OperationDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::OperationDescription *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::OperationDescription[size], 0);
    return retval;
  }
  
  ACE_INLINE void CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (CORBA::OperationDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::OperationDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::OperationDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (this->maximum_);
      CORBA::OperationDescription * const tmp2 = ACE_reinterpret_cast (CORBA::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::OperationDescription *tmp = ACE_reinterpret_cast (CORBA::OperationDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::OperationDescription *tmp1 = ACE_reinterpret_cast (CORBA::OperationDescription *, this->buffer_);
    CORBA::OperationDescription * const tmp2 = ACE_reinterpret_cast (CORBA::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::OperationDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::OperationDescription* tmp = ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::OperationDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::OperationDescription * const tmp = ACE_reinterpret_cast (CORBA::OperationDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::OperationDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::OperationDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::OperationDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::OperationDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::OperationDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::OperationDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::OperationDescription *tmp = ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_OPDESCRIPTIONSEQ_CI_)
#define _CORBA_OPDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_OpDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA_OpDescriptionSeq_var::CORBA_OpDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_OpDescriptionSeq_var::CORBA_OpDescriptionSeq_var (CORBA_OpDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_OpDescriptionSeq_var::CORBA_OpDescriptionSeq_var (const ::CORBA_OpDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_OpDescriptionSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_OpDescriptionSeq_var::~CORBA_OpDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_OpDescriptionSeq_var &
CORBA_OpDescriptionSeq_var::operator= (CORBA_OpDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_OpDescriptionSeq_var &
CORBA_OpDescriptionSeq_var::operator= (const ::CORBA_OpDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_OpDescriptionSeq *deep_copy =
            new CORBA_OpDescriptionSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_OpDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_OpDescriptionSeq *
CORBA_OpDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OpDescriptionSeq *
CORBA_OpDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_OpDescriptionSeq_var::operator const ::CORBA_OpDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_OpDescriptionSeq_var::operator ::CORBA_OpDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_OpDescriptionSeq_var::operator ::CORBA_OpDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_OpDescriptionSeq_var::operator ::CORBA_OpDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription &
CORBA_OpDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::OperationDescription &
CORBA_OpDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::OperationDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_OpDescriptionSeq &
CORBA_OpDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_OpDescriptionSeq &
CORBA_OpDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_OpDescriptionSeq *&
CORBA_OpDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_OpDescriptionSeq *
CORBA_OpDescriptionSeq_var::_retn (void)
{
  ::CORBA_OpDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_OpDescriptionSeq *
CORBA_OpDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_OpDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA_OpDescriptionSeq_out::CORBA_OpDescriptionSeq_out (CORBA_OpDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_OpDescriptionSeq_out::CORBA_OpDescriptionSeq_out (CORBA_OpDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_OpDescriptionSeq_out::CORBA_OpDescriptionSeq_out (const ::CORBA_OpDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_OpDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_OpDescriptionSeq_out &
CORBA_OpDescriptionSeq_out::operator= (const ::CORBA_OpDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_OpDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_OpDescriptionSeq_out &
CORBA_OpDescriptionSeq_out::operator= (CORBA_OpDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_OpDescriptionSeq_out::operator ::CORBA_OpDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OpDescriptionSeq *&
CORBA_OpDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_OpDescriptionSeq *
CORBA_OpDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription &
CORBA_OpDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_ATTRDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_ATTRDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::AttributeDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA::AttributeDescription *retval = 0;
    ACE_NEW_RETURN (retval, CORBA::AttributeDescription[size], 0);
    return retval;
  }
  
  ACE_INLINE void CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (CORBA::AttributeDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::AttributeDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA::AttributeDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (this->maximum_);
      CORBA::AttributeDescription * const tmp2 = ACE_reinterpret_cast (CORBA::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::AttributeDescription *tmp = ACE_reinterpret_cast (CORBA::AttributeDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::AttributeDescription *tmp1 = ACE_reinterpret_cast (CORBA::AttributeDescription *, this->buffer_);
    CORBA::AttributeDescription * const tmp2 = ACE_reinterpret_cast (CORBA::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::AttributeDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::AttributeDescription* tmp = ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::AttributeDescription &
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::AttributeDescription * const tmp = ACE_reinterpret_cast (CORBA::AttributeDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::AttributeDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::AttributeDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::AttributeDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::AttributeDescription *
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::AttributeDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::AttributeDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::AttributeDescription *tmp = ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_ATTRDESCRIPTIONSEQ_CI_)
#define _CORBA_ATTRDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_AttrDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA_AttrDescriptionSeq_var::CORBA_AttrDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_AttrDescriptionSeq_var::CORBA_AttrDescriptionSeq_var (CORBA_AttrDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_AttrDescriptionSeq_var::CORBA_AttrDescriptionSeq_var (const ::CORBA_AttrDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_AttrDescriptionSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_AttrDescriptionSeq_var::~CORBA_AttrDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_AttrDescriptionSeq_var &
CORBA_AttrDescriptionSeq_var::operator= (CORBA_AttrDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq_var &
CORBA_AttrDescriptionSeq_var::operator= (const ::CORBA_AttrDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_AttrDescriptionSeq *deep_copy =
            new CORBA_AttrDescriptionSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_AttrDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_AttrDescriptionSeq *
CORBA_AttrDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq *
CORBA_AttrDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_AttrDescriptionSeq_var::operator const ::CORBA_AttrDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_AttrDescriptionSeq_var::operator ::CORBA_AttrDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_AttrDescriptionSeq_var::operator ::CORBA_AttrDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_AttrDescriptionSeq_var::operator ::CORBA_AttrDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription &
CORBA_AttrDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::AttributeDescription &
CORBA_AttrDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::AttributeDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_AttrDescriptionSeq &
CORBA_AttrDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq &
CORBA_AttrDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_AttrDescriptionSeq *&
CORBA_AttrDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq *
CORBA_AttrDescriptionSeq_var::_retn (void)
{
  ::CORBA_AttrDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq *
CORBA_AttrDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_AttrDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA_AttrDescriptionSeq_out::CORBA_AttrDescriptionSeq_out (CORBA_AttrDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AttrDescriptionSeq_out::CORBA_AttrDescriptionSeq_out (CORBA_AttrDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AttrDescriptionSeq_out::CORBA_AttrDescriptionSeq_out (const ::CORBA_AttrDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AttrDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_AttrDescriptionSeq_out &
CORBA_AttrDescriptionSeq_out::operator= (const ::CORBA_AttrDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AttrDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq_out &
CORBA_AttrDescriptionSeq_out::operator= (CORBA_AttrDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AttrDescriptionSeq_out::operator ::CORBA_AttrDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq *&
CORBA_AttrDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AttrDescriptionSeq *
CORBA_AttrDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription &
CORBA_AttrDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::InterfaceDef::FullInterfaceDescription_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (FullInterfaceDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (const ::CORBA::InterfaceDef::FullInterfaceDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA::InterfaceDef::FullInterfaceDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::~FullInterfaceDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_var &
CORBA::InterfaceDef::FullInterfaceDescription_var::operator= (FullInterfaceDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription_var &
CORBA::InterfaceDef::FullInterfaceDescription_var::operator= (const ::CORBA::InterfaceDef::FullInterfaceDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          FullInterfaceDescription *deep_copy =
            new FullInterfaceDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              FullInterfaceDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator const ::CORBA::InterfaceDef::FullInterfaceDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator ::CORBA::InterfaceDef::FullInterfaceDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator ::CORBA::InterfaceDef::FullInterfaceDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator ::CORBA::InterfaceDef::FullInterfaceDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::InterfaceDef::FullInterfaceDescription &
CORBA::InterfaceDef::FullInterfaceDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription &
CORBA::InterfaceDef::FullInterfaceDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *&
CORBA::InterfaceDef::FullInterfaceDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::_retn (void)
{
  ::CORBA::InterfaceDef::FullInterfaceDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::InterfaceDef::FullInterfaceDescription_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (::CORBA::InterfaceDef::FullInterfaceDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (FullInterfaceDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (const ::CORBA::InterfaceDef::FullInterfaceDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FullInterfaceDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_out &
CORBA::InterfaceDef::FullInterfaceDescription_out::operator= (const ::CORBA::InterfaceDef::FullInterfaceDescription_out &p)
{
  this->ptr_ = ACE_const_cast (FullInterfaceDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_out &
CORBA::InterfaceDef::FullInterfaceDescription_out::operator= (FullInterfaceDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDef::FullInterfaceDescription_out::operator ::CORBA::InterfaceDef::FullInterfaceDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *&
CORBA::InterfaceDef::FullInterfaceDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_INTERFACEDEF___CI_)
#define _CORBA_INTERFACEDEF___CI_

ACE_INLINE
CORBA_InterfaceDef::CORBA_InterfaceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_InterfaceDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_INTERFACEDEF___VAR_CI_)
#define _CORBA_INTERFACEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_InterfaceDef_var
// *************************************************************

ACE_INLINE
CORBA_InterfaceDef_var::CORBA_InterfaceDef_var (void) // default constructor
  : ptr_ (CORBA_InterfaceDef::_nil ())
{}

ACE_INLINE ::CORBA_InterfaceDef_ptr
CORBA_InterfaceDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_InterfaceDef_var::CORBA_InterfaceDef_var (const ::CORBA_InterfaceDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_InterfaceDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_InterfaceDef_var::~CORBA_InterfaceDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_InterfaceDef_var &
CORBA_InterfaceDef_var::operator= (CORBA_InterfaceDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_InterfaceDef_var &
CORBA_InterfaceDef_var::operator= (const ::CORBA_InterfaceDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_InterfaceDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_InterfaceDef_var::operator const ::CORBA_InterfaceDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDef_var::operator ::CORBA_InterfaceDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr
CORBA_InterfaceDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr
CORBA_InterfaceDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr &
CORBA_InterfaceDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr &
CORBA_InterfaceDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_InterfaceDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr
CORBA_InterfaceDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_InterfaceDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_InterfaceDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_INTERFACEDEF___OUT_CI_)
#define _CORBA_INTERFACEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_InterfaceDef_out
// *************************************************************

ACE_INLINE
CORBA_InterfaceDef_out::CORBA_InterfaceDef_out (CORBA_InterfaceDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_InterfaceDef::_nil ();
}

ACE_INLINE
CORBA_InterfaceDef_out::CORBA_InterfaceDef_out (CORBA_InterfaceDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_InterfaceDef::_nil ();
}

ACE_INLINE
CORBA_InterfaceDef_out::CORBA_InterfaceDef_out (const ::CORBA_InterfaceDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_InterfaceDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_InterfaceDef_out &
CORBA_InterfaceDef_out::operator= (const ::CORBA_InterfaceDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_InterfaceDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_InterfaceDef_out &
CORBA_InterfaceDef_out::operator= (const ::CORBA_InterfaceDef_var &p)
{
  this->ptr_ = ::CORBA_InterfaceDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_InterfaceDef_out &
CORBA_InterfaceDef_out::operator= (CORBA_InterfaceDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_InterfaceDef_out::operator ::CORBA_InterfaceDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr &
CORBA_InterfaceDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDef_ptr
CORBA_InterfaceDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_InterfaceDescription_var
// *************************************************************

ACE_INLINE
CORBA_InterfaceDescription_var::CORBA_InterfaceDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_InterfaceDescription_var::CORBA_InterfaceDescription_var (CORBA_InterfaceDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_InterfaceDescription_var::CORBA_InterfaceDescription_var (const ::CORBA_InterfaceDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_InterfaceDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDescription_var::~CORBA_InterfaceDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_InterfaceDescription_var &
CORBA_InterfaceDescription_var::operator= (CORBA_InterfaceDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_InterfaceDescription_var &
CORBA_InterfaceDescription_var::operator= (const ::CORBA_InterfaceDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_InterfaceDescription *deep_copy =
            new CORBA_InterfaceDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_InterfaceDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_InterfaceDescription *
CORBA_InterfaceDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDescription *
CORBA_InterfaceDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_InterfaceDescription_var::operator const ::CORBA_InterfaceDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_InterfaceDescription_var::operator ::CORBA_InterfaceDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_InterfaceDescription_var::operator ::CORBA_InterfaceDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_InterfaceDescription_var::operator ::CORBA_InterfaceDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_InterfaceDescription &
CORBA_InterfaceDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDescription &
CORBA_InterfaceDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_InterfaceDescription *&
CORBA_InterfaceDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDescription *
CORBA_InterfaceDescription_var::_retn (void)
{
  ::CORBA_InterfaceDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_InterfaceDescription *
CORBA_InterfaceDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_InterfaceDescription_out
// *************************************************************

ACE_INLINE
CORBA_InterfaceDescription_out::CORBA_InterfaceDescription_out (::CORBA_InterfaceDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDescription_out::CORBA_InterfaceDescription_out (CORBA_InterfaceDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDescription_out::CORBA_InterfaceDescription_out (const ::CORBA_InterfaceDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_InterfaceDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_InterfaceDescription_out &
CORBA_InterfaceDescription_out::operator= (const ::CORBA_InterfaceDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_InterfaceDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_InterfaceDescription_out &
CORBA_InterfaceDescription_out::operator= (CORBA_InterfaceDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_InterfaceDescription_out::operator ::CORBA_InterfaceDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDescription *&
CORBA_InterfaceDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDescription *
CORBA_InterfaceDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_ABSTRACTINTERFACEDEF___CI_)
#define _CORBA_ABSTRACTINTERFACEDEF___CI_

ACE_INLINE
CORBA_AbstractInterfaceDef::CORBA_AbstractInterfaceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_AbstractInterfaceDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_ABSTRACTINTERFACEDEF___VAR_CI_)
#define _CORBA_ABSTRACTINTERFACEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_AbstractInterfaceDef_var
// *************************************************************

ACE_INLINE
CORBA_AbstractInterfaceDef_var::CORBA_AbstractInterfaceDef_var (void) // default constructor
  : ptr_ (CORBA_AbstractInterfaceDef::_nil ())
{}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr
CORBA_AbstractInterfaceDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_AbstractInterfaceDef_var::CORBA_AbstractInterfaceDef_var (const ::CORBA_AbstractInterfaceDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_AbstractInterfaceDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_AbstractInterfaceDef_var::~CORBA_AbstractInterfaceDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_AbstractInterfaceDef_var &
CORBA_AbstractInterfaceDef_var::operator= (CORBA_AbstractInterfaceDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_AbstractInterfaceDef_var &
CORBA_AbstractInterfaceDef_var::operator= (const ::CORBA_AbstractInterfaceDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_AbstractInterfaceDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_AbstractInterfaceDef_var::operator const ::CORBA_AbstractInterfaceDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDef_var::operator ::CORBA_AbstractInterfaceDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr
CORBA_AbstractInterfaceDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr
CORBA_AbstractInterfaceDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr &
CORBA_AbstractInterfaceDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr &
CORBA_AbstractInterfaceDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_AbstractInterfaceDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr
CORBA_AbstractInterfaceDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_AbstractInterfaceDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_AbstractInterfaceDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ABSTRACTINTERFACEDEF___OUT_CI_)
#define _CORBA_ABSTRACTINTERFACEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_AbstractInterfaceDef_out
// *************************************************************

ACE_INLINE
CORBA_AbstractInterfaceDef_out::CORBA_AbstractInterfaceDef_out (CORBA_AbstractInterfaceDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_AbstractInterfaceDef::_nil ();
}

ACE_INLINE
CORBA_AbstractInterfaceDef_out::CORBA_AbstractInterfaceDef_out (CORBA_AbstractInterfaceDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_AbstractInterfaceDef::_nil ();
}

ACE_INLINE
CORBA_AbstractInterfaceDef_out::CORBA_AbstractInterfaceDef_out (const ::CORBA_AbstractInterfaceDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AbstractInterfaceDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_AbstractInterfaceDef_out &
CORBA_AbstractInterfaceDef_out::operator= (const ::CORBA_AbstractInterfaceDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AbstractInterfaceDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_AbstractInterfaceDef_out &
CORBA_AbstractInterfaceDef_out::operator= (const ::CORBA_AbstractInterfaceDef_var &p)
{
  this->ptr_ = ::CORBA_AbstractInterfaceDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_AbstractInterfaceDef_out &
CORBA_AbstractInterfaceDef_out::operator= (CORBA_AbstractInterfaceDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AbstractInterfaceDef_out::operator ::CORBA_AbstractInterfaceDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr &
CORBA_AbstractInterfaceDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDef_ptr
CORBA_AbstractInterfaceDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_CORBA_LOCALINTERFACEDEF___CI_)
#define _CORBA_LOCALINTERFACEDEF___CI_

ACE_INLINE
CORBA_LocalInterfaceDef::CORBA_LocalInterfaceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_LocalInterfaceDef_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#if !defined (_CORBA_LOCALINTERFACEDEF___VAR_CI_)
#define _CORBA_LOCALINTERFACEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA_LocalInterfaceDef_var
// *************************************************************

ACE_INLINE
CORBA_LocalInterfaceDef_var::CORBA_LocalInterfaceDef_var (void) // default constructor
  : ptr_ (CORBA_LocalInterfaceDef::_nil ())
{}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr
CORBA_LocalInterfaceDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA_LocalInterfaceDef_var::CORBA_LocalInterfaceDef_var (const ::CORBA_LocalInterfaceDef_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_LocalInterfaceDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA_LocalInterfaceDef_var::~CORBA_LocalInterfaceDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA_LocalInterfaceDef_var &
CORBA_LocalInterfaceDef_var::operator= (CORBA_LocalInterfaceDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA_LocalInterfaceDef_var &
CORBA_LocalInterfaceDef_var::operator= (const ::CORBA_LocalInterfaceDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_LocalInterfaceDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA_LocalInterfaceDef_var::operator const ::CORBA_LocalInterfaceDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDef_var::operator ::CORBA_LocalInterfaceDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr
CORBA_LocalInterfaceDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr
CORBA_LocalInterfaceDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr &
CORBA_LocalInterfaceDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr &
CORBA_LocalInterfaceDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_LocalInterfaceDef::_nil ();
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr
CORBA_LocalInterfaceDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_LocalInterfaceDef_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_LocalInterfaceDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_LOCALINTERFACEDEF___OUT_CI_)
#define _CORBA_LOCALINTERFACEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA_LocalInterfaceDef_out
// *************************************************************

ACE_INLINE
CORBA_LocalInterfaceDef_out::CORBA_LocalInterfaceDef_out (CORBA_LocalInterfaceDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_LocalInterfaceDef::_nil ();
}

ACE_INLINE
CORBA_LocalInterfaceDef_out::CORBA_LocalInterfaceDef_out (CORBA_LocalInterfaceDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_LocalInterfaceDef::_nil ();
}

ACE_INLINE
CORBA_LocalInterfaceDef_out::CORBA_LocalInterfaceDef_out (const ::CORBA_LocalInterfaceDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_LocalInterfaceDef_out &, p).ptr_)
{}

ACE_INLINE ::CORBA_LocalInterfaceDef_out &
CORBA_LocalInterfaceDef_out::operator= (const ::CORBA_LocalInterfaceDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_LocalInterfaceDef_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_LocalInterfaceDef_out &
CORBA_LocalInterfaceDef_out::operator= (const ::CORBA_LocalInterfaceDef_var &p)
{
  this->ptr_ = ::CORBA_LocalInterfaceDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA_LocalInterfaceDef_out &
CORBA_LocalInterfaceDef_out::operator= (CORBA_LocalInterfaceDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_LocalInterfaceDef_out::operator ::CORBA_LocalInterfaceDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr &
CORBA_LocalInterfaceDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDef_ptr
CORBA_LocalInterfaceDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::PrimitiveDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::PrimitiveDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StringDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::SequenceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::SequenceDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ArrayDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ArrayDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::WstringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::WstringDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::FixedDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::FixedDef_ptr &
  );
ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::PrimitiveKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::PrimitiveKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::PrimitiveKind, _tao_temp);
    }
  
  return _tao_result;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Repository_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Repository_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Repository_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::Repository_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::Repository::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ModuleDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ModuleDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ModuleDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ModuleDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ModuleDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ModuleDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ModuleDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ConstantDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ConstantDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ConstantDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ConstantDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ConstantDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ConstantDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ConstantDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StructDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StructDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StructDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::StructDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::StructDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::UnionDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::UnionDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::UnionDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::UnionDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::UnionDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::EnumDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::EnumDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::EnumDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::EnumDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::EnumDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::AliasDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::AliasDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AliasDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::AliasDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::AliasDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::NativeDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::NativeDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::NativeDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::NativeDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::NativeDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::PrimitiveDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::PrimitiveDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::PrimitiveDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::PrimitiveDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::PrimitiveDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StringDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StringDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::StringDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::StringDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::WstringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::WstringDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::WstringDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::WstringDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::WstringDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::SequenceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::SequenceDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::SequenceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::SequenceDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::SequenceDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ArrayDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ArrayDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ArrayDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ArrayDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ArrayDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExceptionDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ExceptionDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ExceptionDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ExceptionDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ExceptionDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_ExceptionDefSeq_I_
#define _TAO_CDR_OP_CORBA_ExceptionDefSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDefSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDefSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ExceptionDefSeq_I_ */


#if !defined _TAO_CDR_OP_CORBA_ExcDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_ExcDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ExcDescriptionSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ExcDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ExcDescriptionSeq_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::AttributeMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::AttributeMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::AttributeMode, _tao_temp);
    }
  
  return _tao_result;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::AttributeDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::AttributeDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AttributeDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::AttributeDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::AttributeDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::AttributeDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::AttributeDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::OperationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::OperationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::OperationMode, _tao_temp);
    }
  
  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ParameterMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ParameterMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::ParameterMode, _tao_temp);
    }
  
  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ParameterDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ()) &&
    (strm << _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ParameterDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ()) &&
    (strm >> _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_ParDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_ParDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ParDescriptionSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ParDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ParDescriptionSeq_I_ */


#if !defined _TAO_CDR_OP_CORBA_ContextIdSeq_I_
#define _TAO_CDR_OP_CORBA_ContextIdSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ContextIdSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ContextIdSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ContextIdSeq_I_ */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::OperationDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::OperationDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::OperationDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::OperationDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::OperationDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::OperationDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.result.in ()) &&
    (strm << _tao_aggregate.mode) &&
    (strm << _tao_aggregate.contexts) &&
    (strm << _tao_aggregate.parameters) &&
    (strm << _tao_aggregate.exceptions)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::OperationDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.result.out ()) &&
    (strm >> _tao_aggregate.mode) &&
    (strm >> _tao_aggregate.contexts) &&
    (strm >> _tao_aggregate.parameters) &&
    (strm >> _tao_aggregate.exceptions)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_RepositoryIdSeq_I_
#define _TAO_CDR_OP_CORBA_RepositoryIdSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::RepositoryIdSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::RepositoryIdSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_RepositoryIdSeq_I_ */


#if !defined _TAO_CDR_OP_CORBA_OpDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_OpDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::OpDescriptionSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::OpDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_OpDescriptionSeq_I_ */


#if !defined _TAO_CDR_OP_CORBA_AttrDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_AttrDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::AttrDescriptionSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::AttrDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_AttrDescriptionSeq_I_ */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::InterfaceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::InterfaceDef_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::InterfaceDef::FullInterfaceDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.operations) &&
    (strm << _tao_aggregate.attributes) &&
    (strm << _tao_aggregate.base_interfaces) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::InterfaceDef::FullInterfaceDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.operations) &&
    (strm >> _tao_aggregate.attributes) &&
    (strm >> _tao_aggregate.base_interfaces) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::InterfaceDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::InterfaceDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.base_interfaces)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::InterfaceDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.base_interfaces)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::AbstractInterfaceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::AbstractInterfaceDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AbstractInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::AbstractInterfaceDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::AbstractInterfaceDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::LocalInterfaceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::LocalInterfaceDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::LocalInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::LocalInterfaceDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::LocalInterfaceDef::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

