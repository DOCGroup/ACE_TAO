// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:302


#include "IFR_BaseC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Any_Arg_Traits.h"
#include "ace/OS_NS_string.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IFR_BaseC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:69

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:702

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_CS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::DefinitionKind>
    : public
        Basic_Arg_Traits_T<
            CORBA::DefinitionKind
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Contained>
    : public
        Object_Arg_Traits_T<
            CORBA::Contained_ptr,
            CORBA::Contained_var,
            CORBA::Contained_out,
            TAO::Objref_Traits<CORBA::Contained>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:743

#if !defined (_CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_CS_)
#define _CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Contained::Description>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Contained::Description,
            CORBA::Contained::Description_var,
            CORBA::Contained::Description_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_REPOSITORY__ARG_TRAITS_CS_)
#define _CORBA_REPOSITORY__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Repository>
    : public
        Object_Arg_Traits_T<
            CORBA::Repository_ptr,
            CORBA::Repository_var,
            CORBA::Repository_out,
            TAO::Objref_Traits<CORBA::Repository>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_CS_)
#define _CORBA_CONTAINER__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Container>
    : public
        Object_Arg_Traits_T<
            CORBA::Container_ptr,
            CORBA::Container_var,
            CORBA::Container_out,
            TAO::Objref_Traits<CORBA::Container>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Container::DescriptionSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Container::DescriptionSeq,
            CORBA::Container::DescriptionSeq_var,
            CORBA::Container::DescriptionSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_MODULEDEF__ARG_TRAITS_CS_)
#define _CORBA_MODULEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ModuleDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ModuleDef_ptr,
            CORBA::ModuleDef_var,
            CORBA::ModuleDef_out,
            TAO::Objref_Traits<CORBA::ModuleDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONSTANTDEF__ARG_TRAITS_CS_)
#define _CORBA_CONSTANTDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ConstantDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ConstantDef_ptr,
            CORBA::ConstantDef_var,
            CORBA::ConstantDef_out,
            TAO::Objref_Traits<CORBA::ConstantDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::IDLType>
    : public
        Object_Arg_Traits_T<
            CORBA::IDLType_ptr,
            CORBA::IDLType_var,
            CORBA::IDLType_out,
            TAO::Objref_Traits<CORBA::IDLType>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_STRUCTDEF__ARG_TRAITS_CS_)
#define _CORBA_STRUCTDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::StructDef>
    : public
        Object_Arg_Traits_T<
            CORBA::StructDef_ptr,
            CORBA::StructDef_var,
            CORBA::StructDef_out,
            TAO::Objref_Traits<CORBA::StructDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_UNIONDEF__ARG_TRAITS_CS_)
#define _CORBA_UNIONDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::UnionDef>
    : public
        Object_Arg_Traits_T<
            CORBA::UnionDef_ptr,
            CORBA::UnionDef_var,
            CORBA::UnionDef_out,
            TAO::Objref_Traits<CORBA::UnionDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMDEF__ARG_TRAITS_CS_)
#define _CORBA_ENUMDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::EnumDef>
    : public
        Object_Arg_Traits_T<
            CORBA::EnumDef_ptr,
            CORBA::EnumDef_var,
            CORBA::EnumDef_out,
            TAO::Objref_Traits<CORBA::EnumDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ALIASDEF__ARG_TRAITS_CS_)
#define _CORBA_ALIASDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AliasDef>
    : public
        Object_Arg_Traits_T<
            CORBA::AliasDef_ptr,
            CORBA::AliasDef_var,
            CORBA::AliasDef_out,
            TAO::Objref_Traits<CORBA::AliasDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::InterfaceDef_ptr,
            CORBA::InterfaceDef_var,
            CORBA::InterfaceDef_out,
            TAO::Objref_Traits<CORBA::InterfaceDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceDefSeq,
            CORBA::InterfaceDefSeq_var,
            CORBA::InterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_EXCEPTIONDEF__ARG_TRAITS_CS_)
#define _CORBA_EXCEPTIONDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExceptionDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ExceptionDef_ptr,
            CORBA::ExceptionDef_var,
            CORBA::ExceptionDef_out,
            TAO::Objref_Traits<CORBA::ExceptionDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_NATIVEDEF__ARG_TRAITS_CS_)
#define _CORBA_NATIVEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::NativeDef>
    : public
        Object_Arg_Traits_T<
            CORBA::NativeDef_ptr,
            CORBA::NativeDef_var,
            CORBA::NativeDef_out,
            TAO::Objref_Traits<CORBA::NativeDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ValueDef_ptr,
            CORBA::ValueDef_var,
            CORBA::ValueDef_out,
            TAO::Objref_Traits<CORBA::ValueDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ValueDefSeq,
            CORBA::ValueDefSeq_var,
            CORBA::ValueDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEBOXDEF__ARG_TRAITS_CS_)
#define _CORBA_VALUEBOXDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueBoxDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ValueBoxDef_ptr,
            CORBA::ValueBoxDef_var,
            CORBA::ValueBoxDef_out,
            TAO::Objref_Traits<CORBA::ValueBoxDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AbstractInterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::AbstractInterfaceDef_ptr,
            CORBA::AbstractInterfaceDef_var,
            CORBA::AbstractInterfaceDef_out,
            TAO::Objref_Traits<CORBA::AbstractInterfaceDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AbstractInterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::AbstractInterfaceDefSeq,
            CORBA::AbstractInterfaceDefSeq_var,
            CORBA::AbstractInterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_LOCALINTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_LOCALINTERFACEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::LocalInterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::LocalInterfaceDef_ptr,
            CORBA::LocalInterfaceDef_var,
            CORBA::LocalInterfaceDef_out,
            TAO::Objref_Traits<CORBA::LocalInterfaceDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_EXTVALUEDEF__ARG_TRAITS_CS_)
#define _CORBA_EXTVALUEDEF__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtValueDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ExtValueDef_ptr,
            CORBA::ExtValueDef_var,
            CORBA::ExtValueDef_out,
            TAO::Objref_Traits<CORBA::ExtValueDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_CONTAINEDSEQ__ARG_TRAITS_CS_)
#define _CORBA_CONTAINEDSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ContainedSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ContainedSeq,
            CORBA::ContainedSeq_var,
            CORBA::ContainedSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::StructMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::StructMemberSeq,
            CORBA::StructMemberSeq_var,
            CORBA::StructMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_CS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InitializerSeq,
            CORBA::InitializerSeq_var,
            CORBA::InitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtInitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExtInitializerSeq,
            CORBA::ExtInitializerSeq_var,
            CORBA::ExtInitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::UnionMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::UnionMemberSeq,
            CORBA::UnionMemberSeq_var,
            CORBA::UnionMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be\be_visitor_arg_traits.cpp:492

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_CS_
  
  template<>
  class TAO_IFR_Client_Export Arg_Traits<CORBA::EnumMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::EnumMemberSeq,
            CORBA::EnumMemberSeq_var,
            CORBA::EnumMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
}


// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBA::IRObject.

CORBA::IRObject_ptr
TAO::Objref_Traits<CORBA::IRObject>::duplicate (
    CORBA::IRObject_ptr p
  )
{
  return CORBA::IRObject::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::IRObject>::release (
    CORBA::IRObject_ptr p
  )
{
  CORBA::release (p);
}

CORBA::IRObject_ptr
TAO::Objref_Traits<CORBA::IRObject>::nil (void)
{
  return CORBA::IRObject::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::IRObject>::marshal (
    CORBA::IRObject_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::DefinitionKind CORBA::IRObject::def_kind (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IRObject_Proxy_Broker_ == 0)
    {
      CORBA_IRObject_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::DefinitionKind>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_def_kind",
      13,
      this->the_TAO_IRObject_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

void CORBA::IRObject::destroy (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IRObject_Proxy_Broker_ == 0)
    {
      CORBA_IRObject_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_IRObject_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::IRObject::IRObject (void)
 : the_TAO_IRObject_Proxy_Broker_ (0)
{
  this->CORBA_IRObject_setup_collocation ();
}

void
CORBA::IRObject::CORBA_IRObject_setup_collocation ()
{
  if (::CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IRObject_Proxy_Broker_ =
        ::CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer (this);
    }
}

CORBA::IRObject::~IRObject (void)
{}

void 
CORBA::IRObject::_tao_any_destructor (void *_tao_void_pointer)
{
  IRObject *_tao_tmp_pointer =
    static_cast<IRObject *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::IRObject_ptr
CORBA::IRObject::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IRObject>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/IRObject:1.0",
        CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::IRObject_ptr
CORBA::IRObject::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IRObject>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/IRObject:1.0",
        CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::IRObject_ptr
CORBA::IRObject::_duplicate (IRObject_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBA::IRObject::_tao_release (IRObject_ptr obj)
{
  CORBA::release (obj);
}

CORBA::Boolean
CORBA::IRObject::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::IRObject::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/IRObject:1.0";
}

CORBA::Boolean
CORBA::IRObject::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBA::Contained.

CORBA::Contained_ptr
TAO::Objref_Traits<CORBA::Contained>::duplicate (
    CORBA::Contained_ptr p
  )
{
  return CORBA::Contained::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::Contained>::release (
    CORBA::Contained_ptr p
  )
{
  CORBA::release (p);
}

CORBA::Contained_ptr
TAO::Objref_Traits<CORBA::Contained>::nil (void)
{
  return CORBA::Contained::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::Contained>::marshal (
    CORBA::Contained_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::id (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::RepositoryId>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_id",
      7,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::id (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_id",
      7,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::name (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::Identifier>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_name",
      9,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::name (
    const char * name
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_name",
      9,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::version (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::VersionSpec>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_version",
      12,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::version (
    const char * version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_version",
      12,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Container_ptr CORBA::Contained::defined_in (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::Container>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_defined_in",
      15,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::absolute_name (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ScopedName>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_absolute_name",
      18,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Repository_ptr CORBA::Contained::containing_repository (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::Repository>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_containing_repository",
      26,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::Contained::Description::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Description *_tao_tmp_pointer =
    static_cast<Description *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Contained::Description * CORBA::Contained::describe (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::Contained::Description>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "describe",
      8,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::move (
    ::CORBA::Container_ptr new_container,
    const char * new_name,
    const char * new_version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::Container>::in_arg_val _tao_new_container (new_container);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_new_name (new_name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_new_version (new_version);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_new_container,
      &_tao_new_name,
      &_tao_new_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "move",
      4,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::Contained::Contained (void)
 : the_TAO_Contained_Proxy_Broker_ (0)
{
  this->CORBA_Contained_setup_collocation ();
}

void
CORBA::Contained::CORBA_Contained_setup_collocation ()
{
  if (::CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Contained_Proxy_Broker_ =
        ::CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IRObject_setup_collocation ();
}

CORBA::Contained::~Contained (void)
{}

void 
CORBA::Contained::_tao_any_destructor (void *_tao_void_pointer)
{
  Contained *_tao_tmp_pointer =
    static_cast<Contained *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::Contained_ptr
CORBA::Contained::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Contained>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Contained:1.0",
        CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Contained_ptr
CORBA::Contained::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Contained>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Contained:1.0",
        CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Contained_ptr
CORBA::Contained::_duplicate (Contained_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBA::Contained::_tao_release (Contained_ptr obj)
{
  CORBA::release (obj);
}

CORBA::Boolean
CORBA::Contained::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::Contained::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/Contained:1.0";
}

CORBA::Boolean
CORBA::Contained::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_INTERFACEDEFSEQ_CS_)
#define _CORBA_INTERFACEDEFSEQ_CS_

CORBA::InterfaceDefSeq::InterfaceDefSeq (void)
{}

CORBA::InterfaceDefSeq::InterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >
    (max)
{}

CORBA::InterfaceDefSeq::InterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::InterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::InterfaceDefSeq::InterfaceDefSeq (
    const InterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >
    (seq)
{}

CORBA::InterfaceDefSeq::~InterfaceDefSeq (void)
{}

void CORBA::InterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  InterfaceDefSeq * _tao_tmp_pointer =
    static_cast<InterfaceDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_VALUEDEFSEQ_CS_)
#define _CORBA_VALUEDEFSEQ_CS_

CORBA::ValueDefSeq::ValueDefSeq (void)
{}

CORBA::ValueDefSeq::ValueDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >
    (max)
{}

CORBA::ValueDefSeq::ValueDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ValueDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ValueDefSeq::ValueDefSeq (
    const ValueDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >
    (seq)
{}

CORBA::ValueDefSeq::~ValueDefSeq (void)
{}

void CORBA::ValueDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ValueDefSeq * _tao_tmp_pointer =
    static_cast<ValueDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ_CS_

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (void)
{}

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >
    (max)
{}

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::AbstractInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (
    const AbstractInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >
    (seq)
{}

CORBA::AbstractInterfaceDefSeq::~AbstractInterfaceDefSeq (void)
{}

void CORBA::AbstractInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  AbstractInterfaceDefSeq * _tao_tmp_pointer =
    static_cast<AbstractInterfaceDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_LOCALINTERFACEDEFSEQ_CS_

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (void)
{}

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >
    (max)
{}

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::LocalInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (
    const LocalInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >
    (seq)
{}

CORBA::LocalInterfaceDefSeq::~LocalInterfaceDefSeq (void)
{}

void CORBA::LocalInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  LocalInterfaceDefSeq * _tao_tmp_pointer =
    static_cast<LocalInterfaceDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_EXTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTINTERFACEDEFSEQ_CS_

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (void)
{}

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >
    (max)
{}

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (
    const ExtInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >
    (seq)
{}

CORBA::ExtInterfaceDefSeq::~ExtInterfaceDefSeq (void)
{}

void CORBA::ExtInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtInterfaceDefSeq * _tao_tmp_pointer =
    static_cast<ExtInterfaceDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_EXTVALUEDEFSEQ_CS_)
#define _CORBA_EXTVALUEDEFSEQ_CS_

CORBA::ExtValueDefSeq::ExtValueDefSeq (void)
{}

CORBA::ExtValueDefSeq::ExtValueDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >
    (max)
{}

CORBA::ExtValueDefSeq::ExtValueDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtValueDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtValueDefSeq::ExtValueDefSeq (
    const ExtValueDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >
    (seq)
{}

CORBA::ExtValueDefSeq::~ExtValueDefSeq (void)
{}

void CORBA::ExtValueDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtValueDefSeq * _tao_tmp_pointer =
    static_cast<ExtValueDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (void)
{}

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >
    (max)
{}

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtAbstractInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (
    const ExtAbstractInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >
    (seq)
{}

CORBA::ExtAbstractInterfaceDefSeq::~ExtAbstractInterfaceDefSeq (void)
{}

void CORBA::ExtAbstractInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtAbstractInterfaceDefSeq * _tao_tmp_pointer =
    static_cast<ExtAbstractInterfaceDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_EXTLOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTLOCALINTERFACEDEFSEQ_CS_

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (void)
{}

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >
    (max)
{}

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtLocalInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (
    const ExtLocalInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >
    (seq)
{}

CORBA::ExtLocalInterfaceDefSeq::~ExtLocalInterfaceDefSeq (void)
{}

void CORBA::ExtLocalInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtLocalInterfaceDefSeq * _tao_tmp_pointer =
    static_cast<ExtLocalInterfaceDefSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_CONTAINEDSEQ_CS_)
#define _CORBA_CONTAINEDSEQ_CS_

CORBA::ContainedSeq::ContainedSeq (void)
{}

CORBA::ContainedSeq::ContainedSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >
    (max)
{}

CORBA::ContainedSeq::ContainedSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Contained_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >
    (max, length, buffer, release)
{}

CORBA::ContainedSeq::ContainedSeq (
    const ContainedSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >
    (seq)
{}

CORBA::ContainedSeq::~ContainedSeq (void)
{}

void CORBA::ContainedSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ContainedSeq * _tao_tmp_pointer =
    static_cast<ContainedSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::StructMember::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  StructMember *_tao_tmp_pointer =
    static_cast<StructMember *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_STRUCTMEMBERSEQ_CS_)
#define _CORBA_STRUCTMEMBERSEQ_CS_

CORBA::StructMemberSeq::StructMemberSeq (void)
{}

CORBA::StructMemberSeq::StructMemberSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::StructMember
      >
    (max)
{}

CORBA::StructMemberSeq::StructMemberSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::StructMember * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::StructMember
      >
    (max, length, buffer, release)
{}

CORBA::StructMemberSeq::StructMemberSeq (
    const StructMemberSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::StructMember
      >
    (seq)
{}

CORBA::StructMemberSeq::~StructMemberSeq (void)
{}

void CORBA::StructMemberSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  StructMemberSeq * _tao_tmp_pointer =
    static_cast<StructMemberSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::Initializer::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Initializer *_tao_tmp_pointer =
    static_cast<Initializer *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_INITIALIZERSEQ_CS_)
#define _CORBA_INITIALIZERSEQ_CS_

CORBA::InitializerSeq::InitializerSeq (void)
{}

CORBA::InitializerSeq::InitializerSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Initializer
      >
    (max)
{}

CORBA::InitializerSeq::InitializerSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Initializer * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Initializer
      >
    (max, length, buffer, release)
{}

CORBA::InitializerSeq::InitializerSeq (
    const InitializerSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Initializer
      >
    (seq)
{}

CORBA::InitializerSeq::~InitializerSeq (void)
{}

void CORBA::InitializerSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  InitializerSeq * _tao_tmp_pointer =
    static_cast<InitializerSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ExceptionDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ExceptionDescription *_tao_tmp_pointer =
    static_cast<ExceptionDescription *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CS_)
#define _CORBA_EXCDESCRIPTIONSEQ_CS_

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (void)
{}

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >
    (max)
{}

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExceptionDescription * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >
    (max, length, buffer, release)
{}

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (
    const ExcDescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >
    (seq)
{}

CORBA::ExcDescriptionSeq::~ExcDescriptionSeq (void)
{}

void CORBA::ExcDescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExcDescriptionSeq * _tao_tmp_pointer =
    static_cast<ExcDescriptionSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ExtInitializer::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ExtInitializer *_tao_tmp_pointer =
    static_cast<ExtInitializer *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_EXTINITIALIZERSEQ_CS_)
#define _CORBA_EXTINITIALIZERSEQ_CS_

CORBA::ExtInitializerSeq::ExtInitializerSeq (void)
{}

CORBA::ExtInitializerSeq::ExtInitializerSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >
    (max)
{}

CORBA::ExtInitializerSeq::ExtInitializerSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtInitializer * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >
    (max, length, buffer, release)
{}

CORBA::ExtInitializerSeq::ExtInitializerSeq (
    const ExtInitializerSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >
    (seq)
{}

CORBA::ExtInitializerSeq::~ExtInitializerSeq (void)
{}

void CORBA::ExtInitializerSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtInitializerSeq * _tao_tmp_pointer =
    static_cast<ExtInitializerSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::UnionMember::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  UnionMember *_tao_tmp_pointer =
    static_cast<UnionMember *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_UNIONMEMBERSEQ_CS_)
#define _CORBA_UNIONMEMBERSEQ_CS_

CORBA::UnionMemberSeq::UnionMemberSeq (void)
{}

CORBA::UnionMemberSeq::UnionMemberSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >
    (max)
{}

CORBA::UnionMemberSeq::UnionMemberSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::UnionMember * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >
    (max, length, buffer, release)
{}

CORBA::UnionMemberSeq::UnionMemberSeq (
    const UnionMemberSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >
    (seq)
{}

CORBA::UnionMemberSeq::~UnionMemberSeq (void)
{}

void CORBA::UnionMemberSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  UnionMemberSeq * _tao_tmp_pointer =
    static_cast<UnionMemberSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_ENUMMEMBERSEQ_CS_)
#define _CORBA_ENUMMEMBERSEQ_CS_

CORBA::EnumMemberSeq::EnumMemberSeq (void)
{}

CORBA::EnumMemberSeq::EnumMemberSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_String_Sequence
    (max)
{}

CORBA::EnumMemberSeq::EnumMemberSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    char * * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_String_Sequence
    (max, length, buffer, release)
{}

CORBA::EnumMemberSeq::EnumMemberSeq (
    const EnumMemberSeq &seq
  )
  : TAO_Unbounded_String_Sequence
    (seq)
{}

CORBA::EnumMemberSeq::~EnumMemberSeq (void)
{}

void CORBA::EnumMemberSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  EnumMemberSeq * _tao_tmp_pointer =
    static_cast<EnumMemberSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBA::Container.

CORBA::Container_ptr
TAO::Objref_Traits<CORBA::Container>::duplicate (
    CORBA::Container_ptr p
  )
{
  return CORBA::Container::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::Container>::release (
    CORBA::Container_ptr p
  )
{
  CORBA::release (p);
}

CORBA::Container_ptr
TAO::Objref_Traits<CORBA::Container>::nil (void)
{
  return CORBA::Container::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::Container>::marshal (
    CORBA::Container_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Contained_ptr CORBA::Container::lookup (
    const char * search_name
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::Contained>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::ScopedName>::in_arg_val _tao_search_name (search_name);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_search_name
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "lookup",
      6,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ContainedSeq * CORBA::Container::contents (
    ::CORBA::DefinitionKind limit_type,
    ::CORBA::Boolean exclude_inherited
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ContainedSeq>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::DefinitionKind>::in_arg_val _tao_limit_type (limit_type);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited (exclude_inherited);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_limit_type,
      &_tao_exclude_inherited
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "contents",
      8,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ContainedSeq * CORBA::Container::lookup_name (
    const char * search_name,
    ::CORBA::Long levels_to_search,
    ::CORBA::DefinitionKind limit_type,
    ::CORBA::Boolean exclude_inherited
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ContainedSeq>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_search_name (search_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_levels_to_search (levels_to_search);
  TAO::Arg_Traits< CORBA::DefinitionKind>::in_arg_val _tao_limit_type (limit_type);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited (exclude_inherited);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_search_name,
      &_tao_levels_to_search,
      &_tao_limit_type,
      &_tao_exclude_inherited
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "lookup_name",
      11,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::Container::Description::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Description *_tao_tmp_pointer =
    static_cast<Description *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CS_

CORBA::Container::DescriptionSeq::DescriptionSeq (void)
{}

CORBA::Container::DescriptionSeq::DescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >
    (max)
{}

CORBA::Container::DescriptionSeq::DescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Container::Description * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >
    (max, length, buffer, release)
{}

CORBA::Container::DescriptionSeq::DescriptionSeq (
    const DescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >
    (seq)
{}

CORBA::Container::DescriptionSeq::~DescriptionSeq (void)
{}

void CORBA::Container::DescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  DescriptionSeq * _tao_tmp_pointer =
    static_cast<DescriptionSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Container::DescriptionSeq * CORBA::Container::describe_contents (
    ::CORBA::DefinitionKind limit_type,
    ::CORBA::Boolean exclude_inherited,
    ::CORBA::Long max_returned_objs
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::Container::DescriptionSeq>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::DefinitionKind>::in_arg_val _tao_limit_type (limit_type);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited (exclude_inherited);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_returned_objs (max_returned_objs);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_limit_type,
      &_tao_exclude_inherited,
      &_tao_max_returned_objs
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "describe_contents",
      17,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ModuleDef_ptr CORBA::Container::create_module (
    const char * id,
    const char * name,
    const char * version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ModuleDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_module",
      13,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ConstantDef_ptr CORBA::Container::create_constant (
    const char * id,
    const char * name,
    const char * version,
    ::CORBA::IDLType_ptr type,
    const ::CORBA::Any & value
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ConstantDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::IDLType>::in_arg_val _tao_type (type);
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_value (value);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_type,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      6,
      "create_constant",
      15,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::StructDef_ptr CORBA::Container::create_struct (
    const char * id,
    const char * name,
    const char * version,
    const ::CORBA::StructMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::StructDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::StructMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_struct",
      13,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::UnionDef_ptr CORBA::Container::create_union (
    const char * id,
    const char * name,
    const char * version,
    ::CORBA::IDLType_ptr discriminator_type,
    const ::CORBA::UnionMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::UnionDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::IDLType>::in_arg_val _tao_discriminator_type (discriminator_type);
  TAO::Arg_Traits< CORBA::UnionMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_discriminator_type,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      6,
      "create_union",
      12,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::EnumDef_ptr CORBA::Container::create_enum (
    const char * id,
    const char * name,
    const char * version,
    const ::CORBA::EnumMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::EnumDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::EnumMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_enum",
      11,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::AliasDef_ptr CORBA::Container::create_alias (
    const char * id,
    const char * name,
    const char * version,
    ::CORBA::IDLType_ptr original_type
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::AliasDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::IDLType>::in_arg_val _tao_original_type (original_type);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_original_type
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_alias",
      12,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::InterfaceDef_ptr CORBA::Container::create_interface (
    const char * id,
    const char * name,
    const char * version,
    const ::CORBA::InterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::InterfaceDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_interface",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ValueDef_ptr CORBA::Container::create_value (
    const char * id,
    const char * name,
    const char * version,
    ::CORBA::Boolean is_custom,
    ::CORBA::Boolean is_abstract,
    ::CORBA::ValueDef_ptr base_value,
    ::CORBA::Boolean is_truncatable,
    const ::CORBA::ValueDefSeq & abstract_base_values,
    const ::CORBA::InterfaceDefSeq & supported_interfaces,
    const ::CORBA::InitializerSeq & initializers
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ValueDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom (is_custom);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract (is_abstract);
  TAO::Arg_Traits< CORBA::ValueDef>::in_arg_val _tao_base_value (base_value);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable (is_truncatable);
  TAO::Arg_Traits< CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values (abstract_base_values);
  TAO::Arg_Traits< CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
  TAO::Arg_Traits< CORBA::InitializerSeq>::in_arg_val _tao_initializers (initializers);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_is_custom,
      &_tao_is_abstract,
      &_tao_base_value,
      &_tao_is_truncatable,
      &_tao_abstract_base_values,
      &_tao_supported_interfaces,
      &_tao_initializers
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      11,
      "create_value",
      12,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ValueBoxDef_ptr CORBA::Container::create_value_box (
    const char * id,
    const char * name,
    const char * version,
    ::CORBA::IDLType_ptr original_type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ValueBoxDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::IDLType>::in_arg_val _tao_original_type_def (original_type_def);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_original_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_value_box",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExceptionDef_ptr CORBA::Container::create_exception (
    const char * id,
    const char * name,
    const char * version,
    const ::CORBA::StructMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ExceptionDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::StructMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_exception",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::NativeDef_ptr CORBA::Container::create_native (
    const char * id,
    const char * name,
    const char * version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::NativeDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_native",
      13,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::AbstractInterfaceDef_ptr CORBA::Container::create_abstract_interface (
    const char * id,
    const char * name,
    const char * version,
    const ::CORBA::AbstractInterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::AbstractInterfaceDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::AbstractInterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_abstract_interface",
      25,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::LocalInterfaceDef_ptr CORBA::Container::create_local_interface (
    const char * id,
    const char * name,
    const char * version,
    const ::CORBA::InterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::LocalInterfaceDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_local_interface",
      22,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExtValueDef_ptr CORBA::Container::create_ext_value (
    const char * id,
    const char * name,
    const char * version,
    ::CORBA::Boolean is_custom,
    ::CORBA::Boolean is_abstract,
    ::CORBA::ValueDef_ptr base_value,
    ::CORBA::Boolean is_truncatable,
    const ::CORBA::ValueDefSeq & abstract_base_values,
    const ::CORBA::InterfaceDefSeq & supported_interfaces,
    const ::CORBA::ExtInitializerSeq & initializers
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation ();
    }
  
  TAO::Arg_Traits< CORBA::ExtValueDef>::ret_val _tao_retval;
  TAO::Arg_Traits< CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits< CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom (is_custom);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract (is_abstract);
  TAO::Arg_Traits< CORBA::ValueDef>::in_arg_val _tao_base_value (base_value);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable (is_truncatable);
  TAO::Arg_Traits< CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values (abstract_base_values);
  TAO::Arg_Traits< CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
  TAO::Arg_Traits< CORBA::ExtInitializerSeq>::in_arg_val _tao_initializers (initializers);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_is_custom,
      &_tao_is_abstract,
      &_tao_base_value,
      &_tao_is_truncatable,
      &_tao_abstract_base_values,
      &_tao_supported_interfaces,
      &_tao_initializers
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      11,
      "create_ext_value",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::Container::Container (void)
 : the_TAO_Container_Proxy_Broker_ (0)
{
  this->CORBA_Container_setup_collocation ();
}

void
CORBA::Container::CORBA_Container_setup_collocation ()
{
  if (::CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Container_Proxy_Broker_ =
        ::CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IRObject_setup_collocation ();
}

CORBA::Container::~Container (void)
{}

void 
CORBA::Container::_tao_any_destructor (void *_tao_void_pointer)
{
  Container *_tao_tmp_pointer =
    static_cast<Container *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::Container_ptr
CORBA::Container::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Container>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Container:1.0",
        CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Container_ptr
CORBA::Container::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Container>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Container:1.0",
        CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Container_ptr
CORBA::Container::_duplicate (Container_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBA::Container::_tao_release (Container_ptr obj)
{
  CORBA::release (obj);
}

CORBA::Boolean
CORBA::Container::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::Container::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/Container:1.0";
}

CORBA::Boolean
CORBA::Container::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBA::IDLType.

CORBA::IDLType_ptr
TAO::Objref_Traits<CORBA::IDLType>::duplicate (
    CORBA::IDLType_ptr p
  )
{
  return CORBA::IDLType::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::IDLType>::release (
    CORBA::IDLType_ptr p
  )
{
  CORBA::release (p);
}

CORBA::IDLType_ptr
TAO::Objref_Traits<CORBA::IDLType>::nil (void)
{
  return CORBA::IDLType::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::IDLType>::marshal (
    CORBA::IDLType_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::IDLType::type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IDLType_Proxy_Broker_ == 0)
    {
      CORBA_IDLType_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_type",
      9,
      this->the_TAO_IDLType_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::IDLType::IDLType (void)
 : the_TAO_IDLType_Proxy_Broker_ (0)
{
  this->CORBA_IDLType_setup_collocation ();
}

void
CORBA::IDLType::CORBA_IDLType_setup_collocation ()
{
  if (::CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IDLType_Proxy_Broker_ =
        ::CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IRObject_setup_collocation ();
}

CORBA::IDLType::~IDLType (void)
{}

void 
CORBA::IDLType::_tao_any_destructor (void *_tao_void_pointer)
{
  IDLType *_tao_tmp_pointer =
    static_cast<IDLType *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::IDLType_ptr
CORBA::IDLType::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IDLType>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/IDLType:1.0",
        CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::IDLType_ptr
CORBA::IDLType::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IDLType>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/IDLType:1.0",
        CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::IDLType_ptr
CORBA::IDLType::_duplicate (IDLType_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBA::IDLType::_tao_release (IDLType_ptr obj)
{
  CORBA::release (obj);
}

CORBA::Boolean
CORBA::IDLType::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::IDLType::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/IDLType:1.0";
}

CORBA::Boolean
CORBA::IDLType::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBA::TypedefDef.

CORBA::TypedefDef_ptr
TAO::Objref_Traits<CORBA::TypedefDef>::duplicate (
    CORBA::TypedefDef_ptr p
  )
{
  return CORBA::TypedefDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::TypedefDef>::release (
    CORBA::TypedefDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::TypedefDef_ptr
TAO::Objref_Traits<CORBA::TypedefDef>::nil (void)
{
  return CORBA::TypedefDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::TypedefDef>::marshal (
    CORBA::TypedefDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::TypedefDef::TypedefDef (void)
 : the_TAO_TypedefDef_Proxy_Broker_ (0)
{
  this->CORBA_TypedefDef_setup_collocation ();
}

void
CORBA::TypedefDef::CORBA_TypedefDef_setup_collocation ()
{
  if (::CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TypedefDef_Proxy_Broker_ =
        ::CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation ();
  this->CORBA_IDLType_setup_collocation ();
}

CORBA::TypedefDef::~TypedefDef (void)
{}

void 
CORBA::TypedefDef::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedefDef *_tao_tmp_pointer =
    static_cast<TypedefDef *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<TypedefDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/TypedefDef:1.0",
        CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<TypedefDef>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/TypedefDef:1.0",
        CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_duplicate (TypedefDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBA::TypedefDef::_tao_release (TypedefDef_ptr obj)
{
  CORBA::release (obj);
}

CORBA::Boolean
CORBA::TypedefDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::TypedefDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/TypedefDef:1.0";
}

CORBA::Boolean
CORBA::TypedefDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from 
// be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::TypeDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  TypeDescription *_tao_tmp_pointer =
    static_cast<TypeDescription *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_cs.cpp:51

CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::DefinitionKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::DefinitionKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = static_cast<CORBA::DefinitionKind> (_tao_temp);
    }
  
  return _tao_result;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::IRObject_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::IRObject_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBA::IRObject RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Contained::Description &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.value);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Contained::Description &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.value);
}

// TAO_IDL - Generated from
// be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Contained_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Contained_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBA::Contained RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_InterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_InterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::InterfaceDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_InterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ValueDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ValueDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ValueDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ValueDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AbstractInterfaceDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::AbstractInterfaceDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AbstractInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::LocalInterfaceDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::LocalInterfaceDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::LocalInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ExtInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtInterfaceDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtInterfaceDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ExtInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ExtValueDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtValueDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtValueDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtValueDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ExtValueDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ExtAbstractInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtAbstractInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtAbstractInterfaceDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtAbstractInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ExtAbstractInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ExtLocalInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtLocalInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtLocalInterfaceDefSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtLocalInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ExtLocalInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ContainedSeq_CPP_
#define _TAO_CDR_OP_CORBA_ContainedSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ContainedSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::Contained>::marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ContainedSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ContainedSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StructMember &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    CORBA::Object::marshal (
        _tao_aggregate.type_def.in (),
        strm
      );
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::StructMember &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ());
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_StructMemberSeq_CPP_
#define _TAO_CDR_OP_CORBA_StructMemberSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StructMemberSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::StructMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_StructMemberSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Initializer &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.members) &&
    (strm << _tao_aggregate.name.in ());
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Initializer &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.members) &&
    (strm >> _tao_aggregate.name.out ());
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_InitializerSeq_CPP_
#define _TAO_CDR_OP_CORBA_InitializerSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InitializerSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InitializerSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_InitializerSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExceptionDescription &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ());
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExceptionDescription &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ());
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ExcDescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExcDescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExcDescriptionSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExcDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ExcDescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtInitializer &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.members) &&
    (strm << _tao_aggregate.exceptions) &&
    (strm << _tao_aggregate.name.in ());
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtInitializer &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.members) &&
    (strm >> _tao_aggregate.exceptions) &&
    (strm >> _tao_aggregate.name.out ());
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_ExtInitializerSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtInitializerSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtInitializerSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtInitializerSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_ExtInitializerSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::UnionMember &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.label) &&
    (strm << _tao_aggregate.type.in ()) &&
    CORBA::Object::marshal (
        _tao_aggregate.type_def.in (),
        strm
      );
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::UnionMember &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.label) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ());
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_UnionMemberSeq_CPP_
#define _TAO_CDR_OP_CORBA_UnionMemberSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::UnionMemberSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::UnionMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_UnionMemberSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_EnumMemberSeq_CPP_
#define _TAO_CDR_OP_CORBA_EnumMemberSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::EnumMemberSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::EnumMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        
      }
    
    return _tao_marshal_flag;
  
  }

return false;
}

#endif /* _TAO_CDR_OP_CORBA_EnumMemberSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Container::Description &_tao_aggregate
  )
{
  return
    CORBA::Object::marshal (
        _tao_aggregate.contained_object.in (),
        strm
      ) &&
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.value);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Container::Description &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.contained_object.out ()) &&
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.value);
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_CORBA_Container_DescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_Container_DescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Container::DescriptionSeq &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Container::DescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_CORBA_Container_DescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Container_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Container_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBA::Container RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::IDLType_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::IDLType_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBA::IDLType RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::TypedefDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::TypedefDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBA::TypedefDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// be\be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::TypeDescription &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ());
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::TypeDescription &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ());
}

// TAO_IDL - Generated from
// be\be_visitor_root/root.cpp:1521

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::DefinitionKind>;

  template class TAO::Basic_Arg_Traits_T<CORBA::DefinitionKind>;

#endif /* end #if !defined */

  template class
    TAO::Ret_Basic_Argument_T<
        CORBA::DefinitionKind
      >;

  template class
    TAO::Objref_Traits<
        CORBA::IRObject
      >;

  template class
    TAO_Objref_Var_T<
        CORBA::IRObject
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::IRObject
      >;

  template class
    TAO::Narrow_Utils<
        CORBA::IRObject
      >;

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::Contained
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Contained_ptr,
        CORBA::Contained_var,
        CORBA::Contained_out,
        TAO::Objref_Traits<CORBA::Contained>
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::Container_ptr,
        CORBA::Container_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::Repository_ptr,
        CORBA::Repository_var
      >;

#if !defined (_CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Contained::Description>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::Contained::Description,
        CORBA::Contained::Description_var,
        CORBA::Contained::Description_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::Contained::Description
      >;

  template class
    TAO_Var_Base_T<
        CORBA::Contained::Description
      >;

  template class
    TAO_Out_T<
        CORBA::Contained::Description,
        CORBA::Contained::Description_var
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::Contained::Description,
        CORBA::Contained::Description_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::Container_ptr
      >;

  template class
    TAO::Objref_Traits<
        CORBA::Contained
      >;

  template class
    TAO_Objref_Var_T<
        CORBA::Contained
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::Contained
      >;

  template class
    TAO::Narrow_Utils<
        CORBA::Contained
      >;

#if !defined (_CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::Repository
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Repository_ptr,
        CORBA::Repository_var,
        CORBA::Repository_out,
        TAO::Objref_Traits<CORBA::Repository>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::Container
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Container_ptr,
        CORBA::Container_var,
        CORBA::Container_out,
        TAO::Objref_Traits<CORBA::Container>
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::Contained_ptr,
        CORBA::Contained_var
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::ContainedSeq,
        CORBA::ContainedSeq_var
      >;

  template class
    TAO::In_Basic_Argument_T<
        CORBA::DefinitionKind
      >;

  template class
    TAO_Var_Var_T<
        CORBA::Container::Description
      >;

  template class
    TAO_Var_Base_T<
        CORBA::Container::Description
      >;

  template class
    TAO_Out_T<
        CORBA::Container::Description,
        CORBA::Container::Description_var
      >;

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Container::DescriptionSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::DescriptionSeq_var,
        CORBA::Container::DescriptionSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::Description
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::Description
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::DescriptionSeq_var,
        CORBA::Container::Description
      >;

#if !defined (_CORBA_CONTAINER_DESCRIPTION__EXPLICIT_CS_)
#define _CORBA_CONTAINER_DESCRIPTION__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::DescriptionSeq_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ModuleDef_ptr,
        CORBA::ModuleDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ConstantDef_ptr,
        CORBA::ConstantDef_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::IDLType_ptr
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::StructDef_ptr,
        CORBA::StructDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::StructMemberSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::UnionDef_ptr,
        CORBA::UnionDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::UnionMemberSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::EnumDef_ptr,
        CORBA::EnumDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::EnumMemberSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::AliasDef_ptr,
        CORBA::AliasDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::InterfaceDef_ptr,
        CORBA::InterfaceDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::InterfaceDefSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ValueDef_ptr,
        CORBA::ValueDef_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::ValueDef_ptr
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ValueDefSeq
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::InitializerSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ValueBoxDef_ptr,
        CORBA::ValueBoxDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ExceptionDef_ptr,
        CORBA::ExceptionDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::NativeDef_ptr,
        CORBA::NativeDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::AbstractInterfaceDef_ptr,
        CORBA::AbstractInterfaceDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::AbstractInterfaceDefSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::LocalInterfaceDef_ptr,
        CORBA::LocalInterfaceDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ExtValueDef_ptr,
        CORBA::ExtValueDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ExtInitializerSeq
      >;

  template class
    TAO::Objref_Traits<
        CORBA::Container
      >;

  template class
    TAO_Objref_Var_T<
        CORBA::Container
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::Container
      >;

  template class
    TAO::Narrow_Utils<
        CORBA::Container
      >;

#if !defined (_CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::ModuleDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ModuleDef_ptr,
        CORBA::ModuleDef_var,
        CORBA::ModuleDef_out,
        TAO::Objref_Traits<CORBA::ModuleDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::ConstantDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ConstantDef_ptr,
        CORBA::ConstantDef_var,
        CORBA::ConstantDef_out,
        TAO::Objref_Traits<CORBA::ConstantDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::IDLType
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::IDLType_ptr,
        CORBA::IDLType_var,
        CORBA::IDLType_out,
        TAO::Objref_Traits<CORBA::IDLType>
      >;

#endif /* end #if !defined */

  template class
    TAO::Objref_Traits<
        CORBA::IDLType
      >;

  template class
    TAO_Objref_Var_T<
        CORBA::IDLType
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::IDLType
      >;

  template class
    TAO::Narrow_Utils<
        CORBA::IDLType
      >;

#if !defined (_CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::StructDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::StructDef_ptr,
        CORBA::StructDef_var,
        CORBA::StructDef_out,
        TAO::Objref_Traits<CORBA::StructDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::UnionDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::UnionDef_ptr,
        CORBA::UnionDef_var,
        CORBA::UnionDef_out,
        TAO::Objref_Traits<CORBA::UnionDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::EnumDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::EnumDef_ptr,
        CORBA::EnumDef_var,
        CORBA::EnumDef_out,
        TAO::Objref_Traits<CORBA::EnumDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::AliasDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::AliasDef_ptr,
        CORBA::AliasDef_var,
        CORBA::AliasDef_out,
        TAO::Objref_Traits<CORBA::AliasDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::InterfaceDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::InterfaceDef_ptr,
        CORBA::InterfaceDef_var,
        CORBA::InterfaceDef_out,
        TAO::Objref_Traits<CORBA::InterfaceDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InterfaceDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::InterfaceDefSeq,
        CORBA::InterfaceDefSeq_var,
        CORBA::InterfaceDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::InterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::InterfaceDef,
            CORBA::InterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::InterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::InterfaceDef,
            CORBA::InterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::InterfaceDefSeq,
        CORBA::InterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::InterfaceDef,
            CORBA::InterfaceDef_var
          >
      >;

#if !defined (_CORBA_INTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_INTERFACEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::ExceptionDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ExceptionDef_ptr,
        CORBA::ExceptionDef_var,
        CORBA::ExceptionDef_out,
        TAO::Objref_Traits<CORBA::ExceptionDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::NativeDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::NativeDef_ptr,
        CORBA::NativeDef_var,
        CORBA::NativeDef_out,
        TAO::Objref_Traits<CORBA::NativeDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::ValueDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ValueDef_ptr,
        CORBA::ValueDef_var,
        CORBA::ValueDef_out,
        TAO::Objref_Traits<CORBA::ValueDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ValueDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::ValueDefSeq,
        CORBA::ValueDefSeq_var,
        CORBA::ValueDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ValueDefSeq,
        TAO_Object_Manager<
            CORBA::ValueDef,
            CORBA::ValueDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ValueDefSeq,
        TAO_Object_Manager<
            CORBA::ValueDef,
            CORBA::ValueDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ValueDefSeq,
        CORBA::ValueDefSeq_var,
        TAO_Object_Manager<
            CORBA::ValueDef,
            CORBA::ValueDef_var
          >
      >;

#if !defined (_CORBA_VALUEDEF__EXPLICIT_CS_)
#define _CORBA_VALUEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::ValueBoxDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ValueBoxDef_ptr,
        CORBA::ValueBoxDef_var,
        CORBA::ValueBoxDef_out,
        TAO::Objref_Traits<CORBA::ValueBoxDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::AbstractInterfaceDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::AbstractInterfaceDef_ptr,
        CORBA::AbstractInterfaceDef_var,
        CORBA::AbstractInterfaceDef_out,
        TAO::Objref_Traits<CORBA::AbstractInterfaceDef>
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::AbstractInterfaceDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::AbstractInterfaceDefSeq,
        CORBA::AbstractInterfaceDefSeq_var,
        CORBA::AbstractInterfaceDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::AbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::AbstractInterfaceDef,
            CORBA::AbstractInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::AbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::AbstractInterfaceDef,
            CORBA::AbstractInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::AbstractInterfaceDefSeq,
        CORBA::AbstractInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::AbstractInterfaceDef,
            CORBA::AbstractInterfaceDef_var
          >
      >;

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::LocalInterfaceDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::LocalInterfaceDef_ptr,
        CORBA::LocalInterfaceDef_var,
        CORBA::LocalInterfaceDef_out,
        TAO::Objref_Traits<CORBA::LocalInterfaceDef>
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::LocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::LocalInterfaceDef,
            CORBA::LocalInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::LocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::LocalInterfaceDef,
            CORBA::LocalInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::LocalInterfaceDefSeq,
        CORBA::LocalInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::LocalInterfaceDef,
            CORBA::LocalInterfaceDef_var
          >
      >;

#if !defined (_CORBA_LOCALINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_LOCALINTERFACEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtInterfaceDef,
            CORBA::ExtInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtInterfaceDef,
            CORBA::ExtInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtInterfaceDefSeq,
        CORBA::ExtInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtInterfaceDef,
            CORBA::ExtInterfaceDef_var
          >
      >;

#if !defined (_CORBA_EXTINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_EXTINTERFACEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_

  template class
    TAO::Arg_Traits<
        CORBA::ExtValueDef
      >;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ExtValueDef_ptr,
        CORBA::ExtValueDef_var,
        CORBA::ExtValueDef_out,
        TAO::Objref_Traits<CORBA::ExtValueDef>
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtValueDefSeq,
        TAO_Object_Manager<
            CORBA::ExtValueDef,
            CORBA::ExtValueDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtValueDefSeq,
        TAO_Object_Manager<
            CORBA::ExtValueDef,
            CORBA::ExtValueDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtValueDefSeq,
        CORBA::ExtValueDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtValueDef,
            CORBA::ExtValueDef_var
          >
      >;

#if !defined (_CORBA_EXTVALUEDEF__EXPLICIT_CS_)
#define _CORBA_EXTVALUEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtAbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtAbstractInterfaceDef,
            CORBA::ExtAbstractInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtAbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtAbstractInterfaceDef,
            CORBA::ExtAbstractInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtAbstractInterfaceDefSeq,
        CORBA::ExtAbstractInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtAbstractInterfaceDef,
            CORBA::ExtAbstractInterfaceDef_var
          >
      >;

#if !defined (_CORBA_EXTABSTRACTINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_EXTABSTRACTINTERFACEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtLocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtLocalInterfaceDef,
            CORBA::ExtLocalInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtLocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtLocalInterfaceDef,
            CORBA::ExtLocalInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtLocalInterfaceDefSeq,
        CORBA::ExtLocalInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtLocalInterfaceDef,
            CORBA::ExtLocalInterfaceDef_var
          >
      >;

#if !defined (_CORBA_EXTLOCALINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_EXTLOCALINTERFACEDEF__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ContainedSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::ContainedSeq,
        CORBA::ContainedSeq_var,
        CORBA::ContainedSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::Contained,
        CORBA::Contained_var
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ContainedSeq,
        TAO_Object_Manager<
            CORBA::Contained,
            CORBA::Contained_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ContainedSeq,
        TAO_Object_Manager<
            CORBA::Contained,
            CORBA::Contained_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ContainedSeq,
        CORBA::ContainedSeq_var,
        TAO_Object_Manager<
            CORBA::Contained,
            CORBA::Contained_var
          >
      >;

#if !defined (_CORBA_CONTAINED__EXPLICIT_CS_)
#define _CORBA_CONTAINED__EXPLICIT_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::StructMember
      >;

  template class
    TAO_Var_Base_T<
        CORBA::StructMember
      >;

  template class
    TAO_Out_T<
        CORBA::StructMember,
        CORBA::StructMember_var
      >;

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::StructMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::StructMemberSeq,
        CORBA::StructMemberSeq_var,
        CORBA::StructMemberSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::StructMemberSeq,
        CORBA::StructMember
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::StructMemberSeq,
        CORBA::StructMember
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::StructMemberSeq,
        CORBA::StructMemberSeq_var,
        CORBA::StructMember
      >;

#if !defined (_CORBA_STRUCTMEMBER__EXPLICIT_CS_)
#define _CORBA_STRUCTMEMBER__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::StructMember
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::Initializer
      >;

  template class
    TAO_Var_Base_T<
        CORBA::Initializer
      >;

  template class
    TAO_Out_T<
        CORBA::Initializer,
        CORBA::Initializer_var
      >;

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InitializerSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::InitializerSeq,
        CORBA::InitializerSeq_var,
        CORBA::InitializerSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::InitializerSeq,
        CORBA::Initializer
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::InitializerSeq,
        CORBA::Initializer
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::InitializerSeq,
        CORBA::InitializerSeq_var,
        CORBA::Initializer
      >;

#if !defined (_CORBA_INITIALIZER__EXPLICIT_CS_)
#define _CORBA_INITIALIZER__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::Initializer
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Out_T<
        CORBA::ExceptionDescription,
        CORBA::ExceptionDescription_var
      >;

  template class
    TAO_VarSeq_Var_T<
        CORBA::ExcDescriptionSeq,
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExcDescriptionSeq,
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::ExcDescriptionSeq,
        CORBA::ExcDescriptionSeq_var,
        CORBA::ExceptionDescription
      >;

#if !defined (_CORBA_EXCEPTIONDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_EXCEPTIONDESCRIPTION__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::ExtInitializer
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ExtInitializer
      >;

  template class
    TAO_Out_T<
        CORBA::ExtInitializer,
        CORBA::ExtInitializer_var
      >;

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExtInitializerSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializerSeq_var,
        CORBA::ExtInitializerSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializer
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializer
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializerSeq_var,
        CORBA::ExtInitializer
      >;

#if !defined (_CORBA_EXTINITIALIZER__EXPLICIT_CS_)
#define _CORBA_EXTINITIALIZER__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::UnionMember
      >;

  template class
    TAO_Var_Base_T<
        CORBA::UnionMember
      >;

  template class
    TAO_Out_T<
        CORBA::UnionMember,
        CORBA::UnionMember_var
      >;

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::UnionMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMemberSeq_var,
        CORBA::UnionMemberSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMember
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMember
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMemberSeq_var,
        CORBA::UnionMember
      >;

#if !defined (_CORBA_UNIONMEMBER__EXPLICIT_CS_)
#define _CORBA_UNIONMEMBER__EXPLICIT_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::EnumMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits_T<
        CORBA::EnumMemberSeq,
        CORBA::EnumMemberSeq_var,
        CORBA::EnumMemberSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_MngSeq_Var_T<
        CORBA::EnumMemberSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::EnumMemberSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::EnumMemberSeq,
        CORBA::EnumMemberSeq_var,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO::Objref_Traits<
        CORBA::TypedefDef
      >;

  template class
    TAO_Objref_Var_T<
        CORBA::TypedefDef
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::TypedefDef
      >;

  template class
    TAO::Narrow_Utils<
        CORBA::TypedefDef
      >;

  template class
    TAO_Var_Var_T<
        CORBA::TypeDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::TypeDescription
      >;

  template class
    TAO_Out_T<
        CORBA::TypeDescription,
        CORBA::TypeDescription_var
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::DefinitionKind>

# pragma instantiate TAO::Basic_Arg_Traits_T<CORBA::DefinitionKind>

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Ret_Basic_Argument_T< \
        CORBA::DefinitionKind \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        CORBA::IRObject \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::IRObject
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::IRObject
      >

# pragma instantiate \
    TAO::Narrow_Utils< \
        CORBA::IRObject \
      >

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::Contained \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Contained_ptr, \
        CORBA::Contained_var, \
        CORBA::Contained_out, \
        TAO::Objref_Traits<CORBA::Contained> \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::Container_ptr, \
        CORBA::Container_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::Repository_ptr, \
        CORBA::Repository_var \
      >

#if !defined (_CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Contained::Description>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::Contained::Description, \
        CORBA::Contained::Description_var, \
        CORBA::Contained::Description_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::Contained::Description \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::Contained::Description \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::Contained::Description, \
        CORBA::Contained::Description_var \
      >

# pragma instantiate \
    TAO::Ret_Var_Size_Argument_T< \
        CORBA::Contained::Description, \
        CORBA::Contained::Description_var \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::Container_ptr \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        CORBA::Contained \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::Contained
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::Contained
      >

# pragma instantiate \
    TAO::Narrow_Utils< \
        CORBA::Contained \
      >

#if !defined (_CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::Repository \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Repository_ptr, \
        CORBA::Repository_var, \
        CORBA::Repository_out, \
        TAO::Objref_Traits<CORBA::Repository> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::Container \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Container_ptr, \
        CORBA::Container_var, \
        CORBA::Container_out, \
        TAO::Objref_Traits<CORBA::Container> \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::Contained_ptr, \
        CORBA::Contained_var \
      >

# pragma instantiate \
    TAO::Ret_Var_Size_Argument_T< \
        CORBA::ContainedSeq, \
        CORBA::ContainedSeq_var \
      >

# pragma instantiate \
    TAO::In_Basic_Argument_T< \
        CORBA::DefinitionKind \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::Container::Description, \
        CORBA::Container::Description_var \
      >

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Container::DescriptionSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::DescriptionSeq_var, \
        CORBA::Container::DescriptionSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::DescriptionSeq_var, \
        CORBA::Container::Description \
      >

#if !defined (_CORBA_CONTAINER_DESCRIPTION__EXPLICIT_CS_)
#define _CORBA_CONTAINER_DESCRIPTION__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::Container::Description \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Ret_Var_Size_Argument_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::DescriptionSeq_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::ModuleDef_ptr, \
        CORBA::ModuleDef_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::ConstantDef_ptr, \
        CORBA::ConstantDef_var \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::IDLType_ptr \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::StructDef_ptr, \
        CORBA::StructDef_var \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::StructMemberSeq \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::UnionDef_ptr, \
        CORBA::UnionDef_var \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::UnionMemberSeq \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::EnumDef_ptr, \
        CORBA::EnumDef_var \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::EnumMemberSeq \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::AliasDef_ptr, \
        CORBA::AliasDef_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::InterfaceDef_ptr, \
        CORBA::InterfaceDef_var \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::InterfaceDefSeq \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::ValueDef_ptr, \
        CORBA::ValueDef_var \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::ValueDef_ptr \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ValueDefSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::InitializerSeq \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::ValueBoxDef_ptr, \
        CORBA::ValueBoxDef_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::ExceptionDef_ptr, \
        CORBA::ExceptionDef_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::NativeDef_ptr, \
        CORBA::NativeDef_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::AbstractInterfaceDef_ptr, \
        CORBA::AbstractInterfaceDef_var \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::AbstractInterfaceDefSeq \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::LocalInterfaceDef_ptr, \
        CORBA::LocalInterfaceDef_var \
      >

# pragma instantiate \
    TAO::Ret_Object_Argument_T< \
        CORBA::ExtValueDef_ptr, \
        CORBA::ExtValueDef_var \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ExtInitializerSeq \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        CORBA::Container \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::Container
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::Container
      >

# pragma instantiate \
    TAO::Narrow_Utils< \
        CORBA::Container \
      >

#if !defined (_CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::ModuleDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ModuleDef_ptr, \
        CORBA::ModuleDef_var, \
        CORBA::ModuleDef_out, \
        TAO::Objref_Traits<CORBA::ModuleDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::ConstantDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ConstantDef_ptr, \
        CORBA::ConstantDef_var, \
        CORBA::ConstantDef_out, \
        TAO::Objref_Traits<CORBA::ConstantDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::IDLType \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::IDLType_ptr, \
        CORBA::IDLType_var, \
        CORBA::IDLType_out, \
        TAO::Objref_Traits<CORBA::IDLType> \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Objref_Traits< \
        CORBA::IDLType \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::IDLType
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::IDLType
      >

# pragma instantiate \
    TAO::Narrow_Utils< \
        CORBA::IDLType \
      >

#if !defined (_CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::StructDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::StructDef_ptr, \
        CORBA::StructDef_var, \
        CORBA::StructDef_out, \
        TAO::Objref_Traits<CORBA::StructDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::UnionDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::UnionDef_ptr, \
        CORBA::UnionDef_var, \
        CORBA::UnionDef_out, \
        TAO::Objref_Traits<CORBA::UnionDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::EnumDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::EnumDef_ptr, \
        CORBA::EnumDef_var, \
        CORBA::EnumDef_out, \
        TAO::Objref_Traits<CORBA::EnumDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::AliasDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::AliasDef_ptr, \
        CORBA::AliasDef_var, \
        CORBA::AliasDef_out, \
        TAO::Objref_Traits<CORBA::AliasDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::InterfaceDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::InterfaceDef_ptr, \
        CORBA::InterfaceDef_var, \
        CORBA::InterfaceDef_out, \
        TAO::Objref_Traits<CORBA::InterfaceDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InterfaceDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::InterfaceDefSeq, \
        CORBA::InterfaceDefSeq_var, \
        CORBA::InterfaceDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::InterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::InterfaceDef, \
            CORBA::InterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::InterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::InterfaceDef, \
            CORBA::InterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::InterfaceDefSeq, \
        CORBA::InterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::InterfaceDef, \
            CORBA::InterfaceDef_var \
          > \
      >

#if !defined (_CORBA_INTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_INTERFACEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::InterfaceDef, \
        CORBA::InterfaceDef_var \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::ExceptionDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ExceptionDef_ptr, \
        CORBA::ExceptionDef_var, \
        CORBA::ExceptionDef_out, \
        TAO::Objref_Traits<CORBA::ExceptionDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::NativeDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::NativeDef_ptr, \
        CORBA::NativeDef_var, \
        CORBA::NativeDef_out, \
        TAO::Objref_Traits<CORBA::NativeDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::ValueDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ValueDef_ptr, \
        CORBA::ValueDef_var, \
        CORBA::ValueDef_out, \
        TAO::Objref_Traits<CORBA::ValueDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ValueDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::ValueDefSeq, \
        CORBA::ValueDefSeq_var, \
        CORBA::ValueDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ValueDef, \
            CORBA::ValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ValueDef, \
            CORBA::ValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ValueDefSeq, \
        CORBA::ValueDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ValueDef, \
            CORBA::ValueDef_var \
          > \
      >

#if !defined (_CORBA_VALUEDEF__EXPLICIT_CS_)
#define _CORBA_VALUEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ValueDef, \
        CORBA::ValueDef_var \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::ValueBoxDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ValueBoxDef_ptr, \
        CORBA::ValueBoxDef_var, \
        CORBA::ValueBoxDef_out, \
        TAO::Objref_Traits<CORBA::ValueBoxDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::AbstractInterfaceDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::AbstractInterfaceDef_ptr, \
        CORBA::AbstractInterfaceDef_var, \
        CORBA::AbstractInterfaceDef_out, \
        TAO::Objref_Traits<CORBA::AbstractInterfaceDef> \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::AbstractInterfaceDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::AbstractInterfaceDefSeq, \
        CORBA::AbstractInterfaceDefSeq_var, \
        CORBA::AbstractInterfaceDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::AbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::AbstractInterfaceDef, \
            CORBA::AbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::AbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::AbstractInterfaceDef, \
            CORBA::AbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::AbstractInterfaceDefSeq, \
        CORBA::AbstractInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::AbstractInterfaceDef, \
            CORBA::AbstractInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::AbstractInterfaceDef, \
        CORBA::AbstractInterfaceDef_var \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::LocalInterfaceDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::LocalInterfaceDef_ptr, \
        CORBA::LocalInterfaceDef_var, \
        CORBA::LocalInterfaceDef_out, \
        TAO::Objref_Traits<CORBA::LocalInterfaceDef> \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::LocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::LocalInterfaceDef, \
            CORBA::LocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::LocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::LocalInterfaceDef, \
            CORBA::LocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::LocalInterfaceDefSeq, \
        CORBA::LocalInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::LocalInterfaceDef, \
            CORBA::LocalInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_LOCALINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_LOCALINTERFACEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::LocalInterfaceDef, \
        CORBA::LocalInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtInterfaceDef, \
            CORBA::ExtInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtInterfaceDef, \
            CORBA::ExtInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtInterfaceDefSeq, \
        CORBA::ExtInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtInterfaceDef, \
            CORBA::ExtInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_EXTINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_EXTINTERFACEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtInterfaceDef, \
        CORBA::ExtInterfaceDef_var \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate \
    TAO::Arg_Traits< \
        CORBA::ExtValueDef \
      >

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ExtValueDef_ptr, \
        CORBA::ExtValueDef_var, \
        CORBA::ExtValueDef_out, \
        TAO::Objref_Traits<CORBA::ExtValueDef> \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtValueDef, \
            CORBA::ExtValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtValueDef, \
            CORBA::ExtValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtValueDefSeq, \
        CORBA::ExtValueDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtValueDef, \
            CORBA::ExtValueDef_var \
          > \
      >

#if !defined (_CORBA_EXTVALUEDEF__EXPLICIT_CS_)
#define _CORBA_EXTVALUEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtValueDef, \
        CORBA::ExtValueDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtAbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtAbstractInterfaceDef, \
            CORBA::ExtAbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtAbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtAbstractInterfaceDef, \
            CORBA::ExtAbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtAbstractInterfaceDefSeq, \
        CORBA::ExtAbstractInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtAbstractInterfaceDef, \
            CORBA::ExtAbstractInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_EXTABSTRACTINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_EXTABSTRACTINTERFACEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtAbstractInterfaceDef, \
        CORBA::ExtAbstractInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtLocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtLocalInterfaceDef, \
            CORBA::ExtLocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtLocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtLocalInterfaceDef, \
            CORBA::ExtLocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtLocalInterfaceDefSeq, \
        CORBA::ExtLocalInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtLocalInterfaceDef, \
            CORBA::ExtLocalInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_EXTLOCALINTERFACEDEF__EXPLICIT_CS_)
#define _CORBA_EXTLOCALINTERFACEDEF__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtLocalInterfaceDef, \
        CORBA::ExtLocalInterfaceDef_var \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ContainedSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::ContainedSeq, \
        CORBA::ContainedSeq_var, \
        CORBA::ContainedSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ContainedSeq, \
        TAO_Object_Manager< \
            CORBA::Contained, \
            CORBA::Contained_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ContainedSeq, \
        TAO_Object_Manager< \
            CORBA::Contained, \
            CORBA::Contained_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ContainedSeq, \
        CORBA::ContainedSeq_var, \
        TAO_Object_Manager< \
            CORBA::Contained, \
            CORBA::Contained_var \
          > \
      >

#if !defined (_CORBA_CONTAINED__EXPLICIT_CS_)
#define _CORBA_CONTAINED__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::Contained, \
        CORBA::Contained_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::StructMember, \
        CORBA::StructMember_var \
      >

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::StructMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMemberSeq_var, \
        CORBA::StructMemberSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMemberSeq_var, \
        CORBA::StructMember \
      >

#if !defined (_CORBA_STRUCTMEMBER__EXPLICIT_CS_)
#define _CORBA_STRUCTMEMBER__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::StructMember \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::Initializer, \
        CORBA::Initializer_var \
      >

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InitializerSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::InitializerSeq, \
        CORBA::InitializerSeq_var, \
        CORBA::InitializerSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::InitializerSeq, \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::InitializerSeq, \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::InitializerSeq, \
        CORBA::InitializerSeq_var, \
        CORBA::Initializer \
      >

#if !defined (_CORBA_INITIALIZER__EXPLICIT_CS_)
#define _CORBA_INITIALIZER__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::Initializer \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ExceptionDescription, \
        CORBA::ExceptionDescription_var \
      >

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExcDescriptionSeq_var, \
        CORBA::ExceptionDescription \
      >

#if !defined (_CORBA_EXCEPTIONDESCRIPTION__EXPLICIT_CS_)
#define _CORBA_EXCEPTIONDESCRIPTION__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::ExceptionDescription \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ExtInitializer, \
        CORBA::ExtInitializer_var \
      >

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExtInitializerSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializerSeq_var, \
        CORBA::ExtInitializerSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializerSeq_var, \
        CORBA::ExtInitializer \
      >

#if !defined (_CORBA_EXTINITIALIZER__EXPLICIT_CS_)
#define _CORBA_EXTINITIALIZER__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::ExtInitializer \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::UnionMember, \
        CORBA::UnionMember_var \
      >

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::UnionMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMemberSeq_var, \
        CORBA::UnionMemberSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMemberSeq_var, \
        CORBA::UnionMember \
      >

#if !defined (_CORBA_UNIONMEMBER__EXPLICIT_CS_)
#define _CORBA_UNIONMEMBER__EXPLICIT_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::UnionMember \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::EnumMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits_T< \
        CORBA::EnumMemberSeq, \
        CORBA::EnumMemberSeq_var, \
        CORBA::EnumMemberSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::EnumMemberSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::EnumMemberSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::EnumMemberSeq, \
        CORBA::EnumMemberSeq_var, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        CORBA::TypedefDef \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::TypedefDef
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::TypedefDef
      >

# pragma instantiate \
    TAO::Narrow_Utils< \
        CORBA::TypedefDef \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::TypeDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::TypeDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::TypeDescription, \
        CORBA::TypeDescription_var \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 
