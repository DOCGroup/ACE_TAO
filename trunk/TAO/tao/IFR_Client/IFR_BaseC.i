// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_CORBA_IROBJECT___CI_)
#define _CORBA_IROBJECT___CI_

ACE_INLINE CORBA_IRObject_ptr
tao_CORBA_IRObject_duplicate (
    CORBA_IRObject_ptr p
  )
{
  return CORBA_IRObject::_duplicate (p);
}

ACE_INLINE void
tao_CORBA_IRObject_release (
    CORBA_IRObject_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE CORBA_IRObject_ptr
tao_CORBA_IRObject_nil (
    void
  )
{
  return CORBA_IRObject::_nil ();
}

ACE_INLINE CORBA_IRObject_ptr
tao_CORBA_IRObject_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return CORBA_IRObject::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_CORBA_IRObject_upcast (
    void *src
  )
{
  CORBA_IRObject **tmp =
    ACE_static_cast (CORBA_IRObject **, src);
  return *tmp;
}

ACE_INLINE
CORBA_IRObject::CORBA_IRObject (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_IRObject_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_Contained::Description_var
// *************************************************************

ACE_INLINE
CORBA_Contained::Description_var::Description_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_Contained::Description_var::Description_var (Description *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_Contained::Description_var::Description_var (const ::CORBA_Contained::Description_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_Contained::Description (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_Contained::Description_var::~Description_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_Contained::Description_var &
CORBA_Contained::Description_var::operator= (Description *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_Contained::Description_var &
CORBA_Contained::Description_var::operator= (const ::CORBA_Contained::Description_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Description *deep_copy =
            new Description (*p.ptr_);
          
          if (deep_copy != 0)
            {
              Description *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_Contained::Description *
CORBA_Contained::Description_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Contained::Description *
CORBA_Contained::Description_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Contained::Description_var::operator const ::CORBA_Contained::Description &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_Contained::Description_var::operator ::CORBA_Contained::Description &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_Contained::Description_var::operator ::CORBA_Contained::Description &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_Contained::Description_var::operator ::CORBA_Contained::Description *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_Contained::Description &
CORBA_Contained::Description_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_Contained::Description &
CORBA_Contained::Description_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_Contained::Description *&
CORBA_Contained::Description_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_Contained::Description *
CORBA_Contained::Description_var::_retn (void)
{
  ::CORBA_Contained::Description *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_Contained::Description *
CORBA_Contained::Description_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_Contained::Description_out
// *************************************************************

ACE_INLINE
CORBA_Contained::Description_out::Description_out (::CORBA_Contained::Description *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Contained::Description_out::Description_out (Description_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Contained::Description_out::Description_out (const ::CORBA_Contained::Description_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Description_out&, p).ptr_)
{}

ACE_INLINE CORBA_Contained::Description_out &
CORBA_Contained::Description_out::operator= (const ::CORBA_Contained::Description_out &p)
{
  this->ptr_ = ACE_const_cast (Description_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_Contained::Description_out &
CORBA_Contained::Description_out::operator= (Description *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_Contained::Description_out::operator ::CORBA_Contained::Description *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Contained::Description *&
CORBA_Contained::Description_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Contained::Description *
CORBA_Contained::Description_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_CONTAINED___CI_)
#define _CORBA_CONTAINED___CI_

ACE_INLINE CORBA_Contained_ptr
tao_CORBA_Contained_duplicate (
    CORBA_Contained_ptr p
  )
{
  return CORBA_Contained::_duplicate (p);
}

ACE_INLINE void
tao_CORBA_Contained_release (
    CORBA_Contained_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE CORBA_Contained_ptr
tao_CORBA_Contained_nil (
    void
  )
{
  return CORBA_Contained::_nil ();
}

ACE_INLINE CORBA_Contained_ptr
tao_CORBA_Contained_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return CORBA_Contained::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_CORBA_Contained_upcast (
    void *src
  )
{
  CORBA_Contained **tmp =
    ACE_static_cast (CORBA_Contained **, src);
  return *tmp;
}

ACE_INLINE
CORBA_Contained::CORBA_Contained (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_Contained_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CI_

  ACE_INLINE CORBA_Contained **
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA_Contained **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA_Contained*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      {
        buf[i] = CORBA_Contained::_nil ();
      }
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::freebuf (CORBA_Contained **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_Contained* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_Contained **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (this->maximum_);
      CORBA_Contained ** const tmp2 = ACE_reinterpret_cast (CORBA_Contained ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = CORBA_Contained::_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA_Contained **tmp = ACE_reinterpret_cast (CORBA_Contained **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA_Contained::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_Contained **tmp1 = ACE_reinterpret_cast (CORBA_Contained **, this->buffer_);
    CORBA_Contained ** const tmp2 = ACE_reinterpret_cast (CORBA_Contained ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp1[i] = CORBA_Contained::_duplicate (tmp2[i]);
      }
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA_Contained,CORBA_Contained_var>
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA_Contained ** const tmp = ACE_reinterpret_cast (CORBA_Contained ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA_Contained,CORBA_Contained_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA_Contained* *
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_Contained **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_Contained**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_Contained**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_Contained* *
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_Contained ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_CONTAINEDSEQ_CI_)
#define _CORBA_CONTAINEDSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ContainedSeq_var
// *************************************************************

ACE_INLINE
CORBA_ContainedSeq_var::CORBA_ContainedSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ContainedSeq_var::CORBA_ContainedSeq_var (CORBA_ContainedSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ContainedSeq_var::CORBA_ContainedSeq_var (const ::CORBA_ContainedSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ContainedSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ContainedSeq_var::~CORBA_ContainedSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ContainedSeq_var &
CORBA_ContainedSeq_var::operator= (CORBA_ContainedSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ContainedSeq_var &
CORBA_ContainedSeq_var::operator= (const ::CORBA_ContainedSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ContainedSeq *deep_copy =
            new CORBA_ContainedSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ContainedSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ContainedSeq *
CORBA_ContainedSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContainedSeq *
CORBA_ContainedSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ContainedSeq_var::operator const ::CORBA_ContainedSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ContainedSeq_var::operator ::CORBA_ContainedSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ContainedSeq_var::operator ::CORBA_ContainedSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ContainedSeq_var::operator ::CORBA_ContainedSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_Contained, CORBA_Contained_var>
CORBA_ContainedSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_ContainedSeq &
CORBA_ContainedSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ContainedSeq &
CORBA_ContainedSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ContainedSeq *&
CORBA_ContainedSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContainedSeq *
CORBA_ContainedSeq_var::_retn (void)
{
  ::CORBA_ContainedSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ContainedSeq *
CORBA_ContainedSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ContainedSeq_out
// *************************************************************

ACE_INLINE
CORBA_ContainedSeq_out::CORBA_ContainedSeq_out (CORBA_ContainedSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ContainedSeq_out::CORBA_ContainedSeq_out (CORBA_ContainedSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ContainedSeq_out::CORBA_ContainedSeq_out (const ::CORBA_ContainedSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ContainedSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ContainedSeq_out &
CORBA_ContainedSeq_out::operator= (const ::CORBA_ContainedSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ContainedSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ContainedSeq_out &
CORBA_ContainedSeq_out::operator= (CORBA_ContainedSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ContainedSeq_out::operator ::CORBA_ContainedSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContainedSeq *&
CORBA_ContainedSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ContainedSeq *
CORBA_ContainedSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_Contained, CORBA_Contained_var>
CORBA_ContainedSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA_InterfaceDef **
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA_InterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA_InterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      {
        buf[i] = tao_CORBA_InterfaceDef_nil ();
      }
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::freebuf (CORBA_InterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_InterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_InterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (this->maximum_);
      CORBA_InterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA_InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = tao_CORBA_InterfaceDef_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA_InterfaceDef **tmp = ACE_reinterpret_cast (CORBA_InterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        tao_CORBA_InterfaceDef_release (tmp[i]);
        tmp[i] = tao_CORBA_InterfaceDef_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_InterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA_InterfaceDef **, this->buffer_);
    CORBA_InterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA_InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp1[i] = tao_CORBA_InterfaceDef_duplicate (tmp2[i]);
      }
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA_InterfaceDef,CORBA_InterfaceDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA_InterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA_InterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA_InterfaceDef,CORBA_InterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA_InterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_InterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_InterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_InterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_InterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_InterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INTERFACEDEFSEQ_CI_)
#define _CORBA_INTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_InterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (CORBA_InterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (const ::CORBA_InterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_InterfaceDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDefSeq_var::~CORBA_InterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_InterfaceDefSeq_var &
CORBA_InterfaceDefSeq_var::operator= (CORBA_InterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_InterfaceDefSeq_var &
CORBA_InterfaceDefSeq_var::operator= (const ::CORBA_InterfaceDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_InterfaceDefSeq *deep_copy =
            new CORBA_InterfaceDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_InterfaceDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_var::operator const ::CORBA_InterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_var::operator ::CORBA_InterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_var::operator ::CORBA_InterfaceDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_InterfaceDefSeq_var::operator ::CORBA_InterfaceDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_InterfaceDef, CORBA_InterfaceDef_var>
CORBA_InterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_InterfaceDefSeq &
CORBA_InterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq &
CORBA_InterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_InterfaceDefSeq *&
CORBA_InterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::_retn (void)
{
  ::CORBA_InterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_InterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (CORBA_InterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (CORBA_InterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (const ::CORBA_InterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_InterfaceDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_InterfaceDefSeq_out &
CORBA_InterfaceDefSeq_out::operator= (const ::CORBA_InterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_InterfaceDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_InterfaceDefSeq_out &
CORBA_InterfaceDefSeq_out::operator= (CORBA_InterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_InterfaceDefSeq_out::operator ::CORBA_InterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *&
CORBA_InterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InterfaceDefSeq *
CORBA_InterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_InterfaceDef, CORBA_InterfaceDef_var>
CORBA_InterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CI_

  ACE_INLINE CORBA_ValueDef **
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA_ValueDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA_ValueDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      {
        buf[i] = tao_CORBA_ValueDef_nil ();
      }
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (CORBA_ValueDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_ValueDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_ValueDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (this->maximum_);
      CORBA_ValueDef ** const tmp2 = ACE_reinterpret_cast (CORBA_ValueDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = tao_CORBA_ValueDef_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA_ValueDef **tmp = ACE_reinterpret_cast (CORBA_ValueDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        tao_CORBA_ValueDef_release (tmp[i]);
        tmp[i] = tao_CORBA_ValueDef_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_ValueDef **tmp1 = ACE_reinterpret_cast (CORBA_ValueDef **, this->buffer_);
    CORBA_ValueDef ** const tmp2 = ACE_reinterpret_cast (CORBA_ValueDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp1[i] = tao_CORBA_ValueDef_duplicate (tmp2[i]);
      }
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA_ValueDef,CORBA_ValueDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA_ValueDef ** const tmp = ACE_reinterpret_cast (CORBA_ValueDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA_ValueDef,CORBA_ValueDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA_ValueDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_ValueDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_ValueDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_ValueDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_ValueDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_ValueDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEDEFSEQ_CI_)
#define _CORBA_VALUEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_ValueDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_ValueDefSeq_var::CORBA_ValueDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_ValueDefSeq_var::CORBA_ValueDefSeq_var (CORBA_ValueDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_ValueDefSeq_var::CORBA_ValueDefSeq_var (const ::CORBA_ValueDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_ValueDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDefSeq_var::~CORBA_ValueDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_ValueDefSeq_var &
CORBA_ValueDefSeq_var::operator= (CORBA_ValueDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_ValueDefSeq_var &
CORBA_ValueDefSeq_var::operator= (const ::CORBA_ValueDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_ValueDefSeq *deep_copy =
            new CORBA_ValueDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_ValueDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_ValueDefSeq_var::operator const ::CORBA_ValueDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ValueDefSeq_var::operator ::CORBA_ValueDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_ValueDefSeq_var::operator ::CORBA_ValueDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_ValueDefSeq_var::operator ::CORBA_ValueDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_ValueDef, CORBA_ValueDef_var>
CORBA_ValueDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_ValueDefSeq &
CORBA_ValueDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq &
CORBA_ValueDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_ValueDefSeq *&
CORBA_ValueDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::_retn (void)
{
  ::CORBA_ValueDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_ValueDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_ValueDefSeq_out::CORBA_ValueDefSeq_out (CORBA_ValueDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDefSeq_out::CORBA_ValueDefSeq_out (CORBA_ValueDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_ValueDefSeq_out::CORBA_ValueDefSeq_out (const ::CORBA_ValueDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_ValueDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_ValueDefSeq_out &
CORBA_ValueDefSeq_out::operator= (const ::CORBA_ValueDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_ValueDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_ValueDefSeq_out &
CORBA_ValueDefSeq_out::operator= (CORBA_ValueDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_ValueDefSeq_out::operator ::CORBA_ValueDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *&
CORBA_ValueDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_ValueDefSeq *
CORBA_ValueDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_ValueDef, CORBA_ValueDef_var>
CORBA_ValueDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_ABSTRACTINTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_ABSTRACTINTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA_AbstractInterfaceDef **
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA_AbstractInterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA_AbstractInterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      {
        buf[i] = tao_CORBA_AbstractInterfaceDef_nil ();
      }
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::freebuf (CORBA_AbstractInterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_AbstractInterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_AbstractInterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (this->maximum_);
      CORBA_AbstractInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = tao_CORBA_AbstractInterfaceDef_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA_AbstractInterfaceDef **tmp = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        tao_CORBA_AbstractInterfaceDef_release (tmp[i]);
        tmp[i] = tao_CORBA_AbstractInterfaceDef_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_AbstractInterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef **, this->buffer_);
    CORBA_AbstractInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp1[i] = tao_CORBA_AbstractInterfaceDef_duplicate (tmp2[i]);
      }
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA_AbstractInterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA_AbstractInterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_AbstractInterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_AbstractInterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_AbstractInterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_AbstractInterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CI_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_AbstractInterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::CORBA_AbstractInterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::CORBA_AbstractInterfaceDefSeq_var (CORBA_AbstractInterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::CORBA_AbstractInterfaceDefSeq_var (const ::CORBA_AbstractInterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_AbstractInterfaceDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::~CORBA_AbstractInterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_AbstractInterfaceDefSeq_var &
CORBA_AbstractInterfaceDefSeq_var::operator= (CORBA_AbstractInterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq_var &
CORBA_AbstractInterfaceDefSeq_var::operator= (const ::CORBA_AbstractInterfaceDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_AbstractInterfaceDefSeq *deep_copy =
            new CORBA_AbstractInterfaceDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_AbstractInterfaceDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_var::operator const ::CORBA_AbstractInterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_var::operator ::CORBA_AbstractInterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_var::operator ::CORBA_AbstractInterfaceDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_AbstractInterfaceDefSeq_var::operator ::CORBA_AbstractInterfaceDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_AbstractInterfaceDef, CORBA_AbstractInterfaceDef_var>
CORBA_AbstractInterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_AbstractInterfaceDefSeq &
CORBA_AbstractInterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq &
CORBA_AbstractInterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *&
CORBA_AbstractInterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::_retn (void)
{
  ::CORBA_AbstractInterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_AbstractInterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_out::CORBA_AbstractInterfaceDefSeq_out (CORBA_AbstractInterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_out::CORBA_AbstractInterfaceDefSeq_out (CORBA_AbstractInterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_AbstractInterfaceDefSeq_out::CORBA_AbstractInterfaceDefSeq_out (const ::CORBA_AbstractInterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_AbstractInterfaceDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq_out &
CORBA_AbstractInterfaceDefSeq_out::operator= (const ::CORBA_AbstractInterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_AbstractInterfaceDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq_out &
CORBA_AbstractInterfaceDefSeq_out::operator= (CORBA_AbstractInterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_AbstractInterfaceDefSeq_out::operator ::CORBA_AbstractInterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *&
CORBA_AbstractInterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_AbstractInterfaceDefSeq *
CORBA_AbstractInterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_AbstractInterfaceDef, CORBA_AbstractInterfaceDef_var>
CORBA_AbstractInterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_LOCALINTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_LOCALINTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA_LocalInterfaceDef **
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA_LocalInterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA_LocalInterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      {
        buf[i] = tao_CORBA_LocalInterfaceDef_nil ();
      }
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::freebuf (CORBA_LocalInterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_LocalInterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_LocalInterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (this->maximum_);
      CORBA_LocalInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA_LocalInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = tao_CORBA_LocalInterfaceDef_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA_LocalInterfaceDef **tmp = ACE_reinterpret_cast (CORBA_LocalInterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        tao_CORBA_LocalInterfaceDef_release (tmp[i]);
        tmp[i] = tao_CORBA_LocalInterfaceDef_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_LocalInterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA_LocalInterfaceDef **, this->buffer_);
    CORBA_LocalInterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA_LocalInterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp1[i] = tao_CORBA_LocalInterfaceDef_duplicate (tmp2[i]);
      }
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA_LocalInterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA_LocalInterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA_LocalInterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_LocalInterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_LocalInterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_LocalInterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_LocalInterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_LocalInterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CI_)
#define _CORBA_LOCALINTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_LocalInterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::CORBA_LocalInterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::CORBA_LocalInterfaceDefSeq_var (CORBA_LocalInterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::CORBA_LocalInterfaceDefSeq_var (const ::CORBA_LocalInterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_LocalInterfaceDefSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::~CORBA_LocalInterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_LocalInterfaceDefSeq_var &
CORBA_LocalInterfaceDefSeq_var::operator= (CORBA_LocalInterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq_var &
CORBA_LocalInterfaceDefSeq_var::operator= (const ::CORBA_LocalInterfaceDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_LocalInterfaceDefSeq *deep_copy =
            new CORBA_LocalInterfaceDefSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_LocalInterfaceDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_var::operator const ::CORBA_LocalInterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_var::operator ::CORBA_LocalInterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_var::operator ::CORBA_LocalInterfaceDefSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_LocalInterfaceDefSeq_var::operator ::CORBA_LocalInterfaceDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_LocalInterfaceDef, CORBA_LocalInterfaceDef_var>
CORBA_LocalInterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_LocalInterfaceDefSeq &
CORBA_LocalInterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq &
CORBA_LocalInterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_LocalInterfaceDefSeq *&
CORBA_LocalInterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::_retn (void)
{
  ::CORBA_LocalInterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_LocalInterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA_LocalInterfaceDefSeq_out::CORBA_LocalInterfaceDefSeq_out (CORBA_LocalInterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_out::CORBA_LocalInterfaceDefSeq_out (CORBA_LocalInterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_LocalInterfaceDefSeq_out::CORBA_LocalInterfaceDefSeq_out (const ::CORBA_LocalInterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_LocalInterfaceDefSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq_out &
CORBA_LocalInterfaceDefSeq_out::operator= (const ::CORBA_LocalInterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_LocalInterfaceDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq_out &
CORBA_LocalInterfaceDefSeq_out::operator= (CORBA_LocalInterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_LocalInterfaceDefSeq_out::operator ::CORBA_LocalInterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *&
CORBA_LocalInterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_LocalInterfaceDefSeq *
CORBA_LocalInterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA_LocalInterfaceDef, CORBA_LocalInterfaceDef_var>
CORBA_LocalInterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_StructMember_var
// *************************************************************

ACE_INLINE
CORBA_StructMember_var::CORBA_StructMember_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_StructMember_var::CORBA_StructMember_var (CORBA_StructMember *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_StructMember_var::CORBA_StructMember_var (const ::CORBA_StructMember_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_StructMember (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_StructMember_var::~CORBA_StructMember_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_StructMember_var &
CORBA_StructMember_var::operator= (CORBA_StructMember *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_StructMember_var &
CORBA_StructMember_var::operator= (const ::CORBA_StructMember_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_StructMember *deep_copy =
            new CORBA_StructMember (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_StructMember *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_StructMember *
CORBA_StructMember_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMember *
CORBA_StructMember_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_StructMember_var::operator const ::CORBA_StructMember &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_StructMember_var::operator ::CORBA_StructMember &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_StructMember_var::operator ::CORBA_StructMember &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_StructMember_var::operator ::CORBA_StructMember *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_StructMember &
CORBA_StructMember_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_StructMember &
CORBA_StructMember_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_StructMember *&
CORBA_StructMember_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMember *
CORBA_StructMember_var::_retn (void)
{
  ::CORBA_StructMember *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_StructMember *
CORBA_StructMember_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_StructMember_out
// *************************************************************

ACE_INLINE
CORBA_StructMember_out::CORBA_StructMember_out (::CORBA_StructMember *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_StructMember_out::CORBA_StructMember_out (CORBA_StructMember_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_StructMember_out::CORBA_StructMember_out (const ::CORBA_StructMember_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_StructMember_out&, p).ptr_)
{}

ACE_INLINE CORBA_StructMember_out &
CORBA_StructMember_out::operator= (const ::CORBA_StructMember_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_StructMember_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_StructMember_out &
CORBA_StructMember_out::operator= (CORBA_StructMember *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_StructMember_out::operator ::CORBA_StructMember *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMember *&
CORBA_StructMember_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMember *
CORBA_StructMember_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA_StructMember *
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA_StructMember *retval = 0;
    ACE_NEW_RETURN (retval, CORBA_StructMember[size], 0);
    return retval;
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (CORBA_StructMember *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_StructMember *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (const _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_StructMember *tmp1 = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (this->maximum_);
      CORBA_StructMember * const tmp2 = ACE_reinterpret_cast (CORBA_StructMember * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA_StructMember *tmp = ACE_reinterpret_cast (CORBA_StructMember *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_StructMember *tmp1 = ACE_reinterpret_cast (CORBA_StructMember *, this->buffer_);
    CORBA_StructMember * const tmp2 = ACE_reinterpret_cast (CORBA_StructMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA_StructMember &
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_StructMember* tmp = ACE_reinterpret_cast(CORBA_StructMember*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA_StructMember &
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_StructMember * const tmp = ACE_reinterpret_cast (CORBA_StructMember* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA_StructMember *
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_StructMember *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_StructMember*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_StructMember*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_StructMember *
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_StructMember * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA_StructMember *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA_StructMember *tmp = ACE_reinterpret_cast(CORBA_StructMember*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_STRUCTMEMBERSEQ_CI_)
#define _CORBA_STRUCTMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_StructMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA_StructMemberSeq_var::CORBA_StructMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_StructMemberSeq_var::CORBA_StructMemberSeq_var (CORBA_StructMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_StructMemberSeq_var::CORBA_StructMemberSeq_var (const ::CORBA_StructMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_StructMemberSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_StructMemberSeq_var::~CORBA_StructMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_StructMemberSeq_var &
CORBA_StructMemberSeq_var::operator= (CORBA_StructMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_StructMemberSeq_var &
CORBA_StructMemberSeq_var::operator= (const ::CORBA_StructMemberSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_StructMemberSeq *deep_copy =
            new CORBA_StructMemberSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_StructMemberSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_StructMemberSeq *
CORBA_StructMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMemberSeq *
CORBA_StructMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_StructMemberSeq_var::operator const ::CORBA_StructMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_StructMemberSeq_var::operator ::CORBA_StructMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_StructMemberSeq_var::operator ::CORBA_StructMemberSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_StructMemberSeq_var::operator ::CORBA_StructMemberSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_StructMember &
CORBA_StructMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA_StructMember &
CORBA_StructMemberSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA_StructMember &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_StructMemberSeq &
CORBA_StructMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_StructMemberSeq &
CORBA_StructMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_StructMemberSeq *&
CORBA_StructMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMemberSeq *
CORBA_StructMemberSeq_var::_retn (void)
{
  ::CORBA_StructMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_StructMemberSeq *
CORBA_StructMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_StructMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA_StructMemberSeq_out::CORBA_StructMemberSeq_out (CORBA_StructMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_StructMemberSeq_out::CORBA_StructMemberSeq_out (CORBA_StructMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_StructMemberSeq_out::CORBA_StructMemberSeq_out (const ::CORBA_StructMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_StructMemberSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_StructMemberSeq_out &
CORBA_StructMemberSeq_out::operator= (const ::CORBA_StructMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_StructMemberSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_StructMemberSeq_out &
CORBA_StructMemberSeq_out::operator= (CORBA_StructMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_StructMemberSeq_out::operator ::CORBA_StructMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMemberSeq *&
CORBA_StructMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_StructMemberSeq *
CORBA_StructMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_StructMember &
CORBA_StructMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_Initializer_var
// *************************************************************

ACE_INLINE
CORBA_Initializer_var::CORBA_Initializer_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_Initializer_var::CORBA_Initializer_var (CORBA_Initializer *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_Initializer_var::CORBA_Initializer_var (const ::CORBA_Initializer_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_Initializer (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_Initializer_var::~CORBA_Initializer_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_Initializer_var &
CORBA_Initializer_var::operator= (CORBA_Initializer *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_Initializer_var &
CORBA_Initializer_var::operator= (const ::CORBA_Initializer_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_Initializer *deep_copy =
            new CORBA_Initializer (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_Initializer *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_Initializer *
CORBA_Initializer_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Initializer *
CORBA_Initializer_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Initializer_var::operator const ::CORBA_Initializer &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_Initializer_var::operator ::CORBA_Initializer &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_Initializer_var::operator ::CORBA_Initializer &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_Initializer_var::operator ::CORBA_Initializer *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_Initializer &
CORBA_Initializer_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_Initializer &
CORBA_Initializer_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_Initializer *&
CORBA_Initializer_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_Initializer *
CORBA_Initializer_var::_retn (void)
{
  ::CORBA_Initializer *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_Initializer *
CORBA_Initializer_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_Initializer_out
// *************************************************************

ACE_INLINE
CORBA_Initializer_out::CORBA_Initializer_out (::CORBA_Initializer *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Initializer_out::CORBA_Initializer_out (CORBA_Initializer_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Initializer_out::CORBA_Initializer_out (const ::CORBA_Initializer_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_Initializer_out&, p).ptr_)
{}

ACE_INLINE CORBA_Initializer_out &
CORBA_Initializer_out::operator= (const ::CORBA_Initializer_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_Initializer_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_Initializer_out &
CORBA_Initializer_out::operator= (CORBA_Initializer *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_Initializer_out::operator ::CORBA_Initializer *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Initializer *&
CORBA_Initializer_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Initializer *
CORBA_Initializer_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA_Initializer *
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA_Initializer *retval = 0;
    ACE_NEW_RETURN (retval, CORBA_Initializer[size], 0);
    return retval;
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (CORBA_Initializer *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_Initializer *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (const _TAO_Unbounded_Sequence_CORBA_InitializerSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_Initializer *tmp1 = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (this->maximum_);
      CORBA_Initializer * const tmp2 = ACE_reinterpret_cast (CORBA_Initializer * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_InitializerSeq &
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_InitializerSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA_Initializer *tmp = ACE_reinterpret_cast (CORBA_Initializer *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_Initializer *tmp1 = ACE_reinterpret_cast (CORBA_Initializer *, this->buffer_);
    CORBA_Initializer * const tmp2 = ACE_reinterpret_cast (CORBA_Initializer * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA_Initializer &
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_Initializer* tmp = ACE_reinterpret_cast(CORBA_Initializer*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA_Initializer &
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_Initializer * const tmp = ACE_reinterpret_cast (CORBA_Initializer* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA_Initializer *
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_Initializer *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_Initializer*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_Initializer*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_Initializer *
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_Initializer * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA_Initializer *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA_Initializer *tmp = ACE_reinterpret_cast(CORBA_Initializer*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INITIALIZERSEQ_CI_)
#define _CORBA_INITIALIZERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_InitializerSeq_var
// *************************************************************

ACE_INLINE
CORBA_InitializerSeq_var::CORBA_InitializerSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_InitializerSeq_var::CORBA_InitializerSeq_var (CORBA_InitializerSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_InitializerSeq_var::CORBA_InitializerSeq_var (const ::CORBA_InitializerSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_InitializerSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_InitializerSeq_var::~CORBA_InitializerSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_InitializerSeq_var &
CORBA_InitializerSeq_var::operator= (CORBA_InitializerSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_InitializerSeq_var &
CORBA_InitializerSeq_var::operator= (const ::CORBA_InitializerSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_InitializerSeq *deep_copy =
            new CORBA_InitializerSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_InitializerSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_InitializerSeq *
CORBA_InitializerSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InitializerSeq *
CORBA_InitializerSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_InitializerSeq_var::operator const ::CORBA_InitializerSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InitializerSeq_var::operator ::CORBA_InitializerSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_InitializerSeq_var::operator ::CORBA_InitializerSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_InitializerSeq_var::operator ::CORBA_InitializerSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_Initializer &
CORBA_InitializerSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA_Initializer &
CORBA_InitializerSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA_Initializer &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_InitializerSeq &
CORBA_InitializerSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_InitializerSeq &
CORBA_InitializerSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_InitializerSeq *&
CORBA_InitializerSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_InitializerSeq *
CORBA_InitializerSeq_var::_retn (void)
{
  ::CORBA_InitializerSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_InitializerSeq *
CORBA_InitializerSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_InitializerSeq_out
// *************************************************************

ACE_INLINE
CORBA_InitializerSeq_out::CORBA_InitializerSeq_out (CORBA_InitializerSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InitializerSeq_out::CORBA_InitializerSeq_out (CORBA_InitializerSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_InitializerSeq_out::CORBA_InitializerSeq_out (const ::CORBA_InitializerSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_InitializerSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_InitializerSeq_out &
CORBA_InitializerSeq_out::operator= (const ::CORBA_InitializerSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_InitializerSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_InitializerSeq_out &
CORBA_InitializerSeq_out::operator= (CORBA_InitializerSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_InitializerSeq_out::operator ::CORBA_InitializerSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InitializerSeq *&
CORBA_InitializerSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_InitializerSeq *
CORBA_InitializerSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_Initializer &
CORBA_InitializerSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_UnionMember_var
// *************************************************************

ACE_INLINE
CORBA_UnionMember_var::CORBA_UnionMember_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_UnionMember_var::CORBA_UnionMember_var (CORBA_UnionMember *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_UnionMember_var::CORBA_UnionMember_var (const ::CORBA_UnionMember_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_UnionMember (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_UnionMember_var::~CORBA_UnionMember_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_UnionMember_var &
CORBA_UnionMember_var::operator= (CORBA_UnionMember *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_UnionMember_var &
CORBA_UnionMember_var::operator= (const ::CORBA_UnionMember_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_UnionMember *deep_copy =
            new CORBA_UnionMember (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_UnionMember *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_UnionMember *
CORBA_UnionMember_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMember *
CORBA_UnionMember_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_UnionMember_var::operator const ::CORBA_UnionMember &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_UnionMember_var::operator ::CORBA_UnionMember &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_UnionMember_var::operator ::CORBA_UnionMember &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_UnionMember_var::operator ::CORBA_UnionMember *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_UnionMember &
CORBA_UnionMember_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_UnionMember &
CORBA_UnionMember_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_UnionMember *&
CORBA_UnionMember_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMember *
CORBA_UnionMember_var::_retn (void)
{
  ::CORBA_UnionMember *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_UnionMember *
CORBA_UnionMember_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_UnionMember_out
// *************************************************************

ACE_INLINE
CORBA_UnionMember_out::CORBA_UnionMember_out (::CORBA_UnionMember *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_UnionMember_out::CORBA_UnionMember_out (CORBA_UnionMember_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_UnionMember_out::CORBA_UnionMember_out (const ::CORBA_UnionMember_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_UnionMember_out&, p).ptr_)
{}

ACE_INLINE CORBA_UnionMember_out &
CORBA_UnionMember_out::operator= (const ::CORBA_UnionMember_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_UnionMember_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_UnionMember_out &
CORBA_UnionMember_out::operator= (CORBA_UnionMember *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_UnionMember_out::operator ::CORBA_UnionMember *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMember *&
CORBA_UnionMember_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMember *
CORBA_UnionMember_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA_UnionMember *
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA_UnionMember *retval = 0;
    ACE_NEW_RETURN (retval, CORBA_UnionMember[size], 0);
    return retval;
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (CORBA_UnionMember *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_UnionMember *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (const _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_UnionMember *tmp1 = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (this->maximum_);
      CORBA_UnionMember * const tmp2 = ACE_reinterpret_cast (CORBA_UnionMember * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA_UnionMember *tmp = ACE_reinterpret_cast (CORBA_UnionMember *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_UnionMember *tmp1 = ACE_reinterpret_cast (CORBA_UnionMember *, this->buffer_);
    CORBA_UnionMember * const tmp2 = ACE_reinterpret_cast (CORBA_UnionMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA_UnionMember &
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_UnionMember* tmp = ACE_reinterpret_cast(CORBA_UnionMember*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA_UnionMember &
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_UnionMember * const tmp = ACE_reinterpret_cast (CORBA_UnionMember* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA_UnionMember *
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_UnionMember *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_UnionMember*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_UnionMember*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_UnionMember *
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_UnionMember * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA_UnionMember *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA_UnionMember *tmp = ACE_reinterpret_cast(CORBA_UnionMember*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_UNIONMEMBERSEQ_CI_)
#define _CORBA_UNIONMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_UnionMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA_UnionMemberSeq_var::CORBA_UnionMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_UnionMemberSeq_var::CORBA_UnionMemberSeq_var (CORBA_UnionMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_UnionMemberSeq_var::CORBA_UnionMemberSeq_var (const ::CORBA_UnionMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_UnionMemberSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_UnionMemberSeq_var::~CORBA_UnionMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_UnionMemberSeq_var &
CORBA_UnionMemberSeq_var::operator= (CORBA_UnionMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_UnionMemberSeq_var &
CORBA_UnionMemberSeq_var::operator= (const ::CORBA_UnionMemberSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_UnionMemberSeq *deep_copy =
            new CORBA_UnionMemberSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_UnionMemberSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_UnionMemberSeq *
CORBA_UnionMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMemberSeq *
CORBA_UnionMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_UnionMemberSeq_var::operator const ::CORBA_UnionMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_UnionMemberSeq_var::operator ::CORBA_UnionMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_UnionMemberSeq_var::operator ::CORBA_UnionMemberSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_UnionMemberSeq_var::operator ::CORBA_UnionMemberSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_UnionMember &
CORBA_UnionMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA_UnionMember &
CORBA_UnionMemberSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA_UnionMember &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_UnionMemberSeq &
CORBA_UnionMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_UnionMemberSeq &
CORBA_UnionMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_UnionMemberSeq *&
CORBA_UnionMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMemberSeq *
CORBA_UnionMemberSeq_var::_retn (void)
{
  ::CORBA_UnionMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_UnionMemberSeq *
CORBA_UnionMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_UnionMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA_UnionMemberSeq_out::CORBA_UnionMemberSeq_out (CORBA_UnionMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_UnionMemberSeq_out::CORBA_UnionMemberSeq_out (CORBA_UnionMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_UnionMemberSeq_out::CORBA_UnionMemberSeq_out (const ::CORBA_UnionMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_UnionMemberSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_UnionMemberSeq_out &
CORBA_UnionMemberSeq_out::operator= (const ::CORBA_UnionMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_UnionMemberSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_UnionMemberSeq_out &
CORBA_UnionMemberSeq_out::operator= (CORBA_UnionMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_UnionMemberSeq_out::operator ::CORBA_UnionMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMemberSeq *&
CORBA_UnionMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_UnionMemberSeq *
CORBA_UnionMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_UnionMember &
CORBA_UnionMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMMEMBERSEQ_CI_)
#define _CORBA_ENUMMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_EnumMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA_EnumMemberSeq_var::CORBA_EnumMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_EnumMemberSeq_var::CORBA_EnumMemberSeq_var (CORBA_EnumMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_EnumMemberSeq_var::CORBA_EnumMemberSeq_var (const ::CORBA_EnumMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_EnumMemberSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_EnumMemberSeq_var::~CORBA_EnumMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_EnumMemberSeq_var &
CORBA_EnumMemberSeq_var::operator= (CORBA_EnumMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_EnumMemberSeq_var &
CORBA_EnumMemberSeq_var::operator= (const ::CORBA_EnumMemberSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_EnumMemberSeq *deep_copy =
            new CORBA_EnumMemberSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_EnumMemberSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_EnumMemberSeq *
CORBA_EnumMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumMemberSeq *
CORBA_EnumMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_EnumMemberSeq_var::operator const ::CORBA_EnumMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_EnumMemberSeq_var::operator ::CORBA_EnumMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_EnumMemberSeq_var::operator ::CORBA_EnumMemberSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_EnumMemberSeq_var::operator ::CORBA_EnumMemberSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
CORBA_EnumMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::CORBA_EnumMemberSeq &
CORBA_EnumMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_EnumMemberSeq &
CORBA_EnumMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_EnumMemberSeq *&
CORBA_EnumMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumMemberSeq *
CORBA_EnumMemberSeq_var::_retn (void)
{
  ::CORBA_EnumMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_EnumMemberSeq *
CORBA_EnumMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_EnumMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA_EnumMemberSeq_out::CORBA_EnumMemberSeq_out (CORBA_EnumMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_EnumMemberSeq_out::CORBA_EnumMemberSeq_out (CORBA_EnumMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_EnumMemberSeq_out::CORBA_EnumMemberSeq_out (const ::CORBA_EnumMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_EnumMemberSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_EnumMemberSeq_out &
CORBA_EnumMemberSeq_out::operator= (const ::CORBA_EnumMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_EnumMemberSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_EnumMemberSeq_out &
CORBA_EnumMemberSeq_out::operator= (CORBA_EnumMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_EnumMemberSeq_out::operator ::CORBA_EnumMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumMemberSeq *&
CORBA_EnumMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_EnumMemberSeq *
CORBA_EnumMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
CORBA_EnumMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_Container::Description_var
// *************************************************************

ACE_INLINE
CORBA_Container::Description_var::Description_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_Container::Description_var::Description_var (Description *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_Container::Description_var::Description_var (const ::CORBA_Container::Description_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_Container::Description (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_Container::Description_var::~Description_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_Container::Description_var &
CORBA_Container::Description_var::operator= (Description *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_Container::Description_var &
CORBA_Container::Description_var::operator= (const ::CORBA_Container::Description_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Description *deep_copy =
            new Description (*p.ptr_);
          
          if (deep_copy != 0)
            {
              Description *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_Container::Description *
CORBA_Container::Description_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::Description *
CORBA_Container::Description_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_Container::Description_var::operator const ::CORBA_Container::Description &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_Container::Description_var::operator ::CORBA_Container::Description &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_Container::Description_var::operator ::CORBA_Container::Description &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_Container::Description_var::operator ::CORBA_Container::Description *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_Container::Description &
CORBA_Container::Description_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_Container::Description &
CORBA_Container::Description_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_Container::Description *&
CORBA_Container::Description_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::Description *
CORBA_Container::Description_var::_retn (void)
{
  ::CORBA_Container::Description *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_Container::Description *
CORBA_Container::Description_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_Container::Description_out
// *************************************************************

ACE_INLINE
CORBA_Container::Description_out::Description_out (::CORBA_Container::Description *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Container::Description_out::Description_out (Description_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Container::Description_out::Description_out (const ::CORBA_Container::Description_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Description_out&, p).ptr_)
{}

ACE_INLINE CORBA_Container::Description_out &
CORBA_Container::Description_out::operator= (const ::CORBA_Container::Description_out &p)
{
  this->ptr_ = ACE_const_cast (Description_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_Container::Description_out &
CORBA_Container::Description_out::operator= (Description *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_Container::Description_out::operator ::CORBA_Container::Description *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::Description *&
CORBA_Container::Description_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::Description *
CORBA_Container::Description_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA_Container::Description *
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    CORBA_Container::Description *retval = 0;
    ACE_NEW_RETURN (retval, CORBA_Container::Description[size], 0);
    return retval;
  }
  
  ACE_INLINE void CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (CORBA_Container::Description *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA_Container::Description *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      CORBA_Container::Description *tmp1 = _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (this->maximum_);
      CORBA_Container::Description * const tmp2 = ACE_reinterpret_cast (CORBA_Container::Description * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA_Container::Description *tmp = ACE_reinterpret_cast (CORBA_Container::Description *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA_Container::Description *tmp1 = ACE_reinterpret_cast (CORBA_Container::Description *, this->buffer_);
    CORBA_Container::Description * const tmp2 = ACE_reinterpret_cast (CORBA_Container::Description * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA_Container::Description &
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_Container::Description* tmp = ACE_reinterpret_cast(CORBA_Container::Description*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA_Container::Description &
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA_Container::Description * const tmp = ACE_reinterpret_cast (CORBA_Container::Description* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA_Container::Description *
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA_Container::Description *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA_Container::Description*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA_Container::Description*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA_Container::Description *
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA_Container::Description * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA_Container::Description *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA_Container::Description *tmp = ACE_reinterpret_cast(CORBA_Container::Description*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CI_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA_Container::DescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA_Container::DescriptionSeq_var::DescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_Container::DescriptionSeq_var::DescriptionSeq_var (DescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_Container::DescriptionSeq_var::DescriptionSeq_var (const ::CORBA_Container::DescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_Container::DescriptionSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_Container::DescriptionSeq_var::~DescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_Container::DescriptionSeq_var &
CORBA_Container::DescriptionSeq_var::operator= (DescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq_var &
CORBA_Container::DescriptionSeq_var::operator= (const ::CORBA_Container::DescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          DescriptionSeq *deep_copy =
            new DescriptionSeq (*p.ptr_);
          
          if (deep_copy != 0)
            {
              DescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_Container::DescriptionSeq *
CORBA_Container::DescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq *
CORBA_Container::DescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA_Container::DescriptionSeq_var::operator const ::CORBA_Container::DescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_Container::DescriptionSeq_var::operator ::CORBA_Container::DescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA_Container::DescriptionSeq_var::operator ::CORBA_Container::DescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_Container::DescriptionSeq_var::operator ::CORBA_Container::DescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA_Container::Description &
CORBA_Container::DescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA_Container::Description &
CORBA_Container::DescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA_Container::Description &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::CORBA_Container::DescriptionSeq &
CORBA_Container::DescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq &
CORBA_Container::DescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_Container::DescriptionSeq *&
CORBA_Container::DescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq *
CORBA_Container::DescriptionSeq_var::_retn (void)
{
  ::CORBA_Container::DescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq *
CORBA_Container::DescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_Container::DescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA_Container::DescriptionSeq_out::DescriptionSeq_out (DescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Container::DescriptionSeq_out::DescriptionSeq_out (DescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_Container::DescriptionSeq_out::DescriptionSeq_out (const ::CORBA_Container::DescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (DescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE ::CORBA_Container::DescriptionSeq_out &
CORBA_Container::DescriptionSeq_out::operator= (const ::CORBA_Container::DescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (DescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq_out &
CORBA_Container::DescriptionSeq_out::operator= (DescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_Container::DescriptionSeq_out::operator ::CORBA_Container::DescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq *&
CORBA_Container::DescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_Container::DescriptionSeq *
CORBA_Container::DescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA_Container::Description &
CORBA_Container::DescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER___CI_)
#define _CORBA_CONTAINER___CI_

ACE_INLINE CORBA_Container_ptr
tao_CORBA_Container_duplicate (
    CORBA_Container_ptr p
  )
{
  return CORBA_Container::_duplicate (p);
}

ACE_INLINE void
tao_CORBA_Container_release (
    CORBA_Container_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE CORBA_Container_ptr
tao_CORBA_Container_nil (
    void
  )
{
  return CORBA_Container::_nil ();
}

ACE_INLINE CORBA_Container_ptr
tao_CORBA_Container_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return CORBA_Container::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_CORBA_Container_upcast (
    void *src
  )
{
  CORBA_Container **tmp =
    ACE_static_cast (CORBA_Container **, src);
  return *tmp;
}

ACE_INLINE
CORBA_Container::CORBA_Container (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_Container_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_IDLTYPE___CI_)
#define _CORBA_IDLTYPE___CI_

ACE_INLINE CORBA_IDLType_ptr
tao_CORBA_IDLType_duplicate (
    CORBA_IDLType_ptr p
  )
{
  return CORBA_IDLType::_duplicate (p);
}

ACE_INLINE void
tao_CORBA_IDLType_release (
    CORBA_IDLType_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE CORBA_IDLType_ptr
tao_CORBA_IDLType_nil (
    void
  )
{
  return CORBA_IDLType::_nil ();
}

ACE_INLINE CORBA_IDLType_ptr
tao_CORBA_IDLType_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return CORBA_IDLType::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_CORBA_IDLType_upcast (
    void *src
  )
{
  CORBA_IDLType **tmp =
    ACE_static_cast (CORBA_IDLType **, src);
  return *tmp;
}

ACE_INLINE
CORBA_IDLType::CORBA_IDLType (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_IDLType_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_CORBA_TYPEDEFDEF___CI_)
#define _CORBA_TYPEDEFDEF___CI_

ACE_INLINE CORBA_TypedefDef_ptr
tao_CORBA_TypedefDef_duplicate (
    CORBA_TypedefDef_ptr p
  )
{
  return CORBA_TypedefDef::_duplicate (p);
}

ACE_INLINE void
tao_CORBA_TypedefDef_release (
    CORBA_TypedefDef_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE CORBA_TypedefDef_ptr
tao_CORBA_TypedefDef_nil (
    void
  )
{
  return CORBA_TypedefDef::_nil ();
}

ACE_INLINE CORBA_TypedefDef_ptr
tao_CORBA_TypedefDef_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return CORBA_TypedefDef::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_CORBA_TypedefDef_upcast (
    void *src
  )
{
  CORBA_TypedefDef **tmp =
    ACE_static_cast (CORBA_TypedefDef **, src);
  return *tmp;
}

ACE_INLINE
CORBA_TypedefDef::CORBA_TypedefDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_TypedefDef_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA_TypeDescription_var
// *************************************************************

ACE_INLINE
CORBA_TypeDescription_var::CORBA_TypeDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA_TypeDescription_var::CORBA_TypeDescription_var (CORBA_TypeDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA_TypeDescription_var::CORBA_TypeDescription_var (const ::CORBA_TypeDescription_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::CORBA_TypeDescription (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA_TypeDescription_var::~CORBA_TypeDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA_TypeDescription_var &
CORBA_TypeDescription_var::operator= (CORBA_TypeDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::CORBA_TypeDescription_var &
CORBA_TypeDescription_var::operator= (const ::CORBA_TypeDescription_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CORBA_TypeDescription *deep_copy =
            new CORBA_TypeDescription (*p.ptr_);
          
          if (deep_copy != 0)
            {
              CORBA_TypeDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA_TypeDescription *
CORBA_TypeDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_TypeDescription *
CORBA_TypeDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA_TypeDescription_var::operator const ::CORBA_TypeDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_TypeDescription_var::operator ::CORBA_TypeDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA_TypeDescription_var::operator ::CORBA_TypeDescription &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
CORBA_TypeDescription_var::operator ::CORBA_TypeDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA_TypeDescription &
CORBA_TypeDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA_TypeDescription &
CORBA_TypeDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::CORBA_TypeDescription *&
CORBA_TypeDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA_TypeDescription *
CORBA_TypeDescription_var::_retn (void)
{
  ::CORBA_TypeDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA_TypeDescription *
CORBA_TypeDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA_TypeDescription_out
// *************************************************************

ACE_INLINE
CORBA_TypeDescription_out::CORBA_TypeDescription_out (::CORBA_TypeDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_TypeDescription_out::CORBA_TypeDescription_out (CORBA_TypeDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA_TypeDescription_out::CORBA_TypeDescription_out (const ::CORBA_TypeDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_TypeDescription_out&, p).ptr_)
{}

ACE_INLINE CORBA_TypeDescription_out &
CORBA_TypeDescription_out::operator= (const ::CORBA_TypeDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_TypeDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE CORBA_TypeDescription_out &
CORBA_TypeDescription_out::operator= (CORBA_TypeDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA_TypeDescription_out::operator ::CORBA_TypeDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_TypeDescription *&
CORBA_TypeDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA_TypeDescription *
CORBA_TypeDescription_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::DefinitionKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::DefinitionKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::DefinitionKind, _tao_temp);
    }
  
  return _tao_result;
}

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_IRObject_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_IRObject_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_Repository_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_Repository_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_Container_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_Container_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_Contained_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_Contained_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_Contained::Description &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA_Contained::Description &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_ContainedSeq_I_
#define _TAO_CDR_OP_CORBA_ContainedSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_ContainedSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_ContainedSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ContainedSeq_I_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_ModuleDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_ModuleDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_ConstantDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_ConstantDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_IDLType_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_IDLType_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_StructDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_StructDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_UnionDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_UnionDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_EnumDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_EnumDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_AliasDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_AliasDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_InterfaceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_InterfaceDef_ptr &
  );


#if !defined _TAO_CDR_OP_CORBA_InterfaceDefSeq_I_
#define _TAO_CDR_OP_CORBA_InterfaceDefSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_InterfaceDefSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_InterfaceDefSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_InterfaceDefSeq_I_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_ExceptionDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_ExceptionDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_NativeDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_NativeDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_ValueDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_ValueDef_ptr &
  );


#if !defined _TAO_CDR_OP_CORBA_ValueDefSeq_I_
#define _TAO_CDR_OP_CORBA_ValueDefSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_ValueDefSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_ValueDefSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ValueDefSeq_I_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_ValueBoxDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_ValueBoxDef_ptr &
  );

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_AbstractInterfaceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_AbstractInterfaceDef_ptr &
  );


#if !defined _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_I_
#define _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_AbstractInterfaceDefSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_AbstractInterfaceDefSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_I_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_LocalInterfaceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_LocalInterfaceDef_ptr &
  );


#if !defined _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_I_
#define _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_LocalInterfaceDefSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_LocalInterfaceDefSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_StructMember &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA_StructMember &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ())
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_StructMemberSeq_I_
#define _TAO_CDR_OP_CORBA_StructMemberSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_StructMemberSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_StructMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_StructMemberSeq_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_Initializer &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.members) &&
    (strm << _tao_aggregate.name.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA_Initializer &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.members) &&
    (strm >> _tao_aggregate.name.out ())
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_InitializerSeq_I_
#define _TAO_CDR_OP_CORBA_InitializerSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_InitializerSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_InitializerSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_InitializerSeq_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_UnionMember &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.label) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA_UnionMember &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.label) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ())
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_UnionMemberSeq_I_
#define _TAO_CDR_OP_CORBA_UnionMemberSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_UnionMemberSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_UnionMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_UnionMemberSeq_I_ */


#if !defined _TAO_CDR_OP_CORBA_EnumMemberSeq_I_
#define _TAO_CDR_OP_CORBA_EnumMemberSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_EnumMemberSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_EnumMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_EnumMemberSeq_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_Container::Description &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.contained_object.in ()) &&
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA_Container::Description &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.contained_object.out ()) &&
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_CORBA_Container_DescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_Container_DescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA_Container::DescriptionSeq &
  );
CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA_Container::DescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_Container_DescriptionSeq_I_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_TypedefDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_TypedefDef_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_TypeDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA_TypeDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}

