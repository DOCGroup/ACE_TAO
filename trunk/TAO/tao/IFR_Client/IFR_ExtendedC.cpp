// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "IFR_ExtendedC.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IFR_ExtendedC.i"
#endif /* !defined INLINE */

// ********************************************************************
// Methods for sequences classes moved from IFR_BaseC.cpp

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CS_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CS_

  // The Base_Sequence functions, please see tao/Sequence.h
  void
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_allocate_buffer (CORBA::ULong length)
  {
    CORBA::ValueDef **tmp = 0;
    tmp = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (length);
    
    if (this->buffer_ != 0)
    {
      CORBA::ValueDef **old = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        if (!this->release_)
          tmp[i] = CORBA::ValueDef::_duplicate (old[i]);
        else
          tmp[i] = old[i];
        
      if (this->release_)
        delete[] old;
      
    }
    this->buffer_ = tmp;
  }
  
  void
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_deallocate_buffer (void)
  {
    if (this->buffer_ == 0 || this->release_ == 0)
      return;
    CORBA::ValueDef **tmp = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
    for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = CORBA::ValueDef::_nil ();
    }
    _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (tmp);
    this->buffer_ = 0;
  }
  
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void)
  {
    this->_deallocate_buffer ();
  }
  
  void
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
  {
    CORBA::ValueDef **tmp = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
    
    for (CORBA::ULong i = nl; i < ol; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = CORBA::ValueDef::_nil ();
    }
  }
  void 
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_downcast (
      void* target,
      CORBA_Object *src,
      CORBA_Environment &ACE_TRY_ENV
    )
  {
    CORBA::ValueDef **tmp = ACE_static_cast (CORBA::ValueDef**, target);
    *tmp = CORBA::ValueDef::_narrow (src, ACE_TRY_ENV);
    ACE_CHECK;
  }

  CORBA_Object*
  CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_upcast (void *src) const
  {
    CORBA::ValueDef **tmp = ACE_static_cast (CORBA::ValueDef**, src);
    return *tmp;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEDEFSEQ_CS_)
#define _CORBA_VALUEDEFSEQ_CS_

// *************************************************************
// CORBA_ValueDefSeq
// *************************************************************

CORBA_ValueDefSeq::CORBA_ValueDefSeq (void)
{}
CORBA_ValueDefSeq::CORBA_ValueDefSeq (CORBA::ULong max) // uses max size
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::ValueDef,CORBA::ValueDef_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}
CORBA_ValueDefSeq::CORBA_ValueDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA::ValueDef_ptr *buffer, CORBA::Boolean release)
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::ValueDef,CORBA::ValueDef_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}
CORBA_ValueDefSeq::CORBA_ValueDefSeq (const CORBA_ValueDefSeq &seq) // copy ctor
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::ValueDef,CORBA::ValueDef_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}
CORBA_ValueDefSeq::~CORBA_ValueDefSeq (void) // dtor
{}
void CORBA_ValueDefSeq::_tao_any_destructor (void *x)
{
  CORBA_ValueDefSeq *tmp = ACE_static_cast (CORBA_ValueDefSeq*,x);
  delete tmp;
}


#endif /* end #if !defined */

// **************************************************************
// Repository::create_fixed methods from IFR_BasicC.cpp

CORBA::FixedDef_ptr _TAO_Repository_Remote_Proxy_Impl::create_fixed (
    CORBA_Object *_collocated_tao_target_,
    CORBA::UShort digits,
    CORBA::Short scale,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  CORBA::FixedDef_ptr _tao_retval = CORBA::FixedDef::_nil ();
  CORBA::FixedDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_fixed",
      12,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::Repository::TAO_ClientRequestInfo_CORBA_Repository_create_fixed ri (
        &_tao_call,
        _collocated_tao_target_,
        digits,
        scale,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << digits) &&
              (_tao_out << scale)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              0
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::FixedDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

CORBA::Any * 
CORBA::Repository::TAO_ClientRequestInfo_CORBA_Repository_create_fixed::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

// *******************************************************************
// Container::create_value* methods from IFR_BaseC.cpp

CORBA::ValueDef_ptr _TAO_Container_Remote_Proxy_Impl::create_value (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    CORBA::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const CORBA::ValueDefSeq & abstract_base_values,
    const CORBA::InterfaceDefSeq & supported_interfaces,
    const CORBA::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  CORBA::ValueDef_ptr _tao_retval = CORBA::ValueDef::_nil ();
  CORBA::ValueDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_value",
      12,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::Container::TAO_ClientRequestInfo_CORBA_Container_create_value ri (
        &_tao_call,
        _collocated_tao_target_,
        id,
        name,
        version,
        is_custom,
        is_abstract,
        base_value,
        is_truncatable,
        abstract_base_values,
        supported_interfaces,
        initializers,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << id) &&
              (_tao_out << name) &&
              (_tao_out << version) &&
              (_tao_out << CORBA::Any::from_boolean (is_custom)) &&
              (_tao_out << CORBA::Any::from_boolean (is_abstract)) &&
              (_tao_out << base_value) &&
              (_tao_out << CORBA::Any::from_boolean (is_truncatable)) &&
              (_tao_out << abstract_base_values) &&
              (_tao_out << supported_interfaces) &&
              (_tao_out << initializers)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              0
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::ValueDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

CORBA::ValueBoxDef_ptr _TAO_Container_Remote_Proxy_Impl::create_value_box (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  CORBA::ValueBoxDef_ptr _tao_retval = CORBA::ValueBoxDef::_nil ();
  CORBA::ValueBoxDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_value_box",
      16,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::Container::TAO_ClientRequestInfo_CORBA_Container_create_value_box ri (
        &_tao_call,
        _collocated_tao_target_,
        id,
        name,
        version,
        original_type_def,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << id) &&
              (_tao_out << name) &&
              (_tao_out << version) &&
              (_tao_out << original_type_def)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              0
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::ValueBoxDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

Dynamic::ParameterList *
CORBA::Container::TAO_ClientRequestInfo_CORBA_Container_create_value::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_id = parameter_list->length ();
  parameter_list->length (length_id + 1);
  (*parameter_list)[length_id].argument <<= id_;
  (*parameter_list)[length_id].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_name = parameter_list->length ();
  parameter_list->length (length_name + 1);
  (*parameter_list)[length_name].argument <<= name_;
  (*parameter_list)[length_name].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_version = parameter_list->length ();
  parameter_list->length (length_version + 1);
  (*parameter_list)[length_version].argument <<= version_;
  (*parameter_list)[length_version].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_is_custom = parameter_list->length ();
  parameter_list->length (length_is_custom + 1);
  (*parameter_list)[length_is_custom].argument <<= CORBA::Any::from_boolean (this->is_custom_);
  (*parameter_list)[length_is_custom].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_is_abstract = parameter_list->length ();
  parameter_list->length (length_is_abstract + 1);
  (*parameter_list)[length_is_abstract].argument <<= CORBA::Any::from_boolean (this->is_abstract_);
  (*parameter_list)[length_is_abstract].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_base_value = parameter_list->length ();
  parameter_list->length (length_base_value + 1);
  (*parameter_list)[length_base_value].argument <<=  this->base_value_;
  
  (*parameter_list)[length_base_value].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_is_truncatable = parameter_list->length ();
  parameter_list->length (length_is_truncatable + 1);
  (*parameter_list)[length_is_truncatable].argument <<= CORBA::Any::from_boolean (this->is_truncatable_);
  (*parameter_list)[length_is_truncatable].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_abstract_base_values = parameter_list->length ();
  parameter_list->length (length_abstract_base_values + 1);
  (*parameter_list)[length_abstract_base_values].argument <<=  this->abstract_base_values_;
  
  (*parameter_list)[length_abstract_base_values].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_supported_interfaces = parameter_list->length ();
  parameter_list->length (length_supported_interfaces + 1);
  (*parameter_list)[length_supported_interfaces].argument <<=  this->supported_interfaces_;
  
  (*parameter_list)[length_supported_interfaces].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_initializers = parameter_list->length ();
  parameter_list->length (length_initializers + 1);
  (*parameter_list)[length_initializers].argument <<=  this->initializers_;
  
  (*parameter_list)[length_initializers].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

CORBA::Any * 
CORBA::Container::TAO_ClientRequestInfo_CORBA_Container_create_value::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

CORBA::Any * 
CORBA::Container::TAO_ClientRequestInfo_CORBA_Container_create_value_box::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}
// **********************************************************************

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_FixedDef_Proxy_Impl::_TAO_FixedDef_Proxy_Impl (void)
{}

_TAO_FixedDef_Remote_Proxy_Impl::_TAO_FixedDef_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

CORBA::UShort _TAO_FixedDef_Remote_Proxy_Impl::digits (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::UShort _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_digits",
      11,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_retval)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::UShort  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

void _TAO_FixedDef_Remote_Proxy_Impl::digits (
    CORBA_Object *_collocated_tao_target_,
    CORBA::UShort digits,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_digits",
      11,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_set ri (
        &_tao_call,
        _collocated_tao_target_,
        digits,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << digits)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::Short _TAO_FixedDef_Remote_Proxy_Impl::scale (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::Short _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_scale",
      10,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_retval)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::Short  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

void _TAO_FixedDef_Remote_Proxy_Impl::scale (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Short scale,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_scale",
      10,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_set ri (
        &_tao_call,
        _collocated_tao_target_,
        scale,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << scale)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}


//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_FixedDef_Proxy_Broker::_TAO_FixedDef_Proxy_Broker (void)
{
}

_TAO_FixedDef_Proxy_Broker::~_TAO_FixedDef_Proxy_Broker (void)
{
}

_TAO_FixedDef_Proxy_Broker * (*CORBA__TAO_FixedDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_FixedDef_Remote_Proxy_Broker *
_TAO_FixedDef_Remote_Proxy_Broker::the_TAO_FixedDef_Remote_Proxy_Broker (void)
{
  static ::_TAO_FixedDef_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_FixedDef_Remote_Proxy_Broker::_TAO_FixedDef_Remote_Proxy_Broker (void)
{
}

_TAO_FixedDef_Remote_Proxy_Broker::~_TAO_FixedDef_Remote_Proxy_Broker (void)
{
}

_TAO_FixedDef_Proxy_Impl&
_TAO_FixedDef_Remote_Proxy_Broker::select_proxy (
  ::CORBA_FixedDef *,
  CORBA::Environment &
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
CORBA::FixedDef::FixedDef (int collocated)
{
  this->CORBA_FixedDef_setup_collocation (collocated);
}

// destructor
CORBA::FixedDef::~FixedDef (void)
{}

void
CORBA::FixedDef::CORBA_FixedDef_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_FixedDef_Proxy_Broker_ =
      ::CORBA__TAO_FixedDef_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_FixedDef_Proxy_Broker_ =
      ::_TAO_FixedDef_Remote_Proxy_Broker::the_TAO_FixedDef_Remote_Proxy_Broker ();
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

void CORBA::FixedDef::_tao_any_destructor (void *x)
{
  CORBA_FixedDef *tmp = ACE_static_cast (CORBA_FixedDef*,x);
  CORBA::release (tmp);
}

CORBA::FixedDef_ptr CORBA::FixedDef::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::FixedDef::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/FixedDef:1.0", ACE_TRY_ENV);
      ACE_CHECK_RETURN (CORBA::FixedDef::_nil ());
      if (is_a == 0)
        return CORBA::FixedDef::_nil ();
    }
  return CORBA::FixedDef::_unchecked_narrow (obj, ACE_TRY_ENV);
}

CORBA::FixedDef_ptr CORBA::FixedDef::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::FixedDef::_nil ();
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();
      CORBA::FixedDef_ptr default_proxy = CORBA::FixedDef::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&CORBA__TAO_FixedDef_Proxy_Broker_Factory_function_pointer != 0
        )
      {
        ACE_NEW_RETURN (
          default_proxy,
          ::CORBA::FixedDef (
            stub,
            1,
            obj->_servant ()),
            
          CORBA::FixedDef::_nil ());
        }
      if (CORBA::is_nil (default_proxy))
        ACE_NEW_RETURN (default_proxy, ::CORBA::FixedDef (stub, 0, obj->_servant ()), CORBA::FixedDef::_nil ());
        return default_proxy;
      }
    else 
      return
        ACE_reinterpret_cast
          (
            CORBA_FixedDef_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &CORBA_FixedDef::_narrow
                    )
                )
          );
}

CORBA::FixedDef_ptr
CORBA::FixedDef::_duplicate (CORBA::FixedDef_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean CORBA::FixedDef::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/FixedDef:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IDLType:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
}

void *CORBA::FixedDef::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      CORBA_FixedDef::_narrow))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IDLType::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IDLType_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IRObject::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IRObject_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA::FixedDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/FixedDef:1.0";
}

CORBA::UShort CORBA::FixedDef::digits (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_FixedDef_Proxy_Impl &proxy = 
    this->the_TAO_FixedDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.digits (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::FixedDef::digits (
    CORBA::UShort digits,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_FixedDef_Proxy_Impl &proxy = 
    this->the_TAO_FixedDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.digits (
      this,
      digits,
      ACE_TRY_ENV
    );
}

CORBA::Short CORBA::FixedDef::scale (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_FixedDef_Proxy_Impl &proxy = 
    this->the_TAO_FixedDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.scale (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::FixedDef::scale (
    CORBA::Short scale,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_FixedDef_Proxy_Impl &proxy = 
    this->the_TAO_FixedDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.scale (
      this,
      scale,
      ACE_TRY_ENV
    );
}


#if (TAO_HAS_INTERCEPTORS == 1)
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_get::result (CORBA::UShort result)
{
  // update the result 
  this->_result = result;
}

CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_set::TAO_ClientRequestInfo_CORBA_FixedDef_digits_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::UShort & digits,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    digits_ (digits)
{}

Dynamic::ParameterList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_digits = parameter_list->length ();
  parameter_list->length (length_digits + 1);
  (*parameter_list)[length_digits].argument <<= digits_;
  (*parameter_list)[length_digits].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_digits_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_get::result (CORBA::Short result)
{
  // update the result 
  this->_result = result;
}

CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_set::TAO_ClientRequestInfo_CORBA_FixedDef_scale_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Short & scale,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    scale_ (scale)
{}

Dynamic::ParameterList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_scale = parameter_list->length ();
  parameter_list->length (length_scale + 1);
  (*parameter_list)[length_scale].argument <<= scale_;
  (*parameter_list)[length_scale].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::FixedDef::TAO_ClientRequestInfo_CORBA_FixedDef_scale_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

#endif /* TAO_HAS_INTERCEPTORS */

void CORBA::ValueMember::_tao_any_destructor (void *x)
{
  CORBA_ValueMember *tmp = ACE_static_cast (CORBA_ValueMember*,x);
  delete tmp;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_VALUEMEMBERSEQ_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_VALUEMEMBERSEQ_CS_

  void
  CORBA::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_allocate_buffer (CORBA::ULong length)
  {
    CORBA::ValueMember* tmp = 0;
    tmp = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (length);
    
    if (this->buffer_ != 0)
    {
      CORBA::ValueMember *old = ACE_reinterpret_cast (CORBA::ValueMember *,this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp[i] = old[i];
      
      if (this->release_)
        _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (old);
      
    }
    this->buffer_ = tmp;
  }
  
  void
  CORBA::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_deallocate_buffer (void)
  {
    if (this->buffer_ == 0 || this->release_ == 0)
      return;
    
    CORBA::ValueMember *tmp = ACE_reinterpret_cast (CORBA::ValueMember *,this->buffer_);
    
    _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (tmp);
    this->buffer_ = 0;
  } 
  
  CORBA::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::~_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (void) // Dtor.
  {
    this->_deallocate_buffer ();
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEMEMBERSEQ_CS_)
#define _CORBA_VALUEMEMBERSEQ_CS_

// *************************************************************
// CORBA_ValueMemberSeq
// *************************************************************

CORBA_ValueMemberSeq::CORBA_ValueMemberSeq (void)
{}
CORBA_ValueMemberSeq::CORBA_ValueMemberSeq (CORBA::ULong max) // uses max size
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::ValueMember>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}
CORBA_ValueMemberSeq::CORBA_ValueMemberSeq (CORBA::ULong max, CORBA::ULong length, CORBA::ValueMember *buffer, CORBA::Boolean release)
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::ValueMember>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}
CORBA_ValueMemberSeq::CORBA_ValueMemberSeq (const CORBA_ValueMemberSeq &seq) // copy ctor
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::ValueMember>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}
CORBA_ValueMemberSeq::~CORBA_ValueMemberSeq (void) // dtor
{}
void CORBA_ValueMemberSeq::_tao_any_destructor (void *x)
{
  CORBA_ValueMemberSeq *tmp = ACE_static_cast (CORBA_ValueMemberSeq*,x);
  delete tmp;
}


#endif /* end #if !defined */

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_ValueMemberDef_Proxy_Impl::_TAO_ValueMemberDef_Proxy_Impl (void)
{}

_TAO_ValueMemberDef_Remote_Proxy_Impl::_TAO_ValueMemberDef_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

CORBA::TypeCode_ptr _TAO_ValueMemberDef_Remote_Proxy_Impl::type (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::TypeCode_ptr _tao_retval = CORBA::TypeCode::_nil ();
  CORBA::TypeCode_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_type",
      9,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::TypeCode_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

CORBA::IDLType_ptr _TAO_ValueMemberDef_Remote_Proxy_Impl::type_def (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::IDLType_ptr _tao_retval = CORBA::IDLType::_nil ();
  CORBA::IDLType_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_type_def",
      13,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::IDLType_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

void _TAO_ValueMemberDef_Remote_Proxy_Impl::type_def (
    CORBA_Object *_collocated_tao_target_,
    CORBA::IDLType_ptr type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_type_def",
      13,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_set ri (
        &_tao_call,
        _collocated_tao_target_,
        type_def,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << type_def)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::Visibility _TAO_ValueMemberDef_Remote_Proxy_Impl::access (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::Visibility _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_access",
      11,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_retval)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::Visibility  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

void _TAO_ValueMemberDef_Remote_Proxy_Impl::access (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Visibility access,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_access",
      11,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_set ri (
        &_tao_call,
        _collocated_tao_target_,
        access,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << access)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}


//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_ValueMemberDef_Proxy_Broker::_TAO_ValueMemberDef_Proxy_Broker (void)
{
}

_TAO_ValueMemberDef_Proxy_Broker::~_TAO_ValueMemberDef_Proxy_Broker (void)
{
}

_TAO_ValueMemberDef_Proxy_Broker * (*CORBA__TAO_ValueMemberDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_ValueMemberDef_Remote_Proxy_Broker *
_TAO_ValueMemberDef_Remote_Proxy_Broker::the_TAO_ValueMemberDef_Remote_Proxy_Broker (void)
{
  static ::_TAO_ValueMemberDef_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_ValueMemberDef_Remote_Proxy_Broker::_TAO_ValueMemberDef_Remote_Proxy_Broker (void)
{
}

_TAO_ValueMemberDef_Remote_Proxy_Broker::~_TAO_ValueMemberDef_Remote_Proxy_Broker (void)
{
}

_TAO_ValueMemberDef_Proxy_Impl&
_TAO_ValueMemberDef_Remote_Proxy_Broker::select_proxy (
  ::CORBA_ValueMemberDef *,
  CORBA::Environment &
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
CORBA::ValueMemberDef::ValueMemberDef (int collocated)
{
  this->CORBA_ValueMemberDef_setup_collocation (collocated);
}

// destructor
CORBA::ValueMemberDef::~ValueMemberDef (void)
{}

void
CORBA::ValueMemberDef::CORBA_ValueMemberDef_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_ValueMemberDef_Proxy_Broker_ =
      ::CORBA__TAO_ValueMemberDef_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_ValueMemberDef_Proxy_Broker_ =
      ::_TAO_ValueMemberDef_Remote_Proxy_Broker::the_TAO_ValueMemberDef_Remote_Proxy_Broker ();
  
  this->CORBA_Contained_setup_collocation (collocated);
}

void CORBA::ValueMemberDef::_tao_any_destructor (void *x)
{
  CORBA_ValueMemberDef *tmp = ACE_static_cast (CORBA_ValueMemberDef*,x);
  CORBA::release (tmp);
}

CORBA::ValueMemberDef_ptr CORBA::ValueMemberDef::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::ValueMemberDef::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/ValueMemberDef:1.0", ACE_TRY_ENV);
      ACE_CHECK_RETURN (CORBA::ValueMemberDef::_nil ());
      if (is_a == 0)
        return CORBA::ValueMemberDef::_nil ();
    }
  return CORBA::ValueMemberDef::_unchecked_narrow (obj, ACE_TRY_ENV);
}

CORBA::ValueMemberDef_ptr CORBA::ValueMemberDef::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::ValueMemberDef::_nil ();
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();
      CORBA::ValueMemberDef_ptr default_proxy = CORBA::ValueMemberDef::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&CORBA__TAO_ValueMemberDef_Proxy_Broker_Factory_function_pointer != 0
        )
      {
        ACE_NEW_RETURN (
          default_proxy,
          ::CORBA::ValueMemberDef (
            stub,
            1,
            obj->_servant ()),
            
          CORBA::ValueMemberDef::_nil ());
        }
      if (CORBA::is_nil (default_proxy))
        ACE_NEW_RETURN (default_proxy, ::CORBA::ValueMemberDef (stub, 0, obj->_servant ()), CORBA::ValueMemberDef::_nil ());
        return default_proxy;
      }
    else 
      return
        ACE_reinterpret_cast
          (
            CORBA_ValueMemberDef_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &CORBA_ValueMemberDef::_narrow
                    )
                )
          );
}

CORBA::ValueMemberDef_ptr
CORBA::ValueMemberDef::_duplicate (CORBA::ValueMemberDef_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean CORBA::ValueMemberDef::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/ValueMemberDef:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Contained:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
}

void *CORBA::ValueMemberDef::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      CORBA_ValueMemberDef::_narrow))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::Contained::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::Contained_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IRObject::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IRObject_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA::ValueMemberDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ValueMemberDef:1.0";
}

CORBA::TypeCode_ptr CORBA::ValueMemberDef::type (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueMemberDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueMemberDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.type (
      this,
      ACE_TRY_ENV
    );
}

CORBA::IDLType_ptr CORBA::ValueMemberDef::type_def (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueMemberDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueMemberDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.type_def (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueMemberDef::type_def (
    CORBA::IDLType_ptr type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueMemberDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueMemberDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.type_def (
      this,
      type_def,
      ACE_TRY_ENV
    );
}

CORBA::Visibility CORBA::ValueMemberDef::access (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueMemberDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueMemberDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.access (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueMemberDef::access (
    CORBA::Visibility access,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueMemberDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueMemberDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.access (
      this,
      access,
      ACE_TRY_ENV
    );
}


#if (TAO_HAS_INTERCEPTORS == 1)
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_get::result (CORBA::TypeCode_ptr result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_get::result (CORBA::IDLType_ptr result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_set::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::IDLType_ptr type_def,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    type_def_ (type_def)
{}

Dynamic::ParameterList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_type_def = parameter_list->length ();
  parameter_list->length (length_type_def + 1);
  (*parameter_list)[length_type_def].argument <<=  this->type_def_;
  
  (*parameter_list)[length_type_def].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_type_def_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_get::result (CORBA::Visibility result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_set::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Visibility & access,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    access_ (access)
{}

Dynamic::ParameterList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_access = parameter_list->length ();
  parameter_list->length (length_access + 1);
  (*parameter_list)[length_access].argument <<= access_;
  (*parameter_list)[length_access].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueMemberDef::TAO_ClientRequestInfo_CORBA_ValueMemberDef_access_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_ValueDef_Proxy_Impl::_TAO_ValueDef_Proxy_Impl (void)
{}

_TAO_ValueDef_Remote_Proxy_Impl::_TAO_ValueDef_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

CORBA::InterfaceDefSeq * _TAO_ValueDef_Remote_Proxy_Impl::supported_interfaces (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::InterfaceDefSeq *_tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  ACE_NEW_RETURN (_tao_retval, CORBA::InterfaceDefSeq, _tao_retval);
  CORBA::InterfaceDefSeq_var _tao_safe_retval (_tao_retval);
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_supported_interfaces",
      25,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::InterfaceDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

void _TAO_ValueDef_Remote_Proxy_Impl::supported_interfaces (
    CORBA_Object *_collocated_tao_target_,
    const CORBA::InterfaceDefSeq & supported_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_supported_interfaces",
      25,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_set ri (
        &_tao_call,
        _collocated_tao_target_,
        supported_interfaces,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << supported_interfaces)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::InitializerSeq * _TAO_ValueDef_Remote_Proxy_Impl::initializers (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::InitializerSeq *_tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  ACE_NEW_RETURN (_tao_retval, CORBA::InitializerSeq, _tao_retval);
  CORBA::InitializerSeq_var _tao_safe_retval (_tao_retval);
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_initializers",
      17,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::InitializerSeq * _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

void _TAO_ValueDef_Remote_Proxy_Impl::initializers (
    CORBA_Object *_collocated_tao_target_,
    const CORBA::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_initializers",
      17,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_set ri (
        &_tao_call,
        _collocated_tao_target_,
        initializers,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << initializers)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::ValueDef_ptr _TAO_ValueDef_Remote_Proxy_Impl::base_value (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::ValueDef_ptr _tao_retval = CORBA::ValueDef::_nil ();
  CORBA::ValueDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_base_value",
      15,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::ValueDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

void _TAO_ValueDef_Remote_Proxy_Impl::base_value (
    CORBA_Object *_collocated_tao_target_,
    CORBA::ValueDef_ptr base_value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_base_value",
      15,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_set ri (
        &_tao_call,
        _collocated_tao_target_,
        base_value,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << base_value)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::ValueDefSeq * _TAO_ValueDef_Remote_Proxy_Impl::abstract_base_values (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::ValueDefSeq *_tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  ACE_NEW_RETURN (_tao_retval, CORBA::ValueDefSeq, _tao_retval);
  CORBA::ValueDefSeq_var _tao_safe_retval (_tao_retval);
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_abstract_base_values",
      25,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::ValueDefSeq * _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

void _TAO_ValueDef_Remote_Proxy_Impl::abstract_base_values (
    CORBA_Object *_collocated_tao_target_,
    const CORBA::ValueDefSeq & abstract_base_values,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_abstract_base_values",
      25,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_set ri (
        &_tao_call,
        _collocated_tao_target_,
        abstract_base_values,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << abstract_base_values)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::Boolean _TAO_ValueDef_Remote_Proxy_Impl::is_abstract (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_is_abstract",
      16,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::Boolean  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

void _TAO_ValueDef_Remote_Proxy_Impl::is_abstract (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Boolean is_abstract,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_is_abstract",
      16,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_set ri (
        &_tao_call,
        _collocated_tao_target_,
        is_abstract,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << CORBA::Any::from_boolean (is_abstract))
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::Boolean _TAO_ValueDef_Remote_Proxy_Impl::is_custom (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_is_custom",
      14,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::Boolean  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

void _TAO_ValueDef_Remote_Proxy_Impl::is_custom (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Boolean is_custom,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_is_custom",
      14,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_set ri (
        &_tao_call,
        _collocated_tao_target_,
        is_custom,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << CORBA::Any::from_boolean (is_custom))
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::Boolean _TAO_ValueDef_Remote_Proxy_Impl::is_truncatable (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_is_truncatable",
      19,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::Boolean  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

void _TAO_ValueDef_Remote_Proxy_Impl::is_truncatable (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Boolean is_truncatable,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_is_truncatable",
      19,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_set ri (
        &_tao_call,
        _collocated_tao_target_,
        is_truncatable,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << CORBA::Any::from_boolean (is_truncatable))
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}

CORBA::Boolean _TAO_ValueDef_Remote_Proxy_Impl::is_a (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "is_a",
      4,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_a ri (
        &_tao_call,
        _collocated_tao_target_,
        id,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << id)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              _tao_retval
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::Boolean  _tao_retval_info = _tao_retval;
               ri.result (_tao_retval_info);
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_retval;
}

CORBA::ValueDef::FullValueDescription * _TAO_ValueDef_Remote_Proxy_Impl::describe_value (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::ValueDef::FullValueDescription *_tao_retval = 0;
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  ACE_NEW_RETURN (_tao_retval, CORBA::ValueDef::FullValueDescription, _tao_retval);
  CORBA::ValueDef::FullValueDescription_var _tao_safe_retval (_tao_retval);
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "describe_value",
      14,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::ValueDef::FullValueDescription * _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

CORBA::ValueMemberDef_ptr _TAO_ValueDef_Remote_Proxy_Impl::create_value_member (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::Visibility access,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::ValueMemberDef_ptr _tao_retval = CORBA::ValueMemberDef::_nil ();
  CORBA::ValueMemberDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_value_member",
      19,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member ri (
        &_tao_call,
        _collocated_tao_target_,
        id,
        name,
        version,
        type,
        access,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << id) &&
              (_tao_out << name) &&
              (_tao_out << version) &&
              (_tao_out << type) &&
              (_tao_out << access)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              0
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::ValueMemberDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

CORBA::AttributeDef_ptr _TAO_ValueDef_Remote_Proxy_Impl::create_attribute (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::AttributeMode mode,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::AttributeDef_ptr _tao_retval = CORBA::AttributeDef::_nil ();
  CORBA::AttributeDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_attribute",
      16,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute ri (
        &_tao_call,
        _collocated_tao_target_,
        id,
        name,
        version,
        type,
        mode,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << id) &&
              (_tao_out << name) &&
              (_tao_out << version) &&
              (_tao_out << type) &&
              (_tao_out << mode)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              0
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::AttributeDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

CORBA::OperationDef_ptr _TAO_ValueDef_Remote_Proxy_Impl::create_operation (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr result,
    CORBA::OperationMode mode,
    const CORBA::ParDescriptionSeq & params,
    const CORBA::ExceptionDefSeq & exceptions,
    const CORBA::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::OperationDef_ptr _tao_retval = CORBA::OperationDef::_nil ();
  CORBA::OperationDef_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_operation",
      16,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation ri (
        &_tao_call,
        _collocated_tao_target_,
        id,
        name,
        version,
        result,
        mode,
        params,
        exceptions,
        contexts,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << id) &&
              (_tao_out << name) &&
              (_tao_out << version) &&
              (_tao_out << result) &&
              (_tao_out << mode) &&
              (_tao_out << params) &&
              (_tao_out << exceptions) &&
              (_tao_out << contexts)
            ))
            TAO_INTERCEPTOR_THROW_RETURN (
              CORBA::MARSHAL (),
              0
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::OperationDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}


//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_ValueDef_Proxy_Broker::_TAO_ValueDef_Proxy_Broker (void)
{
}

_TAO_ValueDef_Proxy_Broker::~_TAO_ValueDef_Proxy_Broker (void)
{
}

_TAO_ValueDef_Proxy_Broker * (*CORBA__TAO_ValueDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_ValueDef_Remote_Proxy_Broker *
_TAO_ValueDef_Remote_Proxy_Broker::the_TAO_ValueDef_Remote_Proxy_Broker (void)
{
  static ::_TAO_ValueDef_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_ValueDef_Remote_Proxy_Broker::_TAO_ValueDef_Remote_Proxy_Broker (void)
{
}

_TAO_ValueDef_Remote_Proxy_Broker::~_TAO_ValueDef_Remote_Proxy_Broker (void)
{
}

_TAO_ValueDef_Proxy_Impl&
_TAO_ValueDef_Remote_Proxy_Broker::select_proxy (
  ::CORBA_ValueDef *,
  CORBA::Environment &
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
CORBA::ValueDef::ValueDef (int collocated)
{
  this->CORBA_ValueDef_setup_collocation (collocated);
}

// destructor
CORBA::ValueDef::~ValueDef (void)
{}

void
CORBA::ValueDef::CORBA_ValueDef_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_ValueDef_Proxy_Broker_ =
      ::CORBA__TAO_ValueDef_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_ValueDef_Proxy_Broker_ =
      ::_TAO_ValueDef_Remote_Proxy_Broker::the_TAO_ValueDef_Remote_Proxy_Broker ();
  
  this->CORBA_Container_setup_collocation (collocated);
  
  this->CORBA_Contained_setup_collocation (collocated);
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

void CORBA::ValueDef::_tao_any_destructor (void *x)
{
  CORBA_ValueDef *tmp = ACE_static_cast (CORBA_ValueDef*,x);
  CORBA::release (tmp);
}

CORBA::ValueDef_ptr CORBA::ValueDef::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::ValueDef::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/ValueDef:1.0", ACE_TRY_ENV);
      ACE_CHECK_RETURN (CORBA::ValueDef::_nil ());
      if (is_a == 0)
        return CORBA::ValueDef::_nil ();
    }
  return CORBA::ValueDef::_unchecked_narrow (obj, ACE_TRY_ENV);
}

CORBA::ValueDef_ptr CORBA::ValueDef::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::ValueDef::_nil ();
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();
      CORBA::ValueDef_ptr default_proxy = CORBA::ValueDef::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&CORBA__TAO_ValueDef_Proxy_Broker_Factory_function_pointer != 0
        )
      {
        ACE_NEW_RETURN (
          default_proxy,
          ::CORBA::ValueDef (
            stub,
            1,
            obj->_servant ()),
            
          CORBA::ValueDef::_nil ());
        }
      if (CORBA::is_nil (default_proxy))
        ACE_NEW_RETURN (default_proxy, ::CORBA::ValueDef (stub, 0, obj->_servant ()), CORBA::ValueDef::_nil ());
        return default_proxy;
      }
    else 
      return
        ACE_reinterpret_cast
          (
            CORBA_ValueDef_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &CORBA_ValueDef::_narrow
                    )
                )
          );
}

CORBA::ValueDef_ptr
CORBA::ValueDef::_duplicate (CORBA::ValueDef_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean CORBA::ValueDef::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/ValueDef:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Container:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Contained:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IDLType:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
}

void *CORBA::ValueDef::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      CORBA_ValueDef::_narrow))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::Container::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::Container_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::Contained::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::Contained_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IDLType::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IDLType_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IRObject::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IRObject_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA::ValueDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ValueDef:1.0";
}

CORBA::InterfaceDefSeq * CORBA::ValueDef::supported_interfaces (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.supported_interfaces (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::supported_interfaces (
    const CORBA::InterfaceDefSeq & supported_interfaces,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.supported_interfaces (
      this,
      supported_interfaces,
      ACE_TRY_ENV
    );
}

CORBA::InitializerSeq * CORBA::ValueDef::initializers (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.initializers (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::initializers (
    const CORBA::InitializerSeq & initializers,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.initializers (
      this,
      initializers,
      ACE_TRY_ENV
    );
}

CORBA::ValueDef_ptr CORBA::ValueDef::base_value (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.base_value (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::base_value (
    CORBA::ValueDef_ptr base_value,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.base_value (
      this,
      base_value,
      ACE_TRY_ENV
    );
}

CORBA::ValueDefSeq * CORBA::ValueDef::abstract_base_values (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.abstract_base_values (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::abstract_base_values (
    const CORBA::ValueDefSeq & abstract_base_values,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.abstract_base_values (
      this,
      abstract_base_values,
      ACE_TRY_ENV
    );
}

CORBA::Boolean CORBA::ValueDef::is_abstract (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.is_abstract (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::is_abstract (
    CORBA::Boolean is_abstract,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.is_abstract (
      this,
      is_abstract,
      ACE_TRY_ENV
    );
}

CORBA::Boolean CORBA::ValueDef::is_custom (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.is_custom (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::is_custom (
    CORBA::Boolean is_custom,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.is_custom (
      this,
      is_custom,
      ACE_TRY_ENV
    );
}

CORBA::Boolean CORBA::ValueDef::is_truncatable (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.is_truncatable (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueDef::is_truncatable (
    CORBA::Boolean is_truncatable,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.is_truncatable (
      this,
      is_truncatable,
      ACE_TRY_ENV
    );
}

CORBA::Boolean CORBA::ValueDef::is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.is_a (
      this,
      id,
      ACE_TRY_ENV
    );
}

static const CORBA::Long _oc_CORBA_ValueDef_FullValueDescription[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  52,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5661), 
  ACE_NTOHL (0x6c756544), 
  ACE_NTOHL (0x65662f46), 
  ACE_NTOHL (0x756c6c56), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ValueDef/FullValueDescription:1.0
  21,
  ACE_NTOHL (0x46756c6c), 
  ACE_NTOHL (0x56616c75), 
  ACE_NTOHL (0x65446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = FullValueDescription
  15, // member count
  5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
  CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
    11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
    CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
  CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
    13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
    CORBA::tk_string, 
    0U, // string length

  12,
  ACE_NTOHL (0x69735f61), 
  ACE_NTOHL (0x62737472), 
  ACE_NTOHL (0x61637400),  // name = is_abstract
  CORBA::tk_boolean,

  10,
  ACE_NTOHL (0x69735f63), 
  ACE_NTOHL (0x7573746f), 
  ACE_NTOHL (0x6d000000),  // name = is_custom
  CORBA::tk_boolean,

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
  CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
    13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
    CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
  CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
    12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
    CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x6f706572), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e730000),  // name = operations
  CORBA::tk_alias, // typecode kind for typedefs
  2036, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    39,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f70), 
    ACE_NTOHL (0x44657363), 
    ACE_NTOHL (0x72697074), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x65713a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
    17,
    ACE_NTOHL (0x4f704465), 
    ACE_NTOHL (0x73637269), 
    ACE_NTOHL (0x7074696f), 
    ACE_NTOHL (0x6e536571), 
    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
    CORBA::tk_sequence, // typecode kind
    1956, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      1940, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f70), 
        ACE_NTOHL (0x65726174), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
        21,
        ACE_NTOHL (0x4f706572), 
        ACE_NTOHL (0x6174696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = OperationDescription
        9, // member count
        5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
          11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
          CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
        CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
          13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
          CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
        CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
          13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
          CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
          12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
          CORBA::tk_string, 
          0U, // string length

        7,
        ACE_NTOHL (0x72657375), 
        ACE_NTOHL (0x6c740000),  // name = result
        CORBA::tk_TypeCode,

        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
        CORBA::tk_enum, // typecode kind
        100, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4f70), 
          ACE_NTOHL (0x65726174), 
          ACE_NTOHL (0x696f6e4d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
          14,
          ACE_NTOHL (0x4f706572), 
          ACE_NTOHL (0x6174696f), 
          ACE_NTOHL (0x6e4d6f64), 
          ACE_NTOHL (0x65000000),  // name = OperationMode
          2, // member count
          10,
          ACE_NTOHL (0x4f505f4e), 
          ACE_NTOHL (0x4f524d41), 
          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
          10,
          ACE_NTOHL (0x4f505f4f), 
          ACE_NTOHL (0x4e455741), 
          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY

        9,
        ACE_NTOHL (0x636f6e74), 
        ACE_NTOHL (0x65787473), 
        ACE_NTOHL (0x0),  // name = contexts
        CORBA::tk_alias, // typecode kind for typedefs
        236, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f436f), 
          ACE_NTOHL (0x6e746578), 
          ACE_NTOHL (0x74496453), 
          ACE_NTOHL (0x65713a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
          13,
          ACE_NTOHL (0x436f6e74), 
          ACE_NTOHL (0x65787449), 
          ACE_NTOHL (0x64536571), 
          ACE_NTOHL (0x0),  // name = ContextIdSeq
          CORBA::tk_sequence, // typecode kind
          164, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_alias, // typecode kind for typedefs
            148, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              40,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f436f), 
              ACE_NTOHL (0x6e746578), 
              ACE_NTOHL (0x74496465), 
              ACE_NTOHL (0x6e746966), 
              ACE_NTOHL (0x6965723a), 
              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
              18,
              ACE_NTOHL (0x436f6e74), 
              ACE_NTOHL (0x65787449), 
              ACE_NTOHL (0x64656e74), 
              ACE_NTOHL (0x69666965), 
              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
              CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
                0U, // string length


            0U,


        11,
        ACE_NTOHL (0x70617261), 
        ACE_NTOHL (0x6d657465), 
        ACE_NTOHL (0x72730000),  // name = parameters
        CORBA::tk_alias, // typecode kind for typedefs
        496, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5061), 
          ACE_NTOHL (0x72446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
          18,
          ACE_NTOHL (0x50617244), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
          CORBA::tk_sequence, // typecode kind
          416, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            400, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5061), 
              ACE_NTOHL (0x72616d65), 
              ACE_NTOHL (0x74657244), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
              21,
              ACE_NTOHL (0x50617261), 
              ACE_NTOHL (0x6d657465), 
              ACE_NTOHL (0x72446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ParameterDescription
              4, // member count
              5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
              CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
              CORBA::tk_TypeCode,

              9,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x5f646566), 
              ACE_NTOHL (0x0),  // name = type_def
              CORBA::tk_objref, // typecode kind
              52, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                30,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4944), 
                ACE_NTOHL (0x4c547970), 
                ACE_NTOHL (0x653a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                8,
                ACE_NTOHL (0x49444c54), 
                ACE_NTOHL (0x79706500),  // name = IDLType

              5,
              ACE_NTOHL (0x6d6f6465), 
              ACE_NTOHL (0x0),  // name = mode
              CORBA::tk_enum, // typecode kind
              116, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                36,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5061), 
                ACE_NTOHL (0x72616d65), 
                ACE_NTOHL (0x7465724d), 
                ACE_NTOHL (0x6f64653a), 
                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
                14,
                ACE_NTOHL (0x50617261), 
                ACE_NTOHL (0x6d657465), 
                ACE_NTOHL (0x724d6f64), 
                ACE_NTOHL (0x65000000),  // name = ParameterMode
                3, // member count
                9,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f494e), 
                ACE_NTOHL (0x0),  // name = PARAM_IN
                10,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f4f55), 
                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
                12,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f494e), 
                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT


            0U,


        11,
        ACE_NTOHL (0x65786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e730000),  // name = exceptions
        CORBA::tk_alias, // typecode kind for typedefs
        556, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4578), 
          ACE_NTOHL (0x63446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
          18,
          ACE_NTOHL (0x45786344), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
          CORBA::tk_sequence, // typecode kind
          476, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            460, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4578), 
              ACE_NTOHL (0x63657074), 
              ACE_NTOHL (0x696f6e44), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
              21,
              ACE_NTOHL (0x45786365), 
              ACE_NTOHL (0x7074696f), 
              ACE_NTOHL (0x6e446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ExceptionDescription
              5, // member count
              5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
              CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
                0U, // string length

              3,
              ACE_NTOHL (0x69640000),  // name = id
              CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
                0U, // string length

              11,
              ACE_NTOHL (0x64656669), 
              ACE_NTOHL (0x6e65645f), 
              ACE_NTOHL (0x696e0000),  // name = defined_in
              CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
                0U, // string length

              8,
              ACE_NTOHL (0x76657273), 
              ACE_NTOHL (0x696f6e00),  // name = version
              CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                34,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5665), 
                ACE_NTOHL (0x7273696f), 
                ACE_NTOHL (0x6e537065), 
                ACE_NTOHL (0x633a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                12,
                ACE_NTOHL (0x56657273), 
                ACE_NTOHL (0x696f6e53), 
                ACE_NTOHL (0x70656300),  // name = VersionSpec
                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
              CORBA::tk_TypeCode,


            0U,



      0U,


  11,
  ACE_NTOHL (0x61747472), 
  ACE_NTOHL (0x69627574), 
  ACE_NTOHL (0x65730000),  // name = attributes
  CORBA::tk_alias, // typecode kind for typedefs
  684, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    41,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4174), 
    ACE_NTOHL (0x74724465), 
    ACE_NTOHL (0x73637269), 
    ACE_NTOHL (0x7074696f), 
    ACE_NTOHL (0x6e536571), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/AttrDescriptionSeq:1.0
    19,
    ACE_NTOHL (0x41747472), 
    ACE_NTOHL (0x44657363), 
    ACE_NTOHL (0x72697074), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x65710000),  // name = AttrDescriptionSeq
    CORBA::tk_sequence, // typecode kind
    600, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      584, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4174), 
        ACE_NTOHL (0x74726962), 
        ACE_NTOHL (0x75746544), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDescription:1.0
        21,
        ACE_NTOHL (0x41747472), 
        ACE_NTOHL (0x69627574), 
        ACE_NTOHL (0x65446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = AttributeDescription
        6, // member count
        5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
          11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
          CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
        CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
          13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
          CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
        CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
          13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
          CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
          12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
          CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
        CORBA::tk_TypeCode,

        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
        CORBA::tk_enum, // typecode kind
        104, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4174), 
          ACE_NTOHL (0x74726962), 
          ACE_NTOHL (0x7574654d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
          14,
          ACE_NTOHL (0x41747472), 
          ACE_NTOHL (0x69627574), 
          ACE_NTOHL (0x654d6f64), 
          ACE_NTOHL (0x65000000),  // name = AttributeMode
          2, // member count
          12,
          ACE_NTOHL (0x41545452), 
          ACE_NTOHL (0x5f4e4f52), 
          ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
          14,
          ACE_NTOHL (0x41545452), 
          ACE_NTOHL (0x5f524541), 
          ACE_NTOHL (0x444f4e4c), 
          ACE_NTOHL (0x59000000),  // name = ATTR_READONLY


      0U,


  8,
  ACE_NTOHL (0x6d656d62), 
  ACE_NTOHL (0x65727300),  // name = members
  CORBA::tk_alias, // typecode kind for typedefs
  692, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    37,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5661), 
    ACE_NTOHL (0x6c75654d), 
    ACE_NTOHL (0x656d6265), 
    ACE_NTOHL (0x72536571), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ValueMemberSeq:1.0
    15,
    ACE_NTOHL (0x56616c75), 
    ACE_NTOHL (0x654d656d), 
    ACE_NTOHL (0x62657253), 
    ACE_NTOHL (0x65710000),  // name = ValueMemberSeq
    CORBA::tk_sequence, // typecode kind
    616, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      600, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5661), 
        ACE_NTOHL (0x6c75654d), 
        ACE_NTOHL (0x656d6265), 
        ACE_NTOHL (0x723a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ValueMember:1.0
        12,
        ACE_NTOHL (0x56616c75), 
        ACE_NTOHL (0x654d656d), 
        ACE_NTOHL (0x62657200),  // name = ValueMember
        7, // member count
        5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
          11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
          CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
        CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
          13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
          CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
        CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
          13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
          CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
          12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
          CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
        CORBA::tk_TypeCode,

        9,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x5f646566), 
        ACE_NTOHL (0x0),  // name = type_def
        CORBA::tk_objref, // typecode kind
        52, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          30,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4944), 
          ACE_NTOHL (0x4c547970), 
          ACE_NTOHL (0x653a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
          8,
          ACE_NTOHL (0x49444c54), 
          ACE_NTOHL (0x79706500),  // name = IDLType

        7,
        ACE_NTOHL (0x61636365), 
        ACE_NTOHL (0x73730000),  // name = access
        CORBA::tk_alias, // typecode kind for typedefs
        64, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5669), 
          ACE_NTOHL (0x73696269), 
          ACE_NTOHL (0x6c697479), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Visibility:1.0
          11,
          ACE_NTOHL (0x56697369), 
          ACE_NTOHL (0x62696c69), 
          ACE_NTOHL (0x74790000),  // name = Visibility
          CORBA::tk_short,



      0U,


  13,
  ACE_NTOHL (0x696e6974), 
  ACE_NTOHL (0x69616c69), 
  ACE_NTOHL (0x7a657273), 
  ACE_NTOHL (0x0),  // name = initializers
  CORBA::tk_alias, // typecode kind for typedefs
  604, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    37,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f496e), 
    ACE_NTOHL (0x69746961), 
    ACE_NTOHL (0x6c697a65), 
    ACE_NTOHL (0x72536571), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/InitializerSeq:1.0
    15,
    ACE_NTOHL (0x496e6974), 
    ACE_NTOHL (0x69616c69), 
    ACE_NTOHL (0x7a657253), 
    ACE_NTOHL (0x65710000),  // name = InitializerSeq
    CORBA::tk_sequence, // typecode kind
    528, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      512, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f496e), 
        ACE_NTOHL (0x69746961), 
        ACE_NTOHL (0x6c697a65), 
        ACE_NTOHL (0x723a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/Initializer:1.0
        12,
        ACE_NTOHL (0x496e6974), 
        ACE_NTOHL (0x69616c69), 
        ACE_NTOHL (0x7a657200),  // name = Initializer
        2, // member count
        8,
        ACE_NTOHL (0x6d656d62), 
        ACE_NTOHL (0x65727300),  // name = members
        CORBA::tk_alias, // typecode kind for typedefs
        340, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          38,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5374), 
          ACE_NTOHL (0x72756374), 
          ACE_NTOHL (0x4d656d62), 
          ACE_NTOHL (0x65725365), 
          ACE_NTOHL (0x713a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
          16,
          ACE_NTOHL (0x53747275), 
          ACE_NTOHL (0x63744d65), 
          ACE_NTOHL (0x6d626572), 
          ACE_NTOHL (0x53657100),  // name = StructMemberSeq
          CORBA::tk_sequence, // typecode kind
          264, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            248, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5374), 
              ACE_NTOHL (0x72756374), 
              ACE_NTOHL (0x4d656d62), 
              ACE_NTOHL (0x65723a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
              13,
              ACE_NTOHL (0x53747275), 
              ACE_NTOHL (0x63744d65), 
              ACE_NTOHL (0x6d626572), 
              ACE_NTOHL (0x0),  // name = StructMember
              3, // member count
              5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
              CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
              CORBA::tk_TypeCode,

              9,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x5f646566), 
              ACE_NTOHL (0x0),  // name = type_def
              CORBA::tk_objref, // typecode kind
              52, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                30,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4944), 
                ACE_NTOHL (0x4c547970), 
                ACE_NTOHL (0x653a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                8,
                ACE_NTOHL (0x49444c54), 
                ACE_NTOHL (0x79706500),  // name = IDLType


            0U,


        5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
        CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
          11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
          CORBA::tk_string, 
          0U, // string length


      0U,


  21,
  ACE_NTOHL (0x73757070), 
  ACE_NTOHL (0x6f727465), 
  ACE_NTOHL (0x645f696e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636573), 
  ACE_NTOHL (0x0),  // name = supported_interfaces
  CORBA::tk_alias, // typecode kind for typedefs
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49645365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
    16,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
    CORBA::tk_sequence, // typecode kind
    88, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
        0U, // string length

      0U,


  21,
  ACE_NTOHL (0x61627374), 
  ACE_NTOHL (0x72616374), 
  ACE_NTOHL (0x5f626173), 
  ACE_NTOHL (0x655f7661), 
  ACE_NTOHL (0x6c756573), 
  ACE_NTOHL (0x0),  // name = abstract_base_values
  CORBA::tk_alias, // typecode kind for typedefs
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49645365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
    16,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
    CORBA::tk_sequence, // typecode kind
    88, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
        0U, // string length

      0U,


  15,
  ACE_NTOHL (0x69735f74), 
  ACE_NTOHL (0x72756e63), 
  ACE_NTOHL (0x61746162), 
  ACE_NTOHL (0x6c650000),  // name = is_truncatable
  CORBA::tk_boolean,

  11,
  ACE_NTOHL (0x62617365), 
  ACE_NTOHL (0x5f76616c), 
  ACE_NTOHL (0x75650000),  // name = base_value
  CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
    13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
    CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
  CORBA::tk_TypeCode,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ValueDef_FullValueDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ValueDef_FullValueDescription),
    (char *) &_oc_CORBA_ValueDef_FullValueDescription,
    0,
    sizeof (CORBA::ValueDef::FullValueDescription)
  );

CORBA::TypeCode_ptr CORBA::ValueDef::_tc_FullValueDescription =
  &_tc_TAO_tc_CORBA_ValueDef_FullValueDescription;

void CORBA::ValueDef::FullValueDescription::_tao_any_destructor (void *x)
{
  FullValueDescription *tmp = ACE_static_cast (FullValueDescription*,x);
  delete tmp;
}

CORBA::ValueDef::FullValueDescription * CORBA::ValueDef::describe_value (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.describe_value (
      this,
      ACE_TRY_ENV
    );
}

CORBA::ValueMemberDef_ptr CORBA::ValueDef::create_value_member (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::Visibility access,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.create_value_member (
      this,
      id,
      name,
      version,
      type,
      access,
      ACE_TRY_ENV
    );
}

CORBA::AttributeDef_ptr CORBA::ValueDef::create_attribute (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::AttributeMode mode,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.create_attribute (
      this,
      id,
      name,
      version,
      type,
      mode,
      ACE_TRY_ENV
    );
}

CORBA::OperationDef_ptr CORBA::ValueDef::create_operation (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr result,
    CORBA::OperationMode mode,
    const CORBA::ParDescriptionSeq & params,
    const CORBA::ExceptionDefSeq & exceptions,
    const CORBA::ContextIdSeq & contexts,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.create_operation (
      this,
      id,
      name,
      version,
      result,
      mode,
      params,
      exceptions,
      contexts,
      ACE_TRY_ENV
    );
}


#if (TAO_HAS_INTERCEPTORS == 1)
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_get::result (CORBA::InterfaceDefSeq * result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_set::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::InterfaceDefSeq & supported_interfaces,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    supported_interfaces_ (supported_interfaces)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_supported_interfaces = parameter_list->length ();
  parameter_list->length (length_supported_interfaces + 1);
  (*parameter_list)[length_supported_interfaces].argument <<=  this->supported_interfaces_;
  
  (*parameter_list)[length_supported_interfaces].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_supported_interfaces_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_get::result (CORBA::InitializerSeq * result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_set::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::InitializerSeq & initializers,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    initializers_ (initializers)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_initializers = parameter_list->length ();
  parameter_list->length (length_initializers + 1);
  (*parameter_list)[length_initializers].argument <<=  this->initializers_;
  
  (*parameter_list)[length_initializers].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_initializers_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_get::result (CORBA::ValueDef_ptr result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_set::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::ValueDef_ptr base_value,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    base_value_ (base_value)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_base_value = parameter_list->length ();
  parameter_list->length (length_base_value + 1);
  (*parameter_list)[length_base_value].argument <<=  this->base_value_;
  
  (*parameter_list)[length_base_value].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_base_value_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_get::result (CORBA::ValueDefSeq * result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_set::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::ValueDefSeq & abstract_base_values,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    abstract_base_values_ (abstract_base_values)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_abstract_base_values = parameter_list->length ();
  parameter_list->length (length_abstract_base_values + 1);
  (*parameter_list)[length_abstract_base_values].argument <<=  this->abstract_base_values_;
  
  (*parameter_list)[length_abstract_base_values].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_abstract_base_values_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_get::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_set::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Boolean & is_abstract,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    is_abstract_ (is_abstract)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_is_abstract = parameter_list->length ();
  parameter_list->length (length_is_abstract + 1);
  (*parameter_list)[length_is_abstract].argument <<= CORBA::Any::from_boolean (this->is_abstract_);
  (*parameter_list)[length_is_abstract].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_abstract_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_get::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_set::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Boolean & is_custom,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    is_custom_ (is_custom)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_is_custom = parameter_list->length ();
  parameter_list->length (length_is_custom + 1);
  (*parameter_list)[length_is_custom].argument <<= CORBA::Any::from_boolean (this->is_custom_);
  (*parameter_list)[length_is_custom].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_custom_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_get::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_set::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Boolean & is_truncatable,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    is_truncatable_ (is_truncatable)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_is_truncatable = parameter_list->length ();
  parameter_list->length (length_is_truncatable + 1);
  (*parameter_list)[length_is_truncatable].argument <<= CORBA::Any::from_boolean (this->is_truncatable_);
  (*parameter_list)[length_is_truncatable].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_truncatable_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_a::TAO_ClientRequestInfo_CORBA_ValueDef_is_a (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * id,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    id_ (id)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_a::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_id = parameter_list->length ();
  parameter_list->length (length_id + 1);
  (*parameter_list)[length_id].argument <<= id_;
  (*parameter_list)[length_id].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_a::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_a::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_is_a::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_describe_value::result (ACE_NESTED_CLASS (CORBA::ValueDef,FullValueDescription) * result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    const CORBA::Visibility & access,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    id_ (id),
    name_ (name),
    version_ (version),
    type_ (type),
    access_ (access)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_id = parameter_list->length ();
  parameter_list->length (length_id + 1);
  (*parameter_list)[length_id].argument <<= id_;
  (*parameter_list)[length_id].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_name = parameter_list->length ();
  parameter_list->length (length_name + 1);
  (*parameter_list)[length_name].argument <<= name_;
  (*parameter_list)[length_name].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_version = parameter_list->length ();
  parameter_list->length (length_version + 1);
  (*parameter_list)[length_version].argument <<= version_;
  (*parameter_list)[length_version].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_type = parameter_list->length ();
  parameter_list->length (length_type + 1);
  (*parameter_list)[length_type].argument <<=  this->type_;
  
  (*parameter_list)[length_type].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_access = parameter_list->length ();
  parameter_list->length (length_access + 1);
  (*parameter_list)[length_access].argument <<= access_;
  (*parameter_list)[length_access].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_value_member::result (CORBA::ValueMemberDef_ptr result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::AttributeMode & mode,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    id_ (id),
    name_ (name),
    version_ (version),
    type_ (type),
    mode_ (mode)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_id = parameter_list->length ();
  parameter_list->length (length_id + 1);
  (*parameter_list)[length_id].argument <<= id_;
  (*parameter_list)[length_id].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_name = parameter_list->length ();
  parameter_list->length (length_name + 1);
  (*parameter_list)[length_name].argument <<= name_;
  (*parameter_list)[length_name].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_version = parameter_list->length ();
  parameter_list->length (length_version + 1);
  (*parameter_list)[length_version].argument <<= version_;
  (*parameter_list)[length_version].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_type = parameter_list->length ();
  parameter_list->length (length_type + 1);
  (*parameter_list)[length_type].argument <<=  this->type_;
  
  (*parameter_list)[length_type].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_mode = parameter_list->length ();
  parameter_list->length (length_mode + 1);
  (*parameter_list)[length_mode].argument <<=  this->mode_;
  
  (*parameter_list)[length_mode].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_attribute::result (CORBA::AttributeDef_ptr result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr result,
    CORBA::OperationMode & mode,
    const CORBA::ParDescriptionSeq & params,
    const CORBA::ExceptionDefSeq & exceptions,
    const CORBA::ContextIdSeq & contexts,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    id_ (id),
    name_ (name),
    version_ (version),
    result_ (result),
    mode_ (mode),
    params_ (params),
    exceptions_ (exceptions),
    contexts_ (contexts)
{}

Dynamic::ParameterList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_id = parameter_list->length ();
  parameter_list->length (length_id + 1);
  (*parameter_list)[length_id].argument <<= id_;
  (*parameter_list)[length_id].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_name = parameter_list->length ();
  parameter_list->length (length_name + 1);
  (*parameter_list)[length_name].argument <<= name_;
  (*parameter_list)[length_name].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_version = parameter_list->length ();
  parameter_list->length (length_version + 1);
  (*parameter_list)[length_version].argument <<= version_;
  (*parameter_list)[length_version].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_result = parameter_list->length ();
  parameter_list->length (length_result + 1);
  (*parameter_list)[length_result].argument <<=  this->result_;
  
  (*parameter_list)[length_result].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_mode = parameter_list->length ();
  parameter_list->length (length_mode + 1);
  (*parameter_list)[length_mode].argument <<=  this->mode_;
  
  (*parameter_list)[length_mode].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_params = parameter_list->length ();
  parameter_list->length (length_params + 1);
  (*parameter_list)[length_params].argument <<=  this->params_;
  
  (*parameter_list)[length_params].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_exceptions = parameter_list->length ();
  parameter_list->length (length_exceptions + 1);
  (*parameter_list)[length_exceptions].argument <<=  this->exceptions_;
  
  (*parameter_list)[length_exceptions].mode = Dynamic::PARAM_IN;
    
  CORBA::ULong length_contexts = parameter_list->length ();
  parameter_list->length (length_contexts + 1);
  (*parameter_list)[length_contexts].argument <<=  this->contexts_;
  
  (*parameter_list)[length_contexts].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueDef::TAO_ClientRequestInfo_CORBA_ValueDef_create_operation::result (CORBA::OperationDef_ptr result)
{
  // update the result 
  this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

void CORBA::ValueDescription::_tao_any_destructor (void *x)
{
  CORBA_ValueDescription *tmp = ACE_static_cast (CORBA_ValueDescription*,x);
  delete tmp;
}


///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_ValueBoxDef_Proxy_Impl::_TAO_ValueBoxDef_Proxy_Impl (void)
{}

_TAO_ValueBoxDef_Remote_Proxy_Impl::_TAO_ValueBoxDef_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

CORBA::IDLType_ptr _TAO_ValueBoxDef_Remote_Proxy_Impl::original_type_def (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  
  CORBA::IDLType_ptr _tao_retval = CORBA::IDLType::_nil ();
  CORBA::IDLType_var _tao_safe_retval (_tao_retval);
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_original_type_def",
      22,
      0,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get ri (
        &_tao_call,
        _collocated_tao_target_,
        ACE_TRY_ENV
      );
      ACE_CHECK_RETURN (0);
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );
              
            }
          
          TAO_INTERCEPTOR (
              CORBA::IDLType_ptr _tao_retval_info = _tao_safe_retval._retn ();
              ri.result (_tao_retval_info);
              _tao_safe_retval = _tao_retval_info;
            );
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK_RETURN (0);
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK_RETURN (0);
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  return _tao_safe_retval._retn ();
}

void _TAO_ValueBoxDef_Remote_Proxy_Impl::original_type_def (
    CORBA_Object *_collocated_tao_target_,
    CORBA::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  

  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_set_original_type_def",
      22,
      1,
      istub->orb_core ()
    );

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors ()
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      int _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_set ri (
        &_tao_call,
        _collocated_tao_target_,
        original_type_def,
        ACE_TRY_ENV
      );
      ACE_CHECK;
      
      ACE_TRY
        {
#endif /* TAO_HAS_INTERCEPTORS */
        
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
          TAO_INTERCEPTOR (ri.response_expected (1));
          
          TAO_INTERCEPTOR (
            _tao_vfr.send_request (
              &ri,
              ACE_TRY_ENV
            )
          );
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << original_type_def)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );
              
            }
          
          
          TAO_INTERCEPTOR (
            ri.reply_status (_invoke_status);
            if (_invoke_status == TAO_INVOKE_OK)
              {
                _tao_vfr.receive_reply (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            else
              {
                _tao_vfr.receive_other (
                  &ri,
                  ACE_TRY_ENV
                );
              }
            
          );
          TAO_INTERCEPTOR_CHECK;
          
#if TAO_HAS_INTERCEPTORS == 1
        }
      ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
        {
          _invoke_status =
            _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
          ACE_TRY_CHECK;
          
          ri.forward_reference (exc); 
          _tao_vfr.receive_other (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
            &ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          ACE_RE_THROW;
        }
      ACE_ENDTRY;
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */

      if (_invoke_status == TAO_INVOKE_RESTART)
        {
          _tao_call.restart_flag (1);
          continue;
        }
      
      break;
    }
  
}


//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_ValueBoxDef_Proxy_Broker::_TAO_ValueBoxDef_Proxy_Broker (void)
{
}

_TAO_ValueBoxDef_Proxy_Broker::~_TAO_ValueBoxDef_Proxy_Broker (void)
{
}

_TAO_ValueBoxDef_Proxy_Broker * (*CORBA__TAO_ValueBoxDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_ValueBoxDef_Remote_Proxy_Broker *
_TAO_ValueBoxDef_Remote_Proxy_Broker::the_TAO_ValueBoxDef_Remote_Proxy_Broker (void)
{
  static ::_TAO_ValueBoxDef_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_ValueBoxDef_Remote_Proxy_Broker::_TAO_ValueBoxDef_Remote_Proxy_Broker (void)
{
}

_TAO_ValueBoxDef_Remote_Proxy_Broker::~_TAO_ValueBoxDef_Remote_Proxy_Broker (void)
{
}

_TAO_ValueBoxDef_Proxy_Impl&
_TAO_ValueBoxDef_Remote_Proxy_Broker::select_proxy (
  ::CORBA_ValueBoxDef *,
  CORBA::Environment &
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
CORBA::ValueBoxDef::ValueBoxDef (int collocated)
{
  this->CORBA_ValueBoxDef_setup_collocation (collocated);
}

// destructor
CORBA::ValueBoxDef::~ValueBoxDef (void)
{}

void
CORBA::ValueBoxDef::CORBA_ValueBoxDef_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_ValueBoxDef_Proxy_Broker_ =
      ::CORBA__TAO_ValueBoxDef_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_ValueBoxDef_Proxy_Broker_ =
      ::_TAO_ValueBoxDef_Remote_Proxy_Broker::the_TAO_ValueBoxDef_Remote_Proxy_Broker ();
  
  this->CORBA_TypedefDef_setup_collocation (collocated);
}

void CORBA::ValueBoxDef::_tao_any_destructor (void *x)
{
  CORBA_ValueBoxDef *tmp = ACE_static_cast (CORBA_ValueBoxDef*,x);
  CORBA::release (tmp);
}

CORBA::ValueBoxDef_ptr CORBA::ValueBoxDef::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::ValueBoxDef::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/ValueBoxDef:1.0", ACE_TRY_ENV);
      ACE_CHECK_RETURN (CORBA::ValueBoxDef::_nil ());
      if (is_a == 0)
        return CORBA::ValueBoxDef::_nil ();
    }
  return CORBA::ValueBoxDef::_unchecked_narrow (obj, ACE_TRY_ENV);
}

CORBA::ValueBoxDef_ptr CORBA::ValueBoxDef::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return CORBA::ValueBoxDef::_nil ();
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();
      CORBA::ValueBoxDef_ptr default_proxy = CORBA::ValueBoxDef::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&CORBA__TAO_ValueBoxDef_Proxy_Broker_Factory_function_pointer != 0
        )
      {
        ACE_NEW_RETURN (
          default_proxy,
          ::CORBA::ValueBoxDef (
            stub,
            1,
            obj->_servant ()),
            
          CORBA::ValueBoxDef::_nil ());
        }
      if (CORBA::is_nil (default_proxy))
        ACE_NEW_RETURN (default_proxy, ::CORBA::ValueBoxDef (stub, 0, obj->_servant ()), CORBA::ValueBoxDef::_nil ());
        return default_proxy;
      }
    else 
      return
        ACE_reinterpret_cast
          (
            CORBA_ValueBoxDef_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &CORBA_ValueBoxDef::_narrow
                    )
                )
          );
}

CORBA::ValueBoxDef_ptr
CORBA::ValueBoxDef::_duplicate (CORBA::ValueBoxDef_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean CORBA::ValueBoxDef::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/ValueBoxDef:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/TypedefDef:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Contained:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IDLType:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
}

void *CORBA::ValueBoxDef::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      CORBA_ValueBoxDef::_narrow))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::TypedefDef::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::TypedefDef_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::Contained::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::Contained_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IDLType::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IDLType_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::IRObject::_narrow))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::IRObject_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA::ValueBoxDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ValueBoxDef:1.0";
}

CORBA::IDLType_ptr CORBA::ValueBoxDef::original_type_def (
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueBoxDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueBoxDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.original_type_def (
      this,
      ACE_TRY_ENV
    );
}

void CORBA::ValueBoxDef::original_type_def (
    CORBA::IDLType_ptr original_type_def,
    CORBA::Environment &ACE_TRY_ENV
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  _TAO_ValueBoxDef_Proxy_Impl &proxy = 
    this->the_TAO_ValueBoxDef_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.original_type_def (
      this,
      original_type_def,
      ACE_TRY_ENV
    );
}


#if (TAO_HAS_INTERCEPTORS == 1)
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_get::result (CORBA::IDLType_ptr result)
{
  // update the result 
  this->_result = result;
}

CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_set::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_set (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    CORBA::IDLType_ptr original_type_def,
    CORBA::Environment &    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    original_type_def_ (original_type_def)
{}

Dynamic::ParameterList *
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_set::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
  CORBA::ULong length_original_type_def = parameter_list->length ();
  parameter_list->length (length_original_type_def + 1);
  (*parameter_list)[length_original_type_def].argument <<=  this->original_type_def_;
  
  (*parameter_list)[length_original_type_def].mode = Dynamic::PARAM_IN;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_set::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
CORBA::ValueBoxDef::TAO_ClientRequestInfo_CORBA_ValueBoxDef_original_type_def_set::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

#endif /* TAO_HAS_INTERCEPTORS */

// ***************************************************************
// Any operators for sequence class moved from IFR_BaseC.cpp

void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ValueDefSeq &_tao_elem
  ) // copying
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_ValueDefSeq,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin ()
      );
  }
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueDefSeq *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_ValueDefSeq,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::ValueDefSeq::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueDefSeq *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const CORBA::ValueDefSeq*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::ValueDefSeq *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueDefSeq, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::ValueDefSeq*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::ValueDefSeq *tmp;
      ACE_NEW_RETURN (tmp, CORBA::ValueDefSeq, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_ValueDefSeq,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::ValueDefSeq::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

// ******************************************************************

void operator<<= (CORBA::Any &_tao_any, CORBA::FixedDef_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_FixedDef, 
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        CORBA::FixedDef::_duplicate (_tao_elem),
        CORBA::FixedDef::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::FixedDef_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CORBA::FixedDef::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_FixedDef, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          CORBA::_tc_FixedDef,
          1,
          _tao_elem,
          CORBA::FixedDef::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = CORBA::FixedDef::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = CORBA::FixedDef::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA::FixedDef,CORBA::FixedDef_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA::FixedDef,CORBA::FixedDef_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

void operator<<= (CORBA::Any &_tao_any, const CORBA::ValueMember &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_ValueMember,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueMember *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_ValueMember,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::ValueMember::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueMember *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(const CORBA::ValueMember*&,_tao_elem);
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::ValueMember *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueMember, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::ValueMember*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::ValueMember *tmp;
      ACE_NEW_RETURN (tmp, CORBA::ValueMember, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_ValueMember,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::ValueMember::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ValueMemberSeq &_tao_elem
  ) // copying
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_ValueMemberSeq,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin ()
      );
  }
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueMemberSeq *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_ValueMemberSeq,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::ValueMemberSeq::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueMemberSeq *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const CORBA::ValueMemberSeq*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::ValueMemberSeq *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueMemberSeq, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::ValueMemberSeq*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::ValueMemberSeq *tmp;
      ACE_NEW_RETURN (tmp, CORBA::ValueMemberSeq, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_ValueMemberSeq,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::ValueMemberSeq::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueMemberDef_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_ValueMemberDef, 
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        CORBA::ValueMemberDef::_duplicate (_tao_elem),
        CORBA::ValueMemberDef::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueMemberDef_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CORBA::ValueMemberDef::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueMemberDef, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          CORBA::_tc_ValueMemberDef,
          1,
          _tao_elem,
          CORBA::ValueMemberDef::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = CORBA::ValueMemberDef::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = CORBA::ValueMemberDef::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA::ValueMemberDef,CORBA::ValueMemberDef_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA::ValueMemberDef,CORBA::ValueMemberDef_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueDef_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_ValueDef, 
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        CORBA::ValueDef::_duplicate (_tao_elem),
        CORBA::ValueDef::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueDef_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CORBA::ValueDef::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueDef, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          CORBA::_tc_ValueDef,
          1,
          _tao_elem,
          CORBA::ValueDef::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = CORBA::ValueDef::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = CORBA::ValueDef::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

void operator<<= (CORBA::Any &_tao_any, const CORBA::ValueDef::FullValueDescription &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      CORBA::ValueDef::_tc_FullValueDescription,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueDef::FullValueDescription *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::ValueDef::_tc_FullValueDescription,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::ValueDef::FullValueDescription::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueDef::FullValueDescription *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(const CORBA::ValueDef::FullValueDescription*&,_tao_elem);
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::ValueDef::FullValueDescription *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::ValueDef::_tc_FullValueDescription, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::ValueDef::FullValueDescription*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::ValueDef::FullValueDescription *tmp;
      ACE_NEW_RETURN (tmp, CORBA::ValueDef::FullValueDescription, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::ValueDef::_tc_FullValueDescription,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::ValueDef::FullValueDescription::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, const CORBA::ValueDescription &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_ValueDescription,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueDescription *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_ValueDescription,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::ValueDescription::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueDescription *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(const CORBA::ValueDescription*&,_tao_elem);
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::ValueDescription *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueDescription, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::ValueDescription*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::ValueDescription *tmp;
      ACE_NEW_RETURN (tmp, CORBA::ValueDescription, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_ValueDescription,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::ValueDescription::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, CORBA::ValueBoxDef_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_ValueBoxDef, 
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        CORBA::ValueBoxDef::_duplicate (_tao_elem),
        CORBA::ValueBoxDef::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::ValueBoxDef_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CORBA::ValueBoxDef::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueBoxDef, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          CORBA::_tc_ValueBoxDef,
          1,
          _tao_elem,
          CORBA::ValueBoxDef::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = CORBA::ValueBoxDef::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = CORBA::ValueBoxDef::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA::ValueBoxDef,CORBA::ValueBoxDef_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA::ValueBoxDef,CORBA::ValueBoxDef_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// *********************************************************************
// CDR operators from sequence class moved from IFR_BaseC.cpp

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueDefSeq &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm << _tao_sequence[i].in ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len) 
      return 1;
    // retrieve all the elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

// *************************************************************

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueMemberSeq &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm << _tao_sequence[i]);
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len) 
      return 1;
    // retrieve all the elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm >> _tao_sequence[i]);
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

