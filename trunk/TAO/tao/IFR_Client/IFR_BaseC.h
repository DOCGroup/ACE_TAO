// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef TAO_IDL_IFR_BASEC_H
#define TAO_IDL_IFR_BASEC_H

#include "ace/pre.h"
#include "ifr_client_export.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if (TAO_HAS_INTERCEPTORS == 1)
  #include "tao/ClientRequestInfo.h"
#endif /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_IFR_Client_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_IFR_Client_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

#if !defined (_CORBA_IROBJECT___VAR_CH_)
#define _CORBA_IROBJECT___VAR_CH_

  class TAO_IFR_Client_Export CORBA_IRObject_var : public TAO_Base_var
  {
  public:
    CORBA_IRObject_var (void); // default constructor
    CORBA_IRObject_var (CORBA_IRObject_ptr p) : ptr_ (p) {} 
    CORBA_IRObject_var (const CORBA_IRObject_var &); // copy constructor
    ~CORBA_IRObject_var (void); // destructor
    
    CORBA_IRObject_var &operator= (CORBA_IRObject_ptr);
    CORBA_IRObject_var &operator= (const CORBA_IRObject_var &);
    CORBA_IRObject_ptr operator-> (void) const;
    
    operator const CORBA_IRObject_ptr &() const;
    operator CORBA_IRObject_ptr &();
    // in, inout, out, _retn 
    CORBA_IRObject_ptr in (void) const;
    CORBA_IRObject_ptr &inout (void);
    CORBA_IRObject_ptr &out (void);
    CORBA_IRObject_ptr _retn (void);
    CORBA_IRObject_ptr ptr (void) const;

  private:
    CORBA_IRObject_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    CORBA_IRObject_var (const TAO_Base_var &rhs);
    CORBA_IRObject_var &operator= (const TAO_Base_var &rhs);
  };


#endif /* end #if !defined */


#if !defined (_CORBA_IROBJECT___OUT_CH_)
#define _CORBA_IROBJECT___OUT_CH_

  class TAO_IFR_Client_Export CORBA_IRObject_out
  {
  public:
    CORBA_IRObject_out (CORBA_IRObject_ptr &);
    CORBA_IRObject_out (CORBA_IRObject_var &);
    CORBA_IRObject_out (const CORBA_IRObject_out &);
    CORBA_IRObject_out &operator= (const CORBA_IRObject_out &);
    CORBA_IRObject_out &operator= (const CORBA_IRObject_var &);
    CORBA_IRObject_out &operator= (CORBA_IRObject_ptr);
    operator CORBA_IRObject_ptr &();
    CORBA_IRObject_ptr &ptr (void);
    CORBA_IRObject_ptr operator-> (void);
    
  private:
    CORBA_IRObject_ptr &ptr_;
  };


#endif /* end #if !defined */


#if !defined (_CORBA_IROBJECT_CH_)
#define _CORBA_IROBJECT_CH_

// Forward Classes Declaration
  class _TAO_IRObject_Proxy_Impl;
  class _TAO_IRObject_Remote_Proxy_Impl;
  class _TAO_IRObject_Proxy_Broker;
  class _TAO_IRObject_Remote_Proxy_Broker;
  
  class TAO_IFR_Client_Export CORBA_IRObject : public virtual CORBA_Object
  {
  public:
  #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef CORBA_IRObject_ptr _ptr_type;
    typedef CORBA_IRObject_var _var_type;
  #endif /* ! __GNUC__ || g++ >= 2.8 */

    // the static operations
    static CORBA_IRObject_ptr _duplicate (CORBA_IRObject_ptr obj);
    static CORBA_IRObject_ptr _narrow (
        CORBA::Object_ptr obj,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );
    static CORBA_IRObject_ptr _unchecked_narrow (
        CORBA::Object_ptr obj,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );
    static CORBA_IRObject_ptr _nil (void)
      {
        return (CORBA_IRObject_ptr)0;
      }

    static void _tao_any_destructor (void*);

    virtual CORBA::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void destroy (
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean _is_a (
        const CORBA::Char *type_id, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;

  private:
    _TAO_IRObject_Proxy_Broker *the_TAO_IRObject_Proxy_Broker_;
    
  protected:
    CORBA_IRObject (int collocated = 0);
    
    protected:
      // This methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode
      virtual void CORBA_IRObject_setup_collocation (int collocated);
      
      CORBA_IRObject (
        TAO_Stub *objref, 
        CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0
        );
      
      friend class _TAO_IRObject_Remote_Proxy_Impl;
      friend class _TAO_IRObject_ThruPOA_Proxy_Impl;
      friend class _TAO_IRObject_Direct_Proxy_Impl;
    
    virtual ~CORBA_IRObject (void);
  private:
    CORBA_IRObject (const CORBA_IRObject &);
    void operator= (const CORBA_IRObject &);    
};


// The Proxy Implementations are used by each interface to
// perform a call. Each different implementation encapsulate
// an invocation logics.


///////////////////////////////////////////////////////////////////////
//                    Base  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_IRObject_Proxy_Impl : public virtual TAO_Object_Proxy_Impl
{
public:
  virtual ~_TAO_IRObject_Proxy_Impl (void) { }
  
    virtual CORBA::DefinitionKind def_kind (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual void destroy (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

protected:
  _TAO_IRObject_Proxy_Impl (void);

};
//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    Remote  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_IRObject_Remote_Proxy_Impl : 
  public virtual _TAO_IRObject_Proxy_Impl,
  public virtual TAO_Remote_Object_Proxy_Impl
{
public:
  _TAO_IRObject_Remote_Proxy_Impl (void);
  
  virtual ~_TAO_IRObject_Remote_Proxy_Impl (void) { }
  
    virtual CORBA::DefinitionKind def_kind (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void destroy (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};

//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


// The Proxy Brokers are used by each interface to get
// the right proxy for performing a call. In the new 
// collocation scheme, the proxy to be used can vary on
// a call by call basis. 



///////////////////////////////////////////////////////////////////////
//                 Base Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_IRObject_Proxy_Broker
{
public:
  virtual ~_TAO_IRObject_Proxy_Broker (void);
  virtual _TAO_IRObject_Proxy_Impl &select_proxy (
    CORBA_IRObject *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  ) = 0;

protected:
  _TAO_IRObject_Proxy_Broker (void);
  
};

//
//              End Base Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                 Remote Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_IRObject_Remote_Proxy_Broker : public virtual _TAO_IRObject_Proxy_Broker
{
public: 
  _TAO_IRObject_Remote_Proxy_Broker (void);
  
  virtual ~_TAO_IRObject_Remote_Proxy_Broker (void);
  
  virtual _TAO_IRObject_Proxy_Impl &select_proxy (
    CORBA_IRObject *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:
  _TAO_IRObject_Remote_Proxy_Impl remote_proxy_impl_;
// This member function is used to get an handle to the unique instance
// of the Remote Proxy Broker that is available for a given
// interface.

public:
  static _TAO_IRObject_Remote_Proxy_Broker *the_TAO_IRObject_Remote_Proxy_Broker (void);
};


//
//              End Remote Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


#endif /* end #if !defined */

typedef char * VersionSpec;
typedef CORBA::String_var VersionSpec_var;
typedef CORBA::String_out VersionSpec_out;
class CORBA_Contained;

#if !defined (_CORBA_CONTAINED___PTR_CH_)
#define _CORBA_CONTAINED___PTR_CH_

typedef CORBA_Contained *CORBA_Contained_ptr;

#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINED___VAR_CH_)
#define _CORBA_CONTAINED___VAR_CH_

class TAO_IFR_Client_Export CORBA_Contained_var : public TAO_Base_var
{
public:
  CORBA_Contained_var (void); // default constructor
  CORBA_Contained_var (CORBA_Contained_ptr p) : ptr_ (p) {} 
  CORBA_Contained_var (const CORBA_Contained_var &); // copy constructor
  ~CORBA_Contained_var (void); // destructor
  
  CORBA_Contained_var &operator= (CORBA_Contained_ptr);
  CORBA_Contained_var &operator= (const CORBA_Contained_var &);
  CORBA_Contained_ptr operator-> (void) const;
  
  operator const CORBA_Contained_ptr &() const;
  operator CORBA_Contained_ptr &();
  // in, inout, out, _retn 
  CORBA_Contained_ptr in (void) const;
  CORBA_Contained_ptr &inout (void);
  CORBA_Contained_ptr &out (void);
  CORBA_Contained_ptr _retn (void);
  CORBA_Contained_ptr ptr (void) const;

private:
  CORBA_Contained_ptr ptr_;
  // Unimplemented - prevents widening assignment.
  CORBA_Contained_var (const TAO_Base_var &rhs);
  CORBA_Contained_var &operator= (const TAO_Base_var &rhs);
};


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINED___OUT_CH_)
#define _CORBA_CONTAINED___OUT_CH_

class TAO_IFR_Client_Export CORBA_Contained_out
{
public:
  CORBA_Contained_out (CORBA_Contained_ptr &);
  CORBA_Contained_out (CORBA_Contained_var &);
  CORBA_Contained_out (const CORBA_Contained_out &);
  CORBA_Contained_out &operator= (const CORBA_Contained_out &);
  CORBA_Contained_out &operator= (const CORBA_Contained_var &);
  CORBA_Contained_out &operator= (CORBA_Contained_ptr);
  operator CORBA_Contained_ptr &();
  CORBA_Contained_ptr &ptr (void);
  CORBA_Contained_ptr operator-> (void);
  
private:
  CORBA_Contained_ptr &ptr_;
};


#endif /* end #if !defined */

class CORBA_Repository;

#if !defined (_CORBA_REPOSITORY___PTR_CH_)
#define _CORBA_REPOSITORY___PTR_CH_

typedef CORBA_Repository *CORBA_Repository_ptr;

#endif /* end #if !defined */


class CORBA_Container;

#if !defined (_CORBA_CONTAINER___PTR_CH_)
#define _CORBA_CONTAINER___PTR_CH_

typedef CORBA_Container *CORBA_Container_ptr;

#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER___VAR_CH_)
#define _CORBA_CONTAINER___VAR_CH_

class TAO_IFR_Client_Export CORBA_Container_var : public TAO_Base_var
{
public:
  CORBA_Container_var (void); // default constructor
  CORBA_Container_var (CORBA_Container_ptr p) : ptr_ (p) {} 
  CORBA_Container_var (const CORBA_Container_var &); // copy constructor
  ~CORBA_Container_var (void); // destructor
  
  CORBA_Container_var &operator= (CORBA_Container_ptr);
  CORBA_Container_var &operator= (const CORBA_Container_var &);
  CORBA_Container_ptr operator-> (void) const;
  
  operator const CORBA_Container_ptr &() const;
  operator CORBA_Container_ptr &();
  // in, inout, out, _retn 
  CORBA_Container_ptr in (void) const;
  CORBA_Container_ptr &inout (void);
  CORBA_Container_ptr &out (void);
  CORBA_Container_ptr _retn (void);
  CORBA_Container_ptr ptr (void) const;

private:
  CORBA_Container_ptr ptr_;
  // Unimplemented - prevents widening assignment.
  CORBA_Container_var (const TAO_Base_var &rhs);
  CORBA_Container_var &operator= (const TAO_Base_var &rhs);
};


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER___OUT_CH_)
#define _CORBA_CONTAINER___OUT_CH_

class TAO_IFR_Client_Export CORBA_Container_out
{
public:
  CORBA_Container_out (CORBA_Container_ptr &);
  CORBA_Container_out (CORBA_Container_var &);
  CORBA_Container_out (const CORBA_Container_out &);
  CORBA_Container_out &operator= (const CORBA_Container_out &);
  CORBA_Container_out &operator= (const CORBA_Container_var &);
  CORBA_Container_out &operator= (CORBA_Container_ptr);
  operator CORBA_Container_ptr &();
  CORBA_Container_ptr &ptr (void);
  CORBA_Container_ptr operator-> (void);
  
private:
  CORBA_Container_ptr &ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINED_CH_)
#define _CORBA_CONTAINED_CH_

// Forward Classes Declaration
class _TAO_Contained_Proxy_Impl;
class _TAO_Contained_Remote_Proxy_Impl;
class _TAO_Contained_Proxy_Broker;
class _TAO_Contained_Remote_Proxy_Broker;

class TAO_IFR_Client_Export CORBA_Contained: public virtual CORBA_IRObject
{
public:
#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_Contained_ptr _ptr_type;
  typedef CORBA_Contained_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  // the static operations
  static CORBA_Contained_ptr _duplicate (CORBA_Contained_ptr obj);
  static CORBA_Contained_ptr _narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_Contained_ptr _unchecked_narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_Contained_ptr _nil (void)
    {
      return (CORBA_Contained_ptr)0;
    }

  static void _tao_any_destructor (void*);

  virtual char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  struct Description;
  class Description_var;
  
  struct TAO_IFR_Client_Export Description
  {

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef Description_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

    static void _tao_any_destructor (void*);

    CORBA::DefinitionKind kind;
    CORBA::Any value;
  };

  class TAO_IFR_Client_Export Description_var
  {
  public:
    Description_var (void); // default constructor
    Description_var (Description *);
    Description_var (const Description_var &); // copy constructor
    ~Description_var (void); // destructor
    
    Description_var &operator= (Description *);
    Description_var &operator= (const Description_var &);
    Description *operator-> (void);
    const Description *operator-> (void) const;
    
    operator const Description &() const;
    operator Description &();
    operator Description &() const;
    operator Description *&(); // variable-size types only
    
    // in, inout, out, _retn 
    const Description &in (void) const;
    Description &inout (void);
    Description *&out (void);
    Description *_retn (void);
    Description *ptr (void) const;

  private:
    Description *ptr_;
  };

  class TAO_IFR_Client_Export Description_out
  {
  public:
    Description_out (Description *&);
    Description_out (Description_var &);
    Description_out (const Description_out &);
    Description_out &operator= (const Description_out &);
    Description_out &operator= (Description *);
    operator Description *&();
    Description *&ptr (void);
    Description *operator-> (void);
    
  private:
    Description *&ptr_;
    // assignment from T_var not allowed
    void operator= (const Description_var &);
  };

  static CORBA::TypeCode_ptr _tc_Description;

  virtual CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean _is_a (
      const CORBA::Char *type_id, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  virtual void *_tao_QueryInterface (ptr_arith_t type);
  
  virtual const char* _interface_repository_id (void) const;

private:
  _TAO_Contained_Proxy_Broker *the_TAO_Contained_Proxy_Broker_;
  
protected:
  CORBA_Contained (int collocated = 0);
  
  protected:
    // This methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode
    virtual void CORBA_Contained_setup_collocation (int collocated);
    
    CORBA_Contained (
      TAO_Stub *objref, 
      CORBA::Boolean _tao_collocated = 0,
      TAO_Abstract_ServantBase *servant = 0
      );
    
    friend class _TAO_Contained_Remote_Proxy_Impl;
    friend class _TAO_Contained_ThruPOA_Proxy_Impl;
    friend class _TAO_Contained_Direct_Proxy_Impl;
  
  virtual ~CORBA_Contained (void);
private:
  CORBA_Contained (const CORBA_Contained &);
  void operator= (const CORBA_Contained &);  
};


// The Proxy Implementations are used by each interface to
// perform a call. Each different implementation encapsulate
// an invocation logics.


///////////////////////////////////////////////////////////////////////
//                    Base  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_Contained_Proxy_Impl : 
  public virtual _TAO_IRObject_Proxy_Impl
{
public:
  virtual ~_TAO_Contained_Proxy_Impl (void) { }
  
    virtual char * id (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual void id (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual char * name (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual void name (
      CORBA_Object *_collocated_tao_target_,
      const char * name,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual char * version (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual void version (
      CORBA_Object *_collocated_tao_target_,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::Container_ptr defined_in (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual char * absolute_name (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::Repository_ptr containing_repository (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::Contained::Description * describe (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual void move (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

protected:
  _TAO_Contained_Proxy_Impl (void);

};
//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    Remote  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_Contained_Remote_Proxy_Impl : 
  public virtual _TAO_Contained_Proxy_Impl,
  public virtual TAO_Remote_Object_Proxy_Impl,
  public virtual _TAO_IRObject_Remote_Proxy_Impl
  
{
public:
  _TAO_Contained_Remote_Proxy_Impl (void);
  
  virtual ~_TAO_Contained_Remote_Proxy_Impl (void) { }
  
    virtual char * id (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void id (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual char * name (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void name (
      CORBA_Object *_collocated_tao_target_,
      const char * name,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual char * version (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void version (
      CORBA_Object *_collocated_tao_target_,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Container_ptr defined_in (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual char * absolute_name (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Repository_ptr containing_repository (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Contained::Description * describe (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void move (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};

//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


// The Proxy Brokers are used by each interface to get
// the right proxy for performing a call. In the new 
// collocation scheme, the proxy to be used can vary on
// a call by call basis. 



///////////////////////////////////////////////////////////////////////
//                 Base Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_Contained_Proxy_Broker
{
public:
  virtual ~_TAO_Contained_Proxy_Broker (void);
  virtual _TAO_Contained_Proxy_Impl &select_proxy (
    CORBA_Contained *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  ) = 0;

protected:
  _TAO_Contained_Proxy_Broker (void);
  
};

//
//              End Base Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                 Remote Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_Contained_Remote_Proxy_Broker : public virtual _TAO_Contained_Proxy_Broker
{
public: 
  _TAO_Contained_Remote_Proxy_Broker (void);
  
  virtual ~_TAO_Contained_Remote_Proxy_Broker (void);
  
  virtual _TAO_Contained_Proxy_Impl &select_proxy (
    CORBA_Contained *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:
  _TAO_Contained_Remote_Proxy_Impl remote_proxy_impl_;
// This member function is used to get an handle to the unique instance
// of the Remote Proxy Broker that is available for a given
// interface.

public:
  static _TAO_Contained_Remote_Proxy_Broker *the_TAO_Contained_Remote_Proxy_Broker (void);
};


//
//              End Remote Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CH_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CH_

  class _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq : public TAO_Unbounded_Base_Sequence
  {
  public:
    // = Initialization and termination methods.
    
    _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void);
    _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (CORBA::ULong maximum);
    _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (CORBA::ULong maximum,
      CORBA::ULong length,
      CORBA_Contained* *value,
      CORBA::Boolean release = 0);
    _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &rhs);
    virtual ~_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void);
    _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &rhs);
    TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var> operator[] (CORBA::ULong index) const;
    static CORBA_Contained **allocbuf (CORBA::ULong nelems);
    static void freebuf (CORBA_Contained **buffer);
    // The Base_Sequence functions, please see tao/Sequence.h
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    CORBA_Contained* *get_buffer (CORBA::Boolean orphan = 0);
    const CORBA_Contained* *get_buffer (void) const;
    virtual void _shrink_buffer (CORBA::ULong nl, CORBA::ULong ol);
    virtual void _downcast (
        void* target,
        CORBA_Object *src,
        CORBA_Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );
    virtual CORBA_Object* _upcast (void *src) const;
    
  };

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_CONTAINEDSEQ_CH_)
#define _CORBA_CONTAINEDSEQ_CH_

class CORBA_ContainedSeq;
class CORBA_ContainedSeq_var;

// *************************************************************
// CORBA_ContainedSeq
// *************************************************************

class TAO_IFR_Client_Export CORBA_ContainedSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA_Contained,CORBA_Contained_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_ContainedSeq (void); // default ctor
  CORBA_ContainedSeq (CORBA::ULong max); // uses max size
  CORBA_ContainedSeq (
    CORBA::ULong max, 
    CORBA::ULong length, 
    CORBA_Contained_ptr *buffer, 
    CORBA::Boolean release = 0
  );
  CORBA_ContainedSeq (const CORBA_ContainedSeq &); // copy ctor
  ~CORBA_ContainedSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_ContainedSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

};

#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINEDSEQ___VAR_CH_)
#define _CORBA_CONTAINEDSEQ___VAR_CH_

// *************************************************************
// class CORBA_ContainedSeq_var
// *************************************************************

class TAO_IFR_Client_Export CORBA_ContainedSeq_var
{
public:
  CORBA_ContainedSeq_var (void); // default constructor
  CORBA_ContainedSeq_var (CORBA_ContainedSeq *);
  CORBA_ContainedSeq_var (const CORBA_ContainedSeq_var &); // copy constructor
  ~CORBA_ContainedSeq_var (void); // destructor
  
  CORBA_ContainedSeq_var &operator= (CORBA_ContainedSeq *);
  CORBA_ContainedSeq_var &operator= (const CORBA_ContainedSeq_var &);
  CORBA_ContainedSeq *operator-> (void);
  const CORBA_ContainedSeq *operator-> (void) const;
  
  operator const CORBA_ContainedSeq &() const;
  operator CORBA_ContainedSeq &();
  operator CORBA_ContainedSeq &() const;
  operator CORBA_ContainedSeq *&(); // variable-size base types only
  
  TAO_Object_Manager<CORBA::Contained, CORBA::Contained_var> operator[] (CORBA::ULong index);
  
  // in, inout, out, _retn 
  const CORBA_ContainedSeq &in (void) const;
  CORBA_ContainedSeq &inout (void);
  CORBA_ContainedSeq *&out (void);
  CORBA_ContainedSeq *_retn (void);
  CORBA_ContainedSeq *ptr (void) const;

private:
  CORBA_ContainedSeq *ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINEDSEQ___OUT_CH_)
#define _CORBA_CONTAINEDSEQ___OUT_CH_

class TAO_IFR_Client_Export CORBA_ContainedSeq_out
{
public:
  CORBA_ContainedSeq_out (CORBA_ContainedSeq *&);
  CORBA_ContainedSeq_out (CORBA_ContainedSeq_var &);
  CORBA_ContainedSeq_out (const CORBA_ContainedSeq_out &);
  CORBA_ContainedSeq_out &operator= (const CORBA_ContainedSeq_out &);
  CORBA_ContainedSeq_out &operator= (CORBA_ContainedSeq *);
  operator CORBA_ContainedSeq *&();
  CORBA_ContainedSeq *&ptr (void);
  CORBA_ContainedSeq *operator-> (void);
  TAO_Object_Manager<CORBA::Contained, CORBA::Contained_var> operator[] (CORBA::ULong index);
  
private:
  CORBA_ContainedSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_ContainedSeq_var &);
};


#endif /* end #if !defined */

class CORBA_ModuleDef;

#if !defined (_CORBA_MODULEDEF___PTR_CH_)
#define _CORBA_MODULEDEF___PTR_CH_

typedef CORBA_ModuleDef *CORBA_ModuleDef_ptr;

#endif /* end #if !defined */


class CORBA_IDLType;

#if !defined (_CORBA_IDLTYPE___PTR_CH_)
#define _CORBA_IDLTYPE___PTR_CH_

typedef CORBA_IDLType *CORBA_IDLType_ptr;

#endif /* end #if !defined */


#if !defined (_CORBA_IDLTYPE___VAR_CH_)
#define _CORBA_IDLTYPE___VAR_CH_

class TAO_IFR_Client_Export CORBA_IDLType_var : public TAO_Base_var
{
public:
  CORBA_IDLType_var (void); // default constructor
  CORBA_IDLType_var (CORBA_IDLType_ptr p) : ptr_ (p) {} 
  CORBA_IDLType_var (const CORBA_IDLType_var &); // copy constructor
  ~CORBA_IDLType_var (void); // destructor
  
  CORBA_IDLType_var &operator= (CORBA_IDLType_ptr);
  CORBA_IDLType_var &operator= (const CORBA_IDLType_var &);
  CORBA_IDLType_ptr operator-> (void) const;
  
  operator const CORBA_IDLType_ptr &() const;
  operator CORBA_IDLType_ptr &();
  // in, inout, out, _retn 
  CORBA_IDLType_ptr in (void) const;
  CORBA_IDLType_ptr &inout (void);
  CORBA_IDLType_ptr &out (void);
  CORBA_IDLType_ptr _retn (void);
  CORBA_IDLType_ptr ptr (void) const;

private:
  CORBA_IDLType_ptr ptr_;
  // Unimplemented - prevents widening assignment.
  CORBA_IDLType_var (const TAO_Base_var &rhs);
  CORBA_IDLType_var &operator= (const TAO_Base_var &rhs);
};


#endif /* end #if !defined */


#if !defined (_CORBA_IDLTYPE___OUT_CH_)
#define _CORBA_IDLTYPE___OUT_CH_

class TAO_IFR_Client_Export CORBA_IDLType_out
{
public:
  CORBA_IDLType_out (CORBA_IDLType_ptr &);
  CORBA_IDLType_out (CORBA_IDLType_var &);
  CORBA_IDLType_out (const CORBA_IDLType_out &);
  CORBA_IDLType_out &operator= (const CORBA_IDLType_out &);
  CORBA_IDLType_out &operator= (const CORBA_IDLType_var &);
  CORBA_IDLType_out &operator= (CORBA_IDLType_ptr);
  operator CORBA_IDLType_ptr &();
  CORBA_IDLType_ptr &ptr (void);
  CORBA_IDLType_ptr operator-> (void);
  
private:
  CORBA_IDLType_ptr &ptr_;
};


#endif /* end #if !defined */

struct CORBA_StructMember;
class CORBA_StructMember_var;

struct TAO_IFR_Client_Export CORBA_StructMember
{

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_StructMember_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  static void _tao_any_destructor (void*);

  TAO_String_Manager name;
  CORBA::TypeCode_var type;
  CORBA::IDLType_var type_def;
};

class TAO_IFR_Client_Export CORBA_StructMember_var
{
public:
  CORBA_StructMember_var (void); // default constructor
  CORBA_StructMember_var (CORBA_StructMember *);
  CORBA_StructMember_var (const CORBA_StructMember_var &); // copy constructor
  ~CORBA_StructMember_var (void); // destructor
  
  CORBA_StructMember_var &operator= (CORBA_StructMember *);
  CORBA_StructMember_var &operator= (const CORBA_StructMember_var &);
  CORBA_StructMember *operator-> (void);
  const CORBA_StructMember *operator-> (void) const;
  
  operator const CORBA_StructMember &() const;
  operator CORBA_StructMember &();
  operator CORBA_StructMember &() const;
  operator CORBA_StructMember *&(); // variable-size types only
  
  // in, inout, out, _retn 
  const CORBA_StructMember &in (void) const;
  CORBA_StructMember &inout (void);
  CORBA_StructMember *&out (void);
  CORBA_StructMember *_retn (void);
  CORBA_StructMember *ptr (void) const;

private:
  CORBA_StructMember *ptr_;
};

class TAO_IFR_Client_Export CORBA_StructMember_out
{
public:
  CORBA_StructMember_out (CORBA_StructMember *&);
  CORBA_StructMember_out (CORBA_StructMember_var &);
  CORBA_StructMember_out (const CORBA_StructMember_out &);
  CORBA_StructMember_out &operator= (const CORBA_StructMember_out &);
  CORBA_StructMember_out &operator= (CORBA_StructMember *);
  operator CORBA_StructMember *&();
  CORBA_StructMember *&ptr (void);
  CORBA_StructMember *operator-> (void);
  
private:
  CORBA_StructMember *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_StructMember_var &);
};


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CH_

  class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_StructMemberSeq : public TAO_Unbounded_Base_Sequence
  {
  public:
    // = Initialization and termination methods.
    
    _TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void); // Default constructor.
    _TAO_Unbounded_Sequence_CORBA_StructMemberSeq (CORBA::ULong maximum); 
    _TAO_Unbounded_Sequence_CORBA_StructMemberSeq (CORBA::ULong maximum,
      CORBA::ULong length,
      CORBA_StructMember *data,
      CORBA::Boolean release = 0);
    _TAO_Unbounded_Sequence_CORBA_StructMemberSeq (const _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &rhs);
    _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &operator= (const _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &rhs);
    virtual ~_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void); // Dtor.
    // = Accessors.
    CORBA_StructMember &operator[] (CORBA::ULong i);
    const CORBA_StructMember &operator[] (CORBA::ULong i) const;
    // = Static operations.
    static CORBA_StructMember *allocbuf (CORBA::ULong size);
    static void freebuf (CORBA_StructMember *buffer);
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    
    CORBA_StructMember *get_buffer (CORBA::Boolean orphan = 0);
    const CORBA_StructMember *get_buffer (void) const;
    void replace (CORBA::ULong max,
      CORBA::ULong length,
      CORBA_StructMember *data,
      CORBA::Boolean release);
  };

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_STRUCTMEMBERSEQ_CH_)
#define _CORBA_STRUCTMEMBERSEQ_CH_

class CORBA_StructMemberSeq;
class CORBA_StructMemberSeq_var;

// *************************************************************
// CORBA_StructMemberSeq
// *************************************************************

class TAO_IFR_Client_Export CORBA_StructMemberSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA_StructMember>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_StructMemberSeq (void); // default ctor
  CORBA_StructMemberSeq (CORBA::ULong max); // uses max size
  CORBA_StructMemberSeq (
    CORBA::ULong max, 
    CORBA::ULong length, 
    CORBA::StructMember *buffer, 
    CORBA::Boolean release = 0
  );
  CORBA_StructMemberSeq (const CORBA_StructMemberSeq &); // copy ctor
  ~CORBA_StructMemberSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_StructMemberSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

};

#endif /* end #if !defined */


#if !defined (_CORBA_STRUCTMEMBERSEQ___VAR_CH_)
#define _CORBA_STRUCTMEMBERSEQ___VAR_CH_

// *************************************************************
// class CORBA_StructMemberSeq_var
// *************************************************************

class TAO_IFR_Client_Export CORBA_StructMemberSeq_var
{
public:
  CORBA_StructMemberSeq_var (void); // default constructor
  CORBA_StructMemberSeq_var (CORBA_StructMemberSeq *);
  CORBA_StructMemberSeq_var (const CORBA_StructMemberSeq_var &); // copy constructor
  ~CORBA_StructMemberSeq_var (void); // destructor
  
  CORBA_StructMemberSeq_var &operator= (CORBA_StructMemberSeq *);
  CORBA_StructMemberSeq_var &operator= (const CORBA_StructMemberSeq_var &);
  CORBA_StructMemberSeq *operator-> (void);
  const CORBA_StructMemberSeq *operator-> (void) const;
  
  operator const CORBA_StructMemberSeq &() const;
  operator CORBA_StructMemberSeq &();
  operator CORBA_StructMemberSeq &() const;
  operator CORBA_StructMemberSeq *&(); // variable-size base types only
  
  CORBA::StructMember & operator[] (CORBA::ULong index);
  const CORBA::StructMember & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const CORBA_StructMemberSeq &in (void) const;
  CORBA_StructMemberSeq &inout (void);
  CORBA_StructMemberSeq *&out (void);
  CORBA_StructMemberSeq *_retn (void);
  CORBA_StructMemberSeq *ptr (void) const;

private:
  CORBA_StructMemberSeq *ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_STRUCTMEMBERSEQ___OUT_CH_)
#define _CORBA_STRUCTMEMBERSEQ___OUT_CH_

class TAO_IFR_Client_Export CORBA_StructMemberSeq_out
{
public:
  CORBA_StructMemberSeq_out (CORBA_StructMemberSeq *&);
  CORBA_StructMemberSeq_out (CORBA_StructMemberSeq_var &);
  CORBA_StructMemberSeq_out (const CORBA_StructMemberSeq_out &);
  CORBA_StructMemberSeq_out &operator= (const CORBA_StructMemberSeq_out &);
  CORBA_StructMemberSeq_out &operator= (CORBA_StructMemberSeq *);
  operator CORBA_StructMemberSeq *&();
  CORBA_StructMemberSeq *&ptr (void);
  CORBA_StructMemberSeq *operator-> (void);
  CORBA::StructMember & operator[] (CORBA::ULong index);
  
private:
  CORBA_StructMemberSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_StructMemberSeq_var &);
};


#endif /* end #if !defined */

struct CORBA_Initializer;
class CORBA_Initializer_var;

struct TAO_IFR_Client_Export CORBA_Initializer
{

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_Initializer_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  static void _tao_any_destructor (void*);

  CORBA::StructMemberSeq members;
  TAO_String_Manager name;
};

class TAO_IFR_Client_Export CORBA_Initializer_var
{
public:
  CORBA_Initializer_var (void); // default constructor
  CORBA_Initializer_var (CORBA_Initializer *);
  CORBA_Initializer_var (const CORBA_Initializer_var &); // copy constructor
  ~CORBA_Initializer_var (void); // destructor
  
  CORBA_Initializer_var &operator= (CORBA_Initializer *);
  CORBA_Initializer_var &operator= (const CORBA_Initializer_var &);
  CORBA_Initializer *operator-> (void);
  const CORBA_Initializer *operator-> (void) const;
  
  operator const CORBA_Initializer &() const;
  operator CORBA_Initializer &();
  operator CORBA_Initializer &() const;
  operator CORBA_Initializer *&(); // variable-size types only
  
  // in, inout, out, _retn 
  const CORBA_Initializer &in (void) const;
  CORBA_Initializer &inout (void);
  CORBA_Initializer *&out (void);
  CORBA_Initializer *_retn (void);
  CORBA_Initializer *ptr (void) const;

private:
  CORBA_Initializer *ptr_;
};

class TAO_IFR_Client_Export CORBA_Initializer_out
{
public:
  CORBA_Initializer_out (CORBA_Initializer *&);
  CORBA_Initializer_out (CORBA_Initializer_var &);
  CORBA_Initializer_out (const CORBA_Initializer_out &);
  CORBA_Initializer_out &operator= (const CORBA_Initializer_out &);
  CORBA_Initializer_out &operator= (CORBA_Initializer *);
  operator CORBA_Initializer *&();
  CORBA_Initializer *&ptr (void);
  CORBA_Initializer *operator-> (void);
  
private:
  CORBA_Initializer *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_Initializer_var &);
};


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CH_

  class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_InitializerSeq : public TAO_Unbounded_Base_Sequence
  {
  public:
    // = Initialization and termination methods.
    
    _TAO_Unbounded_Sequence_CORBA_InitializerSeq (void); // Default constructor.
    _TAO_Unbounded_Sequence_CORBA_InitializerSeq (CORBA::ULong maximum); 
    _TAO_Unbounded_Sequence_CORBA_InitializerSeq (CORBA::ULong maximum,
      CORBA::ULong length,
      CORBA_Initializer *data,
      CORBA::Boolean release = 0);
    _TAO_Unbounded_Sequence_CORBA_InitializerSeq (const _TAO_Unbounded_Sequence_CORBA_InitializerSeq &rhs);
    _TAO_Unbounded_Sequence_CORBA_InitializerSeq &operator= (const _TAO_Unbounded_Sequence_CORBA_InitializerSeq &rhs);
    virtual ~_TAO_Unbounded_Sequence_CORBA_InitializerSeq (void); // Dtor.
    // = Accessors.
    CORBA_Initializer &operator[] (CORBA::ULong i);
    const CORBA_Initializer &operator[] (CORBA::ULong i) const;
    // = Static operations.
    static CORBA_Initializer *allocbuf (CORBA::ULong size);
    static void freebuf (CORBA_Initializer *buffer);
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    
    CORBA_Initializer *get_buffer (CORBA::Boolean orphan = 0);
    const CORBA_Initializer *get_buffer (void) const;
    void replace (CORBA::ULong max,
      CORBA::ULong length,
      CORBA_Initializer *data,
      CORBA::Boolean release);
  };

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INITIALIZERSEQ_CH_)
#define _CORBA_INITIALIZERSEQ_CH_

class CORBA_InitializerSeq;
class CORBA_InitializerSeq_var;

// *************************************************************
// CORBA_InitializerSeq
// *************************************************************

class TAO_IFR_Client_Export CORBA_InitializerSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA_Initializer>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_InitializerSeq (void); // default ctor
  CORBA_InitializerSeq (CORBA::ULong max); // uses max size
  CORBA_InitializerSeq (
    CORBA::ULong max, 
    CORBA::ULong length, 
    CORBA::Initializer *buffer, 
    CORBA::Boolean release = 0
  );
  CORBA_InitializerSeq (const CORBA_InitializerSeq &); // copy ctor
  ~CORBA_InitializerSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_InitializerSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

};

#endif /* end #if !defined */


#if !defined (_CORBA_INITIALIZERSEQ___VAR_CH_)
#define _CORBA_INITIALIZERSEQ___VAR_CH_

// *************************************************************
// class CORBA_InitializerSeq_var
// *************************************************************

class TAO_IFR_Client_Export CORBA_InitializerSeq_var
{
public:
  CORBA_InitializerSeq_var (void); // default constructor
  CORBA_InitializerSeq_var (CORBA_InitializerSeq *);
  CORBA_InitializerSeq_var (const CORBA_InitializerSeq_var &); // copy constructor
  ~CORBA_InitializerSeq_var (void); // destructor
  
  CORBA_InitializerSeq_var &operator= (CORBA_InitializerSeq *);
  CORBA_InitializerSeq_var &operator= (const CORBA_InitializerSeq_var &);
  CORBA_InitializerSeq *operator-> (void);
  const CORBA_InitializerSeq *operator-> (void) const;
  
  operator const CORBA_InitializerSeq &() const;
  operator CORBA_InitializerSeq &();
  operator CORBA_InitializerSeq &() const;
  operator CORBA_InitializerSeq *&(); // variable-size base types only
  
  CORBA::Initializer & operator[] (CORBA::ULong index);
  const CORBA::Initializer & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const CORBA_InitializerSeq &in (void) const;
  CORBA_InitializerSeq &inout (void);
  CORBA_InitializerSeq *&out (void);
  CORBA_InitializerSeq *_retn (void);
  CORBA_InitializerSeq *ptr (void) const;

private:
  CORBA_InitializerSeq *ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_INITIALIZERSEQ___OUT_CH_)
#define _CORBA_INITIALIZERSEQ___OUT_CH_

class TAO_IFR_Client_Export CORBA_InitializerSeq_out
{
public:
  CORBA_InitializerSeq_out (CORBA_InitializerSeq *&);
  CORBA_InitializerSeq_out (CORBA_InitializerSeq_var &);
  CORBA_InitializerSeq_out (const CORBA_InitializerSeq_out &);
  CORBA_InitializerSeq_out &operator= (const CORBA_InitializerSeq_out &);
  CORBA_InitializerSeq_out &operator= (CORBA_InitializerSeq *);
  operator CORBA_InitializerSeq *&();
  CORBA_InitializerSeq *&ptr (void);
  CORBA_InitializerSeq *operator-> (void);
  CORBA::Initializer & operator[] (CORBA::ULong index);
  
private:
  CORBA_InitializerSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_InitializerSeq_var &);
};


#endif /* end #if !defined */

struct CORBA_UnionMember;
class CORBA_UnionMember_var;

struct TAO_IFR_Client_Export CORBA_UnionMember
{

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_UnionMember_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  static void _tao_any_destructor (void*);

  TAO_String_Manager name;
  CORBA::Any label;
  CORBA::TypeCode_var type;
  CORBA::IDLType_var type_def;
};

class TAO_IFR_Client_Export CORBA_UnionMember_var
{
public:
  CORBA_UnionMember_var (void); // default constructor
  CORBA_UnionMember_var (CORBA_UnionMember *);
  CORBA_UnionMember_var (const CORBA_UnionMember_var &); // copy constructor
  ~CORBA_UnionMember_var (void); // destructor
  
  CORBA_UnionMember_var &operator= (CORBA_UnionMember *);
  CORBA_UnionMember_var &operator= (const CORBA_UnionMember_var &);
  CORBA_UnionMember *operator-> (void);
  const CORBA_UnionMember *operator-> (void) const;
  
  operator const CORBA_UnionMember &() const;
  operator CORBA_UnionMember &();
  operator CORBA_UnionMember &() const;
  operator CORBA_UnionMember *&(); // variable-size types only
  
  // in, inout, out, _retn 
  const CORBA_UnionMember &in (void) const;
  CORBA_UnionMember &inout (void);
  CORBA_UnionMember *&out (void);
  CORBA_UnionMember *_retn (void);
  CORBA_UnionMember *ptr (void) const;

private:
  CORBA_UnionMember *ptr_;
};

class TAO_IFR_Client_Export CORBA_UnionMember_out
{
public:
  CORBA_UnionMember_out (CORBA_UnionMember *&);
  CORBA_UnionMember_out (CORBA_UnionMember_var &);
  CORBA_UnionMember_out (const CORBA_UnionMember_out &);
  CORBA_UnionMember_out &operator= (const CORBA_UnionMember_out &);
  CORBA_UnionMember_out &operator= (CORBA_UnionMember *);
  operator CORBA_UnionMember *&();
  CORBA_UnionMember *&ptr (void);
  CORBA_UnionMember *operator-> (void);
  
private:
  CORBA_UnionMember *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_UnionMember_var &);
};


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CH_

  class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq : public TAO_Unbounded_Base_Sequence
  {
  public:
    // = Initialization and termination methods.
    
    _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void); // Default constructor.
    _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (CORBA::ULong maximum); 
    _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (CORBA::ULong maximum,
      CORBA::ULong length,
      CORBA_UnionMember *data,
      CORBA::Boolean release = 0);
    _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (const _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &rhs);
    _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &operator= (const _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &rhs);
    virtual ~_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void); // Dtor.
    // = Accessors.
    CORBA_UnionMember &operator[] (CORBA::ULong i);
    const CORBA_UnionMember &operator[] (CORBA::ULong i) const;
    // = Static operations.
    static CORBA_UnionMember *allocbuf (CORBA::ULong size);
    static void freebuf (CORBA_UnionMember *buffer);
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    
    CORBA_UnionMember *get_buffer (CORBA::Boolean orphan = 0);
    const CORBA_UnionMember *get_buffer (void) const;
    void replace (CORBA::ULong max,
      CORBA::ULong length,
      CORBA_UnionMember *data,
      CORBA::Boolean release);
  };

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_UNIONMEMBERSEQ_CH_)
#define _CORBA_UNIONMEMBERSEQ_CH_

class CORBA_UnionMemberSeq;
class CORBA_UnionMemberSeq_var;

// *************************************************************
// CORBA_UnionMemberSeq
// *************************************************************

class TAO_IFR_Client_Export CORBA_UnionMemberSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA_UnionMember>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_UnionMemberSeq (void); // default ctor
  CORBA_UnionMemberSeq (CORBA::ULong max); // uses max size
  CORBA_UnionMemberSeq (
    CORBA::ULong max, 
    CORBA::ULong length, 
    CORBA::UnionMember *buffer, 
    CORBA::Boolean release = 0
  );
  CORBA_UnionMemberSeq (const CORBA_UnionMemberSeq &); // copy ctor
  ~CORBA_UnionMemberSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_UnionMemberSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

};

#endif /* end #if !defined */


#if !defined (_CORBA_UNIONMEMBERSEQ___VAR_CH_)
#define _CORBA_UNIONMEMBERSEQ___VAR_CH_

// *************************************************************
// class CORBA_UnionMemberSeq_var
// *************************************************************

class TAO_IFR_Client_Export CORBA_UnionMemberSeq_var
{
public:
  CORBA_UnionMemberSeq_var (void); // default constructor
  CORBA_UnionMemberSeq_var (CORBA_UnionMemberSeq *);
  CORBA_UnionMemberSeq_var (const CORBA_UnionMemberSeq_var &); // copy constructor
  ~CORBA_UnionMemberSeq_var (void); // destructor
  
  CORBA_UnionMemberSeq_var &operator= (CORBA_UnionMemberSeq *);
  CORBA_UnionMemberSeq_var &operator= (const CORBA_UnionMemberSeq_var &);
  CORBA_UnionMemberSeq *operator-> (void);
  const CORBA_UnionMemberSeq *operator-> (void) const;
  
  operator const CORBA_UnionMemberSeq &() const;
  operator CORBA_UnionMemberSeq &();
  operator CORBA_UnionMemberSeq &() const;
  operator CORBA_UnionMemberSeq *&(); // variable-size base types only
  
  CORBA::UnionMember & operator[] (CORBA::ULong index);
  const CORBA::UnionMember & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const CORBA_UnionMemberSeq &in (void) const;
  CORBA_UnionMemberSeq &inout (void);
  CORBA_UnionMemberSeq *&out (void);
  CORBA_UnionMemberSeq *_retn (void);
  CORBA_UnionMemberSeq *ptr (void) const;

private:
  CORBA_UnionMemberSeq *ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_UNIONMEMBERSEQ___OUT_CH_)
#define _CORBA_UNIONMEMBERSEQ___OUT_CH_

class TAO_IFR_Client_Export CORBA_UnionMemberSeq_out
{
public:
  CORBA_UnionMemberSeq_out (CORBA_UnionMemberSeq *&);
  CORBA_UnionMemberSeq_out (CORBA_UnionMemberSeq_var &);
  CORBA_UnionMemberSeq_out (const CORBA_UnionMemberSeq_out &);
  CORBA_UnionMemberSeq_out &operator= (const CORBA_UnionMemberSeq_out &);
  CORBA_UnionMemberSeq_out &operator= (CORBA_UnionMemberSeq *);
  operator CORBA_UnionMemberSeq *&();
  CORBA_UnionMemberSeq *&ptr (void);
  CORBA_UnionMemberSeq *operator-> (void);
  CORBA::UnionMember & operator[] (CORBA::ULong index);
  
private:
  CORBA_UnionMemberSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_UnionMemberSeq_var &);
};


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMMEMBERSEQ_CH_)
#define _CORBA_ENUMMEMBERSEQ_CH_

class CORBA_EnumMemberSeq;
class CORBA_EnumMemberSeq_var;

// *************************************************************
// CORBA_EnumMemberSeq
// *************************************************************

class TAO_IFR_Client_Export CORBA_EnumMemberSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_String_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_EnumMemberSeq (void); // default ctor
  CORBA_EnumMemberSeq (CORBA::ULong max); // uses max size
  CORBA_EnumMemberSeq (
    CORBA::ULong max, 
    CORBA::ULong length, 
    char * *buffer, 
    CORBA::Boolean release = 0
  );
  CORBA_EnumMemberSeq (const CORBA_EnumMemberSeq &); // copy ctor
  ~CORBA_EnumMemberSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_EnumMemberSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

};

#endif /* end #if !defined */


#if !defined (_CORBA_ENUMMEMBERSEQ___VAR_CH_)
#define _CORBA_ENUMMEMBERSEQ___VAR_CH_

// *************************************************************
// class CORBA_EnumMemberSeq_var
// *************************************************************

class TAO_IFR_Client_Export CORBA_EnumMemberSeq_var
{
public:
  CORBA_EnumMemberSeq_var (void); // default constructor
  CORBA_EnumMemberSeq_var (CORBA_EnumMemberSeq *);
  CORBA_EnumMemberSeq_var (const CORBA_EnumMemberSeq_var &); // copy constructor
  ~CORBA_EnumMemberSeq_var (void); // destructor
  
  CORBA_EnumMemberSeq_var &operator= (CORBA_EnumMemberSeq *);
  CORBA_EnumMemberSeq_var &operator= (const CORBA_EnumMemberSeq_var &);
  CORBA_EnumMemberSeq *operator-> (void);
  const CORBA_EnumMemberSeq *operator-> (void) const;
  
  operator const CORBA_EnumMemberSeq &() const;
  operator CORBA_EnumMemberSeq &();
  operator CORBA_EnumMemberSeq &() const;
  operator CORBA_EnumMemberSeq *&(); // variable-size base types only
  
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
  
  // in, inout, out, _retn 
  const CORBA_EnumMemberSeq &in (void) const;
  CORBA_EnumMemberSeq &inout (void);
  CORBA_EnumMemberSeq *&out (void);
  CORBA_EnumMemberSeq *_retn (void);
  CORBA_EnumMemberSeq *ptr (void) const;

private:
  CORBA_EnumMemberSeq *ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMMEMBERSEQ___OUT_CH_)
#define _CORBA_ENUMMEMBERSEQ___OUT_CH_

class TAO_IFR_Client_Export CORBA_EnumMemberSeq_out
{
public:
  CORBA_EnumMemberSeq_out (CORBA_EnumMemberSeq *&);
  CORBA_EnumMemberSeq_out (CORBA_EnumMemberSeq_var &);
  CORBA_EnumMemberSeq_out (const CORBA_EnumMemberSeq_out &);
  CORBA_EnumMemberSeq_out &operator= (const CORBA_EnumMemberSeq_out &);
  CORBA_EnumMemberSeq_out &operator= (CORBA_EnumMemberSeq *);
  operator CORBA_EnumMemberSeq *&();
  CORBA_EnumMemberSeq *&ptr (void);
  CORBA_EnumMemberSeq *operator-> (void);
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
  
private:
  CORBA_EnumMemberSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_EnumMemberSeq_var &);
};


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER_CH_)
#define _CORBA_CONTAINER_CH_

// Forward Classes Declaration
class _TAO_Container_Proxy_Impl;
class _TAO_Container_Remote_Proxy_Impl;
class _TAO_Container_Proxy_Broker;
class _TAO_Container_Remote_Proxy_Broker;

class TAO_IFR_Client_Export CORBA_Container: public virtual CORBA_IRObject
{
public:
#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_Container_ptr _ptr_type;
  typedef CORBA_Container_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  // the static operations
  static CORBA_Container_ptr _duplicate (CORBA_Container_ptr obj);
  static CORBA_Container_ptr _narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_Container_ptr _unchecked_narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_Container_ptr _nil (void)
    {
      return (CORBA_Container_ptr)0;
    }

  static void _tao_any_destructor (void*);

  virtual CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  struct Description;
  class Description_var;
  
  struct TAO_IFR_Client_Export Description
  {

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef Description_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

    static void _tao_any_destructor (void*);

    CORBA::Contained_var contained_object;
    CORBA::DefinitionKind kind;
    CORBA::Any value;
  };

  class TAO_IFR_Client_Export Description_var
  {
  public:
    Description_var (void); // default constructor
    Description_var (Description *);
    Description_var (const Description_var &); // copy constructor
    ~Description_var (void); // destructor
    
    Description_var &operator= (Description *);
    Description_var &operator= (const Description_var &);
    Description *operator-> (void);
    const Description *operator-> (void) const;
    
    operator const Description &() const;
    operator Description &();
    operator Description &() const;
    operator Description *&(); // variable-size types only
    
    // in, inout, out, _retn 
    const Description &in (void) const;
    Description &inout (void);
    Description *&out (void);
    Description *_retn (void);
    Description *ptr (void) const;

  private:
    Description *ptr_;
  };

  class TAO_IFR_Client_Export Description_out
  {
  public:
    Description_out (Description *&);
    Description_out (Description_var &);
    Description_out (const Description_out &);
    Description_out &operator= (const Description_out &);
    Description_out &operator= (Description *);
    operator Description *&();
    Description *&ptr (void);
    Description *operator-> (void);
    
  private:
    Description *&ptr_;
    // assignment from T_var not allowed
    void operator= (const Description_var &);
  };

  static CORBA::TypeCode_ptr _tc_Description;

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CH_

    class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq : public TAO_Unbounded_Base_Sequence
    {
    public:
      // = Initialization and termination methods.
      
      _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (void); // Default constructor.
      _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (CORBA::ULong maximum); 
      _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (CORBA::ULong maximum,
        CORBA::ULong length,
        Description *data,
        CORBA::Boolean release = 0);
      _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &rhs);
      _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &operator= (const _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &rhs);
      virtual ~_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (void); // Dtor.
      // = Accessors.
      Description &operator[] (CORBA::ULong i);
      const Description &operator[] (CORBA::ULong i) const;
      // = Static operations.
      static Description *allocbuf (CORBA::ULong size);
      static void freebuf (Description *buffer);
      virtual void _allocate_buffer (CORBA::ULong length);
      virtual void _deallocate_buffer (void);
      // Implement the TAO_Base_Sequence methods (see Sequence.h)
      
      Description *get_buffer (CORBA::Boolean orphan = 0);
      const Description *get_buffer (void) const;
      void replace (CORBA::ULong max,
        CORBA::ULong length,
        Description *data,
        CORBA::Boolean release);
    };

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  
#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CH_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CH_

  class DescriptionSeq;
  class DescriptionSeq_var;
  
  // *************************************************************
  // DescriptionSeq
  // *************************************************************
  
  class TAO_IFR_Client_Export DescriptionSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_Sequence<Description>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    DescriptionSeq (void); // default ctor
    DescriptionSeq (CORBA::ULong max); // uses max size
    DescriptionSeq (
      CORBA::ULong max, 
      CORBA::ULong length, 
      Description *buffer, 
      CORBA::Boolean release = 0
    );
    DescriptionSeq (const DescriptionSeq &); // copy ctor
    ~DescriptionSeq (void);
    static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef DescriptionSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  };
  
#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ___VAR_CH_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ___VAR_CH_

  // *************************************************************
  // class DescriptionSeq_var
  // *************************************************************

  class TAO_IFR_Client_Export DescriptionSeq_var
  {
  public:
    DescriptionSeq_var (void); // default constructor
    DescriptionSeq_var (DescriptionSeq *);
    DescriptionSeq_var (const DescriptionSeq_var &); // copy constructor
    ~DescriptionSeq_var (void); // destructor
    
    DescriptionSeq_var &operator= (DescriptionSeq *);
    DescriptionSeq_var &operator= (const DescriptionSeq_var &);
    DescriptionSeq *operator-> (void);
    const DescriptionSeq *operator-> (void) const;
    
    operator const DescriptionSeq &() const;
    operator DescriptionSeq &();
    operator DescriptionSeq &() const;
    operator DescriptionSeq *&(); // variable-size base types only
    
    Description & operator[] (CORBA::ULong index);
    const Description & operator[] (CORBA::ULong index) const;
    
    // in, inout, out, _retn 
    const DescriptionSeq &in (void) const;
    DescriptionSeq &inout (void);
    DescriptionSeq *&out (void);
    DescriptionSeq *_retn (void);
    DescriptionSeq *ptr (void) const;

  private:
    DescriptionSeq *ptr_;
  };


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ___OUT_CH_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ___OUT_CH_

  class TAO_IFR_Client_Export DescriptionSeq_out
  {
  public:
    DescriptionSeq_out (DescriptionSeq *&);
    DescriptionSeq_out (DescriptionSeq_var &);
    DescriptionSeq_out (const DescriptionSeq_out &);
    DescriptionSeq_out &operator= (const DescriptionSeq_out &);
    DescriptionSeq_out &operator= (DescriptionSeq *);
    operator DescriptionSeq *&();
    DescriptionSeq *&ptr (void);
    DescriptionSeq *operator-> (void);
    Description & operator[] (CORBA::ULong index);
    
  private:
    DescriptionSeq *&ptr_;
    // assignment from T_var not allowed
    void operator= (const DescriptionSeq_var &);
  };

  static CORBA::TypeCode_ptr _tc_DescriptionSeq;

#endif /* end #if !defined */

  virtual CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean _is_a (
      const CORBA::Char *type_id, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  virtual void *_tao_QueryInterface (ptr_arith_t type);
  
  virtual const char* _interface_repository_id (void) const;

private:
  _TAO_Container_Proxy_Broker *the_TAO_Container_Proxy_Broker_;
  
protected:
  CORBA_Container (int collocated = 0);
  
  protected:
    // This methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode
    virtual void CORBA_Container_setup_collocation (int collocated);
    
    CORBA_Container (
      TAO_Stub *objref, 
      CORBA::Boolean _tao_collocated = 0,
      TAO_Abstract_ServantBase *servant = 0
      );
    
    friend class _TAO_Container_Remote_Proxy_Impl;
    friend class _TAO_Container_ThruPOA_Proxy_Impl;
    friend class _TAO_Container_Direct_Proxy_Impl;
  
  virtual ~CORBA_Container (void);
private:
  CORBA_Container (const CORBA_Container &);
  void operator= (const CORBA_Container &);  
};


// The Proxy Implementations are used by each interface to
// perform a call. Each different implementation encapsulate
// an invocation logics.


///////////////////////////////////////////////////////////////////////
//                    Base  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_Container_Proxy_Impl : 
  public virtual _TAO_IRObject_Proxy_Impl
{
public:
  virtual ~_TAO_Container_Proxy_Impl (void) { }
  
    virtual CORBA::Contained_ptr lookup (
      CORBA_Object *_collocated_tao_target_,
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ContainedSeq * contents (
      CORBA_Object *_collocated_tao_target_,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ContainedSeq * lookup_name (
      CORBA_Object *_collocated_tao_target_,
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::Container::DescriptionSeq * describe_contents (
      CORBA_Object *_collocated_tao_target_,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ModuleDef_ptr create_module (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ConstantDef_ptr create_constant (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::StructDef_ptr create_struct (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::UnionDef_ptr create_union (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::EnumDef_ptr create_enum (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::AliasDef_ptr create_alias (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::InterfaceDef_ptr create_interface (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ValueDef_ptr create_value (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ValueBoxDef_ptr create_value_box (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::ExceptionDef_ptr create_exception (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::NativeDef_ptr create_native (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  virtual CORBA::LocalInterfaceDef_ptr create_local_interface (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

protected:
  _TAO_Container_Proxy_Impl (void);

};
//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    Remote  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_Container_Remote_Proxy_Impl : 
  public virtual _TAO_Container_Proxy_Impl,
  public virtual TAO_Remote_Object_Proxy_Impl,
  public virtual _TAO_IRObject_Remote_Proxy_Impl
  
{
public:
  _TAO_Container_Remote_Proxy_Impl (void);
  
  virtual ~_TAO_Container_Remote_Proxy_Impl (void) { }
  
    virtual CORBA::Contained_ptr lookup (
      CORBA_Object *_collocated_tao_target_,
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ContainedSeq * contents (
      CORBA_Object *_collocated_tao_target_,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ContainedSeq * lookup_name (
      CORBA_Object *_collocated_tao_target_,
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Container::DescriptionSeq * describe_contents (
      CORBA_Object *_collocated_tao_target_,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ModuleDef_ptr create_module (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ConstantDef_ptr create_constant (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::StructDef_ptr create_struct (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::UnionDef_ptr create_union (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::EnumDef_ptr create_enum (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AliasDef_ptr create_alias (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::InterfaceDef_ptr create_interface (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueDef_ptr create_value (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueBoxDef_ptr create_value_box (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ExceptionDef_ptr create_exception (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::NativeDef_ptr create_native (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::LocalInterfaceDef_ptr create_local_interface (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};

//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


// The Proxy Brokers are used by each interface to get
// the right proxy for performing a call. In the new 
// collocation scheme, the proxy to be used can vary on
// a call by call basis. 



///////////////////////////////////////////////////////////////////////
//                 Base Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_Container_Proxy_Broker
{
public:
  virtual ~_TAO_Container_Proxy_Broker (void);
  virtual _TAO_Container_Proxy_Impl &select_proxy (
    CORBA_Container *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  ) = 0;

protected:
  _TAO_Container_Proxy_Broker (void);
  
};

//
//              End Base Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                 Remote Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_Container_Remote_Proxy_Broker : public virtual _TAO_Container_Proxy_Broker
{
public: 
  _TAO_Container_Remote_Proxy_Broker (void);
  
  virtual ~_TAO_Container_Remote_Proxy_Broker (void);
  
  virtual _TAO_Container_Proxy_Impl &select_proxy (
    CORBA_Container *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:
  _TAO_Container_Remote_Proxy_Impl remote_proxy_impl_;
// This member function is used to get an handle to the unique instance
// of the Remote Proxy Broker that is available for a given
// interface.

public:
  static _TAO_Container_Remote_Proxy_Broker *the_TAO_Container_Remote_Proxy_Broker (void);
};


//
//              End Remote Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE_CH_)
#define _CORBA_IDLTYPE_CH_

// Forward Classes Declaration
class _TAO_IDLType_Proxy_Impl;
class _TAO_IDLType_Remote_Proxy_Impl;
class _TAO_IDLType_Proxy_Broker;
class _TAO_IDLType_Remote_Proxy_Broker;

class TAO_IFR_Client_Export CORBA_IDLType: public virtual CORBA_IRObject
{
public:
#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_IDLType_ptr _ptr_type;
  typedef CORBA_IDLType_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  // the static operations
  static CORBA_IDLType_ptr _duplicate (CORBA_IDLType_ptr obj);
  static CORBA_IDLType_ptr _narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_IDLType_ptr _unchecked_narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_IDLType_ptr _nil (void)
    {
      return (CORBA_IDLType_ptr)0;
    }

  static void _tao_any_destructor (void*);

  virtual CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean _is_a (
      const CORBA::Char *type_id, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  virtual void *_tao_QueryInterface (ptr_arith_t type);
  
  virtual const char* _interface_repository_id (void) const;

private:
  _TAO_IDLType_Proxy_Broker *the_TAO_IDLType_Proxy_Broker_;
  
protected:
  CORBA_IDLType (int collocated = 0);
  
  protected:
    // This methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode
    virtual void CORBA_IDLType_setup_collocation (int collocated);
    
    CORBA_IDLType (
      TAO_Stub *objref, 
      CORBA::Boolean _tao_collocated = 0,
      TAO_Abstract_ServantBase *servant = 0
      );
    
    friend class _TAO_IDLType_Remote_Proxy_Impl;
    friend class _TAO_IDLType_ThruPOA_Proxy_Impl;
    friend class _TAO_IDLType_Direct_Proxy_Impl;
  
  virtual ~CORBA_IDLType (void);
private:
  CORBA_IDLType (const CORBA_IDLType &);
  void operator= (const CORBA_IDLType &);  
};


// The Proxy Implementations are used by each interface to
// perform a call. Each different implementation encapsulate
// an invocation logics.


///////////////////////////////////////////////////////////////////////
//                    Base  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_IDLType_Proxy_Impl : 
  public virtual _TAO_IRObject_Proxy_Impl
{
public:
  virtual ~_TAO_IDLType_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

protected:
  _TAO_IDLType_Proxy_Impl (void);

};
//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    Remote  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_IDLType_Remote_Proxy_Impl : 
  public virtual _TAO_IDLType_Proxy_Impl,
  public virtual TAO_Remote_Object_Proxy_Impl,
  public virtual _TAO_IRObject_Remote_Proxy_Impl
  
{
public:
  _TAO_IDLType_Remote_Proxy_Impl (void);
  
  virtual ~_TAO_IDLType_Remote_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};

//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


// The Proxy Brokers are used by each interface to get
// the right proxy for performing a call. In the new 
// collocation scheme, the proxy to be used can vary on
// a call by call basis. 



///////////////////////////////////////////////////////////////////////
//                 Base Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_IDLType_Proxy_Broker
{
public:
  virtual ~_TAO_IDLType_Proxy_Broker (void);
  virtual _TAO_IDLType_Proxy_Impl &select_proxy (
    CORBA_IDLType *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  ) = 0;

protected:
  _TAO_IDLType_Proxy_Broker (void);
  
};

//
//              End Base Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                 Remote Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_IDLType_Remote_Proxy_Broker : public virtual _TAO_IDLType_Proxy_Broker
{
public: 
  _TAO_IDLType_Remote_Proxy_Broker (void);
  
  virtual ~_TAO_IDLType_Remote_Proxy_Broker (void);
  
  virtual _TAO_IDLType_Proxy_Impl &select_proxy (
    CORBA_IDLType *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:
  _TAO_IDLType_Remote_Proxy_Impl remote_proxy_impl_;
// This member function is used to get an handle to the unique instance
// of the Remote Proxy Broker that is available for a given
// interface.

public:
  static _TAO_IDLType_Remote_Proxy_Broker *the_TAO_IDLType_Remote_Proxy_Broker (void);
};


//
//              End Remote Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


#endif /* end #if !defined */


#if !defined (_CORBA_TYPEDEFDEF___VAR_CH_)
#define _CORBA_TYPEDEFDEF___VAR_CH_

class TAO_IFR_Client_Export CORBA_TypedefDef_var : public TAO_Base_var
{
public:
  CORBA_TypedefDef_var (void); // default constructor
  CORBA_TypedefDef_var (CORBA_TypedefDef_ptr p) : ptr_ (p) {} 
  CORBA_TypedefDef_var (const CORBA_TypedefDef_var &); // copy constructor
  ~CORBA_TypedefDef_var (void); // destructor
  
  CORBA_TypedefDef_var &operator= (CORBA_TypedefDef_ptr);
  CORBA_TypedefDef_var &operator= (const CORBA_TypedefDef_var &);
  CORBA_TypedefDef_ptr operator-> (void) const;
  
  operator const CORBA_TypedefDef_ptr &() const;
  operator CORBA_TypedefDef_ptr &();
  // in, inout, out, _retn 
  CORBA_TypedefDef_ptr in (void) const;
  CORBA_TypedefDef_ptr &inout (void);
  CORBA_TypedefDef_ptr &out (void);
  CORBA_TypedefDef_ptr _retn (void);
  CORBA_TypedefDef_ptr ptr (void) const;

private:
  CORBA_TypedefDef_ptr ptr_;
  // Unimplemented - prevents widening assignment.
  CORBA_TypedefDef_var (const TAO_Base_var &rhs);
  CORBA_TypedefDef_var &operator= (const TAO_Base_var &rhs);
};


#endif /* end #if !defined */


#if !defined (_CORBA_TYPEDEFDEF___OUT_CH_)
#define _CORBA_TYPEDEFDEF___OUT_CH_

class TAO_IFR_Client_Export CORBA_TypedefDef_out
{
public:
  CORBA_TypedefDef_out (CORBA_TypedefDef_ptr &);
  CORBA_TypedefDef_out (CORBA_TypedefDef_var &);
  CORBA_TypedefDef_out (const CORBA_TypedefDef_out &);
  CORBA_TypedefDef_out &operator= (const CORBA_TypedefDef_out &);
  CORBA_TypedefDef_out &operator= (const CORBA_TypedefDef_var &);
  CORBA_TypedefDef_out &operator= (CORBA_TypedefDef_ptr);
  operator CORBA_TypedefDef_ptr &();
  CORBA_TypedefDef_ptr &ptr (void);
  CORBA_TypedefDef_ptr operator-> (void);
  
private:
  CORBA_TypedefDef_ptr &ptr_;
};


#endif /* end #if !defined */


#if !defined (_CORBA_TYPEDEFDEF_CH_)
#define _CORBA_TYPEDEFDEF_CH_

// Forward Classes Declaration
class _TAO_TypedefDef_Proxy_Impl;
class _TAO_TypedefDef_Remote_Proxy_Impl;
class _TAO_TypedefDef_Proxy_Broker;
class _TAO_TypedefDef_Remote_Proxy_Broker;

class TAO_IFR_Client_Export CORBA_TypedefDef: public virtual CORBA_Contained, public virtual CORBA_IDLType
{
public:
#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_TypedefDef_ptr _ptr_type;
  typedef CORBA_TypedefDef_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  // the static operations
  static CORBA_TypedefDef_ptr _duplicate (CORBA_TypedefDef_ptr obj);
  static CORBA_TypedefDef_ptr _narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_TypedefDef_ptr _unchecked_narrow (
      CORBA::Object_ptr obj,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  static CORBA_TypedefDef_ptr _nil (void)
    {
      return (CORBA_TypedefDef_ptr)0;
    }

  static void _tao_any_destructor (void*);

  virtual CORBA::Boolean _is_a (
      const CORBA::Char *type_id, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  virtual void *_tao_QueryInterface (ptr_arith_t type);
  
  virtual const char* _interface_repository_id (void) const;

private:
  _TAO_TypedefDef_Proxy_Broker *the_TAO_TypedefDef_Proxy_Broker_;
  
protected:
  CORBA_TypedefDef (int collocated = 0);
  
protected:
  // This methods travese the inheritance tree and set the
  // parents piece of the given class in the right mode
  virtual void CORBA_TypedefDef_setup_collocation (int collocated);
  
  CORBA_TypedefDef (
    TAO_Stub *objref, 
    CORBA::Boolean _tao_collocated = 0,
    TAO_Abstract_ServantBase *servant = 0
    );
  
  friend class _TAO_TypedefDef_Remote_Proxy_Impl;
  friend class _TAO_TypedefDef_ThruPOA_Proxy_Impl;
  friend class _TAO_TypedefDef_Direct_Proxy_Impl;

  virtual ~CORBA_TypedefDef (void);
private:
  CORBA_TypedefDef (const CORBA_TypedefDef &);
  void operator= (const CORBA_TypedefDef &);  
};


// The Proxy Implementations are used by each interface to
// perform a call. Each different implementation encapsulate
// an invocation logics.


///////////////////////////////////////////////////////////////////////
//                    Base  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_TypedefDef_Proxy_Impl : 
  public virtual _TAO_Contained_Proxy_Impl, 
  public virtual _TAO_IDLType_Proxy_Impl
{
public:
  virtual ~_TAO_TypedefDef_Proxy_Impl (void) { }
  
  protected:
  _TAO_TypedefDef_Proxy_Impl (void);

};
//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    Remote  Impl. Declaration
//

class TAO_IFR_Client_Export _TAO_TypedefDef_Remote_Proxy_Impl : 
  public virtual _TAO_TypedefDef_Proxy_Impl,
  public virtual TAO_Remote_Object_Proxy_Impl,
  public virtual _TAO_Contained_Remote_Proxy_Impl, 
  public virtual _TAO_IDLType_Remote_Proxy_Impl
  
{
public:
  _TAO_TypedefDef_Remote_Proxy_Impl (void);
  
  virtual ~_TAO_TypedefDef_Remote_Proxy_Impl (void) { }
  
  };

//
//                Base  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


// The Proxy Brokers are used by each interface to get
// the right proxy for performing a call. In the new 
// collocation scheme, the proxy to be used can vary on
// a call by call basis. 



///////////////////////////////////////////////////////////////////////
//                 Base Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_TypedefDef_Proxy_Broker
{
public:
  virtual ~_TAO_TypedefDef_Proxy_Broker (void);
  virtual _TAO_TypedefDef_Proxy_Impl &select_proxy (
    CORBA_TypedefDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  ) = 0;

protected:
  _TAO_TypedefDef_Proxy_Broker (void);
  
};

//
//              End Base Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                 Remote Proxy Broker Declaration 
//

class TAO_IFR_Client_Export _TAO_TypedefDef_Remote_Proxy_Broker : public virtual _TAO_TypedefDef_Proxy_Broker
{
public: 
  _TAO_TypedefDef_Remote_Proxy_Broker (void);
  
  virtual ~_TAO_TypedefDef_Remote_Proxy_Broker (void);
  
  virtual _TAO_TypedefDef_Proxy_Impl &select_proxy (
    CORBA_TypedefDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:
  _TAO_TypedefDef_Remote_Proxy_Impl remote_proxy_impl_;
// This member function is used to get an handle to the unique instance
// of the Remote Proxy Broker that is available for a given
// interface.

public:
  static _TAO_TypedefDef_Remote_Proxy_Broker *the_TAO_TypedefDef_Remote_Proxy_Broker (void);
};


//
//              End Remote Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


#endif /* end #if !defined */

struct CORBA_TypeDescription;
class CORBA_TypeDescription_var;

struct TAO_IFR_Client_Export CORBA_TypeDescription
{

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_TypeDescription_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

  static void _tao_any_destructor (void*);

  TAO_String_Manager name;
  TAO_String_Manager id;
  TAO_String_Manager defined_in;
  TAO_String_Manager version;
  CORBA::TypeCode_var type;
};

class TAO_IFR_Client_Export CORBA_TypeDescription_var
{
public:
  CORBA_TypeDescription_var (void); // default constructor
  CORBA_TypeDescription_var (CORBA_TypeDescription *);
  CORBA_TypeDescription_var (const CORBA_TypeDescription_var &); // copy constructor
  ~CORBA_TypeDescription_var (void); // destructor
  
  CORBA_TypeDescription_var &operator= (CORBA_TypeDescription *);
  CORBA_TypeDescription_var &operator= (const CORBA_TypeDescription_var &);
  CORBA_TypeDescription *operator-> (void);
  const CORBA_TypeDescription *operator-> (void) const;
  
  operator const CORBA_TypeDescription &() const;
  operator CORBA_TypeDescription &();
  operator CORBA_TypeDescription &() const;
  operator CORBA_TypeDescription *&(); // variable-size types only
  
  // in, inout, out, _retn 
  const CORBA_TypeDescription &in (void) const;
  CORBA_TypeDescription &inout (void);
  CORBA_TypeDescription *&out (void);
  CORBA_TypeDescription *_retn (void);
  CORBA_TypeDescription *ptr (void) const;

private:
  CORBA_TypeDescription *ptr_;
};

class TAO_IFR_Client_Export CORBA_TypeDescription_out
{
public:
  CORBA_TypeDescription_out (CORBA_TypeDescription *&);
  CORBA_TypeDescription_out (CORBA_TypeDescription_var &);
  CORBA_TypeDescription_out (const CORBA_TypeDescription_out &);
  CORBA_TypeDescription_out &operator= (const CORBA_TypeDescription_out &);
  CORBA_TypeDescription_out &operator= (CORBA_TypeDescription *);
  operator CORBA_TypeDescription *&();
  CORBA_TypeDescription *&ptr (void);
  CORBA_TypeDescription *operator-> (void);
  
private:
  CORBA_TypeDescription *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_TypeDescription_var &);
};

// Proxy Broker Factory function pointer declarations.

extern TAO_IFR_Client_Export _TAO_IRObject_Proxy_Broker * (*CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export _TAO_Contained_Proxy_Broker * (*CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export _TAO_Container_Proxy_Broker * (*CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export _TAO_IDLType_Proxy_Broker * (*CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export _TAO_TypedefDef_Proxy_Broker * (*CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::DefinitionKind);
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::DefinitionKind &);
// Any operators for interface CORBA::IRObject
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::IRObject_ptr);
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::IRObject *&);
// Any operators for interface CORBA::Contained
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Contained_ptr);
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Contained *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Contained::Description &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Contained::Description*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Contained::Description *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Contained::Description *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ContainedSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ContainedSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ContainedSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ContainedSeq *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::StructMember &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::StructMember*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::StructMember *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::StructMember *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::StructMemberSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::StructMemberSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::StructMemberSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::StructMemberSeq *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Initializer &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Initializer*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Initializer *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Initializer *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::InitializerSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::InitializerSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::InitializerSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::InitializerSeq *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::UnionMember &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::UnionMember*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::UnionMember *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::UnionMember *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::UnionMemberSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::UnionMemberSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::UnionMemberSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::UnionMemberSeq *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::EnumMemberSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::EnumMemberSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::EnumMemberSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::EnumMemberSeq *&);
// Any operators for interface CORBA::Container
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container_ptr);
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Container *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Container::Description &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container::Description*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Container::Description *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Container::Description *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::Container::DescriptionSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::Container::DescriptionSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Container::DescriptionSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::Container::DescriptionSeq *&);
// Any operators for interface CORBA::IDLType
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::IDLType_ptr);
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::IDLType *&);
// Any operators for interface CORBA::TypedefDef
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::TypedefDef_ptr);
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::TypedefDef *&);
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::TypeDescription &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::TypeDescription*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::TypeDescription *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::TypeDescription *&);

#ifndef __ACE_INLINE__

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::DefinitionKind &); // 
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::DefinitionKind &);
TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::IRObject_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::IRObject_ptr &);
TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Contained_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Contained_ptr &);
TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Contained::Description &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Contained::Description &);

#if !defined _TAO_CDR_OP_CORBA_ContainedSeq_H_
#define _TAO_CDR_OP_CORBA_ContainedSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ContainedSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ContainedSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ContainedSeq_H_ */


TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::StructMember &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::StructMember &);

#if !defined _TAO_CDR_OP_CORBA_StructMemberSeq_H_
#define _TAO_CDR_OP_CORBA_StructMemberSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::StructMemberSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::StructMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_StructMemberSeq_H_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Initializer &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Initializer &);

#if !defined _TAO_CDR_OP_CORBA_InitializerSeq_H_
#define _TAO_CDR_OP_CORBA_InitializerSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::InitializerSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::InitializerSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_InitializerSeq_H_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::UnionMember &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::UnionMember &);

#if !defined _TAO_CDR_OP_CORBA_UnionMemberSeq_H_
#define _TAO_CDR_OP_CORBA_UnionMemberSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::UnionMemberSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::UnionMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_UnionMemberSeq_H_ */


#if !defined _TAO_CDR_OP_CORBA_EnumMemberSeq_H_
#define _TAO_CDR_OP_CORBA_EnumMemberSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::EnumMemberSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::EnumMemberSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_EnumMemberSeq_H_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Container_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Container_ptr &);
TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Container::Description &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Container::Description &);

#if !defined _TAO_CDR_OP_CORBA_Container_DescriptionSeq_H_
#define _TAO_CDR_OP_CORBA_Container_DescriptionSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::Container::DescriptionSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::Container::DescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_Container_DescriptionSeq_H_ */

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::IDLType_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::IDLType_ptr &);
TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::TypedefDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::TypedefDef_ptr &);
TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::TypeDescription &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::TypeDescription &);

#endif /* __ACE_INLINE__ */


#if defined (__ACE_INLINE__)
#include "IFR_BaseC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */
