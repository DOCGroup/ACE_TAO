// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_OCTETSEQC_H_
#define _TAO_IDL_OCTETSEQC_H_

#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO 
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */


#if !defined (_OCTETSEQ_CH_)
#define _OCTETSEQ_CH_

class OctetSeq;
class OctetSeq_var;

// *************************************************************
// OctetSeq
// *************************************************************

class  OctetSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::Octet>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  OctetSeq (void); // default ctor
  OctetSeq (CORBA::ULong max); // uses max size
  OctetSeq (
    CORBA::ULong max, 
    CORBA::ULong length, 
    CORBA::Octet *buffer, 
    CORBA::Boolean release = 0
  );
  OctetSeq (const OctetSeq &); // copy ctor
  ~OctetSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef OctetSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */


#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
  OctetSeq (
      CORBA::ULong length,
      const ACE_Message_Block* mb
    )
    : TAO_Unbounded_Sequence<CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */

};

#endif /* end #if !defined */


#if !defined (_OCTETSEQ___VAR_CH_)
#define _OCTETSEQ___VAR_CH_

// *************************************************************
// class OctetSeq_var
// *************************************************************

class  OctetSeq_var
{
public:
  OctetSeq_var (void); // default constructor
  OctetSeq_var (OctetSeq *);
  OctetSeq_var (const OctetSeq_var &); // copy constructor
  OctetSeq_var (const OctetSeq &); // fixed-size base types only
  ~OctetSeq_var (void); // destructor
  
  OctetSeq_var &operator= (OctetSeq *);
  OctetSeq_var &operator= (const OctetSeq_var &);
  OctetSeq_var &operator= (const OctetSeq &); // fixed-size base types only
  OctetSeq *operator-> (void);
  const OctetSeq *operator-> (void) const;
  
  operator const OctetSeq &() const;
  operator OctetSeq &();
  operator OctetSeq &() const;
  
  CORBA::Octet & operator[] (CORBA::ULong index);
  const CORBA::Octet & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const OctetSeq &in (void) const;
  OctetSeq &inout (void);
  OctetSeq *&out (void);
  OctetSeq *_retn (void);
  OctetSeq *ptr (void) const;

private:
  OctetSeq *ptr_;
};


#endif /* end #if !defined */


#if !defined (_OCTETSEQ___OUT_CH_)
#define _OCTETSEQ___OUT_CH_

class  OctetSeq_out
{
public:
  OctetSeq_out (OctetSeq *&);
  OctetSeq_out (OctetSeq_var &);
  OctetSeq_out (const OctetSeq_out &);
  OctetSeq_out &operator= (const OctetSeq_out &);
  OctetSeq_out &operator= (OctetSeq *);
  operator OctetSeq *&();
  OctetSeq *&ptr (void);
  OctetSeq *operator-> (void);
  CORBA::Octet & operator[] (CORBA::ULong index);
  
private:
  OctetSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const OctetSeq_var &);
};


#endif /* end #if !defined */

extern  CORBA::TypeCode_ptr  _tc_OctetSeq;

 void operator<<= (CORBA::Any &, const OctetSeq &); // copying version
 void operator<<= (CORBA::Any &, OctetSeq*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, OctetSeq *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const OctetSeq *&);

#ifndef __ACE_INLINE__


#if !defined _TAO_CDR_OP_OctetSeq_H_
#define _TAO_CDR_OP_OctetSeq_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const OctetSeq &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OctetSeq &
  );

#endif /* _TAO_CDR_OP_OctetSeq_H_ */


#endif /* __ACE_INLINE__ */


#if defined (__ACE_INLINE__)
#include "OctetSeqC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#endif /* ifndef */
