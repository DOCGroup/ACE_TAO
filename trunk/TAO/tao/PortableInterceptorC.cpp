// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "PortableInterceptorC.h"

#include "StringSeqC.h"
#include "OctetSeqC.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "PortableInterceptorC.i"
#endif /* !defined INLINE */

#include "CORBA_String.h"

int PortableInterceptor::Interceptor::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::Interceptor_var
// *************************************************************

PortableInterceptor::Interceptor_var::Interceptor_var (void) // default constructor
  : ptr_ (Interceptor::_nil ())
{}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::Interceptor_var::Interceptor_var (const ::PortableInterceptor::Interceptor_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Interceptor::_duplicate (p.ptr ()))
{}

PortableInterceptor::Interceptor_var::~Interceptor_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::Interceptor_var &
PortableInterceptor::Interceptor_var::operator= (Interceptor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::Interceptor_var &
PortableInterceptor::Interceptor_var::operator= (const ::PortableInterceptor::Interceptor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::Interceptor::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::Interceptor_var::operator const ::PortableInterceptor::Interceptor_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::Interceptor_var::operator ::PortableInterceptor::Interceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr &
PortableInterceptor::Interceptor_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr &
PortableInterceptor::Interceptor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::Interceptor::_nil ();
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::Interceptor_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::Interceptor::_nil ();
  return val;
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::tao_duplicate (PortableInterceptor::Interceptor_ptr p)
{
  return ::PortableInterceptor::Interceptor::_duplicate (p);
}

void
PortableInterceptor::Interceptor_var::tao_release (PortableInterceptor::Interceptor_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::tao_nil (void)
{
  return ::PortableInterceptor::Interceptor::_nil ();
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::Interceptor::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::Interceptor_var::tao_upcast (void *src)
{
  PortableInterceptor::Interceptor **tmp =
    ACE_static_cast (PortableInterceptor::Interceptor **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::Interceptor_out
// *************************************************************

PortableInterceptor::Interceptor_out::Interceptor_out (Interceptor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::Interceptor::_nil ();
}

PortableInterceptor::Interceptor_out::Interceptor_out (Interceptor_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::Interceptor::_nil ();
}

PortableInterceptor::Interceptor_out::Interceptor_out (const ::PortableInterceptor::Interceptor_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Interceptor_out &, p).ptr_)
{}

::PortableInterceptor::Interceptor_out &
PortableInterceptor::Interceptor_out::operator= (const ::PortableInterceptor::Interceptor_out &p)
{
  this->ptr_ = ACE_const_cast (Interceptor_out&, p).ptr_;
  return *this;
}

PortableInterceptor::Interceptor_out &
PortableInterceptor::Interceptor_out::operator= (const ::PortableInterceptor::Interceptor_var &p)
{
  this->ptr_ = ::PortableInterceptor::Interceptor::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::Interceptor_out &
PortableInterceptor::Interceptor_out::operator= (Interceptor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::Interceptor_out::operator ::PortableInterceptor::Interceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr &
PortableInterceptor::Interceptor_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::Interceptor::Interceptor (void)
{}
  // destructor
  PortableInterceptor::Interceptor::~Interceptor (void)
  {}

  PortableInterceptor::Interceptor_ptr PortableInterceptor::Interceptor::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return Interceptor::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::Interceptor_ptr PortableInterceptor::Interceptor::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return Interceptor::_nil ();
    return
        ACE_reinterpret_cast
          (
            Interceptor_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &Interceptor::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor::_duplicate (Interceptor_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::Interceptor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::Interceptor::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/Interceptor:1.0";
}

// Default constructor.
PortableInterceptor::ForwardRequest::ForwardRequest (void)
  : CORBA_UserException ("IDL:PortableInterceptor/ForwardRequest:1.0")
{
}

// Destructor - all members are of self managing types.
PortableInterceptor::ForwardRequest::~ForwardRequest (void)
{
}

void PortableInterceptor::ForwardRequest::_tao_any_destructor (void *_tao_void_pointer)
{
  ForwardRequest *tmp = ACE_static_cast (ForwardRequest*, _tao_void_pointer);
  delete tmp;
}

// Copy constructor.
PortableInterceptor::ForwardRequest::ForwardRequest (const ::PortableInterceptor::ForwardRequest &_tao_excp)
  : CORBA_UserException (_tao_excp._id ())
{
  this->forward = CORBA::Object::_duplicate (_tao_excp.forward.in ());
  this->permanent = _tao_excp.permanent;
}

// Assignment operator.
PortableInterceptor::ForwardRequest&
PortableInterceptor::ForwardRequest::operator= (const ::PortableInterceptor::ForwardRequest &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  this->forward = CORBA::Object::_duplicate (_tao_excp.forward.in ());
  this->permanent = _tao_excp.permanent;
  return *this;
}

// Narrow.
PortableInterceptor::ForwardRequest *
PortableInterceptor::ForwardRequest::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableInterceptor/ForwardRequest:1.0", exc->_id ()))
    {
      return ACE_dynamic_cast (ForwardRequest *, exc);
    }
  else
    {
      return 0;
    }
}

void PortableInterceptor::ForwardRequest::_raise ()
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ForwardRequest::_tao_encode (
    TAO_OutputCDR &cdr
    TAO_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ForwardRequest::_tao_decode (
    TAO_InputCDR &cdr
    TAO_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method.
CORBA::Exception *PortableInterceptor::ForwardRequest::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ForwardRequest, 0);
  return retval;
}

PortableInterceptor::ForwardRequest::ForwardRequest (
    const CORBA::Object_ptr  _tao_forward,
    CORBA::Boolean _tao_permanent
  )
  : CORBA_UserException ("IDL:PortableInterceptor/ForwardRequest:1.0")
{
  this->forward = CORBA::Object::_duplicate (_tao_forward);
  this->permanent = _tao_permanent;
}

static const CORBA::Long _oc_PortableInterceptor_ForwardRequest[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x466f7277),
  ACE_NTOHL (0x61726452),
  ACE_NTOHL (0x65717565),
  ACE_NTOHL (0x73743a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:PortableInterceptor/ForwardRequest:1.0
  15,
  ACE_NTOHL (0x466f7277),
  ACE_NTOHL (0x61726452),
  ACE_NTOHL (0x65717565),
  ACE_NTOHL (0x73740000),  // name = ForwardRequest
  2, // member count
  8,
  ACE_NTOHL (0x666f7277),
  ACE_NTOHL (0x61726400),  // name = forward
  CORBA::tk_objref,
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    29,
    ACE_NTOHL (0x49444c3a),
    ACE_NTOHL (0x6f6d672e),
    ACE_NTOHL (0x6f72672f),
    ACE_NTOHL (0x434f5242),
    ACE_NTOHL (0x412f4f62),
    ACE_NTOHL (0x6a656374),
    ACE_NTOHL (0x3a312e30),
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Object:1.0
    7,
    ACE_NTOHL (0x4f626a65),
    ACE_NTOHL (0x63740000),  // name = Object

  10,
  ACE_NTOHL (0x7065726d),
  ACE_NTOHL (0x616e656e),
  ACE_NTOHL (0x74000000),  // name = permanent
  CORBA::tk_boolean,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ForwardRequest (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ForwardRequest),
    (char *) &_oc_PortableInterceptor_ForwardRequest,
    0,
    sizeof (PortableInterceptor::ForwardRequest)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ForwardRequest, &_tc_TAO_tc_PortableInterceptor_ForwardRequest)
TAO_NAMESPACE_END

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ForwardRequest::_type (void) const
{
  return ::PortableInterceptor::_tc_ForwardRequest;
}

static const CORBA::Long _oc_PortableInterceptor_ReplyStatus[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x5265706c),
  ACE_NTOHL (0x79537461),
  ACE_NTOHL (0x7475733a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableInterceptor/ReplyStatus:1.0
  12,
  ACE_NTOHL (0x5265706c),
  ACE_NTOHL (0x79537461),
  ACE_NTOHL (0x74757300),  // name = ReplyStatus
  CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ReplyStatus (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ReplyStatus),
    (char *) &_oc_PortableInterceptor_ReplyStatus,
    0,
    sizeof (PortableInterceptor::ReplyStatus)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ReplyStatus, &_tc_TAO_tc_PortableInterceptor_ReplyStatus)
TAO_NAMESPACE_END

TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, SUCCESSFUL, 0)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, SYSTEM_EXCEPTION, 1)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, USER_EXCEPTION, 2)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, LOCATION_FORWARD, 3)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, LOCATION_FORWARD_PERMANENT, 4)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, TRANSPORT_RETRY, 5)
TAO_NAMESPACE_END
static const CORBA::Long _oc_PortableInterceptor_SlotId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x536c6f74),
  ACE_NTOHL (0x49643a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:PortableInterceptor/SlotId:1.0
  7,
  ACE_NTOHL (0x536c6f74),
  ACE_NTOHL (0x49640000),  // name = SlotId
  CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_SlotId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_SlotId),
    (char *) &_oc_PortableInterceptor_SlotId,
    0,
    sizeof (PortableInterceptor::SlotId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_SlotId, &_tc_TAO_tc_PortableInterceptor_SlotId)
TAO_NAMESPACE_END

// Default constructor.
PortableInterceptor::InvalidSlot::InvalidSlot (void)
  : CORBA_UserException ("IDL:PortableInterceptor/InvalidSlot:1.0")
{
}

// Destructor - all members are of self managing types.
PortableInterceptor::InvalidSlot::~InvalidSlot (void)
{
}

void PortableInterceptor::InvalidSlot::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidSlot *tmp = ACE_static_cast (InvalidSlot*, _tao_void_pointer);
  delete tmp;
}

// Copy constructor.
PortableInterceptor::InvalidSlot::InvalidSlot (const ::PortableInterceptor::InvalidSlot &_tao_excp)
  : CORBA_UserException (_tao_excp._id ())
{
}

// Assignment operator.
PortableInterceptor::InvalidSlot&
PortableInterceptor::InvalidSlot::operator= (const ::PortableInterceptor::InvalidSlot &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

// Narrow.
PortableInterceptor::InvalidSlot *
PortableInterceptor::InvalidSlot::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableInterceptor/InvalidSlot:1.0", exc->_id ()))
    {
      return ACE_dynamic_cast (InvalidSlot *, exc);
    }
  else
    {
      return 0;
    }
}

void PortableInterceptor::InvalidSlot::_raise ()
{
  TAO_RAISE (*this);
}

void PortableInterceptor::InvalidSlot::_tao_encode (
    TAO_OutputCDR &cdr
    TAO_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::InvalidSlot::_tao_decode (
    TAO_InputCDR &cdr
    TAO_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method.
CORBA::Exception *PortableInterceptor::InvalidSlot::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::InvalidSlot, 0);
  return retval;
}

static const CORBA::Long _oc_PortableInterceptor_InvalidSlot[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c696453),
  ACE_NTOHL (0x6c6f743a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableInterceptor/InvalidSlot:1.0
  12,
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c696453),
  ACE_NTOHL (0x6c6f7400),  // name = InvalidSlot
  0, // member count
};
static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_InvalidSlot (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_InvalidSlot),
    (char *) &_oc_PortableInterceptor_InvalidSlot,
    0,
    sizeof (PortableInterceptor::InvalidSlot)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_InvalidSlot, &_tc_TAO_tc_PortableInterceptor_InvalidSlot)
TAO_NAMESPACE_END

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::InvalidSlot::_type (void) const
{
  return ::PortableInterceptor::_tc_InvalidSlot;
}

int PortableInterceptor::Current::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::Current_var
// *************************************************************

PortableInterceptor::Current_var::Current_var (void) // default constructor
  : ptr_ (Current::_nil ())
{}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::Current_var::Current_var (const ::PortableInterceptor::Current_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Current::_duplicate (p.ptr ()))
{}

PortableInterceptor::Current_var::~Current_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::Current_var &
PortableInterceptor::Current_var::operator= (Current_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::Current_var &
PortableInterceptor::Current_var::operator= (const ::PortableInterceptor::Current_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::Current::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::Current_var::operator const ::PortableInterceptor::Current_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::Current_var::operator ::PortableInterceptor::Current_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::Current_ptr &
PortableInterceptor::Current_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::Current_ptr &
PortableInterceptor::Current_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::Current::_nil ();
  return this->ptr_;
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::Current_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::Current::_nil ();
  return val;
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::tao_duplicate (PortableInterceptor::Current_ptr p)
{
  return ::PortableInterceptor::Current::_duplicate (p);
}

void
PortableInterceptor::Current_var::tao_release (PortableInterceptor::Current_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::tao_nil (void)
{
  return ::PortableInterceptor::Current::_nil ();
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::Current::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::Current_var::tao_upcast (void *src)
{
  PortableInterceptor::Current **tmp =
    ACE_static_cast (PortableInterceptor::Current **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::Current_out
// *************************************************************

PortableInterceptor::Current_out::Current_out (Current_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::Current::_nil ();
}

PortableInterceptor::Current_out::Current_out (Current_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::Current::_nil ();
}

PortableInterceptor::Current_out::Current_out (const ::PortableInterceptor::Current_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Current_out &, p).ptr_)
{}

::PortableInterceptor::Current_out &
PortableInterceptor::Current_out::operator= (const ::PortableInterceptor::Current_out &p)
{
  this->ptr_ = ACE_const_cast (Current_out&, p).ptr_;
  return *this;
}

PortableInterceptor::Current_out &
PortableInterceptor::Current_out::operator= (const ::PortableInterceptor::Current_var &p)
{
  this->ptr_ = ::PortableInterceptor::Current::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::Current_out &
PortableInterceptor::Current_out::operator= (Current_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::Current_out::operator ::PortableInterceptor::Current_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::Current_ptr &
PortableInterceptor::Current_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::Current_ptr
PortableInterceptor::Current_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::Current::Current (void)
{}
  // destructor
  PortableInterceptor::Current::~Current (void)
  {}

  PortableInterceptor::Current_ptr PortableInterceptor::Current::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return Current::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::Current_ptr PortableInterceptor::Current::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return Current::_nil ();
    return
        ACE_reinterpret_cast
          (
            Current_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &Current::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::Current_ptr
PortableInterceptor::Current::_duplicate (Current_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::Current::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, Current)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &::CORBA::Current::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::Current_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::Current::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/Current:1.0";
}

int PortableInterceptor::RequestInfo::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::RequestInfo_var
// *************************************************************

PortableInterceptor::RequestInfo_var::RequestInfo_var (void) // default constructor
  : ptr_ (RequestInfo::_nil ())
{}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::RequestInfo_var::RequestInfo_var (const ::PortableInterceptor::RequestInfo_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (RequestInfo::_duplicate (p.ptr ()))
{}

PortableInterceptor::RequestInfo_var::~RequestInfo_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::RequestInfo_var &
PortableInterceptor::RequestInfo_var::operator= (RequestInfo_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::RequestInfo_var &
PortableInterceptor::RequestInfo_var::operator= (const ::PortableInterceptor::RequestInfo_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::RequestInfo::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::RequestInfo_var::operator const ::PortableInterceptor::RequestInfo_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::RequestInfo_var::operator ::PortableInterceptor::RequestInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr &
PortableInterceptor::RequestInfo_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr &
PortableInterceptor::RequestInfo_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::RequestInfo::_nil ();
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::RequestInfo_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::RequestInfo::_nil ();
  return val;
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::tao_duplicate (PortableInterceptor::RequestInfo_ptr p)
{
  return ::PortableInterceptor::RequestInfo::_duplicate (p);
}

void
PortableInterceptor::RequestInfo_var::tao_release (PortableInterceptor::RequestInfo_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::tao_nil (void)
{
  return ::PortableInterceptor::RequestInfo::_nil ();
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::RequestInfo::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::RequestInfo_var::tao_upcast (void *src)
{
  PortableInterceptor::RequestInfo **tmp =
    ACE_static_cast (PortableInterceptor::RequestInfo **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::RequestInfo_out
// *************************************************************

PortableInterceptor::RequestInfo_out::RequestInfo_out (RequestInfo_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::RequestInfo::_nil ();
}

PortableInterceptor::RequestInfo_out::RequestInfo_out (RequestInfo_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::RequestInfo::_nil ();
}

PortableInterceptor::RequestInfo_out::RequestInfo_out (const ::PortableInterceptor::RequestInfo_out &p) // copy constructor
  : ptr_ (ACE_const_cast (RequestInfo_out &, p).ptr_)
{}

::PortableInterceptor::RequestInfo_out &
PortableInterceptor::RequestInfo_out::operator= (const ::PortableInterceptor::RequestInfo_out &p)
{
  this->ptr_ = ACE_const_cast (RequestInfo_out&, p).ptr_;
  return *this;
}

PortableInterceptor::RequestInfo_out &
PortableInterceptor::RequestInfo_out::operator= (const ::PortableInterceptor::RequestInfo_var &p)
{
  this->ptr_ = ::PortableInterceptor::RequestInfo::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::RequestInfo_out &
PortableInterceptor::RequestInfo_out::operator= (RequestInfo_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::RequestInfo_out::operator ::PortableInterceptor::RequestInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr &
PortableInterceptor::RequestInfo_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::RequestInfo::RequestInfo (void)
{}
  // destructor
  PortableInterceptor::RequestInfo::~RequestInfo (void)
  {}

  PortableInterceptor::RequestInfo_ptr PortableInterceptor::RequestInfo::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return RequestInfo::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::RequestInfo_ptr PortableInterceptor::RequestInfo::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return RequestInfo::_nil ();
    return
        ACE_reinterpret_cast
          (
            RequestInfo_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &RequestInfo::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo::_duplicate (RequestInfo_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::RequestInfo::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, RequestInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::RequestInfo::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/RequestInfo:1.0";
}

int PortableInterceptor::ClientRequestInfo::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::ClientRequestInfo_var
// *************************************************************

PortableInterceptor::ClientRequestInfo_var::ClientRequestInfo_var (void) // default constructor
  : ptr_ (ClientRequestInfo::_nil ())
{}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ClientRequestInfo_var::ClientRequestInfo_var (const ::PortableInterceptor::ClientRequestInfo_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (ClientRequestInfo::_duplicate (p.ptr ()))
{}

PortableInterceptor::ClientRequestInfo_var::~ClientRequestInfo_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::ClientRequestInfo_var &
PortableInterceptor::ClientRequestInfo_var::operator= (ClientRequestInfo_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ClientRequestInfo_var &
PortableInterceptor::ClientRequestInfo_var::operator= (const ::PortableInterceptor::ClientRequestInfo_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::ClientRequestInfo::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::ClientRequestInfo_var::operator const ::PortableInterceptor::ClientRequestInfo_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::ClientRequestInfo_var::operator ::PortableInterceptor::ClientRequestInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr &
PortableInterceptor::ClientRequestInfo_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr &
PortableInterceptor::ClientRequestInfo_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ClientRequestInfo::_nil ();
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::ClientRequestInfo_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::ClientRequestInfo::_nil ();
  return val;
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::tao_duplicate (PortableInterceptor::ClientRequestInfo_ptr p)
{
  return ::PortableInterceptor::ClientRequestInfo::_duplicate (p);
}

void
PortableInterceptor::ClientRequestInfo_var::tao_release (PortableInterceptor::ClientRequestInfo_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::tao_nil (void)
{
  return ::PortableInterceptor::ClientRequestInfo::_nil ();
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::ClientRequestInfo::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::ClientRequestInfo_var::tao_upcast (void *src)
{
  PortableInterceptor::ClientRequestInfo **tmp =
    ACE_static_cast (PortableInterceptor::ClientRequestInfo **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::ClientRequestInfo_out
// *************************************************************

PortableInterceptor::ClientRequestInfo_out::ClientRequestInfo_out (ClientRequestInfo_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::ClientRequestInfo::_nil ();
}

PortableInterceptor::ClientRequestInfo_out::ClientRequestInfo_out (ClientRequestInfo_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ClientRequestInfo::_nil ();
}

PortableInterceptor::ClientRequestInfo_out::ClientRequestInfo_out (const ::PortableInterceptor::ClientRequestInfo_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ClientRequestInfo_out &, p).ptr_)
{}

::PortableInterceptor::ClientRequestInfo_out &
PortableInterceptor::ClientRequestInfo_out::operator= (const ::PortableInterceptor::ClientRequestInfo_out &p)
{
  this->ptr_ = ACE_const_cast (ClientRequestInfo_out&, p).ptr_;
  return *this;
}

PortableInterceptor::ClientRequestInfo_out &
PortableInterceptor::ClientRequestInfo_out::operator= (const ::PortableInterceptor::ClientRequestInfo_var &p)
{
  this->ptr_ = ::PortableInterceptor::ClientRequestInfo::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::ClientRequestInfo_out &
PortableInterceptor::ClientRequestInfo_out::operator= (ClientRequestInfo_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ClientRequestInfo_out::operator ::PortableInterceptor::ClientRequestInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr &
PortableInterceptor::ClientRequestInfo_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::ClientRequestInfo::ClientRequestInfo (void)
{}
  // destructor
  PortableInterceptor::ClientRequestInfo::~ClientRequestInfo (void)
  {}

  PortableInterceptor::ClientRequestInfo_ptr PortableInterceptor::ClientRequestInfo::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return ClientRequestInfo::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::ClientRequestInfo_ptr PortableInterceptor::ClientRequestInfo::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return ClientRequestInfo::_nil ();
    return
        ACE_reinterpret_cast
          (
            ClientRequestInfo_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &ClientRequestInfo::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo::_duplicate (ClientRequestInfo_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::ClientRequestInfo::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, ClientRequestInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, RequestInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            PortableInterceptor::RequestInfo_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::ClientRequestInfo::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/ClientRequestInfo:1.0";
}

static const CORBA::Long _oc_PortableInterceptor_ServerId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65724964),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:PortableInterceptor/ServerId:1.0
  9,
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65724964),
  ACE_NTOHL (0x0),  // name = ServerId
  CORBA::tk_string,
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ServerId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ServerId),
    (char *) &_oc_PortableInterceptor_ServerId,
    0,
    sizeof (PortableInterceptor::ServerId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ServerId, &_tc_TAO_tc_PortableInterceptor_ServerId)
TAO_NAMESPACE_END

static const CORBA::Long _oc_PortableInterceptor_ORBId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x643a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:PortableInterceptor/ORBId:1.0
  6,
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x64000000),  // name = ORBId
  CORBA::tk_string,
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ORBId),
    (char *) &_oc_PortableInterceptor_ORBId,
    0,
    sizeof (PortableInterceptor::ORBId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ORBId, &_tc_TAO_tc_PortableInterceptor_ORBId)
TAO_NAMESPACE_END

static const CORBA::Long _oc_PortableInterceptor_AdapterName[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x41646170),
  ACE_NTOHL (0x7465724e),
  ACE_NTOHL (0x616d653a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableInterceptor/AdapterName:1.0
  12,
  ACE_NTOHL (0x41646170),
  ACE_NTOHL (0x7465724e),
  ACE_NTOHL (0x616d6500),  // name = AdapterName
  CORBA::tk_alias, // typecode kind for typedefs
  80, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    32,
    ACE_NTOHL (0x49444c3a),
    ACE_NTOHL (0x6f6d672e),
    ACE_NTOHL (0x6f72672f),
    ACE_NTOHL (0x434f5242),
    ACE_NTOHL (0x412f5374),
    ACE_NTOHL (0x72696e67),
    ACE_NTOHL (0x5365713a),
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/StringSeq:1.0
    10,
    ACE_NTOHL (0x53747269),
    ACE_NTOHL (0x6e675365),
    ACE_NTOHL (0x71000000),  // name = StringSeq
    CORBA::tk_sequence, // typecode kind
    16, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_string,
      0U, // string length
      0U,


};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_AdapterName (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_AdapterName),
    (char *) &_oc_PortableInterceptor_AdapterName,
    0,
    sizeof (PortableInterceptor::AdapterName)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_AdapterName, &_tc_TAO_tc_PortableInterceptor_AdapterName)
TAO_NAMESPACE_END

static const CORBA::Long _oc_PortableInterceptor_ObjectId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f626a65),
  ACE_NTOHL (0x63744964),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:PortableInterceptor/ObjectId:1.0
  9,
  ACE_NTOHL (0x4f626a65),
  ACE_NTOHL (0x63744964),
  ACE_NTOHL (0x0),  // name = ObjectId
  CORBA::tk_alias, // typecode kind for typedefs
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a),
    ACE_NTOHL (0x6f6d672e),
    ACE_NTOHL (0x6f72672f),
    ACE_NTOHL (0x434f5242),
    ACE_NTOHL (0x412f4f63),
    ACE_NTOHL (0x74657453),
    ACE_NTOHL (0x65713a31),
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
    9,
    ACE_NTOHL (0x4f637465),
    ACE_NTOHL (0x74536571),
    ACE_NTOHL (0x0),  // name = OctetSeq
    CORBA::tk_sequence, // typecode kind
    12, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_octet,

      0U,


};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ObjectId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ObjectId),
    (char *) &_oc_PortableInterceptor_ObjectId,
    0,
    sizeof (PortableInterceptor::ObjectId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ObjectId, &_tc_TAO_tc_PortableInterceptor_ObjectId)
TAO_NAMESPACE_END

int PortableInterceptor::ServerRequestInfo::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::ServerRequestInfo_var
// *************************************************************

PortableInterceptor::ServerRequestInfo_var::ServerRequestInfo_var (void) // default constructor
  : ptr_ (ServerRequestInfo::_nil ())
{}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ServerRequestInfo_var::ServerRequestInfo_var (const ::PortableInterceptor::ServerRequestInfo_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (ServerRequestInfo::_duplicate (p.ptr ()))
{}

PortableInterceptor::ServerRequestInfo_var::~ServerRequestInfo_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::ServerRequestInfo_var &
PortableInterceptor::ServerRequestInfo_var::operator= (ServerRequestInfo_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ServerRequestInfo_var &
PortableInterceptor::ServerRequestInfo_var::operator= (const ::PortableInterceptor::ServerRequestInfo_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::ServerRequestInfo::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::ServerRequestInfo_var::operator const ::PortableInterceptor::ServerRequestInfo_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::ServerRequestInfo_var::operator ::PortableInterceptor::ServerRequestInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr &
PortableInterceptor::ServerRequestInfo_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr &
PortableInterceptor::ServerRequestInfo_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ServerRequestInfo::_nil ();
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::ServerRequestInfo_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::ServerRequestInfo::_nil ();
  return val;
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::tao_duplicate (PortableInterceptor::ServerRequestInfo_ptr p)
{
  return ::PortableInterceptor::ServerRequestInfo::_duplicate (p);
}

void
PortableInterceptor::ServerRequestInfo_var::tao_release (PortableInterceptor::ServerRequestInfo_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::tao_nil (void)
{
  return ::PortableInterceptor::ServerRequestInfo::_nil ();
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::ServerRequestInfo::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::ServerRequestInfo_var::tao_upcast (void *src)
{
  PortableInterceptor::ServerRequestInfo **tmp =
    ACE_static_cast (PortableInterceptor::ServerRequestInfo **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::ServerRequestInfo_out
// *************************************************************

PortableInterceptor::ServerRequestInfo_out::ServerRequestInfo_out (ServerRequestInfo_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::ServerRequestInfo::_nil ();
}

PortableInterceptor::ServerRequestInfo_out::ServerRequestInfo_out (ServerRequestInfo_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ServerRequestInfo::_nil ();
}

PortableInterceptor::ServerRequestInfo_out::ServerRequestInfo_out (const ::PortableInterceptor::ServerRequestInfo_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ServerRequestInfo_out &, p).ptr_)
{}

::PortableInterceptor::ServerRequestInfo_out &
PortableInterceptor::ServerRequestInfo_out::operator= (const ::PortableInterceptor::ServerRequestInfo_out &p)
{
  this->ptr_ = ACE_const_cast (ServerRequestInfo_out&, p).ptr_;
  return *this;
}

PortableInterceptor::ServerRequestInfo_out &
PortableInterceptor::ServerRequestInfo_out::operator= (const ::PortableInterceptor::ServerRequestInfo_var &p)
{
  this->ptr_ = ::PortableInterceptor::ServerRequestInfo::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::ServerRequestInfo_out &
PortableInterceptor::ServerRequestInfo_out::operator= (ServerRequestInfo_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ServerRequestInfo_out::operator ::PortableInterceptor::ServerRequestInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr &
PortableInterceptor::ServerRequestInfo_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::ServerRequestInfo::ServerRequestInfo (void)
{}
  // destructor
  PortableInterceptor::ServerRequestInfo::~ServerRequestInfo (void)
  {}

  PortableInterceptor::ServerRequestInfo_ptr PortableInterceptor::ServerRequestInfo::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return ServerRequestInfo::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::ServerRequestInfo_ptr PortableInterceptor::ServerRequestInfo::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return ServerRequestInfo::_nil ();
    return
        ACE_reinterpret_cast
          (
            ServerRequestInfo_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &ServerRequestInfo::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo::_duplicate (ServerRequestInfo_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::ServerRequestInfo::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, ServerRequestInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, RequestInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            PortableInterceptor::RequestInfo_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::ServerRequestInfo::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/ServerRequestInfo:1.0";
}

int PortableInterceptor::ClientRequestInterceptor::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::ClientRequestInterceptor_var
// *************************************************************

PortableInterceptor::ClientRequestInterceptor_var::ClientRequestInterceptor_var (void) // default constructor
  : ptr_ (ClientRequestInterceptor::_nil ())
{}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ClientRequestInterceptor_var::ClientRequestInterceptor_var (const ::PortableInterceptor::ClientRequestInterceptor_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (ClientRequestInterceptor::_duplicate (p.ptr ()))
{}

PortableInterceptor::ClientRequestInterceptor_var::~ClientRequestInterceptor_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::ClientRequestInterceptor_var &
PortableInterceptor::ClientRequestInterceptor_var::operator= (ClientRequestInterceptor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ClientRequestInterceptor_var &
PortableInterceptor::ClientRequestInterceptor_var::operator= (const ::PortableInterceptor::ClientRequestInterceptor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::ClientRequestInterceptor::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::ClientRequestInterceptor_var::operator const ::PortableInterceptor::ClientRequestInterceptor_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::ClientRequestInterceptor_var::operator ::PortableInterceptor::ClientRequestInterceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr &
PortableInterceptor::ClientRequestInterceptor_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr &
PortableInterceptor::ClientRequestInterceptor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ClientRequestInterceptor::_nil ();
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::ClientRequestInterceptor_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::ClientRequestInterceptor::_nil ();
  return val;
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::tao_duplicate (PortableInterceptor::ClientRequestInterceptor_ptr p)
{
  return ::PortableInterceptor::ClientRequestInterceptor::_duplicate (p);
}

void
PortableInterceptor::ClientRequestInterceptor_var::tao_release (PortableInterceptor::ClientRequestInterceptor_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::tao_nil (void)
{
  return ::PortableInterceptor::ClientRequestInterceptor::_nil ();
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::ClientRequestInterceptor::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::ClientRequestInterceptor_var::tao_upcast (void *src)
{
  PortableInterceptor::ClientRequestInterceptor **tmp =
    ACE_static_cast (PortableInterceptor::ClientRequestInterceptor **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::ClientRequestInterceptor_out
// *************************************************************

PortableInterceptor::ClientRequestInterceptor_out::ClientRequestInterceptor_out (ClientRequestInterceptor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::ClientRequestInterceptor::_nil ();
}

PortableInterceptor::ClientRequestInterceptor_out::ClientRequestInterceptor_out (ClientRequestInterceptor_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ClientRequestInterceptor::_nil ();
}

PortableInterceptor::ClientRequestInterceptor_out::ClientRequestInterceptor_out (const ::PortableInterceptor::ClientRequestInterceptor_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ClientRequestInterceptor_out &, p).ptr_)
{}

::PortableInterceptor::ClientRequestInterceptor_out &
PortableInterceptor::ClientRequestInterceptor_out::operator= (const ::PortableInterceptor::ClientRequestInterceptor_out &p)
{
  this->ptr_ = ACE_const_cast (ClientRequestInterceptor_out&, p).ptr_;
  return *this;
}

PortableInterceptor::ClientRequestInterceptor_out &
PortableInterceptor::ClientRequestInterceptor_out::operator= (const ::PortableInterceptor::ClientRequestInterceptor_var &p)
{
  this->ptr_ = ::PortableInterceptor::ClientRequestInterceptor::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::ClientRequestInterceptor_out &
PortableInterceptor::ClientRequestInterceptor_out::operator= (ClientRequestInterceptor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ClientRequestInterceptor_out::operator ::PortableInterceptor::ClientRequestInterceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr &
PortableInterceptor::ClientRequestInterceptor_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::ClientRequestInterceptor::ClientRequestInterceptor (void)
{}
  // destructor
  PortableInterceptor::ClientRequestInterceptor::~ClientRequestInterceptor (void)
  {}

  PortableInterceptor::ClientRequestInterceptor_ptr PortableInterceptor::ClientRequestInterceptor::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return ClientRequestInterceptor::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::ClientRequestInterceptor_ptr PortableInterceptor::ClientRequestInterceptor::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return ClientRequestInterceptor::_nil ();
    return
        ACE_reinterpret_cast
          (
            ClientRequestInterceptor_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &ClientRequestInterceptor::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor::_duplicate (ClientRequestInterceptor_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::ClientRequestInterceptor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, ClientRequestInterceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            PortableInterceptor::Interceptor_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::ClientRequestInterceptor::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/ClientRequestInterceptor:1.0";
}

int PortableInterceptor::ServerRequestInterceptor::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::ServerRequestInterceptor_var
// *************************************************************

PortableInterceptor::ServerRequestInterceptor_var::ServerRequestInterceptor_var (void) // default constructor
  : ptr_ (ServerRequestInterceptor::_nil ())
{}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ServerRequestInterceptor_var::ServerRequestInterceptor_var (const ::PortableInterceptor::ServerRequestInterceptor_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (ServerRequestInterceptor::_duplicate (p.ptr ()))
{}

PortableInterceptor::ServerRequestInterceptor_var::~ServerRequestInterceptor_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::ServerRequestInterceptor_var &
PortableInterceptor::ServerRequestInterceptor_var::operator= (ServerRequestInterceptor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ServerRequestInterceptor_var &
PortableInterceptor::ServerRequestInterceptor_var::operator= (const ::PortableInterceptor::ServerRequestInterceptor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::ServerRequestInterceptor::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::ServerRequestInterceptor_var::operator const ::PortableInterceptor::ServerRequestInterceptor_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::ServerRequestInterceptor_var::operator ::PortableInterceptor::ServerRequestInterceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr &
PortableInterceptor::ServerRequestInterceptor_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr &
PortableInterceptor::ServerRequestInterceptor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ServerRequestInterceptor::_nil ();
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::ServerRequestInterceptor_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::ServerRequestInterceptor::_nil ();
  return val;
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::tao_duplicate (PortableInterceptor::ServerRequestInterceptor_ptr p)
{
  return ::PortableInterceptor::ServerRequestInterceptor::_duplicate (p);
}

void
PortableInterceptor::ServerRequestInterceptor_var::tao_release (PortableInterceptor::ServerRequestInterceptor_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::tao_nil (void)
{
  return ::PortableInterceptor::ServerRequestInterceptor::_nil ();
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::ServerRequestInterceptor::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::ServerRequestInterceptor_var::tao_upcast (void *src)
{
  PortableInterceptor::ServerRequestInterceptor **tmp =
    ACE_static_cast (PortableInterceptor::ServerRequestInterceptor **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::ServerRequestInterceptor_out
// *************************************************************

PortableInterceptor::ServerRequestInterceptor_out::ServerRequestInterceptor_out (ServerRequestInterceptor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::ServerRequestInterceptor::_nil ();
}

PortableInterceptor::ServerRequestInterceptor_out::ServerRequestInterceptor_out (ServerRequestInterceptor_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ServerRequestInterceptor::_nil ();
}

PortableInterceptor::ServerRequestInterceptor_out::ServerRequestInterceptor_out (const ::PortableInterceptor::ServerRequestInterceptor_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ServerRequestInterceptor_out &, p).ptr_)
{}

::PortableInterceptor::ServerRequestInterceptor_out &
PortableInterceptor::ServerRequestInterceptor_out::operator= (const ::PortableInterceptor::ServerRequestInterceptor_out &p)
{
  this->ptr_ = ACE_const_cast (ServerRequestInterceptor_out&, p).ptr_;
  return *this;
}

PortableInterceptor::ServerRequestInterceptor_out &
PortableInterceptor::ServerRequestInterceptor_out::operator= (const ::PortableInterceptor::ServerRequestInterceptor_var &p)
{
  this->ptr_ = ::PortableInterceptor::ServerRequestInterceptor::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::ServerRequestInterceptor_out &
PortableInterceptor::ServerRequestInterceptor_out::operator= (ServerRequestInterceptor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ServerRequestInterceptor_out::operator ::PortableInterceptor::ServerRequestInterceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr &
PortableInterceptor::ServerRequestInterceptor_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::ServerRequestInterceptor::ServerRequestInterceptor (void)
{}
  // destructor
  PortableInterceptor::ServerRequestInterceptor::~ServerRequestInterceptor (void)
  {}

  PortableInterceptor::ServerRequestInterceptor_ptr PortableInterceptor::ServerRequestInterceptor::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return ServerRequestInterceptor::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::ServerRequestInterceptor_ptr PortableInterceptor::ServerRequestInterceptor::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return ServerRequestInterceptor::_nil ();
    return
        ACE_reinterpret_cast
          (
            ServerRequestInterceptor_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &ServerRequestInterceptor::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor::_duplicate (ServerRequestInterceptor_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::ServerRequestInterceptor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, ServerRequestInterceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            PortableInterceptor::Interceptor_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::ServerRequestInterceptor::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/ServerRequestInterceptor:1.0";
}

// *************************************************************
// Operations for class PortableInterceptor::ObjectReferenceFactory_var
// *************************************************************

PortableInterceptor::ObjectReferenceFactory_var::ObjectReferenceFactory_var (void) // default constructor
  : ptr_ (0)
{}

PortableInterceptor::ObjectReferenceFactory_var::ObjectReferenceFactory_var (ObjectReferenceFactory* p)
  : ptr_ (p)
{}

PortableInterceptor::ObjectReferenceFactory_var::ObjectReferenceFactory_var (const ObjectReferenceFactory* p)
  : ptr_ (ACE_const_cast(ObjectReferenceFactory*, p))
{}

PortableInterceptor::ObjectReferenceFactory*
PortableInterceptor::ObjectReferenceFactory_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory_var::ObjectReferenceFactory_var (const ObjectReferenceFactory_var &p) // copy constructor
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

PortableInterceptor::ObjectReferenceFactory_var::~ObjectReferenceFactory_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

PortableInterceptor::ObjectReferenceFactory_var &
PortableInterceptor::ObjectReferenceFactory_var::operator= (ObjectReferenceFactory* p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ObjectReferenceFactory_var &
PortableInterceptor::ObjectReferenceFactory_var::operator= (const ObjectReferenceFactory_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    ObjectReferenceFactory* tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  return *this;
}

PortableInterceptor::ObjectReferenceFactory_var::operator const PortableInterceptor::ObjectReferenceFactory* () const // cast
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory_var::operator PortableInterceptor::ObjectReferenceFactory* () // cast
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory*
PortableInterceptor::ObjectReferenceFactory_var::operator-> (void) const
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory*
PortableInterceptor::ObjectReferenceFactory_var::in (void) const
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory* &
PortableInterceptor::ObjectReferenceFactory_var::inout (void)
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory* &
PortableInterceptor::ObjectReferenceFactory_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory*
PortableInterceptor::ObjectReferenceFactory_var::_retn (void)
{
  // yield ownership of managed obj reference
  ObjectReferenceFactory* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

// *************************************************************
// Operations for class PortableInterceptor::ObjectReferenceFactory_out
// *************************************************************

PortableInterceptor::ObjectReferenceFactory_out::ObjectReferenceFactory_out (ObjectReferenceFactory* &p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

PortableInterceptor::ObjectReferenceFactory_out::ObjectReferenceFactory_out (ObjectReferenceFactory_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

PortableInterceptor::ObjectReferenceFactory_out::ObjectReferenceFactory_out (const ObjectReferenceFactory_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ObjectReferenceFactory_out&,p).ptr_)
{}

PortableInterceptor::ObjectReferenceFactory_out &
PortableInterceptor::ObjectReferenceFactory_out::operator= (const ObjectReferenceFactory_out &p)
{
  this->ptr_ = ACE_const_cast (ObjectReferenceFactory_out&,p).ptr_;
  return *this;
}

PortableInterceptor::ObjectReferenceFactory_out &
PortableInterceptor::ObjectReferenceFactory_out::operator= (const ObjectReferenceFactory_var &p)
{
  ObjectReferenceFactory* tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

PortableInterceptor::ObjectReferenceFactory_out &
PortableInterceptor::ObjectReferenceFactory_out::operator= (ObjectReferenceFactory* p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ObjectReferenceFactory_out::operator PortableInterceptor::ObjectReferenceFactory* &() // cast
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory* &
PortableInterceptor::ObjectReferenceFactory_out::ptr (void) // ptr
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory*
PortableInterceptor::ObjectReferenceFactory_out::operator-> (void)
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceFactory* PortableInterceptor::ObjectReferenceFactory::_downcast (CORBA::ValueBase* v)
{
  if (v == 0) return 0;
  return (ObjectReferenceFactory* ) v->_tao_obv_narrow ((ptr_arith_t) &_downcast);
}

const char* PortableInterceptor::ObjectReferenceFactory::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void* PortableInterceptor::ObjectReferenceFactory::_tao_obv_narrow (ptr_arith_t type_id)
{
  if (type_id == (ptr_arith_t) &_downcast)
    return this;
  void *rval = 0;
  return rval;
}

CORBA::Boolean PortableInterceptor::ObjectReferenceFactory::_tao_marshal_v (TAO_OutputCDR &)
{
  return 0;
}


CORBA::Boolean PortableInterceptor::ObjectReferenceFactory::_tao_unmarshal_v (TAO_InputCDR &)
{
  return 0;
}

CORBA::Boolean PortableInterceptor::ObjectReferenceFactory::_tao_unmarshal (TAO_InputCDR &strm, ObjectReferenceFactory *&new_object)
{
  CORBA::Boolean retval = 1;
  CORBA::ValueBase *base;   // %! should be a _var
  CORBA::ValueFactory_ptr factory;   // %! should be a _var
  if (!CORBA::ValueBase::_tao_unmarshal_pre (strm, factory, base,
          ObjectReferenceFactory::_tao_obv_static_repository_id ()) )
    {
      return 0;
    }
  if (factory != 0)
    {
      base = factory->create_for_unmarshal ();
      factory->_remove_ref ();
      if (base == 0)  return 0;  // %! except.?
      //%! ACE_DEBUG ((LM_DEBUG, "PortableInterceptor::ObjectReferenceFactory::_tao_unmarshal %s\n", base->_tao_obv_repository_id () ));
      retval = base->_tao_unmarshal_v (strm);
      //%! ACE_DEBUG ((LM_DEBUG, "PortableInterceptor::ObjectReferenceFactory::_tao_unmarshal retval unmarshal_v is %d\n", retval));
      if (!retval) return 0;
    }
  // Now base must be null or point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = ObjectReferenceFactory::_downcast (base);
  // %! unmarshal_post
  return 1;
}

// *************************************************************
// Operations for class PortableInterceptor::ObjectReferenceTemplate_var
// *************************************************************

PortableInterceptor::ObjectReferenceTemplate_var::ObjectReferenceTemplate_var (void) // default constructor
  : ptr_ (0)
{}

PortableInterceptor::ObjectReferenceTemplate_var::ObjectReferenceTemplate_var (ObjectReferenceTemplate* p)
  : ptr_ (p)
{}

PortableInterceptor::ObjectReferenceTemplate_var::ObjectReferenceTemplate_var (const ObjectReferenceTemplate* p)
  : ptr_ (ACE_const_cast(ObjectReferenceTemplate*, p))
{}

PortableInterceptor::ObjectReferenceTemplate*
PortableInterceptor::ObjectReferenceTemplate_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate_var::ObjectReferenceTemplate_var (const ObjectReferenceTemplate_var &p) // copy constructor
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

PortableInterceptor::ObjectReferenceTemplate_var::~ObjectReferenceTemplate_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

PortableInterceptor::ObjectReferenceTemplate_var &
PortableInterceptor::ObjectReferenceTemplate_var::operator= (ObjectReferenceTemplate* p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ObjectReferenceTemplate_var &
PortableInterceptor::ObjectReferenceTemplate_var::operator= (const ObjectReferenceTemplate_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    ObjectReferenceTemplate* tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  return *this;
}

PortableInterceptor::ObjectReferenceTemplate_var::operator const PortableInterceptor::ObjectReferenceTemplate* () const // cast
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate_var::operator PortableInterceptor::ObjectReferenceTemplate* () // cast
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate*
PortableInterceptor::ObjectReferenceTemplate_var::operator-> (void) const
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate*
PortableInterceptor::ObjectReferenceTemplate_var::in (void) const
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate* &
PortableInterceptor::ObjectReferenceTemplate_var::inout (void)
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate* &
PortableInterceptor::ObjectReferenceTemplate_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate*
PortableInterceptor::ObjectReferenceTemplate_var::_retn (void)
{
  // yield ownership of managed obj reference
  ObjectReferenceTemplate* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

// *************************************************************
// Operations for class PortableInterceptor::ObjectReferenceTemplate_out
// *************************************************************

PortableInterceptor::ObjectReferenceTemplate_out::ObjectReferenceTemplate_out (ObjectReferenceTemplate* &p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

PortableInterceptor::ObjectReferenceTemplate_out::ObjectReferenceTemplate_out (ObjectReferenceTemplate_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

PortableInterceptor::ObjectReferenceTemplate_out::ObjectReferenceTemplate_out (const ObjectReferenceTemplate_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ObjectReferenceTemplate_out&,p).ptr_)
{}

PortableInterceptor::ObjectReferenceTemplate_out &
PortableInterceptor::ObjectReferenceTemplate_out::operator= (const ObjectReferenceTemplate_out &p)
{
  this->ptr_ = ACE_const_cast (ObjectReferenceTemplate_out&,p).ptr_;
  return *this;
}

PortableInterceptor::ObjectReferenceTemplate_out &
PortableInterceptor::ObjectReferenceTemplate_out::operator= (const ObjectReferenceTemplate_var &p)
{
  ObjectReferenceTemplate* tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

PortableInterceptor::ObjectReferenceTemplate_out &
PortableInterceptor::ObjectReferenceTemplate_out::operator= (ObjectReferenceTemplate* p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ObjectReferenceTemplate_out::operator PortableInterceptor::ObjectReferenceTemplate* &() // cast
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate* &
PortableInterceptor::ObjectReferenceTemplate_out::ptr (void) // ptr
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate*
PortableInterceptor::ObjectReferenceTemplate_out::operator-> (void)
{
  return this->ptr_;
}

PortableInterceptor::ObjectReferenceTemplate* PortableInterceptor::ObjectReferenceTemplate::_downcast (CORBA::ValueBase* v)
{
  if (v == 0) return 0;
  return (ObjectReferenceTemplate* ) v->_tao_obv_narrow ((ptr_arith_t) &_downcast);
}

const char* PortableInterceptor::ObjectReferenceTemplate::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void* PortableInterceptor::ObjectReferenceTemplate::_tao_obv_narrow (ptr_arith_t type_id)
{
  if (type_id == (ptr_arith_t) &_downcast)
    return this;
  void *rval = 0;
  if (rval == 0)
    rval = ACE_NESTED_CLASS (PortableInterceptor,ObjectReferenceFactory)::_tao_obv_narrow (type_id);
  return rval;
}

CORBA::Boolean PortableInterceptor::ObjectReferenceTemplate::_tao_marshal_v (TAO_OutputCDR &)
{
  return 0;
}

CORBA::Boolean PortableInterceptor::ObjectReferenceTemplate::_tao_unmarshal_v (TAO_InputCDR &)
{
  return 0;
}

CORBA::Boolean PortableInterceptor::ObjectReferenceTemplate::_tao_unmarshal (TAO_InputCDR &strm, ObjectReferenceTemplate *&new_object)
{
  CORBA::Boolean retval = 1;
  CORBA::ValueBase *base;   // %! should be a _var
  CORBA::ValueFactory_ptr factory;   // %! should be a _var
  if (!CORBA::ValueBase::_tao_unmarshal_pre (strm, factory, base,
          ObjectReferenceTemplate::_tao_obv_static_repository_id ()) )
    {
      return 0;
    }
  if (factory != 0)
    {
      base = factory->create_for_unmarshal ();
      factory->_remove_ref ();
      if (base == 0)  return 0;  // %! except.?
      //%! ACE_DEBUG ((LM_DEBUG, "PortableInterceptor::ObjectReferenceTemplate::_tao_unmarshal %s\n", base->_tao_obv_repository_id () ));
      retval = base->_tao_unmarshal_v (strm);
      //%! ACE_DEBUG ((LM_DEBUG, "PortableInterceptor::ObjectReferenceTemplate::_tao_unmarshal retval unmarshal_v is %d\n", retval));
      if (!retval) return 0;
    }
  // Now base must be null or point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = ObjectReferenceTemplate::_downcast (base);
  // %! unmarshal_post
  return 1;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CS_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CS_

// The Base_Sequence functions, please see tao/Sequence.h
void
PortableInterceptor::_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq::_allocate_buffer (CORBA::ULong length)
{
  PortableInterceptor::ObjectReferenceTemplate **tmp = 0;
  tmp = _TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq::allocbuf (length);

  if (this->buffer_ != 0)
  {
    PortableInterceptor::ObjectReferenceTemplate **old = ACE_reinterpret_cast (PortableInterceptor::ObjectReferenceTemplate**, this->buffer_);
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        if (!this->release_)
          {
            if (old[i] != 0)
              old[i]->_add_ref ();
            tmp[i] = old[i];
          }
        else
          {
            tmp[i] = old[i];
          }
      }

    if (this->release_)
      {
        delete[] old;
      }
  }
  this->buffer_ = tmp;
}

void
PortableInterceptor::_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    return;
  PortableInterceptor::ObjectReferenceTemplate **tmp = ACE_reinterpret_cast (PortableInterceptor::ObjectReferenceTemplate**, this->buffer_);

  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      if (tmp[i] != 0)
        tmp[i]->_remove_ref ();
      tmp[i] = 0;
    }

  _TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq::freebuf (tmp);
  this->buffer_ = 0;
}

PortableInterceptor::_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq::~_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq (void)
{
  this->_deallocate_buffer ();
}

void
PortableInterceptor::_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
{
  PortableInterceptor::ObjectReferenceTemplate **tmp = ACE_reinterpret_cast (PortableInterceptor::ObjectReferenceTemplate**, this->buffer_);

  for (CORBA::ULong i = nl; i < ol; ++i)
    {
      if (tmp[i] != 0)
        tmp[i]->_remove_ref ();
      tmp[i] = 0;
    }
}


#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CS_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CS_

// *************************************************************
// PortableInterceptor::ObjectReferenceTemplateSeq
// *************************************************************

PortableInterceptor::ObjectReferenceTemplateSeq::ObjectReferenceTemplateSeq (void)
{}
PortableInterceptor::ObjectReferenceTemplateSeq::ObjectReferenceTemplateSeq (CORBA::ULong max) // uses max size
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Valuetype_Sequence<PortableInterceptor::ObjectReferenceTemplate,PortableInterceptor::ObjectReferenceTemplate_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max)
{}
PortableInterceptor::ObjectReferenceTemplateSeq::ObjectReferenceTemplateSeq (CORBA::ULong max, CORBA::ULong length, PortableInterceptor::ObjectReferenceTemplate_ptr *buffer, CORBA::Boolean release)
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Valuetype_Sequence<PortableInterceptor::ObjectReferenceTemplate,PortableInterceptor::ObjectReferenceTemplate_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max, length, buffer, release)
{}
PortableInterceptor::ObjectReferenceTemplateSeq::ObjectReferenceTemplateSeq (const ObjectReferenceTemplateSeq &seq) // copy ctor
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Valuetype_Sequence_PortableInterceptor_ObjectReferenceTemplateSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Valuetype_Sequence<PortableInterceptor::ObjectReferenceTemplate,PortableInterceptor::ObjectReferenceTemplate_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (seq)
{}
PortableInterceptor::ObjectReferenceTemplateSeq::~ObjectReferenceTemplateSeq (void) // dtor
{}
void PortableInterceptor::ObjectReferenceTemplateSeq::_tao_any_destructor (void *_tao_void_pointer)
{
  ObjectReferenceTemplateSeq *tmp = ACE_static_cast (ObjectReferenceTemplateSeq*, _tao_void_pointer);
  delete tmp;
}


#endif /* end #if !defined */

static const CORBA::Long _oc_PortableInterceptor_ObjectReferenceTemplateSeq[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  55,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f626a65),
  ACE_NTOHL (0x63745265),
  ACE_NTOHL (0x66657265),
  ACE_NTOHL (0x6e636554),
  ACE_NTOHL (0x656d706c),
  ACE_NTOHL (0x61746553),
  ACE_NTOHL (0x65713a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:PortableInterceptor/ObjectReferenceTemplateSeq:1.0
  27,
  ACE_NTOHL (0x4f626a65),
  ACE_NTOHL (0x63745265),
  ACE_NTOHL (0x66657265),
  ACE_NTOHL (0x6e636554),
  ACE_NTOHL (0x656d706c),
  ACE_NTOHL (0x61746553),
  ACE_NTOHL (0x65710000),  // name = ObjectReferenceTemplateSeq
  CORBA::tk_sequence, // typecode kind
  8, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ObjectReferenceTemplateSeq (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ObjectReferenceTemplateSeq),
    (char *) &_oc_PortableInterceptor_ObjectReferenceTemplateSeq,
    0,
    sizeof (PortableInterceptor::ObjectReferenceTemplateSeq)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ObjectReferenceTemplateSeq, &_tc_TAO_tc_PortableInterceptor_ObjectReferenceTemplateSeq)
TAO_NAMESPACE_END

static const CORBA::Long _oc_PortableInterceptor_AdapterManagerId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x41646170),
  ACE_NTOHL (0x7465724d),
  ACE_NTOHL (0x616e6167),
  ACE_NTOHL (0x65724964),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:PortableInterceptor/AdapterManagerId:1.0
  17,
  ACE_NTOHL (0x41646170),
  ACE_NTOHL (0x7465724d),
  ACE_NTOHL (0x616e6167),
  ACE_NTOHL (0x65724964),
  ACE_NTOHL (0x0),  // name = AdapterManagerId
  CORBA::tk_long,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_AdapterManagerId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_AdapterManagerId),
    (char *) &_oc_PortableInterceptor_AdapterManagerId,
    0,
    sizeof (PortableInterceptor::AdapterManagerId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_AdapterManagerId, &_tc_TAO_tc_PortableInterceptor_AdapterManagerId)
TAO_NAMESPACE_END

static const CORBA::Long _oc_PortableInterceptor_AdapterState[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x41646170),
  ACE_NTOHL (0x74657253),
  ACE_NTOHL (0x74617465),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:PortableInterceptor/AdapterState:1.0
  13,
  ACE_NTOHL (0x41646170),
  ACE_NTOHL (0x74657253),
  ACE_NTOHL (0x74617465),
  ACE_NTOHL (0x0),  // name = AdapterState
  CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_AdapterState (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_AdapterState),
    (char *) &_oc_PortableInterceptor_AdapterState,
    0,
    sizeof (PortableInterceptor::AdapterState)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_AdapterState, &_tc_TAO_tc_PortableInterceptor_AdapterState)
TAO_NAMESPACE_END

TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, HOLDING, 0)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, ACTIVE, 1)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, DISCARDING, 2)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, INACTIVE, 3)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::Short)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (const CORBA::Short, NON_EXISTENT, 4)
TAO_NAMESPACE_END

int PortableInterceptor::IORInfo::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::IORInfo_var
// *************************************************************

PortableInterceptor::IORInfo_var::IORInfo_var (void) // default constructor
  : ptr_ (IORInfo::_nil ())
{}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::IORInfo_var::IORInfo_var (const ::PortableInterceptor::IORInfo_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (IORInfo::_duplicate (p.ptr ()))
{}

PortableInterceptor::IORInfo_var::~IORInfo_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::IORInfo_var &
PortableInterceptor::IORInfo_var::operator= (IORInfo_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::IORInfo_var &
PortableInterceptor::IORInfo_var::operator= (const ::PortableInterceptor::IORInfo_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::IORInfo::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::IORInfo_var::operator const ::PortableInterceptor::IORInfo_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::IORInfo_var::operator ::PortableInterceptor::IORInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr &
PortableInterceptor::IORInfo_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr &
PortableInterceptor::IORInfo_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::IORInfo::_nil ();
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::IORInfo_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::IORInfo::_nil ();
  return val;
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::tao_duplicate (PortableInterceptor::IORInfo_ptr p)
{
  return ::PortableInterceptor::IORInfo::_duplicate (p);
}

void
PortableInterceptor::IORInfo_var::tao_release (PortableInterceptor::IORInfo_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::tao_nil (void)
{
  return ::PortableInterceptor::IORInfo::_nil ();
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::IORInfo::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::IORInfo_var::tao_upcast (void *src)
{
  PortableInterceptor::IORInfo **tmp =
    ACE_static_cast (PortableInterceptor::IORInfo **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::IORInfo_out
// *************************************************************

PortableInterceptor::IORInfo_out::IORInfo_out (IORInfo_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::IORInfo::_nil ();
}

PortableInterceptor::IORInfo_out::IORInfo_out (IORInfo_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::IORInfo::_nil ();
}

PortableInterceptor::IORInfo_out::IORInfo_out (const ::PortableInterceptor::IORInfo_out &p) // copy constructor
  : ptr_ (ACE_const_cast (IORInfo_out &, p).ptr_)
{}

::PortableInterceptor::IORInfo_out &
PortableInterceptor::IORInfo_out::operator= (const ::PortableInterceptor::IORInfo_out &p)
{
  this->ptr_ = ACE_const_cast (IORInfo_out&, p).ptr_;
  return *this;
}

PortableInterceptor::IORInfo_out &
PortableInterceptor::IORInfo_out::operator= (const ::PortableInterceptor::IORInfo_var &p)
{
  this->ptr_ = ::PortableInterceptor::IORInfo::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::IORInfo_out &
PortableInterceptor::IORInfo_out::operator= (IORInfo_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::IORInfo_out::operator ::PortableInterceptor::IORInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr &
PortableInterceptor::IORInfo_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::IORInfo::IORInfo (void)
{}
  // destructor
  PortableInterceptor::IORInfo::~IORInfo (void)
  {}

  PortableInterceptor::IORInfo_ptr PortableInterceptor::IORInfo::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return IORInfo::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::IORInfo_ptr PortableInterceptor::IORInfo::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return IORInfo::_nil ();
    return
        ACE_reinterpret_cast
          (
            IORInfo_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &IORInfo::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::IORInfo_ptr
PortableInterceptor::IORInfo::_duplicate (IORInfo_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::IORInfo::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, IORInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::IORInfo::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/IORInfo:1.0";
}

int PortableInterceptor::IORInterceptor::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::IORInterceptor_var
// *************************************************************

PortableInterceptor::IORInterceptor_var::IORInterceptor_var (void) // default constructor
  : ptr_ (IORInterceptor::_nil ())
{}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::IORInterceptor_var::IORInterceptor_var (const ::PortableInterceptor::IORInterceptor_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (IORInterceptor::_duplicate (p.ptr ()))
{}

PortableInterceptor::IORInterceptor_var::~IORInterceptor_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::IORInterceptor_var &
PortableInterceptor::IORInterceptor_var::operator= (IORInterceptor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::IORInterceptor_var &
PortableInterceptor::IORInterceptor_var::operator= (const ::PortableInterceptor::IORInterceptor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::IORInterceptor::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::IORInterceptor_var::operator const ::PortableInterceptor::IORInterceptor_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::IORInterceptor_var::operator ::PortableInterceptor::IORInterceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr &
PortableInterceptor::IORInterceptor_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr &
PortableInterceptor::IORInterceptor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::IORInterceptor::_nil ();
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::IORInterceptor_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::IORInterceptor::_nil ();
  return val;
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::tao_duplicate (PortableInterceptor::IORInterceptor_ptr p)
{
  return ::PortableInterceptor::IORInterceptor::_duplicate (p);
}

void
PortableInterceptor::IORInterceptor_var::tao_release (PortableInterceptor::IORInterceptor_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::tao_nil (void)
{
  return ::PortableInterceptor::IORInterceptor::_nil ();
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::IORInterceptor::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::IORInterceptor_var::tao_upcast (void *src)
{
  PortableInterceptor::IORInterceptor **tmp =
    ACE_static_cast (PortableInterceptor::IORInterceptor **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::IORInterceptor_out
// *************************************************************

PortableInterceptor::IORInterceptor_out::IORInterceptor_out (IORInterceptor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::IORInterceptor::_nil ();
}

PortableInterceptor::IORInterceptor_out::IORInterceptor_out (IORInterceptor_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::IORInterceptor::_nil ();
}

PortableInterceptor::IORInterceptor_out::IORInterceptor_out (const ::PortableInterceptor::IORInterceptor_out &p) // copy constructor
  : ptr_ (ACE_const_cast (IORInterceptor_out &, p).ptr_)
{}

::PortableInterceptor::IORInterceptor_out &
PortableInterceptor::IORInterceptor_out::operator= (const ::PortableInterceptor::IORInterceptor_out &p)
{
  this->ptr_ = ACE_const_cast (IORInterceptor_out&, p).ptr_;
  return *this;
}

PortableInterceptor::IORInterceptor_out &
PortableInterceptor::IORInterceptor_out::operator= (const ::PortableInterceptor::IORInterceptor_var &p)
{
  this->ptr_ = ::PortableInterceptor::IORInterceptor::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::IORInterceptor_out &
PortableInterceptor::IORInterceptor_out::operator= (IORInterceptor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::IORInterceptor_out::operator ::PortableInterceptor::IORInterceptor_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr &
PortableInterceptor::IORInterceptor_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::IORInterceptor::IORInterceptor (void)
{}
  // destructor
  PortableInterceptor::IORInterceptor::~IORInterceptor (void)
  {}

  PortableInterceptor::IORInterceptor_ptr PortableInterceptor::IORInterceptor::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return IORInterceptor::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::IORInterceptor_ptr PortableInterceptor::IORInterceptor::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return IORInterceptor::_nil ();
    return
        ACE_reinterpret_cast
          (
            IORInterceptor_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &IORInterceptor::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::IORInterceptor_ptr
PortableInterceptor::IORInterceptor::_duplicate (IORInterceptor_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::IORInterceptor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, IORInterceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            PortableInterceptor::Interceptor_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::IORInterceptor::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/IORInterceptor:1.0";
}

int PortableInterceptor::PolicyFactory::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::PolicyFactory_var
// *************************************************************

PortableInterceptor::PolicyFactory_var::PolicyFactory_var (void) // default constructor
  : ptr_ (PolicyFactory::_nil ())
{}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::PolicyFactory_var::PolicyFactory_var (const ::PortableInterceptor::PolicyFactory_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (PolicyFactory::_duplicate (p.ptr ()))
{}

PortableInterceptor::PolicyFactory_var::~PolicyFactory_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::PolicyFactory_var &
PortableInterceptor::PolicyFactory_var::operator= (PolicyFactory_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::PolicyFactory_var &
PortableInterceptor::PolicyFactory_var::operator= (const ::PortableInterceptor::PolicyFactory_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::PolicyFactory::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::PolicyFactory_var::operator const ::PortableInterceptor::PolicyFactory_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::PolicyFactory_var::operator ::PortableInterceptor::PolicyFactory_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr &
PortableInterceptor::PolicyFactory_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr &
PortableInterceptor::PolicyFactory_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::PolicyFactory::_nil ();
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::PolicyFactory_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::PolicyFactory::_nil ();
  return val;
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::tao_duplicate (PortableInterceptor::PolicyFactory_ptr p)
{
  return ::PortableInterceptor::PolicyFactory::_duplicate (p);
}

void
PortableInterceptor::PolicyFactory_var::tao_release (PortableInterceptor::PolicyFactory_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::tao_nil (void)
{
  return ::PortableInterceptor::PolicyFactory::_nil ();
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::PolicyFactory::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::PolicyFactory_var::tao_upcast (void *src)
{
  PortableInterceptor::PolicyFactory **tmp =
    ACE_static_cast (PortableInterceptor::PolicyFactory **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::PolicyFactory_out
// *************************************************************

PortableInterceptor::PolicyFactory_out::PolicyFactory_out (PolicyFactory_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::PolicyFactory::_nil ();
}

PortableInterceptor::PolicyFactory_out::PolicyFactory_out (PolicyFactory_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::PolicyFactory::_nil ();
}

PortableInterceptor::PolicyFactory_out::PolicyFactory_out (const ::PortableInterceptor::PolicyFactory_out &p) // copy constructor
  : ptr_ (ACE_const_cast (PolicyFactory_out &, p).ptr_)
{}

::PortableInterceptor::PolicyFactory_out &
PortableInterceptor::PolicyFactory_out::operator= (const ::PortableInterceptor::PolicyFactory_out &p)
{
  this->ptr_ = ACE_const_cast (PolicyFactory_out&, p).ptr_;
  return *this;
}

PortableInterceptor::PolicyFactory_out &
PortableInterceptor::PolicyFactory_out::operator= (const ::PortableInterceptor::PolicyFactory_var &p)
{
  this->ptr_ = ::PortableInterceptor::PolicyFactory::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::PolicyFactory_out &
PortableInterceptor::PolicyFactory_out::operator= (PolicyFactory_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::PolicyFactory_out::operator ::PortableInterceptor::PolicyFactory_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr &
PortableInterceptor::PolicyFactory_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::PolicyFactory::PolicyFactory (void)
{}
  // destructor
  PortableInterceptor::PolicyFactory::~PolicyFactory (void)
  {}

  PortableInterceptor::PolicyFactory_ptr PortableInterceptor::PolicyFactory::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return PolicyFactory::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::PolicyFactory_ptr PortableInterceptor::PolicyFactory::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return PolicyFactory::_nil ();
    return
        ACE_reinterpret_cast
          (
            PolicyFactory_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &PolicyFactory::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory::_duplicate (PolicyFactory_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::PolicyFactory::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, PolicyFactory)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::PolicyFactory::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/PolicyFactory:1.0";
}

int PortableInterceptor::ORBInitInfo::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::ORBInitInfo_var
// *************************************************************

PortableInterceptor::ORBInitInfo_var::ORBInitInfo_var (void) // default constructor
  : ptr_ (ORBInitInfo::_nil ())
{}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ORBInitInfo_var::ORBInitInfo_var (const ::PortableInterceptor::ORBInitInfo_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (ORBInitInfo::_duplicate (p.ptr ()))
{}

PortableInterceptor::ORBInitInfo_var::~ORBInitInfo_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::ORBInitInfo_var &
PortableInterceptor::ORBInitInfo_var::operator= (ORBInitInfo_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ORBInitInfo_var &
PortableInterceptor::ORBInitInfo_var::operator= (const ::PortableInterceptor::ORBInitInfo_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::ORBInitInfo::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::ORBInitInfo_var::operator const ::PortableInterceptor::ORBInitInfo_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::ORBInitInfo_var::operator ::PortableInterceptor::ORBInitInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr &
PortableInterceptor::ORBInitInfo_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr &
PortableInterceptor::ORBInitInfo_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ORBInitInfo::_nil ();
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::ORBInitInfo_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::ORBInitInfo::_nil ();
  return val;
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::tao_duplicate (PortableInterceptor::ORBInitInfo_ptr p)
{
  return ::PortableInterceptor::ORBInitInfo::_duplicate (p);
}

void
PortableInterceptor::ORBInitInfo_var::tao_release (PortableInterceptor::ORBInitInfo_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::tao_nil (void)
{
  return ::PortableInterceptor::ORBInitInfo::_nil ();
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::ORBInitInfo::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::ORBInitInfo_var::tao_upcast (void *src)
{
  PortableInterceptor::ORBInitInfo **tmp =
    ACE_static_cast (PortableInterceptor::ORBInitInfo **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::ORBInitInfo_out
// *************************************************************

PortableInterceptor::ORBInitInfo_out::ORBInitInfo_out (ORBInitInfo_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::ORBInitInfo::_nil ();
}

PortableInterceptor::ORBInitInfo_out::ORBInitInfo_out (ORBInitInfo_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ORBInitInfo::_nil ();
}

PortableInterceptor::ORBInitInfo_out::ORBInitInfo_out (const ::PortableInterceptor::ORBInitInfo_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ORBInitInfo_out &, p).ptr_)
{}

::PortableInterceptor::ORBInitInfo_out &
PortableInterceptor::ORBInitInfo_out::operator= (const ::PortableInterceptor::ORBInitInfo_out &p)
{
  this->ptr_ = ACE_const_cast (ORBInitInfo_out&, p).ptr_;
  return *this;
}

PortableInterceptor::ORBInitInfo_out &
PortableInterceptor::ORBInitInfo_out::operator= (const ::PortableInterceptor::ORBInitInfo_var &p)
{
  this->ptr_ = ::PortableInterceptor::ORBInitInfo::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::ORBInitInfo_out &
PortableInterceptor::ORBInitInfo_out::operator= (ORBInitInfo_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ORBInitInfo_out::operator ::PortableInterceptor::ORBInitInfo_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr &
PortableInterceptor::ORBInitInfo_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::ORBInitInfo::ORBInitInfo (void)
{}
  // destructor
  PortableInterceptor::ORBInitInfo::~ORBInitInfo (void)
  {}

  PortableInterceptor::ORBInitInfo_ptr PortableInterceptor::ORBInitInfo::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return ORBInitInfo::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::ORBInitInfo_ptr PortableInterceptor::ORBInitInfo::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return ORBInitInfo::_nil ();
    return
        ACE_reinterpret_cast
          (
            ORBInitInfo_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &ORBInitInfo::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo::_duplicate (ORBInitInfo_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::ORBInitInfo::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, ORBInitInfo)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::ORBInitInfo::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/ORBInitInfo:1.0";
}

// Default constructor.
PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (void)
  : CORBA_UserException ("IDL:PortableInterceptor/ORBInitInfo/DuplicateName:1.0")
{
}

// Destructor - all members are of self managing types.
PortableInterceptor::ORBInitInfo::DuplicateName::~DuplicateName (void)
{
}

// Copy constructor.
PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (const ::PortableInterceptor::ORBInitInfo::DuplicateName &_tao_excp)
  : CORBA_UserException (_tao_excp._id ())
{
  this->name = CORBA::string_dup (_tao_excp.name.in ());
}

// Assignment operator.
PortableInterceptor::ORBInitInfo::DuplicateName&
PortableInterceptor::ORBInitInfo::DuplicateName::operator= (const ::PortableInterceptor::ORBInitInfo::DuplicateName &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  this->name = CORBA::string_dup (_tao_excp.name.in ());
  return *this;
}

// Narrow.
PortableInterceptor::ORBInitInfo::DuplicateName *
PortableInterceptor::ORBInitInfo::DuplicateName::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableInterceptor/ORBInitInfo/DuplicateName:1.0", exc->_id ()))
    {
      return ACE_dynamic_cast (DuplicateName *, exc);
    }
  else
    {
      return 0;
    }
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_raise ()
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_encode (
    TAO_OutputCDR &
    TAO_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_decode (
    TAO_InputCDR &
    TAO_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method.
CORBA::Exception *PortableInterceptor::ORBInitInfo::DuplicateName::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ORBInitInfo::DuplicateName, 0);
  return retval;
}

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (
    const char * _tao_name
  )
  : CORBA_UserException ("IDL:PortableInterceptor/ORBInitInfo/DuplicateName:1.0")
{
  this->name = CORBA::string_dup (_tao_name);
}

// Default constructor.
PortableInterceptor::ORBInitInfo::InvalidName::InvalidName (void)
  : CORBA_UserException ("IDL:PortableInterceptor/ORBInitInfo/InvalidName:1.0")
{
}

// Destructor - all members are of self managing types.
PortableInterceptor::ORBInitInfo::InvalidName::~InvalidName (void)
{
}

// Copy constructor.
PortableInterceptor::ORBInitInfo::InvalidName::InvalidName (const ::PortableInterceptor::ORBInitInfo::InvalidName &_tao_excp)
  : CORBA_UserException (_tao_excp._id ())
{
}

// Assignment operator.
PortableInterceptor::ORBInitInfo::InvalidName&
PortableInterceptor::ORBInitInfo::InvalidName::operator= (const ::PortableInterceptor::ORBInitInfo::InvalidName &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

// Narrow.
PortableInterceptor::ORBInitInfo::InvalidName *
PortableInterceptor::ORBInitInfo::InvalidName::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableInterceptor/ORBInitInfo/InvalidName:1.0", exc->_id ()))
    {
      return ACE_dynamic_cast (InvalidName *, exc);
    }
  else
    {
      return 0;
    }
}

void PortableInterceptor::ORBInitInfo::InvalidName::_raise ()
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_encode (
    TAO_OutputCDR &
    TAO_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_decode (
    TAO_InputCDR &
    TAO_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method.
CORBA::Exception *PortableInterceptor::ORBInitInfo::InvalidName::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ORBInitInfo::InvalidName, 0);
  return retval;
}

int PortableInterceptor::ORBInitializer::_tao_class_id = 0;

// *************************************************************
// Operations for class PortableInterceptor::ORBInitializer_var
// *************************************************************

PortableInterceptor::ORBInitializer_var::ORBInitializer_var (void) // default constructor
  : ptr_ (ORBInitializer::_nil ())
{}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::ptr (void) const
{
  return this->ptr_;
}

PortableInterceptor::ORBInitializer_var::ORBInitializer_var (const ::PortableInterceptor::ORBInitializer_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (ORBInitializer::_duplicate (p.ptr ()))
{}

PortableInterceptor::ORBInitializer_var::~ORBInitializer_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

PortableInterceptor::ORBInitializer_var &
PortableInterceptor::ORBInitializer_var::operator= (ORBInitializer_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ORBInitializer_var &
PortableInterceptor::ORBInitializer_var::operator= (const ::PortableInterceptor::ORBInitializer_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::PortableInterceptor::ORBInitializer::_duplicate (p.ptr ());
  }
  return *this;
}

PortableInterceptor::ORBInitializer_var::operator const ::PortableInterceptor::ORBInitializer_ptr &() const // cast
{
  return this->ptr_;
}

PortableInterceptor::ORBInitializer_var::operator ::PortableInterceptor::ORBInitializer_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::operator-> (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::in (void) const
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr &
PortableInterceptor::ORBInitializer_var::inout (void)
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr &
PortableInterceptor::ORBInitializer_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ORBInitializer::_nil ();
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::PortableInterceptor::ORBInitializer_ptr val = this->ptr_;
  this->ptr_ = ::PortableInterceptor::ORBInitializer::_nil ();
  return val;
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::tao_duplicate (PortableInterceptor::ORBInitializer_ptr p)
{
  return ::PortableInterceptor::ORBInitializer::_duplicate (p);
}

void
PortableInterceptor::ORBInitializer_var::tao_release (PortableInterceptor::ORBInitializer_ptr p)
{
  CORBA::release (p);
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::tao_nil (void)
{
  return ::PortableInterceptor::ORBInitializer::_nil ();
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::PortableInterceptor::ORBInitializer::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::ORBInitializer_var::tao_upcast (void *src)
{
  PortableInterceptor::ORBInitializer **tmp =
    ACE_static_cast (PortableInterceptor::ORBInitializer **, src);
  return *tmp;
}
// *************************************************************
// Operations for class PortableInterceptor::ORBInitializer_out
// *************************************************************

PortableInterceptor::ORBInitializer_out::ORBInitializer_out (ORBInitializer_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::PortableInterceptor::ORBInitializer::_nil ();
}

PortableInterceptor::ORBInitializer_out::ORBInitializer_out (ORBInitializer_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::PortableInterceptor::ORBInitializer::_nil ();
}

PortableInterceptor::ORBInitializer_out::ORBInitializer_out (const ::PortableInterceptor::ORBInitializer_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ORBInitializer_out &, p).ptr_)
{}

::PortableInterceptor::ORBInitializer_out &
PortableInterceptor::ORBInitializer_out::operator= (const ::PortableInterceptor::ORBInitializer_out &p)
{
  this->ptr_ = ACE_const_cast (ORBInitializer_out&, p).ptr_;
  return *this;
}

PortableInterceptor::ORBInitializer_out &
PortableInterceptor::ORBInitializer_out::operator= (const ::PortableInterceptor::ORBInitializer_var &p)
{
  this->ptr_ = ::PortableInterceptor::ORBInitializer::_duplicate (p.ptr ());
  return *this;
}

PortableInterceptor::ORBInitializer_out &
PortableInterceptor::ORBInitializer_out::operator= (ORBInitializer_ptr p)
{
  this->ptr_ = p;
  return *this;
}

PortableInterceptor::ORBInitializer_out::operator ::PortableInterceptor::ORBInitializer_ptr &() // cast
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr &
PortableInterceptor::ORBInitializer_out::ptr (void) // ptr
{
  return this->ptr_;
}

::PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
PortableInterceptor::ORBInitializer::ORBInitializer (void)
{}
  // destructor
  PortableInterceptor::ORBInitializer::~ORBInitializer (void)
  {}

  PortableInterceptor::ORBInitializer_ptr PortableInterceptor::ORBInitializer::_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL
    )
  {
    return ORBInitializer::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
  }

  PortableInterceptor::ORBInitializer_ptr PortableInterceptor::ORBInitializer::_unchecked_narrow (
      CORBA::Object_ptr obj
      TAO_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      return ORBInitializer::_nil ();
    return
        ACE_reinterpret_cast
          (
            ORBInitializer_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &ORBInitializer::_tao_class_id
                    )
                )
          );
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer::_duplicate (ORBInitializer_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *PortableInterceptor::ORBInitializer::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::PortableInterceptor, ORBInitializer)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* PortableInterceptor::ORBInitializer::_interface_repository_id (void) const
{
  return "IDL:PortableInterceptor/ORBInitializer:1.0";
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::Interceptor,PortableInterceptor::Interceptor_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::Interceptor,PortableInterceptor::Interceptor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

void operator<<= (CORBA::Any &_tao_any, const PortableInterceptor::ForwardRequest &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      PortableInterceptor::_tc_ForwardRequest,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, PortableInterceptor::ForwardRequest *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      PortableInterceptor::_tc_ForwardRequest,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      PortableInterceptor::ForwardRequest::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableInterceptor::ForwardRequest *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const PortableInterceptor::ForwardRequest*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const PortableInterceptor::ForwardRequest *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (PortableInterceptor::_tc_ForwardRequest TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      {
        return 0; // not equivalent
      }

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = (PortableInterceptor::ForwardRequest *)_tao_any.value ();
      return 1;
    }
    else
    {
      PortableInterceptor::ForwardRequest *tmp;
      ACE_NEW_RETURN (tmp, PortableInterceptor::ForwardRequest, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      CORBA::String_var interface_repository_id;
      if (!(stream >> interface_repository_id.out ()))
        return 0;
      if (ACE_OS::strcmp (
          interface_repository_id.in (),
          "IDL:PortableInterceptor/ForwardRequest:1.0"))
        return 0;
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            PortableInterceptor::_tc_ForwardRequest,
            1,
            tmp,
            PortableInterceptor::ForwardRequest::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, const PortableInterceptor::InvalidSlot &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      PortableInterceptor::_tc_InvalidSlot,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, PortableInterceptor::InvalidSlot *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      PortableInterceptor::_tc_InvalidSlot,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      PortableInterceptor::InvalidSlot::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableInterceptor::InvalidSlot *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const PortableInterceptor::InvalidSlot*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const PortableInterceptor::InvalidSlot *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result =
      type->equivalent (PortableInterceptor::_tc_InvalidSlot TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      {
        return 0; // not equivalent
      }

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = (PortableInterceptor::InvalidSlot *)_tao_any.value ();
      return 1;
    }
    else
    {
      PortableInterceptor::InvalidSlot *tmp;
      ACE_NEW_RETURN (tmp, PortableInterceptor::InvalidSlot, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      CORBA::String_var interface_repository_id;
      if (!(stream >> interface_repository_id.out ()))
        return 0;
      if (ACE_OS::strcmp (
          interface_repository_id.in (),
          "IDL:PortableInterceptor/InvalidSlot:1.0"))
        return 0;
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            PortableInterceptor::_tc_InvalidSlot,
            1,
            tmp,
            PortableInterceptor::InvalidSlot::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::Current,PortableInterceptor::Current_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::Current,PortableInterceptor::Current_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::RequestInfo,PortableInterceptor::RequestInfo_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::RequestInfo,PortableInterceptor::RequestInfo_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::ClientRequestInfo,PortableInterceptor::ClientRequestInfo_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ClientRequestInfo,PortableInterceptor::ClientRequestInfo_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::ServerRequestInfo,PortableInterceptor::ServerRequestInfo_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ServerRequestInfo,PortableInterceptor::ServerRequestInfo_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::ClientRequestInterceptor,PortableInterceptor::ClientRequestInterceptor_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ClientRequestInterceptor,PortableInterceptor::ClientRequestInterceptor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::ServerRequestInterceptor,PortableInterceptor::ServerRequestInterceptor_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ServerRequestInterceptor,PortableInterceptor::ServerRequestInterceptor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

void operator<<= (
    CORBA::Any &_tao_any,
    const PortableInterceptor::ObjectReferenceTemplateSeq &_tao_elem
  ) // copying
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        PortableInterceptor::_tc_ObjectReferenceTemplateSeq,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin ()
      );
  }
}

void operator<<= (CORBA::Any &_tao_any, PortableInterceptor::ObjectReferenceTemplateSeq *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      PortableInterceptor::_tc_ObjectReferenceTemplateSeq,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      PortableInterceptor::ObjectReferenceTemplateSeq::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableInterceptor::ObjectReferenceTemplateSeq *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const PortableInterceptor::ObjectReferenceTemplateSeq*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const PortableInterceptor::ObjectReferenceTemplateSeq *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result =
      type->equivalent (PortableInterceptor::_tc_ObjectReferenceTemplateSeq TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      {
        return 0; // not equivalent
      }

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const PortableInterceptor::ObjectReferenceTemplateSeq*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      PortableInterceptor::ObjectReferenceTemplateSeq *tmp;
      ACE_NEW_RETURN (tmp, PortableInterceptor::ObjectReferenceTemplateSeq, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            PortableInterceptor::_tc_ObjectReferenceTemplateSeq,
            1,
            ACE_static_cast (void *, tmp),
            PortableInterceptor::ObjectReferenceTemplateSeq::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::IORInfo,PortableInterceptor::IORInfo_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::IORInfo,PortableInterceptor::IORInfo_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::IORInterceptor,PortableInterceptor::IORInterceptor_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::IORInterceptor,PortableInterceptor::IORInterceptor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::PolicyFactory,PortableInterceptor::PolicyFactory_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::PolicyFactory,PortableInterceptor::PolicyFactory_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::ORBInitInfo,PortableInterceptor::ORBInitInfo_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ORBInitInfo,PortableInterceptor::ORBInitInfo_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<PortableInterceptor::ORBInitializer,PortableInterceptor::ORBInitializer_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ORBInitializer,PortableInterceptor::ORBInitializer_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

//@@ Boris: begin experimental
void
CORBA::add_ref (PortableInterceptor::ObjectReferenceFactory * vt)
{
  if (vt != 0)
  {
    vt->_add_ref ();
  }
}

void
CORBA::remove_ref (PortableInterceptor::ObjectReferenceFactory * vt)
{
  if (vt != 0)
  {
    vt->_remove_ref ();
  }
}

//@@ Boris: end experimental
CORBA::Boolean
operator<< (TAO_OutputCDR &strm, const PortableInterceptor::ObjectReferenceFactory *_tao_valuetype)
{
  return CORBA_ValueBase::_tao_marshal (strm,
    ACE_const_cast (PortableInterceptor::ObjectReferenceFactory*, _tao_valuetype),
    (ptr_arith_t) &PortableInterceptor::ObjectReferenceFactory::_downcast);
}

CORBA::Boolean
operator>> (TAO_InputCDR &strm, PortableInterceptor::ObjectReferenceFactory *&_tao_valuetype)
{
  return PortableInterceptor::ObjectReferenceFactory::_tao_unmarshal (strm, _tao_valuetype);
}

//@@ Boris: begin experimental
void
CORBA::add_ref (PortableInterceptor::ObjectReferenceTemplate * vt)
{
  if (vt != 0)
  {
    vt->_add_ref ();
  }
}

void
CORBA::remove_ref (PortableInterceptor::ObjectReferenceTemplate * vt)
{
  if (vt != 0)
  {
    vt->_remove_ref ();
  }
}

//@@ Boris: end experimental
CORBA::Boolean
operator<< (TAO_OutputCDR &strm, const PortableInterceptor::ObjectReferenceTemplate *_tao_valuetype)
{
  return CORBA_ValueBase::_tao_marshal (strm,
    ACE_const_cast (PortableInterceptor::ObjectReferenceTemplate*, _tao_valuetype),
    (ptr_arith_t) &PortableInterceptor::ObjectReferenceTemplate::_downcast);
}

CORBA::Boolean
operator>> (TAO_InputCDR &strm, PortableInterceptor::ObjectReferenceTemplate *&_tao_valuetype)
{
  return PortableInterceptor::ObjectReferenceTemplate::_tao_unmarshal (strm, _tao_valuetype);
}

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableInterceptor::ObjectReferenceTemplateSeq &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm << _tao_sequence[i].in ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableInterceptor::ObjectReferenceTemplateSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len)
      return 1;
    // Add a check to the length of the sequence
    // to make sure it does not exceed the length
    // of the stream. (See bug 58.)
    if (_tao_seq_len > strm.length())
      return 0;
    // retrieve all the elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}
