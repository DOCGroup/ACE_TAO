--- orig/PolicyC.h	Mon Apr 16 19:17:11 2001
+++ PolicyC.h	Fri Apr 13 21:49:35 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -19,17 +19,23 @@
 // Information about TAO is available at:
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
-#ifndef _TAO_IDL_POLICYC_H_
-#define _TAO_IDL_POLICYC_H_
+#ifndef _TAO_IDL_ORIG_POLICYC_H_
+#define _TAO_IDL_ORIG_POLICYC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+#include "tao/CurrentC.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "tao/corbafwd.h"
+#include "TAO_Export.h"
+#include "Encodable.h"
+#include "Exception.h"
+#include "Environment.h"
+#include "Sequence.h"
+#include "CDR.h"
+#include "Remote_Object_Proxy_Impl.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -54,29 +60,6 @@
 #pragma option push -w-rvl -w-rch -w-ccc -w-inl
 #endif /* __BORLANDC__ */
 
-TAO_NAMESPACE  CORBA
-{
-  typedef CORBA::Short PolicyErrorCode;
-  typedef CORBA::Short_out PolicyErrorCode_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PolicyErrorCode;
-
-  typedef CORBA::ULong PolicyType;
-  typedef CORBA::ULong_out PolicyType_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PolicyType;
-
-  enum SetOverrideType
-  {
-        SET_OVERRIDE,
-        ADD_OVERRIDE    
-  };
-  typedef SetOverrideType &SetOverrideType_out;
-  TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_SetOverrideType;
-
-
-}
-TAO_NAMESPACE_CLOSE // module CORBA
-
-
 #if !defined (_CORBA_POLICYERROR_CH_)
 #define _CORBA_POLICYERROR_CH_
 
@@ -348,6 +331,7 @@
 class _TAO_CORBA_Policy_Remote_Proxy_Broker;
 
 class TAO_Export CORBA_Policy : public virtual CORBA_Object
+                              , public virtual TAO_Encodable
 {
 public:
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -407,6 +391,9 @@
   
   virtual const char* _interface_repository_id (void) const;
 
+  virtual CORBA::Boolean _tao_encode (TAO_OutputCDR &);
+  virtual CORBA::Boolean _tao_decode (TAO_InputCDR &);
+
 private:
   _TAO_CORBA_Policy_Proxy_Broker *the_TAO_CORBA_Policy_Proxy_Broker_;
   
@@ -1039,127 +1026,6 @@
 #endif /* end #if !defined */
 
 
-#if !defined (_CORBA_CURRENT___PTR_CH_)
-#define _CORBA_CURRENT___PTR_CH_
-
-class CORBA_Current;
-typedef CORBA_Current *CORBA_Current_ptr;
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT___VAR_CH_)
-#define _CORBA_CURRENT___VAR_CH_
-
-class TAO_Export CORBA_Current_var : public TAO_Base_var
-{
-public:
-  CORBA_Current_var (void); // default constructor
-  CORBA_Current_var (CORBA_Current_ptr p) : ptr_ (p) {} 
-  CORBA_Current_var (const CORBA_Current_var &); // copy constructor
-  ~CORBA_Current_var (void); // destructor
-  
-  CORBA_Current_var &operator= (CORBA_Current_ptr);
-  CORBA_Current_var &operator= (const CORBA_Current_var &);
-  CORBA_Current_ptr operator-> (void) const;
-  
-  operator const CORBA_Current_ptr &() const;
-  operator CORBA_Current_ptr &();
-  // in, inout, out, _retn 
-  CORBA_Current_ptr in (void) const;
-  CORBA_Current_ptr &inout (void);
-  CORBA_Current_ptr &out (void);
-  CORBA_Current_ptr _retn (void);
-  CORBA_Current_ptr ptr (void) const;
-  
-  // Hooks used by template sequence and object manager classes
-  // for non-defined forward declared interfaces.
-  static CORBA_Current_ptr duplicate (CORBA_Current_ptr);
-  static void release (CORBA_Current_ptr);
-  static CORBA_Current_ptr nil (void);
-  static CORBA_Current_ptr narrow (CORBA::Object *, CORBA::Environment &);
-  static CORBA::Object * upcast (void *);
-
-private:
-  CORBA_Current_ptr ptr_;
-  // Unimplemented - prevents widening assignment.
-  CORBA_Current_var (const TAO_Base_var &rhs);
-  CORBA_Current_var &operator= (const TAO_Base_var &rhs);
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT___OUT_CH_)
-#define _CORBA_CURRENT___OUT_CH_
-
-class TAO_Export CORBA_Current_out
-{
-public:
-  CORBA_Current_out (CORBA_Current_ptr &);
-  CORBA_Current_out (CORBA_Current_var &);
-  CORBA_Current_out (const CORBA_Current_out &);
-  CORBA_Current_out &operator= (const CORBA_Current_out &);
-  CORBA_Current_out &operator= (const CORBA_Current_var &);
-  CORBA_Current_out &operator= (CORBA_Current_ptr);
-  operator CORBA_Current_ptr &();
-  CORBA_Current_ptr &ptr (void);
-  CORBA_Current_ptr operator-> (void);
-
-private:
-  CORBA_Current_ptr &ptr_;
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT_CH_)
-#define _CORBA_CURRENT_CH_
-
-class TAO_Export CORBA_Current : public virtual CORBA_Object
-{
-public:
-#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-  typedef CORBA_Current_ptr _ptr_type;
-  typedef CORBA_Current_var _var_type;
-#endif /* ! __GNUC__ || g++ >= 2.8 */
-
-  // the static operations
-  static CORBA_Current_ptr _duplicate (CORBA_Current_ptr obj);
-  static CORBA_Current_ptr _narrow (
-      CORBA::Object_ptr obj,
-      CORBA::Environment &ACE_TRY_ENV = 
-        TAO_default_environment ()
-    );
-  static CORBA_Current_ptr _unchecked_narrow (
-      CORBA::Object_ptr obj,
-      CORBA::Environment &ACE_TRY_ENV = 
-        TAO_default_environment ()
-    );
-  static CORBA_Current_ptr _nil (void)
-    {
-      return (CORBA_Current_ptr)0;
-    }
-
-  virtual void *_tao_QueryInterface (ptr_arith_t type);
-  
-  virtual const char* _interface_repository_id (void) const;
-
-protected:
-  CORBA_Current ();
-  
-  virtual ~CORBA_Current (void);
-private:
-  CORBA_Current (const CORBA_Current &);
-  void operator= (const CORBA_Current &);
-};
-
-
-#endif /* end #if !defined */
-
-
 #if !defined (_CORBA_POLICYCURRENT___PTR_CH_)
 #define _CORBA_POLICYCURRENT___PTR_CH_
 
@@ -1372,7 +1238,7 @@
 
 
 #if defined (__ACE_INLINE__)
-#include "PolicyC.i"
+#include "tao/PolicyC.i"
 #endif /* defined INLINE */
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
