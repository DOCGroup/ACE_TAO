--- orig/PolicyC.h	Tue Jun 12 17:22:53 2001
+++ PolicyC.h	Tue Jun 12 13:58:13 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -23,13 +23,20 @@
 #define _TAO_IDL_ORIG_POLICYC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+
+#include "TAO_Export.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "tao/corbafwd.h"
+#include "Encodable.h"
+#include "Exception.h"
+#include "Environment.h"
+#include "Sequence.h"
+#include "CDR.h"
+#include "Remote_Object_Proxy_Impl.h"
+#include "CurrentC.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -54,30 +61,6 @@
 #pragma option push -w-rvl -w-rch -w-ccc -w-inl
 #endif /* __BORLANDC__ */
 
-TAO_NAMESPACE  CORBA
-{
-  typedef CORBA::Short PolicyErrorCode;
-  typedef CORBA::Short_out PolicyErrorCode_out;
-  TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PolicyErrorCode;
-  
-  typedef CORBA::ULong PolicyType;
-  typedef CORBA::ULong_out PolicyType_out;
-  TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PolicyType;
-  
-  enum SetOverrideType
-  {
-    SET_OVERRIDE,
-    ADD_OVERRIDE
-  };
-  
-  typedef SetOverrideType &SetOverrideType_out;
-  TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_SetOverrideType;
-  
-  
-}
-TAO_NAMESPACE_CLOSE // module CORBA
-
-
 #if !defined (_CORBA_POLICYERROR_CH_)
 #define _CORBA_POLICYERROR_CH_
 
@@ -120,9 +103,7 @@
   // = TAO extension.
   static CORBA::Exception *_alloc (void);
   virtual CORBA::TypeCode_ptr _type (void) const;
-}; // Exception CORBA_PolicyError.
-
-extern TAO_Export CORBA::TypeCode_ptr  _tc_CORBA_PolicyError;
+  }; // Exception CORBA::PolicyError.
 
 
 #endif /* end #if !defined */
@@ -140,46 +121,36 @@
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CH_
   
-  class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort
-    : public TAO_Unbounded_Base_Sequence
+      class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort : public TAO_Unbounded_Base_Sequence
   {
   public:
     // = Initialization and termination methods.
-    _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void);
+
+        _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void); // Default constructor.
     _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum); 
-    _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (
-        CORBA::ULong maximum,
+        _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum,
         CORBA::ULong length,
         CORBA::UShort *data,
-        CORBA::Boolean release = 0
-      );
-    _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (
-        const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs
-      );
-    _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &operator= (
-        const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs
-      );
-    virtual ~_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void);
-    
+          CORBA::Boolean release = 0);
+        _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs);
+        _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &operator= (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs);
+        virtual ~_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void); // Dtor.
     // = Accessors.
     CORBA::UShort &operator[] (CORBA::ULong i);
     const CORBA::UShort &operator[] (CORBA::ULong i) const;
-    
     // = Static operations.
     static CORBA::UShort *allocbuf (CORBA::ULong size);
     static void freebuf (CORBA::UShort *buffer);
-    
-    // Implement the TAO_Base_Sequence methods (see Sequence.h)
     virtual void _allocate_buffer (CORBA::ULong length);
     virtual void _deallocate_buffer (void);
+        // Implement the TAO_Base_Sequence methods (see Sequence.h)
+
     CORBA::UShort *get_buffer (CORBA::Boolean orphan = 0);
     const CORBA::UShort *get_buffer (void) const;
-    void replace (
-        CORBA::ULong max,
+        void replace (CORBA::ULong max,
         CORBA::ULong length,
         CORBA::UShort *data,
-        CORBA::Boolean release
-      );
+          CORBA::Boolean release);
   };
   
 #endif /* end #if !defined */
@@ -191,6 +162,7 @@
 #define _CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CH_
   
   class _tao_seq_UShort;
+    class _tao_seq_UShort_var;
   
   // *************************************************************
   // _tao_seq_UShort
@@ -216,11 +188,14 @@
     ~_tao_seq_UShort (void);
     static void _tao_any_destructor (void*);
     
+#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
+      typedef _tao_seq_UShort_var _var_type;
+#endif /* ! __GNUC__ || g++ >= 2.8 */
+
   };
   
 #endif /* end #if !defined */
   
-  
 #if !defined (__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
   typedef _tao_seq_UShort _indices_seq;
 #endif /* ! __GNUC__ || ACE_HAS_GNUG_PRE_2_8 */
@@ -261,23 +236,11 @@
   // = TAO extension.
   static CORBA::Exception *_alloc (void);
   virtual CORBA::TypeCode_ptr _type (void) const;
-}; // Exception CORBA_InvalidPolicies.
-
-extern TAO_Export CORBA::TypeCode_ptr  _tc_CORBA_InvalidPolicies;
+  }; // Exception CORBA::InvalidPolicies.
 
 
 #endif /* end #if !defined */
 
-
-#if !defined (_CORBA_POLICY___PTR_CH_)
-#define _CORBA_POLICY___PTR_CH_
-
-class CORBA_Policy;
-typedef CORBA_Policy *CORBA_Policy_ptr;
-
-#endif /* end #if !defined */
-
-
 #if !defined (_CORBA_POLICY___VAR_CH_)
 #define _CORBA_POLICY___VAR_CH_
 
@@ -307,10 +270,7 @@
   static CORBA_Policy_ptr duplicate (CORBA_Policy_ptr);
   static void release (CORBA_Policy_ptr);
   static CORBA_Policy_ptr nil (void);
-  static CORBA_Policy_ptr narrow (
-      CORBA::Object *,
-      CORBA::Environment &
-    );
+    static CORBA_Policy_ptr narrow (CORBA::Object *, CORBA::Environment &);
   static CORBA::Object * upcast (void *);
 
 private:
@@ -352,13 +312,14 @@
 #define _CORBA_POLICY_CH_
 
 // Forward Classes Declaration
-class _TAO_CORBA_Policy_Proxy_Impl;
-class _TAO_CORBA_Policy_Remote_Proxy_Impl;
-class _TAO_CORBA_Policy_Proxy_Broker;
-class _TAO_CORBA_Policy_Remote_Proxy_Broker;
+  class CORBA_TAO_Policy_Proxy_Impl;
+  class CORBA_TAO_Policy_Remote_Proxy_Impl;
+  class CORBA_TAO_Policy_Proxy_Broker;
+  class CORBA_TAO_Policy_Remote_Proxy_Broker;
 
 class TAO_Export CORBA_Policy
-  : public virtual CORBA_Object
+  : public virtual CORBA_Object,
+    public virtual TAO_Encodable
 {
 public:
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -368,19 +329,16 @@
 
   // the static operations
   static CORBA_Policy_ptr _duplicate (CORBA_Policy_ptr obj);
-  
   static CORBA_Policy_ptr _narrow (
       CORBA::Object_ptr obj,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   static CORBA_Policy_ptr _unchecked_narrow (
       CORBA::Object_ptr obj,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   static CORBA_Policy_ptr _nil (void)
     {
       return (CORBA_Policy_ptr)0;
@@ -396,7 +354,7 @@
       CORBA::SystemException
     ));
   
-  virtual CORBA_Policy_ptr copy (
+    virtual CORBA::Policy_ptr copy (
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     )
@@ -417,17 +375,26 @@
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   virtual void *_tao_QueryInterface (ptr_arith_t type);
   
   virtual const char* _interface_repository_id (void) const;
 
+    virtual CORBA::Boolean _tao_encode (TAO_OutputCDR &);
+    virtual CORBA::Boolean _tao_decode (TAO_InputCDR &);
+
+    // Return the cached policy type for this policy.  See orbconf.h.
+    virtual TAO_Cached_Policy_Type _tao_cached_type (void) const;
+
+    // Returns the scope at which this policy can be applied. See orbconf.h.
+    virtual TAO_Policy_Scope _tao_scope (void) const;
+
 private:
-  _TAO_CORBA_Policy_Proxy_Broker *the_TAO_CORBA_Policy_Proxy_Broker_;
+    CORBA_TAO_Policy_Proxy_Broker *the_CORBA_TAO_Policy_Proxy_Broker_;
   
 protected:
   CORBA_Policy (int collocated = 0);
   
+    protected:
   // This methods travese the inheritance tree and set the
   // parents piece of the given class in the right mode
   virtual void CORBA_Policy_setup_collocation (int collocated);
@@ -438,41 +405,41 @@
       TAO_Abstract_ServantBase *servant = 0
     );
   
-  friend class _TAO_CORBA_Policy_Remote_Proxy_Impl;
-  friend class _TAO_CORBA_Policy_ThruPOA_Proxy_Impl;
-  friend class _TAO_CORBA_Policy_Direct_Proxy_Impl;
+      friend class CORBA_TAO_Policy_Remote_Proxy_Impl;
+      friend class CORBA_TAO_Policy_ThruPOA_Proxy_Impl;
+      friend class CORBA_TAO_Policy_Direct_Proxy_Impl;
   
   virtual ~CORBA_Policy (void);
-
 private:
   CORBA_Policy (const CORBA_Policy &);
   void operator= (const CORBA_Policy &);
 };
 
+
 // The Proxy Implementations are used by each interface to
 // perform a call. Each different implementation encapsulate
 // an invocation logics.
 
 
 ///////////////////////////////////////////////////////////////////////
-//                    Base Proxy Impl. Declaration
+  //                    Base  Impl. Declaration
 //
 
-class TAO_Export _TAO_CORBA_Policy_Proxy_Impl
-  : public virtual TAO_Object_Proxy_Impl
+  class TAO_Export CORBA_TAO_Policy_Proxy_Impl : public virtual TAO_Object_Proxy_Impl
 {
 public:
-  virtual ~_TAO_CORBA_Policy_Proxy_Impl (void) { }
+    virtual ~CORBA_TAO_Policy_Proxy_Impl (void) { }
+
   virtual CORBA::PolicyType policy_type (
-      CORBA_Object *_collocated_tao_target_,
+        CORBA::Object_ptr _collocated_tao_target_,
       CORBA::Environment &ACE_TRY_ENV
     )
     ACE_THROW_SPEC ((
       CORBA::SystemException
     )) = 0;
   
-  virtual CORBA_Policy_ptr copy (
-      CORBA_Object *_collocated_tao_target_,
+    virtual CORBA::Policy_ptr copy (
+        CORBA::Object_ptr _collocated_tao_target_,
       CORBA::Environment &ACE_TRY_ENV
     )
     ACE_THROW_SPEC ((
@@ -480,45 +447,45 @@
     )) = 0;
   
   virtual void destroy (
-      CORBA_Object *_collocated_tao_target_,
+        CORBA::Object_ptr _collocated_tao_target_,
       CORBA::Environment &ACE_TRY_ENV
     )
     ACE_THROW_SPEC ((
       CORBA::SystemException
     )) = 0;
   
-  
 protected:
-  _TAO_CORBA_Policy_Proxy_Impl (void);
-};
+    CORBA_TAO_Policy_Proxy_Impl (void);
 
+  };
 //
-//               End Base Proxy Impl. Declaration
+  //                Base  Proxy Impl. Declaration
 ///////////////////////////////////////////////////////////////////////
 
 
 ///////////////////////////////////////////////////////////////////////
-//                Remote Proxy Impl. Declaration
+//                    Remote  Impl. Declaration
 //
 
-class TAO_Export _TAO_CORBA_Policy_Remote_Proxy_Impl
-  : public virtual _TAO_CORBA_Policy_Proxy_Impl,
+class TAO_Export CORBA_TAO_Policy_Remote_Proxy_Impl :
+  public virtual CORBA_TAO_Policy_Proxy_Impl,
     public virtual TAO_Remote_Object_Proxy_Impl
 {
 public:
-  _TAO_CORBA_Policy_Remote_Proxy_Impl (void);
+  CORBA_TAO_Policy_Remote_Proxy_Impl (void);
+
+  virtual ~CORBA_TAO_Policy_Remote_Proxy_Impl (void) { }
   
-  virtual ~_TAO_CORBA_Policy_Remote_Proxy_Impl (void) { }
   virtual CORBA::PolicyType policy_type (
-      CORBA_Object *_collocated_tao_target_,
+      CORBA::Object_ptr _collocated_tao_target_,
       CORBA::Environment &ACE_TRY_ENV
     )
     ACE_THROW_SPEC ((
       CORBA::SystemException
     ));
   
-  virtual CORBA_Policy_ptr copy (
-      CORBA_Object *_collocated_tao_target_,
+virtual CORBA::Policy_ptr copy (
+      CORBA::Object_ptr _collocated_tao_target_,
       CORBA::Environment &ACE_TRY_ENV
     )
     ACE_THROW_SPEC ((
@@ -526,41 +493,42 @@
     ));
   
   virtual void destroy (
-      CORBA_Object *_collocated_tao_target_,
+      CORBA::Object_ptr _collocated_tao_target_,
       CORBA::Environment &ACE_TRY_ENV
     )
     ACE_THROW_SPEC ((
       CORBA::SystemException
     ));
   
-  
 };
 
 //
-//             End Remote Proxy Impl. Declaration
+//                Base  Proxy Impl. Declaration
 ///////////////////////////////////////////////////////////////////////
 
+
 // The Proxy Brokers are used by each interface to get
 // the right proxy for performing a call. In the new 
 // collocation scheme, the proxy to be used can vary on
 // a call by call basis.
 
 
+
 ///////////////////////////////////////////////////////////////////////
 //                 Base Proxy Broker Declaration 
 //
 
-class TAO_Export _TAO_CORBA_Policy_Proxy_Broker
+class TAO_Export CORBA_TAO_Policy_Proxy_Broker
 {
 public:
-  virtual ~_TAO_CORBA_Policy_Proxy_Broker (void);
-  virtual _TAO_CORBA_Policy_Proxy_Impl &select_proxy (
+  virtual ~CORBA_TAO_Policy_Proxy_Broker (void);
+  virtual CORBA_TAO_Policy_Proxy_Impl &select_proxy (
       CORBA_Policy *object,
-      CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
+    CORBA_Environment &ACE_TRY_ENV
     ) = 0;
   
 protected:
-  _TAO_CORBA_Policy_Proxy_Broker (void);
+  CORBA_TAO_Policy_Proxy_Broker (void);
   
 };
 
@@ -573,29 +541,29 @@
 //                 Remote Proxy Broker Declaration 
 //
 
-class TAO_Export _TAO_CORBA_Policy_Remote_Proxy_Broker
-  : public virtual _TAO_CORBA_Policy_Proxy_Broker
+class TAO_Export CORBA_TAO_Policy_Remote_Proxy_Broker : public virtual CORBA_TAO_Policy_Proxy_Broker
 {
 public: 
-  _TAO_CORBA_Policy_Remote_Proxy_Broker (void);
+  CORBA_TAO_Policy_Remote_Proxy_Broker (void);
   
-  virtual ~_TAO_CORBA_Policy_Remote_Proxy_Broker (void);
+  virtual ~CORBA_TAO_Policy_Remote_Proxy_Broker (void);
   
-  virtual _TAO_CORBA_Policy_Proxy_Impl &select_proxy (
+  virtual CORBA_TAO_Policy_Proxy_Impl &select_proxy (
       CORBA_Policy *object,
       CORBA_Environment &ACE_TRY_ENV
     );
   
 private:
-  _TAO_CORBA_Policy_Remote_Proxy_Impl remote_proxy_impl_;
-
-public:
+  CORBA_TAO_Policy_Remote_Proxy_Impl remote_proxy_impl_;
   // This member function is used to get an handle to the unique instance
   // of the Remote Proxy Broker that is available for a given
   // interface.
-  static _TAO_CORBA_Policy_Remote_Proxy_Broker *the_TAO_CORBA_Policy_Remote_Proxy_Broker (void);
+
+public:
+  static CORBA_TAO_Policy_Remote_Proxy_Broker *the_CORBA_TAO_Policy_Remote_Proxy_Broker (void);
 };
 
+
 //
 //              End Remote Proxy Broker Declaration 
 ///////////////////////////////////////////////////////////////////////
@@ -603,52 +571,35 @@
 
 #endif /* end #if !defined */
 
-extern TAO_Export CORBA::TypeCode_ptr  _tc_CORBA_Policy;
-
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CH_)
 #define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CH_
 
-class _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
-  : public TAO_Unbounded_Base_Sequence
+  class _TAO_Unbounded_Object_Sequence_CORBA_PolicyList : public TAO_Unbounded_Base_Sequence
 {
 public:
   // = Initialization and termination methods.
+
   _TAO_Unbounded_Object_Sequence_CORBA_PolicyList (void);
   _TAO_Unbounded_Object_Sequence_CORBA_PolicyList (CORBA::ULong maximum);
-  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList (
-      CORBA::ULong maximum,
+    _TAO_Unbounded_Object_Sequence_CORBA_PolicyList (CORBA::ULong maximum,
       CORBA::ULong length,
       CORBA_Policy* *value,
-      CORBA::Boolean release = 0
-    );
-  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList (
-      const _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &rhs
-    );
-  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &operator= (
-      const _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &rhs
-    );
+      CORBA::Boolean release = 0);
+    _TAO_Unbounded_Object_Sequence_CORBA_PolicyList(const _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &rhs);
   virtual ~_TAO_Unbounded_Object_Sequence_CORBA_PolicyList (void);
-  
-  // = Accessors.
-  TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var> operator[] (CORBA::ULong index) const;
-  
-  // = Static operations.
+    _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &operator= (const _TAO_Unbounded_Object_Sequence_CORBA_PolicyList &rhs);
+    TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var> operator[] (CORBA::ULong index) const;
   static CORBA_Policy **allocbuf (CORBA::ULong nelems);
   static void freebuf (CORBA_Policy **buffer);
-  
-  // Implement the TAO_Base_Sequence methods (see Sequence.h)
+    // The Base_Sequence functions, please see tao/Sequence.h
   virtual void _allocate_buffer (CORBA::ULong length);
   virtual void _deallocate_buffer (void);
   CORBA_Policy* *get_buffer (CORBA::Boolean orphan = 0);
   const CORBA_Policy* *get_buffer (void) const;
-  virtual void _shrink_buffer (
-      CORBA::ULong nl,
-      CORBA::ULong ol
-    );
-  
+    virtual void _shrink_buffer (CORBA::ULong nl, CORBA::ULong ol);
   virtual void _downcast (
       void* target,
       CORBA_Object *src,
@@ -656,6 +607,7 @@
         TAO_default_environment ()
     );
   virtual CORBA_Object* _upcast (void *src) const;
+
 };
 
 #endif /* end #if !defined */
@@ -666,11 +618,8 @@
 #if !defined (_CORBA_POLICYLIST_CH_)
 #define _CORBA_POLICYLIST_CH_
 
-class CORBA_PolicyList;
-class CORBA_PolicyList_var;
-
 // *************************************************************
-// CORBA_PolicyList
+// PolicyList
 // *************************************************************
 
 class TAO_Export CORBA_PolicyList : public 
@@ -697,7 +646,6 @@
   typedef CORBA_PolicyList_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
   
-  
 };
 
 #endif /* end #if !defined */
@@ -707,16 +655,16 @@
 #define _CORBA_POLICYLIST___VAR_CH_
 
 // *************************************************************
-// class CORBA_PolicyList_var
+// class CORBA::PolicyList_var
 // *************************************************************
 
 class TAO_Export CORBA_PolicyList_var
 {
 public:
-  CORBA_PolicyList_var (void);
+  CORBA_PolicyList_var (void); // default constructor
   CORBA_PolicyList_var (CORBA_PolicyList *);
-  CORBA_PolicyList_var (const CORBA_PolicyList_var &);
-  ~CORBA_PolicyList_var (void);
+  CORBA_PolicyList_var (const CORBA_PolicyList_var &); // copy constructor
+  ~CORBA_PolicyList_var (void); // destructor
   
   CORBA_PolicyList_var &operator= (CORBA_PolicyList *);
   CORBA_PolicyList_var &operator= (const CORBA_PolicyList_var &);
@@ -763,61 +711,49 @@
 
 private:
   CORBA_PolicyList *&ptr_;
-  // Assignment from T_var not allowed.
+  // assignment from T_var not allowed
   void operator= (const CORBA_PolicyList_var &);
 };
 
 
 #endif /* end #if !defined */
 
-extern TAO_Export CORBA::TypeCode_ptr  _tc_CORBA_PolicyList;
-
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CH_
 
-class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq
-  : public TAO_Unbounded_Base_Sequence
+  class TAO_EXPORT_NESTED_MACRO _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq : public TAO_Unbounded_Base_Sequence
 {
 public:
   // = Initialization and termination methods.
-  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (void);
+
+    _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (void); // Default constructor.
   _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (CORBA::ULong maximum); 
-  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (
-      CORBA::ULong maximum,
+    _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (CORBA::ULong maximum,
       CORBA::ULong length,
       CORBA::ULong *data,
-      CORBA::Boolean release = 0
-    );
-  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (
-      const _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &rhs
-    );
-  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &operator= (
-      const _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &rhs
-    );
-  virtual ~_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (void);
-  
+      CORBA::Boolean release = 0);
+    _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (const _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &rhs);
+    _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &operator= (const _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq &rhs);
+    virtual ~_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (void); // Dtor.
   // = Accessors.
   CORBA::ULong &operator[] (CORBA::ULong i);
   const CORBA::ULong &operator[] (CORBA::ULong i) const;
-  
   // = Static operations.
   static CORBA::ULong *allocbuf (CORBA::ULong size);
   static void freebuf (CORBA::ULong *buffer);
-  
-  // Implement the TAO_Base_Sequence methods (see Sequence.h)
   virtual void _allocate_buffer (CORBA::ULong length);
   virtual void _deallocate_buffer (void);
+    // Implement the TAO_Base_Sequence methods (see Sequence.h)
+
   CORBA::ULong *get_buffer (CORBA::Boolean orphan = 0);
   const CORBA::ULong *get_buffer (void) const;
-  void replace (
-      CORBA::ULong max,
+    void replace (CORBA::ULong max,
       CORBA::ULong length,
       CORBA::ULong *data,
-      CORBA::Boolean release
-    );
+      CORBA::Boolean release);
 };
 
 #endif /* end #if !defined */
@@ -832,7 +768,7 @@
 class CORBA_PolicyTypeSeq_var;
 
 // *************************************************************
-// CORBA_PolicyTypeSeq
+// PolicyTypeSeq
 // *************************************************************
 
 class TAO_Export CORBA_PolicyTypeSeq : public 
@@ -859,7 +795,6 @@
   typedef CORBA_PolicyTypeSeq_var _var_type;
 #endif /* ! __GNUC__ || g++ >= 2.8 */
   
-  
 };
 
 #endif /* end #if !defined */
@@ -869,23 +804,21 @@
 #define _CORBA_POLICYTYPESEQ___VAR_CH_
 
 // *************************************************************
-// class CORBA_PolicyTypeSeq_var
+// class CORBA::PolicyTypeSeq_var
 // *************************************************************
 
 class TAO_Export CORBA_PolicyTypeSeq_var
 {
 public:
-  CORBA_PolicyTypeSeq_var (void);
+  CORBA_PolicyTypeSeq_var (void); // default constructor
   CORBA_PolicyTypeSeq_var (CORBA_PolicyTypeSeq *);
-  CORBA_PolicyTypeSeq_var (const CORBA_PolicyTypeSeq_var &);
-  // Fixed-size base types only.
-  CORBA_PolicyTypeSeq_var (const CORBA_PolicyTypeSeq &);
-  ~CORBA_PolicyTypeSeq_var (void);
+  CORBA_PolicyTypeSeq_var (const CORBA_PolicyTypeSeq_var &); // copy constructor
+  CORBA_PolicyTypeSeq_var (const CORBA_PolicyTypeSeq &); // fixed-size base types only
+  ~CORBA_PolicyTypeSeq_var (void); // destructor
   
   CORBA_PolicyTypeSeq_var &operator= (CORBA_PolicyTypeSeq *);
   CORBA_PolicyTypeSeq_var &operator= (const CORBA_PolicyTypeSeq_var &);
-  // Fixed-size base types only.
-  CORBA_PolicyTypeSeq_var &operator= (const CORBA_PolicyTypeSeq &);
+  CORBA_PolicyTypeSeq_var &operator= (const CORBA_PolicyTypeSeq &); // fixed-size base types only
   CORBA_PolicyTypeSeq *operator-> (void);
   const CORBA_PolicyTypeSeq *operator-> (void) const;
   
@@ -929,24 +862,13 @@
 
 private:
   CORBA_PolicyTypeSeq *&ptr_;
-  // Assignment from T_var not allowed.
+  // assignment from T_var not allowed
   void operator= (const CORBA_PolicyTypeSeq_var &);
 };
 
 
 #endif /* end #if !defined */
 
-extern TAO_Export CORBA::TypeCode_ptr  _tc_CORBA_PolicyTypeSeq;
-
-
-#if !defined (_CORBA_POLICYMANAGER___PTR_CH_)
-#define _CORBA_POLICYMANAGER___PTR_CH_
-
-class CORBA_PolicyManager;
-typedef CORBA_PolicyManager *CORBA_PolicyManager_ptr;
-
-#endif /* end #if !defined */
-
 
 #if !defined (_CORBA_POLICYMANAGER___VAR_CH_)
 #define _CORBA_POLICYMANAGER___VAR_CH_
@@ -977,10 +899,7 @@
   static CORBA_PolicyManager_ptr duplicate (CORBA_PolicyManager_ptr);
   static void release (CORBA_PolicyManager_ptr);
   static CORBA_PolicyManager_ptr nil (void);
-  static CORBA_PolicyManager_ptr narrow (
-      CORBA::Object *,
-      CORBA::Environment &
-    );
+  static CORBA_PolicyManager_ptr narrow (CORBA::Object *, CORBA::Environment &);
   static CORBA::Object * upcast (void *);
 
 private:
@@ -1021,8 +940,7 @@
 #if !defined (_CORBA_POLICYMANAGER_CH_)
 #define _CORBA_POLICYMANAGER_CH_
 
-class TAO_Export CORBA_PolicyManager
-  : public virtual CORBA_Object
+class TAO_Export CORBA_PolicyManager : public virtual CORBA::Object
 {
 public:
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -1032,26 +950,23 @@
 
   // the static operations
   static CORBA_PolicyManager_ptr _duplicate (CORBA_PolicyManager_ptr obj);
-  
   static CORBA_PolicyManager_ptr _narrow (
       CORBA::Object_ptr obj,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   static CORBA_PolicyManager_ptr _unchecked_narrow (
       CORBA::Object_ptr obj,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   static CORBA_PolicyManager_ptr _nil (void)
     {
       return (CORBA_PolicyManager_ptr)0;
     }
   
-  virtual CORBA_PolicyList * get_policy_overrides (
-      const CORBA_PolicyTypeSeq & ts,
+  virtual CORBA::PolicyList * get_policy_overrides (
+      const CORBA::PolicyTypeSeq & ts,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     )
@@ -1060,14 +975,14 @@
     )) = 0;
   
   virtual void set_policy_overrides (
-      const CORBA_PolicyList & policies,
+      const CORBA::PolicyList & policies,
       CORBA::SetOverrideType set_add,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
       CORBA::SystemException,
-      CORBA_InvalidPolicies
+      CORBA::InvalidPolicies
     )) = 0;
   
   virtual void *_tao_QueryInterface (ptr_arith_t type);
@@ -1078,7 +993,6 @@
   CORBA_PolicyManager ();
   
   virtual ~CORBA_PolicyManager (void);
-
 private:
   CORBA_PolicyManager (const CORBA_PolicyManager &);
   void operator= (const CORBA_PolicyManager &);
@@ -1088,144 +1002,6 @@
 #endif /* end #if !defined */
 
 
-#if !defined (_CORBA_CURRENT___PTR_CH_)
-#define _CORBA_CURRENT___PTR_CH_
-
-class CORBA_Current;
-typedef CORBA_Current *CORBA_Current_ptr;
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT___VAR_CH_)
-#define _CORBA_CURRENT___VAR_CH_
-
-class TAO_Export CORBA_Current_var : public TAO_Base_var
-{
-public:
-  CORBA_Current_var (void); // default constructor
-  CORBA_Current_var (CORBA_Current_ptr p) : ptr_ (p) {} 
-  CORBA_Current_var (const CORBA_Current_var &); // copy constructor
-  ~CORBA_Current_var (void); // destructor
-  
-  CORBA_Current_var &operator= (CORBA_Current_ptr);
-  CORBA_Current_var &operator= (const CORBA_Current_var &);
-  CORBA_Current_ptr operator-> (void) const;
-  
-  operator const CORBA_Current_ptr &() const;
-  operator CORBA_Current_ptr &();
-  // in, inout, out, _retn 
-  CORBA_Current_ptr in (void) const;
-  CORBA_Current_ptr &inout (void);
-  CORBA_Current_ptr &out (void);
-  CORBA_Current_ptr _retn (void);
-  CORBA_Current_ptr ptr (void) const;
-  
-  // Hooks used by template sequence and object manager classes
-  // for non-defined forward declared interfaces.
-  static CORBA_Current_ptr duplicate (CORBA_Current_ptr);
-  static void release (CORBA_Current_ptr);
-  static CORBA_Current_ptr nil (void);
-  static CORBA_Current_ptr narrow (
-      CORBA::Object *,
-      CORBA::Environment &
-    );
-  static CORBA::Object * upcast (void *);
-
-private:
-  CORBA_Current_ptr ptr_;
-  // Unimplemented - prevents widening assignment.
-  CORBA_Current_var (const TAO_Base_var &rhs);
-  CORBA_Current_var &operator= (const TAO_Base_var &rhs);
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT___OUT_CH_)
-#define _CORBA_CURRENT___OUT_CH_
-
-class TAO_Export CORBA_Current_out
-{
-public:
-  CORBA_Current_out (CORBA_Current_ptr &);
-  CORBA_Current_out (CORBA_Current_var &);
-  CORBA_Current_out (const CORBA_Current_out &);
-  CORBA_Current_out &operator= (const CORBA_Current_out &);
-  CORBA_Current_out &operator= (const CORBA_Current_var &);
-  CORBA_Current_out &operator= (CORBA_Current_ptr);
-  operator CORBA_Current_ptr &();
-  CORBA_Current_ptr &ptr (void);
-  CORBA_Current_ptr operator-> (void);
-
-private:
-  CORBA_Current_ptr &ptr_;
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_CURRENT_CH_)
-#define _CORBA_CURRENT_CH_
-
-class TAO_Export CORBA_Current
-  : public virtual CORBA_Object
-{
-public:
-#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-  typedef CORBA_Current_ptr _ptr_type;
-  typedef CORBA_Current_var _var_type;
-#endif /* ! __GNUC__ || g++ >= 2.8 */
-
-  // the static operations
-  static CORBA_Current_ptr _duplicate (CORBA_Current_ptr obj);
-  
-  static CORBA_Current_ptr _narrow (
-      CORBA::Object_ptr obj,
-      CORBA::Environment &ACE_TRY_ENV = 
-        TAO_default_environment ()
-    );
-  
-  static CORBA_Current_ptr _unchecked_narrow (
-      CORBA::Object_ptr obj,
-      CORBA::Environment &ACE_TRY_ENV = 
-        TAO_default_environment ()
-    );
-  
-  static CORBA_Current_ptr _nil (void)
-    {
-      return (CORBA_Current_ptr)0;
-    }
-  
-  virtual void *_tao_QueryInterface (ptr_arith_t type);
-  
-  virtual const char* _interface_repository_id (void) const;
-
-protected:
-  CORBA_Current ();
-  
-  virtual ~CORBA_Current (void);
-
-private:
-  CORBA_Current (const CORBA_Current &);
-  void operator= (const CORBA_Current &);
-};
-
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_POLICYCURRENT___PTR_CH_)
-#define _CORBA_POLICYCURRENT___PTR_CH_
-
-class CORBA_PolicyCurrent;
-typedef CORBA_PolicyCurrent *CORBA_PolicyCurrent_ptr;
-
-#endif /* end #if !defined */
-
-
 #if !defined (_CORBA_POLICYCURRENT___VAR_CH_)
 #define _CORBA_POLICYCURRENT___VAR_CH_
 
@@ -1255,10 +1031,7 @@
   static CORBA_PolicyCurrent_ptr duplicate (CORBA_PolicyCurrent_ptr);
   static void release (CORBA_PolicyCurrent_ptr);
   static CORBA_PolicyCurrent_ptr nil (void);
-  static CORBA_PolicyCurrent_ptr narrow (
-      CORBA::Object *,
-      CORBA::Environment &
-    );
+  static CORBA_PolicyCurrent_ptr narrow (CORBA::Object *, CORBA::Environment &);
   static CORBA::Object * upcast (void *);
 
 private:
@@ -1299,9 +1072,7 @@
 #if !defined (_CORBA_POLICYCURRENT_CH_)
 #define _CORBA_POLICYCURRENT_CH_
 
-class TAO_Export CORBA_PolicyCurrent
-  : public virtual CORBA_PolicyManager, 
-    public virtual CORBA_Current
+class TAO_Export CORBA_PolicyCurrent: public virtual CORBA_PolicyManager, public virtual CORBA_Current
 {
 public:
 #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -1311,19 +1082,16 @@
 
   // the static operations
   static CORBA_PolicyCurrent_ptr _duplicate (CORBA_PolicyCurrent_ptr obj);
-  
   static CORBA_PolicyCurrent_ptr _narrow (
       CORBA::Object_ptr obj,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   static CORBA_PolicyCurrent_ptr _unchecked_narrow (
       CORBA::Object_ptr obj,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
     );
-  
   static CORBA_PolicyCurrent_ptr _nil (void)
     {
       return (CORBA_PolicyCurrent_ptr)0;
@@ -1337,7 +1105,6 @@
   CORBA_PolicyCurrent ();
   
   virtual ~CORBA_PolicyCurrent (void);
-
 private:
   CORBA_PolicyCurrent (const CORBA_PolicyCurrent &);
   void operator= (const CORBA_PolicyCurrent &);
@@ -1346,74 +1113,73 @@
 
 #endif /* end #if !defined */
 
+
 // Proxy Broker Factory function pointer declarations.
 
 extern TAO_Export
-_TAO_CORBA_Policy_Proxy_Broker *
-(*_TAO_CORBA_Policy_Proxy_Broker_Factory_function_pointer) (
+CORBA_TAO_Policy_Proxy_Broker *
+(*CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   );
 
+TAO_Export void operator<<= (CORBA::Any &, const CORBA::PolicyError &); // copying version
+TAO_Export void operator<<= (CORBA::Any &, CORBA::PolicyError*); // noncopying version
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::PolicyError *&); // deprecated
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::PolicyError *&);
+TAO_Export void operator<<= (CORBA::Any &, const CORBA::InvalidPolicies &); // copying version
+TAO_Export void operator<<= (CORBA::Any &, CORBA::InvalidPolicies*); // noncopying version
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::InvalidPolicies *&); // deprecated
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::InvalidPolicies *&);
+// Any operators for interface CORBA::Policy
+TAO_Export void operator<<= (CORBA::Any &, CORBA::Policy_ptr);
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::Policy *&);
+TAO_Export void operator<<= (CORBA::Any &, const CORBA::PolicyList &); // copying version
+TAO_Export void operator<<= (CORBA::Any &, CORBA::PolicyList*); // noncopying version
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::PolicyList *&); // deprecated
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::PolicyList *&);
+TAO_Export void operator<<= (CORBA::Any &, const CORBA::PolicyTypeSeq &); // copying version
+TAO_Export void operator<<= (CORBA::Any &, CORBA::PolicyTypeSeq*); // noncopying version
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::PolicyTypeSeq *&); // deprecated
+TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::PolicyTypeSeq *&);
 TAO_Export void operator<<= (CORBA::Any &, CORBA::SetOverrideType);
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::SetOverrideType &);
-TAO_Export void operator<<= (CORBA::Any &, const CORBA_PolicyError &); // copying version
-TAO_Export void operator<<= (CORBA::Any &, CORBA_PolicyError*); // noncopying version
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_PolicyError *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_PolicyError *&);
-TAO_Export void operator<<= (CORBA::Any &, const CORBA_InvalidPolicies &); // copying version
-TAO_Export void operator<<= (CORBA::Any &, CORBA_InvalidPolicies*); // noncopying version
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_InvalidPolicies *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_InvalidPolicies *&);
-// Any operators for interface CORBA_Policy
-TAO_Export void operator<<= (CORBA::Any &, CORBA_Policy_ptr);
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_Policy *&);
-TAO_Export void operator<<= (CORBA::Any &, const CORBA_PolicyList &); // copying version
-TAO_Export void operator<<= (CORBA::Any &, CORBA_PolicyList*); // noncopying version
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_PolicyList *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_PolicyList *&);
-TAO_Export void operator<<= (CORBA::Any &, const CORBA_PolicyTypeSeq &); // copying version
-TAO_Export void operator<<= (CORBA::Any &, CORBA_PolicyTypeSeq*); // noncopying version
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_PolicyTypeSeq *&); // deprecated
-TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_PolicyTypeSeq *&);
 
 #ifndef __ACE_INLINE__
 
-TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::SetOverrideType &); // 
-TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::SetOverrideType &);
-TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_PolicyError &);
-TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_PolicyError &);
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::PolicyError &);
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::PolicyError &);
 
-TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_InvalidPolicies &);
-TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_InvalidPolicies &);
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::InvalidPolicies &);
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::InvalidPolicies &);
 
 #if !defined _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_H_
 #define _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_H_
 
 TAO_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA_InvalidPolicies::_tao_seq_UShort &
+    const CORBA::InvalidPolicies::_tao_seq_UShort &
   );
 TAO_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA_InvalidPolicies::_tao_seq_UShort &
+    CORBA::InvalidPolicies::_tao_seq_UShort &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_H_ */
 
 
-TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA_Policy_ptr );
-TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA_Policy_ptr &);
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::Policy_ptr );
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::Policy_ptr &);
 
 #if !defined _TAO_CDR_OP_CORBA_PolicyList_H_
 #define _TAO_CDR_OP_CORBA_PolicyList_H_
 
 TAO_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA_PolicyList &
+    const CORBA::PolicyList &
   );
 TAO_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA_PolicyList &
+    CORBA::PolicyList &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_PolicyList_H_ */
@@ -1424,21 +1190,23 @@
 
 TAO_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA_PolicyTypeSeq &
+    const CORBA::PolicyTypeSeq &
   );
 TAO_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA_PolicyTypeSeq &
+    CORBA::PolicyTypeSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_PolicyTypeSeq_H_ */
 
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::SetOverrideType &); //
+TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::SetOverrideType &);
 
 #endif /* __ACE_INLINE__ */
 
 
 #if defined (__ACE_INLINE__)
-#include "PolicyC.i"
+#include "tao/PolicyC.i"
 #endif /* defined INLINE */
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
