--- orig/ImplRepoC.cpp	Sun Apr  1 16:33:09 2001
+++ ImplRepoC.cpp	Sun Apr  1 17:47:26 2001
@@ -23,6 +23,7 @@
 
 #include "tao/Stub.h"
 #include "tao/Invocation.h"
+#include "tao/PortableInterceptor.h"
 
 #if TAO_HAS_INTERCEPTORS == 1
 #include "tao/RequestInfo_Util.h"
@@ -38,7 +39,7 @@
 
 
 ///////////////////////////////////////////////////////////////////////
-//                Base & Remote Proxy  Implementation. 
+//                Base & Remote Proxy  Implementation.
 //
 
 ImplementationRepository::_TAO_ServerObject_Proxy_Impl::_TAO_ServerObject_Proxy_Impl (void)
@@ -57,15 +58,15 @@
     CORBA::SystemException
   ))
 {
-  
 
-  
-  
+
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "ping",
@@ -78,13 +79,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::ServerObject::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_ping ri (
         &_tao_call,
@@ -92,17 +93,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -110,7 +111,7 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
@@ -119,16 +120,16 @@
           _invoke_status =
             _tao_call.invoke (0, 0, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -145,10 +146,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -156,8 +157,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -176,7 +177,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -184,10 +185,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_ServerObject_Remote_Proxy_Impl::shutdown (
@@ -198,15 +199,15 @@
     CORBA::SystemException
   ))
 {
-  
 
-  
-  
+
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "shutdown",
@@ -219,13 +220,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::ServerObject::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_shutdown ri (
         &_tao_call,
@@ -233,17 +234,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -251,7 +252,7 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
@@ -260,16 +261,16 @@
           _invoke_status =
             _tao_call.invoke (0, 0, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -286,10 +287,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -297,8 +298,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -317,7 +318,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -325,15 +326,15 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 
 //
-//            End  Base & Remote  Proxy Implemeentation. 
+//            End  Base & Remote  Proxy Implemeentation.
 ///////////////////////////////////////////////////////////////////////
 
 
@@ -454,14 +455,14 @@
             stub,
             1,
             obj->_servant ()),
-            
+
           ServerObject::_nil ());
         }
       if (CORBA::is_nil (default_proxy))
         ACE_NEW_RETURN (default_proxy, ::ImplementationRepository::ServerObject (stub, 0, obj->_servant ()), ServerObject::_nil ());
         return default_proxy;
       }
-    else 
+    else
       return
         ACE_reinterpret_cast
           (
@@ -505,7 +506,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -523,10 +524,10 @@
     CORBA::SystemException
   ))
 {
-  _TAO_ServerObject_Proxy_Impl &proxy = 
+  _TAO_ServerObject_Proxy_Impl &proxy =
     this->the_TAO_ServerObject_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.ping (
       this,
       ACE_TRY_ENV
@@ -540,10 +541,10 @@
     CORBA::SystemException
   ))
 {
-  _TAO_ServerObject_Proxy_Impl &proxy = 
+  _TAO_ServerObject_Proxy_Impl &proxy =
     this->the_TAO_ServerObject_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.shutdown (
       this,
       ACE_TRY_ENV
@@ -555,7 +556,7 @@
 ImplementationRepository::ServerObject::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_ping::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_ping (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
 {}
@@ -568,7 +569,7 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return parameter_list;
 }
 
@@ -580,12 +581,12 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return exception_list;
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::ServerObject::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_ping::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -594,14 +595,14 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
 ImplementationRepository::ServerObject::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_shutdown::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_shutdown (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
 {}
@@ -614,7 +615,7 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return parameter_list;
 }
 
@@ -626,12 +627,12 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return exception_list;
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::ServerObject::TAO_ClientRequestInfo_ImplementationRepository_ServerObject_shutdown::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -640,7 +641,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -649,22 +650,22 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   46,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f536572), 
-  ACE_NTOHL (0x7665724f), 
-  ACE_NTOHL (0x626a6563), 
-  ACE_NTOHL (0x743a312e), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f536572),
+  ACE_NTOHL (0x7665724f),
+  ACE_NTOHL (0x626a6563),
+  ACE_NTOHL (0x743a312e),
   ACE_NTOHL (0x30000000),  // repository ID = IDL:ImplementationRepository/ServerObject:1.0
   13,
-  ACE_NTOHL (0x53657276), 
-  ACE_NTOHL (0x65724f62), 
-  ACE_NTOHL (0x6a656374), 
+  ACE_NTOHL (0x53657276),
+  ACE_NTOHL (0x65724f62),
+  ACE_NTOHL (0x6a656374),
   ACE_NTOHL (0x0),  // name = ServerObject
 };
 
@@ -685,36 +686,36 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   53,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f456e76), 
-  ACE_NTOHL (0x69726f6e), 
-  ACE_NTOHL (0x6d656e74), 
-  ACE_NTOHL (0x56617269), 
-  ACE_NTOHL (0x61626c65), 
-  ACE_NTOHL (0x3a312e30), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f456e76),
+  ACE_NTOHL (0x69726f6e),
+  ACE_NTOHL (0x6d656e74),
+  ACE_NTOHL (0x56617269),
+  ACE_NTOHL (0x61626c65),
+  ACE_NTOHL (0x3a312e30),
   ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentVariable:1.0
   20,
-  ACE_NTOHL (0x456e7669), 
-  ACE_NTOHL (0x726f6e6d), 
-  ACE_NTOHL (0x656e7456), 
-  ACE_NTOHL (0x61726961), 
+  ACE_NTOHL (0x456e7669),
+  ACE_NTOHL (0x726f6e6d),
+  ACE_NTOHL (0x656e7456),
+  ACE_NTOHL (0x61726961),
   ACE_NTOHL (0x626c6500),  // name = EnvironmentVariable
   2, // member count
   5,
-  ACE_NTOHL (0x6e616d65), 
+  ACE_NTOHL (0x6e616d65),
   ACE_NTOHL (0x0),  // name = name
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
   6,
-  ACE_NTOHL (0x76616c75), 
+  ACE_NTOHL (0x76616c75),
   ACE_NTOHL (0x65000000),  // name = value
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
 };
 
@@ -741,21 +742,21 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   41,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f416464), 
-  ACE_NTOHL (0x72657373), 
-  ACE_NTOHL (0x3a312e30), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f416464),
+  ACE_NTOHL (0x72657373),
+  ACE_NTOHL (0x3a312e30),
   ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/Address:1.0
   8,
-  ACE_NTOHL (0x41646472), 
+  ACE_NTOHL (0x41646472),
   ACE_NTOHL (0x65737300),  // name = Address
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
 };
 
@@ -774,7 +775,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-  
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CS_)
 #define __TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CS_
 
@@ -783,43 +784,43 @@
   {
     ImplementationRepository::EnvironmentVariable* tmp = 0;
     tmp = _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (length);
-    
+
     if (this->buffer_ != 0)
     {
       ImplementationRepository::EnvironmentVariable *old = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable *,this->buffer_);
-      
+
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp[i] = old[i];
-      
+
       if (this->release_)
         _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::freebuf (old);
-      
+
     }
     this->buffer_ = tmp;
   }
-  
+
   void
   ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::_deallocate_buffer (void)
   {
     if (this->buffer_ == 0 || this->release_ == 0)
       return;
-    
+
     ImplementationRepository::EnvironmentVariable *tmp = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable *,this->buffer_);
-    
+
     _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::freebuf (tmp);
     this->buffer_ = 0;
-  } 
-  
+  }
+
   ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::~_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList (void) // Dtor.
   {
     this->_deallocate_buffer ();
   }
-  
-  
+
+
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 
 #if !defined (_IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CS_)
 #define _IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CS_
@@ -831,30 +832,30 @@
 ImplementationRepository::EnvironmentList::EnvironmentList (void)
 {}
 ImplementationRepository::EnvironmentList::EnvironmentList (CORBA::ULong max) // uses max size
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<ImplementationRepository::EnvironmentVariable>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max)
 {}
 ImplementationRepository::EnvironmentList::EnvironmentList (CORBA::ULong max, CORBA::ULong length, ImplementationRepository::EnvironmentVariable *buffer, CORBA::Boolean release)
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<ImplementationRepository::EnvironmentVariable>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max, length, buffer, release)
 {}
 ImplementationRepository::EnvironmentList::EnvironmentList (const EnvironmentList &seq) // copy ctor
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<ImplementationRepository::EnvironmentVariable>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (seq)
 {}
 ImplementationRepository::EnvironmentList::~EnvironmentList (void) // dtor
@@ -872,23 +873,23 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   49,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f456e76), 
-  ACE_NTOHL (0x69726f6e), 
-  ACE_NTOHL (0x6d656e74), 
-  ACE_NTOHL (0x4c697374), 
-  ACE_NTOHL (0x3a312e30), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f456e76),
+  ACE_NTOHL (0x69726f6e),
+  ACE_NTOHL (0x6d656e74),
+  ACE_NTOHL (0x4c697374),
+  ACE_NTOHL (0x3a312e30),
   ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentList:1.0
   16,
-  ACE_NTOHL (0x456e7669), 
-  ACE_NTOHL (0x726f6e6d), 
-  ACE_NTOHL (0x656e744c), 
+  ACE_NTOHL (0x456e7669),
+  ACE_NTOHL (0x726f6e6d),
+  ACE_NTOHL (0x656e744c),
   ACE_NTOHL (0x69737400),  // name = EnvironmentList
   CORBA::tk_sequence, // typecode kind
   148, // encapsulation length
@@ -897,36 +898,36 @@
     132, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       53,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x496d706c), 
-      ACE_NTOHL (0x656d656e), 
-      ACE_NTOHL (0x74617469), 
-      ACE_NTOHL (0x6f6e5265), 
-      ACE_NTOHL (0x706f7369), 
-      ACE_NTOHL (0x746f7279), 
-      ACE_NTOHL (0x2f456e76), 
-      ACE_NTOHL (0x69726f6e), 
-      ACE_NTOHL (0x6d656e74), 
-      ACE_NTOHL (0x56617269), 
-      ACE_NTOHL (0x61626c65), 
-      ACE_NTOHL (0x3a312e30), 
+      ACE_NTOHL (0x49444c3a),
+      ACE_NTOHL (0x496d706c),
+      ACE_NTOHL (0x656d656e),
+      ACE_NTOHL (0x74617469),
+      ACE_NTOHL (0x6f6e5265),
+      ACE_NTOHL (0x706f7369),
+      ACE_NTOHL (0x746f7279),
+      ACE_NTOHL (0x2f456e76),
+      ACE_NTOHL (0x69726f6e),
+      ACE_NTOHL (0x6d656e74),
+      ACE_NTOHL (0x56617269),
+      ACE_NTOHL (0x61626c65),
+      ACE_NTOHL (0x3a312e30),
       ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentVariable:1.0
       20,
-      ACE_NTOHL (0x456e7669), 
-      ACE_NTOHL (0x726f6e6d), 
-      ACE_NTOHL (0x656e7456), 
-      ACE_NTOHL (0x61726961), 
+      ACE_NTOHL (0x456e7669),
+      ACE_NTOHL (0x726f6e6d),
+      ACE_NTOHL (0x656e7456),
+      ACE_NTOHL (0x61726961),
       ACE_NTOHL (0x626c6500),  // name = EnvironmentVariable
       2, // member count
       5,
-      ACE_NTOHL (0x6e616d65), 
+      ACE_NTOHL (0x6e616d65),
       ACE_NTOHL (0x0),  // name = name
-      CORBA::tk_string, 
+      CORBA::tk_string,
       0U, // string length
       6,
-      ACE_NTOHL (0x76616c75), 
+      ACE_NTOHL (0x76616c75),
       ACE_NTOHL (0x65000000),  // name = value
-      CORBA::tk_string, 
+      CORBA::tk_string,
       0U, // string length
 
     0U,
@@ -950,37 +951,37 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   48,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f416374), 
-  ACE_NTOHL (0x69766174), 
-  ACE_NTOHL (0x696f6e4d), 
-  ACE_NTOHL (0x6f64653a), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f416374),
+  ACE_NTOHL (0x69766174),
+  ACE_NTOHL (0x696f6e4d),
+  ACE_NTOHL (0x6f64653a),
   ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/ActivationMode:1.0
   15,
-  ACE_NTOHL (0x41637469), 
-  ACE_NTOHL (0x76617469), 
-  ACE_NTOHL (0x6f6e4d6f), 
+  ACE_NTOHL (0x41637469),
+  ACE_NTOHL (0x76617469),
+  ACE_NTOHL (0x6f6e4d6f),
   ACE_NTOHL (0x64650000),  // name = ActivationMode
   4, // member count
   7,
-  ACE_NTOHL (0x4e4f524d), 
+  ACE_NTOHL (0x4e4f524d),
   ACE_NTOHL (0x414c0000),  // name = NORMAL
   7,
-  ACE_NTOHL (0x4d414e55), 
+  ACE_NTOHL (0x4d414e55),
   ACE_NTOHL (0x414c0000),  // name = MANUAL
   11,
-  ACE_NTOHL (0x5045525f), 
-  ACE_NTOHL (0x434c4945), 
+  ACE_NTOHL (0x5045525f),
+  ACE_NTOHL (0x434c4945),
   ACE_NTOHL (0x4e540000),  // name = PER_CLIENT
   11,
-  ACE_NTOHL (0x4155544f), 
-  ACE_NTOHL (0x5f535441), 
+  ACE_NTOHL (0x4155544f),
+  ACE_NTOHL (0x5f535441),
   ACE_NTOHL (0x52540000),  // name = AUTO_START
 };
 
@@ -1001,56 +1002,56 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   48,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f537461), 
-  ACE_NTOHL (0x72747570), 
-  ACE_NTOHL (0x4f707469), 
-  ACE_NTOHL (0x6f6e733a), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f537461),
+  ACE_NTOHL (0x72747570),
+  ACE_NTOHL (0x4f707469),
+  ACE_NTOHL (0x6f6e733a),
   ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/StartupOptions:1.0
   15,
-  ACE_NTOHL (0x53746172), 
-  ACE_NTOHL (0x7475704f), 
-  ACE_NTOHL (0x7074696f), 
+  ACE_NTOHL (0x53746172),
+  ACE_NTOHL (0x7475704f),
+  ACE_NTOHL (0x7074696f),
   ACE_NTOHL (0x6e730000),  // name = StartupOptions
   4, // member count
   13,
-  ACE_NTOHL (0x636f6d6d), 
-  ACE_NTOHL (0x616e645f), 
-  ACE_NTOHL (0x6c696e65), 
+  ACE_NTOHL (0x636f6d6d),
+  ACE_NTOHL (0x616e645f),
+  ACE_NTOHL (0x6c696e65),
   ACE_NTOHL (0x0),  // name = command_line
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
   12,
-  ACE_NTOHL (0x656e7669), 
-  ACE_NTOHL (0x726f6e6d), 
+  ACE_NTOHL (0x656e7669),
+  ACE_NTOHL (0x726f6e6d),
   ACE_NTOHL (0x656e7400),  // name = environment
   CORBA::tk_alias, // typecode kind for typedefs
   236, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     49,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x496d706c), 
-    ACE_NTOHL (0x656d656e), 
-    ACE_NTOHL (0x74617469), 
-    ACE_NTOHL (0x6f6e5265), 
-    ACE_NTOHL (0x706f7369), 
-    ACE_NTOHL (0x746f7279), 
-    ACE_NTOHL (0x2f456e76), 
-    ACE_NTOHL (0x69726f6e), 
-    ACE_NTOHL (0x6d656e74), 
-    ACE_NTOHL (0x4c697374), 
-    ACE_NTOHL (0x3a312e30), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x496d706c),
+    ACE_NTOHL (0x656d656e),
+    ACE_NTOHL (0x74617469),
+    ACE_NTOHL (0x6f6e5265),
+    ACE_NTOHL (0x706f7369),
+    ACE_NTOHL (0x746f7279),
+    ACE_NTOHL (0x2f456e76),
+    ACE_NTOHL (0x69726f6e),
+    ACE_NTOHL (0x6d656e74),
+    ACE_NTOHL (0x4c697374),
+    ACE_NTOHL (0x3a312e30),
     ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentList:1.0
     16,
-    ACE_NTOHL (0x456e7669), 
-    ACE_NTOHL (0x726f6e6d), 
-    ACE_NTOHL (0x656e744c), 
+    ACE_NTOHL (0x456e7669),
+    ACE_NTOHL (0x726f6e6d),
+    ACE_NTOHL (0x656e744c),
     ACE_NTOHL (0x69737400),  // name = EnvironmentList
     CORBA::tk_sequence, // typecode kind
     148, // encapsulation length
@@ -1059,88 +1060,88 @@
       132, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         53,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x496d706c), 
-        ACE_NTOHL (0x656d656e), 
-        ACE_NTOHL (0x74617469), 
-        ACE_NTOHL (0x6f6e5265), 
-        ACE_NTOHL (0x706f7369), 
-        ACE_NTOHL (0x746f7279), 
-        ACE_NTOHL (0x2f456e76), 
-        ACE_NTOHL (0x69726f6e), 
-        ACE_NTOHL (0x6d656e74), 
-        ACE_NTOHL (0x56617269), 
-        ACE_NTOHL (0x61626c65), 
-        ACE_NTOHL (0x3a312e30), 
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x496d706c),
+        ACE_NTOHL (0x656d656e),
+        ACE_NTOHL (0x74617469),
+        ACE_NTOHL (0x6f6e5265),
+        ACE_NTOHL (0x706f7369),
+        ACE_NTOHL (0x746f7279),
+        ACE_NTOHL (0x2f456e76),
+        ACE_NTOHL (0x69726f6e),
+        ACE_NTOHL (0x6d656e74),
+        ACE_NTOHL (0x56617269),
+        ACE_NTOHL (0x61626c65),
+        ACE_NTOHL (0x3a312e30),
         ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentVariable:1.0
         20,
-        ACE_NTOHL (0x456e7669), 
-        ACE_NTOHL (0x726f6e6d), 
-        ACE_NTOHL (0x656e7456), 
-        ACE_NTOHL (0x61726961), 
+        ACE_NTOHL (0x456e7669),
+        ACE_NTOHL (0x726f6e6d),
+        ACE_NTOHL (0x656e7456),
+        ACE_NTOHL (0x61726961),
         ACE_NTOHL (0x626c6500),  // name = EnvironmentVariable
         2, // member count
         5,
-        ACE_NTOHL (0x6e616d65), 
+        ACE_NTOHL (0x6e616d65),
         ACE_NTOHL (0x0),  // name = name
-        CORBA::tk_string, 
+        CORBA::tk_string,
         0U, // string length
         6,
-        ACE_NTOHL (0x76616c75), 
+        ACE_NTOHL (0x76616c75),
         ACE_NTOHL (0x65000000),  // name = value
-        CORBA::tk_string, 
+        CORBA::tk_string,
         0U, // string length
 
       0U,
 
 
   18,
-  ACE_NTOHL (0x776f726b), 
-  ACE_NTOHL (0x696e675f), 
-  ACE_NTOHL (0x64697265), 
-  ACE_NTOHL (0x63746f72), 
+  ACE_NTOHL (0x776f726b),
+  ACE_NTOHL (0x696e675f),
+  ACE_NTOHL (0x64697265),
+  ACE_NTOHL (0x63746f72),
   ACE_NTOHL (0x79000000),  // name = working_directory
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
   11,
-  ACE_NTOHL (0x61637469), 
-  ACE_NTOHL (0x76617469), 
+  ACE_NTOHL (0x61637469),
+  ACE_NTOHL (0x76617469),
   ACE_NTOHL (0x6f6e0000),  // name = activation
   CORBA::tk_enum, // typecode kind
   136, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     48,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x496d706c), 
-    ACE_NTOHL (0x656d656e), 
-    ACE_NTOHL (0x74617469), 
-    ACE_NTOHL (0x6f6e5265), 
-    ACE_NTOHL (0x706f7369), 
-    ACE_NTOHL (0x746f7279), 
-    ACE_NTOHL (0x2f416374), 
-    ACE_NTOHL (0x69766174), 
-    ACE_NTOHL (0x696f6e4d), 
-    ACE_NTOHL (0x6f64653a), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x496d706c),
+    ACE_NTOHL (0x656d656e),
+    ACE_NTOHL (0x74617469),
+    ACE_NTOHL (0x6f6e5265),
+    ACE_NTOHL (0x706f7369),
+    ACE_NTOHL (0x746f7279),
+    ACE_NTOHL (0x2f416374),
+    ACE_NTOHL (0x69766174),
+    ACE_NTOHL (0x696f6e4d),
+    ACE_NTOHL (0x6f64653a),
     ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/ActivationMode:1.0
     15,
-    ACE_NTOHL (0x41637469), 
-    ACE_NTOHL (0x76617469), 
-    ACE_NTOHL (0x6f6e4d6f), 
+    ACE_NTOHL (0x41637469),
+    ACE_NTOHL (0x76617469),
+    ACE_NTOHL (0x6f6e4d6f),
     ACE_NTOHL (0x64650000),  // name = ActivationMode
     4, // member count
     7,
-    ACE_NTOHL (0x4e4f524d), 
+    ACE_NTOHL (0x4e4f524d),
     ACE_NTOHL (0x414c0000),  // name = NORMAL
     7,
-    ACE_NTOHL (0x4d414e55), 
+    ACE_NTOHL (0x4d414e55),
     ACE_NTOHL (0x414c0000),  // name = MANUAL
     11,
-    ACE_NTOHL (0x5045525f), 
-    ACE_NTOHL (0x434c4945), 
+    ACE_NTOHL (0x5045525f),
+    ACE_NTOHL (0x434c4945),
     ACE_NTOHL (0x4e540000),  // name = PER_CLIENT
     11,
-    ACE_NTOHL (0x4155544f), 
-    ACE_NTOHL (0x5f535441), 
+    ACE_NTOHL (0x4155544f),
+    ACE_NTOHL (0x5f535441),
     ACE_NTOHL (0x52540000),  // name = AUTO_START
 
 };
@@ -1168,95 +1169,95 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   51,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f536572), 
-  ACE_NTOHL (0x76657249), 
-  ACE_NTOHL (0x6e666f72), 
-  ACE_NTOHL (0x6d617469), 
-  ACE_NTOHL (0x6f6e3a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f536572),
+  ACE_NTOHL (0x76657249),
+  ACE_NTOHL (0x6e666f72),
+  ACE_NTOHL (0x6d617469),
+  ACE_NTOHL (0x6f6e3a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:ImplementationRepository/ServerInformation:1.0
   18,
-  ACE_NTOHL (0x53657276), 
-  ACE_NTOHL (0x6572496e), 
-  ACE_NTOHL (0x666f726d), 
-  ACE_NTOHL (0x6174696f), 
+  ACE_NTOHL (0x53657276),
+  ACE_NTOHL (0x6572496e),
+  ACE_NTOHL (0x666f726d),
+  ACE_NTOHL (0x6174696f),
   ACE_NTOHL (0x6e000000),  // name = ServerInformation
   4, // member count
   15,
-  ACE_NTOHL (0x6c6f6769), 
-  ACE_NTOHL (0x63616c5f), 
-  ACE_NTOHL (0x73657276), 
+  ACE_NTOHL (0x6c6f6769),
+  ACE_NTOHL (0x63616c5f),
+  ACE_NTOHL (0x73657276),
   ACE_NTOHL (0x65720000),  // name = logical_server
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
   7,
-  ACE_NTOHL (0x73657276), 
+  ACE_NTOHL (0x73657276),
   ACE_NTOHL (0x65720000),  // name = server
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
   8,
-  ACE_NTOHL (0x73746172), 
+  ACE_NTOHL (0x73746172),
   ACE_NTOHL (0x74757000),  // name = startup
   CORBA::tk_struct, // typecode kind
   560, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     48,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x496d706c), 
-    ACE_NTOHL (0x656d656e), 
-    ACE_NTOHL (0x74617469), 
-    ACE_NTOHL (0x6f6e5265), 
-    ACE_NTOHL (0x706f7369), 
-    ACE_NTOHL (0x746f7279), 
-    ACE_NTOHL (0x2f537461), 
-    ACE_NTOHL (0x72747570), 
-    ACE_NTOHL (0x4f707469), 
-    ACE_NTOHL (0x6f6e733a), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x496d706c),
+    ACE_NTOHL (0x656d656e),
+    ACE_NTOHL (0x74617469),
+    ACE_NTOHL (0x6f6e5265),
+    ACE_NTOHL (0x706f7369),
+    ACE_NTOHL (0x746f7279),
+    ACE_NTOHL (0x2f537461),
+    ACE_NTOHL (0x72747570),
+    ACE_NTOHL (0x4f707469),
+    ACE_NTOHL (0x6f6e733a),
     ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/StartupOptions:1.0
     15,
-    ACE_NTOHL (0x53746172), 
-    ACE_NTOHL (0x7475704f), 
-    ACE_NTOHL (0x7074696f), 
+    ACE_NTOHL (0x53746172),
+    ACE_NTOHL (0x7475704f),
+    ACE_NTOHL (0x7074696f),
     ACE_NTOHL (0x6e730000),  // name = StartupOptions
     4, // member count
     13,
-    ACE_NTOHL (0x636f6d6d), 
-    ACE_NTOHL (0x616e645f), 
-    ACE_NTOHL (0x6c696e65), 
+    ACE_NTOHL (0x636f6d6d),
+    ACE_NTOHL (0x616e645f),
+    ACE_NTOHL (0x6c696e65),
     ACE_NTOHL (0x0),  // name = command_line
-    CORBA::tk_string, 
+    CORBA::tk_string,
     0U, // string length
     12,
-    ACE_NTOHL (0x656e7669), 
-    ACE_NTOHL (0x726f6e6d), 
+    ACE_NTOHL (0x656e7669),
+    ACE_NTOHL (0x726f6e6d),
     ACE_NTOHL (0x656e7400),  // name = environment
     CORBA::tk_alias, // typecode kind for typedefs
     236, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       49,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x496d706c), 
-      ACE_NTOHL (0x656d656e), 
-      ACE_NTOHL (0x74617469), 
-      ACE_NTOHL (0x6f6e5265), 
-      ACE_NTOHL (0x706f7369), 
-      ACE_NTOHL (0x746f7279), 
-      ACE_NTOHL (0x2f456e76), 
-      ACE_NTOHL (0x69726f6e), 
-      ACE_NTOHL (0x6d656e74), 
-      ACE_NTOHL (0x4c697374), 
-      ACE_NTOHL (0x3a312e30), 
+      ACE_NTOHL (0x49444c3a),
+      ACE_NTOHL (0x496d706c),
+      ACE_NTOHL (0x656d656e),
+      ACE_NTOHL (0x74617469),
+      ACE_NTOHL (0x6f6e5265),
+      ACE_NTOHL (0x706f7369),
+      ACE_NTOHL (0x746f7279),
+      ACE_NTOHL (0x2f456e76),
+      ACE_NTOHL (0x69726f6e),
+      ACE_NTOHL (0x6d656e74),
+      ACE_NTOHL (0x4c697374),
+      ACE_NTOHL (0x3a312e30),
       ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentList:1.0
       16,
-      ACE_NTOHL (0x456e7669), 
-      ACE_NTOHL (0x726f6e6d), 
-      ACE_NTOHL (0x656e744c), 
+      ACE_NTOHL (0x456e7669),
+      ACE_NTOHL (0x726f6e6d),
+      ACE_NTOHL (0x656e744c),
       ACE_NTOHL (0x69737400),  // name = EnvironmentList
       CORBA::tk_sequence, // typecode kind
       148, // encapsulation length
@@ -1265,114 +1266,114 @@
         132, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           53,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x496d706c), 
-          ACE_NTOHL (0x656d656e), 
-          ACE_NTOHL (0x74617469), 
-          ACE_NTOHL (0x6f6e5265), 
-          ACE_NTOHL (0x706f7369), 
-          ACE_NTOHL (0x746f7279), 
-          ACE_NTOHL (0x2f456e76), 
-          ACE_NTOHL (0x69726f6e), 
-          ACE_NTOHL (0x6d656e74), 
-          ACE_NTOHL (0x56617269), 
-          ACE_NTOHL (0x61626c65), 
-          ACE_NTOHL (0x3a312e30), 
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x496d706c),
+          ACE_NTOHL (0x656d656e),
+          ACE_NTOHL (0x74617469),
+          ACE_NTOHL (0x6f6e5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x2f456e76),
+          ACE_NTOHL (0x69726f6e),
+          ACE_NTOHL (0x6d656e74),
+          ACE_NTOHL (0x56617269),
+          ACE_NTOHL (0x61626c65),
+          ACE_NTOHL (0x3a312e30),
           ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentVariable:1.0
           20,
-          ACE_NTOHL (0x456e7669), 
-          ACE_NTOHL (0x726f6e6d), 
-          ACE_NTOHL (0x656e7456), 
-          ACE_NTOHL (0x61726961), 
+          ACE_NTOHL (0x456e7669),
+          ACE_NTOHL (0x726f6e6d),
+          ACE_NTOHL (0x656e7456),
+          ACE_NTOHL (0x61726961),
           ACE_NTOHL (0x626c6500),  // name = EnvironmentVariable
           2, // member count
           5,
-          ACE_NTOHL (0x6e616d65), 
+          ACE_NTOHL (0x6e616d65),
           ACE_NTOHL (0x0),  // name = name
-          CORBA::tk_string, 
+          CORBA::tk_string,
           0U, // string length
           6,
-          ACE_NTOHL (0x76616c75), 
+          ACE_NTOHL (0x76616c75),
           ACE_NTOHL (0x65000000),  // name = value
-          CORBA::tk_string, 
+          CORBA::tk_string,
           0U, // string length
 
         0U,
 
 
     18,
-    ACE_NTOHL (0x776f726b), 
-    ACE_NTOHL (0x696e675f), 
-    ACE_NTOHL (0x64697265), 
-    ACE_NTOHL (0x63746f72), 
+    ACE_NTOHL (0x776f726b),
+    ACE_NTOHL (0x696e675f),
+    ACE_NTOHL (0x64697265),
+    ACE_NTOHL (0x63746f72),
     ACE_NTOHL (0x79000000),  // name = working_directory
-    CORBA::tk_string, 
+    CORBA::tk_string,
     0U, // string length
     11,
-    ACE_NTOHL (0x61637469), 
-    ACE_NTOHL (0x76617469), 
+    ACE_NTOHL (0x61637469),
+    ACE_NTOHL (0x76617469),
     ACE_NTOHL (0x6f6e0000),  // name = activation
     CORBA::tk_enum, // typecode kind
     136, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       48,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x496d706c), 
-      ACE_NTOHL (0x656d656e), 
-      ACE_NTOHL (0x74617469), 
-      ACE_NTOHL (0x6f6e5265), 
-      ACE_NTOHL (0x706f7369), 
-      ACE_NTOHL (0x746f7279), 
-      ACE_NTOHL (0x2f416374), 
-      ACE_NTOHL (0x69766174), 
-      ACE_NTOHL (0x696f6e4d), 
-      ACE_NTOHL (0x6f64653a), 
+      ACE_NTOHL (0x49444c3a),
+      ACE_NTOHL (0x496d706c),
+      ACE_NTOHL (0x656d656e),
+      ACE_NTOHL (0x74617469),
+      ACE_NTOHL (0x6f6e5265),
+      ACE_NTOHL (0x706f7369),
+      ACE_NTOHL (0x746f7279),
+      ACE_NTOHL (0x2f416374),
+      ACE_NTOHL (0x69766174),
+      ACE_NTOHL (0x696f6e4d),
+      ACE_NTOHL (0x6f64653a),
       ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/ActivationMode:1.0
       15,
-      ACE_NTOHL (0x41637469), 
-      ACE_NTOHL (0x76617469), 
-      ACE_NTOHL (0x6f6e4d6f), 
+      ACE_NTOHL (0x41637469),
+      ACE_NTOHL (0x76617469),
+      ACE_NTOHL (0x6f6e4d6f),
       ACE_NTOHL (0x64650000),  // name = ActivationMode
       4, // member count
       7,
-      ACE_NTOHL (0x4e4f524d), 
+      ACE_NTOHL (0x4e4f524d),
       ACE_NTOHL (0x414c0000),  // name = NORMAL
       7,
-      ACE_NTOHL (0x4d414e55), 
+      ACE_NTOHL (0x4d414e55),
       ACE_NTOHL (0x414c0000),  // name = MANUAL
       11,
-      ACE_NTOHL (0x5045525f), 
-      ACE_NTOHL (0x434c4945), 
+      ACE_NTOHL (0x5045525f),
+      ACE_NTOHL (0x434c4945),
       ACE_NTOHL (0x4e540000),  // name = PER_CLIENT
       11,
-      ACE_NTOHL (0x4155544f), 
-      ACE_NTOHL (0x5f535441), 
+      ACE_NTOHL (0x4155544f),
+      ACE_NTOHL (0x5f535441),
       ACE_NTOHL (0x52540000),  // name = AUTO_START
 
 
   9,
-  ACE_NTOHL (0x6c6f6361), 
-  ACE_NTOHL (0x74696f6e), 
+  ACE_NTOHL (0x6c6f6361),
+  ACE_NTOHL (0x74696f6e),
   ACE_NTOHL (0x0),  // name = location
   CORBA::tk_alias, // typecode kind for typedefs
   72, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     41,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x496d706c), 
-    ACE_NTOHL (0x656d656e), 
-    ACE_NTOHL (0x74617469), 
-    ACE_NTOHL (0x6f6e5265), 
-    ACE_NTOHL (0x706f7369), 
-    ACE_NTOHL (0x746f7279), 
-    ACE_NTOHL (0x2f416464), 
-    ACE_NTOHL (0x72657373), 
-    ACE_NTOHL (0x3a312e30), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x496d706c),
+    ACE_NTOHL (0x656d656e),
+    ACE_NTOHL (0x74617469),
+    ACE_NTOHL (0x6f6e5265),
+    ACE_NTOHL (0x706f7369),
+    ACE_NTOHL (0x746f7279),
+    ACE_NTOHL (0x2f416464),
+    ACE_NTOHL (0x72657373),
+    ACE_NTOHL (0x3a312e30),
     ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/Address:1.0
     8,
-    ACE_NTOHL (0x41646472), 
+    ACE_NTOHL (0x41646472),
     ACE_NTOHL (0x65737300),  // name = Address
-    CORBA::tk_string, 
+    CORBA::tk_string,
     0U, // string length
 
 };
@@ -1398,7 +1399,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-  
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CS_)
 #define __TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CS_
 
@@ -1407,43 +1408,43 @@
   {
     ImplementationRepository::ServerInformation* tmp = 0;
     tmp = _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (length);
-    
+
     if (this->buffer_ != 0)
     {
       ImplementationRepository::ServerInformation *old = ACE_reinterpret_cast (ImplementationRepository::ServerInformation *,this->buffer_);
-      
+
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp[i] = old[i];
-      
+
       if (this->release_)
         _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::freebuf (old);
-      
+
     }
     this->buffer_ = tmp;
   }
-  
+
   void
   ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::_deallocate_buffer (void)
   {
     if (this->buffer_ == 0 || this->release_ == 0)
       return;
-    
+
     ImplementationRepository::ServerInformation *tmp = ACE_reinterpret_cast (ImplementationRepository::ServerInformation *,this->buffer_);
-    
+
     _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::freebuf (tmp);
     this->buffer_ = 0;
-  } 
-  
+  }
+
   ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::~_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList (void) // Dtor.
   {
     this->_deallocate_buffer ();
   }
-  
-  
+
+
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 
 #if !defined (_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CS_)
 #define _IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CS_
@@ -1455,30 +1456,30 @@
 ImplementationRepository::ServerInformationList::ServerInformationList (void)
 {}
 ImplementationRepository::ServerInformationList::ServerInformationList (CORBA::ULong max) // uses max size
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<ImplementationRepository::ServerInformation>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max)
 {}
 ImplementationRepository::ServerInformationList::ServerInformationList (CORBA::ULong max, CORBA::ULong length, ImplementationRepository::ServerInformation *buffer, CORBA::Boolean release)
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<ImplementationRepository::ServerInformation>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max, length, buffer, release)
 {}
 ImplementationRepository::ServerInformationList::ServerInformationList (const ServerInformationList &seq) // copy ctor
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<ImplementationRepository::ServerInformation>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (seq)
 {}
 ImplementationRepository::ServerInformationList::~ServerInformationList (void) // dtor
@@ -1496,26 +1497,26 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   55,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f536572), 
-  ACE_NTOHL (0x76657249), 
-  ACE_NTOHL (0x6e666f72), 
-  ACE_NTOHL (0x6d617469), 
-  ACE_NTOHL (0x6f6e4c69), 
-  ACE_NTOHL (0x73743a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f536572),
+  ACE_NTOHL (0x76657249),
+  ACE_NTOHL (0x6e666f72),
+  ACE_NTOHL (0x6d617469),
+  ACE_NTOHL (0x6f6e4c69),
+  ACE_NTOHL (0x73743a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:ImplementationRepository/ServerInformationList:1.0
   22,
-  ACE_NTOHL (0x53657276), 
-  ACE_NTOHL (0x6572496e), 
-  ACE_NTOHL (0x666f726d), 
-  ACE_NTOHL (0x6174696f), 
-  ACE_NTOHL (0x6e4c6973), 
+  ACE_NTOHL (0x53657276),
+  ACE_NTOHL (0x6572496e),
+  ACE_NTOHL (0x666f726d),
+  ACE_NTOHL (0x6174696f),
+  ACE_NTOHL (0x6e4c6973),
   ACE_NTOHL (0x74000000),  // name = ServerInformationList
   CORBA::tk_sequence, // typecode kind
   828, // encapsulation length
@@ -1524,95 +1525,95 @@
     812, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       51,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x496d706c), 
-      ACE_NTOHL (0x656d656e), 
-      ACE_NTOHL (0x74617469), 
-      ACE_NTOHL (0x6f6e5265), 
-      ACE_NTOHL (0x706f7369), 
-      ACE_NTOHL (0x746f7279), 
-      ACE_NTOHL (0x2f536572), 
-      ACE_NTOHL (0x76657249), 
-      ACE_NTOHL (0x6e666f72), 
-      ACE_NTOHL (0x6d617469), 
-      ACE_NTOHL (0x6f6e3a31), 
+      ACE_NTOHL (0x49444c3a),
+      ACE_NTOHL (0x496d706c),
+      ACE_NTOHL (0x656d656e),
+      ACE_NTOHL (0x74617469),
+      ACE_NTOHL (0x6f6e5265),
+      ACE_NTOHL (0x706f7369),
+      ACE_NTOHL (0x746f7279),
+      ACE_NTOHL (0x2f536572),
+      ACE_NTOHL (0x76657249),
+      ACE_NTOHL (0x6e666f72),
+      ACE_NTOHL (0x6d617469),
+      ACE_NTOHL (0x6f6e3a31),
       ACE_NTOHL (0x2e300000),  // repository ID = IDL:ImplementationRepository/ServerInformation:1.0
       18,
-      ACE_NTOHL (0x53657276), 
-      ACE_NTOHL (0x6572496e), 
-      ACE_NTOHL (0x666f726d), 
-      ACE_NTOHL (0x6174696f), 
+      ACE_NTOHL (0x53657276),
+      ACE_NTOHL (0x6572496e),
+      ACE_NTOHL (0x666f726d),
+      ACE_NTOHL (0x6174696f),
       ACE_NTOHL (0x6e000000),  // name = ServerInformation
       4, // member count
       15,
-      ACE_NTOHL (0x6c6f6769), 
-      ACE_NTOHL (0x63616c5f), 
-      ACE_NTOHL (0x73657276), 
+      ACE_NTOHL (0x6c6f6769),
+      ACE_NTOHL (0x63616c5f),
+      ACE_NTOHL (0x73657276),
       ACE_NTOHL (0x65720000),  // name = logical_server
-      CORBA::tk_string, 
+      CORBA::tk_string,
       0U, // string length
       7,
-      ACE_NTOHL (0x73657276), 
+      ACE_NTOHL (0x73657276),
       ACE_NTOHL (0x65720000),  // name = server
-      CORBA::tk_string, 
+      CORBA::tk_string,
       0U, // string length
       8,
-      ACE_NTOHL (0x73746172), 
+      ACE_NTOHL (0x73746172),
       ACE_NTOHL (0x74757000),  // name = startup
       CORBA::tk_struct, // typecode kind
       560, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         48,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x496d706c), 
-        ACE_NTOHL (0x656d656e), 
-        ACE_NTOHL (0x74617469), 
-        ACE_NTOHL (0x6f6e5265), 
-        ACE_NTOHL (0x706f7369), 
-        ACE_NTOHL (0x746f7279), 
-        ACE_NTOHL (0x2f537461), 
-        ACE_NTOHL (0x72747570), 
-        ACE_NTOHL (0x4f707469), 
-        ACE_NTOHL (0x6f6e733a), 
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x496d706c),
+        ACE_NTOHL (0x656d656e),
+        ACE_NTOHL (0x74617469),
+        ACE_NTOHL (0x6f6e5265),
+        ACE_NTOHL (0x706f7369),
+        ACE_NTOHL (0x746f7279),
+        ACE_NTOHL (0x2f537461),
+        ACE_NTOHL (0x72747570),
+        ACE_NTOHL (0x4f707469),
+        ACE_NTOHL (0x6f6e733a),
         ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/StartupOptions:1.0
         15,
-        ACE_NTOHL (0x53746172), 
-        ACE_NTOHL (0x7475704f), 
-        ACE_NTOHL (0x7074696f), 
+        ACE_NTOHL (0x53746172),
+        ACE_NTOHL (0x7475704f),
+        ACE_NTOHL (0x7074696f),
         ACE_NTOHL (0x6e730000),  // name = StartupOptions
         4, // member count
         13,
-        ACE_NTOHL (0x636f6d6d), 
-        ACE_NTOHL (0x616e645f), 
-        ACE_NTOHL (0x6c696e65), 
+        ACE_NTOHL (0x636f6d6d),
+        ACE_NTOHL (0x616e645f),
+        ACE_NTOHL (0x6c696e65),
         ACE_NTOHL (0x0),  // name = command_line
-        CORBA::tk_string, 
+        CORBA::tk_string,
         0U, // string length
         12,
-        ACE_NTOHL (0x656e7669), 
-        ACE_NTOHL (0x726f6e6d), 
+        ACE_NTOHL (0x656e7669),
+        ACE_NTOHL (0x726f6e6d),
         ACE_NTOHL (0x656e7400),  // name = environment
         CORBA::tk_alias, // typecode kind for typedefs
         236, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           49,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x496d706c), 
-          ACE_NTOHL (0x656d656e), 
-          ACE_NTOHL (0x74617469), 
-          ACE_NTOHL (0x6f6e5265), 
-          ACE_NTOHL (0x706f7369), 
-          ACE_NTOHL (0x746f7279), 
-          ACE_NTOHL (0x2f456e76), 
-          ACE_NTOHL (0x69726f6e), 
-          ACE_NTOHL (0x6d656e74), 
-          ACE_NTOHL (0x4c697374), 
-          ACE_NTOHL (0x3a312e30), 
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x496d706c),
+          ACE_NTOHL (0x656d656e),
+          ACE_NTOHL (0x74617469),
+          ACE_NTOHL (0x6f6e5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x2f456e76),
+          ACE_NTOHL (0x69726f6e),
+          ACE_NTOHL (0x6d656e74),
+          ACE_NTOHL (0x4c697374),
+          ACE_NTOHL (0x3a312e30),
           ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentList:1.0
           16,
-          ACE_NTOHL (0x456e7669), 
-          ACE_NTOHL (0x726f6e6d), 
-          ACE_NTOHL (0x656e744c), 
+          ACE_NTOHL (0x456e7669),
+          ACE_NTOHL (0x726f6e6d),
+          ACE_NTOHL (0x656e744c),
           ACE_NTOHL (0x69737400),  // name = EnvironmentList
           CORBA::tk_sequence, // typecode kind
           148, // encapsulation length
@@ -1621,114 +1622,114 @@
             132, // encapsulation length
               TAO_ENCAP_BYTE_ORDER, // byte order
               53,
-              ACE_NTOHL (0x49444c3a), 
-              ACE_NTOHL (0x496d706c), 
-              ACE_NTOHL (0x656d656e), 
-              ACE_NTOHL (0x74617469), 
-              ACE_NTOHL (0x6f6e5265), 
-              ACE_NTOHL (0x706f7369), 
-              ACE_NTOHL (0x746f7279), 
-              ACE_NTOHL (0x2f456e76), 
-              ACE_NTOHL (0x69726f6e), 
-              ACE_NTOHL (0x6d656e74), 
-              ACE_NTOHL (0x56617269), 
-              ACE_NTOHL (0x61626c65), 
-              ACE_NTOHL (0x3a312e30), 
+              ACE_NTOHL (0x49444c3a),
+              ACE_NTOHL (0x496d706c),
+              ACE_NTOHL (0x656d656e),
+              ACE_NTOHL (0x74617469),
+              ACE_NTOHL (0x6f6e5265),
+              ACE_NTOHL (0x706f7369),
+              ACE_NTOHL (0x746f7279),
+              ACE_NTOHL (0x2f456e76),
+              ACE_NTOHL (0x69726f6e),
+              ACE_NTOHL (0x6d656e74),
+              ACE_NTOHL (0x56617269),
+              ACE_NTOHL (0x61626c65),
+              ACE_NTOHL (0x3a312e30),
               ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/EnvironmentVariable:1.0
               20,
-              ACE_NTOHL (0x456e7669), 
-              ACE_NTOHL (0x726f6e6d), 
-              ACE_NTOHL (0x656e7456), 
-              ACE_NTOHL (0x61726961), 
+              ACE_NTOHL (0x456e7669),
+              ACE_NTOHL (0x726f6e6d),
+              ACE_NTOHL (0x656e7456),
+              ACE_NTOHL (0x61726961),
               ACE_NTOHL (0x626c6500),  // name = EnvironmentVariable
               2, // member count
               5,
-              ACE_NTOHL (0x6e616d65), 
+              ACE_NTOHL (0x6e616d65),
               ACE_NTOHL (0x0),  // name = name
-              CORBA::tk_string, 
+              CORBA::tk_string,
               0U, // string length
               6,
-              ACE_NTOHL (0x76616c75), 
+              ACE_NTOHL (0x76616c75),
               ACE_NTOHL (0x65000000),  // name = value
-              CORBA::tk_string, 
+              CORBA::tk_string,
               0U, // string length
 
             0U,
 
 
         18,
-        ACE_NTOHL (0x776f726b), 
-        ACE_NTOHL (0x696e675f), 
-        ACE_NTOHL (0x64697265), 
-        ACE_NTOHL (0x63746f72), 
+        ACE_NTOHL (0x776f726b),
+        ACE_NTOHL (0x696e675f),
+        ACE_NTOHL (0x64697265),
+        ACE_NTOHL (0x63746f72),
         ACE_NTOHL (0x79000000),  // name = working_directory
-        CORBA::tk_string, 
+        CORBA::tk_string,
         0U, // string length
         11,
-        ACE_NTOHL (0x61637469), 
-        ACE_NTOHL (0x76617469), 
+        ACE_NTOHL (0x61637469),
+        ACE_NTOHL (0x76617469),
         ACE_NTOHL (0x6f6e0000),  // name = activation
         CORBA::tk_enum, // typecode kind
         136, // encapsulation length
           TAO_ENCAP_BYTE_ORDER, // byte order
           48,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x496d706c), 
-          ACE_NTOHL (0x656d656e), 
-          ACE_NTOHL (0x74617469), 
-          ACE_NTOHL (0x6f6e5265), 
-          ACE_NTOHL (0x706f7369), 
-          ACE_NTOHL (0x746f7279), 
-          ACE_NTOHL (0x2f416374), 
-          ACE_NTOHL (0x69766174), 
-          ACE_NTOHL (0x696f6e4d), 
-          ACE_NTOHL (0x6f64653a), 
+          ACE_NTOHL (0x49444c3a),
+          ACE_NTOHL (0x496d706c),
+          ACE_NTOHL (0x656d656e),
+          ACE_NTOHL (0x74617469),
+          ACE_NTOHL (0x6f6e5265),
+          ACE_NTOHL (0x706f7369),
+          ACE_NTOHL (0x746f7279),
+          ACE_NTOHL (0x2f416374),
+          ACE_NTOHL (0x69766174),
+          ACE_NTOHL (0x696f6e4d),
+          ACE_NTOHL (0x6f64653a),
           ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/ActivationMode:1.0
           15,
-          ACE_NTOHL (0x41637469), 
-          ACE_NTOHL (0x76617469), 
-          ACE_NTOHL (0x6f6e4d6f), 
+          ACE_NTOHL (0x41637469),
+          ACE_NTOHL (0x76617469),
+          ACE_NTOHL (0x6f6e4d6f),
           ACE_NTOHL (0x64650000),  // name = ActivationMode
           4, // member count
           7,
-          ACE_NTOHL (0x4e4f524d), 
+          ACE_NTOHL (0x4e4f524d),
           ACE_NTOHL (0x414c0000),  // name = NORMAL
           7,
-          ACE_NTOHL (0x4d414e55), 
+          ACE_NTOHL (0x4d414e55),
           ACE_NTOHL (0x414c0000),  // name = MANUAL
           11,
-          ACE_NTOHL (0x5045525f), 
-          ACE_NTOHL (0x434c4945), 
+          ACE_NTOHL (0x5045525f),
+          ACE_NTOHL (0x434c4945),
           ACE_NTOHL (0x4e540000),  // name = PER_CLIENT
           11,
-          ACE_NTOHL (0x4155544f), 
-          ACE_NTOHL (0x5f535441), 
+          ACE_NTOHL (0x4155544f),
+          ACE_NTOHL (0x5f535441),
           ACE_NTOHL (0x52540000),  // name = AUTO_START
 
 
       9,
-      ACE_NTOHL (0x6c6f6361), 
-      ACE_NTOHL (0x74696f6e), 
+      ACE_NTOHL (0x6c6f6361),
+      ACE_NTOHL (0x74696f6e),
       ACE_NTOHL (0x0),  // name = location
       CORBA::tk_alias, // typecode kind for typedefs
       72, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         41,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x496d706c), 
-        ACE_NTOHL (0x656d656e), 
-        ACE_NTOHL (0x74617469), 
-        ACE_NTOHL (0x6f6e5265), 
-        ACE_NTOHL (0x706f7369), 
-        ACE_NTOHL (0x746f7279), 
-        ACE_NTOHL (0x2f416464), 
-        ACE_NTOHL (0x72657373), 
-        ACE_NTOHL (0x3a312e30), 
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x496d706c),
+        ACE_NTOHL (0x656d656e),
+        ACE_NTOHL (0x74617469),
+        ACE_NTOHL (0x6f6e5265),
+        ACE_NTOHL (0x706f7369),
+        ACE_NTOHL (0x746f7279),
+        ACE_NTOHL (0x2f416464),
+        ACE_NTOHL (0x72657373),
+        ACE_NTOHL (0x3a312e30),
         ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/Address:1.0
         8,
-        ACE_NTOHL (0x41646472), 
+        ACE_NTOHL (0x41646472),
         ACE_NTOHL (0x65737300),  // name = Address
-        CORBA::tk_string, 
+        CORBA::tk_string,
         0U, // string length
 
 
@@ -1751,7 +1752,7 @@
 
 
 ///////////////////////////////////////////////////////////////////////
-//                Base & Remote Proxy  Implementation. 
+//                Base & Remote Proxy  Implementation.
 //
 
 ImplementationRepository::_TAO_Administration_Proxy_Impl::_TAO_Administration_Proxy_Impl (void)
@@ -1773,21 +1774,21 @@
     ImplementationRepository::Administration::CannotActivate
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_activate_server_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_activate_server_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc},
     {ImplementationRepository::Administration::_tc_CannotActivate, ImplementationRepository::Administration::CannotActivate::_alloc}
   };
 
 
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "activate_server",
@@ -1800,13 +1801,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_activate_server ri (
         &_tao_call,
@@ -1815,17 +1816,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -1833,13 +1834,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server)
@@ -1847,20 +1848,20 @@
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_activate_server_exceptiondata, 2, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -1877,10 +1878,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -1888,8 +1889,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -1908,7 +1909,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -1916,10 +1917,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::register_server (
@@ -1933,20 +1934,20 @@
     ImplementationRepository::Administration::AlreadyRegistered
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_register_server_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_register_server_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_AlreadyRegistered, ImplementationRepository::Administration::AlreadyRegistered::_alloc}
   };
 
 
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "register_server",
@@ -1959,13 +1960,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_register_server ri (
         &_tao_call,
@@ -1975,17 +1976,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -1993,13 +1994,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server) &&
@@ -2008,20 +2009,20 @@
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_register_server_exceptiondata, 1, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -2038,10 +2039,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -2049,8 +2050,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -2069,7 +2070,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -2077,10 +2078,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::reregister_server (
@@ -2093,15 +2094,15 @@
     CORBA::SystemException
   ))
 {
-  
 
-  
-  
+
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "reregister_server",
@@ -2114,13 +2115,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_reregister_server ri (
         &_tao_call,
@@ -2130,17 +2131,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -2148,13 +2149,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server) &&
@@ -2163,20 +2164,20 @@
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (0, 0, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -2193,10 +2194,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -2204,8 +2205,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -2224,7 +2225,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -2232,10 +2233,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::remove_server (
@@ -2248,20 +2249,20 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_remove_server_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_remove_server_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
 
 
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "remove_server",
@@ -2274,13 +2275,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_remove_server ri (
         &_tao_call,
@@ -2289,17 +2290,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -2307,13 +2308,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server)
@@ -2321,20 +2322,20 @@
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_remove_server_exceptiondata, 1, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -2351,10 +2352,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -2362,8 +2363,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -2382,7 +2383,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -2390,10 +2391,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::shutdown_server (
@@ -2406,20 +2407,20 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_shutdown_server_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_shutdown_server_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
 
 
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "shutdown_server",
@@ -2432,13 +2433,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_shutdown_server ri (
         &_tao_call,
@@ -2447,17 +2448,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -2465,13 +2466,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server)
@@ -2479,20 +2480,20 @@
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_shutdown_server_exceptiondata, 1, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -2509,10 +2510,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -2520,8 +2521,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -2540,7 +2541,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -2548,10 +2549,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 char * ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::server_is_running (
@@ -2566,20 +2567,20 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_running_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_running_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
 
   CORBA::String_var _tao_safe_retval;
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "server_is_running",
@@ -2592,13 +2593,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_server_is_running ri (
         &_tao_call,
@@ -2609,17 +2610,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK_RETURN (0);
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK_RETURN (0);
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -2627,13 +2628,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK_RETURN (0);
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK_RETURN (0);
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server) &&
@@ -2644,20 +2645,20 @@
               CORBA::MARSHAL (),
               0
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_server_is_running_exceptiondata, 1, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK_RETURN (0);
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW_RETURN (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                 0
               );
-              
+
             }
-          
+
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
                             (_tao_in >> _tao_safe_retval.inout ())
@@ -2667,15 +2668,15 @@
                 CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                 0
               );
-              
+
             }
-          
+
           TAO_INTERCEPTOR (
               char * _tao_retval_info = _tao_safe_retval._retn ();
               ri.result (_tao_retval_info);
               _tao_safe_retval = _tao_retval_info;
             );
-          
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -2692,10 +2693,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK_RETURN (0);
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -2703,8 +2704,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -2723,7 +2724,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK_RETURN (0);
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -2731,7 +2732,7 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
   return _tao_safe_retval._retn ();
@@ -2747,20 +2748,20 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_shutting_down_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_shutting_down_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
 
 
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "server_is_shutting_down",
@@ -2773,13 +2774,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_server_is_shutting_down ri (
         &_tao_call,
@@ -2788,17 +2789,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -2806,13 +2807,13 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
                             (_tao_out << server)
@@ -2820,20 +2821,20 @@
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_server_is_shutting_down_exceptiondata, 1, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -2850,10 +2851,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -2861,8 +2862,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -2881,7 +2882,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -2889,10 +2890,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::find (
@@ -2906,20 +2907,20 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_find_exceptiondata [] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_find_exceptiondata [] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
 
 
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   ACE_NEW (info.ptr (), ImplementationRepository::ServerInformation);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
@@ -2933,13 +2934,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_find ri (
         &_tao_call,
@@ -2948,17 +2949,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -2966,33 +2967,33 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
-                            (_tao_out << server)              
+                            (_tao_out << server)
             ))
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (_tao_ImplementationRepository_Administration_find_exceptiondata, 1, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
+
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
                                           (_tao_in >> *info.ptr ())
@@ -3001,9 +3002,9 @@
               TAO_INTERCEPTOR_THROW (
                 CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -3020,10 +3021,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -3031,8 +3032,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -3051,7 +3052,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -3059,10 +3060,10 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 void ImplementationRepository::_TAO_Administration_Remote_Proxy_Impl::list (
@@ -3076,15 +3077,15 @@
     CORBA::SystemException
   ))
 {
-  
 
-  
-  
+
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   ACE_NEW (server_list.ptr (), ImplementationRepository::ServerInformationList);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
@@ -3098,33 +3099,33 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_list ri (
         &_tao_call,
         _collocated_tao_target_,
-        how_many        
+        how_many
 ,
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -3132,33 +3133,33 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK;
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
-                            (_tao_out << how_many)                            
+                            (_tao_out << how_many)
             ))
             TAO_INTERCEPTOR_THROW (
               CORBA::MARSHAL ()
             );
-            
+
           _invoke_status =
             _tao_call.invoke (0, 0, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
+
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
                                           (_tao_in >> *server_list.ptr ()) &&
@@ -3168,9 +3169,9 @@
               TAO_INTERCEPTOR_THROW (
                 CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -3187,10 +3188,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -3198,8 +3199,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -3218,7 +3219,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -3226,15 +3227,15 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 
 //
-//            End  Base & Remote  Proxy Implemeentation. 
+//            End  Base & Remote  Proxy Implemeentation.
 ///////////////////////////////////////////////////////////////////////
 
 
@@ -3355,14 +3356,14 @@
             stub,
             1,
             obj->_servant ()),
-            
+
           Administration::_nil ());
         }
       if (CORBA::is_nil (default_proxy))
         ACE_NEW_RETURN (default_proxy, ::ImplementationRepository::Administration (stub, 0, obj->_servant ()), Administration::_nil ());
         return default_proxy;
       }
-    else 
+    else
       return
         ACE_reinterpret_cast
           (
@@ -3406,7 +3407,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -3476,7 +3477,7 @@
     {
       return;
     }
-  
+
   ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -3489,7 +3490,7 @@
     {
       return;
     }
-  
+
   ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -3505,28 +3506,28 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   66,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f41646d), 
-  ACE_NTOHL (0x696e6973), 
-  ACE_NTOHL (0x74726174), 
-  ACE_NTOHL (0x696f6e2f), 
-  ACE_NTOHL (0x416c7265), 
-  ACE_NTOHL (0x61647952), 
-  ACE_NTOHL (0x65676973), 
-  ACE_NTOHL (0x74657265), 
-  ACE_NTOHL (0x643a312e), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f41646d),
+  ACE_NTOHL (0x696e6973),
+  ACE_NTOHL (0x74726174),
+  ACE_NTOHL (0x696f6e2f),
+  ACE_NTOHL (0x416c7265),
+  ACE_NTOHL (0x61647952),
+  ACE_NTOHL (0x65676973),
+  ACE_NTOHL (0x74657265),
+  ACE_NTOHL (0x643a312e),
   ACE_NTOHL (0x30000000),  // repository ID = IDL:ImplementationRepository/Administration/AlreadyRegistered:1.0
   18,
-  ACE_NTOHL (0x416c7265), 
-  ACE_NTOHL (0x61647952), 
-  ACE_NTOHL (0x65676973), 
-  ACE_NTOHL (0x74657265), 
+  ACE_NTOHL (0x416c7265),
+  ACE_NTOHL (0x61647952),
+  ACE_NTOHL (0x65676973),
+  ACE_NTOHL (0x74657265),
   ACE_NTOHL (0x64000000),  // name = AlreadyRegistered
   0, // member count
 };
@@ -3610,7 +3611,7 @@
     {
       return;
     }
-  
+
   ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -3623,7 +3624,7 @@
     {
       return;
     }
-  
+
   ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -3647,32 +3648,32 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   63,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f41646d), 
-  ACE_NTOHL (0x696e6973), 
-  ACE_NTOHL (0x74726174), 
-  ACE_NTOHL (0x696f6e2f), 
-  ACE_NTOHL (0x43616e6e), 
-  ACE_NTOHL (0x6f744163), 
-  ACE_NTOHL (0x74697661), 
-  ACE_NTOHL (0x74653a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f41646d),
+  ACE_NTOHL (0x696e6973),
+  ACE_NTOHL (0x74726174),
+  ACE_NTOHL (0x696f6e2f),
+  ACE_NTOHL (0x43616e6e),
+  ACE_NTOHL (0x6f744163),
+  ACE_NTOHL (0x74697661),
+  ACE_NTOHL (0x74653a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:ImplementationRepository/Administration/CannotActivate:1.0
   15,
-  ACE_NTOHL (0x43616e6e), 
-  ACE_NTOHL (0x6f744163), 
-  ACE_NTOHL (0x74697661), 
+  ACE_NTOHL (0x43616e6e),
+  ACE_NTOHL (0x6f744163),
+  ACE_NTOHL (0x74697661),
   ACE_NTOHL (0x74650000),  // name = CannotActivate
   1, // member count
   7,
-  ACE_NTOHL (0x72656173), 
+  ACE_NTOHL (0x72656173),
   ACE_NTOHL (0x6f6e0000),  // name = reason
-  CORBA::tk_string, 
+  CORBA::tk_string,
   0U, // string length
 };
 
@@ -3753,7 +3754,7 @@
     {
       return;
     }
-  
+
   ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -3766,7 +3767,7 @@
     {
       return;
     }
-  
+
   ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -3782,24 +3783,24 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   57,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f41646d), 
-  ACE_NTOHL (0x696e6973), 
-  ACE_NTOHL (0x74726174), 
-  ACE_NTOHL (0x696f6e2f), 
-  ACE_NTOHL (0x4e6f7446), 
-  ACE_NTOHL (0x6f756e64), 
-  ACE_NTOHL (0x3a312e30), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f41646d),
+  ACE_NTOHL (0x696e6973),
+  ACE_NTOHL (0x74726174),
+  ACE_NTOHL (0x696f6e2f),
+  ACE_NTOHL (0x4e6f7446),
+  ACE_NTOHL (0x6f756e64),
+  ACE_NTOHL (0x3a312e30),
   ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/Administration/NotFound:1.0
   9,
-  ACE_NTOHL (0x4e6f7446), 
-  ACE_NTOHL (0x6f756e64), 
+  ACE_NTOHL (0x4e6f7446),
+  ACE_NTOHL (0x6f756e64),
   ACE_NTOHL (0x0),  // name = NotFound
   0, // member count
 };
@@ -3832,10 +3833,10 @@
     ImplementationRepository::Administration::CannotActivate
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.activate_server (
       this,
       server,
@@ -3853,10 +3854,10 @@
     ImplementationRepository::Administration::AlreadyRegistered
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.register_server (
       this,
       server,
@@ -3874,10 +3875,10 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.reregister_server (
       this,
       server,
@@ -3895,10 +3896,10 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.remove_server (
       this,
       server,
@@ -3915,10 +3916,10 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.shutdown_server (
       this,
       server,
@@ -3937,10 +3938,10 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return proxy.server_is_running (
       this,
       server,
@@ -3959,10 +3960,10 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.server_is_shutting_down (
       this,
       server,
@@ -3980,10 +3981,10 @@
     ImplementationRepository::Administration::NotFound
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.find (
       this,
       server,
@@ -4002,10 +4003,10 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Administration_Proxy_Impl &proxy = 
+  _TAO_Administration_Proxy_Impl &proxy =
     this->the_TAO_Administration_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.list (
       this,
       how_many,
@@ -4021,7 +4022,7 @@
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     const char * server,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server)
@@ -4035,14 +4036,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4054,15 +4055,15 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_activate_server_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_activate_server_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc},
     {ImplementationRepository::Administration::_tc_CannotActivate, ImplementationRepository::Administration::CannotActivate::_alloc}
   };
-  
+
   exception_list->length (2);
   for (CORBA::ULong i = 0; i < 2; ++i)
     {
@@ -4075,7 +4076,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_activate_server::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4084,7 +4085,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4093,7 +4094,7 @@
     CORBA::Object_ptr _tao_target,
     const char * server,
     const ImplementationRepository::StartupOptions & options,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server),
@@ -4108,20 +4109,20 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-    
+
   CORBA::ULong length_options = parameter_list->length ();
   parameter_list->length (length_options + 1);
   (*parameter_list)[length_options].argument <<=  this->options_;
-  
+
   (*parameter_list)[length_options].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4133,14 +4134,14 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_register_server_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_register_server_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_AlreadyRegistered, ImplementationRepository::Administration::AlreadyRegistered::_alloc}
   };
-  
+
   exception_list->length (1);
   for (CORBA::ULong i = 0; i < 1; ++i)
     {
@@ -4153,7 +4154,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_register_server::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4162,7 +4163,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4171,7 +4172,7 @@
     CORBA::Object_ptr _tao_target,
     const char * server,
     const ImplementationRepository::StartupOptions & options,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server),
@@ -4186,20 +4187,20 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-    
+
   CORBA::ULong length_options = parameter_list->length ();
   parameter_list->length (length_options + 1);
   (*parameter_list)[length_options].argument <<=  this->options_;
-  
+
   (*parameter_list)[length_options].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4211,12 +4212,12 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return exception_list;
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_reregister_server::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4225,7 +4226,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4233,7 +4234,7 @@
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     const char * server,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server)
@@ -4247,14 +4248,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4266,14 +4267,14 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_remove_server_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_remove_server_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
-  
+
   exception_list->length (1);
   for (CORBA::ULong i = 0; i < 1; ++i)
     {
@@ -4286,7 +4287,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_remove_server::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4295,7 +4296,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4303,7 +4304,7 @@
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     const char * server,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server)
@@ -4317,14 +4318,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4336,14 +4337,14 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_shutdown_server_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_shutdown_server_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
-  
+
   exception_list->length (1);
   for (CORBA::ULong i = 0; i < 1; ++i)
     {
@@ -4356,7 +4357,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_shutdown_server::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4365,7 +4366,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4375,7 +4376,7 @@
     const char * server,
     const char * addr,
     ImplementationRepository::ServerObject_ptr server_object,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server),
@@ -4391,25 +4392,25 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-    
+
   CORBA::ULong length_addr = parameter_list->length ();
   parameter_list->length (length_addr + 1);
   (*parameter_list)[length_addr].argument <<= addr_;
   (*parameter_list)[length_addr].mode = Dynamic::PARAM_IN;
-    
+
   CORBA::ULong length_server_object = parameter_list->length ();
   parameter_list->length (length_server_object + 1);
   (*parameter_list)[length_server_object].argument <<=  this->server_object_;
-  
+
   (*parameter_list)[length_server_object].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4421,14 +4422,14 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_running_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_running_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
-  
+
   exception_list->length (1);
   for (CORBA::ULong i = 0; i < 1; ++i)
     {
@@ -4441,7 +4442,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_server_is_running::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4450,17 +4451,17 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   CORBA::Any_var safe_result_any = result_any;
-  
+
   (*result_any) <<= this->_result;
   return safe_result_any._retn ();
 }
 
-void 
+void
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_server_is_running::result (char * result)
 {
-  // update the result 
+  // update the result
   this->_result = result;
 }
 
@@ -4468,7 +4469,7 @@
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     const char * server,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server)
@@ -4482,14 +4483,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4501,14 +4502,14 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_shutting_down_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_server_is_shutting_down_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
-  
+
   exception_list->length (1);
   for (CORBA::ULong i = 0; i < 1; ++i)
     {
@@ -4521,7 +4522,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_server_is_shutting_down::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4530,7 +4531,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4538,7 +4539,7 @@
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     const char * server,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     server_ (server)
@@ -4552,14 +4553,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_server = parameter_list->length ();
   parameter_list->length (length_server + 1);
   (*parameter_list)[length_server].argument <<= server_;
   (*parameter_list)[length_server].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -4571,14 +4572,14 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ExceptionList_var safe_exception_list = exception_list;
-    
-  static TAO_Exception_Data _tao_ImplementationRepository_Administration_find_exceptiondata[] = 
+
+  static TAO_Exception_Data _tao_ImplementationRepository_Administration_find_exceptiondata[] =
   {
     {ImplementationRepository::Administration::_tc_NotFound, ImplementationRepository::Administration::NotFound::_alloc}
   };
-  
+
   exception_list->length (1);
   for (CORBA::ULong i = 0; i < 1; ++i)
     {
@@ -4591,7 +4592,7 @@
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_find::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4600,16 +4601,16 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_list::TAO_ClientRequestInfo_ImplementationRepository_Administration_list (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const CORBA::ULong & how_many    
+    const CORBA::ULong & how_many
 ,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     how_many_ (how_many)
@@ -4624,14 +4625,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_how_many = parameter_list->length ();
   parameter_list->length (length_how_many + 1);
   (*parameter_list)[length_how_many].argument <<= how_many_;
   (*parameter_list)[length_how_many].mode = Dynamic::PARAM_IN;
-    
+
 
   return safe_parameter_list._retn ();
 }
@@ -4644,12 +4645,12 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return exception_list;
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::Administration::TAO_ClientRequestInfo_ImplementationRepository_Administration_list::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -4658,7 +4659,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -4667,22 +4668,22 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   48,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f41646d), 
-  ACE_NTOHL (0x696e6973), 
-  ACE_NTOHL (0x74726174), 
-  ACE_NTOHL (0x696f6e3a), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f41646d),
+  ACE_NTOHL (0x696e6973),
+  ACE_NTOHL (0x74726174),
+  ACE_NTOHL (0x696f6e3a),
   ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/Administration:1.0
   15,
-  ACE_NTOHL (0x41646d69), 
-  ACE_NTOHL (0x6e697374), 
-  ACE_NTOHL (0x72617469), 
+  ACE_NTOHL (0x41646d69),
+  ACE_NTOHL (0x6e697374),
+  ACE_NTOHL (0x72617469),
   ACE_NTOHL (0x6f6e0000),  // name = Administration
 };
 
@@ -4701,7 +4702,7 @@
 
 
 ///////////////////////////////////////////////////////////////////////
-//                Base & Remote Proxy  Implementation. 
+//                Base & Remote Proxy  Implementation.
 //
 
 ImplementationRepository::_TAO_ServerInformationIterator_Proxy_Impl::_TAO_ServerInformationIterator_Proxy_Impl (void)
@@ -4722,15 +4723,15 @@
     CORBA::SystemException
   ))
 {
-  
+
   CORBA::Boolean _tao_retval = 0;
-  
-  
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);
 
-  
+
   ACE_NEW_RETURN (server_list.ptr (), ImplementationRepository::ServerInformationList, 0);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
@@ -4744,13 +4745,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::ServerInformationIterator::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_next_n ri (
         &_tao_call,
@@ -4759,17 +4760,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK_RETURN  (_tao_retval);
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -4777,35 +4778,35 @@
             )
           );
           TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
             );
           TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
-          
+
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
-                            (_tao_out << how_many)              
+                            (_tao_out << how_many)
             ))
             TAO_INTERCEPTOR_THROW_RETURN (
               CORBA::MARSHAL (),
               _tao_retval
             );
-            
+
           _invoke_status =
             _tao_call.invoke (0, 0, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW_RETURN (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                 _tao_retval
               );
-              
+
             }
-          
+
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
                             (_tao_in >> CORBA::Any::to_boolean (_tao_retval)) &&
@@ -4816,14 +4817,14 @@
                 CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                 _tao_retval
               );
-              
+
             }
-          
+
           TAO_INTERCEPTOR (
               CORBA::Boolean  _tao_retval_info = _tao_retval;
                ri.result (_tao_retval_info);
             );
-          
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -4840,10 +4841,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -4851,8 +4852,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -4871,7 +4872,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK_RETURN  (_tao_retval);
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -4879,7 +4880,7 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
   return _tao_retval;
@@ -4893,15 +4894,15 @@
     CORBA::SystemException
   ))
 {
-  
 
-  
-  
+
+
+
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
     ACE_THROW (CORBA::INTERNAL ());
 
-  
+
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "destroy",
@@ -4914,13 +4915,13 @@
   TAO_ClientRequestInterceptor_Adapter _tao_vfr (
       istub->orb_core ()->client_request_interceptors ()
     );
-  
+
 #endif  /* TAO_HAS_INTERCEPTORS */
-  
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
-      
+
 #if TAO_HAS_INTERCEPTORS == 1
       ImplementationRepository::ServerInformationIterator::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_destroy ri (
         &_tao_call,
@@ -4928,17 +4929,17 @@
         ACE_TRY_ENV
       );
       ACE_CHECK;
-      
+
       ACE_TRY
         {
 #endif /* TAO_HAS_INTERCEPTORS */
-        
+
           _tao_call.start (ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
           TAO_INTERCEPTOR (ri.response_expected (1));
-          
+
           TAO_INTERCEPTOR (
             _tao_vfr.send_request (
               &ri,
@@ -4946,7 +4947,7 @@
             )
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag),
               ACE_TRY_ENV
@@ -4955,16 +4956,16 @@
           _invoke_status =
             _tao_call.invoke (0, 0, ACE_TRY_ENV);
           TAO_INTERCEPTOR_CHECK;
-          
+
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
                 CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
-              
+
             }
-          
-          
+
+
           TAO_INTERCEPTOR (
             ri.reply_status (_invoke_status);
             if (_invoke_status == TAO_INVOKE_OK)
@@ -4981,10 +4982,10 @@
                   ACE_TRY_ENV
                 );
               }
-            
+
           );
           TAO_INTERCEPTOR_CHECK;
-          
+
 #if TAO_HAS_INTERCEPTORS == 1
         }
       ACE_CATCH (PortableInterceptor::ForwardRequest, exc)
@@ -4992,8 +4993,8 @@
           _invoke_status =
             _tao_call.location_forward (exc.forward.in (), ACE_TRY_ENV);
           ACE_TRY_CHECK;
-          
-          ri.forward_reference (exc); 
+
+          ri.forward_reference (exc);
           _tao_vfr.receive_other (
             &ri,
             ACE_TRY_ENV
@@ -5012,7 +5013,7 @@
         }
       ACE_ENDTRY;
       ACE_CHECK;
-      
+
 #endif /* TAO_HAS_INTERCEPTORS */
 
       if (_invoke_status == TAO_INVOKE_RESTART)
@@ -5020,15 +5021,15 @@
           _tao_call.restart_flag (1);
           continue;
         }
-      
+
       break;
     }
-  
+
 }
 
 
 //
-//            End  Base & Remote  Proxy Implemeentation. 
+//            End  Base & Remote  Proxy Implemeentation.
 ///////////////////////////////////////////////////////////////////////
 
 
@@ -5149,14 +5150,14 @@
             stub,
             1,
             obj->_servant ()),
-            
+
           ServerInformationIterator::_nil ());
         }
       if (CORBA::is_nil (default_proxy))
         ACE_NEW_RETURN (default_proxy, ::ImplementationRepository::ServerInformationIterator (stub, 0, obj->_servant ()), ServerInformationIterator::_nil ());
         return default_proxy;
       }
-    else 
+    else
       return
         ACE_reinterpret_cast
           (
@@ -5200,7 +5201,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -5220,10 +5221,10 @@
     CORBA::SystemException
   ))
 {
-  _TAO_ServerInformationIterator_Proxy_Impl &proxy = 
+  _TAO_ServerInformationIterator_Proxy_Impl &proxy =
     this->the_TAO_ServerInformationIterator_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return proxy.next_n (
       this,
       how_many,
@@ -5239,10 +5240,10 @@
     CORBA::SystemException
   ))
 {
-  _TAO_ServerInformationIterator_Proxy_Impl &proxy = 
+  _TAO_ServerInformationIterator_Proxy_Impl &proxy =
     this->the_TAO_ServerInformationIterator_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   proxy.destroy (
       this,
       ACE_TRY_ENV
@@ -5255,7 +5256,7 @@
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     const CORBA::ULong & how_many,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
     how_many_ (how_many)
@@ -5269,14 +5270,14 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
-    
+
   CORBA::ULong length_how_many = parameter_list->length ();
   parameter_list->length (length_how_many + 1);
   (*parameter_list)[length_how_many].argument <<= how_many_;
   (*parameter_list)[length_how_many].mode = Dynamic::PARAM_IN;
-  
+
   return safe_parameter_list._retn ();
 }
 
@@ -5288,12 +5289,12 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return exception_list;
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::ServerInformationIterator::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_next_n::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -5302,24 +5303,24 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   CORBA::Any_var safe_result_any = result_any;
-  
+
   (*result_any) <<= CORBA::Any::from_boolean (this->_result);
   return safe_result_any._retn ();
 }
 
-void 
+void
 ImplementationRepository::ServerInformationIterator::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_next_n::result (CORBA::Boolean result)
 {
-  // update the result 
+  // update the result
   this->_result = result;
 }
 
 ImplementationRepository::ServerInformationIterator::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_destroy::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_destroy (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    CORBA::Environment &    
+    CORBA::Environment &
   )
   : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
 {}
@@ -5332,7 +5333,7 @@
   Dynamic::ParameterList *parameter_list =
     TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return parameter_list;
 }
 
@@ -5344,12 +5345,12 @@
   Dynamic::ExceptionList *exception_list =
     TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return exception_list;
 }
 
 
-CORBA::Any * 
+CORBA::Any *
 ImplementationRepository::ServerInformationIterator::TAO_ClientRequestInfo_ImplementationRepository_ServerInformationIterator_destroy::result (CORBA::Environment &ACE_TRY_ENV)
   ACE_THROW_SPEC ((CORBA::SystemException))
 {
@@ -5358,7 +5359,7 @@
   CORBA::Any *result_any =
     TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
-  
+
   return result_any;
 }
 
@@ -5367,28 +5368,28 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   59,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x496d706c), 
-  ACE_NTOHL (0x656d656e), 
-  ACE_NTOHL (0x74617469), 
-  ACE_NTOHL (0x6f6e5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x2f536572), 
-  ACE_NTOHL (0x76657249), 
-  ACE_NTOHL (0x6e666f72), 
-  ACE_NTOHL (0x6d617469), 
-  ACE_NTOHL (0x6f6e4974), 
-  ACE_NTOHL (0x65726174), 
-  ACE_NTOHL (0x6f723a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x496d706c),
+  ACE_NTOHL (0x656d656e),
+  ACE_NTOHL (0x74617469),
+  ACE_NTOHL (0x6f6e5265),
+  ACE_NTOHL (0x706f7369),
+  ACE_NTOHL (0x746f7279),
+  ACE_NTOHL (0x2f536572),
+  ACE_NTOHL (0x76657249),
+  ACE_NTOHL (0x6e666f72),
+  ACE_NTOHL (0x6d617469),
+  ACE_NTOHL (0x6f6e4974),
+  ACE_NTOHL (0x65726174),
+  ACE_NTOHL (0x6f723a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:ImplementationRepository/ServerInformationIterator:1.0
   26,
-  ACE_NTOHL (0x53657276), 
-  ACE_NTOHL (0x6572496e), 
-  ACE_NTOHL (0x666f726d), 
-  ACE_NTOHL (0x6174696f), 
-  ACE_NTOHL (0x6e497465), 
-  ACE_NTOHL (0x7261746f), 
+  ACE_NTOHL (0x53657276),
+  ACE_NTOHL (0x6572496e),
+  ACE_NTOHL (0x666f726d),
+  ACE_NTOHL (0x6174696f),
+  ACE_NTOHL (0x6e497465),
+  ACE_NTOHL (0x7261746f),
   ACE_NTOHL (0x72000000),  // name = ServerInformationIterator
 };
 
@@ -5411,7 +5412,7 @@
   if (stream << _tao_elem)
   {
     _tao_any._tao_replace (
-        ImplementationRepository::_tc_ServerObject, 
+        ImplementationRepository::_tc_ServerObject,
         TAO_ENCAP_BYTE_ORDER,
         stream.begin (),
         1,
@@ -5427,13 +5428,13 @@
   {
     _tao_elem = ImplementationRepository::ServerObject::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_ServerObject, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
@@ -5502,13 +5503,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_EnvironmentVariable, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
@@ -5593,13 +5594,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_EnvironmentList, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
@@ -5656,13 +5657,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_ActivationMode, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
@@ -5716,13 +5717,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_StartupOptions, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
@@ -5799,13 +5800,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_ServerInformation, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
@@ -5890,13 +5891,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_ServerInformationList, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
@@ -5943,7 +5944,7 @@
   if (stream << _tao_elem)
   {
     _tao_any._tao_replace (
-        ImplementationRepository::_tc_Administration, 
+        ImplementationRepository::_tc_Administration,
         TAO_ENCAP_BYTE_ORDER,
         stream.begin (),
         1,
@@ -5959,13 +5960,13 @@
   {
     _tao_elem = ImplementationRepository::Administration::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_Administration, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
@@ -6037,13 +6038,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::Administration::_tc_AlreadyRegistered, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = (ImplementationRepository::Administration::AlreadyRegistered *)_tao_any.value ();
@@ -6127,13 +6128,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::Administration::_tc_CannotActivate, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = (ImplementationRepository::Administration::CannotActivate *)_tao_any.value ();
@@ -6217,13 +6218,13 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::Administration::_tc_NotFound, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = (ImplementationRepository::Administration::NotFound *)_tao_any.value ();
@@ -6274,7 +6275,7 @@
   if (stream << _tao_elem)
   {
     _tao_any._tao_replace (
-        ImplementationRepository::_tc_ServerInformationIterator, 
+        ImplementationRepository::_tc_ServerInformationIterator,
         TAO_ENCAP_BYTE_ORDER,
         stream.begin (),
         1,
@@ -6290,13 +6291,13 @@
   {
     _tao_elem = ImplementationRepository::ServerInformationIterator::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
-    
+
     CORBA::Boolean result = type->equivalent (ImplementationRepository::_tc_ServerInformationIterator, ACE_TRY_ENV);
     ACE_TRY_CHECK;
-    
+
     if (!result)
       return 0; // not equivalent
-    
+
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
@@ -6358,7 +6359,7 @@
     // set the length of the sequence
     _tao_sequence.length (_tao_seq_len);
     // If length is 0 we return true.
-    if (0 >= _tao_seq_len) 
+    if (0 >= _tao_seq_len)
       return 1;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
@@ -6400,7 +6401,7 @@
     // set the length of the sequence
     _tao_sequence.length (_tao_seq_len);
     // If length is 0 we return true.
-    if (0 >= _tao_seq_len) 
+    if (0 >= _tao_seq_len)
       return 1;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
@@ -6412,4 +6413,3 @@
   }
   return 0; // error
 }
-
