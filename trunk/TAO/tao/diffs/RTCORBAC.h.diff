--- orig/RTCORBAC.h	Thu Jun 15 13:59:40 2000
+++ RTCORBAC.h	Fri Jun  9 13:00:53 2000
@@ -1,4 +1,4 @@
-/* -*- C++ -*- $Id$ */
+/* -*- C++ -*- $Id$ */
 
 // ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
 // TAO and the TAO IDL Compiler have been developed by the Center for
@@ -11,20 +11,22 @@
 #define _TAO_IDL_ORIG_RTCORBAC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+#include "tao/orbconf.h"
 
-#if defined (ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION)
-#include "ace/streams.h"
-#endif /* ACE_HAS_MINIMUM_IOSTREAMH_INCLUSION */
+#if (TAO_HAS_RT_CORBA == 1)
+
+#include "corbafwd.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "corbafwd.h"
 #include "IOPC.h"
+#include "tao/PolicyC.h"
 #include "TimeBaseC.h"
 
+#include "tao/Encodable.h"
+
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
 #endif
@@ -44,6 +46,8 @@
 #pragma warning(disable:4250)
 #endif /* _MSC_VER */
 
+class TAO_Priority_Mapping;
+
 TAO_NAMESPACE  RTCORBA
 {
   typedef CORBA::Short NativePriority;
@@ -58,13 +62,14 @@
 
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::Short maxPriority;
 
+  typedef TAO_Priority_Mapping PriorityMapping;
   typedef CORBA::ULong ThreadpoolId;
   typedef CORBA::ULong_out ThreadpoolId_out;
     TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_ThreadpoolId;
 
   struct ThreadpoolLane;
   class ThreadpoolLane_var;
-  
+
   struct TAO_Export ThreadpoolLane
   {
 
@@ -87,18 +92,18 @@
     ThreadpoolLane_var (const ThreadpoolLane_var &); // copy constructor
     ThreadpoolLane_var (const ThreadpoolLane &); // fixed-size types only
     ~ThreadpoolLane_var (void); // destructor
-    
+
     ThreadpoolLane_var &operator= (ThreadpoolLane *);
     ThreadpoolLane_var &operator= (const ThreadpoolLane_var &);
     ThreadpoolLane_var &operator= (const ThreadpoolLane &); // fixed-size types only
     ThreadpoolLane *operator-> (void);
     const ThreadpoolLane *operator-> (void) const;
-    
+
     operator const ThreadpoolLane &() const;
     operator ThreadpoolLane &();
     operator ThreadpoolLane &() const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const ThreadpoolLane &in (void) const;
     ThreadpoolLane &inout (void);
     ThreadpoolLane &out (void);
@@ -115,7 +120,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-    
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_THREADPOOLLANES_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_THREADPOOLLANES_CH_
 
@@ -123,9 +128,9 @@
     {
     public:
       // = Initialization and termination methods.
-      
+
       _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (void); // Default constructor.
-      _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum); 
+      _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum);
       _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum,
         CORBA::ULong length,
         ThreadpoolLane *data,
@@ -142,7 +147,7 @@
       virtual void _allocate_buffer (CORBA::ULong length);
       virtual void _deallocate_buffer (void);
       // Implement the TAO_Base_Sequence methods (see Sequence.h)
-      
+
       ThreadpoolLane *get_buffer (CORBA::Boolean orphan = 0);
       const ThreadpoolLane *get_buffer (void) const;
       void replace (CORBA::ULong max,
@@ -154,32 +159,32 @@
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
-  
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
+
 #if !defined (_RTCORBA_THREADPOOLLANES_CH_)
 #define _RTCORBA_THREADPOOLLANES_CH_
 
   class ThreadpoolLanes;
   class ThreadpoolLanes_var;
-  
+
   // *************************************************************
   // ThreadpoolLanes
   // *************************************************************
-  
-  class TAO_Export ThreadpoolLanes : public 
+
+  class TAO_Export ThreadpoolLanes : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<ThreadpoolLane>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
   {
   public:
     ThreadpoolLanes (void); // default ctor
     ThreadpoolLanes (CORBA::ULong max); // uses max size
     ThreadpoolLanes (
-      CORBA::ULong max, 
-      CORBA::ULong length, 
-      ThreadpoolLane *buffer, 
+      CORBA::ULong max,
+      CORBA::ULong length,
+      ThreadpoolLane *buffer,
       CORBA::Boolean release=0
     );
     ThreadpoolLanes (const ThreadpoolLanes &); // copy ctor
@@ -191,7 +196,7 @@
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
   };
-  
+
 #endif /* end #if !defined */
 
 
@@ -210,19 +215,19 @@
     ThreadpoolLanes_var (const ThreadpoolLanes_var &); // copy constructor
     ThreadpoolLanes_var (const ThreadpoolLanes &); // fixed-size base types only
     ~ThreadpoolLanes_var (void); // destructor
-    
+
     ThreadpoolLanes_var &operator= (ThreadpoolLanes *);
     ThreadpoolLanes_var &operator= (const ThreadpoolLanes_var &);
     ThreadpoolLanes_var &operator= (const ThreadpoolLanes &); // fixed-size base types only
     ThreadpoolLanes *operator-> (void);
     const ThreadpoolLanes *operator-> (void) const;
-    
+
     operator const ThreadpoolLanes &() const;
     operator ThreadpoolLanes &();
     operator ThreadpoolLanes &() const;
-    
+
     ThreadpoolLane &operator[] (CORBA::ULong index);
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     const ThreadpoolLanes &in (void) const;
     ThreadpoolLanes &inout (void);
     ThreadpoolLanes *&out (void);
@@ -252,7 +257,7 @@
     ThreadpoolLanes *&ptr (void);
     ThreadpoolLanes *operator-> (void);
     ThreadpoolLane &operator[] (CORBA::ULong index);
-    
+
   private:
     ThreadpoolLanes *&ptr_;
     // assignment from T_var not allowed
@@ -281,7 +286,7 @@
 
   class PriorityModelPolicy;
   typedef PriorityModelPolicy *PriorityModelPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -295,14 +300,14 @@
     PriorityModelPolicy_var (PriorityModelPolicy_ptr);
     PriorityModelPolicy_var (const PriorityModelPolicy_var &); // copy constructor
     ~PriorityModelPolicy_var (void); // destructor
-    
+
     PriorityModelPolicy_var &operator= (PriorityModelPolicy_ptr);
     PriorityModelPolicy_var &operator= (const PriorityModelPolicy_var &);
     PriorityModelPolicy_ptr operator-> (void) const;
-    
+
     operator const PriorityModelPolicy_ptr &() const;
     operator PriorityModelPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     PriorityModelPolicy_ptr in (void) const;
     PriorityModelPolicy_ptr &inout (void);
     PriorityModelPolicy_ptr &out (void);
@@ -335,7 +340,7 @@
     operator PriorityModelPolicy_ptr &();
     PriorityModelPolicy_ptr &ptr (void);
     PriorityModelPolicy_ptr operator-> (void);
-    
+
   private:
     PriorityModelPolicy_ptr &ptr_;
   };
@@ -359,12 +364,12 @@
     static PriorityModelPolicy_ptr _duplicate (PriorityModelPolicy_ptr obj);
     static PriorityModelPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static PriorityModelPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static PriorityModelPolicy_ptr _nil (void)
@@ -373,7 +378,7 @@
       }
 
     virtual RTCORBA::PriorityModel priority_model (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -381,7 +386,7 @@
       )) = 0;
 
     virtual RTCORBA::Priority server_priority (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -389,7 +394,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -411,7 +416,7 @@
 
   class ThreadpoolPolicy;
   typedef ThreadpoolPolicy *ThreadpoolPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -425,14 +430,14 @@
     ThreadpoolPolicy_var (ThreadpoolPolicy_ptr);
     ThreadpoolPolicy_var (const ThreadpoolPolicy_var &); // copy constructor
     ~ThreadpoolPolicy_var (void); // destructor
-    
+
     ThreadpoolPolicy_var &operator= (ThreadpoolPolicy_ptr);
     ThreadpoolPolicy_var &operator= (const ThreadpoolPolicy_var &);
     ThreadpoolPolicy_ptr operator-> (void) const;
-    
+
     operator const ThreadpoolPolicy_ptr &() const;
     operator ThreadpoolPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ThreadpoolPolicy_ptr in (void) const;
     ThreadpoolPolicy_ptr &inout (void);
     ThreadpoolPolicy_ptr &out (void);
@@ -465,7 +470,7 @@
     operator ThreadpoolPolicy_ptr &();
     ThreadpoolPolicy_ptr &ptr (void);
     ThreadpoolPolicy_ptr operator-> (void);
-    
+
   private:
     ThreadpoolPolicy_ptr &ptr_;
   };
@@ -489,12 +494,12 @@
     static ThreadpoolPolicy_ptr _duplicate (ThreadpoolPolicy_ptr obj);
     static ThreadpoolPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ThreadpoolPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ThreadpoolPolicy_ptr _nil (void)
@@ -503,7 +508,7 @@
       }
 
     virtual RTCORBA::ThreadpoolId threadpool (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -511,7 +516,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -533,7 +538,7 @@
 
   class PrivateConnectionPolicy;
   typedef PrivateConnectionPolicy *PrivateConnectionPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -547,14 +552,14 @@
     PrivateConnectionPolicy_var (PrivateConnectionPolicy_ptr);
     PrivateConnectionPolicy_var (const PrivateConnectionPolicy_var &); // copy constructor
     ~PrivateConnectionPolicy_var (void); // destructor
-    
+
     PrivateConnectionPolicy_var &operator= (PrivateConnectionPolicy_ptr);
     PrivateConnectionPolicy_var &operator= (const PrivateConnectionPolicy_var &);
     PrivateConnectionPolicy_ptr operator-> (void) const;
-    
+
     operator const PrivateConnectionPolicy_ptr &() const;
     operator PrivateConnectionPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     PrivateConnectionPolicy_ptr in (void) const;
     PrivateConnectionPolicy_ptr &inout (void);
     PrivateConnectionPolicy_ptr &out (void);
@@ -587,7 +592,7 @@
     operator PrivateConnectionPolicy_ptr &();
     PrivateConnectionPolicy_ptr &ptr (void);
     PrivateConnectionPolicy_ptr operator-> (void);
-    
+
   private:
     PrivateConnectionPolicy_ptr &ptr_;
   };
@@ -611,12 +616,12 @@
     static PrivateConnectionPolicy_ptr _duplicate (PrivateConnectionPolicy_ptr obj);
     static PrivateConnectionPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static PrivateConnectionPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static PrivateConnectionPolicy_ptr _nil (void)
@@ -625,7 +630,7 @@
       }
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -641,7 +646,7 @@
 
   struct PriorityBand;
   class PriorityBand_var;
-  
+
   struct TAO_Export PriorityBand
   {
 
@@ -663,18 +668,18 @@
     PriorityBand_var (const PriorityBand_var &); // copy constructor
     PriorityBand_var (const PriorityBand &); // fixed-size types only
     ~PriorityBand_var (void); // destructor
-    
+
     PriorityBand_var &operator= (PriorityBand *);
     PriorityBand_var &operator= (const PriorityBand_var &);
     PriorityBand_var &operator= (const PriorityBand &); // fixed-size types only
     PriorityBand *operator-> (void);
     const PriorityBand *operator-> (void) const;
-    
+
     operator const PriorityBand &() const;
     operator PriorityBand &();
     operator PriorityBand &() const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const PriorityBand &in (void) const;
     PriorityBand &inout (void);
     PriorityBand &out (void);
@@ -691,7 +696,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-    
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_PRIORITYBANDS_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_PRIORITYBANDS_CH_
 
@@ -699,9 +704,9 @@
     {
     public:
       // = Initialization and termination methods.
-      
+
       _TAO_Unbounded_Sequence_RTCORBA_PriorityBands (void); // Default constructor.
-      _TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum); 
+      _TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum);
       _TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum,
         CORBA::ULong length,
         PriorityBand *data,
@@ -718,7 +723,7 @@
       virtual void _allocate_buffer (CORBA::ULong length);
       virtual void _deallocate_buffer (void);
       // Implement the TAO_Base_Sequence methods (see Sequence.h)
-      
+
       PriorityBand *get_buffer (CORBA::Boolean orphan = 0);
       const PriorityBand *get_buffer (void) const;
       void replace (CORBA::ULong max,
@@ -730,32 +735,32 @@
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
-  
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
+
 #if !defined (_RTCORBA_PRIORITYBANDS_CH_)
 #define _RTCORBA_PRIORITYBANDS_CH_
 
   class PriorityBands;
   class PriorityBands_var;
-  
+
   // *************************************************************
   // PriorityBands
   // *************************************************************
-  
-  class TAO_Export PriorityBands : public 
+
+  class TAO_Export PriorityBands : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     _TAO_Unbounded_Sequence_RTCORBA_PriorityBands
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<PriorityBand>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
   {
   public:
     PriorityBands (void); // default ctor
     PriorityBands (CORBA::ULong max); // uses max size
     PriorityBands (
-      CORBA::ULong max, 
-      CORBA::ULong length, 
-      PriorityBand *buffer, 
+      CORBA::ULong max,
+      CORBA::ULong length,
+      PriorityBand *buffer,
       CORBA::Boolean release=0
     );
     PriorityBands (const PriorityBands &); // copy ctor
@@ -767,7 +772,7 @@
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
   };
-  
+
 #endif /* end #if !defined */
 
 
@@ -786,19 +791,19 @@
     PriorityBands_var (const PriorityBands_var &); // copy constructor
     PriorityBands_var (const PriorityBands &); // fixed-size base types only
     ~PriorityBands_var (void); // destructor
-    
+
     PriorityBands_var &operator= (PriorityBands *);
     PriorityBands_var &operator= (const PriorityBands_var &);
     PriorityBands_var &operator= (const PriorityBands &); // fixed-size base types only
     PriorityBands *operator-> (void);
     const PriorityBands *operator-> (void) const;
-    
+
     operator const PriorityBands &() const;
     operator PriorityBands &();
     operator PriorityBands &() const;
-    
+
     PriorityBand &operator[] (CORBA::ULong index);
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     const PriorityBands &in (void) const;
     PriorityBands &inout (void);
     PriorityBands *&out (void);
@@ -828,7 +833,7 @@
     PriorityBands *&ptr (void);
     PriorityBands *operator-> (void);
     PriorityBand &operator[] (CORBA::ULong index);
-    
+
   private:
     PriorityBands *&ptr_;
     // assignment from T_var not allowed
@@ -848,7 +853,7 @@
 
   class PriorityBandedConnectionPolicy;
   typedef PriorityBandedConnectionPolicy *PriorityBandedConnectionPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -862,14 +867,14 @@
     PriorityBandedConnectionPolicy_var (PriorityBandedConnectionPolicy_ptr);
     PriorityBandedConnectionPolicy_var (const PriorityBandedConnectionPolicy_var &); // copy constructor
     ~PriorityBandedConnectionPolicy_var (void); // destructor
-    
+
     PriorityBandedConnectionPolicy_var &operator= (PriorityBandedConnectionPolicy_ptr);
     PriorityBandedConnectionPolicy_var &operator= (const PriorityBandedConnectionPolicy_var &);
     PriorityBandedConnectionPolicy_ptr operator-> (void) const;
-    
+
     operator const PriorityBandedConnectionPolicy_ptr &() const;
     operator PriorityBandedConnectionPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     PriorityBandedConnectionPolicy_ptr in (void) const;
     PriorityBandedConnectionPolicy_ptr &inout (void);
     PriorityBandedConnectionPolicy_ptr &out (void);
@@ -902,7 +907,7 @@
     operator PriorityBandedConnectionPolicy_ptr &();
     PriorityBandedConnectionPolicy_ptr &ptr (void);
     PriorityBandedConnectionPolicy_ptr operator-> (void);
-    
+
   private:
     PriorityBandedConnectionPolicy_ptr &ptr_;
   };
@@ -926,12 +931,12 @@
     static PriorityBandedConnectionPolicy_ptr _duplicate (PriorityBandedConnectionPolicy_ptr obj);
     static PriorityBandedConnectionPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static PriorityBandedConnectionPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static PriorityBandedConnectionPolicy_ptr _nil (void)
@@ -940,7 +945,7 @@
       }
 
     virtual RTCORBA::PriorityBands * priority_bands (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -948,7 +953,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -968,7 +973,7 @@
 
   class ProtocolProperties;
   typedef ProtocolProperties *ProtocolProperties_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -982,14 +987,14 @@
     ProtocolProperties_var (ProtocolProperties_ptr);
     ProtocolProperties_var (const ProtocolProperties_var &); // copy constructor
     ~ProtocolProperties_var (void); // destructor
-    
+
     ProtocolProperties_var &operator= (ProtocolProperties_ptr);
     ProtocolProperties_var &operator= (const ProtocolProperties_var &);
     ProtocolProperties_ptr operator-> (void) const;
-    
+
     operator const ProtocolProperties_ptr &() const;
     operator ProtocolProperties_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ProtocolProperties_ptr in (void) const;
     ProtocolProperties_ptr &inout (void);
     ProtocolProperties_ptr &out (void);
@@ -1022,7 +1027,7 @@
     operator ProtocolProperties_ptr &();
     ProtocolProperties_ptr &ptr (void);
     ProtocolProperties_ptr operator-> (void);
-    
+
   private:
     ProtocolProperties_ptr &ptr_;
   };
@@ -1034,7 +1039,10 @@
 #if !defined (_RTCORBA_PROTOCOLPROPERTIES_CH_)
 #define _RTCORBA_PROTOCOLPROPERTIES_CH_
 
-class TAO_Export ProtocolProperties : public virtual CORBA_Object
+
+class TAO_Export ProtocolProperties : public virtual CORBA_Object,
+                                      public TAO_Encodable
+
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -1046,12 +1054,12 @@
     static ProtocolProperties_ptr _duplicate (ProtocolProperties_ptr obj);
     static ProtocolProperties_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ProtocolProperties_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ProtocolProperties_ptr _nil (void)
@@ -1060,9 +1068,15 @@
       }
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
+    // CDR Encoder/Decoder methods.
+
+    virtual CORBA::Boolean _tao_encode (TAO_OutputCDR &out_cdr);
+    
+    virtual CORBA::Boolean _tao_decode (TAO_InputCDR &in_cdr);
+   
   protected:
     ProtocolProperties (void);
     virtual ~ProtocolProperties (void);
@@ -1080,7 +1094,7 @@
 
   class TCPProtocolProperties;
   typedef TCPProtocolProperties *TCPProtocolProperties_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1094,14 +1108,14 @@
     TCPProtocolProperties_var (TCPProtocolProperties_ptr);
     TCPProtocolProperties_var (const TCPProtocolProperties_var &); // copy constructor
     ~TCPProtocolProperties_var (void); // destructor
-    
+
     TCPProtocolProperties_var &operator= (TCPProtocolProperties_ptr);
     TCPProtocolProperties_var &operator= (const TCPProtocolProperties_var &);
     TCPProtocolProperties_ptr operator-> (void) const;
-    
+
     operator const TCPProtocolProperties_ptr &() const;
     operator TCPProtocolProperties_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     TCPProtocolProperties_ptr in (void) const;
     TCPProtocolProperties_ptr &inout (void);
     TCPProtocolProperties_ptr &out (void);
@@ -1134,7 +1148,7 @@
     operator TCPProtocolProperties_ptr &();
     TCPProtocolProperties_ptr &ptr (void);
     TCPProtocolProperties_ptr operator-> (void);
-    
+
   private:
     TCPProtocolProperties_ptr &ptr_;
   };
@@ -1158,12 +1172,12 @@
     static TCPProtocolProperties_ptr _duplicate (TCPProtocolProperties_ptr obj);
     static TCPProtocolProperties_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static TCPProtocolProperties_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static TCPProtocolProperties_ptr _nil (void)
@@ -1172,7 +1186,7 @@
       }
 
     virtual CORBA::Long send_buffer_size (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1181,7 +1195,7 @@
 
     virtual void send_buffer_size (
         CORBA::Long send_buffer_size,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1189,7 +1203,7 @@
       )) = 0;
 
     virtual CORBA::Long recv_buffer_size (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1198,7 +1212,7 @@
 
     virtual void recv_buffer_size (
         CORBA::Long recv_buffer_size,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1206,7 +1220,7 @@
       )) = 0;
 
     virtual CORBA::Boolean keep_alive (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1215,7 +1229,7 @@
 
     virtual void keep_alive (
         CORBA::Boolean keep_alive,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1223,7 +1237,7 @@
       )) = 0;
 
     virtual CORBA::Boolean dont_route (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1232,7 +1246,7 @@
 
     virtual void dont_route (
         CORBA::Boolean dont_route,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1240,7 +1254,7 @@
       )) = 0;
 
     virtual CORBA::Boolean no_delay (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1249,7 +1263,7 @@
 
     virtual void no_delay (
         CORBA::Boolean no_delay,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1257,7 +1271,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -1277,7 +1291,7 @@
 
   class GIOPProtocolProperties;
   typedef GIOPProtocolProperties *GIOPProtocolProperties_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1291,14 +1305,14 @@
     GIOPProtocolProperties_var (GIOPProtocolProperties_ptr);
     GIOPProtocolProperties_var (const GIOPProtocolProperties_var &); // copy constructor
     ~GIOPProtocolProperties_var (void); // destructor
-    
+
     GIOPProtocolProperties_var &operator= (GIOPProtocolProperties_ptr);
     GIOPProtocolProperties_var &operator= (const GIOPProtocolProperties_var &);
     GIOPProtocolProperties_ptr operator-> (void) const;
-    
+
     operator const GIOPProtocolProperties_ptr &() const;
     operator GIOPProtocolProperties_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     GIOPProtocolProperties_ptr in (void) const;
     GIOPProtocolProperties_ptr &inout (void);
     GIOPProtocolProperties_ptr &out (void);
@@ -1331,7 +1345,7 @@
     operator GIOPProtocolProperties_ptr &();
     GIOPProtocolProperties_ptr &ptr (void);
     GIOPProtocolProperties_ptr operator-> (void);
-    
+
   private:
     GIOPProtocolProperties_ptr &ptr_;
   };
@@ -1355,12 +1369,12 @@
     static GIOPProtocolProperties_ptr _duplicate (GIOPProtocolProperties_ptr obj);
     static GIOPProtocolProperties_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static GIOPProtocolProperties_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static GIOPProtocolProperties_ptr _nil (void)
@@ -1369,7 +1383,7 @@
       }
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -1385,7 +1399,7 @@
 
   struct Protocol;
   class Protocol_var;
-  
+
   struct TAO_Export Protocol
   {
 
@@ -1405,18 +1419,18 @@
     Protocol_var (Protocol *);
     Protocol_var (const Protocol_var &); // copy constructor
     ~Protocol_var (void); // destructor
-    
+
     Protocol_var &operator= (Protocol *);
     Protocol_var &operator= (const Protocol_var &);
     Protocol *operator-> (void);
     const Protocol *operator-> (void) const;
-    
+
     operator const Protocol &() const;
     operator Protocol &();
     operator Protocol &() const;
     operator Protocol *&(); // variable-size types only
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const Protocol &in (void) const;
     Protocol &inout (void);
     Protocol *&out (void);
@@ -1438,7 +1452,7 @@
     operator Protocol *&();
     Protocol *&ptr (void);
     Protocol *operator-> (void);
-    
+
   private:
     Protocol *&ptr_;
     // assignment from T_var not allowed
@@ -1447,7 +1461,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-    
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_PROTOCOLLIST_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_PROTOCOLLIST_CH_
 
@@ -1455,9 +1469,9 @@
     {
     public:
       // = Initialization and termination methods.
-      
+
       _TAO_Unbounded_Sequence_RTCORBA_ProtocolList (void); // Default constructor.
-      _TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum); 
+      _TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum);
       _TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum,
         CORBA::ULong length,
         Protocol *data,
@@ -1474,7 +1488,7 @@
       virtual void _allocate_buffer (CORBA::ULong length);
       virtual void _deallocate_buffer (void);
       // Implement the TAO_Base_Sequence methods (see Sequence.h)
-      
+
       Protocol *get_buffer (CORBA::Boolean orphan = 0);
       const Protocol *get_buffer (void) const;
       void replace (CORBA::ULong max,
@@ -1486,32 +1500,32 @@
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
-  
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
+
 #if !defined (_RTCORBA_PROTOCOLLIST_CH_)
 #define _RTCORBA_PROTOCOLLIST_CH_
 
   class ProtocolList;
   class ProtocolList_var;
-  
+
   // *************************************************************
   // ProtocolList
   // *************************************************************
-  
-  class TAO_Export ProtocolList : public 
+
+  class TAO_Export ProtocolList : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     _TAO_Unbounded_Sequence_RTCORBA_ProtocolList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<Protocol>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
   {
   public:
     ProtocolList (void); // default ctor
     ProtocolList (CORBA::ULong max); // uses max size
     ProtocolList (
-      CORBA::ULong max, 
-      CORBA::ULong length, 
-      Protocol *buffer, 
+      CORBA::ULong max,
+      CORBA::ULong length,
+      Protocol *buffer,
       CORBA::Boolean release=0
     );
     ProtocolList (const ProtocolList &); // copy ctor
@@ -1523,7 +1537,7 @@
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
   };
-  
+
 #endif /* end #if !defined */
 
 
@@ -1541,19 +1555,19 @@
     ProtocolList_var (ProtocolList *);
     ProtocolList_var (const ProtocolList_var &); // copy constructor
     ~ProtocolList_var (void); // destructor
-    
+
     ProtocolList_var &operator= (ProtocolList *);
     ProtocolList_var &operator= (const ProtocolList_var &);
     ProtocolList *operator-> (void);
     const ProtocolList *operator-> (void) const;
-    
+
     operator const ProtocolList &() const;
     operator ProtocolList &();
     operator ProtocolList &() const;
     operator ProtocolList *&(); // variable-size base types only
-    
+
     Protocol &operator[] (CORBA::ULong index);
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     const ProtocolList &in (void) const;
     ProtocolList &inout (void);
     ProtocolList *&out (void);
@@ -1583,7 +1597,7 @@
     ProtocolList *&ptr (void);
     ProtocolList *operator-> (void);
     Protocol &operator[] (CORBA::ULong index);
-    
+
   private:
     ProtocolList *&ptr_;
     // assignment from T_var not allowed
@@ -1601,7 +1615,7 @@
 
   class ServerProtocolPolicy;
   typedef ServerProtocolPolicy *ServerProtocolPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1615,14 +1629,14 @@
     ServerProtocolPolicy_var (ServerProtocolPolicy_ptr);
     ServerProtocolPolicy_var (const ServerProtocolPolicy_var &); // copy constructor
     ~ServerProtocolPolicy_var (void); // destructor
-    
+
     ServerProtocolPolicy_var &operator= (ServerProtocolPolicy_ptr);
     ServerProtocolPolicy_var &operator= (const ServerProtocolPolicy_var &);
     ServerProtocolPolicy_ptr operator-> (void) const;
-    
+
     operator const ServerProtocolPolicy_ptr &() const;
     operator ServerProtocolPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ServerProtocolPolicy_ptr in (void) const;
     ServerProtocolPolicy_ptr &inout (void);
     ServerProtocolPolicy_ptr &out (void);
@@ -1655,7 +1669,7 @@
     operator ServerProtocolPolicy_ptr &();
     ServerProtocolPolicy_ptr &ptr (void);
     ServerProtocolPolicy_ptr operator-> (void);
-    
+
   private:
     ServerProtocolPolicy_ptr &ptr_;
   };
@@ -1679,12 +1693,12 @@
     static ServerProtocolPolicy_ptr _duplicate (ServerProtocolPolicy_ptr obj);
     static ServerProtocolPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ServerProtocolPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ServerProtocolPolicy_ptr _nil (void)
@@ -1693,7 +1707,7 @@
       }
 
     virtual RTCORBA::ProtocolList * protocols (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1701,7 +1715,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -1723,7 +1737,7 @@
 
   class ClientProtocolPolicy;
   typedef ClientProtocolPolicy *ClientProtocolPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1737,14 +1751,14 @@
     ClientProtocolPolicy_var (ClientProtocolPolicy_ptr);
     ClientProtocolPolicy_var (const ClientProtocolPolicy_var &); // copy constructor
     ~ClientProtocolPolicy_var (void); // destructor
-    
+
     ClientProtocolPolicy_var &operator= (ClientProtocolPolicy_ptr);
     ClientProtocolPolicy_var &operator= (const ClientProtocolPolicy_var &);
     ClientProtocolPolicy_ptr operator-> (void) const;
-    
+
     operator const ClientProtocolPolicy_ptr &() const;
     operator ClientProtocolPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ClientProtocolPolicy_ptr in (void) const;
     ClientProtocolPolicy_ptr &inout (void);
     ClientProtocolPolicy_ptr &out (void);
@@ -1777,7 +1791,7 @@
     operator ClientProtocolPolicy_ptr &();
     ClientProtocolPolicy_ptr &ptr (void);
     ClientProtocolPolicy_ptr operator-> (void);
-    
+
   private:
     ClientProtocolPolicy_ptr &ptr_;
   };
@@ -1801,12 +1815,12 @@
     static ClientProtocolPolicy_ptr _duplicate (ClientProtocolPolicy_ptr obj);
     static ClientProtocolPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ClientProtocolPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ClientProtocolPolicy_ptr _nil (void)
@@ -1815,7 +1829,7 @@
       }
 
     virtual RTCORBA::ProtocolList * protocols (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1823,7 +1837,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -1843,7 +1857,7 @@
 
   class Current;
   typedef Current *Current_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1857,14 +1871,14 @@
     Current_var (Current_ptr);
     Current_var (const Current_var &); // copy constructor
     ~Current_var (void); // destructor
-    
+
     Current_var &operator= (Current_ptr);
     Current_var &operator= (const Current_var &);
     Current_ptr operator-> (void) const;
-    
+
     operator const Current_ptr &() const;
     operator Current_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     Current_ptr in (void) const;
     Current_ptr &inout (void);
     Current_ptr &out (void);
@@ -1897,7 +1911,7 @@
     operator Current_ptr &();
     Current_ptr &ptr (void);
     Current_ptr operator-> (void);
-    
+
   private:
     Current_ptr &ptr_;
   };
@@ -1921,12 +1935,12 @@
     static Current_ptr _duplicate (Current_ptr obj);
     static Current_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Current_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Current_ptr _nil (void)
@@ -1935,7 +1949,7 @@
       }
 
     virtual RTCORBA::Priority the_priority (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1944,7 +1958,7 @@
 
     virtual void the_priority (
         RTCORBA::Priority the_priority,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1952,7 +1966,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -1972,7 +1986,7 @@
 
   class Mutex;
   typedef Mutex *Mutex_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1986,14 +2000,14 @@
     Mutex_var (Mutex_ptr);
     Mutex_var (const Mutex_var &); // copy constructor
     ~Mutex_var (void); // destructor
-    
+
     Mutex_var &operator= (Mutex_ptr);
     Mutex_var &operator= (const Mutex_var &);
     Mutex_ptr operator-> (void) const;
-    
+
     operator const Mutex_ptr &() const;
     operator Mutex_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     Mutex_ptr in (void) const;
     Mutex_ptr &inout (void);
     Mutex_ptr &out (void);
@@ -2026,7 +2040,7 @@
     operator Mutex_ptr &();
     Mutex_ptr &ptr (void);
     Mutex_ptr operator-> (void);
-    
+
   private:
     Mutex_ptr &ptr_;
   };
@@ -2050,12 +2064,12 @@
     static Mutex_ptr _duplicate (Mutex_ptr obj);
     static Mutex_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Mutex_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static Mutex_ptr _nil (void)
@@ -2064,7 +2078,7 @@
       }
 
     virtual void lock (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -2072,7 +2086,7 @@
       )) = 0;
 
     virtual void unlock (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -2081,7 +2095,7 @@
 
     virtual CORBA::Boolean try_lock (
         TimeBase::TimeT max_wait,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -2089,7 +2103,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -2103,13 +2117,12 @@
 
 #endif /* end #if !defined */
 
-
 #if !defined (_RTCORBA_RTORB___PTR_CH_)
 #define _RTCORBA_RTORB___PTR_CH_
 
   class RTORB;
   typedef RTORB *RTORB_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -2123,14 +2136,14 @@
     RTORB_var (RTORB_ptr);
     RTORB_var (const RTORB_var &); // copy constructor
     ~RTORB_var (void); // destructor
-    
+
     RTORB_var &operator= (RTORB_ptr);
     RTORB_var &operator= (const RTORB_var &);
     RTORB_ptr operator-> (void) const;
-    
+
     operator const RTORB_ptr &() const;
     operator RTORB_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RTORB_ptr in (void) const;
     RTORB_ptr &inout (void);
     RTORB_ptr &out (void);
@@ -2163,7 +2176,7 @@
     operator RTORB_ptr &();
     RTORB_ptr &ptr (void);
     RTORB_ptr operator-> (void);
-    
+
   private:
     RTORB_ptr &ptr_;
   };
@@ -2187,12 +2200,12 @@
     static RTORB_ptr _duplicate (RTORB_ptr obj);
     static RTORB_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RTORB_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RTORB_ptr _nil (void)
@@ -2201,7 +2214,7 @@
       }
 
     virtual RTCORBA::Mutex_ptr create_mutex (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -2210,7 +2223,7 @@
 
     virtual void destroy_mutex (
         RTCORBA::Mutex_ptr the_mutex,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -2241,7 +2254,7 @@
         TAO_InputCDR &,
         CORBA::Environment &);
 
-    static InvalidThreadpool *_downcast (CORBA::Exception *);
+    static InvalidThreadpool *_narrow (CORBA::Exception *);
 
 
     // = TAO extension
@@ -2249,7 +2262,7 @@
 
   }; // exception RTCORBA::RTORB::InvalidThreadpool
 
-  
+
 #endif /* end #if !defined */
 
   virtual RTCORBA::ThreadpoolId create_threadpool (
@@ -2260,7 +2273,7 @@
       CORBA::Boolean allow_request_buffering,
       CORBA::ULong max_buffered_requests,
       CORBA::ULong max_request_buffer_size,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2274,7 +2287,7 @@
       CORBA::Boolean allow_request_buffering,
       CORBA::ULong max_buffered_requests,
       CORBA::ULong max_request_buffer_size,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2283,7 +2296,7 @@
 
   virtual void destroy_threadpool (
       RTCORBA::ThreadpoolId threadpool,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2294,7 +2307,7 @@
   virtual RTCORBA::PriorityModelPolicy_ptr create_priority_model_policy (
       RTCORBA::PriorityModel priority_model,
       RTCORBA::Priority server_priority,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2303,7 +2316,7 @@
 
   virtual RTCORBA::ThreadpoolPolicy_ptr create_threadpool_policy (
       RTCORBA::ThreadpoolId threadpool,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2312,7 +2325,7 @@
 
   virtual RTCORBA::PriorityBandedConnectionPolicy_ptr create_priority_banded_connection_policy (
       const RTCORBA::PriorityBands & priority_bands,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2320,7 +2333,7 @@
     )) = 0;
 
   virtual RTCORBA::PrivateConnectionPolicy_ptr create_private_connection_policy (
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2329,7 +2342,7 @@
 
   virtual RTCORBA::ServerProtocolPolicy_ptr create_server_protocol_policy (
       const RTCORBA::ProtocolList & protocols,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2338,7 +2351,7 @@
 
   virtual RTCORBA::ClientProtocolPolicy_ptr create_client_protocol_policy (
       const RTCORBA::ProtocolList & protocols,
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     )
     ACE_THROW_SPEC ((
@@ -2346,7 +2359,7 @@
     )) = 0;
 
   virtual void *_tao_QueryInterface (ptr_arith_t type);
-  
+
   virtual const char* _interface_repository_id (void) const;
 
 protected:
@@ -2360,7 +2373,6 @@
 
 #endif /* end #if !defined */
 
-
 }
 TAO_NAMESPACE_CLOSE // module RTCORBA
 
@@ -2402,7 +2414,7 @@
 
 #endif /* _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_H_ */
 
-TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const RTCORBA::PriorityModel &); // 
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const RTCORBA::PriorityModel &); //
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, RTCORBA::PriorityModel &);
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const RTCORBA::PriorityBand &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, RTCORBA::PriorityBand &);
@@ -2432,6 +2444,8 @@
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma warning(pop)
 #endif /* _MSC_VER */
+
+#endif /* TAO_HAS_RT_CORBA */
 
 #include "ace/post.h"
 #endif /* ifndef */
