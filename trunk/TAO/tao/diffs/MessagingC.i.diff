--- orig/MessagingC.i	Wed Apr 25 00:17:25 2001
+++ MessagingC.i	Tue Apr 24 13:44:40 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -20,19 +20,115 @@
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
 
+#if (TAO_HAS_REBIND_POLICY == 1)
+
 #if !defined (_MESSAGING_REBINDPOLICY___CI_)
 #define _MESSAGING_REBINDPOLICY___CI_
 
+ACE_INLINE Messaging::RebindPolicy_ptr
+tao_Messaging_RebindPolicy_duplicate (
+    Messaging::RebindPolicy_ptr p
+  )
+{
+  return Messaging::RebindPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RebindPolicy_release (
+    Messaging::RebindPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RebindPolicy_ptr
+tao_Messaging_RebindPolicy_nil (
+    void
+  )
+{
+  return Messaging::RebindPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RebindPolicy_ptr
+tao_Messaging_RebindPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RebindPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RebindPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RebindPolicy **tmp =
+    ACE_static_cast (Messaging::RebindPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_REBIND_POLICY == 1 */
+
+#if (TAO_HAS_SYNC_SCOPE_POLICY == 1)
+
 #if !defined (_MESSAGING_SYNCSCOPEPOLICY___CI_)
 #define _MESSAGING_SYNCSCOPEPOLICY___CI_
 
+ACE_INLINE Messaging::SyncScopePolicy_ptr
+tao_Messaging_SyncScopePolicy_duplicate (
+    Messaging::SyncScopePolicy_ptr p
+  )
+{
+  return Messaging::SyncScopePolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_SyncScopePolicy_release (
+    Messaging::SyncScopePolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::SyncScopePolicy_ptr
+tao_Messaging_SyncScopePolicy_nil (
+    void
+  )
+{
+  return Messaging::SyncScopePolicy::_nil ();
+}
+
+ACE_INLINE Messaging::SyncScopePolicy_ptr
+tao_Messaging_SyncScopePolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::SyncScopePolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_SyncScopePolicy_upcast (
+    void *src
+  )
+{
+  Messaging::SyncScopePolicy **tmp =
+    ACE_static_cast (Messaging::SyncScopePolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_SYNC_SCOPE_POLICY == 1 */
+
+#if (TAO_HAS_PRIORITY_POLICIES == 1)
+
 // *************************************************************
 // Inline operations for class Messaging::PriorityRange_var
 // *************************************************************
@@ -182,6 +278,49 @@
 #if !defined (_MESSAGING_REQUESTPRIORITYPOLICY___CI_)
 #define _MESSAGING_REQUESTPRIORITYPOLICY___CI_
 
+ACE_INLINE Messaging::RequestPriorityPolicy_ptr
+tao_Messaging_RequestPriorityPolicy_duplicate (
+    Messaging::RequestPriorityPolicy_ptr p
+  )
+{
+  return Messaging::RequestPriorityPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RequestPriorityPolicy_release (
+    Messaging::RequestPriorityPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RequestPriorityPolicy_ptr
+tao_Messaging_RequestPriorityPolicy_nil (
+    void
+  )
+{
+  return Messaging::RequestPriorityPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RequestPriorityPolicy_ptr
+tao_Messaging_RequestPriorityPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RequestPriorityPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RequestPriorityPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RequestPriorityPolicy **tmp =
+    ACE_static_cast (Messaging::RequestPriorityPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -189,51 +328,380 @@
 #if !defined (_MESSAGING_REPLYPRIORITYPOLICY___CI_)
 #define _MESSAGING_REPLYPRIORITYPOLICY___CI_
 
+ACE_INLINE Messaging::ReplyPriorityPolicy_ptr
+tao_Messaging_ReplyPriorityPolicy_duplicate (
+    Messaging::ReplyPriorityPolicy_ptr p
+  )
+{
+  return Messaging::ReplyPriorityPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_ReplyPriorityPolicy_release (
+    Messaging::ReplyPriorityPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::ReplyPriorityPolicy_ptr
+tao_Messaging_ReplyPriorityPolicy_nil (
+    void
+  )
+{
+  return Messaging::ReplyPriorityPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::ReplyPriorityPolicy_ptr
+tao_Messaging_ReplyPriorityPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::ReplyPriorityPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_ReplyPriorityPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::ReplyPriorityPolicy **tmp =
+    ACE_static_cast (Messaging::ReplyPriorityPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */
+
+#if (TAO_HAS_REQUEST_START_TIME_POLICY == 1)
+
 #if !defined (_MESSAGING_REQUESTSTARTTIMEPOLICY___CI_)
 #define _MESSAGING_REQUESTSTARTTIMEPOLICY___CI_
 
+ACE_INLINE Messaging::RequestStartTimePolicy_ptr
+tao_Messaging_RequestStartTimePolicy_duplicate (
+    Messaging::RequestStartTimePolicy_ptr p
+  )
+{
+  return Messaging::RequestStartTimePolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RequestStartTimePolicy_release (
+    Messaging::RequestStartTimePolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RequestStartTimePolicy_ptr
+tao_Messaging_RequestStartTimePolicy_nil (
+    void
+  )
+{
+  return Messaging::RequestStartTimePolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RequestStartTimePolicy_ptr
+tao_Messaging_RequestStartTimePolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RequestStartTimePolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RequestStartTimePolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RequestStartTimePolicy **tmp =
+    ACE_static_cast (Messaging::RequestStartTimePolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_REQUEST_START_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REQUEST_END_TIME_POLICY == 1)
+
 #if !defined (_MESSAGING_REQUESTENDTIMEPOLICY___CI_)
 #define _MESSAGING_REQUESTENDTIMEPOLICY___CI_
 
+ACE_INLINE Messaging::RequestEndTimePolicy_ptr
+tao_Messaging_RequestEndTimePolicy_duplicate (
+    Messaging::RequestEndTimePolicy_ptr p
+  )
+{
+  return Messaging::RequestEndTimePolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RequestEndTimePolicy_release (
+    Messaging::RequestEndTimePolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RequestEndTimePolicy_ptr
+tao_Messaging_RequestEndTimePolicy_nil (
+    void
+  )
+{
+  return Messaging::RequestEndTimePolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RequestEndTimePolicy_ptr
+tao_Messaging_RequestEndTimePolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RequestEndTimePolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RequestEndTimePolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RequestEndTimePolicy **tmp =
+    ACE_static_cast (Messaging::RequestEndTimePolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_REQUEST_END_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REPLY_START_TIME_POLICY == 1)
+
 #if !defined (_MESSAGING_REPLYSTARTTIMEPOLICY___CI_)
 #define _MESSAGING_REPLYSTARTTIMEPOLICY___CI_
 
+ACE_INLINE Messaging::ReplyStartTimePolicy_ptr
+tao_Messaging_ReplyStartTimePolicy_duplicate (
+    Messaging::ReplyStartTimePolicy_ptr p
+  )
+{
+  return Messaging::ReplyStartTimePolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_ReplyStartTimePolicy_release (
+    Messaging::ReplyStartTimePolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::ReplyStartTimePolicy_ptr
+tao_Messaging_ReplyStartTimePolicy_nil (
+    void
+  )
+{
+  return Messaging::ReplyStartTimePolicy::_nil ();
+}
+
+ACE_INLINE Messaging::ReplyStartTimePolicy_ptr
+tao_Messaging_ReplyStartTimePolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::ReplyStartTimePolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_ReplyStartTimePolicy_upcast (
+    void *src
+  )
+{
+  Messaging::ReplyStartTimePolicy **tmp =
+    ACE_static_cast (Messaging::ReplyStartTimePolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_REPLY_START_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REPLY_END_TIME_POLICY == 1)
+
 #if !defined (_MESSAGING_REPLYENDTIMEPOLICY___CI_)
 #define _MESSAGING_REPLYENDTIMEPOLICY___CI_
 
+ACE_INLINE Messaging::ReplyEndTimePolicy_ptr
+tao_Messaging_ReplyEndTimePolicy_duplicate (
+    Messaging::ReplyEndTimePolicy_ptr p
+  )
+{
+  return Messaging::ReplyEndTimePolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_ReplyEndTimePolicy_release (
+    Messaging::ReplyEndTimePolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::ReplyEndTimePolicy_ptr
+tao_Messaging_ReplyEndTimePolicy_nil (
+    void
+  )
+{
+  return Messaging::ReplyEndTimePolicy::_nil ();
+}
+
+ACE_INLINE Messaging::ReplyEndTimePolicy_ptr
+tao_Messaging_ReplyEndTimePolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::ReplyEndTimePolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_ReplyEndTimePolicy_upcast (
+    void *src
+  )
+{
+  Messaging::ReplyEndTimePolicy **tmp =
+    ACE_static_cast (Messaging::ReplyEndTimePolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_REPLY_END_TIME_POLICY == 1 */
+
+#if (TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1)
+
 #if !defined (_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___CI_)
 #define _MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___CI_
 
+ACE_INLINE Messaging::RelativeRequestTimeoutPolicy_ptr
+tao_Messaging_RelativeRequestTimeoutPolicy_duplicate (
+    Messaging::RelativeRequestTimeoutPolicy_ptr p
+  )
+{
+  return Messaging::RelativeRequestTimeoutPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RelativeRequestTimeoutPolicy_release (
+    Messaging::RelativeRequestTimeoutPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RelativeRequestTimeoutPolicy_ptr
+tao_Messaging_RelativeRequestTimeoutPolicy_nil (
+    void
+  )
+{
+  return Messaging::RelativeRequestTimeoutPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RelativeRequestTimeoutPolicy_ptr
+tao_Messaging_RelativeRequestTimeoutPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RelativeRequestTimeoutPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RelativeRequestTimeoutPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RelativeRequestTimeoutPolicy **tmp =
+    ACE_static_cast (Messaging::RelativeRequestTimeoutPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1 */
+
+#if (TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1)
+
 #if !defined (_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___CI_)
 #define _MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___CI_
 
+ACE_INLINE Messaging::RelativeRoundtripTimeoutPolicy_ptr
+tao_Messaging_RelativeRoundtripTimeoutPolicy_duplicate (
+    Messaging::RelativeRoundtripTimeoutPolicy_ptr p
+  )
+{
+  return Messaging::RelativeRoundtripTimeoutPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RelativeRoundtripTimeoutPolicy_release (
+    Messaging::RelativeRoundtripTimeoutPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RelativeRoundtripTimeoutPolicy_ptr
+tao_Messaging_RelativeRoundtripTimeoutPolicy_nil (
+    void
+  )
+{
+  return Messaging::RelativeRoundtripTimeoutPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RelativeRoundtripTimeoutPolicy_ptr
+tao_Messaging_RelativeRoundtripTimeoutPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RelativeRoundtripTimeoutPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RelativeRoundtripTimeoutPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RelativeRoundtripTimeoutPolicy **tmp =
+    ACE_static_cast (Messaging::RelativeRoundtripTimeoutPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1 */
+
+#if (TAO_HAS_ROUTING_POLICY == 1)
+
 // *************************************************************
 // Inline operations for class Messaging::RoutingTypeRange_var
 // *************************************************************
@@ -383,23 +851,162 @@
 #if !defined (_MESSAGING_ROUTINGPOLICY___CI_)
 #define _MESSAGING_ROUTINGPOLICY___CI_
 
+ACE_INLINE Messaging::RoutingPolicy_ptr
+tao_Messaging_RoutingPolicy_duplicate (
+    Messaging::RoutingPolicy_ptr p
+  )
+{
+  return Messaging::RoutingPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_RoutingPolicy_release (
+    Messaging::RoutingPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::RoutingPolicy_ptr
+tao_Messaging_RoutingPolicy_nil (
+    void
+  )
+{
+  return Messaging::RoutingPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::RoutingPolicy_ptr
+tao_Messaging_RoutingPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::RoutingPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_RoutingPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::RoutingPolicy **tmp =
+    ACE_static_cast (Messaging::RoutingPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_ROUTING_POLICY == 1 */
+
+#if (TAO_HAS_MAX_HOPS_POLICY == 1)
+
 #if !defined (_MESSAGING_MAXHOPSPOLICY___CI_)
 #define _MESSAGING_MAXHOPSPOLICY___CI_
 
+ACE_INLINE Messaging::MaxHopsPolicy_ptr
+tao_Messaging_MaxHopsPolicy_duplicate (
+    Messaging::MaxHopsPolicy_ptr p
+  )
+{
+  return Messaging::MaxHopsPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_MaxHopsPolicy_release (
+    Messaging::MaxHopsPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::MaxHopsPolicy_ptr
+tao_Messaging_MaxHopsPolicy_nil (
+    void
+  )
+{
+  return Messaging::MaxHopsPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::MaxHopsPolicy_ptr
+tao_Messaging_MaxHopsPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::MaxHopsPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_MaxHopsPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::MaxHopsPolicy **tmp =
+    ACE_static_cast (Messaging::MaxHopsPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
+#endif /* TAO_HAS_MAX_HOPS_POLICY == 1 */
+
+#if (TAO_HAS_QUEUE_ORDER_POLICY == 1)
+
 #if !defined (_MESSAGING_QUEUEORDERPOLICY___CI_)
 #define _MESSAGING_QUEUEORDERPOLICY___CI_
 
+ACE_INLINE Messaging::QueueOrderPolicy_ptr
+tao_Messaging_QueueOrderPolicy_duplicate (
+    Messaging::QueueOrderPolicy_ptr p
+  )
+{
+  return Messaging::QueueOrderPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_QueueOrderPolicy_release (
+    Messaging::QueueOrderPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::QueueOrderPolicy_ptr
+tao_Messaging_QueueOrderPolicy_nil (
+    void
+  )
+{
+  return Messaging::QueueOrderPolicy::_nil ();
+}
+
+ACE_INLINE Messaging::QueueOrderPolicy_ptr
+tao_Messaging_QueueOrderPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::QueueOrderPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_QueueOrderPolicy_upcast (
+    void *src
+  )
+{
+  Messaging::QueueOrderPolicy **tmp =
+    ACE_static_cast (Messaging::QueueOrderPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_QUEUE_ORDER_POLICY == 1 */
+
 // *************************************************************
 // Inline operations for class Messaging::PolicyValue_var
 // *************************************************************
@@ -987,6 +1594,8 @@
 
 #endif /* end #if !defined */
 
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+
 ACE_INLINE
 Messaging::ExceptionHolder::ExceptionHolder () // default constructor
 {}
@@ -1190,6 +1799,49 @@
 #if !defined (_MESSAGING_REPLYHANDLER___CI_)
 #define _MESSAGING_REPLYHANDLER___CI_
 
+ACE_INLINE Messaging::ReplyHandler_ptr
+tao_Messaging_ReplyHandler_duplicate (
+    Messaging::ReplyHandler_ptr p
+  )
+{
+  return Messaging::ReplyHandler::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_Messaging_ReplyHandler_release (
+    Messaging::ReplyHandler_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE Messaging::ReplyHandler_ptr
+tao_Messaging_ReplyHandler_nil (
+    void
+  )
+{
+  return Messaging::ReplyHandler::_nil ();
+}
+
+ACE_INLINE Messaging::ReplyHandler_ptr
+tao_Messaging_ReplyHandler_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return Messaging::ReplyHandler::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_Messaging_ReplyHandler_upcast (
+    void *src
+  )
+{
+  Messaging::ReplyHandler **tmp =
+    ACE_static_cast (Messaging::ReplyHandler **, src);
+  return *tmp;
+}
+
 ACE_INLINE
 Messaging::ReplyHandler::ReplyHandler (
     TAO_Stub *objref,
@@ -1201,9 +1853,11 @@
   this->Messaging_ReplyHandler_setup_collocation (_tao_collocated);
 }
 
-
 #endif /* end #if !defined */
 
+
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
+
 ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Messaging::PriorityRange &_tao_aggregate)
 {
   if (
@@ -1306,6 +1960,8 @@
 
 #endif /* _TAO_CDR_OP_Messaging_PolicyValueSeq_I_ */
 
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+
 ACE_INLINE CORBA::Boolean
 operator<< (TAO_OutputCDR &strm, const Messaging::ExceptionHolder *_tao_valuetype)
 {
@@ -1348,13 +2004,15 @@
   
 }
 
-TAO_Export CORBA::Boolean operator<< (
+CORBA::Boolean TAO_Export 
+operator<< (
     TAO_OutputCDR &,
     const Messaging::ReplyHandler_ptr
   );
-
-TAO_Export CORBA::Boolean operator>> (
+CORBA::Boolean TAO_Export 
+operator>> (
     TAO_InputCDR &,
     Messaging::ReplyHandler_ptr &
   );
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
