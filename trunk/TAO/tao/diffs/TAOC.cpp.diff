--- orig/TAOC.cpp	Wed Apr 25 00:17:55 2001
+++ TAOC.cpp	Tue Apr 24 13:44:43 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$ */
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -21,21 +21,14 @@
 
 #include "TAOC.h"
 
-#include "tao/Stub.h"
-#include "tao/Invocation.h"
-#include "tao/ClientRequestInfo.h"
-#if TAO_HAS_INTERCEPTORS == 1
-#include "tao/RequestInfo_Util.h"
-#endif  /* TAO_HAS_INTERCEPTORS == 1 */
-
-#if defined (__BORLANDC__)
-#pragma option -w-rvl -w-rch -w-ccc -w-aus
-#endif /* __BORLANDC__ */
+#include "tao/Typecode.h"
 
 #if !defined (__ACE_INLINE__)
 #include "TAOC.i"
 #endif /* !defined INLINE */
 
+#if (TAO_HAS_CLIENT_PRIORITY_POLICY == 1)
+
 static const CORBA::Long _oc_TAO_PrioritySelectionMode[] =
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
@@ -171,48 +164,6 @@
 TAO_NAMESPACE_BEGIN (TAO)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, CLIENT_PRIORITY_POLICY_TYPE, 1413545984U)
 TAO_NAMESPACE_END
-TAO::ClientPriorityPolicy_ptr
-tao_TAO_ClientPriorityPolicy_duplicate (
-    TAO::ClientPriorityPolicy_ptr p
-  )
-{
-  return TAO::ClientPriorityPolicy::_duplicate (p);
-}
-
-void
-tao_TAO_ClientPriorityPolicy_release (
-    TAO::ClientPriorityPolicy_ptr p
-  )
-{
-  CORBA::release (p);
-}
-
-TAO::ClientPriorityPolicy_ptr
-tao_TAO_ClientPriorityPolicy_nil (
-    void
-  )
-{
-  return TAO::ClientPriorityPolicy::_nil ();
-}
-
-TAO::ClientPriorityPolicy_ptr
-tao_TAO_ClientPriorityPolicy_narrow (
-    CORBA::Object *p,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  return TAO::ClientPriorityPolicy::_narrow (p, ACE_TRY_ENV);
-}
-
-CORBA::Object *
-tao_TAO_ClientPriorityPolicy_upcast (
-    void *src
-  )
-{
-  TAO::ClientPriorityPolicy **tmp =
-    ACE_static_cast (TAO::ClientPriorityPolicy **, src);
-  return *tmp;
-}
 
 // *************************************************************
 // Operations for class TAO::ClientPriorityPolicy_var
@@ -336,7 +287,6 @@
     ACE_static_cast (ClientPriorityPolicy **, src);
   return *tmp;
 }
-
 // *************************************************************
 // Inline operations for class TAO::ClientPriorityPolicy_out
 // *************************************************************
@@ -449,11 +399,11 @@
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::TAO, ClientPriorityPolicy)::_narrow))
+      &ClientPriorityPolicy::_narrow))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Policy::_narrow))
+      &CORBA::Policy::_narrow))
     retv = ACE_reinterpret_cast
       (
         void *,
@@ -477,6 +427,10 @@
   return "IDL:TAO/ClientPriorityPolicy:1.0";
 }
 
+#endif /* TAO_HAS_CLIENT_PRIORITY_POLICY == 1 */
+
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
 static const CORBA::Long _oc_TAO_BufferingConstraintMode[] =
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
@@ -635,48 +589,6 @@
 TAO_NAMESPACE_BEGIN (TAO)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, BUFFERING_CONSTRAINT_POLICY_TYPE, 1413545985U)
 TAO_NAMESPACE_END
-TAO::BufferingConstraintPolicy_ptr
-tao_TAO_BufferingConstraintPolicy_duplicate (
-    TAO::BufferingConstraintPolicy_ptr p
-  )
-{
-  return TAO::BufferingConstraintPolicy::_duplicate (p);
-}
-
-void
-tao_TAO_BufferingConstraintPolicy_release (
-    TAO::BufferingConstraintPolicy_ptr p
-  )
-{
-  CORBA::release (p);
-}
-
-TAO::BufferingConstraintPolicy_ptr
-tao_TAO_BufferingConstraintPolicy_nil (
-    void
-  )
-{
-  return TAO::BufferingConstraintPolicy::_nil ();
-}
-
-TAO::BufferingConstraintPolicy_ptr
-tao_TAO_BufferingConstraintPolicy_narrow (
-    CORBA::Object *p,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  return TAO::BufferingConstraintPolicy::_narrow (p, ACE_TRY_ENV);
-}
-
-CORBA::Object *
-tao_TAO_BufferingConstraintPolicy_upcast (
-    void *src
-  )
-{
-  TAO::BufferingConstraintPolicy **tmp =
-    ACE_static_cast (TAO::BufferingConstraintPolicy **, src);
-  return *tmp;
-}
 
 // *************************************************************
 // Operations for class TAO::BufferingConstraintPolicy_var
@@ -800,7 +712,6 @@
     ACE_static_cast (BufferingConstraintPolicy **, src);
   return *tmp;
 }
-
 // *************************************************************
 // Inline operations for class TAO::BufferingConstraintPolicy_out
 // *************************************************************
@@ -913,11 +824,11 @@
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::TAO, BufferingConstraintPolicy)::_narrow))
+      &BufferingConstraintPolicy::_narrow))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &::CORBA::Policy::_narrow))
+      &CORBA::Policy::_narrow))
     retv = ACE_reinterpret_cast
       (
         void *,
@@ -941,6 +852,8 @@
   return "IDL:TAO/BufferingConstraintPolicy:1.0";
 }
 
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
+
 static const CORBA::Long _oc_TAO_SyncScope[] =
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
@@ -996,6 +909,9 @@
 TAO_NAMESPACE_BEGIN (TAO)
 TAO_NAMESPACE_DEFINE (const CORBA::Short, SYNC_DELAYED_BUFFERING, -2)
 TAO_NAMESPACE_END
+
+#if (TAO_HAS_CLIENT_PRIORITY_POLICY == 1)
+
 void operator<<= (CORBA::Any &_tao_any, const TAO::PrioritySpecification &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
@@ -1032,12 +948,14 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result = type->equivalent (TAO::_tc_PrioritySpecification, ACE_TRY_ENV);
+    CORBA::Boolean result =
+      type->equivalent (TAO::_tc_PrioritySpecification, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
-      return 0; // not equivalent
+      {
+        return 0;
+      }
     
     if (_tao_any.any_owns_data ())
     {
@@ -1079,12 +997,9 @@
   return 0;
 }
 
-#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
-    defined (ACE_HAS_GNU_REPO)
-    template class TAO_Object_Manager<TAO::ClientPriorityPolicy,TAO::ClientPriorityPolicy_var>;
-  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-  #  pragma instantiate TAO_Object_Manager<TAO::ClientPriorityPolicy,TAO::ClientPriorityPolicy_var>
-#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
+#endif /* TAO_HAS_CLIENT_PRIORITY_POLICY == 1 */
+
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
 
 void operator<<= (CORBA::Any &_tao_any, const TAO::BufferingConstraint &_tao_elem) // copying
 {
@@ -1122,12 +1037,14 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result = type->equivalent (TAO::_tc_BufferingConstraint, ACE_TRY_ENV);
+    CORBA::Boolean result =
+      type->equivalent (TAO::_tc_BufferingConstraint, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
-      return 0; // not equivalent
+      {
+        return 0;
+      }
     
     if (_tao_any.any_owns_data ())
     {
@@ -1169,10 +1086,4 @@
   return 0;
 }
 
-#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
-    defined (ACE_HAS_GNU_REPO)
-    template class TAO_Object_Manager<TAO::BufferingConstraintPolicy,TAO::BufferingConstraintPolicy_var>;
-  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-  #  pragma instantiate TAO_Object_Manager<TAO::BufferingConstraintPolicy,TAO::BufferingConstraintPolicy_var>
-#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
-
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
