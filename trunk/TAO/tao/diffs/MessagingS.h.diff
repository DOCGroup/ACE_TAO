--- orig/MessagingS.h	Sat Mar 31 14:51:18 2001
+++ PortableServer/MessagingS.h	Sun Apr  1 18:33:16 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -23,11 +23,13 @@
 #define _TAO_IDL_ORIG_MESSAGINGS_H_
 
 #include "ace/pre.h"
-#include "TimeBaseS.h"
-#include "IOPS.h"
-#include "PolicyS.h"
-#include "PollableS.h"
-#include "MessagingC.h"
+
+#include "tao/orbconf.h"
+
+#if (TAO_HAS_CORBA_MESSAGING == 1)
+
+#include "tao/TimeBaseS.h"
+#include "tao/MessagingC.h"
 
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
@@ -54,14 +56,17 @@
 
 TAO_NAMESPACE  POA_Messaging
 {
+
+#if (TAO_HAS_AMI_CALLBACK == 1)
+
   class ReplyHandler;
   typedef ReplyHandler *ReplyHandler_ptr;
   // Forward Classes Declaration
   class _TAO_ReplyHandler_ThruPOA_Proxy_Impl;
   class _TAO_ReplyHandler_Direct_Proxy_Impl;
   class _TAO_ReplyHandler_Strategized_Proxy_Broker;
-  
-  class TAO_Export ReplyHandler :  public virtual PortableServer::ServantBase
+
+  class TAO_PortableServer_Export ReplyHandler :  public virtual PortableServer::ServantBase
   {
   protected:
     ReplyHandler (void);
@@ -73,7 +78,7 @@
 
     virtual CORBA::Boolean _is_a (
         const char* logical_type_id,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
 
@@ -85,7 +90,7 @@
         TAO_ServerRequest &req,
         void *obj,
         void *context,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
 
@@ -93,7 +98,7 @@
         TAO_ServerRequest &req,
         void *obj,
         void *context,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
 
@@ -101,25 +106,25 @@
         TAO_ServerRequest &req,
         void *obj,
         void *context,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
 
     virtual void _dispatch (
         TAO_ServerRequest &_tao_req,
         void *_tao_context,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
 
     ::Messaging::ReplyHandler *_this (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
 
     virtual const char* _interface_repository_id (void) const;
 
-    
+
 #if (TAO_HAS_INTERCEPTORS == 1)
     // Generation of interceptors related RequestInfo classes per operation.
     // This needed to be able to store the arguments, exceptions, contexts
@@ -129,68 +134,68 @@
 
   };
 
-  
+
   ///////////////////////////////////////////////////////////////////////
-  //               Strategized Proxy Broker Declaration 
+  //               Strategized Proxy Broker Declaration
   //
-  
-  class TAO_Export _TAO_ReplyHandler_Strategized_Proxy_Broker : public virtual ::Messaging::_TAO_ReplyHandler_Proxy_Broker
+
+  class TAO_PortableServer_Export _TAO_ReplyHandler_Strategized_Proxy_Broker : public virtual ::Messaging::_TAO_ReplyHandler_Proxy_Broker
   {
-  public: 
+  public:
     _TAO_ReplyHandler_Strategized_Proxy_Broker (void);
-    
+
     virtual ~_TAO_ReplyHandler_Strategized_Proxy_Broker (void);
-    
+
     virtual ::Messaging::_TAO_ReplyHandler_Proxy_Impl &select_proxy (
       ::Messaging::ReplyHandler *object,
       CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
     );
-  
+
   private:
-  
+
   // Helper methods that takes care to create the proxy
   // as soon as their use is necessary.
     void create_proxy (
       int collocation_strategy,
       CORBA::Environment &ACE_TRY_ENV
     );
-  
+
   private:
-    
+
     // Caches the proxy implementations. The proxy implementation
     // are totally stateless, and those can be shared by all the
     // instances of a given IDL interface type.
     ::Messaging::_TAO_ReplyHandler_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
-    
+
     TAO_SYNCH_MUTEX mutex_;
   // This funxtion is used to get an handle to the unique instance
   // of the Strategized Proxy Broker that is available for a given
   // interface.
-  
+
   public:
     static _TAO_ReplyHandler_Strategized_Proxy_Broker *the_TAO_ReplyHandler_Strategized_Proxy_Broker (void);
   };
-  
-  
+
+
   //
-  //            End Strategized Proxy Broker Declaration 
+  //            End Strategized Proxy Broker Declaration
   ///////////////////////////////////////////////////////////////////////
-  
-  
+
+
 ///////////////////////////////////////////////////////////////////////
 //                    ThruPOA  Impl. Declaration
 //
 
-class TAO_Export _TAO_ReplyHandler_ThruPOA_Proxy_Impl : 
+class TAO_PortableServer_Export _TAO_ReplyHandler_ThruPOA_Proxy_Impl :
   public virtual ::Messaging::_TAO_ReplyHandler_Proxy_Impl,
   public virtual TAO_ThruPOA_Object_Proxy_Impl
 {
 public:
   _TAO_ReplyHandler_ThruPOA_Proxy_Impl (void);
-  
+
   virtual ~_TAO_ReplyHandler_ThruPOA_Proxy_Impl (void) { }
-  
+
   };
 
 
@@ -203,15 +208,15 @@
 //                    Direct  Impl. Declaration
 //
 
-class TAO_Export _TAO_ReplyHandler_Direct_Proxy_Impl : 
+class TAO_PortableServer_Export _TAO_ReplyHandler_Direct_Proxy_Impl :
   public virtual Messaging::_TAO_ReplyHandler_Proxy_Impl,
   public virtual TAO_Direct_Object_Proxy_Impl
 {
 public:
   _TAO_ReplyHandler_Direct_Proxy_Impl (void);
-  
+
   virtual ~_TAO_ReplyHandler_Direct_Proxy_Impl (void) { }
-  
+
   };
 
 
@@ -223,7 +228,7 @@
 #if defined (ACE_HAS_USING_KEYWORD)
 // TIE class: Refer to CORBA v2.2, Section 20.34.4
 template <class T>
-class TAO_Export ReplyHandler_tie : public ReplyHandler
+class TAO_PortableServer_Export ReplyHandler_tie : public ReplyHandler
 {
 public:
   ReplyHandler_tie (T &t);
@@ -236,7 +241,7 @@
   // ctor with T*, ownership flag and a POA
   ~ReplyHandler_tie (void);
   // dtor
-  
+
   // TIE specific functions
   T *_tied_object (void);
   // return the underlying object
@@ -248,17 +253,17 @@
   // do we own it
   void _is_owner (CORBA::Boolean b);
   // set the ownership
-  
+
   // overridden ServantBase operations
   PortableServer::POA_ptr _default_POA (
-      CORBA::Environment &ACE_TRY_ENV = 
+      CORBA::Environment &ACE_TRY_ENV =
         TAO_default_environment ()
     );
 private:
   T *ptr_;
   PortableServer::POA_var poa_;
   CORBA::Boolean rel_;
-  
+
   // copy and assignment are not allowed
   ReplyHandler_tie (const ReplyHandler_tie &);
   void operator= (const ReplyHandler_tie &);
@@ -266,6 +271,8 @@
 
 #endif /* ACE_HAS_USING_KEYWORD */
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 */
+
 }
 TAO_NAMESPACE_CLOSE
 
@@ -278,6 +285,8 @@
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma warning(pop)
 #endif /* _MSC_VER */
+
+#endif /* TAO_HAS_CORBA_MESSAGING == 1 */
 
 #if defined (__BORLANDC__)
 #pragma option pop
