--- orig/PortableInterceptorC.cpp	Mon Apr 16 22:50:48 2001
+++ PortableInterceptorC.cpp	Mon Apr 16 23:18:23 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -21,13 +21,6 @@
 
 #include "PortableInterceptorC.h"
 
-#include "tao/Stub.h"
-#include "tao/Invocation.h"
-#include "tao/ClientRequestInfo.h"
-#if TAO_HAS_INTERCEPTORS == 1
-#include "tao/RequestInfo_Util.h"
-#endif  /* TAO_HAS_INTERCEPTORS == 1 */
-
 #if defined (__BORLANDC__)
 #pragma option -w-rvl -w-rch -w-ccc -w-aus
 #endif /* __BORLANDC__ */
@@ -36,6 +29,8 @@
 #include "PortableInterceptorC.i"
 #endif /* !defined INLINE */
 
+#include "CORBA_String.h"
+
 // *************************************************************
 // Operations for class PortableInterceptor::Interceptor_var
 // *************************************************************
@@ -445,7 +440,6 @@
 TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ForwardRequest, &_tc_TAO_tc_PortableInterceptor_ForwardRequest)
 TAO_NAMESPACE_END
 
-
 // TAO extension - the virtual _type method.
 CORBA::TypeCode_ptr PortableInterceptor::ForwardRequest::_type (void) const
 {
@@ -648,7 +642,6 @@
   ACE_NTOHL (0x6c6f7400),  // name = InvalidSlot
   0, // member count
 };
-
 static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_InvalidSlot (
     CORBA::tk_except,
     sizeof (_oc_PortableInterceptor_InvalidSlot),
@@ -662,13 +655,13 @@
 TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_InvalidSlot, &_tc_TAO_tc_PortableInterceptor_InvalidSlot)
 TAO_NAMESPACE_END
 
-
 // TAO extension - the virtual _type method.
 CORBA::TypeCode_ptr PortableInterceptor::InvalidSlot::_type (void) const
 {
   return ::PortableInterceptor::_tc_InvalidSlot;
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::Current_var
 // *************************************************************
@@ -931,6 +924,7 @@
   return "IDL:PortableInterceptor/Current:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::RequestInfo_var
 // *************************************************************
@@ -1181,6 +1175,7 @@
   return "IDL:PortableInterceptor/RequestInfo:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::ClientRequestInfo_var
 // *************************************************************
@@ -1443,6 +1438,7 @@
   return "IDL:PortableInterceptor/ClientRequestInfo:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::ServerRequestInfo_var
 // *************************************************************
@@ -1705,6 +1701,7 @@
   return "IDL:PortableInterceptor/ServerRequestInfo:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::ClientRequestInterceptor_var
 // *************************************************************
@@ -1967,6 +1964,7 @@
   return "IDL:PortableInterceptor/ClientRequestInterceptor:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::ServerRequestInterceptor_var
 // *************************************************************
@@ -2229,6 +2227,7 @@
   return "IDL:PortableInterceptor/ServerRequestInterceptor:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::IORInfo_var
 // *************************************************************
@@ -2479,6 +2478,7 @@
   return "IDL:PortableInterceptor/IORInfo:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::IORInterceptor_var
 // *************************************************************
@@ -2741,6 +2741,7 @@
   return "IDL:PortableInterceptor/IORInterceptor:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::PolicyFactory_var
 // *************************************************************
@@ -2991,6 +2992,7 @@
   return "IDL:PortableInterceptor/PolicyFactory:1.0";
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::ORBInitInfo_var
 // *************************************************************
@@ -3387,6 +3389,7 @@
   return retval;
 }
 
+
 // *************************************************************
 // Operations for class PortableInterceptor::ORBInitializer_var
 // *************************************************************
@@ -3683,12 +3686,14 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result = type->equivalent (PortableInterceptor::_tc_ForwardRequest, ACE_TRY_ENV);
+    CORBA::Boolean result =
+      type->equivalent (PortableInterceptor::_tc_ForwardRequest, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
-      return 0; // not equivalent
+      {
+        return 0;
+      }
     
     if (_tao_any.any_owns_data ())
     {
@@ -3773,12 +3778,14 @@
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result = type->equivalent (PortableInterceptor::_tc_InvalidSlot, ACE_TRY_ENV);
+    CORBA::Boolean result =
+      type->equivalent (PortableInterceptor::_tc_InvalidSlot, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
-      return 0; // not equivalent
+      {
+        return 0;
+      }
     
     if (_tao_any.any_owns_data ())
     {
@@ -3900,4 +3907,3 @@
   #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
   #  pragma instantiate TAO_Object_Manager<PortableInterceptor::ORBInitializer,PortableInterceptor::ORBInitializer_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
-
