--- orig/TAOC.h	Tue Jun 12 17:41:13 2001
+++ TAOC.h	Tue Jun 12 13:58:15 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$ Id: TAOC.h,v 1.24 2000/06/28 03:47:12 marina Exp $ */
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -19,19 +19,29 @@
 // Information about TAO is available at:
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
+// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
+// TAO and the TAO IDL Compiler have been developed by the Center for
+// Distributed Object Computing at Washington University, St. Louis.
+//
+// Information about TAO is available at:
+//                 http://www.cs.wustl.edu/~schmidt/TAO.html
+
 #ifndef _TAO_IDL_ORIG_TAOC_H_
 #define _TAO_IDL_ORIG_TAOC_H_
-
 #include "ace/pre.h"
-#include "tao/corba.h"
+
+#include "tao/corbafwd.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "tao/corbafwd.h"
-#include "PolicyC.h"
-#include "TimeBaseC.h"
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
+#include "tao/PolicyC.h"
+#include "tao/TimeBaseC.h"
+
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -58,6 +68,9 @@
 
 TAO_NAMESPACE  TAO
 {
+
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
   typedef CORBA::UShort BufferingConstraintMode;
   typedef CORBA::UShort_out BufferingConstraintMode_out;
   TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_BufferingConstraintMode;
@@ -86,23 +99,20 @@
     TimeBase::TimeT timeout;
     CORBA::ULong message_count;
     CORBA::ULong message_bytes;
-    
   };
   
   class TAO_Export BufferingConstraint_var
   {
   public:
-    BufferingConstraint_var (void);
+    BufferingConstraint_var (void); // default constructor
     BufferingConstraint_var (BufferingConstraint *);
-    BufferingConstraint_var (const BufferingConstraint_var &);
-    // Fixed-size types only.
-    BufferingConstraint_var (const BufferingConstraint &);
-    ~BufferingConstraint_var (void);
+    BufferingConstraint_var (const BufferingConstraint_var &); // copy constructor
+    BufferingConstraint_var (const BufferingConstraint &); // fixed-size types only
+    ~BufferingConstraint_var (void); // destructor
     
     BufferingConstraint_var &operator= (BufferingConstraint *);
     BufferingConstraint_var &operator= (const BufferingConstraint_var &);
-    // Fixed-size types only.
-    BufferingConstraint_var &operator= (const BufferingConstraint &);
+    BufferingConstraint_var &operator= (const BufferingConstraint &); // fixed-size types only
     BufferingConstraint *operator-> (void);
     const BufferingConstraint *operator-> (void) const;
     
@@ -166,10 +176,7 @@
     static BufferingConstraintPolicy_ptr duplicate (BufferingConstraintPolicy_ptr);
     static void release (BufferingConstraintPolicy_ptr);
     static BufferingConstraintPolicy_ptr nil (void);
-    static BufferingConstraintPolicy_ptr narrow (
-        CORBA::Object *,
-        CORBA::Environment &
-      );
+    static BufferingConstraintPolicy_ptr narrow (CORBA::Object *, CORBA::Environment &);
     static CORBA::Object * upcast (void *);
   
   private:
@@ -210,8 +217,7 @@
 #if !defined (_TAO_BUFFERINGCONSTRAINTPOLICY_CH_)
 #define _TAO_BUFFERINGCONSTRAINTPOLICY_CH_
   
-  class TAO_Export BufferingConstraintPolicy
-    : public virtual CORBA::Policy
+class TAO_Export BufferingConstraintPolicy: public virtual CORBA::Policy
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -221,19 +227,16 @@
 
     // the static operations
     static BufferingConstraintPolicy_ptr _duplicate (BufferingConstraintPolicy_ptr obj);
-    
     static BufferingConstraintPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       );
-    
     static BufferingConstraintPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       );
-    
     static BufferingConstraintPolicy_ptr _nil (void)
       {
         return (BufferingConstraintPolicy_ptr)0;
@@ -252,10 +255,8 @@
     virtual const char* _interface_repository_id (void) const;
 
   protected:
-    BufferingConstraintPolicy ();
-    
+    BufferingConstraintPolicy (void);
     virtual ~BufferingConstraintPolicy (void);
-  
   private:
     BufferingConstraintPolicy (const BufferingConstraintPolicy &);
     void operator= (const BufferingConstraintPolicy &);
@@ -264,6 +265,8 @@
   
 #endif /* end #if !defined */
   
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
+
   typedef CORBA::Short SyncScope;
   typedef CORBA::Short_out SyncScope_out;
   TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_SyncScope;
@@ -280,19 +283,26 @@
   
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::Short SYNC_DELAYED_BUFFERING;
   
-  
 }
 TAO_NAMESPACE_CLOSE // module TAO
 
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
 TAO_Export void operator<<= (CORBA::Any &, const TAO::BufferingConstraint &); // copying version
 TAO_Export void operator<<= (CORBA::Any &, TAO::BufferingConstraint*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, TAO::BufferingConstraint *&); // deprecated
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const TAO::BufferingConstraint *&);
 
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
+
 #ifndef __ACE_INLINE__
 
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO::BufferingConstraint &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, TAO::BufferingConstraint &);
+
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
 
 #endif /* __ACE_INLINE__ */
 
