--- orig/MessagingC.h	Sat Mar 31 14:51:18 2001
+++ MessagingC.h	Sat Mar 31 14:51:49 2001
@@ -23,13 +23,25 @@
 #define _TAO_IDL_ORIG_MESSAGINGC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+#include "orbconf.h"
+
+#if (TAO_HAS_CORBA_MESSAGING == 1)
+
+#include "corbafwd.h"
+
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+#include "ValueBase.h"
+#include "ValueFactory.h"
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
 #include "TAO_Export.h"
+#include "Any.h"
+#include "CDR.h"
+#include "Remote_Object_Proxy_Impl.h"
 #include "tao/SmartProxies/Smart_Proxies.h"
 #include "TimeBaseC.h"
 #include "IOPC.h"
@@ -59,6 +71,11 @@
 #pragma option push -w-rvl -w-rch -w-ccc -w-inl
 #endif /* __BORLANDC__ */
 
+#if defined(TRANSPARENT)
+// Some platforms define this macro for ioctl()
+#undef TRANSPARENT
+#endif
+
 TAO_NAMESPACE  Messaging
 {
   typedef CORBA::Short RebindMode;
@@ -117,6 +134,8 @@
 
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::UShort ORDER_DEADLINE;
 
+#if (TAO_HAS_REBIND_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong REBIND_POLICY_TYPE;
 
 
@@ -125,7 +144,7 @@
 
   class RebindPolicy;
   typedef RebindPolicy *RebindPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -136,17 +155,17 @@
   {
   public:
     RebindPolicy_var (void); // default constructor
-    RebindPolicy_var (RebindPolicy_ptr p) : ptr_ (p) {} 
+    RebindPolicy_var (RebindPolicy_ptr p) : ptr_ (p) {}
     RebindPolicy_var (const RebindPolicy_var &); // copy constructor
     ~RebindPolicy_var (void); // destructor
-    
+
     RebindPolicy_var &operator= (RebindPolicy_ptr);
     RebindPolicy_var &operator= (const RebindPolicy_var &);
     RebindPolicy_ptr operator-> (void) const;
-    
+
     operator const RebindPolicy_ptr &() const;
     operator RebindPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RebindPolicy_ptr in (void) const;
     RebindPolicy_ptr &inout (void);
     RebindPolicy_ptr &out (void);
@@ -179,7 +198,7 @@
     operator RebindPolicy_ptr &();
     RebindPolicy_ptr &ptr (void);
     RebindPolicy_ptr operator-> (void);
-    
+
   private:
     RebindPolicy_ptr &ptr_;
   };
@@ -203,12 +222,12 @@
     static RebindPolicy_ptr _duplicate (RebindPolicy_ptr obj);
     static RebindPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RebindPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RebindPolicy_ptr _nil (void)
@@ -217,7 +236,7 @@
       }
 
     virtual Messaging::RebindMode rebind_mode (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -225,12 +244,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RebindPolicy ();
-    
+
     virtual ~RebindPolicy (void);
   private:
     RebindPolicy (const RebindPolicy &);
@@ -240,6 +259,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_REBIND_POLICY == 1 */
+
+#if (TAO_HAS_SYNC_SCOPE_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong SYNC_SCOPE_POLICY_TYPE;
 
 
@@ -248,7 +271,7 @@
 
   class SyncScopePolicy;
   typedef SyncScopePolicy *SyncScopePolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -259,17 +282,17 @@
   {
   public:
     SyncScopePolicy_var (void); // default constructor
-    SyncScopePolicy_var (SyncScopePolicy_ptr p) : ptr_ (p) {} 
+    SyncScopePolicy_var (SyncScopePolicy_ptr p) : ptr_ (p) {}
     SyncScopePolicy_var (const SyncScopePolicy_var &); // copy constructor
     ~SyncScopePolicy_var (void); // destructor
-    
+
     SyncScopePolicy_var &operator= (SyncScopePolicy_ptr);
     SyncScopePolicy_var &operator= (const SyncScopePolicy_var &);
     SyncScopePolicy_ptr operator-> (void) const;
-    
+
     operator const SyncScopePolicy_ptr &() const;
     operator SyncScopePolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     SyncScopePolicy_ptr in (void) const;
     SyncScopePolicy_ptr &inout (void);
     SyncScopePolicy_ptr &out (void);
@@ -302,7 +325,7 @@
     operator SyncScopePolicy_ptr &();
     SyncScopePolicy_ptr &ptr (void);
     SyncScopePolicy_ptr operator-> (void);
-    
+
   private:
     SyncScopePolicy_ptr &ptr_;
   };
@@ -326,12 +349,12 @@
     static SyncScopePolicy_ptr _duplicate (SyncScopePolicy_ptr obj);
     static SyncScopePolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static SyncScopePolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static SyncScopePolicy_ptr _nil (void)
@@ -340,7 +363,7 @@
       }
 
     virtual Messaging::SyncScope synchronization (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -348,12 +371,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     SyncScopePolicy ();
-    
+
     virtual ~SyncScopePolicy (void);
   private:
     SyncScopePolicy (const SyncScopePolicy &);
@@ -363,11 +386,15 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_SYNC_SCOPE_POLICY == 1 */
+
+#if (TAO_HAS_PRIORITY_POLICIES == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong REQUEST_PRIORITY_POLICY_TYPE;
 
   struct PriorityRange;
   class PriorityRange_var;
-  
+
   struct TAO_Export PriorityRange
   {
 
@@ -389,18 +416,18 @@
     PriorityRange_var (const PriorityRange_var &); // copy constructor
     PriorityRange_var (const PriorityRange &); // fixed-size types only
     ~PriorityRange_var (void); // destructor
-    
+
     PriorityRange_var &operator= (PriorityRange *);
     PriorityRange_var &operator= (const PriorityRange_var &);
     PriorityRange_var &operator= (const PriorityRange &); // fixed-size types only
     PriorityRange *operator-> (void);
     const PriorityRange *operator-> (void) const;
-    
+
     operator const PriorityRange &() const;
     operator PriorityRange &();
     operator PriorityRange &() const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const PriorityRange &in (void) const;
     PriorityRange &inout (void);
     PriorityRange &out (void);
@@ -421,7 +448,7 @@
 
   class RequestPriorityPolicy;
   typedef RequestPriorityPolicy *RequestPriorityPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -432,17 +459,17 @@
   {
   public:
     RequestPriorityPolicy_var (void); // default constructor
-    RequestPriorityPolicy_var (RequestPriorityPolicy_ptr p) : ptr_ (p) {} 
+    RequestPriorityPolicy_var (RequestPriorityPolicy_ptr p) : ptr_ (p) {}
     RequestPriorityPolicy_var (const RequestPriorityPolicy_var &); // copy constructor
     ~RequestPriorityPolicy_var (void); // destructor
-    
+
     RequestPriorityPolicy_var &operator= (RequestPriorityPolicy_ptr);
     RequestPriorityPolicy_var &operator= (const RequestPriorityPolicy_var &);
     RequestPriorityPolicy_ptr operator-> (void) const;
-    
+
     operator const RequestPriorityPolicy_ptr &() const;
     operator RequestPriorityPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RequestPriorityPolicy_ptr in (void) const;
     RequestPriorityPolicy_ptr &inout (void);
     RequestPriorityPolicy_ptr &out (void);
@@ -475,7 +502,7 @@
     operator RequestPriorityPolicy_ptr &();
     RequestPriorityPolicy_ptr &ptr (void);
     RequestPriorityPolicy_ptr operator-> (void);
-    
+
   private:
     RequestPriorityPolicy_ptr &ptr_;
   };
@@ -499,12 +526,12 @@
     static RequestPriorityPolicy_ptr _duplicate (RequestPriorityPolicy_ptr obj);
     static RequestPriorityPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RequestPriorityPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RequestPriorityPolicy_ptr _nil (void)
@@ -513,7 +540,7 @@
       }
 
     virtual Messaging::PriorityRange priority_range (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -521,12 +548,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RequestPriorityPolicy ();
-    
+
     virtual ~RequestPriorityPolicy (void);
   private:
     RequestPriorityPolicy (const RequestPriorityPolicy &);
@@ -544,7 +571,7 @@
 
   class ReplyPriorityPolicy;
   typedef ReplyPriorityPolicy *ReplyPriorityPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -555,17 +582,17 @@
   {
   public:
     ReplyPriorityPolicy_var (void); // default constructor
-    ReplyPriorityPolicy_var (ReplyPriorityPolicy_ptr p) : ptr_ (p) {} 
+    ReplyPriorityPolicy_var (ReplyPriorityPolicy_ptr p) : ptr_ (p) {}
     ReplyPriorityPolicy_var (const ReplyPriorityPolicy_var &); // copy constructor
     ~ReplyPriorityPolicy_var (void); // destructor
-    
+
     ReplyPriorityPolicy_var &operator= (ReplyPriorityPolicy_ptr);
     ReplyPriorityPolicy_var &operator= (const ReplyPriorityPolicy_var &);
     ReplyPriorityPolicy_ptr operator-> (void) const;
-    
+
     operator const ReplyPriorityPolicy_ptr &() const;
     operator ReplyPriorityPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ReplyPriorityPolicy_ptr in (void) const;
     ReplyPriorityPolicy_ptr &inout (void);
     ReplyPriorityPolicy_ptr &out (void);
@@ -598,7 +625,7 @@
     operator ReplyPriorityPolicy_ptr &();
     ReplyPriorityPolicy_ptr &ptr (void);
     ReplyPriorityPolicy_ptr operator-> (void);
-    
+
   private:
     ReplyPriorityPolicy_ptr &ptr_;
   };
@@ -622,12 +649,12 @@
     static ReplyPriorityPolicy_ptr _duplicate (ReplyPriorityPolicy_ptr obj);
     static ReplyPriorityPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyPriorityPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyPriorityPolicy_ptr _nil (void)
@@ -636,7 +663,7 @@
       }
 
     virtual Messaging::PriorityRange priority_range (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -644,12 +671,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     ReplyPriorityPolicy ();
-    
+
     virtual ~ReplyPriorityPolicy (void);
   private:
     ReplyPriorityPolicy (const ReplyPriorityPolicy &);
@@ -659,6 +686,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */
+
+#if (TAO_HAS_REQUEST_START_TIME_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong REQUEST_START_TIME_POLICY_TYPE;
 
 
@@ -667,7 +698,7 @@
 
   class RequestStartTimePolicy;
   typedef RequestStartTimePolicy *RequestStartTimePolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -678,17 +709,17 @@
   {
   public:
     RequestStartTimePolicy_var (void); // default constructor
-    RequestStartTimePolicy_var (RequestStartTimePolicy_ptr p) : ptr_ (p) {} 
+    RequestStartTimePolicy_var (RequestStartTimePolicy_ptr p) : ptr_ (p) {}
     RequestStartTimePolicy_var (const RequestStartTimePolicy_var &); // copy constructor
     ~RequestStartTimePolicy_var (void); // destructor
-    
+
     RequestStartTimePolicy_var &operator= (RequestStartTimePolicy_ptr);
     RequestStartTimePolicy_var &operator= (const RequestStartTimePolicy_var &);
     RequestStartTimePolicy_ptr operator-> (void) const;
-    
+
     operator const RequestStartTimePolicy_ptr &() const;
     operator RequestStartTimePolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RequestStartTimePolicy_ptr in (void) const;
     RequestStartTimePolicy_ptr &inout (void);
     RequestStartTimePolicy_ptr &out (void);
@@ -721,7 +752,7 @@
     operator RequestStartTimePolicy_ptr &();
     RequestStartTimePolicy_ptr &ptr (void);
     RequestStartTimePolicy_ptr operator-> (void);
-    
+
   private:
     RequestStartTimePolicy_ptr &ptr_;
   };
@@ -745,12 +776,12 @@
     static RequestStartTimePolicy_ptr _duplicate (RequestStartTimePolicy_ptr obj);
     static RequestStartTimePolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RequestStartTimePolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RequestStartTimePolicy_ptr _nil (void)
@@ -759,7 +790,7 @@
       }
 
     virtual TimeBase::UtcT start_time (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -767,12 +798,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RequestStartTimePolicy ();
-    
+
     virtual ~RequestStartTimePolicy (void);
   private:
     RequestStartTimePolicy (const RequestStartTimePolicy &);
@@ -782,6 +813,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_REQUEST_START_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REQUEST_END_TIME_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong REQUEST_END_TIME_POLICY_TYPE;
 
 
@@ -790,7 +825,7 @@
 
   class RequestEndTimePolicy;
   typedef RequestEndTimePolicy *RequestEndTimePolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -801,17 +836,17 @@
   {
   public:
     RequestEndTimePolicy_var (void); // default constructor
-    RequestEndTimePolicy_var (RequestEndTimePolicy_ptr p) : ptr_ (p) {} 
+    RequestEndTimePolicy_var (RequestEndTimePolicy_ptr p) : ptr_ (p) {}
     RequestEndTimePolicy_var (const RequestEndTimePolicy_var &); // copy constructor
     ~RequestEndTimePolicy_var (void); // destructor
-    
+
     RequestEndTimePolicy_var &operator= (RequestEndTimePolicy_ptr);
     RequestEndTimePolicy_var &operator= (const RequestEndTimePolicy_var &);
     RequestEndTimePolicy_ptr operator-> (void) const;
-    
+
     operator const RequestEndTimePolicy_ptr &() const;
     operator RequestEndTimePolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RequestEndTimePolicy_ptr in (void) const;
     RequestEndTimePolicy_ptr &inout (void);
     RequestEndTimePolicy_ptr &out (void);
@@ -844,7 +879,7 @@
     operator RequestEndTimePolicy_ptr &();
     RequestEndTimePolicy_ptr &ptr (void);
     RequestEndTimePolicy_ptr operator-> (void);
-    
+
   private:
     RequestEndTimePolicy_ptr &ptr_;
   };
@@ -868,12 +903,12 @@
     static RequestEndTimePolicy_ptr _duplicate (RequestEndTimePolicy_ptr obj);
     static RequestEndTimePolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RequestEndTimePolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RequestEndTimePolicy_ptr _nil (void)
@@ -882,7 +917,7 @@
       }
 
     virtual TimeBase::UtcT end_time (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -890,12 +925,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RequestEndTimePolicy ();
-    
+
     virtual ~RequestEndTimePolicy (void);
   private:
     RequestEndTimePolicy (const RequestEndTimePolicy &);
@@ -905,6 +940,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_REQUEST_END_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REPLY_START_TIME_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong REPLY_START_TIME_POLICY_TYPE;
 
 
@@ -913,7 +952,7 @@
 
   class ReplyStartTimePolicy;
   typedef ReplyStartTimePolicy *ReplyStartTimePolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -924,17 +963,17 @@
   {
   public:
     ReplyStartTimePolicy_var (void); // default constructor
-    ReplyStartTimePolicy_var (ReplyStartTimePolicy_ptr p) : ptr_ (p) {} 
+    ReplyStartTimePolicy_var (ReplyStartTimePolicy_ptr p) : ptr_ (p) {}
     ReplyStartTimePolicy_var (const ReplyStartTimePolicy_var &); // copy constructor
     ~ReplyStartTimePolicy_var (void); // destructor
-    
+
     ReplyStartTimePolicy_var &operator= (ReplyStartTimePolicy_ptr);
     ReplyStartTimePolicy_var &operator= (const ReplyStartTimePolicy_var &);
     ReplyStartTimePolicy_ptr operator-> (void) const;
-    
+
     operator const ReplyStartTimePolicy_ptr &() const;
     operator ReplyStartTimePolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ReplyStartTimePolicy_ptr in (void) const;
     ReplyStartTimePolicy_ptr &inout (void);
     ReplyStartTimePolicy_ptr &out (void);
@@ -967,7 +1006,7 @@
     operator ReplyStartTimePolicy_ptr &();
     ReplyStartTimePolicy_ptr &ptr (void);
     ReplyStartTimePolicy_ptr operator-> (void);
-    
+
   private:
     ReplyStartTimePolicy_ptr &ptr_;
   };
@@ -991,12 +1030,12 @@
     static ReplyStartTimePolicy_ptr _duplicate (ReplyStartTimePolicy_ptr obj);
     static ReplyStartTimePolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyStartTimePolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyStartTimePolicy_ptr _nil (void)
@@ -1005,7 +1044,7 @@
       }
 
     virtual TimeBase::UtcT start_time (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1013,12 +1052,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     ReplyStartTimePolicy ();
-    
+
     virtual ~ReplyStartTimePolicy (void);
   private:
     ReplyStartTimePolicy (const ReplyStartTimePolicy &);
@@ -1028,6 +1067,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_REPLY_START_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REPLY_END_TIME_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong REPLY_END_TIME_POLICY_TYPE;
 
 
@@ -1036,7 +1079,7 @@
 
   class ReplyEndTimePolicy;
   typedef ReplyEndTimePolicy *ReplyEndTimePolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1047,17 +1090,17 @@
   {
   public:
     ReplyEndTimePolicy_var (void); // default constructor
-    ReplyEndTimePolicy_var (ReplyEndTimePolicy_ptr p) : ptr_ (p) {} 
+    ReplyEndTimePolicy_var (ReplyEndTimePolicy_ptr p) : ptr_ (p) {}
     ReplyEndTimePolicy_var (const ReplyEndTimePolicy_var &); // copy constructor
     ~ReplyEndTimePolicy_var (void); // destructor
-    
+
     ReplyEndTimePolicy_var &operator= (ReplyEndTimePolicy_ptr);
     ReplyEndTimePolicy_var &operator= (const ReplyEndTimePolicy_var &);
     ReplyEndTimePolicy_ptr operator-> (void) const;
-    
+
     operator const ReplyEndTimePolicy_ptr &() const;
     operator ReplyEndTimePolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ReplyEndTimePolicy_ptr in (void) const;
     ReplyEndTimePolicy_ptr &inout (void);
     ReplyEndTimePolicy_ptr &out (void);
@@ -1090,7 +1133,7 @@
     operator ReplyEndTimePolicy_ptr &();
     ReplyEndTimePolicy_ptr &ptr (void);
     ReplyEndTimePolicy_ptr operator-> (void);
-    
+
   private:
     ReplyEndTimePolicy_ptr &ptr_;
   };
@@ -1114,12 +1157,12 @@
     static ReplyEndTimePolicy_ptr _duplicate (ReplyEndTimePolicy_ptr obj);
     static ReplyEndTimePolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyEndTimePolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyEndTimePolicy_ptr _nil (void)
@@ -1128,7 +1171,7 @@
       }
 
     virtual TimeBase::UtcT end_time (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1136,12 +1179,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     ReplyEndTimePolicy ();
-    
+
     virtual ~ReplyEndTimePolicy (void);
   private:
     ReplyEndTimePolicy (const ReplyEndTimePolicy &);
@@ -1151,6 +1194,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_REPLY_END_TIME_POLICY == 1 */
+
+#if (TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong RELATIVE_REQ_TIMEOUT_POLICY_TYPE;
 
 
@@ -1159,7 +1206,7 @@
 
   class RelativeRequestTimeoutPolicy;
   typedef RelativeRequestTimeoutPolicy *RelativeRequestTimeoutPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1170,17 +1217,17 @@
   {
   public:
     RelativeRequestTimeoutPolicy_var (void); // default constructor
-    RelativeRequestTimeoutPolicy_var (RelativeRequestTimeoutPolicy_ptr p) : ptr_ (p) {} 
+    RelativeRequestTimeoutPolicy_var (RelativeRequestTimeoutPolicy_ptr p) : ptr_ (p) {}
     RelativeRequestTimeoutPolicy_var (const RelativeRequestTimeoutPolicy_var &); // copy constructor
     ~RelativeRequestTimeoutPolicy_var (void); // destructor
-    
+
     RelativeRequestTimeoutPolicy_var &operator= (RelativeRequestTimeoutPolicy_ptr);
     RelativeRequestTimeoutPolicy_var &operator= (const RelativeRequestTimeoutPolicy_var &);
     RelativeRequestTimeoutPolicy_ptr operator-> (void) const;
-    
+
     operator const RelativeRequestTimeoutPolicy_ptr &() const;
     operator RelativeRequestTimeoutPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RelativeRequestTimeoutPolicy_ptr in (void) const;
     RelativeRequestTimeoutPolicy_ptr &inout (void);
     RelativeRequestTimeoutPolicy_ptr &out (void);
@@ -1213,7 +1260,7 @@
     operator RelativeRequestTimeoutPolicy_ptr &();
     RelativeRequestTimeoutPolicy_ptr &ptr (void);
     RelativeRequestTimeoutPolicy_ptr operator-> (void);
-    
+
   private:
     RelativeRequestTimeoutPolicy_ptr &ptr_;
   };
@@ -1237,12 +1284,12 @@
     static RelativeRequestTimeoutPolicy_ptr _duplicate (RelativeRequestTimeoutPolicy_ptr obj);
     static RelativeRequestTimeoutPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RelativeRequestTimeoutPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RelativeRequestTimeoutPolicy_ptr _nil (void)
@@ -1251,7 +1298,7 @@
       }
 
     virtual TimeBase::TimeT relative_expiry (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1259,12 +1306,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RelativeRequestTimeoutPolicy ();
-    
+
     virtual ~RelativeRequestTimeoutPolicy (void);
   private:
     RelativeRequestTimeoutPolicy (const RelativeRequestTimeoutPolicy &);
@@ -1274,6 +1321,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1 */
+
+#if (TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong RELATIVE_RT_TIMEOUT_POLICY_TYPE;
 
 
@@ -1282,7 +1333,7 @@
 
   class RelativeRoundtripTimeoutPolicy;
   typedef RelativeRoundtripTimeoutPolicy *RelativeRoundtripTimeoutPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1293,17 +1344,17 @@
   {
   public:
     RelativeRoundtripTimeoutPolicy_var (void); // default constructor
-    RelativeRoundtripTimeoutPolicy_var (RelativeRoundtripTimeoutPolicy_ptr p) : ptr_ (p) {} 
+    RelativeRoundtripTimeoutPolicy_var (RelativeRoundtripTimeoutPolicy_ptr p) : ptr_ (p) {}
     RelativeRoundtripTimeoutPolicy_var (const RelativeRoundtripTimeoutPolicy_var &); // copy constructor
     ~RelativeRoundtripTimeoutPolicy_var (void); // destructor
-    
+
     RelativeRoundtripTimeoutPolicy_var &operator= (RelativeRoundtripTimeoutPolicy_ptr);
     RelativeRoundtripTimeoutPolicy_var &operator= (const RelativeRoundtripTimeoutPolicy_var &);
     RelativeRoundtripTimeoutPolicy_ptr operator-> (void) const;
-    
+
     operator const RelativeRoundtripTimeoutPolicy_ptr &() const;
     operator RelativeRoundtripTimeoutPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RelativeRoundtripTimeoutPolicy_ptr in (void) const;
     RelativeRoundtripTimeoutPolicy_ptr &inout (void);
     RelativeRoundtripTimeoutPolicy_ptr &out (void);
@@ -1336,7 +1387,7 @@
     operator RelativeRoundtripTimeoutPolicy_ptr &();
     RelativeRoundtripTimeoutPolicy_ptr &ptr (void);
     RelativeRoundtripTimeoutPolicy_ptr operator-> (void);
-    
+
   private:
     RelativeRoundtripTimeoutPolicy_ptr &ptr_;
   };
@@ -1360,12 +1411,12 @@
     static RelativeRoundtripTimeoutPolicy_ptr _duplicate (RelativeRoundtripTimeoutPolicy_ptr obj);
     static RelativeRoundtripTimeoutPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RelativeRoundtripTimeoutPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RelativeRoundtripTimeoutPolicy_ptr _nil (void)
@@ -1374,7 +1425,7 @@
       }
 
     virtual TimeBase::TimeT relative_expiry (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1382,12 +1433,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RelativeRoundtripTimeoutPolicy ();
-    
+
     virtual ~RelativeRoundtripTimeoutPolicy (void);
   private:
     RelativeRoundtripTimeoutPolicy (const RelativeRoundtripTimeoutPolicy &);
@@ -1397,11 +1448,15 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1 */
+
+#if (TAO_HAS_ROUTING_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong ROUTING_POLICY_TYPE;
 
   struct RoutingTypeRange;
   class RoutingTypeRange_var;
-  
+
   struct TAO_Export RoutingTypeRange
   {
 
@@ -1423,18 +1478,18 @@
     RoutingTypeRange_var (const RoutingTypeRange_var &); // copy constructor
     RoutingTypeRange_var (const RoutingTypeRange &); // fixed-size types only
     ~RoutingTypeRange_var (void); // destructor
-    
+
     RoutingTypeRange_var &operator= (RoutingTypeRange *);
     RoutingTypeRange_var &operator= (const RoutingTypeRange_var &);
     RoutingTypeRange_var &operator= (const RoutingTypeRange &); // fixed-size types only
     RoutingTypeRange *operator-> (void);
     const RoutingTypeRange *operator-> (void) const;
-    
+
     operator const RoutingTypeRange &() const;
     operator RoutingTypeRange &();
     operator RoutingTypeRange &() const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const RoutingTypeRange &in (void) const;
     RoutingTypeRange &inout (void);
     RoutingTypeRange &out (void);
@@ -1455,7 +1510,7 @@
 
   class RoutingPolicy;
   typedef RoutingPolicy *RoutingPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1466,17 +1521,17 @@
   {
   public:
     RoutingPolicy_var (void); // default constructor
-    RoutingPolicy_var (RoutingPolicy_ptr p) : ptr_ (p) {} 
+    RoutingPolicy_var (RoutingPolicy_ptr p) : ptr_ (p) {}
     RoutingPolicy_var (const RoutingPolicy_var &); // copy constructor
     ~RoutingPolicy_var (void); // destructor
-    
+
     RoutingPolicy_var &operator= (RoutingPolicy_ptr);
     RoutingPolicy_var &operator= (const RoutingPolicy_var &);
     RoutingPolicy_ptr operator-> (void) const;
-    
+
     operator const RoutingPolicy_ptr &() const;
     operator RoutingPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     RoutingPolicy_ptr in (void) const;
     RoutingPolicy_ptr &inout (void);
     RoutingPolicy_ptr &out (void);
@@ -1509,7 +1564,7 @@
     operator RoutingPolicy_ptr &();
     RoutingPolicy_ptr &ptr (void);
     RoutingPolicy_ptr operator-> (void);
-    
+
   private:
     RoutingPolicy_ptr &ptr_;
   };
@@ -1533,12 +1588,12 @@
     static RoutingPolicy_ptr _duplicate (RoutingPolicy_ptr obj);
     static RoutingPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RoutingPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static RoutingPolicy_ptr _nil (void)
@@ -1547,7 +1602,7 @@
       }
 
     virtual Messaging::RoutingTypeRange routing_range (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1555,12 +1610,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     RoutingPolicy ();
-    
+
     virtual ~RoutingPolicy (void);
   private:
     RoutingPolicy (const RoutingPolicy &);
@@ -1570,6 +1625,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_ROUTING_POLICY == 1 */
+
+#if (TAO_HAS_MAX_HOPS_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong MAX_HOPS_POLICY_TYPE;
 
 
@@ -1578,7 +1637,7 @@
 
   class MaxHopsPolicy;
   typedef MaxHopsPolicy *MaxHopsPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1589,17 +1648,17 @@
   {
   public:
     MaxHopsPolicy_var (void); // default constructor
-    MaxHopsPolicy_var (MaxHopsPolicy_ptr p) : ptr_ (p) {} 
+    MaxHopsPolicy_var (MaxHopsPolicy_ptr p) : ptr_ (p) {}
     MaxHopsPolicy_var (const MaxHopsPolicy_var &); // copy constructor
     ~MaxHopsPolicy_var (void); // destructor
-    
+
     MaxHopsPolicy_var &operator= (MaxHopsPolicy_ptr);
     MaxHopsPolicy_var &operator= (const MaxHopsPolicy_var &);
     MaxHopsPolicy_ptr operator-> (void) const;
-    
+
     operator const MaxHopsPolicy_ptr &() const;
     operator MaxHopsPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     MaxHopsPolicy_ptr in (void) const;
     MaxHopsPolicy_ptr &inout (void);
     MaxHopsPolicy_ptr &out (void);
@@ -1632,7 +1691,7 @@
     operator MaxHopsPolicy_ptr &();
     MaxHopsPolicy_ptr &ptr (void);
     MaxHopsPolicy_ptr operator-> (void);
-    
+
   private:
     MaxHopsPolicy_ptr &ptr_;
   };
@@ -1656,12 +1715,12 @@
     static MaxHopsPolicy_ptr _duplicate (MaxHopsPolicy_ptr obj);
     static MaxHopsPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static MaxHopsPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static MaxHopsPolicy_ptr _nil (void)
@@ -1670,7 +1729,7 @@
       }
 
     virtual CORBA::UShort max_hops (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1678,12 +1737,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     MaxHopsPolicy ();
-    
+
     virtual ~MaxHopsPolicy (void);
   private:
     MaxHopsPolicy (const MaxHopsPolicy &);
@@ -1693,6 +1752,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_MAX_HOPS_POLICY == 1 */
+
+#if (TAO_HAS_QUEUE_ORDER_POLICY == 1)
+
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong QUEUE_ORDER_POLICY_TYPE;
 
 
@@ -1701,7 +1764,7 @@
 
   class QueueOrderPolicy;
   typedef QueueOrderPolicy *QueueOrderPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -1712,17 +1775,17 @@
   {
   public:
     QueueOrderPolicy_var (void); // default constructor
-    QueueOrderPolicy_var (QueueOrderPolicy_ptr p) : ptr_ (p) {} 
+    QueueOrderPolicy_var (QueueOrderPolicy_ptr p) : ptr_ (p) {}
     QueueOrderPolicy_var (const QueueOrderPolicy_var &); // copy constructor
     ~QueueOrderPolicy_var (void); // destructor
-    
+
     QueueOrderPolicy_var &operator= (QueueOrderPolicy_ptr);
     QueueOrderPolicy_var &operator= (const QueueOrderPolicy_var &);
     QueueOrderPolicy_ptr operator-> (void) const;
-    
+
     operator const QueueOrderPolicy_ptr &() const;
     operator QueueOrderPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     QueueOrderPolicy_ptr in (void) const;
     QueueOrderPolicy_ptr &inout (void);
     QueueOrderPolicy_ptr &out (void);
@@ -1755,7 +1818,7 @@
     operator QueueOrderPolicy_ptr &();
     QueueOrderPolicy_ptr &ptr (void);
     QueueOrderPolicy_ptr operator-> (void);
-    
+
   private:
     QueueOrderPolicy_ptr &ptr_;
   };
@@ -1779,12 +1842,12 @@
     static QueueOrderPolicy_ptr _duplicate (QueueOrderPolicy_ptr obj);
     static QueueOrderPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static QueueOrderPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static QueueOrderPolicy_ptr _nil (void)
@@ -1793,7 +1856,7 @@
       }
 
     virtual Messaging::Ordering allowed_orders (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -1801,12 +1864,12 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
     QueueOrderPolicy ();
-    
+
     virtual ~QueueOrderPolicy (void);
   private:
     QueueOrderPolicy (const QueueOrderPolicy &);
@@ -1816,9 +1879,11 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_QUEUE_ORDER_POLICY == 1 */
+
   struct PolicyValue;
   class PolicyValue_var;
-  
+
   struct TAO_Export PolicyValue
   {
 
@@ -1835,25 +1900,25 @@
 
     class _tao_seq_Octet;
     class _tao_seq_Octet_var;
-    
+
     // *************************************************************
     // _tao_seq_Octet
     // *************************************************************
-    
-    class TAO_Export _tao_seq_Octet : public 
+
+    class TAO_Export _tao_seq_Octet : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
       TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
       TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
     {
     public:
       _tao_seq_Octet (void); // default ctor
       _tao_seq_Octet (CORBA::ULong max); // uses max size
       _tao_seq_Octet (
-        CORBA::ULong max, 
-        CORBA::ULong length, 
-        CORBA::Octet *buffer, 
+        CORBA::ULong max,
+        CORBA::ULong length,
+        CORBA::Octet *buffer,
         CORBA::Boolean release = 0
       );
       _tao_seq_Octet (const _tao_seq_Octet &); // copy ctor
@@ -1874,7 +1939,7 @@
 #endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
 
     };
-    
+
 #endif /* end #if !defined */
 
 #if !defined (__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -1891,18 +1956,18 @@
     PolicyValue_var (PolicyValue *);
     PolicyValue_var (const PolicyValue_var &); // copy constructor
     ~PolicyValue_var (void); // destructor
-    
+
     PolicyValue_var &operator= (PolicyValue *);
     PolicyValue_var &operator= (const PolicyValue_var &);
     PolicyValue *operator-> (void);
     const PolicyValue *operator-> (void) const;
-    
+
     operator const PolicyValue &() const;
     operator PolicyValue &();
     operator PolicyValue &() const;
     operator PolicyValue *&(); // variable-size types only
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const PolicyValue &in (void) const;
     PolicyValue &inout (void);
     PolicyValue *&out (void);
@@ -1924,7 +1989,7 @@
     operator PolicyValue *&();
     PolicyValue *&ptr (void);
     PolicyValue *operator-> (void);
-    
+
   private:
     PolicyValue *&ptr_;
     // assignment from T_var not allowed
@@ -1935,7 +2000,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-    
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CH_)
 #define __TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CH_
 
@@ -1943,9 +2008,9 @@
     {
     public:
       // = Initialization and termination methods.
-      
+
       _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (void); // Default constructor.
-      _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (CORBA::ULong maximum); 
+      _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (CORBA::ULong maximum);
       _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (CORBA::ULong maximum,
         CORBA::ULong length,
         PolicyValue *data,
@@ -1962,7 +2027,7 @@
       virtual void _allocate_buffer (CORBA::ULong length);
       virtual void _deallocate_buffer (void);
       // Implement the TAO_Base_Sequence methods (see Sequence.h)
-      
+
       PolicyValue *get_buffer (CORBA::Boolean orphan = 0);
       const PolicyValue *get_buffer (void) const;
       void replace (CORBA::ULong max,
@@ -1974,32 +2039,32 @@
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
-  
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
+
 #if !defined (_MESSAGING_POLICYVALUESEQ_CH_)
 #define _MESSAGING_POLICYVALUESEQ_CH_
 
   class PolicyValueSeq;
   class PolicyValueSeq_var;
-  
+
   // *************************************************************
   // PolicyValueSeq
   // *************************************************************
-  
-  class TAO_Export PolicyValueSeq : public 
+
+  class TAO_Export PolicyValueSeq : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<PolicyValue>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
   {
   public:
     PolicyValueSeq (void); // default ctor
     PolicyValueSeq (CORBA::ULong max); // uses max size
     PolicyValueSeq (
-      CORBA::ULong max, 
-      CORBA::ULong length, 
-      PolicyValue *buffer, 
+      CORBA::ULong max,
+      CORBA::ULong length,
+      PolicyValue *buffer,
       CORBA::Boolean release = 0
     );
     PolicyValueSeq (const PolicyValueSeq &); // copy ctor
@@ -2011,7 +2076,7 @@
 #endif /* ! __GNUC__ || g++ >= 2.8 */
 
   };
-  
+
 #endif /* end #if !defined */
 
 
@@ -2029,21 +2094,21 @@
     PolicyValueSeq_var (PolicyValueSeq *);
     PolicyValueSeq_var (const PolicyValueSeq_var &); // copy constructor
     ~PolicyValueSeq_var (void); // destructor
-    
+
     PolicyValueSeq_var &operator= (PolicyValueSeq *);
     PolicyValueSeq_var &operator= (const PolicyValueSeq_var &);
     PolicyValueSeq *operator-> (void);
     const PolicyValueSeq *operator-> (void) const;
-    
+
     operator const PolicyValueSeq &() const;
     operator PolicyValueSeq &();
     operator PolicyValueSeq &() const;
     operator PolicyValueSeq *&(); // variable-size base types only
-    
+
     PolicyValue & operator[] (CORBA::ULong index);
     const PolicyValue & operator[] (CORBA::ULong index) const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const PolicyValueSeq &in (void) const;
     PolicyValueSeq &inout (void);
     PolicyValueSeq *&out (void);
@@ -2073,7 +2138,7 @@
     PolicyValueSeq *&ptr (void);
     PolicyValueSeq *operator-> (void);
     PolicyValue & operator[] (CORBA::ULong index);
-    
+
   private:
     PolicyValueSeq *&ptr_;
     // assignment from T_var not allowed
@@ -2089,10 +2154,12 @@
 
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong INVOCATION_POLICIES;
 
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+
 // valuetype class
   class ExceptionHolder;
   typedef ExceptionHolder *ExceptionHolder_ptr;
-  
+
 #if !defined (_MESSAGING_EXCEPTIONHOLDER___VAR_CH_)
 #define _MESSAGING_EXCEPTIONHOLDER___VAR_CH_
 
@@ -2104,14 +2171,14 @@
     ExceptionHolder_var (const ExceptionHolder*); // (TAO extension)
     ExceptionHolder_var (const ExceptionHolder_var &); // copy constructor
     ~ExceptionHolder_var (void); // destructor
-    
+
     ExceptionHolder_var &operator= (ExceptionHolder*);
     ExceptionHolder_var &operator= (const ExceptionHolder_var &);
     ExceptionHolder* operator-> (void) const;
-    
+
     operator const ExceptionHolder* () const;
     operator ExceptionHolder* ();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ExceptionHolder* in (void) const;
     ExceptionHolder* &inout (void);
     ExceptionHolder* &out (void);
@@ -2141,7 +2208,7 @@
     operator ExceptionHolder* &();
     ExceptionHolder* &ptr (void);
     ExceptionHolder* operator-> (void);
-    
+
   private:
     ExceptionHolder* &ptr_;
   };
@@ -2160,7 +2227,7 @@
     virtual const char* tao_repository_id (void);
 
     // create () goes here
-    
+
   };
 
 #endif /* end #if !defined */
@@ -2197,25 +2264,25 @@
 
     class _tao_seq_Octet;
     class _tao_seq_Octet_var;
-    
+
     // *************************************************************
     // _tao_seq_Octet
     // *************************************************************
-    
-    class TAO_Export _tao_seq_Octet : public 
+
+    class TAO_Export _tao_seq_Octet : public
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
       TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
       TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
     {
     public:
       _tao_seq_Octet (void); // default ctor
       _tao_seq_Octet (CORBA::ULong max); // uses max size
       _tao_seq_Octet (
-        CORBA::ULong max, 
-        CORBA::ULong length, 
-        CORBA::Octet *buffer, 
+        CORBA::ULong max,
+        CORBA::ULong length,
+        CORBA::Octet *buffer,
         CORBA::Boolean release = 0
       );
       _tao_seq_Octet (const _tao_seq_Octet &); // copy ctor
@@ -2236,7 +2303,7 @@
 #endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
 
     };
-    
+
 #endif /* end #if !defined */
 
 #if !defined (__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -2256,15 +2323,15 @@
     virtual void *_tao_obv_narrow (ptr_arith_t);
     virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
     virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
-    
+
   private:
     ExceptionHolder (const ExceptionHolder &);
     void operator= (const ExceptionHolder &);
-    
+
   protected:
     virtual CORBA::Boolean _tao_marshal__Messaging_ExceptionHolder (TAO_OutputCDR &) = 0;
     virtual CORBA::Boolean _tao_unmarshal__Messaging_ExceptionHolder (TAO_InputCDR &) = 0;
-    
+
   };
 
 #endif /* end #if !defined */
@@ -2275,7 +2342,7 @@
 
   class ReplyHandler;
   typedef ReplyHandler *ReplyHandler_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -2286,17 +2353,17 @@
   {
   public:
     ReplyHandler_var (void); // default constructor
-    ReplyHandler_var (ReplyHandler_ptr p) : ptr_ (p) {} 
+    ReplyHandler_var (ReplyHandler_ptr p) : ptr_ (p) {}
     ReplyHandler_var (const ReplyHandler_var &); // copy constructor
     ~ReplyHandler_var (void); // destructor
-    
+
     ReplyHandler_var &operator= (ReplyHandler_ptr);
     ReplyHandler_var &operator= (const ReplyHandler_var &);
     ReplyHandler_ptr operator-> (void) const;
-    
+
     operator const ReplyHandler_ptr &() const;
     operator ReplyHandler_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ReplyHandler_ptr in (void) const;
     ReplyHandler_ptr &inout (void);
     ReplyHandler_ptr &out (void);
@@ -2329,7 +2396,7 @@
     operator ReplyHandler_ptr &();
     ReplyHandler_ptr &ptr (void);
     ReplyHandler_ptr operator-> (void);
-    
+
   private:
     ReplyHandler_ptr &ptr_;
   };
@@ -2346,7 +2413,7 @@
   class _TAO_ReplyHandler_Remote_Proxy_Impl;
   class _TAO_ReplyHandler_Proxy_Broker;
   class _TAO_ReplyHandler_Remote_Proxy_Broker;
-  
+
   class TAO_Export ReplyHandler : public virtual CORBA_Object
   {
   public:
@@ -2359,12 +2426,12 @@
     static ReplyHandler_ptr _duplicate (ReplyHandler_ptr obj);
     static ReplyHandler_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyHandler_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ReplyHandler_ptr _nil (void)
@@ -2375,39 +2442,39 @@
     static void _tao_any_destructor (void*);
 
     virtual CORBA::Boolean _is_a (
-        const CORBA::Char *type_id, 
-        CORBA::Environment &ACE_TRY_ENV = 
+        const CORBA::Char *type_id,
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   private:
     _TAO_ReplyHandler_Proxy_Broker *the_TAO_ReplyHandler_Proxy_Broker_;
-    
+
   protected:
     ReplyHandler (int collocated = 0);
-    
+
     protected:
       // This methods travese the inheritance tree and set the
       // parents piece of the given class in the right mode
       virtual void Messaging_ReplyHandler_setup_collocation (int collocated);
-      
+
       ReplyHandler (
-        TAO_Stub *objref, 
+        TAO_Stub *objref,
         CORBA::Boolean _tao_collocated = 0,
         TAO_Abstract_ServantBase *servant = 0
         );
-      
+
       friend class _TAO_ReplyHandler_Remote_Proxy_Impl;
       friend class _TAO_ReplyHandler_ThruPOA_Proxy_Impl;
       friend class _TAO_ReplyHandler_Direct_Proxy_Impl;
-    
+
     virtual ~ReplyHandler (void);
   private:
     ReplyHandler (const ReplyHandler &);
-    void operator= (const ReplyHandler &);    
+    void operator= (const ReplyHandler &);
 
 #if (TAO_HAS_INTERCEPTORS == 1)
     // Generation of interceptors related RequestInfo classes per operation.
@@ -2418,24 +2485,25 @@
 
   };
 
+#if (TAO_HAS_SMART_PROXIES == 1)
 class TAO_Export TAO_Messaging_ReplyHandler_Default_Proxy_Factory
   {
   public:
-    
+
     TAO_Messaging_ReplyHandler_Default_Proxy_Factory (int permanent = 1);
     // <permanent> signifies that the proxy factory will remain
     // registered with the Proxy Factory Adapter until the program
-    // terminates. That is, it will be a one-shot factory for the 
+    // terminates. That is, it will be a one-shot factory for the
     // interface.  If this value is set to 0, then the factory will
-    // be unregistered after the first invocation providing the 
-    // flexibility of having a different smart proxy per object 
+    // be unregistered after the first invocation providing the
+    // flexibility of having a different smart proxy per object
     // instead of per interface.
-    
+
     virtual ~TAO_Messaging_ReplyHandler_Default_Proxy_Factory (void);
-    
+
     virtual ReplyHandler_ptr create_proxy (
         ReplyHandler_ptr proxy,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
   };
@@ -2443,27 +2511,27 @@
 class TAO_Export TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter
   {
   public:
-    
+
     friend class TAO_Singleton<TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter, TAO_SYNCH_RECURSIVE_MUTEX>;
-    
+
     int register_proxy_factory (
         TAO_Messaging_ReplyHandler_Default_Proxy_Factory *df,
         int one_shot_factory = 1,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
-    
+
     int unregister_proxy_factory (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
-    
+
     ReplyHandler_ptr create_proxy (
         ReplyHandler_ptr proxy,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
-  
+
   protected:
     TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter (void);
     ~TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter (void);
@@ -2474,11 +2542,11 @@
     int one_shot_factory_;
     int disable_factory_;
     TAO_SYNCH_RECURSIVE_MUTEX lock_;
-    
+
   };
 
   typedef TAO_Singleton<TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter, TAO_SYNCH_RECURSIVE_MUTEX> TAO_Messaging_ReplyHandler_PROXY_FACTORY_ADAPTER;
-  
+
   class TAO_Export TAO_Messaging_ReplyHandler_Smart_Proxy_Base
     : public virtual ReplyHandler,
       public virtual TAO_Smart_Proxy_Base
@@ -2492,7 +2560,9 @@
     ::Messaging::ReplyHandler_var proxy_;
   };
 
-  
+#endif /* TAO_HAS_SMART_PROXIES */
+
+
 // The Proxy Implementations are used by each interface to
 // perform a call. Each different implementation encapsulate
 // an invocation logics.
@@ -2501,34 +2571,34 @@
   ///////////////////////////////////////////////////////////////////////
   //                    Base  Impl. Declaration
   //
-  
+
   class TAO_Export _TAO_ReplyHandler_Proxy_Impl : public virtual TAO_Object_Proxy_Impl
   {
   public:
     virtual ~_TAO_ReplyHandler_Proxy_Impl (void) { }
-    
+
     protected:
     _TAO_ReplyHandler_Proxy_Impl (void);
-  
+
   };
   //
   //                Base  Proxy Impl. Declaration
   ///////////////////////////////////////////////////////////////////////
-  
-  
+
+
 ///////////////////////////////////////////////////////////////////////
 //                    Remote  Impl. Declaration
 //
 
-class TAO_Export _TAO_ReplyHandler_Remote_Proxy_Impl : 
+class TAO_Export _TAO_ReplyHandler_Remote_Proxy_Impl :
   public virtual _TAO_ReplyHandler_Proxy_Impl,
   public virtual TAO_Remote_Object_Proxy_Impl
 {
 public:
   _TAO_ReplyHandler_Remote_Proxy_Impl (void);
-  
+
   virtual ~_TAO_ReplyHandler_Remote_Proxy_Impl (void) { }
-  
+
   };
 
 //
@@ -2537,14 +2607,14 @@
 
 
 // The Proxy Brokers are used by each interface to get
-// the right proxy for performing a call. In the new 
+// the right proxy for performing a call. In the new
 // collocation scheme, the proxy to be used can vary on
-// a call by call basis. 
+// a call by call basis.
 
 
 
 ///////////////////////////////////////////////////////////////////////
-//                 Base Proxy Broker Declaration 
+//                 Base Proxy Broker Declaration
 //
 
 class TAO_Export _TAO_ReplyHandler_Proxy_Broker
@@ -2558,25 +2628,25 @@
 
 protected:
   _TAO_ReplyHandler_Proxy_Broker (void);
-  
+
 };
 
 //
-//              End Base Proxy Broker Declaration 
+//              End Base Proxy Broker Declaration
 ///////////////////////////////////////////////////////////////////////
 
 
 ///////////////////////////////////////////////////////////////////////
-//                 Remote Proxy Broker Declaration 
+//                 Remote Proxy Broker Declaration
 //
 
 class TAO_Export _TAO_ReplyHandler_Remote_Proxy_Broker : public virtual _TAO_ReplyHandler_Proxy_Broker
 {
-public: 
+public:
   _TAO_ReplyHandler_Remote_Proxy_Broker (void);
-  
+
   virtual ~_TAO_ReplyHandler_Remote_Proxy_Broker (void);
-  
+
   virtual _TAO_ReplyHandler_Proxy_Impl &select_proxy (
     ReplyHandler *object,
     CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
@@ -2594,7 +2664,7 @@
 
 
 //
-//              End Remote Proxy Broker Declaration 
+//              End Remote Proxy Broker Declaration
 ///////////////////////////////////////////////////////////////////////
 
 
@@ -2602,6 +2672,7 @@
 
 TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_ReplyHandler;
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
 
 }
 TAO_NAMESPACE_CLOSE // module Messaging
@@ -2612,6 +2683,8 @@
     CORBA::Object_ptr obj
   );
 
+#if (TAO_HAS_AMI_CALLBACK == 1)
+
 TAO_NAMESPACE  OBV_Messaging
 {
 
@@ -2619,7 +2692,7 @@
 #define _MESSAGING_EXCEPTIONHOLDER___OBV_CH_
 
   // OBV_ class
-  class ExceptionHolder : public virtual Messaging::ExceptionHolder
+  class TAO_Export ExceptionHolder : public virtual Messaging::ExceptionHolder
   {
   public:
     virtual void is_system_exception (CORBA::Boolean);    // set
@@ -2655,14 +2728,26 @@
 }
 TAO_NAMESPACE_CLOSE
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 */
+
+#if (TAO_HAS_PRIORITY_POLICIES == 1)
+
 TAO_Export void operator<<= (CORBA::Any &, const Messaging::PriorityRange &); // copying version
 TAO_Export void operator<<= (CORBA::Any &, Messaging::PriorityRange*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Messaging::PriorityRange *&); // deprecated
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Messaging::PriorityRange *&);
+
+#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */
+
+#if (TAO_HAS_ROUTING_POLICY == 1)
+
 TAO_Export void operator<<= (CORBA::Any &, const Messaging::RoutingTypeRange &); // copying version
 TAO_Export void operator<<= (CORBA::Any &, Messaging::RoutingTypeRange*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Messaging::RoutingTypeRange *&); // deprecated
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Messaging::RoutingTypeRange *&);
+
+#endif /* TAO_HAS_ROUTING_POLICY == 1 */
+
 TAO_Export void operator<<= (CORBA::Any &, const Messaging::PolicyValue &); // copying version
 TAO_Export void operator<<= (CORBA::Any &, Messaging::PolicyValue*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Messaging::PolicyValue *&); // deprecated
@@ -2671,19 +2756,33 @@
 TAO_Export void operator<<= (CORBA::Any &, Messaging::PolicyValueSeq*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Messaging::PolicyValueSeq *&); // deprecated
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Messaging::PolicyValueSeq *&);
+
+#if (TAO_HAS_AMI_CALLBACK == 1)
+
 // Any operators for interface Messaging::ReplyHandler
 TAO_Export void operator<<= (CORBA::Any &, Messaging::ReplyHandler_ptr);
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Messaging::ReplyHandler *&);
 
+#endif /* TAO_HAS_AMI_CALLBACK */
+
 #ifndef __ACE_INLINE__
 
+#if (TAO_HAS_PRIORITY_POLICIES == 1)
+
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::PriorityRange &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::PriorityRange &);
+
+#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */
+
+#if (TAO_HAS_ROUTING_POLICY == 1)
+
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::RoutingTypeRange &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::RoutingTypeRange &);
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::PolicyValue &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::PolicyValue &);
 
+#endif /* TAO_HAS_ROUTING_POLICY == 1 */
+
 #if !defined _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_H_
 #define _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_H_
 
@@ -2713,7 +2812,9 @@
 
 #endif /* _TAO_CDR_OP_Messaging_PolicyValueSeq_H_ */
 
-TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::ExceptionHolder *); // 
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+
+TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::ExceptionHolder *); //
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::ExceptionHolder *&);
 
 #if !defined _TAO_CDR_OP_Messaging_ExceptionHolder__tao_seq_Octet_H_
@@ -2733,6 +2834,8 @@
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::ReplyHandler_ptr );
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::ReplyHandler_ptr &);
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
+
 #endif /* __ACE_INLINE__ */
 
 
@@ -2743,6 +2846,8 @@
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma warning(pop)
 #endif /* _MSC_VER */
+
+#endif /* TAO_HAS_CORBA_MESSAGING */
 
 #if defined (__BORLANDC__)
 #pragma option pop
