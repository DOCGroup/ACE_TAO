--- orig/MessagingC.cpp	Sat Mar 31 14:51:18 2001
+++ MessagingC.cpp	Sat Mar 31 14:51:39 2001
@@ -21,38 +21,45 @@
 
 #include "MessagingC.h"
 
-#include "tao/Stub.h"
-#include "tao/Invocation.h"
+#include "Stub.h"
+#include "Invocation.h"
 
 #if TAO_HAS_INTERCEPTORS == 1
-#include "tao/RequestInfo_Util.h"
+#include "RequestInfo_Util.h"
 #endif  /* TAO_HAS_INTERCEPTORS == 1 */
 
 #if defined (__BORLANDC__)
 #pragma option -w-rvl -w-rch -w-ccc -w-aus
 #endif /* __BORLANDC__ */
 
+#if (TAO_HAS_CORBA_MESSAGING == 1)
+
+#include "Stub.h"
+#include "Invocation.h"
+
 #if !defined (__ACE_INLINE__)
 #include "MessagingC.i"
 #endif /* !defined INLINE */
 
+ACE_RCSID(tao, MessagingC, "$Id$")
+
 static const CORBA::Long _oc_Messaging_RebindMode[] =
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   37,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f5265), 
-  ACE_NTOHL (0x62696e64), 
-  ACE_NTOHL (0x4d6f6465), 
-  ACE_NTOHL (0x3a312e30), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f5265),
+  ACE_NTOHL (0x62696e64),
+  ACE_NTOHL (0x4d6f6465),
+  ACE_NTOHL (0x3a312e30),
   ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/Messaging/RebindMode:1.0
   11,
-  ACE_NTOHL (0x52656269), 
-  ACE_NTOHL (0x6e644d6f), 
+  ACE_NTOHL (0x52656269),
+  ACE_NTOHL (0x6e644d6f),
   ACE_NTOHL (0x64650000),  // name = RebindMode
   CORBA::tk_short,
 
@@ -87,18 +94,18 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   36,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f5379), 
-  ACE_NTOHL (0x6e635363), 
-  ACE_NTOHL (0x6f70653a), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f5379),
+  ACE_NTOHL (0x6e635363),
+  ACE_NTOHL (0x6f70653a),
   ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Messaging/SyncScope:1.0
   10,
-  ACE_NTOHL (0x53796e63), 
-  ACE_NTOHL (0x53636f70), 
+  ACE_NTOHL (0x53796e63),
+  ACE_NTOHL (0x53636f70),
   ACE_NTOHL (0x65000000),  // name = SyncScope
   CORBA::tk_short,
 
@@ -145,19 +152,19 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f526f), 
-  ACE_NTOHL (0x7574696e), 
-  ACE_NTOHL (0x67547970), 
-  ACE_NTOHL (0x653a312e), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f526f),
+  ACE_NTOHL (0x7574696e),
+  ACE_NTOHL (0x67547970),
+  ACE_NTOHL (0x653a312e),
   ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/RoutingType:1.0
   12,
-  ACE_NTOHL (0x526f7574), 
-  ACE_NTOHL (0x696e6754), 
+  ACE_NTOHL (0x526f7574),
+  ACE_NTOHL (0x696e6754),
   ACE_NTOHL (0x79706500),  // name = RoutingType
   CORBA::tk_short,
 
@@ -192,32 +199,32 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f5469), 
-  ACE_NTOHL (0x6d656f75), 
-  ACE_NTOHL (0x743a312e), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f5469),
+  ACE_NTOHL (0x6d656f75),
+  ACE_NTOHL (0x743a312e),
   ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/Timeout:1.0
   8,
-  ACE_NTOHL (0x54696d65), 
+  ACE_NTOHL (0x54696d65),
   ACE_NTOHL (0x6f757400),  // name = Timeout
   CORBA::tk_alias, // typecode kind for typedefs
   56, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     31,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x54696d65), 
-    ACE_NTOHL (0x42617365), 
-    ACE_NTOHL (0x2f54696d), 
-    ACE_NTOHL (0x65543a31), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x54696d65),
+    ACE_NTOHL (0x42617365),
+    ACE_NTOHL (0x2f54696d),
+    ACE_NTOHL (0x65543a31),
     ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/TimeBase/TimeT:1.0
     6,
-    ACE_NTOHL (0x54696d65), 
+    ACE_NTOHL (0x54696d65),
     ACE_NTOHL (0x54000000),  // name = TimeT
     CORBA::tk_ulonglong,
 
@@ -241,18 +248,18 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   35,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f5072), 
-  ACE_NTOHL (0x696f7269), 
-  ACE_NTOHL (0x74793a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f5072),
+  ACE_NTOHL (0x696f7269),
+  ACE_NTOHL (0x74793a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Messaging/Priority:1.0
   9,
-  ACE_NTOHL (0x5072696f), 
-  ACE_NTOHL (0x72697479), 
+  ACE_NTOHL (0x5072696f),
+  ACE_NTOHL (0x72697479),
   ACE_NTOHL (0x0),  // name = Priority
   CORBA::tk_short,
 
@@ -275,18 +282,18 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   35,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f4f72), 
-  ACE_NTOHL (0x64657269), 
-  ACE_NTOHL (0x6e673a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f4f72),
+  ACE_NTOHL (0x64657269),
+  ACE_NTOHL (0x6e673a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Messaging/Ordering:1.0
   9,
-  ACE_NTOHL (0x4f726465), 
-  ACE_NTOHL (0x72696e67), 
+  ACE_NTOHL (0x4f726465),
+  ACE_NTOHL (0x72696e67),
   ACE_NTOHL (0x0),  // name = Ordering
   CORBA::tk_ushort,
 
@@ -321,6 +328,9 @@
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::UShort, ORDER_DEADLINE, 8U)
 TAO_NAMESPACE_END
+
+#if (TAO_HAS_REBIND_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REBIND_POLICY_TYPE, 23U)
@@ -395,7 +405,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -406,6 +416,10 @@
   return "IDL:omg.org/Messaging/RebindPolicy:1.0";
 }
 
+#endif /* TAO_HAS_REBIND_POLICY == 1 */
+
+#if (TAO_HAS_SYNC_SCOPE_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, SYNC_SCOPE_POLICY_TYPE, 24U)
@@ -480,7 +494,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -491,6 +505,10 @@
   return "IDL:omg.org/Messaging/SyncScopePolicy:1.0";
 }
 
+#endif /* TAO_HAS_SYNC_SCOPE_POLICY == 1 */
+
+#if (TAO_HAS_PRIORITY_POLICIES == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REQUEST_PRIORITY_POLICY_TYPE, 25U)
@@ -499,20 +517,20 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   40,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f5072), 
-  ACE_NTOHL (0x696f7269), 
-  ACE_NTOHL (0x74795261), 
-  ACE_NTOHL (0x6e67653a), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f5072),
+  ACE_NTOHL (0x696f7269),
+  ACE_NTOHL (0x74795261),
+  ACE_NTOHL (0x6e67653a),
   ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Messaging/PriorityRange:1.0
   14,
-  ACE_NTOHL (0x5072696f), 
-  ACE_NTOHL (0x72697479), 
-  ACE_NTOHL (0x52616e67), 
+  ACE_NTOHL (0x5072696f),
+  ACE_NTOHL (0x72697479),
+  ACE_NTOHL (0x52616e67),
   ACE_NTOHL (0x65000000),  // name = PriorityRange
   2, // member count
   4,
@@ -521,18 +539,18 @@
   64, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     35,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x4d657373), 
-    ACE_NTOHL (0x6167696e), 
-    ACE_NTOHL (0x672f5072), 
-    ACE_NTOHL (0x696f7269), 
-    ACE_NTOHL (0x74793a31), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x4d657373),
+    ACE_NTOHL (0x6167696e),
+    ACE_NTOHL (0x672f5072),
+    ACE_NTOHL (0x696f7269),
+    ACE_NTOHL (0x74793a31),
     ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Messaging/Priority:1.0
     9,
-    ACE_NTOHL (0x5072696f), 
-    ACE_NTOHL (0x72697479), 
+    ACE_NTOHL (0x5072696f),
+    ACE_NTOHL (0x72697479),
     ACE_NTOHL (0x0),  // name = Priority
     CORBA::tk_short,
 
@@ -543,18 +561,18 @@
   64, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     35,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x4d657373), 
-    ACE_NTOHL (0x6167696e), 
-    ACE_NTOHL (0x672f5072), 
-    ACE_NTOHL (0x696f7269), 
-    ACE_NTOHL (0x74793a31), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x4d657373),
+    ACE_NTOHL (0x6167696e),
+    ACE_NTOHL (0x672f5072),
+    ACE_NTOHL (0x696f7269),
+    ACE_NTOHL (0x74793a31),
     ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Messaging/Priority:1.0
     9,
-    ACE_NTOHL (0x5072696f), 
-    ACE_NTOHL (0x72697479), 
+    ACE_NTOHL (0x5072696f),
+    ACE_NTOHL (0x72697479),
     ACE_NTOHL (0x0),  // name = Priority
     CORBA::tk_short,
 
@@ -650,7 +668,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -661,6 +679,10 @@
   return "IDL:omg.org/Messaging/RequestPriorityPolicy:1.0";
 }
 
+#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */
+
+#if (TAO_HAS_REQUEST_START_TIME_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REPLY_PRIORITY_POLICY_TYPE, 26U)
@@ -735,7 +757,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -746,6 +768,10 @@
   return "IDL:omg.org/Messaging/ReplyPriorityPolicy:1.0";
 }
 
+#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */
+
+#if (TAO_HAS_REQUEST_START_TIME_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REQUEST_START_TIME_POLICY_TYPE, 27U)
@@ -820,7 +846,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -831,6 +857,10 @@
   return "IDL:omg.org/Messaging/RequestStartTimePolicy:1.0";
 }
 
+#endif /* TAO_HAS_REQUEST_START_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REQUEST_END_TIME_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REQUEST_END_TIME_POLICY_TYPE, 28U)
@@ -905,7 +935,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -916,6 +946,10 @@
   return "IDL:omg.org/Messaging/RequestEndTimePolicy:1.0";
 }
 
+#endif /* TAO_HAS_REQUEST_END_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REPLY_START_TIME_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REPLY_START_TIME_POLICY_TYPE, 29U)
@@ -990,7 +1024,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1001,6 +1035,10 @@
   return "IDL:omg.org/Messaging/ReplyStartTimePolicy:1.0";
 }
 
+#endif /* TAO_HAS_REPLY_START_TIME_POLICY == 1 */
+
+#if (TAO_HAS_REPLY_END_TIME_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, REPLY_END_TIME_POLICY_TYPE, 30U)
@@ -1075,7 +1113,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1086,6 +1124,10 @@
   return "IDL:omg.org/Messaging/ReplyEndTimePolicy:1.0";
 }
 
+#endif /* TAO_HAS_REPLY_END_TIME_POLICY == 1 */
+
+#if (TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, RELATIVE_REQ_TIMEOUT_POLICY_TYPE, 31U)
@@ -1160,7 +1202,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1171,6 +1213,10 @@
   return "IDL:omg.org/Messaging/RelativeRequestTimeoutPolicy:1.0";
 }
 
+#endif /* TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1 */
+
+#if (TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, RELATIVE_RT_TIMEOUT_POLICY_TYPE, 32U)
@@ -1245,7 +1291,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1256,6 +1302,10 @@
   return "IDL:omg.org/Messaging/RelativeRoundtripTimeoutPolicy:1.0";
 }
 
+#endif /* TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1 */
+
+#if (TAO_HAS_ROUTING_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, ROUTING_POLICY_TYPE, 33U)
@@ -1264,22 +1314,22 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   43,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f526f), 
-  ACE_NTOHL (0x7574696e), 
-  ACE_NTOHL (0x67547970), 
-  ACE_NTOHL (0x6552616e), 
-  ACE_NTOHL (0x67653a31), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f526f),
+  ACE_NTOHL (0x7574696e),
+  ACE_NTOHL (0x67547970),
+  ACE_NTOHL (0x6552616e),
+  ACE_NTOHL (0x67653a31),
   ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Messaging/RoutingTypeRange:1.0
   17,
-  ACE_NTOHL (0x526f7574), 
-  ACE_NTOHL (0x696e6754), 
-  ACE_NTOHL (0x79706552), 
-  ACE_NTOHL (0x616e6765), 
+  ACE_NTOHL (0x526f7574),
+  ACE_NTOHL (0x696e6754),
+  ACE_NTOHL (0x79706552),
+  ACE_NTOHL (0x616e6765),
   ACE_NTOHL (0x0),  // name = RoutingTypeRange
   2, // member count
   4,
@@ -1288,19 +1338,19 @@
   68, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     38,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x4d657373), 
-    ACE_NTOHL (0x6167696e), 
-    ACE_NTOHL (0x672f526f), 
-    ACE_NTOHL (0x7574696e), 
-    ACE_NTOHL (0x67547970), 
-    ACE_NTOHL (0x653a312e), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x4d657373),
+    ACE_NTOHL (0x6167696e),
+    ACE_NTOHL (0x672f526f),
+    ACE_NTOHL (0x7574696e),
+    ACE_NTOHL (0x67547970),
+    ACE_NTOHL (0x653a312e),
     ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/RoutingType:1.0
     12,
-    ACE_NTOHL (0x526f7574), 
-    ACE_NTOHL (0x696e6754), 
+    ACE_NTOHL (0x526f7574),
+    ACE_NTOHL (0x696e6754),
     ACE_NTOHL (0x79706500),  // name = RoutingType
     CORBA::tk_short,
 
@@ -1311,19 +1361,19 @@
   68, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     38,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x4d657373), 
-    ACE_NTOHL (0x6167696e), 
-    ACE_NTOHL (0x672f526f), 
-    ACE_NTOHL (0x7574696e), 
-    ACE_NTOHL (0x67547970), 
-    ACE_NTOHL (0x653a312e), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x4d657373),
+    ACE_NTOHL (0x6167696e),
+    ACE_NTOHL (0x672f526f),
+    ACE_NTOHL (0x7574696e),
+    ACE_NTOHL (0x67547970),
+    ACE_NTOHL (0x653a312e),
     ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/RoutingType:1.0
     12,
-    ACE_NTOHL (0x526f7574), 
-    ACE_NTOHL (0x696e6754), 
+    ACE_NTOHL (0x526f7574),
+    ACE_NTOHL (0x696e6754),
     ACE_NTOHL (0x79706500),  // name = RoutingType
     CORBA::tk_short,
 
@@ -1419,7 +1469,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1430,6 +1480,10 @@
   return "IDL:omg.org/Messaging/RoutingPolicy:1.0";
 }
 
+#endif /* TAO_HAS_ROUTING_POLICY == 1 */
+
+#if (TAO_HAS_MAX_HOPS_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, MAX_HOPS_POLICY_TYPE, 34U)
@@ -1504,7 +1558,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1515,6 +1569,10 @@
   return "IDL:omg.org/Messaging/MaxHopsPolicy:1.0";
 }
 
+#endif /* TAO_HAS_MAX_HOPS_POLICY == 1 */
+
+#if (TAO_HAS_QUEUE_ORDER_POLICY == 1)
+
 TAO_NAMESPACE_TYPE (const CORBA::ULong)
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, QUEUE_ORDER_POLICY_TYPE, 35U)
@@ -1589,7 +1647,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -1600,50 +1658,52 @@
   return "IDL:omg.org/Messaging/QueueOrderPolicy:1.0";
 }
 
+#endif /* TAO_HAS_QUEUE_ORDER_POLICY == 1 */
+
 static const CORBA::Long _oc_Messaging_PolicyValue[] =
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x56616c75), 
-  ACE_NTOHL (0x653a312e), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f506f),
+  ACE_NTOHL (0x6c696379),
+  ACE_NTOHL (0x56616c75),
+  ACE_NTOHL (0x653a312e),
   ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/PolicyValue:1.0
   12,
-  ACE_NTOHL (0x506f6c69), 
-  ACE_NTOHL (0x63795661), 
+  ACE_NTOHL (0x506f6c69),
+  ACE_NTOHL (0x63795661),
   ACE_NTOHL (0x6c756500),  // name = PolicyValue
   2, // member count
   6,
-  ACE_NTOHL (0x70747970), 
+  ACE_NTOHL (0x70747970),
   ACE_NTOHL (0x65000000),  // name = ptype
   CORBA::tk_alias, // typecode kind for typedefs
   64, // encapsulation length
     TAO_ENCAP_BYTE_ORDER, // byte order
     33,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f506f), 
-    ACE_NTOHL (0x6c696379), 
-    ACE_NTOHL (0x54797065), 
-    ACE_NTOHL (0x3a312e30), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x434f5242),
+    ACE_NTOHL (0x412f506f),
+    ACE_NTOHL (0x6c696379),
+    ACE_NTOHL (0x54797065),
+    ACE_NTOHL (0x3a312e30),
     ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/PolicyType:1.0
     11,
-    ACE_NTOHL (0x506f6c69), 
-    ACE_NTOHL (0x63795479), 
+    ACE_NTOHL (0x506f6c69),
+    ACE_NTOHL (0x63795479),
     ACE_NTOHL (0x70650000),  // name = PolicyType
     CORBA::tk_ulong,
 
 
   7,
-  ACE_NTOHL (0x7076616c), 
+  ACE_NTOHL (0x7076616c),
   ACE_NTOHL (0x75650000),  // name = pvalue
   CORBA::tk_sequence, // typecode kind
   12, // encapsulation length
@@ -1684,30 +1744,30 @@
 Messaging::PolicyValue::_tao_seq_Octet::_tao_seq_Octet (void)
 {}
 Messaging::PolicyValue::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max) // uses max size
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max)
 {}
 Messaging::PolicyValue::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max, CORBA::ULong length, CORBA::Octet *buffer, CORBA::Boolean release)
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max, length, buffer, release)
 {}
 Messaging::PolicyValue::_tao_seq_Octet::_tao_seq_Octet (const _tao_seq_Octet &seq) // copy ctor
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (seq)
 {}
 Messaging::PolicyValue::_tao_seq_Octet::~_tao_seq_Octet (void) // dtor
@@ -1723,7 +1783,7 @@
 
 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-  
+
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CS_)
 #define __TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CS_
 
@@ -1732,43 +1792,43 @@
   {
     Messaging::PolicyValue* tmp = 0;
     tmp = _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (length);
-    
+
     if (this->buffer_ != 0)
     {
       Messaging::PolicyValue *old = ACE_reinterpret_cast (Messaging::PolicyValue *,this->buffer_);
-      
+
       for (CORBA::ULong i = 0; i < this->length_; ++i)
         tmp[i] = old[i];
-      
+
       if (this->release_)
         _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::freebuf (old);
-      
+
     }
     this->buffer_ = tmp;
   }
-  
+
   void
   Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::_deallocate_buffer (void)
   {
     if (this->buffer_ == 0 || this->release_ == 0)
       return;
-    
+
     Messaging::PolicyValue *tmp = ACE_reinterpret_cast (Messaging::PolicyValue *,this->buffer_);
-    
+
     _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::freebuf (tmp);
     this->buffer_ = 0;
-  } 
-  
+  }
+
   Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::~_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (void) // Dtor.
   {
     this->_deallocate_buffer ();
   }
-  
-  
+
+
 #endif /* end #if !defined */
 
 
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 
 #if !defined (_MESSAGING_POLICYVALUESEQ_CS_)
 #define _MESSAGING_POLICYVALUESEQ_CS_
@@ -1780,30 +1840,30 @@
 Messaging::PolicyValueSeq::PolicyValueSeq (void)
 {}
 Messaging::PolicyValueSeq::PolicyValueSeq (CORBA::ULong max) // uses max size
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<Messaging::PolicyValue>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max)
 {}
 Messaging::PolicyValueSeq::PolicyValueSeq (CORBA::ULong max, CORBA::ULong length, Messaging::PolicyValue *buffer, CORBA::Boolean release)
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<Messaging::PolicyValue>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (max, length, buffer, release)
 {}
 Messaging::PolicyValueSeq::PolicyValueSeq (const PolicyValueSeq &seq) // copy ctor
-  : 
+  :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
   _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
   TAO_Unbounded_Sequence<Messaging::PolicyValue>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  (seq)
 {}
 Messaging::PolicyValueSeq::~PolicyValueSeq (void) // dtor
@@ -1821,21 +1881,21 @@
 {
   TAO_ENCAP_BYTE_ORDER, // byte order
   41,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x4d657373), 
-  ACE_NTOHL (0x6167696e), 
-  ACE_NTOHL (0x672f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x56616c75), 
-  ACE_NTOHL (0x65536571), 
-  ACE_NTOHL (0x3a312e30), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x6f6d672e),
+  ACE_NTOHL (0x6f72672f),
+  ACE_NTOHL (0x4d657373),
+  ACE_NTOHL (0x6167696e),
+  ACE_NTOHL (0x672f506f),
+  ACE_NTOHL (0x6c696379),
+  ACE_NTOHL (0x56616c75),
+  ACE_NTOHL (0x65536571),
+  ACE_NTOHL (0x3a312e30),
   ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/Messaging/PolicyValueSeq:1.0
   15,
-  ACE_NTOHL (0x506f6c69), 
-  ACE_NTOHL (0x63795661), 
-  ACE_NTOHL (0x6c756553), 
+  ACE_NTOHL (0x506f6c69),
+  ACE_NTOHL (0x63795661),
+  ACE_NTOHL (0x6c756553),
   ACE_NTOHL (0x65710000),  // name = PolicyValueSeq
   CORBA::tk_sequence, // typecode kind
   200, // encapsulation length
@@ -1844,46 +1904,46 @@
     184, // encapsulation length
       TAO_ENCAP_BYTE_ORDER, // byte order
       38,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x4d657373), 
-      ACE_NTOHL (0x6167696e), 
-      ACE_NTOHL (0x672f506f), 
-      ACE_NTOHL (0x6c696379), 
-      ACE_NTOHL (0x56616c75), 
-      ACE_NTOHL (0x653a312e), 
+      ACE_NTOHL (0x49444c3a),
+      ACE_NTOHL (0x6f6d672e),
+      ACE_NTOHL (0x6f72672f),
+      ACE_NTOHL (0x4d657373),
+      ACE_NTOHL (0x6167696e),
+      ACE_NTOHL (0x672f506f),
+      ACE_NTOHL (0x6c696379),
+      ACE_NTOHL (0x56616c75),
+      ACE_NTOHL (0x653a312e),
       ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/PolicyValue:1.0
       12,
-      ACE_NTOHL (0x506f6c69), 
-      ACE_NTOHL (0x63795661), 
+      ACE_NTOHL (0x506f6c69),
+      ACE_NTOHL (0x63795661),
       ACE_NTOHL (0x6c756500),  // name = PolicyValue
       2, // member count
       6,
-      ACE_NTOHL (0x70747970), 
+      ACE_NTOHL (0x70747970),
       ACE_NTOHL (0x65000000),  // name = ptype
       CORBA::tk_alias, // typecode kind for typedefs
       64, // encapsulation length
         TAO_ENCAP_BYTE_ORDER, // byte order
         33,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f506f), 
-        ACE_NTOHL (0x6c696379), 
-        ACE_NTOHL (0x54797065), 
-        ACE_NTOHL (0x3a312e30), 
+        ACE_NTOHL (0x49444c3a),
+        ACE_NTOHL (0x6f6d672e),
+        ACE_NTOHL (0x6f72672f),
+        ACE_NTOHL (0x434f5242),
+        ACE_NTOHL (0x412f506f),
+        ACE_NTOHL (0x6c696379),
+        ACE_NTOHL (0x54797065),
+        ACE_NTOHL (0x3a312e30),
         ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/PolicyType:1.0
         11,
-        ACE_NTOHL (0x506f6c69), 
-        ACE_NTOHL (0x63795479), 
+        ACE_NTOHL (0x506f6c69),
+        ACE_NTOHL (0x63795479),
         ACE_NTOHL (0x70650000),  // name = PolicyType
         CORBA::tk_ulong,
 
 
       7,
-      ACE_NTOHL (0x7076616c), 
+      ACE_NTOHL (0x7076616c),
       ACE_NTOHL (0x75650000),  // name = pvalue
       CORBA::tk_sequence, // typecode kind
       12, // encapsulation length
@@ -1918,6 +1978,9 @@
 TAO_NAMESPACE_BEGIN (Messaging)
 TAO_NAMESPACE_DEFINE (const CORBA::ULong, INVOCATION_POLICIES, 2U)
 TAO_NAMESPACE_END
+
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+
 Messaging::ExceptionHolder* Messaging::ExceptionHolder::_downcast (CORBA::ValueBase* v)
 {
   if (v == 0) return 0;
@@ -1982,7 +2045,7 @@
 {
 }
 
-const char* 
+const char*
 Messaging::ExceptionHolder_init::tao_repository_id (void)
 {
   return ExceptionHolder::_tao_obv_static_repository_id ();
@@ -1993,7 +2056,7 @@
 
 
 ///////////////////////////////////////////////////////////////////////
-//                Base & Remote Proxy  Implementation. 
+//                Base & Remote Proxy  Implementation.
 //
 
 Messaging::_TAO_ReplyHandler_Proxy_Impl::_TAO_ReplyHandler_Proxy_Impl (void)
@@ -2006,7 +2069,7 @@
 
 
 //
-//            End  Base & Remote  Proxy Implemeentation. 
+//            End  Base & Remote  Proxy Implemeentation.
 ///////////////////////////////////////////////////////////////////////
 
 
@@ -2127,14 +2190,18 @@
             stub,
             1,
             obj->_servant ()),
-            
+
           ReplyHandler::_nil ());
         }
       if (CORBA::is_nil (default_proxy))
         ACE_NEW_RETURN (default_proxy, ::Messaging::ReplyHandler (stub, 0, obj->_servant ()), ReplyHandler::_nil ());
+#if (TAO_HAS_SMART_PROXIES == 1)
         return TAO_Messaging_ReplyHandler_PROXY_FACTORY_ADAPTER::instance ()->create_proxy (default_proxy);
+#else
+        return default_proxy;
+#endif /* TAO_HAS_SMART_PROXIES == 1 */
       }
-    else 
+    else
       return
         ACE_reinterpret_cast
           (
@@ -2178,7 +2245,7 @@
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
     retv = ACE_reinterpret_cast (void *,
       ACE_static_cast (CORBA::Object_ptr, this));
-    
+
   if (retv)
     this->_add_ref ();
   return retv;
@@ -2192,6 +2259,8 @@
 
 #if (TAO_HAS_INTERCEPTORS == 1)
 #endif /* TAO_HAS_INTERCEPTORS */
+
+#if (TAO_HAS_SMART_PROXIES == 1)
 Messaging::TAO_Messaging_ReplyHandler_Default_Proxy_Factory::TAO_Messaging_ReplyHandler_Default_Proxy_Factory (int permanent)
 {
   TAO_Messaging_ReplyHandler_PROXY_FACTORY_ADAPTER::instance ()->register_proxy_factory (this, permanent);
@@ -2250,7 +2319,7 @@
     this->lock_, 0));
   if (this->one_shot_factory_ == 1)
     this->disable_factory_ = 1;
-  
+
   if (this->one_shot_factory_ == 0 && this->proxy_factory_ != 0)
     {
       delete this->proxy_factory_;
@@ -2267,22 +2336,22 @@
 {
   ACE_MT (ACE_GUARD_RETURN (TAO_SYNCH_RECURSIVE_MUTEX, ace_mon,
     this->lock_, 0));
-  
-  // To take care of those <unchecked_narrow> methods where we 
+
+  // To take care of those <unchecked_narrow> methods where we
   // want to override the smart proxy factory if there exists one.
   if (this->disable_factory_ == 1)
     {
       this->disable_factory_ = 0;
       return proxy;
     }
-  
+
   // Verify that an <proxy_factory_> is available else make one.
   if (this->proxy_factory_ == 0)
     ACE_NEW_RETURN (this->proxy_factory_,
-        TAO_Messaging_ReplyHandler_Default_Proxy_Factory (0), 
+        TAO_Messaging_ReplyHandler_Default_Proxy_Factory (0),
          0);
-      
-    
+
+
   return this->proxy_factory_->create_proxy (proxy);
 }
 
@@ -2302,7 +2371,7 @@
 
 Messaging::ReplyHandler_ptr
 Messaging::TAO_Messaging_ReplyHandler_Smart_Proxy_Base::get_proxy (void)
-  
+
 {
   // Obtain the real proxy stored in <base_proxy_>
   if (CORBA::is_nil (this->proxy_.in ()))
@@ -2312,38 +2381,41 @@
       TAO_Messaging_ReplyHandler_PROXY_FACTORY_ADAPTER::instance ()->unregister_proxy_factory ();
       this->proxy_ = ::Messaging::ReplyHandler::_unchecked_narrow (this->base_proxy_.in ());
     }
-    
+
     return this->proxy_.in ();
   }
-  
+
     #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION) || \
     defined (ACE_HAS_GNU_REPO)
   template class TAO_Singleton<Messaging::TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter, TAO_SYNCH_RECURSIVE_MUTEX >;
   #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
   #pragma instantiate TAO_Singleton<Messaging::TAO_Messaging_ReplyHandler_Proxy_Factory_Adapter, TAO_SYNCH_RECURSIVE_MUTEX>
   #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
-  
+
+
+#endif /* TAO_HAS_SMART_PROXIES */
+
     static const CORBA::Long _oc_Messaging_ReplyHandler[] =
   {
     TAO_ENCAP_BYTE_ORDER, // byte order
     39,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x4d657373), 
-    ACE_NTOHL (0x6167696e), 
-    ACE_NTOHL (0x672f5265), 
-    ACE_NTOHL (0x706c7948), 
-    ACE_NTOHL (0x616e646c), 
-    ACE_NTOHL (0x65723a31), 
+    ACE_NTOHL (0x49444c3a),
+    ACE_NTOHL (0x6f6d672e),
+    ACE_NTOHL (0x6f72672f),
+    ACE_NTOHL (0x4d657373),
+    ACE_NTOHL (0x6167696e),
+    ACE_NTOHL (0x672f5265),
+    ACE_NTOHL (0x706c7948),
+    ACE_NTOHL (0x616e646c),
+    ACE_NTOHL (0x65723a31),
     ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Messaging/ReplyHandler:1.0
     13,
-    ACE_NTOHL (0x5265706c), 
-    ACE_NTOHL (0x7948616e), 
-    ACE_NTOHL (0x646c6572), 
+    ACE_NTOHL (0x5265706c),
+    ACE_NTOHL (0x7948616e),
+    ACE_NTOHL (0x646c6572),
     ACE_NTOHL (0x0),  // name = ReplyHandler
 };
-  
+
   static CORBA::TypeCode _tc_TAO_tc_Messaging_ReplyHandler (
       CORBA::tk_objref,
       sizeof (_oc_Messaging_ReplyHandler),
@@ -2351,20 +2423,25 @@
       0,
       sizeof (Messaging::ReplyHandler)
     );
-  
+
   TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
   TAO_NAMESPACE_BEGIN (Messaging)
   TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_ReplyHandler, &_tc_TAO_tc_Messaging_ReplyHandler)
   TAO_NAMESPACE_END
-  
-    CORBA::Boolean 
+
+
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
+
+#if (TAO_HAS_AMI_CALLBACK == 1)
+
+    CORBA::Boolean
   OBV_Messaging::ExceptionHolder::_tao_marshal__Messaging_ExceptionHolder (TAO_OutputCDR &strm){
     return _tao_marshal_state (strm);
-    
+
   }
 CORBA::Boolean OBV_Messaging::ExceptionHolder::_tao_unmarshal__Messaging_ExceptionHolder (TAO_InputCDR &strm){
     return _tao_unmarshal_state (strm);
-    
+
   }
   // accessor to set the member
   void
@@ -2401,34 +2478,34 @@
   // *************************************************************
   // Messaging::ExceptionHolder::_tao_seq_Octet
   // *************************************************************
-  
+
   Messaging::ExceptionHolder::_tao_seq_Octet::_tao_seq_Octet (void)
   {}
   Messaging::ExceptionHolder::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max) // uses max size
-    : 
+    :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
    (max)
   {}
   Messaging::ExceptionHolder::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max, CORBA::ULong length, CORBA::Octet *buffer, CORBA::Boolean release)
-    : 
+    :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
    (max, length, buffer, release)
   {}
   Messaging::ExceptionHolder::_tao_seq_Octet::_tao_seq_Octet (const _tao_seq_Octet &seq) // copy ctor
-    : 
+    :
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
     TAO_Unbounded_Sequence<CORBA::Octet>
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
     TAO_Unbounded_Sequence<CORBA::Octet>
-#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
+#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
    (seq)
   {}
   Messaging::ExceptionHolder::_tao_seq_Octet::~_tao_seq_Octet (void) // dtor
@@ -2448,15 +2525,15 @@
   {
     this->_pd_marshaled_exception = val;
   }
-  
-  // readonly get method 
+
+  // readonly get method
   const Messaging::ExceptionHolder::_tao_seq_Octet &
   OBV_Messaging::ExceptionHolder::marshaled_exception (void) const
   {
     return this->_pd_marshaled_exception;
   }
-  
-  // read/write get method 
+
+  // read/write get method
   Messaging::ExceptionHolder::_tao_seq_Octet &
   OBV_Messaging::ExceptionHolder::marshaled_exception (void)
   {
@@ -2477,6 +2554,9 @@
     #  pragma instantiate TAO_Object_Manager<Messaging::SyncScopePolicy,Messaging::SyncScopePolicy_var>
   #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 */
+
+
   void operator<<= (CORBA::Any &_tao_any, const Messaging::PriorityRange &_tao_elem) // copying
   {
     TAO_OutputCDR stream;
@@ -2513,13 +2593,13 @@
     ACE_TRY_NEW_ENV
     {
       CORBA::TypeCode_var type = _tao_any.type ();
-      
+
       CORBA::Boolean result = type->equivalent (Messaging::_tc_PriorityRange, ACE_TRY_ENV);
       ACE_TRY_CHECK;
-      
+
       if (!result)
         return 0; // not equivalent
-      
+
       if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
@@ -2652,13 +2732,13 @@
     ACE_TRY_NEW_ENV
     {
       CORBA::TypeCode_var type = _tao_any.type ();
-      
+
       CORBA::Boolean result = type->equivalent (Messaging::_tc_RoutingTypeRange, ACE_TRY_ENV);
       ACE_TRY_CHECK;
-      
+
       if (!result)
         return 0; // not equivalent
-      
+
       if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
@@ -2756,13 +2836,13 @@
     ACE_TRY_NEW_ENV
     {
       CORBA::TypeCode_var type = _tao_any.type ();
-      
+
       CORBA::Boolean result = type->equivalent (Messaging::_tc_PolicyValue, ACE_TRY_ENV);
       ACE_TRY_CHECK;
-      
+
       if (!result)
         return 0; // not equivalent
-      
+
       if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
@@ -2847,13 +2927,13 @@
     ACE_TRY_NEW_ENV
     {
       CORBA::TypeCode_var type = _tao_any.type ();
-      
+
       CORBA::Boolean result = type->equivalent (Messaging::_tc_PolicyValueSeq, ACE_TRY_ENV);
       ACE_TRY_CHECK;
-      
+
       if (!result)
         return 0; // not equivalent
-      
+
       if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
@@ -2900,7 +2980,7 @@
     if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
-          Messaging::_tc_ReplyHandler, 
+          Messaging::_tc_ReplyHandler,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
@@ -2916,13 +2996,13 @@
     {
       _tao_elem = Messaging::ReplyHandler::_nil ();
       CORBA::TypeCode_var type = _tao_any.type ();
-      
+
       CORBA::Boolean result = type->equivalent (Messaging::_tc_ReplyHandler, ACE_TRY_ENV);
       ACE_TRY_CHECK;
-      
+
       if (!result)
         return 0; // not equivalent
-      
+
       TAO_InputCDR stream (
           _tao_any._tao_get_cdr (),
           _tao_any._tao_byte_order ()
@@ -2955,7 +3035,9 @@
     #  pragma instantiate TAO_Object_Manager<Messaging::ReplyHandler,Messaging::ReplyHandler_var>
   #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-            
+
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
+
 #if !defined _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_CPP_
   #define _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_CPP_
 
@@ -2967,20 +3049,20 @@
     if (strm << _tao_sequence.length ())
     {
       // encode all elements
-      
+
 #if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
       {
-        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
+        TAO_Unbounded_Sequence<CORBA::Octet> *oseq =
           ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (Messaging::PolicyValue::_tao_seq_Octet *)&_tao_sequence);
         if (oseq->mb ())
           return strm.write_octet_array_mb (oseq->mb ());
         else
           return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
       }
-      
+
 #else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
       return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
-    
+
 #endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
     }
     return 0; // error
@@ -2997,14 +3079,14 @@
       // set the length of the sequence
       _tao_sequence.length (_tao_seq_len);
       // If length is 0 we return true.
-      if (0 >= _tao_seq_len) 
+      if (0 >= _tao_seq_len)
         return 1;
       // retrieve all the elements
-      
+
 #if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
       if (ACE_BIT_DISABLED (strm.start ()->flags (),ACE_Message_Block::DONT_DELETE))
       {
-        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
+        TAO_Unbounded_Sequence<CORBA::Octet> *oseq =
           ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
         oseq->replace (_tao_seq_len, strm.start ());
         oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
@@ -3013,10 +3095,10 @@
       }
       else
         return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
-      
+
 #else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
       return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
-    
+
 #endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
     }
     return 0; // error
@@ -3053,7 +3135,7 @@
     // set the length of the sequence
     _tao_sequence.length (_tao_seq_len);
     // If length is 0 we return true.
-    if (0 >= _tao_seq_len) 
+    if (0 >= _tao_seq_len)
       return 1;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
@@ -3065,4 +3147,3 @@
   }
   return 0; // error
 }
-
