--- orig/DomainC.cpp	Mon Apr 16 19:23:19 2001
+++ DomainC.cpp	Mon Apr 16 19:36:57 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -27,6 +27,8 @@
 #if TAO_HAS_INTERCEPTORS == 1
 #include "tao/RequestInfo_Util.h"
 #endif  /* TAO_HAS_INTERCEPTORS == 1 */
+#include "tao/IFR_Client_Adapter.h"
+#include "ace/Dynamic_Service.h"
 
 #if defined (__BORLANDC__)
 #pragma option -w-rvl -w-rch -w-ccc -w-aus
@@ -36,10 +38,7 @@
 #include "DomainC.i"
 #endif /* !defined INLINE */
 
-TAO_NAMESPACE_TYPE (const CORBA::ULong)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (const CORBA::ULong, SecConstruction, 11U)
-TAO_NAMESPACE_END
+
 // *************************************************************
 // Operations for class CORBA_DomainManager_var
 // *************************************************************
@@ -163,7 +162,7 @@
   return *tmp;
 }
 // *************************************************************
-// Inline operations for class CORBA_DomainManager_out
+// Operations for class CORBA_DomainManager_out
 // *************************************************************
 
 CORBA_DomainManager_out::CORBA_DomainManager_out (CORBA_DomainManager_ptr &p)
@@ -252,14 +251,14 @@
     )
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA_Policy_ptr result);
+  void result (CORBA::Policy_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy (const TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy &);
   void operator= (const TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy &);
 
   const CORBA::PolicyType & policy_type_;
-  CORBA_Policy_ptr _result;
+  CORBA::Policy_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy::TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy (
@@ -321,7 +320,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy::result (CORBA_Policy_ptr result)
+TAO_ClientRequestInfo_CORBA_DomainManager_get_domain_policy::result (CORBA::Policy_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -341,7 +340,7 @@
 
 // Remote Implementation of the IDL interface methods
 
-CORBA_Policy_ptr _TAO_CORBA_DomainManager_Remote_Proxy_Impl::get_domain_policy (
+CORBA::Policy_ptr _TAO_CORBA_DomainManager_Remote_Proxy_Impl::get_domain_policy (
     CORBA_Object *_collocated_tao_target_,
     CORBA::PolicyType policy_type,
     CORBA::Environment &ACE_TRY_ENV
@@ -351,8 +350,8 @@
   ))
 {
   
-  CORBA_Policy_ptr _tao_retval = CORBA_Policy::_nil ();
-  CORBA_Policy_var _tao_safe_retval (_tao_retval);
+  CORBA::Policy_ptr _tao_retval = CORBA::Policy::_nil ();
+  CORBA::Policy_var _tao_safe_retval (_tao_retval);
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
@@ -447,7 +446,7 @@
             }
           
           TAO_INTERCEPTOR (
-              CORBA_Policy_ptr _tao_retval_info = _tao_safe_retval._retn ();
+              CORBA::Policy_ptr _tao_retval_info = _tao_safe_retval._retn ();
               ri.result (_tao_retval_info);
               _tao_safe_retval = _tao_retval_info;
             );
@@ -698,7 +697,7 @@
   return "IDL:CORBA_DomainManager:1.0";
 }
 
-CORBA_Policy_ptr CORBA_DomainManager::get_domain_policy (
+CORBA::Policy_ptr CORBA_DomainManager::get_domain_policy (
     CORBA::PolicyType policy_type,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -870,7 +869,7 @@
   return *tmp;
 }
 // *************************************************************
-// Inline operations for class CORBA_ConstructionPolicy_out
+// Operations for class CORBA_ConstructionPolicy_out
 // *************************************************************
 
 CORBA_ConstructionPolicy_out::CORBA_ConstructionPolicy_out (CORBA_ConstructionPolicy_ptr &p)
@@ -936,7 +935,7 @@
   TAO_ClientRequestInfo_CORBA_ConstructionPolicy_make_domain_manager (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      CORBA_InterfaceDef_ptr object_type,
+      CORBA::InterfaceDef_ptr object_type,
       const CORBA::Boolean & constr_policy,
       CORBA::Environment &ACE_TRY_ENV = 
         TAO_default_environment ()
@@ -964,7 +963,7 @@
   TAO_ClientRequestInfo_CORBA_ConstructionPolicy_make_domain_manager (const TAO_ClientRequestInfo_CORBA_ConstructionPolicy_make_domain_manager &);
   void operator= (const TAO_ClientRequestInfo_CORBA_ConstructionPolicy_make_domain_manager &);
 
-  CORBA_InterfaceDef_ptr object_type_;
+  CORBA::InterfaceDef_ptr object_type_;
   const CORBA::Boolean & constr_policy_;
   
 };
@@ -972,7 +971,7 @@
 TAO_ClientRequestInfo_CORBA_ConstructionPolicy_make_domain_manager::TAO_ClientRequestInfo_CORBA_ConstructionPolicy_make_domain_manager (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    CORBA_InterfaceDef_ptr object_type,
+    CORBA::InterfaceDef_ptr object_type,
     const CORBA::Boolean & constr_policy,
     CORBA::Environment &    
   )
@@ -992,9 +991,17 @@
   
   Dynamic::ParameterList_var safe_parameter_list = parameter_list;
     
+  TAO_IFR_Client_Adapter *adapter =
+    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
+        TAO_ORB_Core::ifr_client_adapter_name ()
+      );
+
   CORBA::ULong length_object_type = parameter_list->length ();
   parameter_list->length (length_object_type + 1);
-  (*parameter_list)[length_object_type].argument <<=  this->object_type_;
+  adapter->interfacedef_any_insert (
+      (*parameter_list)[length_object_type].argument,
+      this->object_type_
+    );
   
   (*parameter_list)[length_object_type].mode = Dynamic::PARAM_IN;
     
@@ -1048,7 +1055,7 @@
 
 void _TAO_CORBA_ConstructionPolicy_Remote_Proxy_Impl::make_domain_manager (
     CORBA_Object *_collocated_tao_target_,
-    CORBA_InterfaceDef_ptr object_type,
+    CORBA::InterfaceDef_ptr object_type,
     CORBA::Boolean constr_policy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -1080,6 +1087,11 @@
   
 #endif  /* TAO_HAS_INTERCEPTORS */
   
+  TAO_IFR_Client_Adapter *adapter =
+    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
+        TAO_ORB_Core::ifr_client_adapter_name ()
+      );
+
   for (;;)
     {
       int _invoke_status = TAO_INVOKE_EXCEPTION;
@@ -1120,7 +1132,7 @@
           
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
-                            (_tao_out << object_type) &&
+              (adapter->interfacedef_cdr_insert (_tao_out, object_type)) &&
               (_tao_out << CORBA::Any::from_boolean (constr_policy))
             ))
             TAO_INTERCEPTOR_THROW (
@@ -1361,7 +1373,7 @@
 {
   if (
     (!ACE_OS::strcmp ((char *)value, "IDL:CORBA_ConstructionPolicy:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA_Policy:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Policy:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
   return 1; // success using local knowledge
   else
@@ -1377,13 +1389,13 @@
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &CORBA_Policy::_narrow))
+      &::CORBA::Policy::_narrow))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA_Policy_ptr,
+            CORBA::Policy_ptr,
             this
           )
       );
@@ -1402,7 +1414,7 @@
 }
 
 void CORBA_ConstructionPolicy::make_domain_manager (
-    CORBA_InterfaceDef_ptr object_type,
+    CORBA::InterfaceDef_ptr object_type,
     CORBA::Boolean constr_policy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -1978,4 +1990,3 @@
   }
   return 0; // error
 }
-
