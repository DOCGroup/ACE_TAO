// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "Policy_ForwardC.h"
#include "Policy_ForwardA.h"
#include "tao/Typecode.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Any_Basic_Impl_T.h"

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::PolicyList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::PolicyList>::insert_copy (
      _tao_any,
      CORBA::PolicyList::_tao_any_destructor,
      CORBA::_tc_PolicyList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::PolicyList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::PolicyList>::insert (
      _tao_any,
      CORBA::PolicyList::_tao_any_destructor,
      CORBA::_tc_PolicyList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::PolicyList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::PolicyList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::PolicyList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::PolicyList>::extract (
        _tao_any,
        CORBA::PolicyList::_tao_any_destructor,
        CORBA::_tc_PolicyList,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::PolicyTypeSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::PolicyTypeSeq>::insert_copy (
      _tao_any,
      CORBA::PolicyTypeSeq::_tao_any_destructor,
      CORBA::_tc_PolicyTypeSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::PolicyTypeSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::PolicyTypeSeq>::insert (
      _tao_any,
      CORBA::PolicyTypeSeq::_tao_any_destructor,
      CORBA::_tc_PolicyTypeSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::PolicyTypeSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::PolicyTypeSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::PolicyTypeSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::PolicyTypeSeq>::extract (
        _tao_any,
        CORBA::PolicyTypeSeq::_tao_any_destructor,
        CORBA::_tc_PolicyTypeSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:52

void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::SetOverrideType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CORBA::SetOverrideType>::insert (
      _tao_any,
      CORBA::_tc_SetOverrideType,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::SetOverrideType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CORBA::SetOverrideType>::extract (
        _tao_any,
        CORBA::_tc_SetOverrideType,
        _tao_elem 
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::PolicyList
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::PolicyTypeSeq
      >;

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::SetOverrideType
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::PolicyList \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::PolicyTypeSeq \
      >

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::SetOverrideType \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

