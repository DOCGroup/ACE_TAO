// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if (TAO_HAS_REBIND_POLICY == 1)

#if !defined (_MESSAGING_REBINDPOLICY___CI_)
#define _MESSAGING_REBINDPOLICY___CI_

ACE_INLINE Messaging::RebindPolicy_ptr
tao_Messaging_RebindPolicy_duplicate (
    Messaging::RebindPolicy_ptr p
  )
{
  return Messaging::RebindPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RebindPolicy_release (
    Messaging::RebindPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RebindPolicy_ptr
tao_Messaging_RebindPolicy_nil (
    void
  )
{
  return Messaging::RebindPolicy::_nil ();
}

ACE_INLINE Messaging::RebindPolicy_ptr
tao_Messaging_RebindPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RebindPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RebindPolicy_upcast (
    void *src
  )
{
  Messaging::RebindPolicy **tmp =
    ACE_static_cast (Messaging::RebindPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_REBIND_POLICY == 1 */

#if (TAO_HAS_SYNC_SCOPE_POLICY == 1)

#if !defined (_MESSAGING_SYNCSCOPEPOLICY___CI_)
#define _MESSAGING_SYNCSCOPEPOLICY___CI_

ACE_INLINE Messaging::SyncScopePolicy_ptr
tao_Messaging_SyncScopePolicy_duplicate (
    Messaging::SyncScopePolicy_ptr p
  )
{
  return Messaging::SyncScopePolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_SyncScopePolicy_release (
    Messaging::SyncScopePolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::SyncScopePolicy_ptr
tao_Messaging_SyncScopePolicy_nil (
    void
  )
{
  return Messaging::SyncScopePolicy::_nil ();
}

ACE_INLINE Messaging::SyncScopePolicy_ptr
tao_Messaging_SyncScopePolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::SyncScopePolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_SyncScopePolicy_upcast (
    void *src
  )
{
  Messaging::SyncScopePolicy **tmp =
    ACE_static_cast (Messaging::SyncScopePolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */

#endif /* TAO_HAS_SYNC_SCOPE_POLICY == 1 */

#if (TAO_HAS_PRIORITY_POLICIES == 1)

// *************************************************************
// Inline operations for class Messaging::PriorityRange_var
// *************************************************************

ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (PriorityRange *p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (const ::Messaging::PriorityRange_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::Messaging::PriorityRange (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (const ::Messaging::PriorityRange &p)
{
  ACE_NEW (this->ptr_, ::Messaging::PriorityRange (p));
}

ACE_INLINE
Messaging::PriorityRange_var::~PriorityRange_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE Messaging::PriorityRange_var &
Messaging::PriorityRange_var::operator= (PriorityRange *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::Messaging::PriorityRange_var &
Messaging::PriorityRange_var::operator= (const ::Messaging::PriorityRange_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          PriorityRange *deep_copy =
            new PriorityRange (*p.ptr_);

          if (deep_copy != 0)
            {
              PriorityRange *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE Messaging::PriorityRange_var &
Messaging::PriorityRange_var::operator= (const ::Messaging::PriorityRange &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::Messaging::PriorityRange (p), *this);
  }
  return *this;
}

ACE_INLINE const ::Messaging::PriorityRange *
Messaging::PriorityRange_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange *
Messaging::PriorityRange_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Messaging::PriorityRange_var::operator const ::Messaging::PriorityRange &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PriorityRange_var::operator ::Messaging::PriorityRange &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PriorityRange_var::operator ::Messaging::PriorityRange &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE const ::Messaging::PriorityRange &
Messaging::PriorityRange_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange &
Messaging::PriorityRange_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size
ACE_INLINE ::Messaging::PriorityRange &
Messaging::PriorityRange_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange
Messaging::PriorityRange_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange *
Messaging::PriorityRange_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (_MESSAGING_REQUESTPRIORITYPOLICY___CI_)
#define _MESSAGING_REQUESTPRIORITYPOLICY___CI_

ACE_INLINE Messaging::RequestPriorityPolicy_ptr
tao_Messaging_RequestPriorityPolicy_duplicate (
    Messaging::RequestPriorityPolicy_ptr p
  )
{
  return Messaging::RequestPriorityPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RequestPriorityPolicy_release (
    Messaging::RequestPriorityPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RequestPriorityPolicy_ptr
tao_Messaging_RequestPriorityPolicy_nil (
    void
  )
{
  return Messaging::RequestPriorityPolicy::_nil ();
}

ACE_INLINE Messaging::RequestPriorityPolicy_ptr
tao_Messaging_RequestPriorityPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RequestPriorityPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RequestPriorityPolicy_upcast (
    void *src
  )
{
  Messaging::RequestPriorityPolicy **tmp =
    ACE_static_cast (Messaging::RequestPriorityPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_MESSAGING_REPLYPRIORITYPOLICY___CI_)
#define _MESSAGING_REPLYPRIORITYPOLICY___CI_

ACE_INLINE Messaging::ReplyPriorityPolicy_ptr
tao_Messaging_ReplyPriorityPolicy_duplicate (
    Messaging::ReplyPriorityPolicy_ptr p
  )
{
  return Messaging::ReplyPriorityPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_ReplyPriorityPolicy_release (
    Messaging::ReplyPriorityPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::ReplyPriorityPolicy_ptr
tao_Messaging_ReplyPriorityPolicy_nil (
    void
  )
{
  return Messaging::ReplyPriorityPolicy::_nil ();
}

ACE_INLINE Messaging::ReplyPriorityPolicy_ptr
tao_Messaging_ReplyPriorityPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::ReplyPriorityPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_ReplyPriorityPolicy_upcast (
    void *src
  )
{
  Messaging::ReplyPriorityPolicy **tmp =
    ACE_static_cast (Messaging::ReplyPriorityPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */

#if (TAO_HAS_REQUEST_START_TIME_POLICY == 1)

#if !defined (_MESSAGING_REQUESTSTARTTIMEPOLICY___CI_)
#define _MESSAGING_REQUESTSTARTTIMEPOLICY___CI_

ACE_INLINE Messaging::RequestStartTimePolicy_ptr
tao_Messaging_RequestStartTimePolicy_duplicate (
    Messaging::RequestStartTimePolicy_ptr p
  )
{
  return Messaging::RequestStartTimePolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RequestStartTimePolicy_release (
    Messaging::RequestStartTimePolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RequestStartTimePolicy_ptr
tao_Messaging_RequestStartTimePolicy_nil (
    void
  )
{
  return Messaging::RequestStartTimePolicy::_nil ();
}

ACE_INLINE Messaging::RequestStartTimePolicy_ptr
tao_Messaging_RequestStartTimePolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RequestStartTimePolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RequestStartTimePolicy_upcast (
    void *src
  )
{
  Messaging::RequestStartTimePolicy **tmp =
    ACE_static_cast (Messaging::RequestStartTimePolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_REQUEST_START_TIME_POLICY == 1 */

#if (TAO_HAS_REQUEST_END_TIME_POLICY == 1)

#if !defined (_MESSAGING_REQUESTENDTIMEPOLICY___CI_)
#define _MESSAGING_REQUESTENDTIMEPOLICY___CI_

ACE_INLINE Messaging::RequestEndTimePolicy_ptr
tao_Messaging_RequestEndTimePolicy_duplicate (
    Messaging::RequestEndTimePolicy_ptr p
  )
{
  return Messaging::RequestEndTimePolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RequestEndTimePolicy_release (
    Messaging::RequestEndTimePolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RequestEndTimePolicy_ptr
tao_Messaging_RequestEndTimePolicy_nil (
    void
  )
{
  return Messaging::RequestEndTimePolicy::_nil ();
}

ACE_INLINE Messaging::RequestEndTimePolicy_ptr
tao_Messaging_RequestEndTimePolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RequestEndTimePolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RequestEndTimePolicy_upcast (
    void *src
  )
{
  Messaging::RequestEndTimePolicy **tmp =
    ACE_static_cast (Messaging::RequestEndTimePolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_REQUEST_END_TIME_POLICY == 1 */

#if (TAO_HAS_REPLY_START_TIME_POLICY == 1)

#if !defined (_MESSAGING_REPLYSTARTTIMEPOLICY___CI_)
#define _MESSAGING_REPLYSTARTTIMEPOLICY___CI_

ACE_INLINE Messaging::ReplyStartTimePolicy_ptr
tao_Messaging_ReplyStartTimePolicy_duplicate (
    Messaging::ReplyStartTimePolicy_ptr p
  )
{
  return Messaging::ReplyStartTimePolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_ReplyStartTimePolicy_release (
    Messaging::ReplyStartTimePolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::ReplyStartTimePolicy_ptr
tao_Messaging_ReplyStartTimePolicy_nil (
    void
  )
{
  return Messaging::ReplyStartTimePolicy::_nil ();
}

ACE_INLINE Messaging::ReplyStartTimePolicy_ptr
tao_Messaging_ReplyStartTimePolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::ReplyStartTimePolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_ReplyStartTimePolicy_upcast (
    void *src
  )
{
  Messaging::ReplyStartTimePolicy **tmp =
    ACE_static_cast (Messaging::ReplyStartTimePolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_REPLY_START_TIME_POLICY == 1 */

#if (TAO_HAS_REPLY_END_TIME_POLICY == 1)

#if !defined (_MESSAGING_REPLYENDTIMEPOLICY___CI_)
#define _MESSAGING_REPLYENDTIMEPOLICY___CI_

ACE_INLINE Messaging::ReplyEndTimePolicy_ptr
tao_Messaging_ReplyEndTimePolicy_duplicate (
    Messaging::ReplyEndTimePolicy_ptr p
  )
{
  return Messaging::ReplyEndTimePolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_ReplyEndTimePolicy_release (
    Messaging::ReplyEndTimePolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::ReplyEndTimePolicy_ptr
tao_Messaging_ReplyEndTimePolicy_nil (
    void
  )
{
  return Messaging::ReplyEndTimePolicy::_nil ();
}

ACE_INLINE Messaging::ReplyEndTimePolicy_ptr
tao_Messaging_ReplyEndTimePolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::ReplyEndTimePolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_ReplyEndTimePolicy_upcast (
    void *src
  )
{
  Messaging::ReplyEndTimePolicy **tmp =
    ACE_static_cast (Messaging::ReplyEndTimePolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_REPLY_END_TIME_POLICY == 1 */

#if (TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1)

#if !defined (_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___CI_)
#define _MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___CI_

ACE_INLINE Messaging::RelativeRequestTimeoutPolicy_ptr
tao_Messaging_RelativeRequestTimeoutPolicy_duplicate (
    Messaging::RelativeRequestTimeoutPolicy_ptr p
  )
{
  return Messaging::RelativeRequestTimeoutPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RelativeRequestTimeoutPolicy_release (
    Messaging::RelativeRequestTimeoutPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RelativeRequestTimeoutPolicy_ptr
tao_Messaging_RelativeRequestTimeoutPolicy_nil (
    void
  )
{
  return Messaging::RelativeRequestTimeoutPolicy::_nil ();
}

ACE_INLINE Messaging::RelativeRequestTimeoutPolicy_ptr
tao_Messaging_RelativeRequestTimeoutPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RelativeRequestTimeoutPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RelativeRequestTimeoutPolicy_upcast (
    void *src
  )
{
  Messaging::RelativeRequestTimeoutPolicy **tmp =
    ACE_static_cast (Messaging::RelativeRequestTimeoutPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_RELATIVE_REQUEST_TIMEOUT_POLICY == 1 */

#if (TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1)

#if !defined (_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___CI_)
#define _MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___CI_

ACE_INLINE Messaging::RelativeRoundtripTimeoutPolicy_ptr
tao_Messaging_RelativeRoundtripTimeoutPolicy_duplicate (
    Messaging::RelativeRoundtripTimeoutPolicy_ptr p
  )
{
  return Messaging::RelativeRoundtripTimeoutPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RelativeRoundtripTimeoutPolicy_release (
    Messaging::RelativeRoundtripTimeoutPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RelativeRoundtripTimeoutPolicy_ptr
tao_Messaging_RelativeRoundtripTimeoutPolicy_nil (
    void
  )
{
  return Messaging::RelativeRoundtripTimeoutPolicy::_nil ();
}

ACE_INLINE Messaging::RelativeRoundtripTimeoutPolicy_ptr
tao_Messaging_RelativeRoundtripTimeoutPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RelativeRoundtripTimeoutPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RelativeRoundtripTimeoutPolicy_upcast (
    void *src
  )
{
  Messaging::RelativeRoundtripTimeoutPolicy **tmp =
    ACE_static_cast (Messaging::RelativeRoundtripTimeoutPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */

#endif /* TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY == 1 */

#if (TAO_HAS_ROUTING_POLICY == 1)

// *************************************************************
// Inline operations for class Messaging::RoutingTypeRange_var
// *************************************************************

ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (RoutingTypeRange *p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (const ::Messaging::RoutingTypeRange_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::Messaging::RoutingTypeRange (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (const ::Messaging::RoutingTypeRange &p)
{
  ACE_NEW (this->ptr_, ::Messaging::RoutingTypeRange (p));
}

ACE_INLINE
Messaging::RoutingTypeRange_var::~RoutingTypeRange_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE Messaging::RoutingTypeRange_var &
Messaging::RoutingTypeRange_var::operator= (RoutingTypeRange *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::Messaging::RoutingTypeRange_var &
Messaging::RoutingTypeRange_var::operator= (const ::Messaging::RoutingTypeRange_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          RoutingTypeRange *deep_copy =
            new RoutingTypeRange (*p.ptr_);

          if (deep_copy != 0)
            {
              RoutingTypeRange *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE Messaging::RoutingTypeRange_var &
Messaging::RoutingTypeRange_var::operator= (const ::Messaging::RoutingTypeRange &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::Messaging::RoutingTypeRange (p), *this);
  }
  return *this;
}

ACE_INLINE const ::Messaging::RoutingTypeRange *
Messaging::RoutingTypeRange_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange *
Messaging::RoutingTypeRange_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Messaging::RoutingTypeRange_var::operator const ::Messaging::RoutingTypeRange &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::RoutingTypeRange_var::operator ::Messaging::RoutingTypeRange &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::RoutingTypeRange_var::operator ::Messaging::RoutingTypeRange &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE const ::Messaging::RoutingTypeRange &
Messaging::RoutingTypeRange_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange &
Messaging::RoutingTypeRange_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size
ACE_INLINE ::Messaging::RoutingTypeRange &
Messaging::RoutingTypeRange_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange
Messaging::RoutingTypeRange_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange *
Messaging::RoutingTypeRange_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (_MESSAGING_ROUTINGPOLICY___CI_)
#define _MESSAGING_ROUTINGPOLICY___CI_

ACE_INLINE Messaging::RoutingPolicy_ptr
tao_Messaging_RoutingPolicy_duplicate (
    Messaging::RoutingPolicy_ptr p
  )
{
  return Messaging::RoutingPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_RoutingPolicy_release (
    Messaging::RoutingPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::RoutingPolicy_ptr
tao_Messaging_RoutingPolicy_nil (
    void
  )
{
  return Messaging::RoutingPolicy::_nil ();
}

ACE_INLINE Messaging::RoutingPolicy_ptr
tao_Messaging_RoutingPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::RoutingPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_RoutingPolicy_upcast (
    void *src
  )
{
  Messaging::RoutingPolicy **tmp =
    ACE_static_cast (Messaging::RoutingPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_ROUTING_POLICY == 1 */

#if (TAO_HAS_MAX_HOPS_POLICY == 1)

#if !defined (_MESSAGING_MAXHOPSPOLICY___CI_)
#define _MESSAGING_MAXHOPSPOLICY___CI_

ACE_INLINE Messaging::MaxHopsPolicy_ptr
tao_Messaging_MaxHopsPolicy_duplicate (
    Messaging::MaxHopsPolicy_ptr p
  )
{
  return Messaging::MaxHopsPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_MaxHopsPolicy_release (
    Messaging::MaxHopsPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::MaxHopsPolicy_ptr
tao_Messaging_MaxHopsPolicy_nil (
    void
  )
{
  return Messaging::MaxHopsPolicy::_nil ();
}

ACE_INLINE Messaging::MaxHopsPolicy_ptr
tao_Messaging_MaxHopsPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::MaxHopsPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_MaxHopsPolicy_upcast (
    void *src
  )
{
  Messaging::MaxHopsPolicy **tmp =
    ACE_static_cast (Messaging::MaxHopsPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_MAX_HOPS_POLICY == 1 */

#if (TAO_HAS_QUEUE_ORDER_POLICY == 1)

#if !defined (_MESSAGING_QUEUEORDERPOLICY___CI_)
#define _MESSAGING_QUEUEORDERPOLICY___CI_

ACE_INLINE Messaging::QueueOrderPolicy_ptr
tao_Messaging_QueueOrderPolicy_duplicate (
    Messaging::QueueOrderPolicy_ptr p
  )
{
  return Messaging::QueueOrderPolicy::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_QueueOrderPolicy_release (
    Messaging::QueueOrderPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::QueueOrderPolicy_ptr
tao_Messaging_QueueOrderPolicy_nil (
    void
  )
{
  return Messaging::QueueOrderPolicy::_nil ();
}

ACE_INLINE Messaging::QueueOrderPolicy_ptr
tao_Messaging_QueueOrderPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::QueueOrderPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_QueueOrderPolicy_upcast (
    void *src
  )
{
  Messaging::QueueOrderPolicy **tmp =
    ACE_static_cast (Messaging::QueueOrderPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */

#endif /* TAO_HAS_QUEUE_ORDER_POLICY == 1 */

// *************************************************************
// Inline operations for class Messaging::PolicyValue_var
// *************************************************************

ACE_INLINE
Messaging::PolicyValue_var::PolicyValue_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::PolicyValue_var::PolicyValue_var (PolicyValue *p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::PolicyValue_var::PolicyValue_var (const ::Messaging::PolicyValue_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::Messaging::PolicyValue (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
Messaging::PolicyValue_var::~PolicyValue_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE Messaging::PolicyValue_var &
Messaging::PolicyValue_var::operator= (PolicyValue *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::Messaging::PolicyValue_var &
Messaging::PolicyValue_var::operator= (const ::Messaging::PolicyValue_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          PolicyValue *deep_copy =
            new PolicyValue (*p.ptr_);

          if (deep_copy != 0)
            {
              PolicyValue *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::Messaging::PolicyValue *
Messaging::PolicyValue_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValue *
Messaging::PolicyValue_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Messaging::PolicyValue_var::operator const ::Messaging::PolicyValue &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PolicyValue_var::operator ::Messaging::PolicyValue &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PolicyValue_var::operator ::Messaging::PolicyValue &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
Messaging::PolicyValue_var::operator ::Messaging::PolicyValue *&() // cast
{
  return this->ptr_;
}

ACE_INLINE const ::Messaging::PolicyValue &
Messaging::PolicyValue_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValue &
Messaging::PolicyValue_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::Messaging::PolicyValue *&
Messaging::PolicyValue_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValue *
Messaging::PolicyValue_var::_retn (void)
{
  ::Messaging::PolicyValue *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::Messaging::PolicyValue *
Messaging::PolicyValue_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class Messaging::PolicyValue_out
// *************************************************************

ACE_INLINE
Messaging::PolicyValue_out::PolicyValue_out (::Messaging::PolicyValue *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Messaging::PolicyValue_out::PolicyValue_out (PolicyValue_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Messaging::PolicyValue_out::PolicyValue_out (const ::Messaging::PolicyValue_out &p) // copy constructor
  : ptr_ (ACE_const_cast (PolicyValue_out&, p).ptr_)
{}

ACE_INLINE Messaging::PolicyValue_out &
Messaging::PolicyValue_out::operator= (const ::Messaging::PolicyValue_out &p)
{
  this->ptr_ = ACE_const_cast (PolicyValue_out&, p).ptr_;
  return *this;
}

ACE_INLINE Messaging::PolicyValue_out &
Messaging::PolicyValue_out::operator= (PolicyValue *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Messaging::PolicyValue_out::operator ::Messaging::PolicyValue *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValue *&
Messaging::PolicyValue_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValue *
Messaging::PolicyValue_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_MESSAGING_POLICYVALUESEQ_CI_

  // = Static operations.
  ACE_INLINE Messaging::PolicyValue *
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    Messaging::PolicyValue *retval = 0;
    ACE_NEW_RETURN (retval, Messaging::PolicyValue[size], 0);
    return retval;
  }

  ACE_INLINE void Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::freebuf (Messaging::PolicyValue *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }

  ACE_INLINE
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (void) // Default constructor.
  {
  }

  ACE_INLINE
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (maximum))
  {
  }

  ACE_INLINE
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    Messaging::PolicyValue *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }

  ACE_INLINE
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq (const _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      Messaging::PolicyValue *tmp1 = _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (this->maximum_);
      Messaging::PolicyValue * const tmp2 = ACE_reinterpret_cast (Messaging::PolicyValue * ACE_CAST_CONST, rhs.buffer_);

      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];

      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }

  ACE_INLINE Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq &
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::operator= (const _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;

    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        Messaging::PolicyValue *tmp = ACE_reinterpret_cast (Messaging::PolicyValue *, this->buffer_);
        _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (rhs.maximum_);

    TAO_Unbounded_Base_Sequence::operator= (rhs);

    Messaging::PolicyValue *tmp1 = ACE_reinterpret_cast (Messaging::PolicyValue *, this->buffer_);
    Messaging::PolicyValue * const tmp2 = ACE_reinterpret_cast (Messaging::PolicyValue * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    return *this;
  }

  // = Accessors.
  ACE_INLINE Messaging::PolicyValue &
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    Messaging::PolicyValue* tmp = ACE_reinterpret_cast(Messaging::PolicyValue*,this->buffer_);
    return tmp[i];
  }

  ACE_INLINE const Messaging::PolicyValue &
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    Messaging::PolicyValue * const tmp = ACE_reinterpret_cast (Messaging::PolicyValue* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }

  // Implement the TAO_Base_Sequence methods (see Sequence.h)

  ACE_INLINE Messaging::PolicyValue *
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::get_buffer (CORBA::Boolean orphan)
  {
    Messaging::PolicyValue *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (Messaging::PolicyValue*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(Messaging::PolicyValue*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }

  ACE_INLINE const Messaging::PolicyValue *
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const Messaging::PolicyValue * ACE_CAST_CONST, this->buffer_);
  }

  ACE_INLINE void
  Messaging::_TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  Messaging::PolicyValue *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      Messaging::PolicyValue *tmp = ACE_reinterpret_cast(Messaging::PolicyValue*,this->buffer_);
      _TAO_Unbounded_Sequence_Messaging_PolicyValueSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_MESSAGING_POLICYVALUESEQ_CI_)
#define _MESSAGING_POLICYVALUESEQ_CI_

// *************************************************************
// Inline operations for class Messaging::PolicyValueSeq_var
// *************************************************************

ACE_INLINE
Messaging::PolicyValueSeq_var::PolicyValueSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::PolicyValueSeq_var::PolicyValueSeq_var (PolicyValueSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::PolicyValueSeq_var::PolicyValueSeq_var (const ::Messaging::PolicyValueSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::Messaging::PolicyValueSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
Messaging::PolicyValueSeq_var::~PolicyValueSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE Messaging::PolicyValueSeq_var &
Messaging::PolicyValueSeq_var::operator= (PolicyValueSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::Messaging::PolicyValueSeq_var &
Messaging::PolicyValueSeq_var::operator= (const ::Messaging::PolicyValueSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          PolicyValueSeq *deep_copy =
            new PolicyValueSeq (*p.ptr_);

          if (deep_copy != 0)
            {
              PolicyValueSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::Messaging::PolicyValueSeq *
Messaging::PolicyValueSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValueSeq *
Messaging::PolicyValueSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Messaging::PolicyValueSeq_var::operator const ::Messaging::PolicyValueSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PolicyValueSeq_var::operator ::Messaging::PolicyValueSeq &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PolicyValueSeq_var::operator ::Messaging::PolicyValueSeq &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
Messaging::PolicyValueSeq_var::operator ::Messaging::PolicyValueSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE Messaging::PolicyValue &
Messaging::PolicyValueSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const Messaging::PolicyValue &
Messaging::PolicyValueSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const Messaging::PolicyValue &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::Messaging::PolicyValueSeq &
Messaging::PolicyValueSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValueSeq &
Messaging::PolicyValueSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::Messaging::PolicyValueSeq *&
Messaging::PolicyValueSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValueSeq *
Messaging::PolicyValueSeq_var::_retn (void)
{
  ::Messaging::PolicyValueSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::Messaging::PolicyValueSeq *
Messaging::PolicyValueSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class Messaging::PolicyValueSeq_out
// *************************************************************

ACE_INLINE
Messaging::PolicyValueSeq_out::PolicyValueSeq_out (PolicyValueSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Messaging::PolicyValueSeq_out::PolicyValueSeq_out (PolicyValueSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Messaging::PolicyValueSeq_out::PolicyValueSeq_out (const ::Messaging::PolicyValueSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (PolicyValueSeq_out&, p).ptr_)
{}

ACE_INLINE ::Messaging::PolicyValueSeq_out &
Messaging::PolicyValueSeq_out::operator= (const ::Messaging::PolicyValueSeq_out &p)
{
  this->ptr_ = ACE_const_cast (PolicyValueSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::Messaging::PolicyValueSeq_out &
Messaging::PolicyValueSeq_out::operator= (PolicyValueSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Messaging::PolicyValueSeq_out::operator ::Messaging::PolicyValueSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValueSeq *&
Messaging::PolicyValueSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PolicyValueSeq *
Messaging::PolicyValueSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE Messaging::PolicyValue &
Messaging::PolicyValueSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)

ACE_INLINE
Messaging::ExceptionHolder::ExceptionHolder () // default constructor
{}

ACE_INLINE
Messaging::ExceptionHolder::~ExceptionHolder () // destructor
{}

ACE_INLINE const char*
Messaging::ExceptionHolder::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Messaging/ExceptionHolder:1.0";
}


#if !defined (_MESSAGING_EXCEPTIONHOLDER___VAR_CI_)
#define _MESSAGING_EXCEPTIONHOLDER___VAR_CI_

// *************************************************************
// Inline operations for class Messaging::ExceptionHolder_var
// *************************************************************

ACE_INLINE
Messaging::ExceptionHolder_var::ExceptionHolder_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::ExceptionHolder_var::ExceptionHolder_var (ExceptionHolder* p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::ExceptionHolder_var::ExceptionHolder_var (const ExceptionHolder* p)
  : ptr_ (ACE_const_cast(ExceptionHolder*, p))
{}

ACE_INLINE Messaging::ExceptionHolder*
Messaging::ExceptionHolder_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
Messaging::ExceptionHolder_var::ExceptionHolder_var (const ExceptionHolder_var &p) // copy constructor
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

ACE_INLINE
Messaging::ExceptionHolder_var::~ExceptionHolder_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

ACE_INLINE Messaging::ExceptionHolder_var &
Messaging::ExceptionHolder_var::operator= (ExceptionHolder* p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE Messaging::ExceptionHolder_var &
Messaging::ExceptionHolder_var::operator= (const ExceptionHolder_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    ExceptionHolder* tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  return *this;
}

ACE_INLINE
Messaging::ExceptionHolder_var::operator const Messaging::ExceptionHolder* () const // cast
{
  return this->ptr_;
}

ACE_INLINE
Messaging::ExceptionHolder_var::operator Messaging::ExceptionHolder* () // cast
{
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder*
Messaging::ExceptionHolder_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder*
Messaging::ExceptionHolder_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder* &
Messaging::ExceptionHolder_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder* &
Messaging::ExceptionHolder_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder*
Messaging::ExceptionHolder_var::_retn (void)
{
  // yield ownership of managed obj reference
  ExceptionHolder* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}


#endif /* end #if !defined */


#if !defined (_MESSAGING_EXCEPTIONHOLDER___OUT_CI_)
#define _MESSAGING_EXCEPTIONHOLDER___OUT_CI_

// *************************************************************
// Inline operations for class Messaging::ExceptionHolder_out
// *************************************************************

ACE_INLINE
Messaging::ExceptionHolder_out::ExceptionHolder_out (ExceptionHolder* &p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Messaging::ExceptionHolder_out::ExceptionHolder_out (ExceptionHolder_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

ACE_INLINE
Messaging::ExceptionHolder_out::ExceptionHolder_out (const ExceptionHolder_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ExceptionHolder_out&,p).ptr_)
{}

ACE_INLINE Messaging::ExceptionHolder_out &
Messaging::ExceptionHolder_out::operator= (const ExceptionHolder_out &p)
{
  this->ptr_ = ACE_const_cast (ExceptionHolder_out&,p).ptr_;
  return *this;
}

ACE_INLINE Messaging::ExceptionHolder_out &
Messaging::ExceptionHolder_out::operator= (const ExceptionHolder_var &p)
{
  ExceptionHolder* tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

ACE_INLINE Messaging::ExceptionHolder_out &
Messaging::ExceptionHolder_out::operator= (ExceptionHolder* p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Messaging::ExceptionHolder_out::operator Messaging::ExceptionHolder* &() // cast
{
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder* &
Messaging::ExceptionHolder_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE Messaging::ExceptionHolder*
Messaging::ExceptionHolder_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (_MESSAGING_REPLYHANDLER___CI_)
#define _MESSAGING_REPLYHANDLER___CI_

ACE_INLINE Messaging::ReplyHandler_ptr
tao_Messaging_ReplyHandler_duplicate (
    Messaging::ReplyHandler_ptr p
  )
{
  return Messaging::ReplyHandler::_duplicate (p);
}

ACE_INLINE void
tao_Messaging_ReplyHandler_release (
    Messaging::ReplyHandler_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE Messaging::ReplyHandler_ptr
tao_Messaging_ReplyHandler_nil (
    void
  )
{
  return Messaging::ReplyHandler::_nil ();
}

ACE_INLINE Messaging::ReplyHandler_ptr
tao_Messaging_ReplyHandler_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return Messaging::ReplyHandler::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_Messaging_ReplyHandler_upcast (
    void *src
  )
{
  Messaging::ReplyHandler **tmp =
    ACE_static_cast (Messaging::ReplyHandler **, src);
  return *tmp;
}

ACE_INLINE
Messaging::ReplyHandler::ReplyHandler (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA::Object (objref, _tao_collocated, servant)
{
  this->Messaging_ReplyHandler_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */


#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */

#if (TAO_HAS_PRIORITY_POLICIES == 1)

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Messaging::PriorityRange &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.min) &&
    (strm << _tao_aggregate.max)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, Messaging::PriorityRange &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.min) &&
    (strm >> _tao_aggregate.max)
  )
    return 1;
  else
    return 0;

}

#endif /* TAO_HAS_PRIORITY_POLICIES == 1 */

#if (TAO_HAS_ROUTING_POLICY == 1)

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Messaging::RoutingTypeRange &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.min) &&
    (strm << _tao_aggregate.max)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, Messaging::RoutingTypeRange &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.min) &&
    (strm >> _tao_aggregate.max)
  )
    return 1;
  else
    return 0;

}

#endif /* TAO_HAS_ROUTING_POLICY == 1 */


#if !defined _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_I_
#define _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const Messaging::PolicyValue::_tao_seq_Octet &
  );
CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    Messaging::PolicyValue::_tao_seq_Octet &
  );

#endif /* _TAO_CDR_OP_Messaging_PolicyValue__tao_seq_Octet_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Messaging::PolicyValue &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.ptype) &&
    (strm << _tao_aggregate.pvalue)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, Messaging::PolicyValue &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.ptype) &&
    (strm >> _tao_aggregate.pvalue)
  )
    return 1;
  else
    return 0;

}


#if !defined _TAO_CDR_OP_Messaging_PolicyValueSeq_I_
#define _TAO_CDR_OP_Messaging_PolicyValueSeq_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const Messaging::PolicyValueSeq &
  );
CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    Messaging::PolicyValueSeq &
  );

#endif /* _TAO_CDR_OP_Messaging_PolicyValueSeq_I_ */

#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)

ACE_INLINE CORBA::Boolean
operator<< (TAO_OutputCDR &strm, const Messaging::ExceptionHolder *_tao_valuetype)
{
  return CORBA_ValueBase::_tao_marshal (strm,
    ACE_const_cast (Messaging::ExceptionHolder*, _tao_valuetype),
    (ptr_arith_t) &Messaging::ExceptionHolder::_downcast);
}

ACE_INLINE CORBA::Boolean
operator>> (TAO_InputCDR &strm, Messaging::ExceptionHolder *&_tao_valuetype)
{
  return Messaging::ExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}

ACE_INLINE CORBA::Boolean
OBV_Messaging::ExceptionHolder::_tao_marshal_state (TAO_OutputCDR &strm)
{
  if (
    (strm << CORBA::Any::from_boolean (_pd_is_system_exception)) &&
    (strm << CORBA::Any::from_boolean (_pd_byte_order)) &&
    (strm << _pd_marshaled_exception)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean
OBV_Messaging::ExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &strm)
{
  if (
    (strm >> CORBA::Any::to_boolean (_pd_is_system_exception)) &&
    (strm >> CORBA::Any::to_boolean (_pd_byte_order)) &&
    (strm >> _pd_marshaled_exception)
  )
    return 1;
  else
    return 0;

}

CORBA::Boolean TAO_Export
operator<< (
    TAO_OutputCDR &,
    const Messaging::ReplyHandler_ptr
  );
CORBA::Boolean TAO_Export
operator>> (
    TAO_InputCDR &,
    Messaging::ReplyHandler_ptr &
  );

#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
