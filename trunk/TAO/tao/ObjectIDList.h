/* -*- C++ -*- */
// $Id$
// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html
//
//  Hand Modified by Vishal Kachroo <vishal@cs.wustl.edu>
//

#ifndef OBJECTIDLIST_H_
#define OBJECTIDLIST_H_
#include "ace/pre.h"

#include "tao/corbafwd.h"
#include "tao/Sequence.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO
#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */


#if !defined (_CORBA_ORB_OBJECTIDLIST_CH_)
#define _CORBA_ORB_OBJECTIDLIST_CH_

// *************************************************************
// ObjectIdList
// *************************************************************

namespace CORBA
{
  class TAO_Export ORB_ObjectIdList : public
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_String_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
  {
  public:
    ORB_ObjectIdList (void); // default ctor
    ORB_ObjectIdList (CORBA::ULong max); // uses max size
    ORB_ObjectIdList (
                            CORBA::ULong max,
                            CORBA::ULong length,
                            char * *buffer,
                            CORBA::Boolean release=0
                            );
    ORB_ObjectIdList (const ORB_ObjectIdList &); // copy ctor
    ~ORB_ObjectIdList (void); // dtor

    static void _tao_any_destructor (void*);
  };

  typedef ORB_ObjectIdList *ORB_ObjectIdList_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_ORB_OBJECTIDLIST___VAR_CH_)
#define _CORBA_ORB_OBJECTIDLIST___VAR_CH_

  // *************************************************************
  // class CORBA::ORB::ObjectIdList_var
  // *************************************************************

  class TAO_Export ORB_ObjectIdList_var
  {
  public:
    ORB_ObjectIdList_var (void); // default constructor
    ORB_ObjectIdList_var (ORB_ObjectIdList *);
    ORB_ObjectIdList_var (const ORB_ObjectIdList_var &); // copy constructor
    ~ORB_ObjectIdList_var (void); // destructor

    ORB_ObjectIdList_var &operator= (ORB_ObjectIdList *);
    ORB_ObjectIdList_var &operator= (const ORB_ObjectIdList_var &);
    ORB_ObjectIdList *operator-> (void);
    const ORB_ObjectIdList *operator-> (void) const;

    operator const ORB_ObjectIdList &() const;
    operator ORB_ObjectIdList &();
    operator ORB_ObjectIdList &() const;
    TAO_SeqElem_String_Manager operator[] (CORBA::ULong slot);
    // in, inout, out, _retn
    const ORB_ObjectIdList &in (void) const;
    ORB_ObjectIdList &inout (void);
    ORB_ObjectIdList *&out (void);
    ORB_ObjectIdList *_retn (void);
    ORB_ObjectIdList *ptr (void) const;

  private:
    ORB_ObjectIdList *ptr_;
  };

#endif /* end #if !defined */


#if !defined (_CORBA_ORB_OBJECTIDLIST___OUT_CH_)
#define _CORBA_ORB_OBJECTIDLIST___OUT_CH_

  class TAO_Export ORB_ObjectIdList_out
  {
  public:
    ORB_ObjectIdList_out (ORB_ObjectIdList *&);
    ORB_ObjectIdList_out (ORB_ObjectIdList_var &);
    ORB_ObjectIdList_out (const ORB_ObjectIdList_out &);
    ORB_ObjectIdList_out &operator= (const ORB_ObjectIdList_out &);
    ORB_ObjectIdList_out &operator= (ORB_ObjectIdList *);
    operator ORB_ObjectIdList *&();
    ORB_ObjectIdList *&ptr (void);
    ORB_ObjectIdList *operator-> (void);
    TAO_SeqElem_String_Manager operator[] (CORBA::ULong slot);

  private:
    ORB_ObjectIdList *&ptr_;
    // assignment from T_var not allowed
    void operator= (const ORB_ObjectIdList_var &);
  };

#endif /* end #if !defined */
}  // End CORBA namespace.

TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ORB_ObjectIdList &); //
TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ORB_ObjectIdList &);

#if defined (__ACE_INLINE__)
#include "tao/ObjectIDList.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#include "ace/post.h"
#endif /* ifndef */
