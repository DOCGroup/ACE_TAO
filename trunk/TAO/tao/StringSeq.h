// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_STRINGSEQ_H_
#define _TAO_IDL_STRINGSEQ_H_

#include "ace/pre.h"

#include "tao/corbafwd.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Sequence.h"

class TAO_InputCDR;
class TAO_OutputCDR;

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO 
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

  
// *************************************************************
// CORBA_StringSeq
// *************************************************************
  
class  CORBA_StringSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_String_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_StringSeq (void); // default ctor
  CORBA_StringSeq (CORBA::ULong max); // uses max size
  CORBA_StringSeq (
             CORBA::ULong max, 
             CORBA::ULong length, 
             char * *buffer, 
             CORBA::Boolean release = 0
             );
  CORBA_StringSeq (const CORBA_StringSeq &); // copy ctor
  ~CORBA_StringSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_StringSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */

};

// *************************************************************
// class CORBA_StringSeq_var
// *************************************************************

class  CORBA_StringSeq_var
{
public:
  CORBA_StringSeq_var (void); // default constructor
  CORBA_StringSeq_var (CORBA_StringSeq *);
  CORBA_StringSeq_var (const CORBA_StringSeq_var &); // copy constructor
  ~CORBA_StringSeq_var (void); // destructor

  CORBA_StringSeq_var &operator= (CORBA_StringSeq *);
  CORBA_StringSeq_var &operator= (const CORBA_StringSeq_var &);
  CORBA_StringSeq *operator-> (void);
  const CORBA_StringSeq *operator-> (void) const;
  
  operator const CORBA_StringSeq &() const;
  operator CORBA_StringSeq &();
  operator CORBA_StringSeq &() const;
  operator CORBA_StringSeq *&(); // variable-size base types only

  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
  
  // in, inout, out, _retn 
  const CORBA_StringSeq &in (void) const;
  CORBA_StringSeq &inout (void);
  CORBA_StringSeq *&out (void);
  CORBA_StringSeq *_retn (void);
  CORBA_StringSeq *ptr (void) const;

private:
  CORBA_StringSeq *ptr_;
};

class  CORBA_StringSeq_out
{
public:
  CORBA_StringSeq_out (CORBA_StringSeq *&);
  CORBA_StringSeq_out (CORBA_StringSeq_var &);
  CORBA_StringSeq_out (const CORBA_StringSeq_out &);
  CORBA_StringSeq_out &operator= (const CORBA_StringSeq_out &);
  CORBA_StringSeq_out &operator= (CORBA_StringSeq *);
  operator CORBA_StringSeq *&();
  CORBA_StringSeq *&ptr (void);
  CORBA_StringSeq *operator-> (void);
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
  
private:
  CORBA_StringSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_StringSeq_var &);
};

TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_StringSeq;

  
// *************************************************************
// CORBA_WStringSeq
// *************************************************************
  
class  CORBA_WStringSeq : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    TAO_Unbounded_WString_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_WString_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_WStringSeq (void); // default ctor
  CORBA_WStringSeq (CORBA::ULong max); // uses max size
  CORBA_WStringSeq (
              CORBA::ULong max, 
              CORBA::ULong length, 
              CORBA::WChar * *buffer, 
              CORBA::Boolean release = 0
              );
  CORBA_WStringSeq (const CORBA_WStringSeq &); // copy ctor
  ~CORBA_WStringSeq (void);
  static void _tao_any_destructor (void*);

#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
  typedef CORBA_WStringSeq_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */
};

// *************************************************************
// class CORBA_WStringSeq_var
// *************************************************************

class  CORBA_WStringSeq_var
{
public:
  CORBA_WStringSeq_var (void); // default constructor
  CORBA_WStringSeq_var (CORBA_WStringSeq *);
  CORBA_WStringSeq_var (const CORBA_WStringSeq_var &); // copy constructor
  ~CORBA_WStringSeq_var (void); // destructor
    
  CORBA_WStringSeq_var &operator= (CORBA_WStringSeq *);
  CORBA_WStringSeq_var &operator= (const CORBA_WStringSeq_var &);
  CORBA_WStringSeq *operator-> (void);
  const CORBA_WStringSeq *operator-> (void) const;

  operator const CORBA_WStringSeq &() const;
  operator CORBA_WStringSeq &();
  operator CORBA_WStringSeq &() const;
  operator CORBA_WStringSeq *&(); // variable-size base types only

  TAO_SeqElem_WString_Manager operator[] (CORBA::ULong index);

  // in, inout, out, _retn 
  const CORBA_WStringSeq &in (void) const;
  CORBA_WStringSeq &inout (void);
  CORBA_WStringSeq *&out (void);
  CORBA_WStringSeq *_retn (void);
  CORBA_WStringSeq *ptr (void) const;

private:
  CORBA_WStringSeq *ptr_;
};

class  CORBA_WStringSeq_out
{
public:
  CORBA_WStringSeq_out (CORBA_WStringSeq *&);
  CORBA_WStringSeq_out (CORBA_WStringSeq_var &);
  CORBA_WStringSeq_out (const CORBA_WStringSeq_out &);
  CORBA_WStringSeq_out &operator= (const CORBA_WStringSeq_out &);
  CORBA_WStringSeq_out &operator= (CORBA_WStringSeq *);
  operator CORBA_WStringSeq *&();
  CORBA_WStringSeq *&ptr (void);
  CORBA_WStringSeq *operator-> (void);
  TAO_SeqElem_WString_Manager operator[] (CORBA::ULong index);
    
private:
  CORBA_WStringSeq *&ptr_;
  // assignment from T_var not allowed
  void operator= (const CORBA_WStringSeq_var &);
};

TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_WStringSeq;


void operator<<= (CORBA::Any &, const CORBA_StringSeq &); // copying version
void operator<<= (CORBA::Any &, CORBA_StringSeq*); // noncopying version
CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_StringSeq *&); // deprecated
CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_StringSeq *&);
void operator<<= (CORBA::Any &, const CORBA_WStringSeq &); // copying version
void operator<<= (CORBA::Any &, CORBA_WStringSeq*); // noncopying version
CORBA::Boolean operator>>= (const CORBA::Any &, CORBA_WStringSeq *&); // deprecated
CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA_WStringSeq *&);

#ifndef __ACE_INLINE__

CORBA::Boolean operator<< (
                           TAO_OutputCDR &,
                           const CORBA_StringSeq &
                           );
CORBA::Boolean operator>> (
                           TAO_InputCDR &,
                           CORBA_StringSeq &
                           );

CORBA::Boolean operator<< (
                           TAO_OutputCDR &,
                           const CORBA_WStringSeq &
                           );
CORBA::Boolean operator>> (
                           TAO_InputCDR &,
                           CORBA_WStringSeq &
                           );

#endif /* __ACE_INLINE__ */


#if defined (__ACE_INLINE__)
#include "StringSeq.inl"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#include "ace/post.h"
#endif /* ifndef */
