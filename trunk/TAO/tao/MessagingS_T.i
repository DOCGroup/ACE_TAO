/* -*- C++ -*- */
// $Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html


#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RebindPolicy_tie<T>::RebindPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RebindPolicy_tie<T>::RebindPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RebindPolicy_tie<T>::RebindPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RebindPolicy_tie<T>::RebindPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RebindPolicy_tie<T>::~RebindPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RebindPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RebindPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RebindPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RebindPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RebindPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
Messaging::RebindMode POA_Messaging::RebindPolicy_tie<T>::rebind_mode  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->rebind_mode (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RebindPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RebindPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RebindPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::SyncScopePolicy_tie<T>::SyncScopePolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::SyncScopePolicy_tie<T>::SyncScopePolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::SyncScopePolicy_tie<T>::SyncScopePolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::SyncScopePolicy_tie<T>::SyncScopePolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::SyncScopePolicy_tie<T>::~SyncScopePolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::SyncScopePolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::SyncScopePolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::SyncScopePolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::SyncScopePolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::SyncScopePolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
Messaging::SyncScope POA_Messaging::SyncScopePolicy_tie<T>::synchronization  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->synchronization (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::SyncScopePolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::SyncScopePolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::SyncScopePolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RequestPriorityPolicy_tie<T>::RequestPriorityPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestPriorityPolicy_tie<T>::RequestPriorityPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestPriorityPolicy_tie<T>::RequestPriorityPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestPriorityPolicy_tie<T>::RequestPriorityPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestPriorityPolicy_tie<T>::~RequestPriorityPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RequestPriorityPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestPriorityPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestPriorityPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RequestPriorityPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestPriorityPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
Messaging::PriorityRange POA_Messaging::RequestPriorityPolicy_tie<T>::priority_range  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->priority_range (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RequestPriorityPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RequestPriorityPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RequestPriorityPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::ReplyPriorityPolicy_tie<T>::ReplyPriorityPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyPriorityPolicy_tie<T>::ReplyPriorityPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyPriorityPolicy_tie<T>::ReplyPriorityPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyPriorityPolicy_tie<T>::ReplyPriorityPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyPriorityPolicy_tie<T>::~ReplyPriorityPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::ReplyPriorityPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyPriorityPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyPriorityPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::ReplyPriorityPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyPriorityPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
Messaging::PriorityRange POA_Messaging::ReplyPriorityPolicy_tie<T>::priority_range  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->priority_range (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::ReplyPriorityPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::ReplyPriorityPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::ReplyPriorityPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RequestStartTimePolicy_tie<T>::RequestStartTimePolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestStartTimePolicy_tie<T>::RequestStartTimePolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestStartTimePolicy_tie<T>::RequestStartTimePolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestStartTimePolicy_tie<T>::RequestStartTimePolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestStartTimePolicy_tie<T>::~RequestStartTimePolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RequestStartTimePolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestStartTimePolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestStartTimePolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RequestStartTimePolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestStartTimePolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
TimeBase::UtcT POA_Messaging::RequestStartTimePolicy_tie<T>::start_time  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->start_time (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RequestStartTimePolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RequestStartTimePolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RequestStartTimePolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RequestEndTimePolicy_tie<T>::RequestEndTimePolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestEndTimePolicy_tie<T>::RequestEndTimePolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestEndTimePolicy_tie<T>::RequestEndTimePolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestEndTimePolicy_tie<T>::RequestEndTimePolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RequestEndTimePolicy_tie<T>::~RequestEndTimePolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RequestEndTimePolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestEndTimePolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestEndTimePolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RequestEndTimePolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RequestEndTimePolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
TimeBase::UtcT POA_Messaging::RequestEndTimePolicy_tie<T>::end_time  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->end_time (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RequestEndTimePolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RequestEndTimePolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RequestEndTimePolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::ReplyStartTimePolicy_tie<T>::ReplyStartTimePolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyStartTimePolicy_tie<T>::ReplyStartTimePolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyStartTimePolicy_tie<T>::ReplyStartTimePolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyStartTimePolicy_tie<T>::ReplyStartTimePolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyStartTimePolicy_tie<T>::~ReplyStartTimePolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::ReplyStartTimePolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyStartTimePolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyStartTimePolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::ReplyStartTimePolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyStartTimePolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
TimeBase::UtcT POA_Messaging::ReplyStartTimePolicy_tie<T>::start_time  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->start_time (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::ReplyStartTimePolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::ReplyStartTimePolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::ReplyStartTimePolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::ReplyEndTimePolicy_tie<T>::ReplyEndTimePolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyEndTimePolicy_tie<T>::ReplyEndTimePolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyEndTimePolicy_tie<T>::ReplyEndTimePolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyEndTimePolicy_tie<T>::ReplyEndTimePolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyEndTimePolicy_tie<T>::~ReplyEndTimePolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::ReplyEndTimePolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyEndTimePolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyEndTimePolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::ReplyEndTimePolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyEndTimePolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
TimeBase::UtcT POA_Messaging::ReplyEndTimePolicy_tie<T>::end_time  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->end_time (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::ReplyEndTimePolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::ReplyEndTimePolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::ReplyEndTimePolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::RelativeRequestTimeoutPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::RelativeRequestTimeoutPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::RelativeRequestTimeoutPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::RelativeRequestTimeoutPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::~RelativeRequestTimeoutPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
TimeBase::TimeT POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::relative_expiry  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->relative_expiry (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RelativeRequestTimeoutPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::RelativeRoundtripTimeoutPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::RelativeRoundtripTimeoutPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::RelativeRoundtripTimeoutPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::RelativeRoundtripTimeoutPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::~RelativeRoundtripTimeoutPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
TimeBase::TimeT POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::relative_expiry  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->relative_expiry (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RelativeRoundtripTimeoutPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::RoutingPolicy_tie<T>::RoutingPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RoutingPolicy_tie<T>::RoutingPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::RoutingPolicy_tie<T>::RoutingPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RoutingPolicy_tie<T>::RoutingPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::RoutingPolicy_tie<T>::~RoutingPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::RoutingPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::RoutingPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::RoutingPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::RoutingPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::RoutingPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
Messaging::RoutingTypeRange POA_Messaging::RoutingPolicy_tie<T>::routing_range  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->routing_range (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::RoutingPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::RoutingPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::RoutingPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::MaxHopsPolicy_tie<T>::MaxHopsPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::MaxHopsPolicy_tie<T>::MaxHopsPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::MaxHopsPolicy_tie<T>::MaxHopsPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::MaxHopsPolicy_tie<T>::MaxHopsPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::MaxHopsPolicy_tie<T>::~MaxHopsPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::MaxHopsPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::MaxHopsPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::MaxHopsPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::MaxHopsPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::MaxHopsPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
CORBA::UShort POA_Messaging::MaxHopsPolicy_tie<T>::max_hops  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->max_hops (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::MaxHopsPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::MaxHopsPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::MaxHopsPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::QueueOrderPolicy_tie<T>::QueueOrderPolicy_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::QueueOrderPolicy_tie<T>::QueueOrderPolicy_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::QueueOrderPolicy_tie<T>::QueueOrderPolicy_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::QueueOrderPolicy_tie<T>::QueueOrderPolicy_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::QueueOrderPolicy_tie<T>::~QueueOrderPolicy_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::QueueOrderPolicy_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::QueueOrderPolicy_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::QueueOrderPolicy_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::QueueOrderPolicy_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::QueueOrderPolicy_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
Messaging::Ordering POA_Messaging::QueueOrderPolicy_tie<T>::allowed_orders  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->allowed_orders (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PolicyType POA_Messaging::QueueOrderPolicy_tie<T>::policy_type  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->policy_type (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Policy_ptr POA_Messaging::QueueOrderPolicy_tie<T>::copy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->copy (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::QueueOrderPolicy_tie<T>::destroy  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->destroy (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined(TAO_POLLER)
#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::ReplyHandler_tie<T>::ReplyHandler_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyHandler_tie<T>::ReplyHandler_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyHandler_tie<T>::ReplyHandler_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyHandler_tie<T>::ReplyHandler_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::ReplyHandler_tie<T>::~ReplyHandler_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::ReplyHandler_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyHandler_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyHandler_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::ReplyHandler_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::ReplyHandler_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)
template <class T> ACE_INLINE
POA_Messaging::Poller_tie<T>::Poller_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::Poller_tie<T>::Poller_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Messaging::Poller_tie<T>::Poller_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::Poller_tie<T>::Poller_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Messaging::Poller_tie<T>::~Poller_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Messaging::Poller_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Messaging::Poller_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Messaging::Poller_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Messaging::Poller_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Messaging::Poller_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE
CORBA::Object_ptr POA_Messaging::Poller_tie<T>::operation_target  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->operation_target (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_Messaging::Poller_tie<T>::operation_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->operation_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
Messaging::ReplyHandler_ptr POA_Messaging::Poller_tie<T>::associated_handler  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->associated_handler (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
void POA_Messaging::Poller_tie<T>::associated_handler  (
    Messaging::ReplyHandler_ptr associated_handler,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  this->ptr_->associated_handler (
    associated_handler,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_Messaging::Poller_tie<T>::is_from_poller  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->is_from_poller (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Object_ptr POA_Messaging::Poller_tie<T>::target  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->target (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
char * POA_Messaging::Poller_tie<T>::op_name  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->op_name (
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_Messaging::Poller_tie<T>::is_ready  (
    CORBA::ULong timeout,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->is_ready (
    timeout,
    ACE_TRY_ENV
  );
}

template <class T> ACE_INLINE
CORBA::PollableSet_ptr POA_Messaging::Poller_tie<T>::create_pollable_set  (
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return this->ptr_->create_pollable_set (
    ACE_TRY_ENV
  );
}

#endif /* ACE_HAS_USING_KEYWORD */
#endif /* TAO_POLLER */
