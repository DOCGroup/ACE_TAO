// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:314


#include "IOPC.h"
#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */



#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IOPC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ProfileId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x50726f66), 
  ACE_NTOHL (0x696c6549), 
  ACE_NTOHL (0x643a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
    10,
  ACE_NTOHL (0x50726f66), 
  ACE_NTOHL (0x696c6549), 
  ACE_NTOHL (0x64000000),  // name = ProfileId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ProfileId (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ProfileId),
    (char *) &_oc_IOP_ProfileId,
    0,
    sizeof (IOP::ProfileId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ProfileId,
    &_tc_TAO_tc_IOP_ProfileId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedProfile[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x65645072), 
  ACE_NTOHL (0x6f66696c), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/TaggedProfile:1.0
    14,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x65645072), 
  ACE_NTOHL (0x6f66696c), 
  ACE_NTOHL (0x65000000),  // name = TaggedProfile
  2, // member count
    4,
  ACE_NTOHL (0x74616700),  // name = tag
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x50726f66), 
    ACE_NTOHL (0x696c6549), 
    ACE_NTOHL (0x643a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
        10,
    ACE_NTOHL (0x50726f66), 
    ACE_NTOHL (0x696c6549), 
    ACE_NTOHL (0x64000000),  // name = ProfileId
        CORBA::tk_ulong,


  13,
  ACE_NTOHL (0x70726f66), 
  ACE_NTOHL (0x696c655f), 
  ACE_NTOHL (0x64617461), 
  ACE_NTOHL (0x0),  // name = profile_data
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedProfile (
    CORBA::tk_struct,
    sizeof (_oc_IOP_TaggedProfile),
    (char *) &_oc_IOP_TaggedProfile,
    0,
    sizeof (IOP::TaggedProfile)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedProfile,
    &_tc_TAO_tc_IOP_TaggedProfile
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:67

void IOP::TaggedProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  TaggedProfile *tmp = ACE_static_cast (TaggedProfile*, _tao_void_pointer);
  delete tmp;
}

#if !defined (_IOP_TAGGEDPROFILE__TAO_SEQ_OCTET_CS_)
#define _IOP_TAGGEDPROFILE__TAO_SEQ_OCTET_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::TaggedProfile::_tao_seq_Octet
// *************************************************************

IOP::TaggedProfile::_tao_seq_Octet::_tao_seq_Octet (void)
{}

IOP::TaggedProfile::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::TaggedProfile::_tao_seq_Octet::_tao_seq_Octet (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Octet *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::TaggedProfile::_tao_seq_Octet::_tao_seq_Octet (const _tao_seq_Octet &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::TaggedProfile::_tao_seq_Octet::~_tao_seq_Octet (void) // dtor
{}

void IOP::TaggedProfile::_tao_seq_Octet::_tao_any_destructor (void *_tao_void_pointer)
{
  _tao_seq_Octet *tmp = ACE_static_cast (_tao_seq_Octet*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_IOR[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  24,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x494f523a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/IOR:1.0
    4,
  ACE_NTOHL (0x494f5200),  // name = IOR
  2, // member count
    8,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x5f696400),  // name = type_id
    CORBA::tk_string, 
  0U, // string length
  9,
  ACE_NTOHL (0x70726f66), 
  ACE_NTOHL (0x696c6573), 
  ACE_NTOHL (0x0),  // name = profiles
    CORBA::tk_sequence, // typecode kind
  200, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    184, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x65645072), 
      ACE_NTOHL (0x6f66696c), 
      ACE_NTOHL (0x653a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/TaggedProfile:1.0
            14,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x65645072), 
      ACE_NTOHL (0x6f66696c), 
      ACE_NTOHL (0x65000000),  // name = TaggedProfile
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x50726f66), 
        ACE_NTOHL (0x696c6549), 
        ACE_NTOHL (0x643a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
                10,
        ACE_NTOHL (0x50726f66), 
        ACE_NTOHL (0x696c6549), 
        ACE_NTOHL (0x64000000),  // name = ProfileId
                CORBA::tk_ulong,


      13,
      ACE_NTOHL (0x70726f66), 
      ACE_NTOHL (0x696c655f), 
      ACE_NTOHL (0x64617461), 
      ACE_NTOHL (0x0),  // name = profile_data
            CORBA::tk_sequence, // typecode kind
      12, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        CORBA::tk_octet,

        0U,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_IOR (
    CORBA::tk_struct,
    sizeof (_oc_IOP_IOR),
    (char *) &_oc_IOP_IOR,
    0,
    sizeof (IOP::IOR)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_IOR,
    &_tc_TAO_tc_IOP_IOR
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:67

void IOP::IOR::_tao_any_destructor (void *_tao_void_pointer)
{
  IOR *tmp = ACE_static_cast (IOR*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_cs.cpp:101

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CS_

void
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::_allocate_buffer (CORBA::ULong length)
{
  IOP::TaggedProfile* tmp = 0;
  tmp = _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      IOP::TaggedProfile *old =
        ACE_reinterpret_cast (IOP::TaggedProfile *, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp[i] = old[i];
        }
      
      if (this->release_)
        {
          _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::freebuf (old);
        }
    }
  
  this->buffer_ = tmp;
}

void
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  IOP::TaggedProfile *tmp =
    ACE_reinterpret_cast (IOP::TaggedProfile *, this->buffer_);
  _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::freebuf (tmp);
  this->buffer_ = 0;
} 

IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::~_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile (void)
{
  this->_deallocate_buffer ();
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CS_)
#define _IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::IOR::_tao_seq_TaggedProfile
// *************************************************************

IOP::IOR::_tao_seq_TaggedProfile::_tao_seq_TaggedProfile (void)
{}

IOP::IOR::_tao_seq_TaggedProfile::_tao_seq_TaggedProfile (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedProfile>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::IOR::_tao_seq_TaggedProfile::_tao_seq_TaggedProfile (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedProfile *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedProfile>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::IOR::_tao_seq_TaggedProfile::_tao_seq_TaggedProfile (const _tao_seq_TaggedProfile &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedProfile>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::IOR::_tao_seq_TaggedProfile::~_tao_seq_TaggedProfile (void) // dtor
{}

void IOP::IOR::_tao_seq_TaggedProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  _tao_seq_TaggedProfile *tmp = ACE_static_cast (_tao_seq_TaggedProfile*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ComponentId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x7449643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
    12,
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74496400),  // name = ComponentId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ComponentId (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ComponentId),
    (char *) &_oc_IOP_ComponentId,
    0,
    sizeof (IOP::ComponentId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ComponentId,
    &_tc_TAO_tc_IOP_ComponentId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedComponent[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
    16,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7400),  // name = TaggedComponent
  2, // member count
    4,
  ACE_NTOHL (0x74616700),  // name = tag
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    32,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x7449643a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
        12,
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74496400),  // name = ComponentId
        CORBA::tk_ulong,


  15,
  ACE_NTOHL (0x636f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x745f6461), 
  ACE_NTOHL (0x74610000),  // name = component_data
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedComponent (
    CORBA::tk_struct,
    sizeof (_oc_IOP_TaggedComponent),
    (char *) &_oc_IOP_TaggedComponent,
    0,
    sizeof (IOP::TaggedComponent)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedComponent,
    &_tc_TAO_tc_IOP_TaggedComponent
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:67

void IOP::TaggedComponent::_tao_any_destructor (void *_tao_void_pointer)
{
  TaggedComponent *tmp = ACE_static_cast (TaggedComponent*, _tao_void_pointer);
  delete tmp;
}

#if !defined (_IOP_TAGGEDCOMPONENT__TAO_SEQ_OCTET_CS_)
#define _IOP_TAGGEDCOMPONENT__TAO_SEQ_OCTET_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::TaggedComponent::_tao_seq_Octet
// *************************************************************

IOP::TaggedComponent::_tao_seq_Octet::_tao_seq_Octet (void)
{}

IOP::TaggedComponent::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::TaggedComponent::_tao_seq_Octet::_tao_seq_Octet (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Octet *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::TaggedComponent::_tao_seq_Octet::_tao_seq_Octet (const _tao_seq_Octet &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::TaggedComponent::_tao_seq_Octet::~_tao_seq_Octet (void) // dtor
{}

void IOP::TaggedComponent::_tao_seq_Octet::_tao_any_destructor (void *_tao_void_pointer)
{
  _tao_seq_Octet *tmp = ACE_static_cast (_tao_seq_Octet*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_cs.cpp:101

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CS_

void
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::_allocate_buffer (CORBA::ULong length)
{
  IOP::TaggedComponent* tmp = 0;
  tmp = _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      IOP::TaggedComponent *old =
        ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp[i] = old[i];
        }
      
      if (this->release_)
        {
          _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::freebuf (old);
        }
    }
  
  this->buffer_ = tmp;
}

void
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  IOP::TaggedComponent *tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
  _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::freebuf (tmp);
  this->buffer_ = 0;
} 

IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::~_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile (void)
{
  this->_deallocate_buffer ();
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_MULTIPLECOMPONENTPROFILE_CS_)
#define _IOP_MULTIPLECOMPONENTPROFILE_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::MultipleComponentProfile
// *************************************************************

IOP::MultipleComponentProfile::MultipleComponentProfile (void)
{}

IOP::MultipleComponentProfile::MultipleComponentProfile (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::MultipleComponentProfile::MultipleComponentProfile (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::MultipleComponentProfile::MultipleComponentProfile (const MultipleComponentProfile &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::MultipleComponentProfile::~MultipleComponentProfile (void) // dtor
{}

void IOP::MultipleComponentProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  MultipleComponentProfile *tmp = ACE_static_cast (MultipleComponentProfile*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_MultipleComponentProfile[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x4d756c74), 
  ACE_NTOHL (0x69706c65), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x7450726f), 
  ACE_NTOHL (0x66696c65), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/MultipleComponentProfile:1.0
    25,
  ACE_NTOHL (0x4d756c74), 
  ACE_NTOHL (0x69706c65), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x7450726f), 
  ACE_NTOHL (0x66696c65), 
  ACE_NTOHL (0x0),  // name = MultipleComponentProfile
    CORBA::tk_sequence, // typecode kind
  200, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    184, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      36,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e743a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
            16,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7400),  // name = TaggedComponent
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x7449643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
                12,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74496400),  // name = ComponentId
                CORBA::tk_ulong,


      15,
      ACE_NTOHL (0x636f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x745f6461), 
      ACE_NTOHL (0x74610000),  // name = component_data
            CORBA::tk_sequence, // typecode kind
      12, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        CORBA::tk_octet,

        0U,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_MultipleComponentProfile (
    CORBA::tk_alias,
    sizeof (_oc_IOP_MultipleComponentProfile),
    (char *) &_oc_IOP_MultipleComponentProfile,
    0,
    sizeof (IOP::MultipleComponentProfile)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_MultipleComponentProfile,
    &_tc_TAO_tc_IOP_MultipleComponentProfile
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_cs.cpp:101

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CS_

void
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::_allocate_buffer (CORBA::ULong length)
{
  IOP::TaggedComponent* tmp = 0;
  tmp = _TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      IOP::TaggedComponent *old =
        ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp[i] = old[i];
        }
      
      if (this->release_)
        {
          _TAO_Unbounded_Sequence_IOP_TaggedComponentList::freebuf (old);
        }
    }
  
  this->buffer_ = tmp;
}

void
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  IOP::TaggedComponent *tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
  _TAO_Unbounded_Sequence_IOP_TaggedComponentList::freebuf (tmp);
  this->buffer_ = 0;
} 

IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::~_TAO_Unbounded_Sequence_IOP_TaggedComponentList (void)
{
  this->_deallocate_buffer ();
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_TAGGEDCOMPONENTLIST_CS_)
#define _IOP_TAGGEDCOMPONENTLIST_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::TaggedComponentList
// *************************************************************

IOP::TaggedComponentList::TaggedComponentList (void)
{}

IOP::TaggedComponentList::TaggedComponentList (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_TaggedComponentList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::TaggedComponentList::TaggedComponentList (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_TaggedComponentList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::TaggedComponentList::TaggedComponentList (const TaggedComponentList &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_TaggedComponentList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::TaggedComponentList::~TaggedComponentList (void) // dtor
{}

void IOP::TaggedComponentList::_tao_any_destructor (void *_tao_void_pointer)
{
  TaggedComponentList *tmp = ACE_static_cast (TaggedComponentList*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedComponentList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e744c), 
  ACE_NTOHL (0x6973743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponentList:1.0
    20,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e744c), 
  ACE_NTOHL (0x69737400),  // name = TaggedComponentList
    CORBA::tk_sequence, // typecode kind
  200, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    184, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      36,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e743a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
            16,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7400),  // name = TaggedComponent
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x7449643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
                12,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74496400),  // name = ComponentId
                CORBA::tk_ulong,


      15,
      ACE_NTOHL (0x636f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x745f6461), 
      ACE_NTOHL (0x74610000),  // name = component_data
            CORBA::tk_sequence, // typecode kind
      12, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        CORBA::tk_octet,

        0U,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedComponentList (
    CORBA::tk_alias,
    sizeof (_oc_IOP_TaggedComponentList),
    (char *) &_oc_IOP_TaggedComponentList,
    0,
    sizeof (IOP::TaggedComponentList)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedComponentList,
    &_tc_TAO_tc_IOP_TaggedComponentList
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_cs.cpp:101

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CS_

void
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::_allocate_buffer (CORBA::ULong length)
{
  IOP::TaggedComponent* tmp = 0;
  tmp = _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      IOP::TaggedComponent *old =
        ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp[i] = old[i];
        }
      
      if (this->release_)
        {
          _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::freebuf (old);
        }
    }
  
  this->buffer_ = tmp;
}

void
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  IOP::TaggedComponent *tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
  _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::freebuf (tmp);
  this->buffer_ = 0;
} 

IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::~_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq (void)
{
  this->_deallocate_buffer ();
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_TAGGEDCOMPONENTSEQ_CS_)
#define _IOP_TAGGEDCOMPONENTSEQ_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::TaggedComponentSeq
// *************************************************************

IOP::TaggedComponentSeq::TaggedComponentSeq (void)
{}

IOP::TaggedComponentSeq::TaggedComponentSeq (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::TaggedComponentSeq::TaggedComponentSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::TaggedComponentSeq::TaggedComponentSeq (const TaggedComponentSeq &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::TaggedComponent>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::TaggedComponentSeq::~TaggedComponentSeq (void) // dtor
{}

void IOP::TaggedComponentSeq::_tao_any_destructor (void *_tao_void_pointer)
{
  TaggedComponentSeq *tmp = ACE_static_cast (TaggedComponentSeq*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedComponentSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/TaggedComponentSeq:1.0
    19,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x65710000),  // name = TaggedComponentSeq
    CORBA::tk_sequence, // typecode kind
  200, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    184, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      36,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e743a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
            16,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7400),  // name = TaggedComponent
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x7449643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
                12,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74496400),  // name = ComponentId
                CORBA::tk_ulong,


      15,
      ACE_NTOHL (0x636f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x745f6461), 
      ACE_NTOHL (0x74610000),  // name = component_data
            CORBA::tk_sequence, // typecode kind
      12, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        CORBA::tk_octet,

        0U,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedComponentSeq (
    CORBA::tk_alias,
    sizeof (_oc_IOP_TaggedComponentSeq),
    (char *) &_oc_IOP_TaggedComponentSeq,
    0,
    sizeof (IOP::TaggedComponentSeq)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedComponentSeq,
    &_tc_TAO_tc_IOP_TaggedComponentSeq
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ServiceId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636549), 
  ACE_NTOHL (0x643a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ServiceId:1.0
    10,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636549), 
  ACE_NTOHL (0x64000000),  // name = ServiceId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ServiceId (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ServiceId),
    (char *) &_oc_IOP_ServiceId,
    0,
    sizeof (IOP::ServiceId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServiceId,
    &_tc_TAO_tc_IOP_ServiceId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ServiceContext[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/ServiceContext:1.0
    15,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78740000),  // name = ServiceContext
  2, // member count
    11,
  ACE_NTOHL (0x636f6e74), 
  ACE_NTOHL (0x6578745f), 
  ACE_NTOHL (0x69640000),  // name = context_id
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x53657276), 
    ACE_NTOHL (0x69636549), 
    ACE_NTOHL (0x643a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ServiceId:1.0
        10,
    ACE_NTOHL (0x53657276), 
    ACE_NTOHL (0x69636549), 
    ACE_NTOHL (0x64000000),  // name = ServiceId
        CORBA::tk_ulong,


  13,
  ACE_NTOHL (0x636f6e74), 
  ACE_NTOHL (0x6578745f), 
  ACE_NTOHL (0x64617461), 
  ACE_NTOHL (0x0),  // name = context_data
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ServiceContext (
    CORBA::tk_struct,
    sizeof (_oc_IOP_ServiceContext),
    (char *) &_oc_IOP_ServiceContext,
    0,
    sizeof (IOP::ServiceContext)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServiceContext,
    &_tc_TAO_tc_IOP_ServiceContext
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:67

void IOP::ServiceContext::_tao_any_destructor (void *_tao_void_pointer)
{
  ServiceContext *tmp = ACE_static_cast (ServiceContext*, _tao_void_pointer);
  delete tmp;
}

#if !defined (_IOP_SERVICECONTEXT__TAO_SEQ_OCTET_CS_)
#define _IOP_SERVICECONTEXT__TAO_SEQ_OCTET_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::ServiceContext::_tao_seq_Octet
// *************************************************************

IOP::ServiceContext::_tao_seq_Octet::_tao_seq_Octet (void)
{}

IOP::ServiceContext::_tao_seq_Octet::_tao_seq_Octet (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::ServiceContext::_tao_seq_Octet::_tao_seq_Octet (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Octet *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::ServiceContext::_tao_seq_Octet::_tao_seq_Octet (const _tao_seq_Octet &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::ServiceContext::_tao_seq_Octet::~_tao_seq_Octet (void) // dtor
{}

void IOP::ServiceContext::_tao_seq_Octet::_tao_any_destructor (void *_tao_void_pointer)
{
  _tao_seq_Octet *tmp = ACE_static_cast (_tao_seq_Octet*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_cs.cpp:101

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CS_

void
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::_allocate_buffer (CORBA::ULong length)
{
  IOP::ServiceContext* tmp = 0;
  tmp = _TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      IOP::ServiceContext *old =
        ACE_reinterpret_cast (IOP::ServiceContext *, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp[i] = old[i];
        }
      
      if (this->release_)
        {
          _TAO_Unbounded_Sequence_IOP_ServiceContextList::freebuf (old);
        }
    }
  
  this->buffer_ = tmp;
}

void
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  IOP::ServiceContext *tmp =
    ACE_reinterpret_cast (IOP::ServiceContext *, this->buffer_);
  _TAO_Unbounded_Sequence_IOP_ServiceContextList::freebuf (tmp);
  this->buffer_ = 0;
} 

IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::~_TAO_Unbounded_Sequence_IOP_ServiceContextList (void)
{
  this->_deallocate_buffer ();
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_SERVICECONTEXTLIST_CS_)
#define _IOP_SERVICECONTEXTLIST_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// IOP::ServiceContextList
// *************************************************************

IOP::ServiceContextList::ServiceContextList (void)
{}

IOP::ServiceContextList::ServiceContextList (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_ServiceContextList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::ServiceContext>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

IOP::ServiceContextList::ServiceContextList (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::ServiceContext *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_ServiceContextList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::ServiceContext>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

IOP::ServiceContextList::ServiceContextList (const ServiceContextList &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_IOP_ServiceContextList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<IOP::ServiceContext>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

IOP::ServiceContextList::~ServiceContextList (void) // dtor
{}

void IOP::ServiceContextList::_tao_any_destructor (void *_tao_void_pointer)
{
  ServiceContextList *tmp = ACE_static_cast (ServiceContextList*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ServiceContextList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78744c69), 
  ACE_NTOHL (0x73743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/ServiceContextList:1.0
    19,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78744c69), 
  ACE_NTOHL (0x73740000),  // name = ServiceContextList
    CORBA::tk_sequence, // typecode kind
  208, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    192, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x53657276), 
      ACE_NTOHL (0x69636543), 
      ACE_NTOHL (0x6f6e7465), 
      ACE_NTOHL (0x78743a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/ServiceContext:1.0
            15,
      ACE_NTOHL (0x53657276), 
      ACE_NTOHL (0x69636543), 
      ACE_NTOHL (0x6f6e7465), 
      ACE_NTOHL (0x78740000),  // name = ServiceContext
      2, // member count
            11,
      ACE_NTOHL (0x636f6e74), 
      ACE_NTOHL (0x6578745f), 
      ACE_NTOHL (0x69640000),  // name = context_id
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x53657276), 
        ACE_NTOHL (0x69636549), 
        ACE_NTOHL (0x643a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ServiceId:1.0
                10,
        ACE_NTOHL (0x53657276), 
        ACE_NTOHL (0x69636549), 
        ACE_NTOHL (0x64000000),  // name = ServiceId
                CORBA::tk_ulong,


      13,
      ACE_NTOHL (0x636f6e74), 
      ACE_NTOHL (0x6578745f), 
      ACE_NTOHL (0x64617461), 
      ACE_NTOHL (0x0),  // name = context_data
            CORBA::tk_sequence, // typecode kind
      12, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        CORBA::tk_octet,

        0U,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ServiceContextList (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ServiceContextList),
    (char *) &_oc_IOP_ServiceContextList,
    0,
    sizeof (IOP::ServiceContextList)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServiceContextList,
    &_tc_TAO_tc_IOP_ServiceContextList
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int IOP::Codec::_tao_class_id = 0;

IOP::Codec_ptr
tao_IOP_Codec_duplicate (
    IOP::Codec_ptr p
  )
{
  return IOP::Codec::_duplicate (p);
}

void
tao_IOP_Codec_release (
    IOP::Codec_ptr p
  )
{
  CORBA::release (p);
}

IOP::Codec_ptr
tao_IOP_Codec_nil (
    void
  )
{
  return IOP::Codec::_nil ();
}

IOP::Codec_ptr
tao_IOP_Codec_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return IOP::Codec::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_IOP_Codec_upcast (
    void *src
  )
{
  IOP::Codec **tmp =
    ACE_static_cast (IOP::Codec **, src);
  return *tmp;
}

CORBA::Boolean
tao_IOP_Codec_marshal (
    IOP::Codec_ptr p,
    TAO_OutputCDR &strm
  )
{
  return p->marshal (strm);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// IOP::Codec_var
// *************************************************************

IOP::Codec_var::Codec_var (void)
  : ptr_ (Codec::_nil ())
{}

::IOP::Codec_ptr
IOP::Codec_var::ptr (void) const
{
  return this->ptr_;
}

IOP::Codec_var::Codec_var (const ::IOP::Codec_var &p)
  : TAO_Base_var (),
    ptr_ (Codec::_duplicate (p.ptr ()))
{}

IOP::Codec_var::~Codec_var (void)
{
  CORBA::release (this->ptr_);
}

IOP::Codec_var &
IOP::Codec_var::operator= (Codec_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

IOP::Codec_var &
IOP::Codec_var::operator= (const ::IOP::Codec_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::IOP::Codec::_duplicate (p.ptr ());
  }
  return *this;
}

IOP::Codec_var::operator const ::IOP::Codec_ptr &() const // cast
{
  return this->ptr_;
}

IOP::Codec_var::operator ::IOP::Codec_ptr &() // cast 
{
  return this->ptr_;
}

::IOP::Codec_ptr
IOP::Codec_var::operator-> (void) const
{
  return this->ptr_;
}

::IOP::Codec_ptr
IOP::Codec_var::in (void) const
{
  return this->ptr_;
}

::IOP::Codec_ptr &
IOP::Codec_var::inout (void)
{
  return this->ptr_;
}

::IOP::Codec_ptr &
IOP::Codec_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::IOP::Codec::_nil ();
  return this->ptr_;
}

::IOP::Codec_ptr
IOP::Codec_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::IOP::Codec_ptr val = this->ptr_;
  this->ptr_ = ::IOP::Codec::_nil ();
  return val;
}

::IOP::Codec_ptr
IOP::Codec_var::tao_duplicate (Codec_ptr p)
{
  return ::IOP::Codec::_duplicate (p);
}

void
IOP::Codec_var::tao_release (Codec_ptr p)
{
  CORBA::release (p);
}

::IOP::Codec_ptr
IOP::Codec_var::tao_nil (void)
{
  return ::IOP::Codec::_nil ();
}

::IOP::Codec_ptr
IOP::Codec_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::IOP::Codec::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
IOP::Codec_var::tao_upcast (void *src)
{
  Codec **tmp =
    ACE_static_cast (Codec **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// IOP::Codec_out
// *************************************************************

IOP::Codec_out::Codec_out (Codec_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::IOP::Codec::_nil ();
}

IOP::Codec_out::Codec_out (Codec_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::IOP::Codec::_nil ();
}

IOP::Codec_out::Codec_out (const ::IOP::Codec_out &p)
  : ptr_ (ACE_const_cast (Codec_out &, p).ptr_)
{}

::IOP::Codec_out &
IOP::Codec_out::operator= (const ::IOP::Codec_out &p)
{
  this->ptr_ = ACE_const_cast (Codec_out&, p).ptr_;
  return *this;
}

IOP::Codec_out &
IOP::Codec_out::operator= (const ::IOP::Codec_var &p)
{
  this->ptr_ = ::IOP::Codec::_duplicate (p.ptr ());
  return *this;
}

IOP::Codec_out &
IOP::Codec_out::operator= (Codec_ptr p)
{
  this->ptr_ = p;
  return *this;
}

IOP::Codec_out::operator ::IOP::Codec_ptr &() // cast
{
  return this->ptr_;
}

::IOP::Codec_ptr &
IOP::Codec_out::ptr (void)
{
  return this->ptr_;
}

::IOP::Codec_ptr
IOP::Codec_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:235

IOP::Codec::Codec (void)
{}

IOP::Codec::~Codec (void)
{}

void 
IOP::Codec::_tao_any_destructor (void *_tao_void_pointer)
{
  Codec *tmp = ACE_static_cast (Codec *, _tao_void_pointer);
  CORBA::release (tmp);
}

IOP::Codec_ptr
IOP::Codec::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return Codec::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

IOP::Codec_ptr 
IOP::Codec::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Codec::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          Codec_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &Codec::_tao_class_id
                )
            )
        );
}

IOP::Codec_ptr
IOP::Codec::_duplicate (Codec_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *IOP::Codec::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::IOP, Codec)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* IOP::Codec::_interface_repository_id (void) const
{
  return "IDL:omg.org/IOP/Codec:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

IOP::Codec::InvalidTypeForEncoding::InvalidTypeForEncoding (void)
  : CORBA::UserException (
        "IDL:omg.org/IOP/Codec/InvalidTypeForEncoding:1.0",
        "InvalidTypeForEncoding"
      )
{
}

IOP::Codec::InvalidTypeForEncoding::~InvalidTypeForEncoding (void)
{
}

IOP::Codec::InvalidTypeForEncoding::InvalidTypeForEncoding (const ::IOP::Codec::InvalidTypeForEncoding &_tao_excp)
  : CORBA::UserException (_tao_excp._rep_id (),
                          _tao_excp._name ())
{
}

IOP::Codec::InvalidTypeForEncoding&
IOP::Codec::InvalidTypeForEncoding::operator= (const ::IOP::Codec::InvalidTypeForEncoding &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void IOP::Codec::InvalidTypeForEncoding::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidTypeForEncoding *tmp = ACE_static_cast (InvalidTypeForEncoding*, _tao_void_pointer);
  delete tmp;
}

IOP::Codec::InvalidTypeForEncoding *
IOP::Codec::InvalidTypeForEncoding::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/IOP/Codec/InvalidTypeForEncoding:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidTypeForEncoding *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *IOP::Codec::InvalidTypeForEncoding::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::IOP::Codec::InvalidTypeForEncoding, 0);
  return retval;
}

CORBA::Exception *
IOP::Codec::InvalidTypeForEncoding::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::IOP::Codec::InvalidTypeForEncoding (*this),
      0
    );
  return result;
}

void IOP::Codec::InvalidTypeForEncoding::_raise (void)
{
  TAO_RAISE (*this);
}

void IOP::Codec::InvalidTypeForEncoding::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void IOP::Codec::InvalidTypeForEncoding::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr IOP::Codec::InvalidTypeForEncoding::_type (void) const
{
  return ::IOP::Codec::_tc_InvalidTypeForEncoding;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_Codec_InvalidTypeForEncoding[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  49,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x632f496e), 
  ACE_NTOHL (0x76616c69), 
  ACE_NTOHL (0x64547970), 
  ACE_NTOHL (0x65466f72), 
  ACE_NTOHL (0x456e636f), 
  ACE_NTOHL (0x64696e67), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/Codec/InvalidTypeForEncoding:1.0
    23,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c696454), 
  ACE_NTOHL (0x79706546), 
  ACE_NTOHL (0x6f72456e), 
  ACE_NTOHL (0x636f6469), 
  ACE_NTOHL (0x6e670000),  // name = InvalidTypeForEncoding
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_IOP_Codec_InvalidTypeForEncoding (
    CORBA::tk_except,
    sizeof (_oc_IOP_Codec_InvalidTypeForEncoding),
    (char *) &_oc_IOP_Codec_InvalidTypeForEncoding,
    0,
    sizeof (IOP::Codec::InvalidTypeForEncoding)
  );

::CORBA::TypeCode_ptr IOP::Codec::_tc_InvalidTypeForEncoding =
  &_tc_TAO_tc_IOP_Codec_InvalidTypeForEncoding;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

IOP::Codec::FormatMismatch::FormatMismatch (void)
  : CORBA::UserException (
        "IDL:omg.org/IOP/Codec/FormatMismatch:1.0",
        "FormatMismatch"
      )
{
}

IOP::Codec::FormatMismatch::~FormatMismatch (void)
{
}

IOP::Codec::FormatMismatch::FormatMismatch (const ::IOP::Codec::FormatMismatch &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

IOP::Codec::FormatMismatch&
IOP::Codec::FormatMismatch::operator= (const ::IOP::Codec::FormatMismatch &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void IOP::Codec::FormatMismatch::_tao_any_destructor (void *_tao_void_pointer)
{
  FormatMismatch *tmp = ACE_static_cast (FormatMismatch*, _tao_void_pointer);
  delete tmp;
}

IOP::Codec::FormatMismatch *
IOP::Codec::FormatMismatch::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/IOP/Codec/FormatMismatch:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (FormatMismatch *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *IOP::Codec::FormatMismatch::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::IOP::Codec::FormatMismatch, 0);
  return retval;
}

CORBA::Exception *
IOP::Codec::FormatMismatch::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::IOP::Codec::FormatMismatch (*this),
      0
    );
  return result;
}

void IOP::Codec::FormatMismatch::_raise (void)
{
  TAO_RAISE (*this);
}

void IOP::Codec::FormatMismatch::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void IOP::Codec::FormatMismatch::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr IOP::Codec::FormatMismatch::_type (void) const
{
  return ::IOP::Codec::_tc_FormatMismatch;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_Codec_FormatMismatch[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x632f466f), 
  ACE_NTOHL (0x726d6174), 
  ACE_NTOHL (0x4d69736d), 
  ACE_NTOHL (0x61746368), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/Codec/FormatMismatch:1.0
    15,
  ACE_NTOHL (0x466f726d), 
  ACE_NTOHL (0x61744d69), 
  ACE_NTOHL (0x736d6174), 
  ACE_NTOHL (0x63680000),  // name = FormatMismatch
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_IOP_Codec_FormatMismatch (
    CORBA::tk_except,
    sizeof (_oc_IOP_Codec_FormatMismatch),
    (char *) &_oc_IOP_Codec_FormatMismatch,
    0,
    sizeof (IOP::Codec::FormatMismatch)
  );

::CORBA::TypeCode_ptr IOP::Codec::_tc_FormatMismatch =
  &_tc_TAO_tc_IOP_Codec_FormatMismatch;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

IOP::Codec::TypeMismatch::TypeMismatch (void)
  : CORBA::UserException (
        "IDL:omg.org/IOP/Codec/TypeMismatch:1.0",
        "TypeMismatch"
      )
{
}

IOP::Codec::TypeMismatch::~TypeMismatch (void)
{
}

IOP::Codec::TypeMismatch::TypeMismatch (const ::IOP::Codec::TypeMismatch &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

IOP::Codec::TypeMismatch&
IOP::Codec::TypeMismatch::operator= (const ::IOP::Codec::TypeMismatch &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void IOP::Codec::TypeMismatch::_tao_any_destructor (void *_tao_void_pointer)
{
  TypeMismatch *tmp = ACE_static_cast (TypeMismatch*, _tao_void_pointer);
  delete tmp;
}

IOP::Codec::TypeMismatch *
IOP::Codec::TypeMismatch::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/IOP/Codec/TypeMismatch:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (TypeMismatch *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *IOP::Codec::TypeMismatch::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::IOP::Codec::TypeMismatch, 0);
  return retval;
}

CORBA::Exception *
IOP::Codec::TypeMismatch::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::IOP::Codec::TypeMismatch (*this),
      0
    );
  return result;
}

void IOP::Codec::TypeMismatch::_raise (void)
{
  TAO_RAISE (*this);
}

void IOP::Codec::TypeMismatch::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void IOP::Codec::TypeMismatch::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr IOP::Codec::TypeMismatch::_type (void) const
{
  return ::IOP::Codec::_tc_TypeMismatch;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_Codec_TypeMismatch[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x632f5479), 
  ACE_NTOHL (0x70654d69), 
  ACE_NTOHL (0x736d6174), 
  ACE_NTOHL (0x63683a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/Codec/TypeMismatch:1.0
    13,
  ACE_NTOHL (0x54797065), 
  ACE_NTOHL (0x4d69736d), 
  ACE_NTOHL (0x61746368), 
  ACE_NTOHL (0x0),  // name = TypeMismatch
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_IOP_Codec_TypeMismatch (
    CORBA::tk_except,
    sizeof (_oc_IOP_Codec_TypeMismatch),
    (char *) &_oc_IOP_Codec_TypeMismatch,
    0,
    sizeof (IOP::Codec::TypeMismatch)
  );

::CORBA::TypeCode_ptr IOP::Codec::_tc_TypeMismatch =
  &_tc_TAO_tc_IOP_Codec_TypeMismatch;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_Codec[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x633a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/Codec:1.0
    6,
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x63000000),  // name = Codec
  };

static CORBA::TypeCode _tc_TAO_tc_IOP_Codec (
    CORBA::tk_objref,
    sizeof (_oc_IOP_Codec),
    (char *) &_oc_IOP_Codec,
    0,
    sizeof (IOP::Codec)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Codec,
    &_tc_TAO_tc_IOP_Codec
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_EncodingFormat[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x456e636f), 
  ACE_NTOHL (0x64696e67), 
  ACE_NTOHL (0x466f726d), 
  ACE_NTOHL (0x61743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/EncodingFormat:1.0
    15,
  ACE_NTOHL (0x456e636f), 
  ACE_NTOHL (0x64696e67), 
  ACE_NTOHL (0x466f726d), 
  ACE_NTOHL (0x61740000),  // name = EncodingFormat
    CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_EncodingFormat (
    CORBA::tk_alias,
    sizeof (_oc_IOP_EncodingFormat),
    (char *) &_oc_IOP_EncodingFormat,
    0,
    sizeof (IOP::EncodingFormat)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_EncodingFormat,
    &_tc_TAO_tc_IOP_EncodingFormat
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_Encoding[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  29,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x456e636f), 
  ACE_NTOHL (0x64696e67), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/Encoding:1.0
    9,
  ACE_NTOHL (0x456e636f), 
  ACE_NTOHL (0x64696e67), 
  ACE_NTOHL (0x0),  // name = Encoding
  3, // member count
    7,
  ACE_NTOHL (0x666f726d), 
  ACE_NTOHL (0x61740000),  // name = format
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x456e636f), 
    ACE_NTOHL (0x64696e67), 
    ACE_NTOHL (0x466f726d), 
    ACE_NTOHL (0x61743a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/EncodingFormat:1.0
        15,
    ACE_NTOHL (0x456e636f), 
    ACE_NTOHL (0x64696e67), 
    ACE_NTOHL (0x466f726d), 
    ACE_NTOHL (0x61740000),  // name = EncodingFormat
        CORBA::tk_short,


  14,
  ACE_NTOHL (0x6d616a6f), 
  ACE_NTOHL (0x725f7665), 
  ACE_NTOHL (0x7273696f), 
  ACE_NTOHL (0x6e000000),  // name = major_version
    CORBA::tk_octet,

  14,
  ACE_NTOHL (0x6d696e6f), 
  ACE_NTOHL (0x725f7665), 
  ACE_NTOHL (0x7273696f), 
  ACE_NTOHL (0x6e000000),  // name = minor_version
    CORBA::tk_octet,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_Encoding (
    CORBA::tk_struct,
    sizeof (_oc_IOP_Encoding),
    (char *) &_oc_IOP_Encoding,
    0,
    sizeof (IOP::Encoding)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Encoding,
    &_tc_TAO_tc_IOP_Encoding
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:67

void IOP::Encoding::_tao_any_destructor (void *_tao_void_pointer)
{
  Encoding *tmp = ACE_static_cast (Encoding*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int IOP::CodecFactory::_tao_class_id = 0;

IOP::CodecFactory_ptr
tao_IOP_CodecFactory_duplicate (
    IOP::CodecFactory_ptr p
  )
{
  return IOP::CodecFactory::_duplicate (p);
}

void
tao_IOP_CodecFactory_release (
    IOP::CodecFactory_ptr p
  )
{
  CORBA::release (p);
}

IOP::CodecFactory_ptr
tao_IOP_CodecFactory_nil (
    void
  )
{
  return IOP::CodecFactory::_nil ();
}

IOP::CodecFactory_ptr
tao_IOP_CodecFactory_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return IOP::CodecFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_IOP_CodecFactory_upcast (
    void *src
  )
{
  IOP::CodecFactory **tmp =
    ACE_static_cast (IOP::CodecFactory **, src);
  return *tmp;
}

CORBA::Boolean
tao_IOP_CodecFactory_marshal (
    IOP::CodecFactory_ptr p,
    TAO_OutputCDR &strm
  )
{
  return p->marshal (strm);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// IOP::CodecFactory_var
// *************************************************************

IOP::CodecFactory_var::CodecFactory_var (void)
  : ptr_ (CodecFactory::_nil ())
{}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::ptr (void) const
{
  return this->ptr_;
}

IOP::CodecFactory_var::CodecFactory_var (const ::IOP::CodecFactory_var &p)
  : TAO_Base_var (),
    ptr_ (CodecFactory::_duplicate (p.ptr ()))
{}

IOP::CodecFactory_var::~CodecFactory_var (void)
{
  CORBA::release (this->ptr_);
}

IOP::CodecFactory_var &
IOP::CodecFactory_var::operator= (CodecFactory_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

IOP::CodecFactory_var &
IOP::CodecFactory_var::operator= (const ::IOP::CodecFactory_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::IOP::CodecFactory::_duplicate (p.ptr ());
  }
  return *this;
}

IOP::CodecFactory_var::operator const ::IOP::CodecFactory_ptr &() const // cast
{
  return this->ptr_;
}

IOP::CodecFactory_var::operator ::IOP::CodecFactory_ptr &() // cast 
{
  return this->ptr_;
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::operator-> (void) const
{
  return this->ptr_;
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::in (void) const
{
  return this->ptr_;
}

::IOP::CodecFactory_ptr &
IOP::CodecFactory_var::inout (void)
{
  return this->ptr_;
}

::IOP::CodecFactory_ptr &
IOP::CodecFactory_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::IOP::CodecFactory::_nil ();
  return this->ptr_;
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::IOP::CodecFactory_ptr val = this->ptr_;
  this->ptr_ = ::IOP::CodecFactory::_nil ();
  return val;
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::tao_duplicate (CodecFactory_ptr p)
{
  return ::IOP::CodecFactory::_duplicate (p);
}

void
IOP::CodecFactory_var::tao_release (CodecFactory_ptr p)
{
  CORBA::release (p);
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::tao_nil (void)
{
  return ::IOP::CodecFactory::_nil ();
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::IOP::CodecFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
IOP::CodecFactory_var::tao_upcast (void *src)
{
  CodecFactory **tmp =
    ACE_static_cast (CodecFactory **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// IOP::CodecFactory_out
// *************************************************************

IOP::CodecFactory_out::CodecFactory_out (CodecFactory_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::IOP::CodecFactory::_nil ();
}

IOP::CodecFactory_out::CodecFactory_out (CodecFactory_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::IOP::CodecFactory::_nil ();
}

IOP::CodecFactory_out::CodecFactory_out (const ::IOP::CodecFactory_out &p)
  : ptr_ (ACE_const_cast (CodecFactory_out &, p).ptr_)
{}

::IOP::CodecFactory_out &
IOP::CodecFactory_out::operator= (const ::IOP::CodecFactory_out &p)
{
  this->ptr_ = ACE_const_cast (CodecFactory_out&, p).ptr_;
  return *this;
}

IOP::CodecFactory_out &
IOP::CodecFactory_out::operator= (const ::IOP::CodecFactory_var &p)
{
  this->ptr_ = ::IOP::CodecFactory::_duplicate (p.ptr ());
  return *this;
}

IOP::CodecFactory_out &
IOP::CodecFactory_out::operator= (CodecFactory_ptr p)
{
  this->ptr_ = p;
  return *this;
}

IOP::CodecFactory_out::operator ::IOP::CodecFactory_ptr &() // cast
{
  return this->ptr_;
}

::IOP::CodecFactory_ptr &
IOP::CodecFactory_out::ptr (void)
{
  return this->ptr_;
}

::IOP::CodecFactory_ptr
IOP::CodecFactory_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:235

IOP::CodecFactory::CodecFactory (void)
{}

IOP::CodecFactory::~CodecFactory (void)
{}

void 
IOP::CodecFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  CodecFactory *tmp = ACE_static_cast (CodecFactory *, _tao_void_pointer);
  CORBA::release (tmp);
}

IOP::CodecFactory_ptr
IOP::CodecFactory::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CodecFactory::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

IOP::CodecFactory_ptr 
IOP::CodecFactory::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CodecFactory::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CodecFactory_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CodecFactory::_tao_class_id
                )
            )
        );
}

IOP::CodecFactory_ptr
IOP::CodecFactory::_duplicate (CodecFactory_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *IOP::CodecFactory::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::IOP, CodecFactory)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* IOP::CodecFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/IOP/CodecFactory:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

IOP::CodecFactory::UnknownEncoding::UnknownEncoding (void)
  : CORBA::UserException (
        "IDL:omg.org/IOP/CodecFactory/UnknownEncoding:1.0",
        "UnknownEncoding"
      )
{
}

IOP::CodecFactory::UnknownEncoding::~UnknownEncoding (void)
{
}

IOP::CodecFactory::UnknownEncoding::UnknownEncoding (const ::IOP::CodecFactory::UnknownEncoding &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

IOP::CodecFactory::UnknownEncoding&
IOP::CodecFactory::UnknownEncoding::operator= (const ::IOP::CodecFactory::UnknownEncoding &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void IOP::CodecFactory::UnknownEncoding::_tao_any_destructor (void *_tao_void_pointer)
{
  UnknownEncoding *tmp = ACE_static_cast (UnknownEncoding*, _tao_void_pointer);
  delete tmp;
}

IOP::CodecFactory::UnknownEncoding *
IOP::CodecFactory::UnknownEncoding::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/IOP/CodecFactory/UnknownEncoding:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (UnknownEncoding *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *IOP::CodecFactory::UnknownEncoding::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::IOP::CodecFactory::UnknownEncoding, 0);
  return retval;
}

CORBA::Exception *
IOP::CodecFactory::UnknownEncoding::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::IOP::CodecFactory::UnknownEncoding (*this),
      0
    );
  return result;
}

void IOP::CodecFactory::UnknownEncoding::_raise (void)
{
  TAO_RAISE (*this);
}

void IOP::CodecFactory::UnknownEncoding::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void IOP::CodecFactory::UnknownEncoding::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr IOP::CodecFactory::UnknownEncoding::_type (void) const
{
  return ::IOP::CodecFactory::_tc_UnknownEncoding;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_CodecFactory_UnknownEncoding[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  49,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x63466163), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x2f556e6b), 
  ACE_NTOHL (0x6e6f776e), 
  ACE_NTOHL (0x456e636f), 
  ACE_NTOHL (0x64696e67), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/CodecFactory/UnknownEncoding:1.0
    16,
  ACE_NTOHL (0x556e6b6e), 
  ACE_NTOHL (0x6f776e45), 
  ACE_NTOHL (0x6e636f64), 
  ACE_NTOHL (0x696e6700),  // name = UnknownEncoding
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_IOP_CodecFactory_UnknownEncoding (
    CORBA::tk_except,
    sizeof (_oc_IOP_CodecFactory_UnknownEncoding),
    (char *) &_oc_IOP_CodecFactory_UnknownEncoding,
    0,
    sizeof (IOP::CodecFactory::UnknownEncoding)
  );

::CORBA::TypeCode_ptr IOP::CodecFactory::_tc_UnknownEncoding =
  &_tc_TAO_tc_IOP_CodecFactory_UnknownEncoding;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_CodecFactory[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x63466163), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/CodecFactory:1.0
    13,
  ACE_NTOHL (0x436f6465), 
  ACE_NTOHL (0x63466163), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x0),  // name = CodecFactory
  };

static CORBA::TypeCode _tc_TAO_tc_IOP_CodecFactory (
    CORBA::tk_objref,
    sizeof (_oc_IOP_CodecFactory),
    (char *) &_oc_IOP_CodecFactory,
    0,
    sizeof (IOP::CodecFactory)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_CodecFactory,
    &_tc_TAO_tc_IOP_CodecFactory
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedProfile &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedProfile>::insert_copy (
      _tao_any,
      IOP::TaggedProfile::_tao_any_destructor,
      IOP::_tc_TaggedProfile,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedProfile *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedProfile>::insert (
      _tao_any,
      IOP::TaggedProfile::_tao_any_destructor,
      IOP::_tc_TaggedProfile,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedProfile *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedProfile *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedProfile *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedProfile>::extract (
        _tao_any,
        IOP::TaggedProfile::_tao_any_destructor,
        IOP::_tc_TaggedProfile,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedProfile>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedProfile>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::IOR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::IOR>::insert_copy (
      _tao_any,
      IOP::IOR::_tao_any_destructor,
      IOP::_tc_IOR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::IOR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::IOR>::insert (
      _tao_any,
      IOP::IOR::_tao_any_destructor,
      IOP::_tc_IOR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::IOR *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::IOR *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::IOR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::IOR>::extract (
        _tao_any,
        IOP::IOR::_tao_any_destructor,
        IOP::_tc_IOR,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::IOR>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::IOR>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedComponent &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponent>::insert_copy (
      _tao_any,
      IOP::TaggedComponent::_tao_any_destructor,
      IOP::_tc_TaggedComponent,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedComponent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponent>::insert (
      _tao_any,
      IOP::TaggedComponent::_tao_any_destructor,
      IOP::_tc_TaggedComponent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedComponent *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedComponent *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedComponent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedComponent>::extract (
        _tao_any,
        IOP::TaggedComponent::_tao_any_destructor,
        IOP::_tc_TaggedComponent,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedComponent>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedComponent>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::MultipleComponentProfile &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>::insert_copy (
      _tao_any,
      IOP::MultipleComponentProfile::_tao_any_destructor,
      IOP::_tc_MultipleComponentProfile,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::MultipleComponentProfile *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>::insert (
      _tao_any,
      IOP::MultipleComponentProfile::_tao_any_destructor,
      IOP::_tc_MultipleComponentProfile,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::MultipleComponentProfile *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::MultipleComponentProfile *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::MultipleComponentProfile *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>::extract (
        _tao_any,
        IOP::MultipleComponentProfile::_tao_any_destructor,
        IOP::_tc_MultipleComponentProfile,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedComponentList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>::insert_copy (
      _tao_any,
      IOP::TaggedComponentList::_tao_any_destructor,
      IOP::_tc_TaggedComponentList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedComponentList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>::insert (
      _tao_any,
      IOP::TaggedComponentList::_tao_any_destructor,
      IOP::_tc_TaggedComponentList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedComponentList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedComponentList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedComponentList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>::extract (
        _tao_any,
        IOP::TaggedComponentList::_tao_any_destructor,
        IOP::_tc_TaggedComponentList,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedComponentSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>::insert_copy (
      _tao_any,
      IOP::TaggedComponentSeq::_tao_any_destructor,
      IOP::_tc_TaggedComponentSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedComponentSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>::insert (
      _tao_any,
      IOP::TaggedComponentSeq::_tao_any_destructor,
      IOP::_tc_TaggedComponentSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedComponentSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedComponentSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedComponentSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>::extract (
        _tao_any,
        IOP::TaggedComponentSeq::_tao_any_destructor,
        IOP::_tc_TaggedComponentSeq,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::ServiceContext &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContext>::insert_copy (
      _tao_any,
      IOP::ServiceContext::_tao_any_destructor,
      IOP::_tc_ServiceContext,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::ServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContext>::insert (
      _tao_any,
      IOP::ServiceContext::_tao_any_destructor,
      IOP::_tc_ServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::ServiceContext *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::ServiceContext *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::ServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::ServiceContext>::extract (
        _tao_any,
        IOP::ServiceContext::_tao_any_destructor,
        IOP::_tc_ServiceContext,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::ServiceContext>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::ServiceContext>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::ServiceContextList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContextList>::insert_copy (
      _tao_any,
      IOP::ServiceContextList::_tao_any_destructor,
      IOP::_tc_ServiceContextList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::ServiceContextList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContextList>::insert (
      _tao_any,
      IOP::ServiceContextList::_tao_any_destructor,
      IOP::_tc_ServiceContextList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::ServiceContextList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::ServiceContextList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::ServiceContextList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::ServiceContextList>::extract (
        _tao_any,
        IOP::ServiceContextList::_tao_any_destructor,
        IOP::_tc_ServiceContextList,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::ServiceContextList>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::ServiceContextList>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    IOP::Codec_ptr _tao_elem
  )
{
  IOP::Codec_ptr _tao_objptr =
    IOP::Codec::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    IOP::Codec_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<IOP::Codec>::insert (
      _tao_any,
      IOP::Codec::_tao_any_destructor,
      IOP::_tc_Codec,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    IOP::Codec_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<IOP::Codec>::extract (
        _tao_any,
        IOP::Codec::_tao_any_destructor,
        IOP::_tc_Codec,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<IOP::Codec,IOP::Codec_var>;
  template class TAO::Any_Impl_T<IOP::Codec>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<IOP::Codec, IOP::Codec_var>
# pragma instantiate TAO::Any_Impl_T<IOP::Codec>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::Encoding &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::Encoding>::insert_copy (
      _tao_any,
      IOP::Encoding::_tao_any_destructor,
      IOP::_tc_Encoding,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::Encoding *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::Encoding>::insert (
      _tao_any,
      IOP::Encoding::_tao_any_destructor,
      IOP::_tc_Encoding,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::Encoding *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::Encoding *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::Encoding *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::Encoding>::extract (
        _tao_any,
        IOP::Encoding::_tao_any_destructor,
        IOP::_tc_Encoding,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::Encoding>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::Encoding>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    IOP::CodecFactory_ptr _tao_elem
  )
{
  IOP::CodecFactory_ptr _tao_objptr =
    IOP::CodecFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    IOP::CodecFactory_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<IOP::CodecFactory>::insert (
      _tao_any,
      IOP::CodecFactory::_tao_any_destructor,
      IOP::_tc_CodecFactory,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    IOP::CodecFactory_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<IOP::CodecFactory>::extract (
        _tao_any,
        IOP::CodecFactory::_tao_any_destructor,
        IOP::_tc_CodecFactory,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<IOP::CodecFactory,IOP::CodecFactory_var>;
  template class TAO::Any_Impl_T<IOP::CodecFactory>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<IOP::CodecFactory, IOP::CodecFactory_var>
# pragma instantiate TAO::Any_Impl_T<IOP::CodecFactory>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

#if !defined _TAO_CDR_OP_IOP_TaggedProfile__tao_seq_Octet_CPP_
#define _TAO_CDR_OP_IOP_TaggedProfile__tao_seq_Octet_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedProfile::_tao_seq_Octet &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      {
        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
          ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (IOP::TaggedProfile::_tao_seq_Octet *)&_tao_sequence);
        if (oseq->mb ())
          return strm.write_octet_array_mb (oseq->mb ());
        else
          return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
      }
      
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedProfile::_tao_seq_Octet &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      if (ACE_BIT_DISABLED (strm.start ()->flags (),
      ACE_Message_Block::DONT_DELETE))
      {
        TAO_ORB_Core* orb_core = strm.orb_core ();
        if (orb_core != 0 &&
        strm.orb_core ()->resource_factory ()->
        input_cdr_allocator_type_locked () == 1)
        {
          TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
            ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
          oseq->replace (_tao_seq_len, strm.start ());
          oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
          strm.skip_bytes (_tao_seq_len);
          return 1;
        }
      }
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_TaggedProfile__tao_seq_Octet_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

#if !defined _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_CPP_
#define _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::IOR::_tao_seq_TaggedProfile &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::IOR::_tao_seq_TaggedProfile &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

#if !defined _TAO_CDR_OP_IOP_TaggedComponent__tao_seq_Octet_CPP_
#define _TAO_CDR_OP_IOP_TaggedComponent__tao_seq_Octet_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedComponent::_tao_seq_Octet &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      {
        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
          ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (IOP::TaggedComponent::_tao_seq_Octet *)&_tao_sequence);
        if (oseq->mb ())
          return strm.write_octet_array_mb (oseq->mb ());
        else
          return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
      }
      
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedComponent::_tao_seq_Octet &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      if (ACE_BIT_DISABLED (strm.start ()->flags (),
      ACE_Message_Block::DONT_DELETE))
      {
        TAO_ORB_Core* orb_core = strm.orb_core ();
        if (orb_core != 0 &&
        strm.orb_core ()->resource_factory ()->
        input_cdr_allocator_type_locked () == 1)
        {
          TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
            ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
          oseq->replace (_tao_seq_len, strm.start ());
          oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
          strm.skip_bytes (_tao_seq_len);
          return 1;
        }
      }
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_TaggedComponent__tao_seq_Octet_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::MultipleComponentProfile &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::MultipleComponentProfile &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedComponentList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedComponentList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedComponentSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedComponentSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

#if !defined _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_CPP_
#define _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::ServiceContext::_tao_seq_Octet &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      {
        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
          ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (IOP::ServiceContext::_tao_seq_Octet *)&_tao_sequence);
        if (oseq->mb ())
          return strm.write_octet_array_mb (oseq->mb ());
        else
          return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
      }
      
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::ServiceContext::_tao_seq_Octet &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      if (ACE_BIT_DISABLED (strm.start ()->flags (),
      ACE_Message_Block::DONT_DELETE))
      {
        TAO_ORB_Core* orb_core = strm.orb_core ();
        if (orb_core != 0 &&
        strm.orb_core ()->resource_factory ()->
        input_cdr_allocator_type_locked () == 1)
        {
          TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
            ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
          oseq->replace (_tao_seq_len, strm.start ());
          oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
          strm.skip_bytes (_tao_seq_len);
          return 1;
        }
      }
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:125

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::ServiceContextList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::ServiceContextList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

