// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_CORBA_OCTETSEQ_CI_)
#define _CORBA_OCTETSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::OctetSeq_var
// *************************************************************

ACE_INLINE
CORBA::OctetSeq_var::OctetSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::OctetSeq_var::OctetSeq_var (OctetSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::OctetSeq_var::OctetSeq_var (const ::CORBA::OctetSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::OctetSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

// Fixed-size base types only.
ACE_INLINE
CORBA::OctetSeq_var::OctetSeq_var (const ::CORBA::OctetSeq &p)
{
  ACE_NEW (this->ptr_, ::CORBA::OctetSeq (p));
}

ACE_INLINE
CORBA::OctetSeq_var::~OctetSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::OctetSeq_var &
CORBA::OctetSeq_var::operator= (OctetSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::OctetSeq_var &
CORBA::OctetSeq_var::operator= (const ::CORBA::OctetSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          OctetSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              OctetSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              OctetSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// Fixed-size types only.
ACE_INLINE
::CORBA::OctetSeq_var &
CORBA::OctetSeq_var::operator= (const ::CORBA::OctetSeq &p)
{
  if (this->ptr_ != &p)
    {
      delete this->ptr_;
      ACE_NEW_RETURN (this->ptr_, ::CORBA::OctetSeq (p), *this);
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::OctetSeq *
CORBA::OctetSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::OctetSeq *
CORBA::OctetSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::OctetSeq_var::operator const ::CORBA::OctetSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::OctetSeq_var::operator ::CORBA::OctetSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::OctetSeq_var::operator ::CORBA::OctetSeq &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::Octet &
CORBA::OctetSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::Octet &
CORBA::OctetSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::Octet &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::CORBA::OctetSeq &
CORBA::OctetSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::OctetSeq &
CORBA::OctetSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::OctetSeq *&
CORBA::OctetSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::OctetSeq *
CORBA::OctetSeq_var::_retn (void)
{
  ::CORBA::OctetSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::OctetSeq *
CORBA::OctetSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::OctetSeq_out
// *************************************************************

ACE_INLINE
CORBA::OctetSeq_out::OctetSeq_out (OctetSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OctetSeq_out::OctetSeq_out (OctetSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OctetSeq_out::OctetSeq_out (const ::CORBA::OctetSeq_out &p)
  : ptr_ (ACE_const_cast (OctetSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::OctetSeq_out &
CORBA::OctetSeq_out::operator= (const ::CORBA::OctetSeq_out &p)
{
  this->ptr_ = ACE_const_cast (OctetSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::OctetSeq_out &
CORBA::OctetSeq_out::operator= (OctetSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::OctetSeq_out::operator ::CORBA::OctetSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::OctetSeq *&
CORBA::OctetSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::OctetSeq *
CORBA::OctetSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::Octet &
CORBA::OctetSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_OctetSeq_I_
#define _TAO_CDR_OP_CORBA_OctetSeq_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::OctetSeq &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    CORBA::OctetSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_OctetSeq_I_ */

