// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_OCTETSEQ_CI_)
#define _OCTETSEQ_CI_

// *************************************************************
// Inline operations for class OctetSeq_var
// *************************************************************

ACE_INLINE
OctetSeq_var::OctetSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
OctetSeq_var::OctetSeq_var (OctetSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
OctetSeq_var::OctetSeq_var (const ::OctetSeq_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::OctetSeq (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
OctetSeq_var::OctetSeq_var (const ::OctetSeq &p)
{
  ACE_NEW (this->ptr_, ::OctetSeq (p));
}

ACE_INLINE
OctetSeq_var::~OctetSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE OctetSeq_var &
OctetSeq_var::operator= (OctetSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE OctetSeq_var &
OctetSeq_var::operator= (const ::OctetSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::OctetSeq (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE ::OctetSeq_var &
OctetSeq_var::operator= (const ::OctetSeq &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::OctetSeq (p), *this);
  }
  return *this;
}

ACE_INLINE const ::OctetSeq *
OctetSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::OctetSeq *
OctetSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
OctetSeq_var::operator const ::OctetSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
OctetSeq_var::operator ::OctetSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
OctetSeq_var::operator ::OctetSeq &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Octet &
OctetSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::Octet &
OctetSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::Octet &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::OctetSeq &
OctetSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::OctetSeq &
OctetSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::OctetSeq *&
OctetSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::OctetSeq *
OctetSeq_var::_retn (void)
{
  ::OctetSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::OctetSeq *
OctetSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class OctetSeq_out
// *************************************************************

ACE_INLINE
OctetSeq_out::OctetSeq_out (OctetSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
OctetSeq_out::OctetSeq_out (OctetSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
OctetSeq_out::OctetSeq_out (const ::OctetSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (OctetSeq_out&, p).ptr_)
{}

ACE_INLINE ::OctetSeq_out &
OctetSeq_out::operator= (const ::OctetSeq_out &p)
{
  this->ptr_ = ACE_const_cast (OctetSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::OctetSeq_out &
OctetSeq_out::operator= (OctetSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
OctetSeq_out::operator ::OctetSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::OctetSeq *&
OctetSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::OctetSeq *
OctetSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Octet &
OctetSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined _TAO_CDR_OP_OctetSeq_I_
#define _TAO_CDR_OP_OctetSeq_I_

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const OctetSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    OctetSeq &
  );

#endif /* _TAO_CDR_OP_OctetSeq_I_ */

