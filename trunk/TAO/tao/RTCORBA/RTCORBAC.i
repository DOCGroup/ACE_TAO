// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for class RTCORBA::ThreadpoolLane_var
// *************************************************************

ACE_INLINE
RTCORBA::ThreadpoolLane_var::ThreadpoolLane_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
RTCORBA::ThreadpoolLane_var::ThreadpoolLane_var (ThreadpoolLane *p)
  : ptr_ (p)
{}

ACE_INLINE
RTCORBA::ThreadpoolLane_var::ThreadpoolLane_var (const ::RTCORBA::ThreadpoolLane_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::RTCORBA::ThreadpoolLane (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
RTCORBA::ThreadpoolLane_var::ThreadpoolLane_var (const ::RTCORBA::ThreadpoolLane &p)
{
  ACE_NEW (this->ptr_, ::RTCORBA::ThreadpoolLane (p));
}

ACE_INLINE
RTCORBA::ThreadpoolLane_var::~ThreadpoolLane_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RTCORBA::ThreadpoolLane_var &
RTCORBA::ThreadpoolLane_var::operator= (ThreadpoolLane *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::RTCORBA::ThreadpoolLane_var &
RTCORBA::ThreadpoolLane_var::operator= (const ::RTCORBA::ThreadpoolLane_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ThreadpoolLane *deep_copy =
            new ThreadpoolLane (*p.ptr_);

          if (deep_copy != 0)
            {
              ThreadpoolLane *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE RTCORBA::ThreadpoolLane_var &
RTCORBA::ThreadpoolLane_var::operator= (const ::RTCORBA::ThreadpoolLane &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::RTCORBA::ThreadpoolLane (p), *this);
  }
  return *this;
}

ACE_INLINE const ::RTCORBA::ThreadpoolLane *
RTCORBA::ThreadpoolLane_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLane *
RTCORBA::ThreadpoolLane_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RTCORBA::ThreadpoolLane_var::operator const ::RTCORBA::ThreadpoolLane &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::ThreadpoolLane_var::operator ::RTCORBA::ThreadpoolLane &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::ThreadpoolLane_var::operator ::RTCORBA::ThreadpoolLane &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE const ::RTCORBA::ThreadpoolLane &
RTCORBA::ThreadpoolLane_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLane &
RTCORBA::ThreadpoolLane_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size
ACE_INLINE ::RTCORBA::ThreadpoolLane &
RTCORBA::ThreadpoolLane_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLane
RTCORBA::ThreadpoolLane_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLane *
RTCORBA::ThreadpoolLane_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_THREADPOOLLANES_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_THREADPOOLLANES_CI_

  // = Static operations.
  ACE_INLINE RTCORBA::ThreadpoolLane *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    RTCORBA::ThreadpoolLane *retval = 0;
    ACE_NEW_RETURN (retval, RTCORBA::ThreadpoolLane[size], 0);
    return retval;
  }

  ACE_INLINE void RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::freebuf (RTCORBA::ThreadpoolLane *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (void) // Default constructor.
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (maximum))
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (CORBA::ULong maximum,
    CORBA::ULong length,
    RTCORBA::ThreadpoolLane *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes (const _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      RTCORBA::ThreadpoolLane *tmp1 = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (this->maximum_);
      RTCORBA::ThreadpoolLane * const tmp2 = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane * ACE_CAST_CONST, rhs.buffer_);

      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];

      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }

  ACE_INLINE RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::operator= (const _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;

    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        RTCORBA::ThreadpoolLane *tmp = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane *, this->buffer_);
        _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (rhs.maximum_);

    TAO_Unbounded_Base_Sequence::operator= (rhs);

    RTCORBA::ThreadpoolLane *tmp1 = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane *, this->buffer_);
    RTCORBA::ThreadpoolLane * const tmp2 = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    return *this;
  }

  // = Accessors.
  ACE_INLINE RTCORBA::ThreadpoolLane &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    RTCORBA::ThreadpoolLane* tmp = ACE_reinterpret_cast(RTCORBA::ThreadpoolLane*,this->buffer_);
    return tmp[i];
  }

  ACE_INLINE const RTCORBA::ThreadpoolLane &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    RTCORBA::ThreadpoolLane * const tmp = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }

  // Implement the TAO_Base_Sequence methods (see Sequence.h)

  ACE_INLINE RTCORBA::ThreadpoolLane *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::get_buffer (CORBA::Boolean orphan)
  {
    RTCORBA::ThreadpoolLane *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (RTCORBA::ThreadpoolLane*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(RTCORBA::ThreadpoolLane*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }

  ACE_INLINE const RTCORBA::ThreadpoolLane *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const RTCORBA::ThreadpoolLane * ACE_CAST_CONST, this->buffer_);
  }

  ACE_INLINE void
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::replace (CORBA::ULong max,
  CORBA::ULong length,
  RTCORBA::ThreadpoolLane *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      RTCORBA::ThreadpoolLane *tmp = ACE_reinterpret_cast(RTCORBA::ThreadpoolLane*,this->buffer_);
      _TAO_Unbounded_Sequence_RTCORBA_ThreadpoolLanes::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_RTCORBA_THREADPOOLLANES_CI_)
#define _RTCORBA_THREADPOOLLANES_CI_

// *************************************************************
// Inline operations for class RTCORBA::ThreadpoolLanes_var
// *************************************************************

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::ThreadpoolLanes_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::ThreadpoolLanes_var (ThreadpoolLanes *p)
  : ptr_ (p)
{}

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::ThreadpoolLanes_var (const ::RTCORBA::ThreadpoolLanes_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::RTCORBA::ThreadpoolLanes (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
RTCORBA::ThreadpoolLanes_var::ThreadpoolLanes_var (const ::RTCORBA::ThreadpoolLanes &p)
{
  ACE_NEW (this->ptr_, ::RTCORBA::ThreadpoolLanes (p));
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::~ThreadpoolLanes_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RTCORBA::ThreadpoolLanes_var &
RTCORBA::ThreadpoolLanes_var::operator= (ThreadpoolLanes *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes_var &
RTCORBA::ThreadpoolLanes_var::operator= (const ::RTCORBA::ThreadpoolLanes_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ThreadpoolLanes *deep_copy =
            new ThreadpoolLanes (*p.ptr_);

          if (deep_copy != 0)
            {
              ThreadpoolLanes *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE ::RTCORBA::ThreadpoolLanes_var &
RTCORBA::ThreadpoolLanes_var::operator= (const ::RTCORBA::ThreadpoolLanes &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::RTCORBA::ThreadpoolLanes (p), *this);
  }
  return *this;
}

ACE_INLINE const ::RTCORBA::ThreadpoolLanes *
RTCORBA::ThreadpoolLanes_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes *
RTCORBA::ThreadpoolLanes_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::operator const ::RTCORBA::ThreadpoolLanes &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::operator ::RTCORBA::ThreadpoolLanes &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_var::operator ::RTCORBA::ThreadpoolLanes &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE RTCORBA::ThreadpoolLane &
RTCORBA::ThreadpoolLanes_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const RTCORBA::ThreadpoolLane &
RTCORBA::ThreadpoolLanes_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const RTCORBA::ThreadpoolLane &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::RTCORBA::ThreadpoolLanes &
RTCORBA::ThreadpoolLanes_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes &
RTCORBA::ThreadpoolLanes_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::RTCORBA::ThreadpoolLanes *&
RTCORBA::ThreadpoolLanes_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes *
RTCORBA::ThreadpoolLanes_var::_retn (void)
{
  ::RTCORBA::ThreadpoolLanes *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes *
RTCORBA::ThreadpoolLanes_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RTCORBA::ThreadpoolLanes_out
// *************************************************************

ACE_INLINE
RTCORBA::ThreadpoolLanes_out::ThreadpoolLanes_out (ThreadpoolLanes *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_out::ThreadpoolLanes_out (ThreadpoolLanes_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_out::ThreadpoolLanes_out (const ::RTCORBA::ThreadpoolLanes_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ThreadpoolLanes_out&, p).ptr_)
{}

ACE_INLINE ::RTCORBA::ThreadpoolLanes_out &
RTCORBA::ThreadpoolLanes_out::operator= (const ::RTCORBA::ThreadpoolLanes_out &p)
{
  this->ptr_ = ACE_const_cast (ThreadpoolLanes_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes_out &
RTCORBA::ThreadpoolLanes_out::operator= (ThreadpoolLanes *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
RTCORBA::ThreadpoolLanes_out::operator ::RTCORBA::ThreadpoolLanes *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes *&
RTCORBA::ThreadpoolLanes_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ThreadpoolLanes *
RTCORBA::ThreadpoolLanes_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE RTCORBA::ThreadpoolLane &
RTCORBA::ThreadpoolLanes_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_PRIORITYMODELPOLICY___CI_)
#define _RTCORBA_PRIORITYMODELPOLICY___CI_

ACE_INLINE RTCORBA::PriorityModelPolicy_ptr
tao_RTCORBA_PriorityModelPolicy_duplicate (
    RTCORBA::PriorityModelPolicy_ptr p
  )
{
  return RTCORBA::PriorityModelPolicy::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_PriorityModelPolicy_release (
    RTCORBA::PriorityModelPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::PriorityModelPolicy_ptr
tao_RTCORBA_PriorityModelPolicy_nil (
    void
  )
{
  return RTCORBA::PriorityModelPolicy::_nil ();
}

ACE_INLINE RTCORBA::PriorityModelPolicy_ptr
tao_RTCORBA_PriorityModelPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::PriorityModelPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_PriorityModelPolicy_upcast (
    void *src
  )
{
  RTCORBA::PriorityModelPolicy **tmp =
    ACE_static_cast (RTCORBA::PriorityModelPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_THREADPOOLPOLICY___CI_)
#define _RTCORBA_THREADPOOLPOLICY___CI_

ACE_INLINE RTCORBA::ThreadpoolPolicy_ptr
tao_RTCORBA_ThreadpoolPolicy_duplicate (
    RTCORBA::ThreadpoolPolicy_ptr p
  )
{
  return RTCORBA::ThreadpoolPolicy::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_ThreadpoolPolicy_release (
    RTCORBA::ThreadpoolPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::ThreadpoolPolicy_ptr
tao_RTCORBA_ThreadpoolPolicy_nil (
    void
  )
{
  return RTCORBA::ThreadpoolPolicy::_nil ();
}

ACE_INLINE RTCORBA::ThreadpoolPolicy_ptr
tao_RTCORBA_ThreadpoolPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::ThreadpoolPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_ThreadpoolPolicy_upcast (
    void *src
  )
{
  RTCORBA::ThreadpoolPolicy **tmp =
    ACE_static_cast (RTCORBA::ThreadpoolPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_PROTOCOLPROPERTIES___CI_)
#define _RTCORBA_PROTOCOLPROPERTIES___CI_

ACE_INLINE RTCORBA::ProtocolProperties_ptr
tao_RTCORBA_ProtocolProperties_duplicate (
    RTCORBA::ProtocolProperties_ptr p
  )
{
  return RTCORBA::ProtocolProperties::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_ProtocolProperties_release (
    RTCORBA::ProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::ProtocolProperties_ptr
tao_RTCORBA_ProtocolProperties_nil (
    void
  )
{
  return RTCORBA::ProtocolProperties::_nil ();
}

ACE_INLINE RTCORBA::ProtocolProperties_ptr
tao_RTCORBA_ProtocolProperties_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::ProtocolProperties::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_ProtocolProperties_upcast (
    void *src
  )
{
  RTCORBA::ProtocolProperties **tmp =
    ACE_static_cast (RTCORBA::ProtocolProperties **, src);
  return *tmp;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class RTCORBA::Protocol_var
// *************************************************************

ACE_INLINE
RTCORBA::Protocol_var::Protocol_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
RTCORBA::Protocol_var::Protocol_var (Protocol *p)
  : ptr_ (p)
{}

ACE_INLINE
RTCORBA::Protocol_var::Protocol_var (const ::RTCORBA::Protocol_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::RTCORBA::Protocol (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::Protocol_var::~Protocol_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RTCORBA::Protocol_var &
RTCORBA::Protocol_var::operator= (Protocol *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::RTCORBA::Protocol_var &
RTCORBA::Protocol_var::operator= (const ::RTCORBA::Protocol_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Protocol *deep_copy =
            new Protocol (*p.ptr_);

          if (deep_copy != 0)
            {
              Protocol *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::RTCORBA::Protocol *
RTCORBA::Protocol_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::Protocol *
RTCORBA::Protocol_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RTCORBA::Protocol_var::operator const ::RTCORBA::Protocol &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::Protocol_var::operator ::RTCORBA::Protocol &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::Protocol_var::operator ::RTCORBA::Protocol &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
RTCORBA::Protocol_var::operator ::RTCORBA::Protocol *&() // cast
{
  return this->ptr_;
}

ACE_INLINE const ::RTCORBA::Protocol &
RTCORBA::Protocol_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::Protocol &
RTCORBA::Protocol_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::RTCORBA::Protocol *&
RTCORBA::Protocol_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::Protocol *
RTCORBA::Protocol_var::_retn (void)
{
  ::RTCORBA::Protocol *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::RTCORBA::Protocol *
RTCORBA::Protocol_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RTCORBA::Protocol_out
// *************************************************************

ACE_INLINE
RTCORBA::Protocol_out::Protocol_out (::RTCORBA::Protocol *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::Protocol_out::Protocol_out (Protocol_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::Protocol_out::Protocol_out (const ::RTCORBA::Protocol_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Protocol_out&, p).ptr_)
{}

ACE_INLINE RTCORBA::Protocol_out &
RTCORBA::Protocol_out::operator= (const ::RTCORBA::Protocol_out &p)
{
  this->ptr_ = ACE_const_cast (Protocol_out&, p).ptr_;
  return *this;
}

ACE_INLINE RTCORBA::Protocol_out &
RTCORBA::Protocol_out::operator= (Protocol *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
RTCORBA::Protocol_out::operator ::RTCORBA::Protocol *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::Protocol *&
RTCORBA::Protocol_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::Protocol *
RTCORBA::Protocol_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_PROTOCOLLIST_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_PROTOCOLLIST_CI_

  // = Static operations.
  ACE_INLINE RTCORBA::Protocol *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    RTCORBA::Protocol *retval = 0;
    ACE_NEW_RETURN (retval, RTCORBA::Protocol[size], 0);
    return retval;
  }

  ACE_INLINE void RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::freebuf (RTCORBA::Protocol *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (void) // Default constructor.
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (maximum))
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (CORBA::ULong maximum,
    CORBA::ULong length,
    RTCORBA::Protocol *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList (const _TAO_Unbounded_Sequence_RTCORBA_ProtocolList &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      RTCORBA::Protocol *tmp1 = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (this->maximum_);
      RTCORBA::Protocol * const tmp2 = ACE_reinterpret_cast (RTCORBA::Protocol * ACE_CAST_CONST, rhs.buffer_);

      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];

      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }

  ACE_INLINE RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::operator= (const _TAO_Unbounded_Sequence_RTCORBA_ProtocolList &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;

    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        RTCORBA::Protocol *tmp = ACE_reinterpret_cast (RTCORBA::Protocol *, this->buffer_);
        _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (rhs.maximum_);

    TAO_Unbounded_Base_Sequence::operator= (rhs);

    RTCORBA::Protocol *tmp1 = ACE_reinterpret_cast (RTCORBA::Protocol *, this->buffer_);
    RTCORBA::Protocol * const tmp2 = ACE_reinterpret_cast (RTCORBA::Protocol * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    return *this;
  }

  // = Accessors.
  ACE_INLINE RTCORBA::Protocol &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    RTCORBA::Protocol* tmp = ACE_reinterpret_cast(RTCORBA::Protocol*,this->buffer_);
    return tmp[i];
  }

  ACE_INLINE const RTCORBA::Protocol &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    RTCORBA::Protocol * const tmp = ACE_reinterpret_cast (RTCORBA::Protocol* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }

  // Implement the TAO_Base_Sequence methods (see Sequence.h)

  ACE_INLINE RTCORBA::Protocol *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::get_buffer (CORBA::Boolean orphan)
  {
    RTCORBA::Protocol *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (RTCORBA::Protocol*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(RTCORBA::Protocol*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }

  ACE_INLINE const RTCORBA::Protocol *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const RTCORBA::Protocol * ACE_CAST_CONST, this->buffer_);
  }

  ACE_INLINE void
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_ProtocolList::replace (CORBA::ULong max,
  CORBA::ULong length,
  RTCORBA::Protocol *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      RTCORBA::Protocol *tmp = ACE_reinterpret_cast(RTCORBA::Protocol*,this->buffer_);
      _TAO_Unbounded_Sequence_RTCORBA_ProtocolList::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_RTCORBA_PROTOCOLLIST_CI_)
#define _RTCORBA_PROTOCOLLIST_CI_

// *************************************************************
// Inline operations for class RTCORBA::ProtocolList_var
// *************************************************************

ACE_INLINE
RTCORBA::ProtocolList_var::ProtocolList_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
RTCORBA::ProtocolList_var::ProtocolList_var (ProtocolList *p)
  : ptr_ (p)
{}

ACE_INLINE
RTCORBA::ProtocolList_var::ProtocolList_var (const ::RTCORBA::ProtocolList_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::RTCORBA::ProtocolList (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::ProtocolList_var::~ProtocolList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RTCORBA::ProtocolList_var &
RTCORBA::ProtocolList_var::operator= (ProtocolList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::RTCORBA::ProtocolList_var &
RTCORBA::ProtocolList_var::operator= (const ::RTCORBA::ProtocolList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ProtocolList *deep_copy =
            new ProtocolList (*p.ptr_);

          if (deep_copy != 0)
            {
              ProtocolList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::RTCORBA::ProtocolList *
RTCORBA::ProtocolList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ProtocolList *
RTCORBA::ProtocolList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RTCORBA::ProtocolList_var::operator const ::RTCORBA::ProtocolList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
RTCORBA::ProtocolList_var::operator ::RTCORBA::ProtocolList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE RTCORBA::Protocol &
RTCORBA::ProtocolList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const RTCORBA::Protocol &
RTCORBA::ProtocolList_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const RTCORBA::Protocol &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::RTCORBA::ProtocolList &
RTCORBA::ProtocolList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::ProtocolList &
RTCORBA::ProtocolList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::RTCORBA::ProtocolList *&
RTCORBA::ProtocolList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ProtocolList *
RTCORBA::ProtocolList_var::_retn (void)
{
  ::RTCORBA::ProtocolList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::RTCORBA::ProtocolList *
RTCORBA::ProtocolList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RTCORBA::ProtocolList_out
// *************************************************************

ACE_INLINE
RTCORBA::ProtocolList_out::ProtocolList_out (ProtocolList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::ProtocolList_out::ProtocolList_out (ProtocolList_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::ProtocolList_out::ProtocolList_out (const ::RTCORBA::ProtocolList_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ProtocolList_out&, p).ptr_)
{}

ACE_INLINE ::RTCORBA::ProtocolList_out &
RTCORBA::ProtocolList_out::operator= (const ::RTCORBA::ProtocolList_out &p)
{
  this->ptr_ = ACE_const_cast (ProtocolList_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::RTCORBA::ProtocolList_out &
RTCORBA::ProtocolList_out::operator= (ProtocolList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
RTCORBA::ProtocolList_out::operator ::RTCORBA::ProtocolList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ProtocolList *&
RTCORBA::ProtocolList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::ProtocolList *
RTCORBA::ProtocolList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE RTCORBA::Protocol &
RTCORBA::ProtocolList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_SERVERPROTOCOLPOLICY___CI_)
#define _RTCORBA_SERVERPROTOCOLPOLICY___CI_

ACE_INLINE RTCORBA::ServerProtocolPolicy_ptr
tao_RTCORBA_ServerProtocolPolicy_duplicate (
    RTCORBA::ServerProtocolPolicy_ptr p
  )
{
  return RTCORBA::ServerProtocolPolicy::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_ServerProtocolPolicy_release (
    RTCORBA::ServerProtocolPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::ServerProtocolPolicy_ptr
tao_RTCORBA_ServerProtocolPolicy_nil (
    void
  )
{
  return RTCORBA::ServerProtocolPolicy::_nil ();
}

ACE_INLINE RTCORBA::ServerProtocolPolicy_ptr
tao_RTCORBA_ServerProtocolPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::ServerProtocolPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_ServerProtocolPolicy_upcast (
    void *src
  )
{
  RTCORBA::ServerProtocolPolicy **tmp =
    ACE_static_cast (RTCORBA::ServerProtocolPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_CLIENTPROTOCOLPOLICY___CI_)
#define _RTCORBA_CLIENTPROTOCOLPOLICY___CI_

ACE_INLINE RTCORBA::ClientProtocolPolicy_ptr
tao_RTCORBA_ClientProtocolPolicy_duplicate (
    RTCORBA::ClientProtocolPolicy_ptr p
  )
{
  return RTCORBA::ClientProtocolPolicy::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_ClientProtocolPolicy_release (
    RTCORBA::ClientProtocolPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::ClientProtocolPolicy_ptr
tao_RTCORBA_ClientProtocolPolicy_nil (
    void
  )
{
  return RTCORBA::ClientProtocolPolicy::_nil ();
}

ACE_INLINE RTCORBA::ClientProtocolPolicy_ptr
tao_RTCORBA_ClientProtocolPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::ClientProtocolPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_ClientProtocolPolicy_upcast (
    void *src
  )
{
  RTCORBA::ClientProtocolPolicy **tmp =
    ACE_static_cast (RTCORBA::ClientProtocolPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_PRIVATECONNECTIONPOLICY___CI_)
#define _RTCORBA_PRIVATECONNECTIONPOLICY___CI_

ACE_INLINE RTCORBA::PrivateConnectionPolicy_ptr
tao_RTCORBA_PrivateConnectionPolicy_duplicate (
    RTCORBA::PrivateConnectionPolicy_ptr p
  )
{
  return RTCORBA::PrivateConnectionPolicy::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_PrivateConnectionPolicy_release (
    RTCORBA::PrivateConnectionPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::PrivateConnectionPolicy_ptr
tao_RTCORBA_PrivateConnectionPolicy_nil (
    void
  )
{
  return RTCORBA::PrivateConnectionPolicy::_nil ();
}

ACE_INLINE RTCORBA::PrivateConnectionPolicy_ptr
tao_RTCORBA_PrivateConnectionPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::PrivateConnectionPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_PrivateConnectionPolicy_upcast (
    void *src
  )
{
  RTCORBA::PrivateConnectionPolicy **tmp =
    ACE_static_cast (RTCORBA::PrivateConnectionPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_TCPPROTOCOLPROPERTIES___CI_)
#define _RTCORBA_TCPPROTOCOLPROPERTIES___CI_

ACE_INLINE RTCORBA::TCPProtocolProperties_ptr
tao_RTCORBA_TCPProtocolProperties_duplicate (
    RTCORBA::TCPProtocolProperties_ptr p
  )
{
  return RTCORBA::TCPProtocolProperties::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_TCPProtocolProperties_release (
    RTCORBA::TCPProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::TCPProtocolProperties_ptr
tao_RTCORBA_TCPProtocolProperties_nil (
    void
  )
{
  return RTCORBA::TCPProtocolProperties::_nil ();
}

ACE_INLINE RTCORBA::TCPProtocolProperties_ptr
tao_RTCORBA_TCPProtocolProperties_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::TCPProtocolProperties::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_TCPProtocolProperties_upcast (
    void *src
  )
{
  RTCORBA::TCPProtocolProperties **tmp =
    ACE_static_cast (RTCORBA::TCPProtocolProperties **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_GIOPPROTOCOLPROPERTIES___CI_)
#define _RTCORBA_GIOPPROTOCOLPROPERTIES___CI_

ACE_INLINE RTCORBA::GIOPProtocolProperties_ptr
tao_RTCORBA_GIOPProtocolProperties_duplicate (
    RTCORBA::GIOPProtocolProperties_ptr p
  )
{
  return RTCORBA::GIOPProtocolProperties::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_GIOPProtocolProperties_release (
    RTCORBA::GIOPProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::GIOPProtocolProperties_ptr
tao_RTCORBA_GIOPProtocolProperties_nil (
    void
  )
{
  return RTCORBA::GIOPProtocolProperties::_nil ();
}

ACE_INLINE RTCORBA::GIOPProtocolProperties_ptr
tao_RTCORBA_GIOPProtocolProperties_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::GIOPProtocolProperties::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_GIOPProtocolProperties_upcast (
    void *src
  )
{
  RTCORBA::GIOPProtocolProperties **tmp =
    ACE_static_cast (RTCORBA::GIOPProtocolProperties **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___CI_)
#define _RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___CI_

ACE_INLINE RTCORBA::UnixDomainProtocolProperties_ptr
tao_RTCORBA_UnixDomainProtocolProperties_duplicate (
    RTCORBA::UnixDomainProtocolProperties_ptr p
  )
{
  return RTCORBA::UnixDomainProtocolProperties::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_UnixDomainProtocolProperties_release (
    RTCORBA::UnixDomainProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::UnixDomainProtocolProperties_ptr
tao_RTCORBA_UnixDomainProtocolProperties_nil (
    void
  )
{
  return RTCORBA::UnixDomainProtocolProperties::_nil ();
}

ACE_INLINE RTCORBA::UnixDomainProtocolProperties_ptr
tao_RTCORBA_UnixDomainProtocolProperties_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::UnixDomainProtocolProperties::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_UnixDomainProtocolProperties_upcast (
    void *src
  )
{
  RTCORBA::UnixDomainProtocolProperties **tmp =
    ACE_static_cast (RTCORBA::UnixDomainProtocolProperties **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___CI_)
#define _RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___CI_

ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_ptr
tao_RTCORBA_SharedMemoryProtocolProperties_duplicate (
    RTCORBA::SharedMemoryProtocolProperties_ptr p
  )
{
  return RTCORBA::SharedMemoryProtocolProperties::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_SharedMemoryProtocolProperties_release (
    RTCORBA::SharedMemoryProtocolProperties_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_ptr
tao_RTCORBA_SharedMemoryProtocolProperties_nil (
    void
  )
{
  return RTCORBA::SharedMemoryProtocolProperties::_nil ();
}

ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_ptr
tao_RTCORBA_SharedMemoryProtocolProperties_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::SharedMemoryProtocolProperties::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_SharedMemoryProtocolProperties_upcast (
    void *src
  )
{
  RTCORBA::SharedMemoryProtocolProperties **tmp =
    ACE_static_cast (RTCORBA::SharedMemoryProtocolProperties **, src);
  return *tmp;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class RTCORBA::PriorityBand_var
// *************************************************************

ACE_INLINE
RTCORBA::PriorityBand_var::PriorityBand_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
RTCORBA::PriorityBand_var::PriorityBand_var (PriorityBand *p)
  : ptr_ (p)
{}

ACE_INLINE
RTCORBA::PriorityBand_var::PriorityBand_var (const ::RTCORBA::PriorityBand_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::RTCORBA::PriorityBand (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
RTCORBA::PriorityBand_var::PriorityBand_var (const ::RTCORBA::PriorityBand &p)
{
  ACE_NEW (this->ptr_, ::RTCORBA::PriorityBand (p));
}

ACE_INLINE
RTCORBA::PriorityBand_var::~PriorityBand_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RTCORBA::PriorityBand_var &
RTCORBA::PriorityBand_var::operator= (PriorityBand *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::RTCORBA::PriorityBand_var &
RTCORBA::PriorityBand_var::operator= (const ::RTCORBA::PriorityBand_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          PriorityBand *deep_copy =
            new PriorityBand (*p.ptr_);

          if (deep_copy != 0)
            {
              PriorityBand *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE RTCORBA::PriorityBand_var &
RTCORBA::PriorityBand_var::operator= (const ::RTCORBA::PriorityBand &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::RTCORBA::PriorityBand (p), *this);
  }
  return *this;
}

ACE_INLINE const ::RTCORBA::PriorityBand *
RTCORBA::PriorityBand_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBand *
RTCORBA::PriorityBand_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RTCORBA::PriorityBand_var::operator const ::RTCORBA::PriorityBand &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::PriorityBand_var::operator ::RTCORBA::PriorityBand &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::PriorityBand_var::operator ::RTCORBA::PriorityBand &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE const ::RTCORBA::PriorityBand &
RTCORBA::PriorityBand_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBand &
RTCORBA::PriorityBand_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size
ACE_INLINE ::RTCORBA::PriorityBand &
RTCORBA::PriorityBand_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBand
RTCORBA::PriorityBand_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBand *
RTCORBA::PriorityBand_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_RTCORBA_PRIORITYBANDS_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_RTCORBA_PRIORITYBANDS_CI_

  // = Static operations.
  ACE_INLINE RTCORBA::PriorityBand *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    RTCORBA::PriorityBand *retval = 0;
    ACE_NEW_RETURN (retval, RTCORBA::PriorityBand[size], 0);
    return retval;
  }

  ACE_INLINE void RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::freebuf (RTCORBA::PriorityBand *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (void) // Default constructor.
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (maximum))
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (CORBA::ULong maximum,
    CORBA::ULong length,
    RTCORBA::PriorityBand *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }

  ACE_INLINE
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands (const _TAO_Unbounded_Sequence_RTCORBA_PriorityBands &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      RTCORBA::PriorityBand *tmp1 = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (this->maximum_);
      RTCORBA::PriorityBand * const tmp2 = ACE_reinterpret_cast (RTCORBA::PriorityBand * ACE_CAST_CONST, rhs.buffer_);

      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];

      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }

  ACE_INLINE RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::operator= (const _TAO_Unbounded_Sequence_RTCORBA_PriorityBands &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;

    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        RTCORBA::PriorityBand *tmp = ACE_reinterpret_cast (RTCORBA::PriorityBand *, this->buffer_);
        _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (rhs.maximum_);

    TAO_Unbounded_Base_Sequence::operator= (rhs);

    RTCORBA::PriorityBand *tmp1 = ACE_reinterpret_cast (RTCORBA::PriorityBand *, this->buffer_);
    RTCORBA::PriorityBand * const tmp2 = ACE_reinterpret_cast (RTCORBA::PriorityBand * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    return *this;
  }

  // = Accessors.
  ACE_INLINE RTCORBA::PriorityBand &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    RTCORBA::PriorityBand* tmp = ACE_reinterpret_cast(RTCORBA::PriorityBand*,this->buffer_);
    return tmp[i];
  }

  ACE_INLINE const RTCORBA::PriorityBand &
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    RTCORBA::PriorityBand * const tmp = ACE_reinterpret_cast (RTCORBA::PriorityBand* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }

  // Implement the TAO_Base_Sequence methods (see Sequence.h)

  ACE_INLINE RTCORBA::PriorityBand *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::get_buffer (CORBA::Boolean orphan)
  {
    RTCORBA::PriorityBand *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (RTCORBA::PriorityBand*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(RTCORBA::PriorityBand*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }

  ACE_INLINE const RTCORBA::PriorityBand *
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const RTCORBA::PriorityBand * ACE_CAST_CONST, this->buffer_);
  }

  ACE_INLINE void
  RTCORBA::_TAO_Unbounded_Sequence_RTCORBA_PriorityBands::replace (CORBA::ULong max,
  CORBA::ULong length,
  RTCORBA::PriorityBand *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      RTCORBA::PriorityBand *tmp = ACE_reinterpret_cast(RTCORBA::PriorityBand*,this->buffer_);
      _TAO_Unbounded_Sequence_RTCORBA_PriorityBands::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_RTCORBA_PRIORITYBANDS_CI_)
#define _RTCORBA_PRIORITYBANDS_CI_

// *************************************************************
// Inline operations for class RTCORBA::PriorityBands_var
// *************************************************************

ACE_INLINE
RTCORBA::PriorityBands_var::PriorityBands_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
RTCORBA::PriorityBands_var::PriorityBands_var (PriorityBands *p)
  : ptr_ (p)
{}

ACE_INLINE
RTCORBA::PriorityBands_var::PriorityBands_var (const ::RTCORBA::PriorityBands_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::RTCORBA::PriorityBands (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
RTCORBA::PriorityBands_var::PriorityBands_var (const ::RTCORBA::PriorityBands &p)
{
  ACE_NEW (this->ptr_, ::RTCORBA::PriorityBands (p));
}

ACE_INLINE
RTCORBA::PriorityBands_var::~PriorityBands_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RTCORBA::PriorityBands_var &
RTCORBA::PriorityBands_var::operator= (PriorityBands *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::RTCORBA::PriorityBands_var &
RTCORBA::PriorityBands_var::operator= (const ::RTCORBA::PriorityBands_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          PriorityBands *deep_copy =
            new PriorityBands (*p.ptr_);

          if (deep_copy != 0)
            {
              PriorityBands *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE ::RTCORBA::PriorityBands_var &
RTCORBA::PriorityBands_var::operator= (const ::RTCORBA::PriorityBands &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::RTCORBA::PriorityBands (p), *this);
  }
  return *this;
}

ACE_INLINE const ::RTCORBA::PriorityBands *
RTCORBA::PriorityBands_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBands *
RTCORBA::PriorityBands_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RTCORBA::PriorityBands_var::operator const ::RTCORBA::PriorityBands &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::PriorityBands_var::operator ::RTCORBA::PriorityBands &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
RTCORBA::PriorityBands_var::operator ::RTCORBA::PriorityBands &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE RTCORBA::PriorityBand &
RTCORBA::PriorityBands_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const RTCORBA::PriorityBand &
RTCORBA::PriorityBands_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const RTCORBA::PriorityBand &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::RTCORBA::PriorityBands &
RTCORBA::PriorityBands_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBands &
RTCORBA::PriorityBands_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::RTCORBA::PriorityBands *&
RTCORBA::PriorityBands_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBands *
RTCORBA::PriorityBands_var::_retn (void)
{
  ::RTCORBA::PriorityBands *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::RTCORBA::PriorityBands *
RTCORBA::PriorityBands_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RTCORBA::PriorityBands_out
// *************************************************************

ACE_INLINE
RTCORBA::PriorityBands_out::PriorityBands_out (PriorityBands *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::PriorityBands_out::PriorityBands_out (PriorityBands_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RTCORBA::PriorityBands_out::PriorityBands_out (const ::RTCORBA::PriorityBands_out &p) // copy constructor
  : ptr_ (ACE_const_cast (PriorityBands_out&, p).ptr_)
{}

ACE_INLINE ::RTCORBA::PriorityBands_out &
RTCORBA::PriorityBands_out::operator= (const ::RTCORBA::PriorityBands_out &p)
{
  this->ptr_ = ACE_const_cast (PriorityBands_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::RTCORBA::PriorityBands_out &
RTCORBA::PriorityBands_out::operator= (PriorityBands *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
RTCORBA::PriorityBands_out::operator ::RTCORBA::PriorityBands *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBands *&
RTCORBA::PriorityBands_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::RTCORBA::PriorityBands *
RTCORBA::PriorityBands_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE RTCORBA::PriorityBand &
RTCORBA::PriorityBands_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY___CI_)
#define _RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY___CI_

ACE_INLINE RTCORBA::PriorityBandedConnectionPolicy_ptr
tao_RTCORBA_PriorityBandedConnectionPolicy_duplicate (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p
  )
{
  return RTCORBA::PriorityBandedConnectionPolicy::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_PriorityBandedConnectionPolicy_release (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::PriorityBandedConnectionPolicy_ptr
tao_RTCORBA_PriorityBandedConnectionPolicy_nil (
    void
  )
{
  return RTCORBA::PriorityBandedConnectionPolicy::_nil ();
}

ACE_INLINE RTCORBA::PriorityBandedConnectionPolicy_ptr
tao_RTCORBA_PriorityBandedConnectionPolicy_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::PriorityBandedConnectionPolicy::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_PriorityBandedConnectionPolicy_upcast (
    void *src
  )
{
  RTCORBA::PriorityBandedConnectionPolicy **tmp =
    ACE_static_cast (RTCORBA::PriorityBandedConnectionPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_CURRENT___CI_)
#define _RTCORBA_CURRENT___CI_

ACE_INLINE RTCORBA::Current_ptr
tao_RTCORBA_Current_duplicate (
    RTCORBA::Current_ptr p
  )
{
  return RTCORBA::Current::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_Current_release (
    RTCORBA::Current_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::Current_ptr
tao_RTCORBA_Current_nil (
    void
  )
{
  return RTCORBA::Current::_nil ();
}

ACE_INLINE RTCORBA::Current_ptr
tao_RTCORBA_Current_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::Current::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_Current_upcast (
    void *src
  )
{
  RTCORBA::Current **tmp =
    ACE_static_cast (RTCORBA::Current **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_RTCORBA_MUTEX___CI_)
#define _RTCORBA_MUTEX___CI_

ACE_INLINE RTCORBA::Mutex_ptr
tao_RTCORBA_Mutex_duplicate (
    RTCORBA::Mutex_ptr p
  )
{
  return RTCORBA::Mutex::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_Mutex_release (
    RTCORBA::Mutex_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::Mutex_ptr
tao_RTCORBA_Mutex_nil (
    void
  )
{
  return RTCORBA::Mutex::_nil ();
}

ACE_INLINE RTCORBA::Mutex_ptr
tao_RTCORBA_Mutex_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::Mutex::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_Mutex_upcast (
    void *src
  )
{
  RTCORBA::Mutex **tmp =
    ACE_static_cast (RTCORBA::Mutex **, src);
  return *tmp;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception RTCORBA::RTORB::MutexNotFound
// *************************************************************

// *************************************************************
// Inline operations for exception RTCORBA::RTORB::InvalidThreadpool
// *************************************************************


#if !defined (_RTCORBA_RTORB___CI_)
#define _RTCORBA_RTORB___CI_

ACE_INLINE RTCORBA::RTORB_ptr
tao_RTCORBA_RTORB_duplicate (
    RTCORBA::RTORB_ptr p
  )
{
  return RTCORBA::RTORB::_duplicate (p);
}

ACE_INLINE void
tao_RTCORBA_RTORB_release (
    RTCORBA::RTORB_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE RTCORBA::RTORB_ptr
tao_RTCORBA_RTORB_nil (
    void
  )
{
  return RTCORBA::RTORB::_nil ();
}

ACE_INLINE RTCORBA::RTORB_ptr
tao_RTCORBA_RTORB_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return RTCORBA::RTORB::_narrow (p, ACE_TRY_ENV);
}

ACE_INLINE CORBA::Object *
tao_RTCORBA_RTORB_upcast (
    void *src
  )
{
  RTCORBA::RTORB **tmp =
    ACE_static_cast (RTCORBA::RTORB **, src);
  return *tmp;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const RTCORBA::ThreadpoolLane &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.lane_priority) &&
    (strm << _tao_aggregate.static_threads) &&
    (strm << _tao_aggregate.dynamic_threads)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::ThreadpoolLane &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.lane_priority) &&
    (strm >> _tao_aggregate.static_threads) &&
    (strm >> _tao_aggregate.dynamic_threads)
  )
    return 1;
  else
    return 0;

}


#if !defined _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_I_
#define _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_I_

CORBA::Boolean TAO_RTCORBA_Export operator<< (
    TAO_OutputCDR &,
    const RTCORBA::ThreadpoolLanes &
  );
CORBA::Boolean TAO_RTCORBA_Export operator>> (
    TAO_InputCDR &,
    RTCORBA::ThreadpoolLanes &
  );

#endif /* _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const RTCORBA::PriorityModel &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::PriorityModel &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (RTCORBA::PriorityModel, _tao_temp);
    }

  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const RTCORBA::PriorityBand &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.low) &&
    (strm << _tao_aggregate.high)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::PriorityBand &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.low) &&
    (strm >> _tao_aggregate.high)
  )
    return 1;
  else
    return 0;

}


#if !defined _TAO_CDR_OP_RTCORBA_PriorityBands_I_
#define _TAO_CDR_OP_RTCORBA_PriorityBands_I_

CORBA::Boolean TAO_RTCORBA_Export operator<< (
    TAO_OutputCDR &,
    const RTCORBA::PriorityBands &
  );
CORBA::Boolean TAO_RTCORBA_Export operator>> (
    TAO_InputCDR &,
    RTCORBA::PriorityBands &
  );

#endif /* _TAO_CDR_OP_RTCORBA_PriorityBands_I_ */
