// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:314


#include "IOP_IORC.h"
#include "Any_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IOP_IORC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ProfileId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x50726f66), 
  ACE_NTOHL (0x696c6549), 
  ACE_NTOHL (0x643a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
    10,
  ACE_NTOHL (0x50726f66), 
  ACE_NTOHL (0x696c6549), 
  ACE_NTOHL (0x64000000),  // name = ProfileId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ProfileId (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ProfileId),
    (char *) &_oc_IOP_ProfileId,
    0,
    sizeof (IOP::ProfileId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ProfileId,
    &_tc_TAO_tc_IOP_ProfileId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedProfile[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x65645072), 
  ACE_NTOHL (0x6f66696c), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/TaggedProfile:1.0
    14,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x65645072), 
  ACE_NTOHL (0x6f66696c), 
  ACE_NTOHL (0x65000000),  // name = TaggedProfile
  2, // member count
    4,
  ACE_NTOHL (0x74616700),  // name = tag
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x50726f66), 
    ACE_NTOHL (0x696c6549), 
    ACE_NTOHL (0x643a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
        10,
    ACE_NTOHL (0x50726f66), 
    ACE_NTOHL (0x696c6549), 
    ACE_NTOHL (0x64000000),  // name = ProfileId
        CORBA::tk_ulong,


  13,
  ACE_NTOHL (0x70726f66), 
  ACE_NTOHL (0x696c655f), 
  ACE_NTOHL (0x64617461), 
  ACE_NTOHL (0x0),  // name = profile_data
    CORBA::tk_alias, // typecode kind for typedefs
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f63), 
    ACE_NTOHL (0x74657453), 
    ACE_NTOHL (0x65713a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
        9,
    ACE_NTOHL (0x4f637465), 
    ACE_NTOHL (0x74536571), 
    ACE_NTOHL (0x0),  // name = OctetSeq
        CORBA::tk_sequence, // typecode kind
    12, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_octet,

      0U,


};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedProfile (
    CORBA::tk_struct,
    sizeof (_oc_IOP_TaggedProfile),
    (char *) &_oc_IOP_TaggedProfile,
    0,
    sizeof (IOP::TaggedProfile)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedProfile,
    &_tc_TAO_tc_IOP_TaggedProfile
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void IOP::TaggedProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  TaggedProfile *tmp = ACE_static_cast (TaggedProfile*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from
// be/be_type.cpp:292

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Var_Var_T<
      IOP::TaggedProfile
    >;

template class TAO_Var_Base_T<
    IOP::TaggedProfile
  >;

template class
  TAO_Out_T<
      IOP::TaggedProfile,
      IOP::TaggedProfile_var
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Var_Var_T< \
      IOP::TaggedProfile \
    >

#pragma instantiate TAO_Var_Base_T<
    IOP::TaggedProfile
  >

# pragma instantiate \
  TAO_Out_T< \
      IOP::TaggedProfile, \
      IOP::TaggedProfile_var \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_IOR[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  24,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x494f523a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/IOR:1.0
    4,
  ACE_NTOHL (0x494f5200),  // name = IOR
  2, // member count
    8,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x5f696400),  // name = type_id
    CORBA::tk_string, 
  0U, // string length
  9,
  ACE_NTOHL (0x70726f66), 
  ACE_NTOHL (0x696c6573), 
  ACE_NTOHL (0x0),  // name = profiles
    CORBA::tk_sequence, // typecode kind
  264, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    248, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x65645072), 
      ACE_NTOHL (0x6f66696c), 
      ACE_NTOHL (0x653a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/TaggedProfile:1.0
            14,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x65645072), 
      ACE_NTOHL (0x6f66696c), 
      ACE_NTOHL (0x65000000),  // name = TaggedProfile
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x50726f66), 
        ACE_NTOHL (0x696c6549), 
        ACE_NTOHL (0x643a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ProfileId:1.0
                10,
        ACE_NTOHL (0x50726f66), 
        ACE_NTOHL (0x696c6549), 
        ACE_NTOHL (0x64000000),  // name = ProfileId
                CORBA::tk_ulong,


      13,
      ACE_NTOHL (0x70726f66), 
      ACE_NTOHL (0x696c655f), 
      ACE_NTOHL (0x64617461), 
      ACE_NTOHL (0x0),  // name = profile_data
            CORBA::tk_alias, // typecode kind for typedefs
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f63), 
        ACE_NTOHL (0x74657453), 
        ACE_NTOHL (0x65713a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
                9,
        ACE_NTOHL (0x4f637465), 
        ACE_NTOHL (0x74536571), 
        ACE_NTOHL (0x0),  // name = OctetSeq
                CORBA::tk_sequence, // typecode kind
        12, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_octet,

          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_IOR (
    CORBA::tk_struct,
    sizeof (_oc_IOP_IOR),
    (char *) &_oc_IOP_IOR,
    0,
    sizeof (IOP::IOR)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_IOR,
    &_tc_TAO_tc_IOP_IOR
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void IOP::IOR::_tao_any_destructor (void *_tao_void_pointer)
{
  IOR *tmp = ACE_static_cast (IOR*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_PROFILES_CS_)
#define _IOP_IOR__TAO_SEQ_TAGGEDPROFILE_PROFILES_CS_

IOP::IOR::_tao_seq_TaggedProfile_profiles::_tao_seq_TaggedProfile_profiles (void)
{}

IOP::IOR::_tao_seq_TaggedProfile_profiles::_tao_seq_TaggedProfile_profiles (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedProfile
      >
    (max)
{}

IOP::IOR::_tao_seq_TaggedProfile_profiles::_tao_seq_TaggedProfile_profiles (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedProfile * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedProfile
      >
    (max, length, buffer, release)
{}

IOP::IOR::_tao_seq_TaggedProfile_profiles::_tao_seq_TaggedProfile_profiles (
    const _tao_seq_TaggedProfile_profiles &seq
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedProfile
      >
    (seq)
{}

IOP::IOR::_tao_seq_TaggedProfile_profiles::~_tao_seq_TaggedProfile_profiles (void)
{}

void IOP::IOR::_tao_seq_TaggedProfile_profiles::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  _tao_seq_TaggedProfile_profiles * tmp =
    ACE_static_cast (
        _tao_seq_TaggedProfile_profiles *,
        _tao_void_pointer
      );
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_type.cpp:292

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Var_Var_T<
      IOP::IOR
    >;

template class TAO_Var_Base_T<
    IOP::IOR
  >;

template class
  TAO_Out_T<
      IOP::IOR,
      IOP::IOR_var
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Var_Var_T< \
      IOP::IOR \
    >

#pragma instantiate TAO_Var_Base_T<
    IOP::IOR
  >

# pragma instantiate \
  TAO_Out_T< \
      IOP::IOR, \
      IOP::IOR_var \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ComponentId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x7449643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
    12,
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74496400),  // name = ComponentId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ComponentId (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ComponentId),
    (char *) &_oc_IOP_ComponentId,
    0,
    sizeof (IOP::ComponentId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ComponentId,
    &_tc_TAO_tc_IOP_ComponentId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedComponent[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
    16,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7400),  // name = TaggedComponent
  2, // member count
    4,
  ACE_NTOHL (0x74616700),  // name = tag
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    32,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x7449643a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
        12,
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74496400),  // name = ComponentId
        CORBA::tk_ulong,


  15,
  ACE_NTOHL (0x636f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x745f6461), 
  ACE_NTOHL (0x74610000),  // name = component_data
    CORBA::tk_alias, // typecode kind for typedefs
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f63), 
    ACE_NTOHL (0x74657453), 
    ACE_NTOHL (0x65713a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
        9,
    ACE_NTOHL (0x4f637465), 
    ACE_NTOHL (0x74536571), 
    ACE_NTOHL (0x0),  // name = OctetSeq
        CORBA::tk_sequence, // typecode kind
    12, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_octet,

      0U,


};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedComponent (
    CORBA::tk_struct,
    sizeof (_oc_IOP_TaggedComponent),
    (char *) &_oc_IOP_TaggedComponent,
    0,
    sizeof (IOP::TaggedComponent)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedComponent,
    &_tc_TAO_tc_IOP_TaggedComponent
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void IOP::TaggedComponent::_tao_any_destructor (void *_tao_void_pointer)
{
  TaggedComponent *tmp = ACE_static_cast (TaggedComponent*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from
// be/be_type.cpp:292

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Var_Var_T<
      IOP::TaggedComponent
    >;

template class TAO_Var_Base_T<
    IOP::TaggedComponent
  >;

template class
  TAO_Out_T<
      IOP::TaggedComponent,
      IOP::TaggedComponent_var
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Var_Var_T< \
      IOP::TaggedComponent \
    >

#pragma instantiate TAO_Var_Base_T<
    IOP::TaggedComponent
  >

# pragma instantiate \
  TAO_Out_T< \
      IOP::TaggedComponent, \
      IOP::TaggedComponent_var \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IOP_MULTIPLECOMPONENTPROFILE_CS_)
#define _IOP_MULTIPLECOMPONENTPROFILE_CS_

IOP::MultipleComponentProfile::MultipleComponentProfile (void)
{}

IOP::MultipleComponentProfile::MultipleComponentProfile (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (max)
{}

IOP::MultipleComponentProfile::MultipleComponentProfile (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (max, length, buffer, release)
{}

IOP::MultipleComponentProfile::MultipleComponentProfile (
    const MultipleComponentProfile &seq
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (seq)
{}

IOP::MultipleComponentProfile::~MultipleComponentProfile (void)
{}

void IOP::MultipleComponentProfile::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  MultipleComponentProfile * tmp =
    ACE_static_cast (
        MultipleComponentProfile *,
        _tao_void_pointer
      );
  delete tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      IOP::MultipleComponentProfile,
      IOP::TaggedComponent
    >;

template class
  TAO_Seq_Var_Base_T<
      IOP::MultipleComponentProfile,
      IOP::TaggedComponent
    >;

template class
  TAO_Seq_Out_T<
      IOP::MultipleComponentProfile,
      IOP::MultipleComponentProfile_var,
      IOP::TaggedComponent
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      MultipleComponentProfile, \
      IOP::TaggedComponent \
    >

# pragma instantiate \
  TAO_Seq_Var_Base_T< \
      MultipleComponentProfile, \
      IOP::TaggedComponent \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      MultipleComponentProfile, \
      MultipleComponentProfile_var, \
      IOP::TaggedComponent \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
template class TAO_Unbounded_Sequence<
    IOP::TaggedComponent
  >;


#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#pragma instantiate TAO_Unbounded_Sequence<
    IOP::TaggedComponent
  >


#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_MultipleComponentProfile[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x4d756c74), 
  ACE_NTOHL (0x69706c65), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x7450726f), 
  ACE_NTOHL (0x66696c65), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/IOP/MultipleComponentProfile:1.0
    25,
  ACE_NTOHL (0x4d756c74), 
  ACE_NTOHL (0x69706c65), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x7450726f), 
  ACE_NTOHL (0x66696c65), 
  ACE_NTOHL (0x0),  // name = MultipleComponentProfile
    CORBA::tk_sequence, // typecode kind
  264, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    248, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      36,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e743a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
            16,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7400),  // name = TaggedComponent
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x7449643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
                12,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74496400),  // name = ComponentId
                CORBA::tk_ulong,


      15,
      ACE_NTOHL (0x636f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x745f6461), 
      ACE_NTOHL (0x74610000),  // name = component_data
            CORBA::tk_alias, // typecode kind for typedefs
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f63), 
        ACE_NTOHL (0x74657453), 
        ACE_NTOHL (0x65713a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
                9,
        ACE_NTOHL (0x4f637465), 
        ACE_NTOHL (0x74536571), 
        ACE_NTOHL (0x0),  // name = OctetSeq
                CORBA::tk_sequence, // typecode kind
        12, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_octet,

          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_MultipleComponentProfile (
    CORBA::tk_alias,
    sizeof (_oc_IOP_MultipleComponentProfile),
    (char *) &_oc_IOP_MultipleComponentProfile,
    0,
    sizeof (IOP::MultipleComponentProfile)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_MultipleComponentProfile,
    &_tc_TAO_tc_IOP_MultipleComponentProfile
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IOP_TAGGEDCOMPONENTLIST_CS_)
#define _IOP_TAGGEDCOMPONENTLIST_CS_

IOP::TaggedComponentList::TaggedComponentList (void)
{}

IOP::TaggedComponentList::TaggedComponentList (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (max)
{}

IOP::TaggedComponentList::TaggedComponentList (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (max, length, buffer, release)
{}

IOP::TaggedComponentList::TaggedComponentList (
    const TaggedComponentList &seq
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (seq)
{}

IOP::TaggedComponentList::~TaggedComponentList (void)
{}

void IOP::TaggedComponentList::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  TaggedComponentList * tmp =
    ACE_static_cast (
        TaggedComponentList *,
        _tao_void_pointer
      );
  delete tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      IOP::TaggedComponentList,
      IOP::TaggedComponent
    >;

template class
  TAO_Seq_Var_Base_T<
      IOP::TaggedComponentList,
      IOP::TaggedComponent
    >;

template class
  TAO_Seq_Out_T<
      IOP::TaggedComponentList,
      IOP::TaggedComponentList_var,
      IOP::TaggedComponent
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      TaggedComponentList, \
      IOP::TaggedComponent \
    >

# pragma instantiate \
  TAO_Seq_Var_Base_T< \
      TaggedComponentList, \
      IOP::TaggedComponent \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      TaggedComponentList, \
      TaggedComponentList_var, \
      IOP::TaggedComponent \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
template class TAO_Unbounded_Sequence<
    IOP::TaggedComponent
  >;


#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#pragma instantiate TAO_Unbounded_Sequence<
    IOP::TaggedComponent
  >


#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedComponentList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e744c), 
  ACE_NTOHL (0x6973743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponentList:1.0
    20,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e744c), 
  ACE_NTOHL (0x69737400),  // name = TaggedComponentList
    CORBA::tk_sequence, // typecode kind
  264, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    248, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      36,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e743a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
            16,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7400),  // name = TaggedComponent
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x7449643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
                12,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74496400),  // name = ComponentId
                CORBA::tk_ulong,


      15,
      ACE_NTOHL (0x636f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x745f6461), 
      ACE_NTOHL (0x74610000),  // name = component_data
            CORBA::tk_alias, // typecode kind for typedefs
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f63), 
        ACE_NTOHL (0x74657453), 
        ACE_NTOHL (0x65713a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
                9,
        ACE_NTOHL (0x4f637465), 
        ACE_NTOHL (0x74536571), 
        ACE_NTOHL (0x0),  // name = OctetSeq
                CORBA::tk_sequence, // typecode kind
        12, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_octet,

          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedComponentList (
    CORBA::tk_alias,
    sizeof (_oc_IOP_TaggedComponentList),
    (char *) &_oc_IOP_TaggedComponentList,
    0,
    sizeof (IOP::TaggedComponentList)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedComponentList,
    &_tc_TAO_tc_IOP_TaggedComponentList
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IOP_TAGGEDCOMPONENTSEQ_CS_)
#define _IOP_TAGGEDCOMPONENTSEQ_CS_

IOP::TaggedComponentSeq::TaggedComponentSeq (void)
{}

IOP::TaggedComponentSeq::TaggedComponentSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (max)
{}

IOP::TaggedComponentSeq::TaggedComponentSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (max, length, buffer, release)
{}

IOP::TaggedComponentSeq::TaggedComponentSeq (
    const TaggedComponentSeq &seq
  )
  : TAO_Unbounded_Sequence<
        IOP::TaggedComponent
      >
    (seq)
{}

IOP::TaggedComponentSeq::~TaggedComponentSeq (void)
{}

void IOP::TaggedComponentSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  TaggedComponentSeq * tmp =
    ACE_static_cast (
        TaggedComponentSeq *,
        _tao_void_pointer
      );
  delete tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      IOP::TaggedComponentSeq,
      IOP::TaggedComponent
    >;

template class
  TAO_Seq_Var_Base_T<
      IOP::TaggedComponentSeq,
      IOP::TaggedComponent
    >;

template class
  TAO_Seq_Out_T<
      IOP::TaggedComponentSeq,
      IOP::TaggedComponentSeq_var,
      IOP::TaggedComponent
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      TaggedComponentSeq, \
      IOP::TaggedComponent \
    >

# pragma instantiate \
  TAO_Seq_Var_Base_T< \
      TaggedComponentSeq, \
      IOP::TaggedComponent \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      TaggedComponentSeq, \
      TaggedComponentSeq_var, \
      IOP::TaggedComponent \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
template class TAO_Unbounded_Sequence<
    IOP::TaggedComponent
  >;


#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#pragma instantiate TAO_Unbounded_Sequence<
    IOP::TaggedComponent
  >


#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_TaggedComponentSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/TaggedComponentSeq:1.0
    19,
  ACE_NTOHL (0x54616767), 
  ACE_NTOHL (0x6564436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x65710000),  // name = TaggedComponentSeq
    CORBA::tk_sequence, // typecode kind
  264, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    248, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      36,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e743a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/TaggedComponent:1.0
            16,
      ACE_NTOHL (0x54616767), 
      ACE_NTOHL (0x6564436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7400),  // name = TaggedComponent
      2, // member count
            4,
      ACE_NTOHL (0x74616700),  // name = tag
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x7449643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/IOP/ComponentId:1.0
                12,
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74496400),  // name = ComponentId
                CORBA::tk_ulong,


      15,
      ACE_NTOHL (0x636f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x745f6461), 
      ACE_NTOHL (0x74610000),  // name = component_data
            CORBA::tk_alias, // typecode kind for typedefs
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f63), 
        ACE_NTOHL (0x74657453), 
        ACE_NTOHL (0x65713a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
                9,
        ACE_NTOHL (0x4f637465), 
        ACE_NTOHL (0x74536571), 
        ACE_NTOHL (0x0),  // name = OctetSeq
                CORBA::tk_sequence, // typecode kind
        12, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_octet,

          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_TaggedComponentSeq (
    CORBA::tk_alias,
    sizeof (_oc_IOP_TaggedComponentSeq),
    (char *) &_oc_IOP_TaggedComponentSeq,
    0,
    sizeof (IOP::TaggedComponentSeq)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TaggedComponentSeq,
    &_tc_TAO_tc_IOP_TaggedComponentSeq
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ServiceId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636549), 
  ACE_NTOHL (0x643a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ServiceId:1.0
    10,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636549), 
  ACE_NTOHL (0x64000000),  // name = ServiceId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ServiceId (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ServiceId),
    (char *) &_oc_IOP_ServiceId,
    0,
    sizeof (IOP::ServiceId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServiceId,
    &_tc_TAO_tc_IOP_ServiceId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ServiceContext[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/ServiceContext:1.0
    15,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78740000),  // name = ServiceContext
  2, // member count
    11,
  ACE_NTOHL (0x636f6e74), 
  ACE_NTOHL (0x6578745f), 
  ACE_NTOHL (0x69640000),  // name = context_id
    CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x494f502f), 
    ACE_NTOHL (0x53657276), 
    ACE_NTOHL (0x69636549), 
    ACE_NTOHL (0x643a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ServiceId:1.0
        10,
    ACE_NTOHL (0x53657276), 
    ACE_NTOHL (0x69636549), 
    ACE_NTOHL (0x64000000),  // name = ServiceId
        CORBA::tk_ulong,


  13,
  ACE_NTOHL (0x636f6e74), 
  ACE_NTOHL (0x6578745f), 
  ACE_NTOHL (0x64617461), 
  ACE_NTOHL (0x0),  // name = context_data
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ServiceContext (
    CORBA::tk_struct,
    sizeof (_oc_IOP_ServiceContext),
    (char *) &_oc_IOP_ServiceContext,
    0,
    sizeof (IOP::ServiceContext)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServiceContext,
    &_tc_TAO_tc_IOP_ServiceContext
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void IOP::ServiceContext::_tao_any_destructor (void *_tao_void_pointer)
{
  ServiceContext *tmp = ACE_static_cast (ServiceContext*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IOP_SERVICECONTEXT__TAO_SEQ_OCTET_CONTEXT_DATA_CS_)
#define _IOP_SERVICECONTEXT__TAO_SEQ_OCTET_CONTEXT_DATA_CS_

IOP::ServiceContext::_tao_seq_Octet_context_data::_tao_seq_Octet_context_data (void)
{}

IOP::ServiceContext::_tao_seq_Octet_context_data::_tao_seq_Octet_context_data (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (max)
{}

IOP::ServiceContext::_tao_seq_Octet_context_data::_tao_seq_Octet_context_data (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Octet * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (max, length, buffer, release)
{}

IOP::ServiceContext::_tao_seq_Octet_context_data::_tao_seq_Octet_context_data (
    const _tao_seq_Octet_context_data &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (seq)
{}

IOP::ServiceContext::_tao_seq_Octet_context_data::~_tao_seq_Octet_context_data (void)
{}

void IOP::ServiceContext::_tao_seq_Octet_context_data::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  _tao_seq_Octet_context_data * tmp =
    ACE_static_cast (
        _tao_seq_Octet_context_data *,
        _tao_void_pointer
      );
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_type.cpp:292

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Var_Var_T<
      IOP::ServiceContext
    >;

template class TAO_Var_Base_T<
    IOP::ServiceContext
  >;

template class
  TAO_Out_T<
      IOP::ServiceContext,
      IOP::ServiceContext_var
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Var_Var_T< \
      IOP::ServiceContext \
    >

#pragma instantiate TAO_Var_Base_T<
    IOP::ServiceContext
  >

# pragma instantiate \
  TAO_Out_T< \
      IOP::ServiceContext, \
      IOP::ServiceContext_var \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:70

#if !defined (_IOP_SERVICECONTEXTLIST_CS_)
#define _IOP_SERVICECONTEXTLIST_CS_

IOP::ServiceContextList::ServiceContextList (void)
{}

IOP::ServiceContextList::ServiceContextList (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        IOP::ServiceContext
      >
    (max)
{}

IOP::ServiceContextList::ServiceContextList (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::ServiceContext * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        IOP::ServiceContext
      >
    (max, length, buffer, release)
{}

IOP::ServiceContextList::ServiceContextList (
    const ServiceContextList &seq
  )
  : TAO_Unbounded_Sequence<
        IOP::ServiceContext
      >
    (seq)
{}

IOP::ServiceContextList::~ServiceContextList (void)
{}

void IOP::ServiceContextList::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ServiceContextList * tmp =
    ACE_static_cast (
        ServiceContextList *,
        _tao_void_pointer
      );
  delete tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      IOP::ServiceContextList,
      IOP::ServiceContext
    >;

template class
  TAO_Seq_Var_Base_T<
      IOP::ServiceContextList,
      IOP::ServiceContext
    >;

template class
  TAO_Seq_Out_T<
      IOP::ServiceContextList,
      IOP::ServiceContextList_var,
      IOP::ServiceContext
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      ServiceContextList, \
      IOP::ServiceContext \
    >

# pragma instantiate \
  TAO_Seq_Var_Base_T< \
      ServiceContextList, \
      IOP::ServiceContext \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      ServiceContextList, \
      ServiceContextList_var, \
      IOP::ServiceContext \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
template class TAO_Unbounded_Sequence<
    IOP::ServiceContext
  >;


#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#pragma instantiate TAO_Unbounded_Sequence<
    IOP::ServiceContext
  >


#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_IOP_ServiceContextList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x494f502f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78744c69), 
  ACE_NTOHL (0x73743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/ServiceContextList:1.0
    19,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x69636543), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78744c69), 
  ACE_NTOHL (0x73740000),  // name = ServiceContextList
    CORBA::tk_sequence, // typecode kind
  208, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    192, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x494f502f), 
      ACE_NTOHL (0x53657276), 
      ACE_NTOHL (0x69636543), 
      ACE_NTOHL (0x6f6e7465), 
      ACE_NTOHL (0x78743a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/IOP/ServiceContext:1.0
            15,
      ACE_NTOHL (0x53657276), 
      ACE_NTOHL (0x69636543), 
      ACE_NTOHL (0x6f6e7465), 
      ACE_NTOHL (0x78740000),  // name = ServiceContext
      2, // member count
            11,
      ACE_NTOHL (0x636f6e74), 
      ACE_NTOHL (0x6578745f), 
      ACE_NTOHL (0x69640000),  // name = context_id
            CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x494f502f), 
        ACE_NTOHL (0x53657276), 
        ACE_NTOHL (0x69636549), 
        ACE_NTOHL (0x643a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/IOP/ServiceId:1.0
                10,
        ACE_NTOHL (0x53657276), 
        ACE_NTOHL (0x69636549), 
        ACE_NTOHL (0x64000000),  // name = ServiceId
                CORBA::tk_ulong,


      13,
      ACE_NTOHL (0x636f6e74), 
      ACE_NTOHL (0x6578745f), 
      ACE_NTOHL (0x64617461), 
      ACE_NTOHL (0x0),  // name = context_data
            CORBA::tk_sequence, // typecode kind
      12, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        CORBA::tk_octet,

        0U,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_IOP_ServiceContextList (
    CORBA::tk_alias,
    sizeof (_oc_IOP_ServiceContextList),
    (char *) &_oc_IOP_ServiceContextList,
    0,
    sizeof (IOP::ServiceContextList)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (IOP)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServiceContextList,
    &_tc_TAO_tc_IOP_ServiceContextList
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedProfile &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedProfile>::insert_copy (
      _tao_any,
      IOP::TaggedProfile::_tao_any_destructor,
      IOP::_tc_TaggedProfile,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedProfile *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedProfile>::insert (
      _tao_any,
      IOP::TaggedProfile::_tao_any_destructor,
      IOP::_tc_TaggedProfile,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedProfile *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedProfile *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedProfile *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedProfile>::extract (
        _tao_any,
        IOP::TaggedProfile::_tao_any_destructor,
        IOP::_tc_TaggedProfile,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedProfile>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedProfile>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::IOR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::IOR>::insert_copy (
      _tao_any,
      IOP::IOR::_tao_any_destructor,
      IOP::_tc_IOR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::IOR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::IOR>::insert (
      _tao_any,
      IOP::IOR::_tao_any_destructor,
      IOP::_tc_IOR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::IOR *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::IOR *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::IOR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::IOR>::extract (
        _tao_any,
        IOP::IOR::_tao_any_destructor,
        IOP::_tc_IOR,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::IOR>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::IOR>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedComponent &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponent>::insert_copy (
      _tao_any,
      IOP::TaggedComponent::_tao_any_destructor,
      IOP::_tc_TaggedComponent,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedComponent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponent>::insert (
      _tao_any,
      IOP::TaggedComponent::_tao_any_destructor,
      IOP::_tc_TaggedComponent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedComponent *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedComponent *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedComponent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedComponent>::extract (
        _tao_any,
        IOP::TaggedComponent::_tao_any_destructor,
        IOP::_tc_TaggedComponent,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedComponent>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedComponent>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::MultipleComponentProfile &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>::insert_copy (
      _tao_any,
      IOP::MultipleComponentProfile::_tao_any_destructor,
      IOP::_tc_MultipleComponentProfile,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::MultipleComponentProfile *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>::insert (
      _tao_any,
      IOP::MultipleComponentProfile::_tao_any_destructor,
      IOP::_tc_MultipleComponentProfile,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::MultipleComponentProfile *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::MultipleComponentProfile *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::MultipleComponentProfile *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>::extract (
        _tao_any,
        IOP::MultipleComponentProfile::_tao_any_destructor,
        IOP::_tc_MultipleComponentProfile,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::MultipleComponentProfile>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedComponentList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>::insert_copy (
      _tao_any,
      IOP::TaggedComponentList::_tao_any_destructor,
      IOP::_tc_TaggedComponentList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedComponentList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>::insert (
      _tao_any,
      IOP::TaggedComponentList::_tao_any_destructor,
      IOP::_tc_TaggedComponentList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedComponentList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedComponentList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedComponentList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>::extract (
        _tao_any,
        IOP::TaggedComponentList::_tao_any_destructor,
        IOP::_tc_TaggedComponentList,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedComponentList>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::TaggedComponentSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>::insert_copy (
      _tao_any,
      IOP::TaggedComponentSeq::_tao_any_destructor,
      IOP::_tc_TaggedComponentSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::TaggedComponentSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>::insert (
      _tao_any,
      IOP::TaggedComponentSeq::_tao_any_destructor,
      IOP::_tc_TaggedComponentSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::TaggedComponentSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::TaggedComponentSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::TaggedComponentSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>::extract (
        _tao_any,
        IOP::TaggedComponentSeq::_tao_any_destructor,
        IOP::_tc_TaggedComponentSeq,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::TaggedComponentSeq>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::ServiceContext &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContext>::insert_copy (
      _tao_any,
      IOP::ServiceContext::_tao_any_destructor,
      IOP::_tc_ServiceContext,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::ServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContext>::insert (
      _tao_any,
      IOP::ServiceContext::_tao_any_destructor,
      IOP::_tc_ServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::ServiceContext *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::ServiceContext *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::ServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::ServiceContext>::extract (
        _tao_any,
        IOP::ServiceContext::_tao_any_destructor,
        IOP::_tc_ServiceContext,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::ServiceContext>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::ServiceContext>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const IOP::ServiceContextList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContextList>::insert_copy (
      _tao_any,
      IOP::ServiceContextList::_tao_any_destructor,
      IOP::_tc_ServiceContextList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    IOP::ServiceContextList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<IOP::ServiceContextList>::insert (
      _tao_any,
      IOP::ServiceContextList::_tao_any_destructor,
      IOP::_tc_ServiceContextList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    IOP::ServiceContextList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const IOP::ServiceContextList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const IOP::ServiceContextList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<IOP::ServiceContextList>::extract (
        _tao_any,
        IOP::ServiceContextList::_tao_any_destructor,
        IOP::_tc_ServiceContextList,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<IOP::ServiceContextList>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<IOP::ServiceContextList>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:80

#if !defined _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_profiles_CPP_
#define _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_profiles_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::IOR::_tao_seq_TaggedProfile_profiles &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::IOR::_tao_seq_TaggedProfile_profiles &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_profiles_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:80

#if !defined _TAO_CDR_OP_IOP_MultipleComponentProfile_CPP_
#define _TAO_CDR_OP_IOP_MultipleComponentProfile_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::MultipleComponentProfile &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::MultipleComponentProfile &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_MultipleComponentProfile_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:80

#if !defined _TAO_CDR_OP_IOP_TaggedComponentList_CPP_
#define _TAO_CDR_OP_IOP_TaggedComponentList_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedComponentList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedComponentList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_TaggedComponentList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:80

#if !defined _TAO_CDR_OP_IOP_TaggedComponentSeq_CPP_
#define _TAO_CDR_OP_IOP_TaggedComponentSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedComponentSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedComponentSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_TaggedComponentSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:80

#if !defined _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_context_data_CPP_
#define _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_context_data_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::ServiceContext::_tao_seq_Octet_context_data &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            (strm << CORBA::Any::from_octet (_tao_sequence[i]));
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::ServiceContext::_tao_seq_Octet_context_data &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            (strm >> CORBA::Any::to_octet (_tao_sequence[i]));
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_context_data_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:80

#if !defined _TAO_CDR_OP_IOP_ServiceContextList_CPP_
#define _TAO_CDR_OP_IOP_ServiceContextList_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::ServiceContextList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::ServiceContextList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_IOP_ServiceContextList_CPP_ */

