/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#include "IORC.h"

#if !defined (__ACE_INLINE__)
#include "IORC.i"
#endif /* !defined INLINE */


// default constructor
TAO_IOP::TAO_IOR_Manipulation::TAO_IOR_Manipulation (void)
{}

// destructor
TAO_IOP::TAO_IOR_Manipulation::~TAO_IOR_Manipulation (void)
{}

TAO_IOP::TAO_IOR_Manipulation_ptr TAO_IOP::TAO_IOR_Manipulation::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return TAO_IOR_Manipulation::_unchecked_narrow (obj, ACE_TRY_ENV);
}

TAO_IOP::TAO_IOR_Manipulation_ptr TAO_IOP::TAO_IOR_Manipulation::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return TAO_IOR_Manipulation::_nil ();
  return
      ACE_reinterpret_cast
        (
          TAO_IOR_Manipulation_ptr,
            obj->_tao_QueryInterface
              (
                ACE_reinterpret_cast
                  (
                    ptr_arith_t,
                    &TAO_IOR_Manipulation::_narrow
                  )
              )
        );
}

TAO_IOP::TAO_IOR_Manipulation_ptr
TAO_IOP::TAO_IOR_Manipulation::_duplicate (TAO_IOR_Manipulation_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

// default constructor
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::EmptyProfileList (void)
{
}

// destructor - all members are of self managing types
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::~EmptyProfileList (void)
{
}

// copy constructor
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::EmptyProfileList (const ::TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList &_tao_excp)
  : CORBA_UserException (_tao_excp._type ())
{
  }

// assignment operator
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList&
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::operator= (const ::TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList &_tao_excp)
{

  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

// narrow
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList *
TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/TAO_IOR_Manipulation/EmptyProfileList:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (EmptyProfileList *, exc);
  else
    return 0;
}


void TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::_raise ()
{
  TAO_RAISE(*this);
}


void TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::_tao_encode (
    TAO_OutputCDR &,
    CORBA::Environment &ACE_TRY_ENV) const
{
  ACE_THROW (CORBA::MARSHAL ());
}


void TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::_tao_decode (
    TAO_InputCDR &,
    CORBA::Environment &ACE_TRY_ENV)
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method
CORBA::Exception *TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::TAO_IOR_Manipulation::EmptyProfileList, 0);
  return retval;
}

// default constructor
TAO_IOP::TAO_IOR_Manipulation::NotFound::NotFound (void)
{
}

// destructor - all members are of self managing types
TAO_IOP::TAO_IOR_Manipulation::NotFound::~NotFound (void)
{
}

// copy constructor
TAO_IOP::TAO_IOR_Manipulation::NotFound::NotFound (const ::TAO_IOP::TAO_IOR_Manipulation::NotFound &_tao_excp)
  : CORBA_UserException (_tao_excp._type ())
{
  }

// assignment operator
TAO_IOP::TAO_IOR_Manipulation::NotFound&
TAO_IOP::TAO_IOR_Manipulation::NotFound::operator= (const ::TAO_IOP::TAO_IOR_Manipulation::NotFound &_tao_excp)
{

  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

// narrow
TAO_IOP::TAO_IOR_Manipulation::NotFound *
TAO_IOP::TAO_IOR_Manipulation::NotFound::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/TAO_IOR_Manipulation/NotFound:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (NotFound *, exc);
  else
    return 0;
}


void TAO_IOP::TAO_IOR_Manipulation::NotFound::_raise ()
{
  TAO_RAISE(*this);
}


void TAO_IOP::TAO_IOR_Manipulation::NotFound::_tao_encode (
    TAO_OutputCDR &,
    CORBA::Environment &ACE_TRY_ENV) const
{
  ACE_THROW (CORBA::MARSHAL ());
}


void TAO_IOP::TAO_IOR_Manipulation::NotFound::_tao_decode (
    TAO_InputCDR &,
    CORBA::Environment &ACE_TRY_ENV)
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method
CORBA::Exception *TAO_IOP::TAO_IOR_Manipulation::NotFound::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::TAO_IOR_Manipulation::NotFound, 0);
  return retval;
}

// default constructor
TAO_IOP::TAO_IOR_Manipulation::Duplicate::Duplicate (void)
{
}

// destructor - all members are of self managing types
TAO_IOP::TAO_IOR_Manipulation::Duplicate::~Duplicate (void)
{
}

// copy constructor
TAO_IOP::TAO_IOR_Manipulation::Duplicate::Duplicate (const ::TAO_IOP::TAO_IOR_Manipulation::Duplicate &_tao_excp)
  : CORBA_UserException (_tao_excp._type ())
{
  }

// assignment operator
TAO_IOP::TAO_IOR_Manipulation::Duplicate&
TAO_IOP::TAO_IOR_Manipulation::Duplicate::operator= (const ::TAO_IOP::TAO_IOR_Manipulation::Duplicate &_tao_excp)
{

  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

// narrow
TAO_IOP::TAO_IOR_Manipulation::Duplicate *
TAO_IOP::TAO_IOR_Manipulation::Duplicate::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/TAO_IOR_Manipulation/Duplicate:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (Duplicate *, exc);
  else
    return 0;
}


void TAO_IOP::TAO_IOR_Manipulation::Duplicate::_raise ()
{
  TAO_RAISE(*this);
}


void TAO_IOP::TAO_IOR_Manipulation::Duplicate::_tao_encode (
    TAO_OutputCDR &,
    CORBA::Environment &ACE_TRY_ENV) const
{
  ACE_THROW (CORBA::MARSHAL ());
}


void TAO_IOP::TAO_IOR_Manipulation::Duplicate::_tao_decode (
    TAO_InputCDR &,
    CORBA::Environment &ACE_TRY_ENV)
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method
CORBA::Exception *TAO_IOP::TAO_IOR_Manipulation::Duplicate::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::TAO_IOR_Manipulation::Duplicate, 0);
  return retval;
}

// default constructor
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::Invalid_IOR (void)
{
}

// destructor - all members are of self managing types
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::~Invalid_IOR (void)
{
}

// copy constructor
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::Invalid_IOR (const ::TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR &_tao_excp)
  : CORBA_UserException (_tao_excp._type ())
{
  }

// assignment operator
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR&
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::operator= (const ::TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR &_tao_excp)
{

  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

// narrow
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR *
TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/TAO_IOR_Manipulation/Invalid_IOR:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (Invalid_IOR *, exc);
  else
    return 0;
}


void TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::_raise ()
{
  TAO_RAISE(*this);
}


void TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::_tao_encode (
    TAO_OutputCDR &,
    CORBA::Environment &ACE_TRY_ENV) const
{
  ACE_THROW (CORBA::MARSHAL ());
}


void TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::_tao_decode (
    TAO_InputCDR &,
    CORBA::Environment &ACE_TRY_ENV)
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method
CORBA::Exception *TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::TAO_IOR_Manipulation::Invalid_IOR, 0);
  return retval;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_TAO_IOP_TAO_IOR_MANIPULATION_IORLIST_CS_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_TAO_IOP_TAO_IOR_MANIPULATION_IORLIST_CS_

  // The Base_Sequence functions, please see tao/Sequence.h
  void
  TAO_IOP::TAO_IOR_Manipulation::_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::_allocate_buffer (CORBA::ULong length)
  {
    CORBA::Object **tmp = 0;
    tmp = _TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::allocbuf (length);
    
    if (this->buffer_ != 0)
    {
      CORBA::Object **old = ACE_reinterpret_cast (CORBA::Object**, this->buffer_);
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        if (!this->release_)
          tmp[i] = CORBA::Object::_duplicate (old[i]);
        else
          tmp[i] = old[i];
        
      if (this->release_)
        delete[] old;
      
    }
    this->buffer_ = tmp;
  }
  
  void
  TAO_IOP::TAO_IOR_Manipulation::_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::_deallocate_buffer (void)
  {
    if (this->buffer_ == 0 || this->release_ == 0)
      return;
    CORBA::Object **tmp = ACE_reinterpret_cast (CORBA::Object**, this->buffer_);
    for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = CORBA::Object::_nil ();
    }
    _TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::freebuf (tmp);
    this->buffer_ = 0;
  }
  
  TAO_IOP::TAO_IOR_Manipulation::_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::~_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList (void)
  {
    this->_deallocate_buffer ();
  }
  
  void
  TAO_IOP::TAO_IOR_Manipulation::_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
  {
    CORBA::Object **tmp = ACE_reinterpret_cast (CORBA::Object**, this->buffer_);
    
    for (CORBA::ULong i = nl; i < ol; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = CORBA::Object::_nil ();
    }
  }
  void 
  TAO_IOP::TAO_IOR_Manipulation::_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::_downcast (
      void* target,
      CORBA_Object *src,
      CORBA_Environment &ACE_TRY_ENV
    )
  {
    CORBA::Object **tmp = ACE_static_cast (CORBA::Object**, target);
    *tmp = CORBA::Object::_narrow (src, ACE_TRY_ENV);
  }

  CORBA_Object*
  TAO_IOP::TAO_IOR_Manipulation::_TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList::_upcast (void *src) const
  {
    CORBA::Object **tmp = ACE_static_cast (CORBA::Object**, src);
    return *tmp;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_TAO_IOP_TAO_IOR_MANIPULATION_IORLIST_CS_)
#define _TAO_IOP_TAO_IOR_MANIPULATION_IORLIST_CS_

// *************************************************************
// TAO_IOP::TAO_IOR_Manipulation::IORList
// *************************************************************

TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (void)
{}
TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (CORBA::ULong max) // uses max size
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::Object,CORBA::Object_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}
TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (CORBA::ULong max, CORBA::ULong length, CORBA::Object_ptr *buffer, CORBA::Boolean release)
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::Object,CORBA::Object_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}
TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (const IORList &seq) // copy ctor
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_TAO_IOP_TAO_IOR_Manipulation_IORList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::Object,CORBA::Object_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}
TAO_IOP::TAO_IOR_Manipulation::IORList::~IORList (void) // dtor
{}
void TAO_IOP::TAO_IOR_Manipulation::IORList::_tao_any_destructor (void *x)
{
  IORList *tmp = ACE_static_cast (IORList*,x);
  delete tmp;
}


#endif /* end #if !defined */

void *TAO_IOP::TAO_IOR_Manipulation::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::TAO_IOP, TAO_IOR_Manipulation)::_narrow))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* TAO_IOP::TAO_IOR_Manipulation::_interface_repository_id (void) const
{
  return "IDL:TAO_IOP/TAO_IOR_Manipulation:1.0";
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<TAO_IOP::TAO_IOR_Manipulation,TAO_IOP::TAO_IOR_Manipulation_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<TAO_IOP::TAO_IOR_Manipulation,TAO_IOP::TAO_IOR_Manipulation_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

