// -*- C++ -*-
//
// $Id$


// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "PolicyC.h"

#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "PolicyC.i"
#endif /* !defined INLINE */

// ****************************************************************

TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
TAO_NAMESPACE_BEGIN (CORBA)
TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, BAD_POLICY, 0)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
TAO_NAMESPACE_BEGIN (CORBA)
TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, UNSUPPORTED_POLICY, 1)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
TAO_NAMESPACE_BEGIN (CORBA)
TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, BAD_POLICY_TYPE, 2)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
TAO_NAMESPACE_BEGIN (CORBA)
TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, BAD_POLICY_VALUE, 3)
TAO_NAMESPACE_END
TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
TAO_NAMESPACE_BEGIN (CORBA)
TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, UNSUPPORTED_POLICY_VALUE, 4)
TAO_NAMESPACE_END

// ****************************************************************

// Default constructor.
CORBA_PolicyError::CORBA_PolicyError (void)
  : CORBA_UserException ("IDL:omg.org/CORBA/PolicyError:1.0")
{
}

// Destructor - all members are of self managing types.
CORBA_PolicyError::~CORBA_PolicyError (void)
{
}

void CORBA_PolicyError::_tao_any_destructor (void *x)
{
  CORBA_PolicyError *tmp = ACE_static_cast (CORBA_PolicyError*,x);
  delete tmp;
}

// Copy constructor.
CORBA_PolicyError::CORBA_PolicyError (const ::CORBA::PolicyError &_tao_excp)
  : CORBA_UserException (_tao_excp._id ())
{
  this->reason = _tao_excp.reason;
}

// Assignment operator.
CORBA::PolicyError&
CORBA::PolicyError::operator= (const ::CORBA::PolicyError &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  return *this;
}

// Narrow.
CORBA::PolicyError *
CORBA::PolicyError::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/CORBA/PolicyError:1.0", exc->_id ()))
    {
      return ACE_dynamic_cast (CORBA_PolicyError *, exc);
    }
  else
    {
      return 0;
    }
}

void CORBA::PolicyError::_raise ()
{
  TAO_RAISE (*this);
}

void CORBA::PolicyError::_tao_encode (
    TAO_OutputCDR &cdr
    TAO_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void CORBA::PolicyError::_tao_decode (
    TAO_InputCDR &cdr
    TAO_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method.
CORBA::Exception *CORBA::PolicyError::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::PolicyError, 0);
  return retval;
}

CORBA_PolicyError::CORBA_PolicyError (
    CORBA::PolicyErrorCode _tao_reason
  )
  : CORBA_UserException ("IDL:omg.org/CORBA/PolicyError:1.0")
{
  this->reason = _tao_reason;
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr CORBA::PolicyError::_type (void) const
{
  return ::CORBA::_tc_PolicyError;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CS_

  void
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_allocate_buffer (CORBA::ULong length)
  {
    CORBA::UShort* tmp = 0;
    tmp = _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (length);

    if (this->buffer_ != 0)
    {
      CORBA::UShort *old = ACE_reinterpret_cast (CORBA::UShort *,this->buffer_);

      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp[i] = old[i];

      if (this->release_)
        _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (old);

    }
    this->buffer_ = tmp;
  }

  void
  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_deallocate_buffer (void)
  {
    if (this->buffer_ == 0 || this->release_ == 0)
      return;

    CORBA::UShort *tmp = ACE_reinterpret_cast (CORBA::UShort *,this->buffer_);

    _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (tmp);
    this->buffer_ = 0;
  }

  CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::~_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void) // Dtor.
  {
    this->_deallocate_buffer ();
  }


#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CS_)
#define _CORBA_INVALIDPOLICIES__TAO_SEQ_USHORT_CS_

// *************************************************************
// CORBA_InvalidPolicies::_tao_seq_UShort
// *************************************************************

CORBA_InvalidPolicies::_tao_seq_UShort::_tao_seq_UShort (void)
{}
CORBA_InvalidPolicies::_tao_seq_UShort::_tao_seq_UShort (CORBA::ULong max) // uses max size
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::UShort>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max)
{}
CORBA_InvalidPolicies::_tao_seq_UShort::_tao_seq_UShort (CORBA::ULong max, CORBA::ULong length, CORBA::UShort *buffer, CORBA::Boolean release)
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::UShort>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max, length, buffer, release)
{}
CORBA_InvalidPolicies::_tao_seq_UShort::_tao_seq_UShort (const _tao_seq_UShort &seq) // copy ctor
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::UShort>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (seq)
{}
CORBA_InvalidPolicies::_tao_seq_UShort::~_tao_seq_UShort (void) // dtor
{}
void CORBA_InvalidPolicies::_tao_seq_UShort::_tao_any_destructor (void *x)
{
  _tao_seq_UShort *tmp = ACE_static_cast (_tao_seq_UShort*,x);
  delete tmp;
}


#endif /* end #if !defined */

// Default constructor.
CORBA_InvalidPolicies::CORBA_InvalidPolicies (void)
  : CORBA_UserException ("IDL:omg.org/CORBA/InvalidPolicies:1.0")
{
}

// Destructor - all members are of self managing types.
CORBA_InvalidPolicies::~CORBA_InvalidPolicies (void)
{
}

void CORBA_InvalidPolicies::_tao_any_destructor (void *x)
{
  CORBA_InvalidPolicies *tmp = ACE_static_cast (CORBA_InvalidPolicies*,x);
  delete tmp;
}

// Copy constructor.
CORBA_InvalidPolicies::CORBA_InvalidPolicies (const ::CORBA_InvalidPolicies &_tao_excp)
  : CORBA_UserException (_tao_excp._id ())
{
  this->indices = _tao_excp.indices;
}

// Assignment operator.
CORBA_InvalidPolicies&
CORBA_InvalidPolicies::operator= (const ::CORBA_InvalidPolicies &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  this->indices = _tao_excp.indices;
  return *this;
}

// Narrow.
CORBA_InvalidPolicies *
CORBA_InvalidPolicies::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/CORBA/InvalidPolicies:1.0", exc->_id ()))
    {
      return ACE_dynamic_cast (CORBA_InvalidPolicies *, exc);
    }
  else
    {
      return 0;
    }
}

void CORBA_InvalidPolicies::_raise ()
{
  TAO_RAISE (*this);
}

void CORBA_InvalidPolicies::_tao_encode (
    TAO_OutputCDR &cdr
    TAO_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void CORBA_InvalidPolicies::_tao_decode (
    TAO_InputCDR &cdr
    TAO_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the _alloc method.
CORBA::Exception *CORBA_InvalidPolicies::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA_InvalidPolicies, 0);
  return retval;
}

CORBA_InvalidPolicies::CORBA_InvalidPolicies (
    const CORBA_InvalidPolicies::_tao_seq_UShort & _tao_indices
  )
  : CORBA_UserException ("IDL:omg.org/CORBA/InvalidPolicies:1.0")
{
  this->indices = _tao_indices;
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr CORBA_InvalidPolicies::_type (void) const
{
  return ::CORBA::_tc_InvalidPolicies;
}

CORBA::Policy_ptr
tao_CORBA_Policy_duplicate (
    CORBA::Policy_ptr p
  )
{
  return CORBA::Policy::_duplicate (p);
}

void
tao_CORBA_Policy_release (
    CORBA::Policy_ptr p
  )
{
  CORBA::release (p);
}

CORBA::Policy_ptr
tao_CORBA_Policy_nil (
    void
  )
{
  return CORBA::Policy::_nil ();
}

CORBA::Policy_ptr
tao_CORBA_Policy_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return CORBA::Policy::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CORBA_Policy_upcast (
    void *src
  )
{
  CORBA::Policy **tmp =
    ACE_static_cast (CORBA::Policy **, src);
  return *tmp;
}

int CORBA_Policy::_tao_class_id = 0;

// *************************************************************
// Operations for class CORBA::Policy_var
// *************************************************************

CORBA_Policy_var::CORBA_Policy_var (void) // default constructor
  : ptr_ (CORBA_Policy::_nil ())
{}

::CORBA::Policy_ptr
CORBA_Policy_var::ptr (void) const
{
  return this->ptr_;
}

CORBA_Policy_var::CORBA_Policy_var (const ::CORBA::Policy_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_Policy::_duplicate (p.ptr ()))
{}

CORBA_Policy_var::~CORBA_Policy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

CORBA::Policy_var &
CORBA_Policy_var::operator= (CORBA_Policy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CORBA::Policy_var &
CORBA_Policy_var::operator= (const ::CORBA::Policy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA::Policy::_duplicate (p.ptr ());
  }
  return *this;
}

CORBA_Policy_var::operator const ::CORBA::Policy_ptr &() const // cast
{
  return this->ptr_;
}

CORBA_Policy_var::operator ::CORBA::Policy_ptr &() // cast
{
  return this->ptr_;
}

::CORBA::Policy_ptr
CORBA_Policy_var::operator-> (void) const
{
  return this->ptr_;
}

::CORBA::Policy_ptr
CORBA_Policy_var::in (void) const
{
  return this->ptr_;
}

::CORBA::Policy_ptr &
CORBA_Policy_var::inout (void)
{
  return this->ptr_;
}

::CORBA::Policy_ptr &
CORBA_Policy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA::Policy::_nil ();
  return this->ptr_;
}

::CORBA::Policy_ptr
CORBA_Policy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA::Policy_ptr val = this->ptr_;
  this->ptr_ = ::CORBA::Policy::_nil ();
  return val;
}

::CORBA::Policy_ptr
CORBA_Policy_var::tao_duplicate (CORBA_Policy_ptr p)
{
  return ::CORBA::Policy::_duplicate (p);
}

void
CORBA_Policy_var::tao_release (CORBA_Policy_ptr p)
{
  CORBA::release (p);
}

::CORBA::Policy_ptr
CORBA_Policy_var::tao_nil (void)
{
  return ::CORBA::Policy::_nil ();
}

::CORBA::Policy_ptr
CORBA_Policy_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::CORBA::Policy::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
CORBA_Policy_var::tao_upcast (void *src)
{
  CORBA_Policy **tmp =
    ACE_static_cast (CORBA_Policy **, src);
  return *tmp;
}

// *************************************************************
// Operations for class CORBA::Policy_out
// *************************************************************

CORBA_Policy_out::CORBA_Policy_out (CORBA_Policy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA::Policy::_nil ();
}

CORBA_Policy_out::CORBA_Policy_out (CORBA_Policy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA::Policy::_nil ();
}

CORBA_Policy_out::CORBA_Policy_out (const ::CORBA_Policy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_Policy_out &, p).ptr_)
{}

::CORBA_Policy_out &
CORBA_Policy_out::operator= (const ::CORBA::Policy_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_Policy_out&, p).ptr_;
  return *this;
}

CORBA::Policy_out &
CORBA_Policy_out::operator= (const ::CORBA::Policy_var &p)
{
  this->ptr_ = ::CORBA::Policy::_duplicate (p.ptr ());
  return *this;
}

CORBA::Policy_out &
CORBA_Policy_out::operator= (CORBA_Policy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CORBA_Policy_out::operator ::CORBA::Policy_ptr &() // cast
{
  return this->ptr_;
}

::CORBA::Policy_ptr &
CORBA_Policy_out::ptr (void) // ptr
{
  return this->ptr_;
}

::CORBA::Policy_ptr
CORBA_Policy_out::operator-> (void)
{
  return this->ptr_;
}


#if (TAO_HAS_INTERCEPTORS == 1)
class TAO_ClientRequestInfo_CORBA_Policy_policy_type_get : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_CORBA_Policy_policy_type_get (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual Dynamic::ParameterList * arguments (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual Dynamic::ExceptionList * exceptions (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual CORBA::Any * result (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::PolicyType result);

private:
  TAO_ClientRequestInfo_CORBA_Policy_policy_type_get (const TAO_ClientRequestInfo_CORBA_Policy_policy_type_get &);
  void operator= (const TAO_ClientRequestInfo_CORBA_Policy_policy_type_get &);

  CORBA::PolicyType _result;
};

TAO_ClientRequestInfo_CORBA_Policy_policy_type_get::TAO_ClientRequestInfo_CORBA_Policy_policy_type_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target
    TAO_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_CORBA_Policy_policy_type_get::arguments (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (TAO_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_CORBA_Policy_policy_type_get::exceptions (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (TAO_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return exception_list;
}


CORBA::Any *
TAO_ClientRequestInfo_CORBA_Policy_policy_type_get::result (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any TAO_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  CORBA::Any_var safe_result_any = result_any;

  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void
TAO_ClientRequestInfo_CORBA_Policy_policy_type_get::result (CORBA::PolicyType result)
{
  // update the result
  this->_result = result;
}

class TAO_ClientRequestInfo_CORBA_Policy_copy : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_CORBA_Policy_copy (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual Dynamic::ParameterList * arguments (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual Dynamic::ExceptionList * exceptions (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual CORBA::Any * result (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::Policy_ptr result);

private:
  TAO_ClientRequestInfo_CORBA_Policy_copy (const TAO_ClientRequestInfo_CORBA_Policy_copy &);
  void operator= (const TAO_ClientRequestInfo_CORBA_Policy_copy &);

  CORBA::Policy_ptr _result;
};

TAO_ClientRequestInfo_CORBA_Policy_copy::TAO_ClientRequestInfo_CORBA_Policy_copy (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target
    TAO_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_CORBA_Policy_copy::arguments (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (TAO_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_CORBA_Policy_copy::exceptions (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (TAO_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return exception_list;
}


CORBA::Any *
TAO_ClientRequestInfo_CORBA_Policy_copy::result (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any TAO_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  CORBA::Any_var safe_result_any = result_any;

  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void
TAO_ClientRequestInfo_CORBA_Policy_copy::result (CORBA::Policy_ptr result)
{
  // update the result
  this->_result = result;
}

class TAO_ClientRequestInfo_CORBA_Policy_destroy : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_CORBA_Policy_destroy (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual Dynamic::ParameterList * arguments (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual Dynamic::ExceptionList * exceptions (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual CORBA::Any * result (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_CORBA_Policy_destroy (const TAO_ClientRequestInfo_CORBA_Policy_destroy &);
  void operator= (const TAO_ClientRequestInfo_CORBA_Policy_destroy &);


};

TAO_ClientRequestInfo_CORBA_Policy_destroy::TAO_ClientRequestInfo_CORBA_Policy_destroy (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target
    TAO_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_CORBA_Policy_destroy::arguments (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (TAO_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_CORBA_Policy_destroy::exceptions (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (TAO_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return exception_list;
}


CORBA::Any *
TAO_ClientRequestInfo_CORBA_Policy_destroy::result (TAO_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any TAO_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return result_any;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation.
//

CORBA_TAO_Policy_Proxy_Impl::CORBA_TAO_Policy_Proxy_Impl (void)
{}

CORBA_TAO_Policy_Remote_Proxy_Impl::CORBA_TAO_Policy_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

CORBA::PolicyType CORBA_TAO_Policy_Remote_Proxy_Impl::policy_type (
    CORBA::Object_ptr _collocated_tao_target_
    TAO_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{

  CORBA::PolicyType _tao_retval = 0;


  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);


  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_policy_type",
      16,
      0,
      istub->orb_core ()
    );

  int _invoke_status;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );

#endif  /* TAO_HAS_INTERCEPTORS */

  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;

#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_CORBA_Policy_policy_type_get ri (
        &_tao_call,
        _collocated_tao_target_
         TAO_ENV_ARG_PARAMETER
      );
      ACE_CHECK_RETURN  (_tao_retval);

#endif /* TAO_HAS_INTERCEPTORS */


      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (ri.response_expected (1));

#if TAO_HAS_INTERCEPTORS == 1

      ACE_TRY
        {
          _tao_vfr.send_request (
            &ri
             TAO_ENV_ARG_PARAMETER
          );
          ACE_TRY_CHECK;

          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }

#endif /* TAO_HAS_INTERCEPTORS */

          _tao_call.start (TAO_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
               TAO_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);

          _invoke_status =
            _tao_call.invoke (0, 0 TAO_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );

            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &ri
                   TAO_ENV_ARG_PARAMETER
                );
                ACE_TRY_CHECK;
              )

              continue;
            }

          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_retval)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );

            }

#if TAO_HAS_INTERCEPTORS == 1
          CORBA::PolicyType _tao_retval_info = _tao_retval;
          ri.result (_tao_retval_info);

          ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &ri
             TAO_ENV_ARG_PARAMETER
          );
          ACE_TRY_CHECK;

      }
    ACE_CATCHANY
      {
        ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &ri
           TAO_ENV_ARG_PARAMETER
        );
        ACE_TRY_CHECK;

        PortableInterceptor::ReplyStatus _tao_status =
          ri.reply_status (TAO_ENV_SINGLE_ARG_PARAMETER);
        ACE_TRY_CHECK;

        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN  (_tao_retval);

    PortableInterceptor::ReplyStatus _tao_status =
      ri.reply_status (TAO_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK_RETURN  (_tao_retval);

    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;

#endif  /* TAO_HAS_INTERCEPTORS */

    break;
  }
return _tao_retval;
}

CORBA::Policy_ptr CORBA_TAO_Policy_Remote_Proxy_Impl::copy (
    CORBA::Object_ptr _collocated_tao_target_
    TAO_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{

  CORBA::Policy_ptr _tao_retval = CORBA::Policy::_nil ();
  CORBA::Policy_var _tao_safe_retval (_tao_retval);


  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);


  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "copy",
      4,
      0,
      istub->orb_core ()
    );

  int _invoke_status;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );

#endif  /* TAO_HAS_INTERCEPTORS */

  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;

#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_CORBA_Policy_copy ri (
        &_tao_call,
        _collocated_tao_target_
         TAO_ENV_ARG_PARAMETER
      );
      ACE_CHECK_RETURN (0);

#endif /* TAO_HAS_INTERCEPTORS */


      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (ri.response_expected (1));

#if TAO_HAS_INTERCEPTORS == 1

      ACE_TRY
        {
          _tao_vfr.send_request (
            &ri
             TAO_ENV_ARG_PARAMETER
          );
          ACE_TRY_CHECK;

          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }

#endif /* TAO_HAS_INTERCEPTORS */

          _tao_call.start (TAO_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (0);

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
               TAO_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (0);

          _invoke_status =
            _tao_call.invoke (0, 0 TAO_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (0);

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );

            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &ri
                   TAO_ENV_ARG_PARAMETER
                );
                ACE_TRY_CHECK;
              )

              continue;
            }

          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_safe_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                0
              );

            }

#if TAO_HAS_INTERCEPTORS == 1
          CORBA::Policy_ptr _tao_retval_info = _tao_safe_retval._retn ();
          ri.result (_tao_retval_info);
          _tao_safe_retval = _tao_retval_info;

          ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &ri
             TAO_ENV_ARG_PARAMETER
          );
          ACE_TRY_CHECK;

      }
    ACE_CATCHANY
      {
        ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &ri
           TAO_ENV_ARG_PARAMETER
        );
        ACE_TRY_CHECK;

        PortableInterceptor::ReplyStatus _tao_status =
          ri.reply_status (TAO_ENV_SINGLE_ARG_PARAMETER);
        ACE_TRY_CHECK;

        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN (0);

    PortableInterceptor::ReplyStatus _tao_status =
      ri.reply_status (TAO_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK_RETURN (0);

    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;

#endif  /* TAO_HAS_INTERCEPTORS */

    break;
  }
return _tao_safe_retval._retn ();
}

void CORBA_TAO_Policy_Remote_Proxy_Impl::destroy (
    CORBA::Object_ptr _collocated_tao_target_
    TAO_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{




  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());


  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "destroy",
      7,
      0,
      istub->orb_core ()
    );

  int _invoke_status;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );

#endif  /* TAO_HAS_INTERCEPTORS */

  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;

#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_CORBA_Policy_destroy ri (
        &_tao_call,
        _collocated_tao_target_
         TAO_ENV_ARG_PARAMETER
      );
      ACE_CHECK;

#endif /* TAO_HAS_INTERCEPTORS */


      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (ri.response_expected (1));

#if TAO_HAS_INTERCEPTORS == 1

      ACE_TRY
        {
          _tao_vfr.send_request (
            &ri
             TAO_ENV_ARG_PARAMETER
          );
          ACE_TRY_CHECK;

          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }

#endif /* TAO_HAS_INTERCEPTORS */

          _tao_call.start (TAO_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
               TAO_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          _invoke_status =
            _tao_call.invoke (0, 0 TAO_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
              );

            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &ri
                   TAO_ENV_ARG_PARAMETER
                );
                ACE_TRY_CHECK;
              )

              continue;
            }


#if TAO_HAS_INTERCEPTORS == 1

          ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &ri
             TAO_ENV_ARG_PARAMETER
          );
          ACE_TRY_CHECK;

      }
    ACE_CATCHANY
      {
        ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &ri
           TAO_ENV_ARG_PARAMETER
        );
        ACE_TRY_CHECK;

        PortableInterceptor::ReplyStatus _tao_status =
          ri.reply_status (TAO_ENV_SINGLE_ARG_PARAMETER);
        ACE_TRY_CHECK;

        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;

    PortableInterceptor::ReplyStatus _tao_status =
      ri.reply_status (TAO_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;

    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;

#endif  /* TAO_HAS_INTERCEPTORS */

    break;
  }

}


//
//            End  Base & Remote  Proxy Implemeentation.
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

CORBA_TAO_Policy_Proxy_Broker::CORBA_TAO_Policy_Proxy_Broker (void)
{
}

CORBA_TAO_Policy_Proxy_Broker::~CORBA_TAO_Policy_Proxy_Broker (void)
{
}

CORBA_TAO_Policy_Proxy_Broker * (*CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
CORBA_TAO_Policy_Remote_Proxy_Broker *
CORBA_TAO_Policy_Remote_Proxy_Broker::the_CORBA_TAO_Policy_Remote_Proxy_Broker (void)
{
  static CORBA_TAO_Policy_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

CORBA_TAO_Policy_Remote_Proxy_Broker::CORBA_TAO_Policy_Remote_Proxy_Broker (void)
{
}

CORBA_TAO_Policy_Remote_Proxy_Broker::~CORBA_TAO_Policy_Remote_Proxy_Broker (void)
{
}

CORBA_TAO_Policy_Proxy_Impl&
CORBA_TAO_Policy_Remote_Proxy_Broker::select_proxy (
  ::CORBA::Policy *
  TAO_ENV_ARG_DECL_NOT_USED
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
CORBA_Policy::CORBA_Policy (int collocated)
{
  this->CORBA_Policy_setup_collocation (collocated);
}

// destructor
CORBA_Policy::~CORBA_Policy (void)
{}

void
CORBA_Policy::CORBA_Policy_setup_collocation (int collocated)
{
  if (collocated)
    this->the_CORBA_TAO_Policy_Proxy_Broker_ =
      ::CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_CORBA_TAO_Policy_Proxy_Broker_ =
      CORBA_TAO_Policy_Remote_Proxy_Broker::the_CORBA_TAO_Policy_Remote_Proxy_Broker ();
}

void CORBA_Policy::_tao_any_destructor (void *x)
{
  CORBA_Policy *tmp = ACE_static_cast (CORBA_Policy*,x);
  CORBA::release (tmp);
}

CORBA::Policy_ptr CORBA_Policy::_narrow (
    CORBA::Object_ptr obj
    TAO_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    return CORBA_Policy::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/Policy:1.0" TAO_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (CORBA_Policy::_nil ());
      if (is_a == 0)
        return CORBA_Policy::_nil ();
    }
  return CORBA_Policy::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
}

CORBA::Policy_ptr CORBA_Policy::_unchecked_narrow (
    CORBA::Object_ptr obj
    TAO_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    return CORBA_Policy::_nil ();

  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();

      CORBA_Policy_ptr default_proxy = CORBA_Policy::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer != 0
        )
      {
        ACE_NEW_RETURN (
          default_proxy,
          ::CORBA::Policy (
            stub,
            1,
            obj->_servant ()),

          CORBA_Policy::_nil ());
        }
      if (CORBA::is_nil (default_proxy))
        ACE_NEW_RETURN (default_proxy, ::CORBA::Policy (stub, 0, obj->_servant ()), CORBA_Policy::_nil ());
        return default_proxy;
      }
    else
      return
        ACE_reinterpret_cast
          (
            CORBA_Policy_ptr,
              obj->_tao_QueryInterface
                (
                  ACE_reinterpret_cast
                    (
                      ptr_arith_t,
                      &CORBA_Policy::_tao_class_id
                    )
                )
          );
}

CORBA::Policy_ptr
CORBA_Policy::_duplicate (CORBA_Policy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean CORBA_Policy::_is_a (const CORBA::Char *value TAO_ENV_ARG_DECL)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Policy:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value TAO_ENV_ARG_PARAMETER);
}

void *CORBA::Policy::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &CORBA_Policy::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA_Policy::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/Policy:1.0";
}

CORBA::Boolean
CORBA_Policy::_tao_encode (TAO_OutputCDR &)
{
  return 0;
}

CORBA::Boolean
CORBA_Policy::_tao_decode (TAO_InputCDR &)
{
  return 0;
}

TAO_Cached_Policy_Type
CORBA_Policy::_tao_cached_type (void) const
{
  // By default, all policies are uncached.
  return TAO_CACHED_POLICY_UNCACHED;
}

TAO_Policy_Scope
CORBA_Policy::_tao_scope (void) const
{
  return TAO_POLICY_DEFAULT_SCOPE;
}

CORBA::PolicyType CORBA_Policy::policy_type (
    TAO_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  CORBA_TAO_Policy_Proxy_Impl &proxy =
    this->the_CORBA_TAO_Policy_Proxy_Broker_->select_proxy (this TAO_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return proxy.policy_type (
      this
       TAO_ENV_ARG_PARAMETER
    );
}

CORBA::Policy_ptr CORBA_Policy::copy (
    TAO_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  CORBA_TAO_Policy_Proxy_Impl &proxy =
    this->the_CORBA_TAO_Policy_Proxy_Broker_->select_proxy (this TAO_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);

  return proxy.copy (
      this
       TAO_ENV_ARG_PARAMETER
    );
}

void CORBA::Policy::destroy (
    TAO_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  CORBA_TAO_Policy_Proxy_Impl &proxy =
    this->the_CORBA_TAO_Policy_Proxy_Broker_->select_proxy (this TAO_ENV_ARG_PARAMETER);
  ACE_CHECK;

  proxy.destroy (
      this
       TAO_ENV_ARG_PARAMETER
    );
}

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CS_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CS_

  // The Base_Sequence functions, please see tao/Sequence.h
  void
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_allocate_buffer (CORBA::ULong length)
  {
    CORBA::Policy **tmp = 0;
    tmp = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (length);

    if (this->buffer_ != 0)
    {
      CORBA::Policy **old = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (!this->release_)
            {
              tmp[i] = CORBA::Policy::_duplicate (old[i]);
            }
          else
            {
              tmp[i] = old[i];
            }
        }

      if (this->release_)
        {
          delete[] old;
        }
    }
    this->buffer_ = tmp;
  }

  void
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_deallocate_buffer (void)
  {
    if (this->buffer_ == 0 || this->release_ == 0)
      return;
    CORBA::Policy **tmp = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::Policy::_nil ();
      }

    _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::freebuf (tmp);
    this->buffer_ = 0;
  }

  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::~_TAO_Unbounded_Object_Sequence_CORBA_PolicyList (void)
  {
    this->_deallocate_buffer ();
  }

  void
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
  {
    CORBA::Policy **tmp = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);

    for (CORBA::ULong i = nl; i < ol; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::Policy::_nil ();
      }
  }

  void
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_downcast (
      void* target,
      CORBA_Object *src
      TAO_ENV_ARG_DECL
    )
  {
    CORBA::Policy **tmp = ACE_static_cast (CORBA::Policy**, target);
    *tmp = CORBA::Policy::_narrow (src TAO_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

  CORBA_Object*
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_upcast (void *src) const
  {
    CORBA::Policy **tmp = ACE_static_cast (CORBA::Policy**, src);
    return *tmp;
  }

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_CORBA_POLICYLIST_CS_)
#define _CORBA_POLICYLIST_CS_

// *************************************************************
// CORBA::PolicyList
// *************************************************************

CORBA_PolicyList::CORBA_PolicyList (void)
{}
CORBA_PolicyList::CORBA_PolicyList (CORBA::ULong max) // uses max size
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::Policy,CORBA::Policy_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max)
{}
CORBA_PolicyList::CORBA_PolicyList (CORBA::ULong max, CORBA::ULong length, CORBA::Policy_ptr *buffer, CORBA::Boolean release)
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::Policy,CORBA::Policy_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max, length, buffer, release)
{}
CORBA_PolicyList::CORBA_PolicyList (const CORBA_PolicyList &seq) // copy ctor
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Object_Sequence<CORBA::Policy,CORBA::Policy_var>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (seq)
{}
CORBA_PolicyList::~CORBA_PolicyList (void) // dtor
{}
void CORBA_PolicyList::_tao_any_destructor (void *x)
{
  CORBA_PolicyList *tmp = ACE_static_cast (CORBA_PolicyList*,x);
  delete tmp;
}


#endif /* end #if !defined */

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CS_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CS_

  void
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::_allocate_buffer (CORBA::ULong length)
  {
    CORBA::ULong* tmp = 0;
    tmp = _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::allocbuf (length);

    if (this->buffer_ != 0)
    {
      CORBA::ULong *old = ACE_reinterpret_cast (CORBA::ULong *,this->buffer_);

      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp[i] = old[i];

      if (this->release_)
        _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::freebuf (old);

    }
    this->buffer_ = tmp;
  }

  void
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::_deallocate_buffer (void)
  {
    if (this->buffer_ == 0 || this->release_ == 0)
      return;

    CORBA::ULong *tmp = ACE_reinterpret_cast (CORBA::ULong *,this->buffer_);

    _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::freebuf (tmp);
    this->buffer_ = 0;
  }

  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq::~_TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq (void) // Dtor.
  {
    this->_deallocate_buffer ();
  }


#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_CORBA_POLICYTYPESEQ_CS_)
#define _CORBA_POLICYTYPESEQ_CS_

// *************************************************************
// CORBA::PolicyTypeSeq
// *************************************************************

CORBA_PolicyTypeSeq::CORBA_PolicyTypeSeq (void)
{}
CORBA_PolicyTypeSeq::CORBA_PolicyTypeSeq (CORBA::ULong max) // uses max size
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::ULong>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max)
{}
CORBA_PolicyTypeSeq::CORBA_PolicyTypeSeq (CORBA::ULong max, CORBA::ULong length, CORBA::ULong *buffer, CORBA::Boolean release)
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::ULong>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (max, length, buffer, release)
{}
CORBA_PolicyTypeSeq::CORBA_PolicyTypeSeq (const CORBA_PolicyTypeSeq &seq) // copy ctor
  :
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_CORBA_PolicyTypeSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::ULong>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */
 (seq)
{}
CORBA_PolicyTypeSeq::~CORBA_PolicyTypeSeq (void) // dtor
{}
void CORBA_PolicyTypeSeq::_tao_any_destructor (void *x)
{
  CORBA_PolicyTypeSeq *tmp = ACE_static_cast (CORBA_PolicyTypeSeq*,x);
  delete tmp;
}


#endif /* end #if !defined */

CORBA_PolicyManager_ptr
tao_CORBA_PolicyManager_duplicate (
    CORBA_PolicyManager_ptr p
  )
{
  return CORBA_PolicyManager::_duplicate (p);
}

void
tao_CORBA_PolicyManager_release (
    CORBA_PolicyManager_ptr p
  )
{
  CORBA::release (p);
}

CORBA_PolicyManager_ptr
tao_CORBA_PolicyManager_nil (
    void
  )
{
  return CORBA_PolicyManager::_nil ();
}

CORBA_PolicyManager_ptr
tao_CORBA_PolicyManager_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return CORBA_PolicyManager::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CORBA_PolicyManager_upcast (
    void *src
  )
{
  CORBA_PolicyManager **tmp =
    ACE_static_cast (CORBA_PolicyManager **, src);
  return *tmp;
}

int CORBA_PolicyManager::_tao_class_id = 0;

// *************************************************************
// Operations for class CORBA_PolicyManager_var
// *************************************************************

CORBA_PolicyManager_var::CORBA_PolicyManager_var (void) // default constructor
  : ptr_ (CORBA_PolicyManager::_nil ())
{}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::ptr (void) const
{
  return this->ptr_;
}

CORBA_PolicyManager_var::CORBA_PolicyManager_var (const ::CORBA_PolicyManager_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_PolicyManager::_duplicate (p.ptr ()))
{}

CORBA_PolicyManager_var::~CORBA_PolicyManager_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

CORBA_PolicyManager_var &
CORBA_PolicyManager_var::operator= (CORBA_PolicyManager_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CORBA_PolicyManager_var &
CORBA_PolicyManager_var::operator= (const ::CORBA_PolicyManager_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_PolicyManager::_duplicate (p.ptr ());
  }
  return *this;
}

CORBA_PolicyManager_var::operator const ::CORBA_PolicyManager_ptr &() const // cast
{
  return this->ptr_;
}

CORBA_PolicyManager_var::operator ::CORBA_PolicyManager_ptr &() // cast
{
  return this->ptr_;
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::operator-> (void) const
{
  return this->ptr_;
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::in (void) const
{
  return this->ptr_;
}

::CORBA_PolicyManager_ptr &
CORBA_PolicyManager_var::inout (void)
{
  return this->ptr_;
}

::CORBA_PolicyManager_ptr &
CORBA_PolicyManager_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
  return this->ptr_;
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_PolicyManager_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
  return val;
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::tao_duplicate (CORBA_PolicyManager_ptr p)
{
  return ::CORBA_PolicyManager::_duplicate (p);
}

void
CORBA_PolicyManager_var::tao_release (CORBA_PolicyManager_ptr p)
{
  CORBA::release (p);
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::tao_nil (void)
{
  return ::CORBA_PolicyManager::_nil ();
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::CORBA_PolicyManager::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
CORBA_PolicyManager_var::tao_upcast (void *src)
{
  CORBA_PolicyManager **tmp =
    ACE_static_cast (CORBA_PolicyManager **, src);
  return *tmp;
}

// *************************************************************
// Operations for class CORBA_PolicyManager_out
// *************************************************************

CORBA_PolicyManager_out::CORBA_PolicyManager_out (CORBA_PolicyManager_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
}

CORBA_PolicyManager_out::CORBA_PolicyManager_out (CORBA_PolicyManager_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyManager::_nil ();
}

CORBA_PolicyManager_out::CORBA_PolicyManager_out (const ::CORBA_PolicyManager_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PolicyManager_out &, p).ptr_)
{}

::CORBA_PolicyManager_out &
CORBA_PolicyManager_out::operator= (const ::CORBA_PolicyManager_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PolicyManager_out&, p).ptr_;
  return *this;
}

CORBA_PolicyManager_out &
CORBA_PolicyManager_out::operator= (const ::CORBA_PolicyManager_var &p)
{
  this->ptr_ = ::CORBA_PolicyManager::_duplicate (p.ptr ());
  return *this;
}

CORBA_PolicyManager_out &
CORBA_PolicyManager_out::operator= (CORBA_PolicyManager_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CORBA_PolicyManager_out::operator ::CORBA_PolicyManager_ptr &() // cast
{
  return this->ptr_;
}

::CORBA_PolicyManager_ptr &
CORBA_PolicyManager_out::ptr (void) // ptr
{
  return this->ptr_;
}

::CORBA_PolicyManager_ptr
CORBA_PolicyManager_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
CORBA_PolicyManager::CORBA_PolicyManager ()
{
  }

// destructor
CORBA_PolicyManager::~CORBA_PolicyManager (void)
{}

CORBA_PolicyManager_ptr CORBA_PolicyManager::_narrow (
    CORBA::Object_ptr obj
    TAO_ENV_ARG_DECL
  )
{
  return CORBA::PolicyManager::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
}

CORBA_PolicyManager_ptr CORBA_PolicyManager::_unchecked_narrow (
    CORBA::Object_ptr obj
    TAO_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    return CORBA_PolicyManager::_nil ();

  return
      ACE_reinterpret_cast
        (
          CORBA_PolicyManager_ptr,
            obj->_tao_QueryInterface
              (
                ACE_reinterpret_cast
                  (
                    ptr_arith_t,
                    &CORBA_PolicyManager::_tao_class_id
                  )
              )
        );
}

CORBA_PolicyManager_ptr
CORBA_PolicyManager::_duplicate (CORBA_PolicyManager_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *CORBA_PolicyManager::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &CORBA_PolicyManager::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA_PolicyManager::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/PolicyManager:1.0";
}

CORBA::PolicyCurrent_ptr
tao_CORBA_PolicyCurrent_duplicate (
    CORBA::PolicyCurrent_ptr p
  )
{
  return CORBA::PolicyCurrent::_duplicate (p);
}

void
tao_CORBA_PolicyCurrent_release (
    CORBA::PolicyCurrent_ptr p
  )
{
  CORBA::release (p);
}

CORBA::PolicyCurrent_ptr
tao_CORBA_PolicyCurrent_nil (
    void
  )
{
  return CORBA_PolicyCurrent::_nil ();
}

CORBA_PolicyCurrent_ptr
tao_CORBA_PolicyCurrent_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return CORBA_PolicyCurrent::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CORBA_PolicyCurrent_upcast (
    void *src
  )
{
  CORBA_PolicyCurrent **tmp =
    ACE_static_cast (CORBA_PolicyCurrent **, src);
  return *tmp;
}

int CORBA_PolicyCurrent::_tao_class_id = 0;

// *************************************************************
// Operations for class CORBA_PolicyCurrent_var
// *************************************************************

CORBA_PolicyCurrent_var::CORBA_PolicyCurrent_var (void) // default constructor
  : ptr_ (CORBA_PolicyCurrent::_nil ())
{}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::ptr (void) const
{
  return this->ptr_;
}

CORBA_PolicyCurrent_var::CORBA_PolicyCurrent_var (const ::CORBA_PolicyCurrent_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CORBA_PolicyCurrent::_duplicate (p.ptr ()))
{}

CORBA_PolicyCurrent_var::~CORBA_PolicyCurrent_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

CORBA_PolicyCurrent_var &
CORBA_PolicyCurrent_var::operator= (CORBA_PolicyCurrent_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CORBA_PolicyCurrent_var &
CORBA_PolicyCurrent_var::operator= (const ::CORBA_PolicyCurrent_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CORBA_PolicyCurrent::_duplicate (p.ptr ());
  }
  return *this;
}

CORBA_PolicyCurrent_var::operator const ::CORBA_PolicyCurrent_ptr &() const // cast
{
  return this->ptr_;
}

CORBA_PolicyCurrent_var::operator ::CORBA_PolicyCurrent_ptr &() // cast
{
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::operator-> (void) const
{
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::in (void) const
{
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr &
CORBA_PolicyCurrent_var::inout (void)
{
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr &
CORBA_PolicyCurrent_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CORBA_PolicyCurrent_ptr val = this->ptr_;
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
  return val;
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::tao_duplicate (CORBA_PolicyCurrent_ptr p)
{
  return ::CORBA_PolicyCurrent::_duplicate (p);
}

void
CORBA_PolicyCurrent_var::tao_release (CORBA_PolicyCurrent_ptr p)
{
  CORBA::release (p);
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::tao_nil (void)
{
  return ::CORBA_PolicyCurrent::_nil ();
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_var::tao_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ::CORBA_PolicyCurrent::_narrow (p TAO_ENV_ARG_PARAMETER);
}

CORBA::Object *
CORBA_PolicyCurrent_var::tao_upcast (void *src)
{
  CORBA_PolicyCurrent **tmp =
    ACE_static_cast (CORBA_PolicyCurrent **, src);
  return *tmp;
}

// *************************************************************
// Operations for class CORBA_PolicyCurrent_out
// *************************************************************

CORBA_PolicyCurrent_out::CORBA_PolicyCurrent_out (CORBA_PolicyCurrent_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
}

CORBA_PolicyCurrent_out::CORBA_PolicyCurrent_out (CORBA_PolicyCurrent_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CORBA_PolicyCurrent::_nil ();
}

CORBA_PolicyCurrent_out::CORBA_PolicyCurrent_out (const ::CORBA_PolicyCurrent_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA_PolicyCurrent_out &, p).ptr_)
{}

::CORBA_PolicyCurrent_out &
CORBA_PolicyCurrent_out::operator= (const ::CORBA_PolicyCurrent_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA_PolicyCurrent_out&, p).ptr_;
  return *this;
}

CORBA_PolicyCurrent_out &
CORBA_PolicyCurrent_out::operator= (const ::CORBA_PolicyCurrent_var &p)
{
  this->ptr_ = ::CORBA_PolicyCurrent::_duplicate (p.ptr ());
  return *this;
}

CORBA_PolicyCurrent_out &
CORBA_PolicyCurrent_out::operator= (CORBA_PolicyCurrent_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CORBA_PolicyCurrent_out::operator ::CORBA_PolicyCurrent_ptr &() // cast
{
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr &
CORBA_PolicyCurrent_out::ptr (void) // ptr
{
  return this->ptr_;
}

::CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent_out::operator-> (void)
{
  return this->ptr_;
}


// default constructor
CORBA_PolicyCurrent::CORBA_PolicyCurrent ()
{
  }

// destructor
CORBA_PolicyCurrent::~CORBA_PolicyCurrent (void)
{}

CORBA_PolicyCurrent_ptr CORBA_PolicyCurrent::_narrow (
    CORBA::Object_ptr obj
    TAO_ENV_ARG_DECL
  )
{
  return CORBA_PolicyCurrent::_unchecked_narrow (obj TAO_ENV_ARG_PARAMETER);
}

CORBA_PolicyCurrent_ptr CORBA_PolicyCurrent::_unchecked_narrow (
    CORBA::Object_ptr obj
    TAO_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    return CORBA_PolicyCurrent::_nil ();

  return
      ACE_reinterpret_cast
        (
          CORBA_PolicyCurrent_ptr,
            obj->_tao_QueryInterface
              (
                ACE_reinterpret_cast
                  (
                    ptr_arith_t,
                    &CORBA_PolicyCurrent::_tao_class_id
                  )
              )
        );
}

CORBA_PolicyCurrent_ptr
CORBA_PolicyCurrent::_duplicate (CORBA_PolicyCurrent_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *CORBA_PolicyCurrent::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &CORBA_PolicyCurrent::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &CORBA_PolicyManager::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA_PolicyManager_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &CORBA_Current::_tao_class_id))
    retv = ACE_reinterpret_cast
      (
        void *,
        ACE_static_cast
          (
            CORBA::Current_ptr,
            this
          )
      );
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));

  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CORBA_PolicyCurrent::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/PolicyCurrent:1.0";
}

void operator<<= (CORBA::Any &_tao_any, const CORBA::PolicyError &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_PolicyError,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, CORBA::PolicyError *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_PolicyError,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::PolicyError::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::PolicyError *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const CORBA::PolicyError*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::PolicyError *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (CORBA::_tc_PolicyError TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      return 0; // not equivalent

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = (CORBA::PolicyError *)_tao_any.value ();
      return 1;
    }
    else
    {
      CORBA::PolicyError *tmp;
      ACE_NEW_RETURN (tmp, CORBA::PolicyError, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      CORBA::String_var interface_repository_id;
      if (!(stream >> interface_repository_id.out ()))
        return 0;
      if (ACE_OS::strcmp (
          interface_repository_id.in (),
          "IDL:omg.org/CORBA/PolicyError:1.0"))
        return 0;
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_PolicyError,
            1,
            tmp,
            CORBA::PolicyError::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, const CORBA_InvalidPolicies &_tao_elem) // copying
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_InvalidPolicies,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

void operator<<= (CORBA::Any &_tao_any, CORBA_InvalidPolicies *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_InvalidPolicies,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA_InvalidPolicies::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_InvalidPolicies *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const CORBA_InvalidPolicies*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_InvalidPolicies *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (CORBA::_tc_InvalidPolicies TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      return 0; // not equivalent

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = (CORBA_InvalidPolicies *)_tao_any.value ();
      return 1;
    }
    else
    {
      CORBA_InvalidPolicies *tmp;
      ACE_NEW_RETURN (tmp, CORBA_InvalidPolicies, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      CORBA::String_var interface_repository_id;
      if (!(stream >> interface_repository_id.out ()))
        return 0;
      if (ACE_OS::strcmp (
          interface_repository_id.in (),
          "IDL:omg.org/CORBA/InvalidPolicies:1.0"))
        return 0;
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_InvalidPolicies,
            1,
            tmp,
            CORBA_InvalidPolicies::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, CORBA::Policy_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_Policy,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        CORBA::Policy::_duplicate (_tao_elem),
        CORBA::Policy::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::Policy_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CORBA::Policy::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (CORBA::_tc_Policy TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      return 0; // not equivalent

    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          CORBA::_tc_Policy,
          1,
          _tao_elem,
          CORBA::Policy::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = CORBA::Policy::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = CORBA::Policy::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::PolicyList &_tao_elem
  ) // copying
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_PolicyList,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin ()
      );
  }
}

void operator<<= (CORBA::Any &_tao_any, CORBA::PolicyList *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_PolicyList,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::PolicyList::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::PolicyList *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const CORBA::PolicyList*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::PolicyList *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (CORBA::_tc_PolicyList TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      return 0; // not equivalent

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::PolicyList*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::PolicyList *tmp;
      ACE_NEW_RETURN (tmp, CORBA::PolicyList, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_PolicyList,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::PolicyList::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::PolicyTypeSeq &_tao_elem
  ) // copying
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        CORBA::_tc_PolicyTypeSeq,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin ()
      );
  }
}

void operator<<= (CORBA::Any &_tao_any, CORBA::PolicyTypeSeq *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_PolicyTypeSeq,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      CORBA::PolicyTypeSeq::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::PolicyTypeSeq *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const CORBA::PolicyTypeSeq*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::PolicyTypeSeq *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (CORBA::_tc_PolicyTypeSeq TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      return 0; // not equivalent

    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const CORBA::PolicyTypeSeq*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      CORBA::PolicyTypeSeq *tmp;
      ACE_NEW_RETURN (tmp, CORBA::PolicyTypeSeq, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            CORBA::_tc_PolicyTypeSeq,
            1,
            ACE_static_cast (void *, tmp),
            CORBA::PolicyTypeSeq::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, CORBA::SetOverrideType _tao_elem)
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      CORBA::_tc_SetOverrideType,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::SetOverrideType &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();

    CORBA::Boolean result = type->equivalent (CORBA::_tc_SetOverrideType TAO_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;

    if (!result)
      return 0; // not equivalent

    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      return 1;
    }
  }
  ACE_CATCHANY
  {
    return 0;
  }
  ACE_ENDTRY;
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA_PolicyManager,CORBA_PolicyManager_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA_PolicyManager,CORBA_PolicyManager_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<CORBA_PolicyCurrent,CORBA_PolicyCurrent_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<CORBA_PolicyCurrent,CORBA_PolicyCurrent_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */


#if !defined _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_CPP_
#define _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA_InvalidPolicies::_tao_seq_UShort &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    return strm.write_ushort_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA_InvalidPolicies::_tao_seq_UShort &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len)
      return 1;
    // Add a check to the length of the sequence
    // to make sure it does not exceed the length
    // of the stream. (See bug 58.)
    if (_tao_seq_len > strm.length())
      return 0;
    // retrieve all the elements
    return strm.read_ushort_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
  }
  return 0; // error
}

#endif /* _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_CPP_ */

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Policy_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Policy_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::Policy::_unchecked_narrow (
          obj.in ()
           TAO_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::PolicyList &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm << _tao_sequence[i].in ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::PolicyList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len)
      return 1;
    // Add a check to the length of the sequence
    // to make sure it does not exceed the length
    // of the stream. (See bug 58.)
    if (_tao_seq_len > strm.length())
      return 0;
    // retrieve all the elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::PolicyTypeSeq &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    return strm.write_ulong_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::PolicyTypeSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len)
      return 1;
    // Add a check to the length of the sequence
    // to make sure it does not exceed the length
    // of the stream. (See bug 58.)
    if (_tao_seq_len > strm.length())
      return 0;
    // retrieve all the elements
    return strm.read_ulong_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
  }
  return 0; // error
}
