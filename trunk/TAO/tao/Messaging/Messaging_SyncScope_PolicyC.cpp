// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:323


#include "Messaging_SyncScope_PolicyC.h"
#include "tao/Typecode.h"
#include "tao/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "Messaging_SyncScope_PolicyC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:64

// Arg traits specializations.
namespace TAO
{
}


// TAO_IDL - Generated from
// be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for Messaging::SyncScopePolicy.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
Messaging::SyncScopePolicy_ptr
TAO::Objref_Traits<Messaging::SyncScopePolicy>::tao_duplicate (
    Messaging::SyncScopePolicy_ptr p
  )
{
  return Messaging::SyncScopePolicy::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<Messaging::SyncScopePolicy>::tao_release (
    Messaging::SyncScopePolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
Messaging::SyncScopePolicy_ptr
TAO::Objref_Traits<Messaging::SyncScopePolicy>::tao_nil (void)
{
  return Messaging::SyncScopePolicy::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<Messaging::SyncScopePolicy>::tao_marshal (
    Messaging::SyncScopePolicy_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Messaging__TAO_SyncScopePolicy_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

Messaging::SyncScopePolicy::SyncScopePolicy (void)
{}

Messaging::SyncScopePolicy::~SyncScopePolicy (void)
{}

void 
Messaging::SyncScopePolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  SyncScopePolicy *_tao_tmp_pointer =
    ACE_static_cast (SyncScopePolicy *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

Messaging::SyncScopePolicy_ptr
Messaging::SyncScopePolicy::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return SyncScopePolicy::_nil ();
    }
  
  SyncScopePolicy_ptr proxy =
    dynamic_cast<SyncScopePolicy_ptr> (_tao_objref);
  
  return SyncScopePolicy::_duplicate (proxy);
}

Messaging::SyncScopePolicy_ptr
Messaging::SyncScopePolicy::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return SyncScopePolicy::_nil ();
    }
  
  SyncScopePolicy_ptr proxy =
    dynamic_cast<SyncScopePolicy_ptr> (_tao_objref);
  
  return SyncScopePolicy::_duplicate (proxy);
}

Messaging::SyncScopePolicy_ptr
Messaging::SyncScopePolicy::_duplicate (SyncScopePolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Messaging::SyncScopePolicy::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Messaging/SyncScopePolicy:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* Messaging::SyncScopePolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/Messaging/SyncScopePolicy:1.0";
}

CORBA::Boolean
Messaging::SyncScopePolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Messaging_SyncScopePolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  42,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x4d657373), 
  ACE_NTOHL (0x6167696e), 
  ACE_NTOHL (0x672f5379), 
  ACE_NTOHL (0x6e635363), 
  ACE_NTOHL (0x6f706550), 
  ACE_NTOHL (0x6f6c6963), 
  ACE_NTOHL (0x793a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Messaging/SyncScopePolicy:1.0
    16,
  ACE_NTOHL (0x53796e63), 
  ACE_NTOHL (0x53636f70), 
  ACE_NTOHL (0x65506f6c), 
  ACE_NTOHL (0x69637900),  // name = SyncScopePolicy
  };

static CORBA::TypeCode _tc_TAO_tc_Messaging_SyncScopePolicy (
    CORBA::tk_objref,
    sizeof (_oc_Messaging_SyncScopePolicy),
    (char *) &_oc_Messaging_SyncScopePolicy,
    0,
    sizeof (Messaging::SyncScopePolicy)
  );

namespace Messaging
{
  ::CORBA::TypeCode_ptr _tc_SyncScopePolicy =
    &_tc_TAO_tc_Messaging_SyncScopePolicy;
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<Messaging::SyncScopePolicy>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<Messaging::SyncScopePolicy>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<Messaging::SyncScopePolicy>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    Messaging::SyncScopePolicy_ptr _tao_elem
  )
{
  Messaging::SyncScopePolicy_ptr _tao_objptr =
    Messaging::SyncScopePolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    Messaging::SyncScopePolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<Messaging::SyncScopePolicy>::insert (
      _tao_any,
      Messaging::SyncScopePolicy::_tao_any_destructor,
      Messaging::_tc_SyncScopePolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Messaging::SyncScopePolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<Messaging::SyncScopePolicy>::extract (
        _tao_any,
        Messaging::SyncScopePolicy::_tao_any_destructor,
        Messaging::_tc_SyncScopePolicy,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_root/root.cpp:1633

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO::Objref_Traits<
        Messaging::SyncScopePolicy
      >;

  template class
    TAO_Objref_Var_T<
        Messaging::SyncScopePolicy
      >;
  
  template class
    TAO_Objref_Out_T<
        Messaging::SyncScopePolicy
      >;

  template class
    TAO::Any_Impl_T<
        Messaging::SyncScopePolicy
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO::Objref_Traits< \
        Messaging::SyncScopePolicy \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        Messaging::SyncScopePolicy
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        Messaging::SyncScopePolicy
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        Messaging::SyncScopePolicy \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

