// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_MESSAGING_REBINDPOLICY___CI_)
#define _MESSAGING_REBINDPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_SYNCSCOPEPOLICY___CI_)
#define _MESSAGING_SYNCSCOPEPOLICY___CI_


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class Messaging::PriorityRange_var
// *************************************************************

ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (PriorityRange *p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (const ::Messaging::PriorityRange_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::Messaging::PriorityRange (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
Messaging::PriorityRange_var::PriorityRange_var (const ::Messaging::PriorityRange &p)
{
  ACE_NEW (this->ptr_, ::Messaging::PriorityRange (p));
}

ACE_INLINE
Messaging::PriorityRange_var::~PriorityRange_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE Messaging::PriorityRange_var &
Messaging::PriorityRange_var::operator= (PriorityRange *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::Messaging::PriorityRange_var &
Messaging::PriorityRange_var::operator= (const ::Messaging::PriorityRange_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          PriorityRange *deep_copy =
            new PriorityRange (*p.ptr_);
          
          if (deep_copy != 0)
            {
              PriorityRange *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// fixed-size types only
ACE_INLINE Messaging::PriorityRange_var &
Messaging::PriorityRange_var::operator= (const ::Messaging::PriorityRange &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::Messaging::PriorityRange (p), *this);
  }
  return *this;
}

ACE_INLINE const ::Messaging::PriorityRange *
Messaging::PriorityRange_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange *
Messaging::PriorityRange_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Messaging::PriorityRange_var::operator const ::Messaging::PriorityRange &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PriorityRange_var::operator ::Messaging::PriorityRange &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::PriorityRange_var::operator ::Messaging::PriorityRange &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::Messaging::PriorityRange &
Messaging::PriorityRange_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange &
Messaging::PriorityRange_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::Messaging::PriorityRange &
Messaging::PriorityRange_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange
Messaging::PriorityRange_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::PriorityRange *
Messaging::PriorityRange_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (_MESSAGING_REQUESTPRIORITYPOLICY___CI_)
#define _MESSAGING_REQUESTPRIORITYPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_REPLYPRIORITYPOLICY___CI_)
#define _MESSAGING_REPLYPRIORITYPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_REQUESTSTARTTIMEPOLICY___CI_)
#define _MESSAGING_REQUESTSTARTTIMEPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_REQUESTENDTIMEPOLICY___CI_)
#define _MESSAGING_REQUESTENDTIMEPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_REPLYSTARTTIMEPOLICY___CI_)
#define _MESSAGING_REPLYSTARTTIMEPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_REPLYENDTIMEPOLICY___CI_)
#define _MESSAGING_REPLYENDTIMEPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___CI_)
#define _MESSAGING_RELATIVEREQUESTTIMEOUTPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___CI_)
#define _MESSAGING_RELATIVEROUNDTRIPTIMEOUTPOLICY___CI_


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class Messaging::RoutingTypeRange_var
// *************************************************************

ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (RoutingTypeRange *p)
  : ptr_ (p)
{}

ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (const ::Messaging::RoutingTypeRange_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::Messaging::RoutingTypeRange (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
Messaging::RoutingTypeRange_var::RoutingTypeRange_var (const ::Messaging::RoutingTypeRange &p)
{
  ACE_NEW (this->ptr_, ::Messaging::RoutingTypeRange (p));
}

ACE_INLINE
Messaging::RoutingTypeRange_var::~RoutingTypeRange_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE Messaging::RoutingTypeRange_var &
Messaging::RoutingTypeRange_var::operator= (RoutingTypeRange *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::Messaging::RoutingTypeRange_var &
Messaging::RoutingTypeRange_var::operator= (const ::Messaging::RoutingTypeRange_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          RoutingTypeRange *deep_copy =
            new RoutingTypeRange (*p.ptr_);
          
          if (deep_copy != 0)
            {
              RoutingTypeRange *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// fixed-size types only
ACE_INLINE Messaging::RoutingTypeRange_var &
Messaging::RoutingTypeRange_var::operator= (const ::Messaging::RoutingTypeRange &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::Messaging::RoutingTypeRange (p), *this);
  }
  return *this;
}

ACE_INLINE const ::Messaging::RoutingTypeRange *
Messaging::RoutingTypeRange_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange *
Messaging::RoutingTypeRange_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Messaging::RoutingTypeRange_var::operator const ::Messaging::RoutingTypeRange &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::RoutingTypeRange_var::operator ::Messaging::RoutingTypeRange &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Messaging::RoutingTypeRange_var::operator ::Messaging::RoutingTypeRange &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::Messaging::RoutingTypeRange &
Messaging::RoutingTypeRange_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange &
Messaging::RoutingTypeRange_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::Messaging::RoutingTypeRange &
Messaging::RoutingTypeRange_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange
Messaging::RoutingTypeRange_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::Messaging::RoutingTypeRange *
Messaging::RoutingTypeRange_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (_MESSAGING_ROUTINGPOLICY___CI_)
#define _MESSAGING_ROUTINGPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_MAXHOPSPOLICY___CI_)
#define _MESSAGING_MAXHOPSPOLICY___CI_


#endif /* end #if !defined */


#if !defined (_MESSAGING_QUEUEORDERPOLICY___CI_)
#define _MESSAGING_QUEUEORDERPOLICY___CI_


#endif /* end #if !defined */

#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)

ACE_INLINE
Messaging::ExceptionHolder::ExceptionHolder () // default constructor
{}

ACE_INLINE
Messaging::ExceptionHolder::~ExceptionHolder () // destructor
{}

ACE_INLINE const char* 
Messaging::ExceptionHolder::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Messaging/ExceptionHolder:1.0";
}


#if !defined (_MESSAGING_REPLYHANDLER___CI_)
#define _MESSAGING_REPLYHANDLER___CI_

ACE_INLINE
Messaging::ReplyHandler::ReplyHandler (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Messaging_ReplyHandler_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Messaging::PriorityRange &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.min) &&
    (strm << _tao_aggregate.max)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, Messaging::PriorityRange &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.min) &&
    (strm >> _tao_aggregate.max)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Messaging::RoutingTypeRange &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.min) &&
    (strm << _tao_aggregate.max)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, Messaging::RoutingTypeRange &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.min) &&
    (strm >> _tao_aggregate.max)
  )
    return 1;
  else
    return 0;
  
}

#if defined (__ACE_INLINE__)

#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)

//@@ Boris: begin experimental
TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Messaging::ExceptionHolder *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Messaging::ExceptionHolder *);
}
TAO_NAMESPACE_CLOSE
//@@ Boris: end experimental
#endif /*__ACE_INLINE__*/
TAO_Messaging_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::ExceptionHolder *);
TAO_Messaging_Export CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::ExceptionHolder *&);
TAO_Messaging_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Messaging::ReplyHandler_ptr
  );

TAO_Messaging_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Messaging::ReplyHandler_ptr &
  );

#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
