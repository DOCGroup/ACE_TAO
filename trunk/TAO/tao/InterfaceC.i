/* -*- C++ -*- */
//$Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#ifdef TAO_HAS_INTERFACE_REPOSITORY
ACE_INLINE
CORBA::IRObject::CORBA_IRObject (void) // default constructor
{}

ACE_INLINE
CORBA::IRObject::CORBA_IRObject (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::IRObject::~CORBA_IRObject (void) // destructor
{}


#if !defined (_CORBA_IROBJECT___VAR_CI_)
#define _CORBA_IROBJECT___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::IRObject_var
// *************************************************************

ACE_INLINE
CORBA::IRObject_var::CORBA_IRObject_var (void) // default constructor
  : ptr_ (CORBA::IRObject::_nil ())
{}

ACE_INLINE
CORBA::IRObject_var::CORBA_IRObject_var (CORBA::IRObject_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::IRObject_ptr 
CORBA::IRObject_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::IRObject_var::CORBA_IRObject_var (const CORBA::IRObject_var &p) // copy constructor
  : ptr_ (CORBA::IRObject::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::IRObject_var::~CORBA_IRObject_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::IRObject_var &
CORBA::IRObject_var::operator= (CORBA::IRObject_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::IRObject_var &
CORBA::IRObject_var::operator= (const CORBA::IRObject_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::IRObject::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::IRObject_var::operator const CORBA::IRObject_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::IRObject_var::operator CORBA::IRObject_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr 
CORBA::IRObject_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr
CORBA::IRObject_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr &
CORBA::IRObject_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr &
CORBA::IRObject_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::IRObject::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr 
CORBA::IRObject_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::IRObject_ptr val = this->ptr_;
  this->ptr_ = CORBA::IRObject::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_IROBJECT___OUT_CI_)
#define _CORBA_IROBJECT___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::IRObject_out
// *************************************************************

ACE_INLINE
CORBA::IRObject_out::CORBA_IRObject_out (CORBA::IRObject_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::IRObject::_nil ();
}

ACE_INLINE
CORBA::IRObject_out::CORBA_IRObject_out (CORBA::IRObject_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::IRObject::_nil ();
}

ACE_INLINE
CORBA::IRObject_out::CORBA_IRObject_out (const CORBA::IRObject_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::IRObject_out&,p).ptr_)
{}

ACE_INLINE CORBA::IRObject_out &
CORBA::IRObject_out::operator= (const CORBA::IRObject_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::IRObject_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::IRObject_out &
CORBA::IRObject_out::operator= (const CORBA::IRObject_var &p)
{
  this->ptr_ = CORBA::IRObject::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::IRObject_out &
CORBA::IRObject_out::operator= (CORBA::IRObject_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::IRObject_out::operator CORBA::IRObject_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr &
CORBA::IRObject_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::IRObject_ptr 
CORBA::IRObject_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::Contained::CORBA_Contained (void) // default constructor
{}

ACE_INLINE
CORBA::Contained::CORBA_Contained (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::Contained::~CORBA_Contained (void) // destructor
{}


#if !defined (_CORBA_CONTAINED___VAR_CI_)
#define _CORBA_CONTAINED___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::Contained_var
// *************************************************************

ACE_INLINE
CORBA::Contained_var::CORBA_Contained_var (void) // default constructor
  : ptr_ (CORBA::Contained::_nil ())
{}

ACE_INLINE
CORBA::Contained_var::CORBA_Contained_var (CORBA::Contained_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::Contained_ptr 
CORBA::Contained_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::Contained_var::CORBA_Contained_var (const CORBA::Contained_var &p) // copy constructor
  : ptr_ (CORBA::Contained::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::Contained_var::~CORBA_Contained_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::Contained_var &
CORBA::Contained_var::operator= (CORBA::Contained_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Contained_var &
CORBA::Contained_var::operator= (const CORBA::Contained_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::Contained::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::Contained_var::operator const CORBA::Contained_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Contained_var::operator CORBA::Contained_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr 
CORBA::Contained_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr
CORBA::Contained_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr &
CORBA::Contained_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr &
CORBA::Contained_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::Contained::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr 
CORBA::Contained_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::Contained_ptr val = this->ptr_;
  this->ptr_ = CORBA::Contained::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINED___OUT_CI_)
#define _CORBA_CONTAINED___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::Contained_out
// *************************************************************

ACE_INLINE
CORBA::Contained_out::CORBA_Contained_out (CORBA::Contained_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::Contained::_nil ();
}

ACE_INLINE
CORBA::Contained_out::CORBA_Contained_out (CORBA::Contained_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::Contained::_nil ();
}

ACE_INLINE
CORBA::Contained_out::CORBA_Contained_out (const CORBA::Contained_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Contained_out&,p).ptr_)
{}

ACE_INLINE CORBA::Contained_out &
CORBA::Contained_out::operator= (const CORBA::Contained_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Contained_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Contained_out &
CORBA::Contained_out::operator= (const CORBA::Contained_var &p)
{
  this->ptr_ = CORBA::Contained::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::Contained_out &
CORBA::Contained_out::operator= (CORBA::Contained_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Contained_out::operator CORBA::Contained_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr &
CORBA::Contained_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained_ptr 
CORBA::Contained_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::Contained::Description_var
// *************************************************************

ACE_INLINE
CORBA::Contained::Description_var::Description_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::Contained::Description_var::Description_var (CORBA::Contained::Description *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::Contained::Description_var::Description_var (const CORBA::Contained::Description_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::Contained::Description(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::Contained::Description_var::~Description_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::Contained::Description_var &
CORBA::Contained::Description_var::operator= (CORBA::Contained::Description *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Contained::Description_var &
CORBA::Contained::Description_var::operator= (const CORBA::Contained::Description_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::Contained::Description (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::Contained::Description *
CORBA::Contained::Description_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained::Description *
CORBA::Contained::Description_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Contained::Description_var::operator const CORBA::Contained::Description &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Contained::Description_var::operator CORBA::Contained::Description &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Contained::Description_var::operator CORBA::Contained::Description &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::Contained::Description &
CORBA::Contained::Description_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Contained::Description &
CORBA::Contained::Description_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::Contained::Description *&
CORBA::Contained::Description_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::Contained::Description *
CORBA::Contained::Description_var::_retn (void)
{
  CORBA::Contained::Description *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::Contained::Description *
CORBA::Contained::Description_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::Contained::Description_out
// *************************************************************

ACE_INLINE
CORBA::Contained::Description_out::Description_out (CORBA::Contained::Description *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Contained::Description_out::Description_out (CORBA::Contained::Description_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Contained::Description_out::Description_out (const CORBA::Contained::Description_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Contained::Description_out&,p).ptr_)
{}

ACE_INLINE CORBA::Contained::Description_out &
CORBA::Contained::Description_out::operator= (const CORBA::Contained::Description_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Contained::Description_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Contained::Description_out &
CORBA::Contained::Description_out::operator= (CORBA::Contained::Description *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Contained::Description_out::operator CORBA::Contained::Description *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained::Description *&
CORBA::Contained::Description_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Contained::Description *
CORBA::Contained::Description_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CI_

  ACE_INLINE CORBA::InterfaceDef **
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::InterfaceDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::InterfaceDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::InterfaceDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::freebuf (CORBA::InterfaceDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::InterfaceDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::InterfaceDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (this->maximum_);
    CORBA::InterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::InterfaceDef::_duplicate (tmp2[i]);
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::InterfaceDef **tmp = ACE_reinterpret_cast (CORBA::InterfaceDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::InterfaceDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::InterfaceDef **tmp1 = ACE_reinterpret_cast (CORBA::InterfaceDef **, this->buffer_);
    CORBA::InterfaceDef ** const tmp2 = ACE_reinterpret_cast (CORBA::InterfaceDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::InterfaceDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::InterfaceDef ** const tmp = ACE_reinterpret_cast (CORBA::InterfaceDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::InterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::InterfaceDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::InterfaceDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::InterfaceDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::InterfaceDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::InterfaceDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INTERFACEDEFSEQ_CI_)
#define _CORBA_INTERFACEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::InterfaceDefSeq_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (CORBA::InterfaceDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InterfaceDefSeq_var::CORBA_InterfaceDefSeq_var (const CORBA::InterfaceDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::InterfaceDefSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDefSeq_var::~CORBA_InterfaceDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::InterfaceDefSeq_var &
CORBA::InterfaceDefSeq_var::operator= (CORBA::InterfaceDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::InterfaceDefSeq_var &
CORBA::InterfaceDefSeq_var::operator= (const CORBA::InterfaceDefSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::InterfaceDefSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::InterfaceDefSeq *
CORBA::InterfaceDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDefSeq *
CORBA::InterfaceDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDefSeq_var::operator const CORBA::InterfaceDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDefSeq_var::operator CORBA::InterfaceDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDefSeq_var::operator CORBA::InterfaceDefSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var> 
CORBA::InterfaceDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::InterfaceDefSeq &
CORBA::InterfaceDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::InterfaceDefSeq &
CORBA::InterfaceDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::InterfaceDefSeq *&
CORBA::InterfaceDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDefSeq *
CORBA::InterfaceDefSeq_var::_retn (void)
{
  CORBA::InterfaceDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::InterfaceDefSeq *
CORBA::InterfaceDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::InterfaceDefSeq_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (CORBA::InterfaceDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (CORBA::InterfaceDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDefSeq_out::CORBA_InterfaceDefSeq_out (const CORBA::InterfaceDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::InterfaceDefSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::InterfaceDefSeq_out &
CORBA::InterfaceDefSeq_out::operator= (const CORBA::InterfaceDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::InterfaceDefSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::InterfaceDefSeq_out &
CORBA::InterfaceDefSeq_out::operator= (CORBA::InterfaceDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDefSeq_out::operator CORBA::InterfaceDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDefSeq *&
CORBA::InterfaceDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDefSeq *
CORBA::InterfaceDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::InterfaceDef,CORBA::InterfaceDef_var> 
CORBA::InterfaceDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CI_

  ACE_INLINE CORBA::ValueDef **
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::ValueDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::ValueDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::ValueDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (CORBA::ValueDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ValueDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::ValueDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (this->maximum_);
    CORBA::ValueDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ValueDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::ValueDef::_duplicate (tmp2[i]);
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::ValueDef **tmp = ACE_reinterpret_cast (CORBA::ValueDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::ValueDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ValueDef **tmp1 = ACE_reinterpret_cast (CORBA::ValueDef **, this->buffer_);
    CORBA::ValueDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ValueDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::ValueDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::ValueDef ** const tmp = ACE_reinterpret_cast (CORBA::ValueDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::ValueDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ValueDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ValueDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ValueDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ValueDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEDEFSEQ_CI_)
#define _CORBA_VALUEDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ValueDefSeq_var
// *************************************************************

ACE_INLINE
CORBA::ValueDefSeq_var::CORBA_ValueDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ValueDefSeq_var::CORBA_ValueDefSeq_var (CORBA::ValueDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ValueDefSeq_var::CORBA_ValueDefSeq_var (const CORBA::ValueDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ValueDefSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDefSeq_var::~CORBA_ValueDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ValueDefSeq_var &
CORBA::ValueDefSeq_var::operator= (CORBA::ValueDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueDefSeq_var &
CORBA::ValueDefSeq_var::operator= (const CORBA::ValueDefSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ValueDefSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ValueDefSeq *
CORBA::ValueDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDefSeq *
CORBA::ValueDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueDefSeq_var::operator const CORBA::ValueDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueDefSeq_var::operator CORBA::ValueDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueDefSeq_var::operator CORBA::ValueDefSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var> 
CORBA::ValueDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ValueDefSeq &
CORBA::ValueDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ValueDefSeq &
CORBA::ValueDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ValueDefSeq *&
CORBA::ValueDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDefSeq *
CORBA::ValueDefSeq_var::_retn (void)
{
  CORBA::ValueDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ValueDefSeq *
CORBA::ValueDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueDefSeq_out
// *************************************************************

ACE_INLINE
CORBA::ValueDefSeq_out::CORBA_ValueDefSeq_out (CORBA::ValueDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDefSeq_out::CORBA_ValueDefSeq_out (CORBA::ValueDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDefSeq_out::CORBA_ValueDefSeq_out (const CORBA::ValueDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueDefSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueDefSeq_out &
CORBA::ValueDefSeq_out::operator= (const CORBA::ValueDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueDefSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueDefSeq_out &
CORBA::ValueDefSeq_out::operator= (CORBA::ValueDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueDefSeq_out::operator CORBA::ValueDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDefSeq *&
CORBA::ValueDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDefSeq *
CORBA::ValueDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ValueDef,CORBA::ValueDef_var> 
CORBA::ValueDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CI_

  ACE_INLINE CORBA::Contained **
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::Contained **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::Contained*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::Contained::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::freebuf (CORBA::Contained **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::Contained* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::Contained **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (this->maximum_);
    CORBA::Contained ** const tmp2 = ACE_reinterpret_cast (CORBA::Contained ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::Contained::_duplicate (tmp2[i]);
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::Contained **tmp = ACE_reinterpret_cast (CORBA::Contained **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::Contained::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::Contained **tmp1 = ACE_reinterpret_cast (CORBA::Contained **, this->buffer_);
    CORBA::Contained ** const tmp2 = ACE_reinterpret_cast (CORBA::Contained ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::Contained::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var>
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::Contained ** const tmp = ACE_reinterpret_cast (CORBA::Contained ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::Contained* *
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::Contained **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::Contained**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::Contained**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::Contained* *
  _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::Contained ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_CONTAINEDSEQ_CI_)
#define _CORBA_CONTAINEDSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ContainedSeq_var
// *************************************************************

ACE_INLINE
CORBA::ContainedSeq_var::CORBA_ContainedSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ContainedSeq_var::CORBA_ContainedSeq_var (CORBA::ContainedSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ContainedSeq_var::CORBA_ContainedSeq_var (const CORBA::ContainedSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ContainedSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContainedSeq_var::~CORBA_ContainedSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ContainedSeq_var &
CORBA::ContainedSeq_var::operator= (CORBA::ContainedSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ContainedSeq_var &
CORBA::ContainedSeq_var::operator= (const CORBA::ContainedSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ContainedSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ContainedSeq *
CORBA::ContainedSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ContainedSeq *
CORBA::ContainedSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ContainedSeq_var::operator const CORBA::ContainedSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ContainedSeq_var::operator CORBA::ContainedSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ContainedSeq_var::operator CORBA::ContainedSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var> 
CORBA::ContainedSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ContainedSeq &
CORBA::ContainedSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ContainedSeq &
CORBA::ContainedSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ContainedSeq *&
CORBA::ContainedSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ContainedSeq *
CORBA::ContainedSeq_var::_retn (void)
{
  CORBA::ContainedSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ContainedSeq *
CORBA::ContainedSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ContainedSeq_out
// *************************************************************

ACE_INLINE
CORBA::ContainedSeq_out::CORBA_ContainedSeq_out (CORBA::ContainedSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContainedSeq_out::CORBA_ContainedSeq_out (CORBA::ContainedSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContainedSeq_out::CORBA_ContainedSeq_out (const CORBA::ContainedSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ContainedSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ContainedSeq_out &
CORBA::ContainedSeq_out::operator= (const CORBA::ContainedSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ContainedSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ContainedSeq_out &
CORBA::ContainedSeq_out::operator= (CORBA::ContainedSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ContainedSeq_out::operator CORBA::ContainedSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ContainedSeq *&
CORBA::ContainedSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ContainedSeq *
CORBA::ContainedSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var> 
CORBA::ContainedSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::StructMember_var
// *************************************************************

ACE_INLINE
CORBA::StructMember_var::CORBA_StructMember_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::StructMember_var::CORBA_StructMember_var (CORBA::StructMember *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::StructMember_var::CORBA_StructMember_var (const CORBA::StructMember_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::StructMember(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::StructMember_var::~CORBA_StructMember_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::StructMember_var &
CORBA::StructMember_var::operator= (CORBA::StructMember *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::StructMember_var &
CORBA::StructMember_var::operator= (const CORBA::StructMember_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::StructMember (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::StructMember *
CORBA::StructMember_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMember *
CORBA::StructMember_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::StructMember_var::operator const CORBA::StructMember &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::StructMember_var::operator CORBA::StructMember &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::StructMember_var::operator CORBA::StructMember &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::StructMember &
CORBA::StructMember_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::StructMember &
CORBA::StructMember_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::StructMember *&
CORBA::StructMember_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::StructMember *
CORBA::StructMember_var::_retn (void)
{
  CORBA::StructMember *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::StructMember *
CORBA::StructMember_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::StructMember_out
// *************************************************************

ACE_INLINE
CORBA::StructMember_out::CORBA_StructMember_out (CORBA::StructMember *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::StructMember_out::CORBA_StructMember_out (CORBA::StructMember_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::StructMember_out::CORBA_StructMember_out (const CORBA::StructMember_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::StructMember_out&,p).ptr_)
{}

ACE_INLINE CORBA::StructMember_out &
CORBA::StructMember_out::operator= (const CORBA::StructMember_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::StructMember_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::StructMember_out &
CORBA::StructMember_out::operator= (CORBA::StructMember *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::StructMember_out::operator CORBA::StructMember *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMember *&
CORBA::StructMember_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMember *
CORBA::StructMember_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::StructMember *
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::StructMember[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (CORBA::StructMember *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::StructMember *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (const _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::StructMember *tmp1 = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (this->maximum_);
    CORBA::StructMember * const tmp2 = ACE_reinterpret_cast (CORBA::StructMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_StructMemberSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::StructMember *tmp = ACE_reinterpret_cast (CORBA::StructMember *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::StructMember *tmp1 = ACE_reinterpret_cast (CORBA::StructMember *, this->buffer_);
    CORBA::StructMember * const tmp2 = ACE_reinterpret_cast (CORBA::StructMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::StructMember &
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::StructMember* tmp = ACE_reinterpret_cast(CORBA::StructMember*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::StructMember &
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::StructMember * const tmp = ACE_reinterpret_cast (CORBA::StructMember* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::StructMember *
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::StructMember *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::StructMember*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::StructMember*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::StructMember *
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::StructMember * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::StructMember *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::StructMember *tmp = ACE_reinterpret_cast(CORBA::StructMember*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_STRUCTMEMBERSEQ_CI_)
#define _CORBA_STRUCTMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::StructMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA::StructMemberSeq_var::CORBA_StructMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::StructMemberSeq_var::CORBA_StructMemberSeq_var (CORBA::StructMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::StructMemberSeq_var::CORBA_StructMemberSeq_var (const CORBA::StructMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::StructMemberSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::StructMemberSeq_var::~CORBA_StructMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::StructMemberSeq_var &
CORBA::StructMemberSeq_var::operator= (CORBA::StructMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::StructMemberSeq_var &
CORBA::StructMemberSeq_var::operator= (const CORBA::StructMemberSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::StructMemberSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::StructMemberSeq *
CORBA::StructMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMemberSeq *
CORBA::StructMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::StructMemberSeq_var::operator const CORBA::StructMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::StructMemberSeq_var::operator CORBA::StructMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::StructMemberSeq_var::operator CORBA::StructMemberSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::StructMember &
CORBA::StructMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::StructMemberSeq &
CORBA::StructMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::StructMemberSeq &
CORBA::StructMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::StructMemberSeq *&
CORBA::StructMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::StructMemberSeq *
CORBA::StructMemberSeq_var::_retn (void)
{
  CORBA::StructMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::StructMemberSeq *
CORBA::StructMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::StructMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA::StructMemberSeq_out::CORBA_StructMemberSeq_out (CORBA::StructMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::StructMemberSeq_out::CORBA_StructMemberSeq_out (CORBA::StructMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::StructMemberSeq_out::CORBA_StructMemberSeq_out (const CORBA::StructMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::StructMemberSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::StructMemberSeq_out &
CORBA::StructMemberSeq_out::operator= (const CORBA::StructMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::StructMemberSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::StructMemberSeq_out &
CORBA::StructMemberSeq_out::operator= (CORBA::StructMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::StructMemberSeq_out::operator CORBA::StructMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMemberSeq *&
CORBA::StructMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMemberSeq *
CORBA::StructMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructMember &
CORBA::StructMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::Initializer_var
// *************************************************************

ACE_INLINE
CORBA::Initializer_var::CORBA_Initializer_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::Initializer_var::CORBA_Initializer_var (CORBA::Initializer *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::Initializer_var::CORBA_Initializer_var (const CORBA::Initializer_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::Initializer(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::Initializer_var::~CORBA_Initializer_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::Initializer_var &
CORBA::Initializer_var::operator= (CORBA::Initializer *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Initializer_var &
CORBA::Initializer_var::operator= (const CORBA::Initializer_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::Initializer (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::Initializer *
CORBA::Initializer_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Initializer *
CORBA::Initializer_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Initializer_var::operator const CORBA::Initializer &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Initializer_var::operator CORBA::Initializer &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Initializer_var::operator CORBA::Initializer &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::Initializer &
CORBA::Initializer_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Initializer &
CORBA::Initializer_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::Initializer *&
CORBA::Initializer_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::Initializer *
CORBA::Initializer_var::_retn (void)
{
  CORBA::Initializer *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::Initializer *
CORBA::Initializer_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::Initializer_out
// *************************************************************

ACE_INLINE
CORBA::Initializer_out::CORBA_Initializer_out (CORBA::Initializer *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Initializer_out::CORBA_Initializer_out (CORBA::Initializer_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Initializer_out::CORBA_Initializer_out (const CORBA::Initializer_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Initializer_out&,p).ptr_)
{}

ACE_INLINE CORBA::Initializer_out &
CORBA::Initializer_out::operator= (const CORBA::Initializer_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Initializer_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Initializer_out &
CORBA::Initializer_out::operator= (CORBA::Initializer *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Initializer_out::operator CORBA::Initializer *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Initializer *&
CORBA::Initializer_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Initializer *
CORBA::Initializer_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::Initializer *
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::Initializer[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (CORBA::Initializer *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::Initializer *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::_TAO_Unbounded_Sequence_CORBA_InitializerSeq (const _TAO_Unbounded_Sequence_CORBA_InitializerSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::Initializer *tmp1 = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (this->maximum_);
    CORBA::Initializer * const tmp2 = ACE_reinterpret_cast (CORBA::Initializer * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_InitializerSeq &
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_InitializerSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::Initializer *tmp = ACE_reinterpret_cast (CORBA::Initializer *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::Initializer *tmp1 = ACE_reinterpret_cast (CORBA::Initializer *, this->buffer_);
    CORBA::Initializer * const tmp2 = ACE_reinterpret_cast (CORBA::Initializer * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::Initializer &
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::Initializer* tmp = ACE_reinterpret_cast(CORBA::Initializer*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::Initializer &
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::Initializer * const tmp = ACE_reinterpret_cast (CORBA::Initializer* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::Initializer *
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::Initializer *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::Initializer*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::Initializer*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::Initializer *
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::Initializer * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_InitializerSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::Initializer *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::Initializer *tmp = ACE_reinterpret_cast(CORBA::Initializer*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_INITIALIZERSEQ_CI_)
#define _CORBA_INITIALIZERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::InitializerSeq_var
// *************************************************************

ACE_INLINE
CORBA::InitializerSeq_var::CORBA_InitializerSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InitializerSeq_var::CORBA_InitializerSeq_var (CORBA::InitializerSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InitializerSeq_var::CORBA_InitializerSeq_var (const CORBA::InitializerSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::InitializerSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::InitializerSeq_var::~CORBA_InitializerSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::InitializerSeq_var &
CORBA::InitializerSeq_var::operator= (CORBA::InitializerSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::InitializerSeq_var &
CORBA::InitializerSeq_var::operator= (const CORBA::InitializerSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::InitializerSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::InitializerSeq *
CORBA::InitializerSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::InitializerSeq *
CORBA::InitializerSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::InitializerSeq_var::operator const CORBA::InitializerSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InitializerSeq_var::operator CORBA::InitializerSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InitializerSeq_var::operator CORBA::InitializerSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Initializer &
CORBA::InitializerSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::InitializerSeq &
CORBA::InitializerSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::InitializerSeq &
CORBA::InitializerSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::InitializerSeq *&
CORBA::InitializerSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::InitializerSeq *
CORBA::InitializerSeq_var::_retn (void)
{
  CORBA::InitializerSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::InitializerSeq *
CORBA::InitializerSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::InitializerSeq_out
// *************************************************************

ACE_INLINE
CORBA::InitializerSeq_out::CORBA_InitializerSeq_out (CORBA::InitializerSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InitializerSeq_out::CORBA_InitializerSeq_out (CORBA::InitializerSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InitializerSeq_out::CORBA_InitializerSeq_out (const CORBA::InitializerSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::InitializerSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::InitializerSeq_out &
CORBA::InitializerSeq_out::operator= (const CORBA::InitializerSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::InitializerSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::InitializerSeq_out &
CORBA::InitializerSeq_out::operator= (CORBA::InitializerSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::InitializerSeq_out::operator CORBA::InitializerSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::InitializerSeq *&
CORBA::InitializerSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::InitializerSeq *
CORBA::InitializerSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Initializer &
CORBA::InitializerSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::UnionMember_var
// *************************************************************

ACE_INLINE
CORBA::UnionMember_var::CORBA_UnionMember_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::UnionMember_var::CORBA_UnionMember_var (CORBA::UnionMember *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::UnionMember_var::CORBA_UnionMember_var (const CORBA::UnionMember_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::UnionMember(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::UnionMember_var::~CORBA_UnionMember_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::UnionMember_var &
CORBA::UnionMember_var::operator= (CORBA::UnionMember *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::UnionMember_var &
CORBA::UnionMember_var::operator= (const CORBA::UnionMember_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::UnionMember (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::UnionMember *
CORBA::UnionMember_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMember *
CORBA::UnionMember_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::UnionMember_var::operator const CORBA::UnionMember &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::UnionMember_var::operator CORBA::UnionMember &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::UnionMember_var::operator CORBA::UnionMember &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::UnionMember &
CORBA::UnionMember_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::UnionMember &
CORBA::UnionMember_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::UnionMember *&
CORBA::UnionMember_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMember *
CORBA::UnionMember_var::_retn (void)
{
  CORBA::UnionMember *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::UnionMember *
CORBA::UnionMember_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::UnionMember_out
// *************************************************************

ACE_INLINE
CORBA::UnionMember_out::CORBA_UnionMember_out (CORBA::UnionMember *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::UnionMember_out::CORBA_UnionMember_out (CORBA::UnionMember_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::UnionMember_out::CORBA_UnionMember_out (const CORBA::UnionMember_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::UnionMember_out&,p).ptr_)
{}

ACE_INLINE CORBA::UnionMember_out &
CORBA::UnionMember_out::operator= (const CORBA::UnionMember_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::UnionMember_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::UnionMember_out &
CORBA::UnionMember_out::operator= (CORBA::UnionMember *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::UnionMember_out::operator CORBA::UnionMember *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMember *&
CORBA::UnionMember_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMember *
CORBA::UnionMember_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::UnionMember *
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::UnionMember[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (CORBA::UnionMember *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::UnionMember *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (const _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::UnionMember *tmp1 = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (this->maximum_);
    CORBA::UnionMember * const tmp2 = ACE_reinterpret_cast (CORBA::UnionMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::UnionMember *tmp = ACE_reinterpret_cast (CORBA::UnionMember *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::UnionMember *tmp1 = ACE_reinterpret_cast (CORBA::UnionMember *, this->buffer_);
    CORBA::UnionMember * const tmp2 = ACE_reinterpret_cast (CORBA::UnionMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::UnionMember &
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::UnionMember* tmp = ACE_reinterpret_cast(CORBA::UnionMember*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::UnionMember &
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::UnionMember * const tmp = ACE_reinterpret_cast (CORBA::UnionMember* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::UnionMember *
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::UnionMember *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::UnionMember*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::UnionMember*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::UnionMember *
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::UnionMember * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::UnionMember *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::UnionMember *tmp = ACE_reinterpret_cast(CORBA::UnionMember*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_UNIONMEMBERSEQ_CI_)
#define _CORBA_UNIONMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::UnionMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA::UnionMemberSeq_var::CORBA_UnionMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::UnionMemberSeq_var::CORBA_UnionMemberSeq_var (CORBA::UnionMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::UnionMemberSeq_var::CORBA_UnionMemberSeq_var (const CORBA::UnionMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::UnionMemberSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::UnionMemberSeq_var::~CORBA_UnionMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::UnionMemberSeq_var &
CORBA::UnionMemberSeq_var::operator= (CORBA::UnionMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::UnionMemberSeq_var &
CORBA::UnionMemberSeq_var::operator= (const CORBA::UnionMemberSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::UnionMemberSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::UnionMemberSeq *
CORBA::UnionMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMemberSeq *
CORBA::UnionMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::UnionMemberSeq_var::operator const CORBA::UnionMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::UnionMemberSeq_var::operator CORBA::UnionMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::UnionMemberSeq_var::operator CORBA::UnionMemberSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::UnionMember &
CORBA::UnionMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::UnionMemberSeq &
CORBA::UnionMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::UnionMemberSeq &
CORBA::UnionMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::UnionMemberSeq *&
CORBA::UnionMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMemberSeq *
CORBA::UnionMemberSeq_var::_retn (void)
{
  CORBA::UnionMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::UnionMemberSeq *
CORBA::UnionMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::UnionMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA::UnionMemberSeq_out::CORBA_UnionMemberSeq_out (CORBA::UnionMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::UnionMemberSeq_out::CORBA_UnionMemberSeq_out (CORBA::UnionMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::UnionMemberSeq_out::CORBA_UnionMemberSeq_out (const CORBA::UnionMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::UnionMemberSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::UnionMemberSeq_out &
CORBA::UnionMemberSeq_out::operator= (const CORBA::UnionMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::UnionMemberSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::UnionMemberSeq_out &
CORBA::UnionMemberSeq_out::operator= (CORBA::UnionMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::UnionMemberSeq_out::operator CORBA::UnionMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMemberSeq *&
CORBA::UnionMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMemberSeq *
CORBA::UnionMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionMember &
CORBA::UnionMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMMEMBERSEQ_CI_)
#define _CORBA_ENUMMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::EnumMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA::EnumMemberSeq_var::CORBA_EnumMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::EnumMemberSeq_var::CORBA_EnumMemberSeq_var (CORBA::EnumMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::EnumMemberSeq_var::CORBA_EnumMemberSeq_var (const CORBA::EnumMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::EnumMemberSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::EnumMemberSeq_var::~CORBA_EnumMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::EnumMemberSeq_var &
CORBA::EnumMemberSeq_var::operator= (CORBA::EnumMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::EnumMemberSeq_var &
CORBA::EnumMemberSeq_var::operator= (const CORBA::EnumMemberSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::EnumMemberSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::EnumMemberSeq *
CORBA::EnumMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumMemberSeq *
CORBA::EnumMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::EnumMemberSeq_var::operator const CORBA::EnumMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::EnumMemberSeq_var::operator CORBA::EnumMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::EnumMemberSeq_var::operator CORBA::EnumMemberSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager 
CORBA::EnumMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::EnumMemberSeq &
CORBA::EnumMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::EnumMemberSeq &
CORBA::EnumMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::EnumMemberSeq *&
CORBA::EnumMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::EnumMemberSeq *
CORBA::EnumMemberSeq_var::_retn (void)
{
  CORBA::EnumMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::EnumMemberSeq *
CORBA::EnumMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::EnumMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA::EnumMemberSeq_out::CORBA_EnumMemberSeq_out (CORBA::EnumMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::EnumMemberSeq_out::CORBA_EnumMemberSeq_out (CORBA::EnumMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::EnumMemberSeq_out::CORBA_EnumMemberSeq_out (const CORBA::EnumMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::EnumMemberSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::EnumMemberSeq_out &
CORBA::EnumMemberSeq_out::operator= (const CORBA::EnumMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::EnumMemberSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::EnumMemberSeq_out &
CORBA::EnumMemberSeq_out::operator= (CORBA::EnumMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::EnumMemberSeq_out::operator CORBA::EnumMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumMemberSeq *&
CORBA::EnumMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumMemberSeq *
CORBA::EnumMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager 
CORBA::EnumMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::Container::CORBA_Container (void) // default constructor
{}

ACE_INLINE
CORBA::Container::CORBA_Container (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::Container::~CORBA_Container (void) // destructor
{}


#if !defined (_CORBA_CONTAINER___VAR_CI_)
#define _CORBA_CONTAINER___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::Container_var
// *************************************************************

ACE_INLINE
CORBA::Container_var::CORBA_Container_var (void) // default constructor
  : ptr_ (CORBA::Container::_nil ())
{}

ACE_INLINE
CORBA::Container_var::CORBA_Container_var (CORBA::Container_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::Container_ptr 
CORBA::Container_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::Container_var::CORBA_Container_var (const CORBA::Container_var &p) // copy constructor
  : ptr_ (CORBA::Container::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::Container_var::~CORBA_Container_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::Container_var &
CORBA::Container_var::operator= (CORBA::Container_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Container_var &
CORBA::Container_var::operator= (const CORBA::Container_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::Container::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::Container_var::operator const CORBA::Container_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Container_var::operator CORBA::Container_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr 
CORBA::Container_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr
CORBA::Container_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr &
CORBA::Container_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr &
CORBA::Container_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::Container::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr 
CORBA::Container_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::Container_ptr val = this->ptr_;
  this->ptr_ = CORBA::Container::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONTAINER___OUT_CI_)
#define _CORBA_CONTAINER___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::Container_out
// *************************************************************

ACE_INLINE
CORBA::Container_out::CORBA_Container_out (CORBA::Container_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::Container::_nil ();
}

ACE_INLINE
CORBA::Container_out::CORBA_Container_out (CORBA::Container_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::Container::_nil ();
}

ACE_INLINE
CORBA::Container_out::CORBA_Container_out (const CORBA::Container_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Container_out&,p).ptr_)
{}

ACE_INLINE CORBA::Container_out &
CORBA::Container_out::operator= (const CORBA::Container_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Container_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Container_out &
CORBA::Container_out::operator= (const CORBA::Container_var &p)
{
  this->ptr_ = CORBA::Container::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::Container_out &
CORBA::Container_out::operator= (CORBA::Container_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Container_out::operator CORBA::Container_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr &
CORBA::Container_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container_ptr 
CORBA::Container_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::Container::Description_var
// *************************************************************

ACE_INLINE
CORBA::Container::Description_var::Description_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::Container::Description_var::Description_var (CORBA::Container::Description *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::Container::Description_var::Description_var (const CORBA::Container::Description_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::Container::Description(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::Container::Description_var::~Description_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::Container::Description_var &
CORBA::Container::Description_var::operator= (CORBA::Container::Description *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Container::Description_var &
CORBA::Container::Description_var::operator= (const CORBA::Container::Description_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::Container::Description (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::Container::Description *
CORBA::Container::Description_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::Description *
CORBA::Container::Description_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Container::Description_var::operator const CORBA::Container::Description &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Container::Description_var::operator CORBA::Container::Description &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Container::Description_var::operator CORBA::Container::Description &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::Container::Description &
CORBA::Container::Description_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Container::Description &
CORBA::Container::Description_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::Container::Description *&
CORBA::Container::Description_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::Container::Description *
CORBA::Container::Description_var::_retn (void)
{
  CORBA::Container::Description *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::Container::Description *
CORBA::Container::Description_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::Container::Description_out
// *************************************************************

ACE_INLINE
CORBA::Container::Description_out::Description_out (CORBA::Container::Description *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Container::Description_out::Description_out (CORBA::Container::Description_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Container::Description_out::Description_out (const CORBA::Container::Description_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Container::Description_out&,p).ptr_)
{}

ACE_INLINE CORBA::Container::Description_out &
CORBA::Container::Description_out::operator= (const CORBA::Container::Description_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Container::Description_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Container::Description_out &
CORBA::Container::Description_out::operator= (CORBA::Container::Description *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Container::Description_out::operator CORBA::Container::Description *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::Description *&
CORBA::Container::Description_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::Description *
CORBA::Container::Description_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::Container::Description *
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::Container::Description[size];
  }
  
  ACE_INLINE void CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (CORBA::Container::Description *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::Container::Description *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (const CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::Container::Description *tmp1 = CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (this->maximum_);
    CORBA::Container::Description * const tmp2 = ACE_reinterpret_cast (CORBA::Container::Description * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::operator= (const CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::Container::Description *tmp = ACE_reinterpret_cast (CORBA::Container::Description *, this->buffer_);
        CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (tmp);
        this->buffer_ = CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::Container::Description *tmp1 = ACE_reinterpret_cast (CORBA::Container::Description *, this->buffer_);
    CORBA::Container::Description * const tmp2 = ACE_reinterpret_cast (CORBA::Container::Description * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::Container::Description &
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::Container::Description* tmp = ACE_reinterpret_cast(CORBA::Container::Description*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::Container::Description &
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::Container::Description * const tmp = ACE_reinterpret_cast (CORBA::Container::Description* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::Container::Description *
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::Container::Description *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::Container::Description*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::Container::Description*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::Container::Description *
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::Container::Description * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::Container::Description *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::Container::Description *tmp = ACE_reinterpret_cast(CORBA::Container::Description*,this->buffer_);
      CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CI_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::Container::DescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::Container::DescriptionSeq_var::DescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::Container::DescriptionSeq_var::DescriptionSeq_var (CORBA::Container::DescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::Container::DescriptionSeq_var::DescriptionSeq_var (const CORBA::Container::DescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::Container::DescriptionSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::Container::DescriptionSeq_var::~DescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::Container::DescriptionSeq_var &
CORBA::Container::DescriptionSeq_var::operator= (CORBA::Container::DescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Container::DescriptionSeq_var &
CORBA::Container::DescriptionSeq_var::operator= (const CORBA::Container::DescriptionSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::Container::DescriptionSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::Container::DescriptionSeq *
CORBA::Container::DescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::DescriptionSeq *
CORBA::Container::DescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Container::DescriptionSeq_var::operator const CORBA::Container::DescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Container::DescriptionSeq_var::operator CORBA::Container::DescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::Container::DescriptionSeq_var::operator CORBA::Container::DescriptionSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Container::Description &
CORBA::Container::DescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::Container::DescriptionSeq &
CORBA::Container::DescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Container::DescriptionSeq &
CORBA::Container::DescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::Container::DescriptionSeq *&
CORBA::Container::DescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::Container::DescriptionSeq *
CORBA::Container::DescriptionSeq_var::_retn (void)
{
  CORBA::Container::DescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::Container::DescriptionSeq *
CORBA::Container::DescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::Container::DescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::Container::DescriptionSeq_out::DescriptionSeq_out (CORBA::Container::DescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Container::DescriptionSeq_out::DescriptionSeq_out (CORBA::Container::DescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::Container::DescriptionSeq_out::DescriptionSeq_out (const CORBA::Container::DescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Container::DescriptionSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::Container::DescriptionSeq_out &
CORBA::Container::DescriptionSeq_out::operator= (const CORBA::Container::DescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Container::DescriptionSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Container::DescriptionSeq_out &
CORBA::Container::DescriptionSeq_out::operator= (CORBA::Container::DescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Container::DescriptionSeq_out::operator CORBA::Container::DescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::DescriptionSeq *&
CORBA::Container::DescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::DescriptionSeq *
CORBA::Container::DescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Container::Description &
CORBA::Container::DescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::IDLType::CORBA_IDLType (void) // default constructor
{}

ACE_INLINE
CORBA::IDLType::CORBA_IDLType (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::IDLType::~CORBA_IDLType (void) // destructor
{}


#if !defined (_CORBA_IDLTYPE___VAR_CI_)
#define _CORBA_IDLTYPE___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::IDLType_var
// *************************************************************

ACE_INLINE
CORBA::IDLType_var::CORBA_IDLType_var (void) // default constructor
  : ptr_ (CORBA::IDLType::_nil ())
{}

ACE_INLINE
CORBA::IDLType_var::CORBA_IDLType_var (CORBA::IDLType_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::IDLType_ptr 
CORBA::IDLType_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::IDLType_var::CORBA_IDLType_var (const CORBA::IDLType_var &p) // copy constructor
  : ptr_ (CORBA::IDLType::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::IDLType_var::~CORBA_IDLType_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::IDLType_var &
CORBA::IDLType_var::operator= (CORBA::IDLType_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::IDLType_var &
CORBA::IDLType_var::operator= (const CORBA::IDLType_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::IDLType::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::IDLType_var::operator const CORBA::IDLType_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::IDLType_var::operator CORBA::IDLType_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr 
CORBA::IDLType_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr
CORBA::IDLType_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr &
CORBA::IDLType_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr &
CORBA::IDLType_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::IDLType::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr 
CORBA::IDLType_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::IDLType_ptr val = this->ptr_;
  this->ptr_ = CORBA::IDLType::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_IDLTYPE___OUT_CI_)
#define _CORBA_IDLTYPE___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::IDLType_out
// *************************************************************

ACE_INLINE
CORBA::IDLType_out::CORBA_IDLType_out (CORBA::IDLType_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::IDLType::_nil ();
}

ACE_INLINE
CORBA::IDLType_out::CORBA_IDLType_out (CORBA::IDLType_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::IDLType::_nil ();
}

ACE_INLINE
CORBA::IDLType_out::CORBA_IDLType_out (const CORBA::IDLType_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::IDLType_out&,p).ptr_)
{}

ACE_INLINE CORBA::IDLType_out &
CORBA::IDLType_out::operator= (const CORBA::IDLType_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::IDLType_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::IDLType_out &
CORBA::IDLType_out::operator= (const CORBA::IDLType_var &p)
{
  this->ptr_ = CORBA::IDLType::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::IDLType_out &
CORBA::IDLType_out::operator= (CORBA::IDLType_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::IDLType_out::operator CORBA::IDLType_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr &
CORBA::IDLType_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::IDLType_ptr 
CORBA::IDLType_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::Repository::CORBA_Repository (void) // default constructor
{}

ACE_INLINE
CORBA::Repository::CORBA_Repository (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::Repository::~CORBA_Repository (void) // destructor
{}


#if !defined (_CORBA_REPOSITORY___VAR_CI_)
#define _CORBA_REPOSITORY___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::Repository_var
// *************************************************************

ACE_INLINE
CORBA::Repository_var::CORBA_Repository_var (void) // default constructor
  : ptr_ (CORBA::Repository::_nil ())
{}

ACE_INLINE
CORBA::Repository_var::CORBA_Repository_var (CORBA::Repository_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::Repository_ptr 
CORBA::Repository_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::Repository_var::CORBA_Repository_var (const CORBA::Repository_var &p) // copy constructor
  : ptr_ (CORBA::Repository::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::Repository_var::~CORBA_Repository_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::Repository_var &
CORBA::Repository_var::operator= (CORBA::Repository_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::Repository_var &
CORBA::Repository_var::operator= (const CORBA::Repository_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::Repository::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::Repository_var::operator const CORBA::Repository_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::Repository_var::operator CORBA::Repository_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr 
CORBA::Repository_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr
CORBA::Repository_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr &
CORBA::Repository_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr &
CORBA::Repository_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::Repository::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr 
CORBA::Repository_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::Repository_ptr val = this->ptr_;
  this->ptr_ = CORBA::Repository::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_REPOSITORY___OUT_CI_)
#define _CORBA_REPOSITORY___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::Repository_out
// *************************************************************

ACE_INLINE
CORBA::Repository_out::CORBA_Repository_out (CORBA::Repository_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::Repository::_nil ();
}

ACE_INLINE
CORBA::Repository_out::CORBA_Repository_out (CORBA::Repository_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::Repository::_nil ();
}

ACE_INLINE
CORBA::Repository_out::CORBA_Repository_out (const CORBA::Repository_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::Repository_out&,p).ptr_)
{}

ACE_INLINE CORBA::Repository_out &
CORBA::Repository_out::operator= (const CORBA::Repository_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::Repository_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::Repository_out &
CORBA::Repository_out::operator= (const CORBA::Repository_var &p)
{
  this->ptr_ = CORBA::Repository::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::Repository_out &
CORBA::Repository_out::operator= (CORBA::Repository_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::Repository_out::operator CORBA::Repository_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr &
CORBA::Repository_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::Repository_ptr 
CORBA::Repository_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::ModuleDef::CORBA_ModuleDef (void) // default constructor
{}

ACE_INLINE
CORBA::ModuleDef::CORBA_ModuleDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ModuleDef::~CORBA_ModuleDef (void) // destructor
{}


#if !defined (_CORBA_MODULEDEF___VAR_CI_)
#define _CORBA_MODULEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ModuleDef_var
// *************************************************************

ACE_INLINE
CORBA::ModuleDef_var::CORBA_ModuleDef_var (void) // default constructor
  : ptr_ (CORBA::ModuleDef::_nil ())
{}

ACE_INLINE
CORBA::ModuleDef_var::CORBA_ModuleDef_var (CORBA::ModuleDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ModuleDef_ptr 
CORBA::ModuleDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ModuleDef_var::CORBA_ModuleDef_var (const CORBA::ModuleDef_var &p) // copy constructor
  : ptr_ (CORBA::ModuleDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ModuleDef_var::~CORBA_ModuleDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ModuleDef_var &
CORBA::ModuleDef_var::operator= (CORBA::ModuleDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ModuleDef_var &
CORBA::ModuleDef_var::operator= (const CORBA::ModuleDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ModuleDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ModuleDef_var::operator const CORBA::ModuleDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ModuleDef_var::operator CORBA::ModuleDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr 
CORBA::ModuleDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr
CORBA::ModuleDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr &
CORBA::ModuleDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr &
CORBA::ModuleDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ModuleDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr 
CORBA::ModuleDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ModuleDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ModuleDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_MODULEDEF___OUT_CI_)
#define _CORBA_MODULEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ModuleDef_out
// *************************************************************

ACE_INLINE
CORBA::ModuleDef_out::CORBA_ModuleDef_out (CORBA::ModuleDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ModuleDef::_nil ();
}

ACE_INLINE
CORBA::ModuleDef_out::CORBA_ModuleDef_out (CORBA::ModuleDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ModuleDef::_nil ();
}

ACE_INLINE
CORBA::ModuleDef_out::CORBA_ModuleDef_out (const CORBA::ModuleDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ModuleDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ModuleDef_out &
CORBA::ModuleDef_out::operator= (const CORBA::ModuleDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ModuleDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ModuleDef_out &
CORBA::ModuleDef_out::operator= (const CORBA::ModuleDef_var &p)
{
  this->ptr_ = CORBA::ModuleDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ModuleDef_out &
CORBA::ModuleDef_out::operator= (CORBA::ModuleDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ModuleDef_out::operator CORBA::ModuleDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr &
CORBA::ModuleDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDef_ptr 
CORBA::ModuleDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::ModuleDescription_var
// *************************************************************

ACE_INLINE
CORBA::ModuleDescription_var::CORBA_ModuleDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ModuleDescription_var::CORBA_ModuleDescription_var (CORBA::ModuleDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ModuleDescription_var::CORBA_ModuleDescription_var (const CORBA::ModuleDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ModuleDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ModuleDescription_var::~CORBA_ModuleDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ModuleDescription_var &
CORBA::ModuleDescription_var::operator= (CORBA::ModuleDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ModuleDescription_var &
CORBA::ModuleDescription_var::operator= (const CORBA::ModuleDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ModuleDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ModuleDescription *
CORBA::ModuleDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDescription *
CORBA::ModuleDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ModuleDescription_var::operator const CORBA::ModuleDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ModuleDescription_var::operator CORBA::ModuleDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ModuleDescription_var::operator CORBA::ModuleDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ModuleDescription &
CORBA::ModuleDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ModuleDescription &
CORBA::ModuleDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ModuleDescription *&
CORBA::ModuleDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDescription *
CORBA::ModuleDescription_var::_retn (void)
{
  CORBA::ModuleDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ModuleDescription *
CORBA::ModuleDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ModuleDescription_out
// *************************************************************

ACE_INLINE
CORBA::ModuleDescription_out::CORBA_ModuleDescription_out (CORBA::ModuleDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ModuleDescription_out::CORBA_ModuleDescription_out (CORBA::ModuleDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ModuleDescription_out::CORBA_ModuleDescription_out (const CORBA::ModuleDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ModuleDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::ModuleDescription_out &
CORBA::ModuleDescription_out::operator= (const CORBA::ModuleDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ModuleDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ModuleDescription_out &
CORBA::ModuleDescription_out::operator= (CORBA::ModuleDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ModuleDescription_out::operator CORBA::ModuleDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDescription *&
CORBA::ModuleDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ModuleDescription *
CORBA::ModuleDescription_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ConstantDef::CORBA_ConstantDef (void) // default constructor
{}

ACE_INLINE
CORBA::ConstantDef::CORBA_ConstantDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ConstantDef::~CORBA_ConstantDef (void) // destructor
{}


#if !defined (_CORBA_CONSTANTDEF___VAR_CI_)
#define _CORBA_CONSTANTDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ConstantDef_var
// *************************************************************

ACE_INLINE
CORBA::ConstantDef_var::CORBA_ConstantDef_var (void) // default constructor
  : ptr_ (CORBA::ConstantDef::_nil ())
{}

ACE_INLINE
CORBA::ConstantDef_var::CORBA_ConstantDef_var (CORBA::ConstantDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ConstantDef_ptr 
CORBA::ConstantDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ConstantDef_var::CORBA_ConstantDef_var (const CORBA::ConstantDef_var &p) // copy constructor
  : ptr_ (CORBA::ConstantDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ConstantDef_var::~CORBA_ConstantDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ConstantDef_var &
CORBA::ConstantDef_var::operator= (CORBA::ConstantDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ConstantDef_var &
CORBA::ConstantDef_var::operator= (const CORBA::ConstantDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ConstantDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ConstantDef_var::operator const CORBA::ConstantDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ConstantDef_var::operator CORBA::ConstantDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr 
CORBA::ConstantDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr
CORBA::ConstantDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr &
CORBA::ConstantDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr &
CORBA::ConstantDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ConstantDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr 
CORBA::ConstantDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ConstantDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ConstantDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONSTANTDEF___OUT_CI_)
#define _CORBA_CONSTANTDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ConstantDef_out
// *************************************************************

ACE_INLINE
CORBA::ConstantDef_out::CORBA_ConstantDef_out (CORBA::ConstantDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ConstantDef::_nil ();
}

ACE_INLINE
CORBA::ConstantDef_out::CORBA_ConstantDef_out (CORBA::ConstantDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ConstantDef::_nil ();
}

ACE_INLINE
CORBA::ConstantDef_out::CORBA_ConstantDef_out (const CORBA::ConstantDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ConstantDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ConstantDef_out &
CORBA::ConstantDef_out::operator= (const CORBA::ConstantDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ConstantDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ConstantDef_out &
CORBA::ConstantDef_out::operator= (const CORBA::ConstantDef_var &p)
{
  this->ptr_ = CORBA::ConstantDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ConstantDef_out &
CORBA::ConstantDef_out::operator= (CORBA::ConstantDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ConstantDef_out::operator CORBA::ConstantDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr &
CORBA::ConstantDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDef_ptr 
CORBA::ConstantDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::ConstantDescription_var
// *************************************************************

ACE_INLINE
CORBA::ConstantDescription_var::CORBA_ConstantDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ConstantDescription_var::CORBA_ConstantDescription_var (CORBA::ConstantDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ConstantDescription_var::CORBA_ConstantDescription_var (const CORBA::ConstantDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ConstantDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ConstantDescription_var::~CORBA_ConstantDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ConstantDescription_var &
CORBA::ConstantDescription_var::operator= (CORBA::ConstantDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ConstantDescription_var &
CORBA::ConstantDescription_var::operator= (const CORBA::ConstantDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ConstantDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ConstantDescription *
CORBA::ConstantDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDescription *
CORBA::ConstantDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ConstantDescription_var::operator const CORBA::ConstantDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ConstantDescription_var::operator CORBA::ConstantDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ConstantDescription_var::operator CORBA::ConstantDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ConstantDescription &
CORBA::ConstantDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ConstantDescription &
CORBA::ConstantDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ConstantDescription *&
CORBA::ConstantDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDescription *
CORBA::ConstantDescription_var::_retn (void)
{
  CORBA::ConstantDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ConstantDescription *
CORBA::ConstantDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ConstantDescription_out
// *************************************************************

ACE_INLINE
CORBA::ConstantDescription_out::CORBA_ConstantDescription_out (CORBA::ConstantDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ConstantDescription_out::CORBA_ConstantDescription_out (CORBA::ConstantDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ConstantDescription_out::CORBA_ConstantDescription_out (const CORBA::ConstantDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ConstantDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::ConstantDescription_out &
CORBA::ConstantDescription_out::operator= (const CORBA::ConstantDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ConstantDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ConstantDescription_out &
CORBA::ConstantDescription_out::operator= (CORBA::ConstantDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ConstantDescription_out::operator CORBA::ConstantDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDescription *&
CORBA::ConstantDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ConstantDescription *
CORBA::ConstantDescription_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::TypedefDef::CORBA_TypedefDef (void) // default constructor
{}

ACE_INLINE
CORBA::TypedefDef::CORBA_TypedefDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::TypedefDef::~CORBA_TypedefDef (void) // destructor
{}


#if !defined (_CORBA_TYPEDEFDEF___VAR_CI_)
#define _CORBA_TYPEDEFDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::TypedefDef_var
// *************************************************************

ACE_INLINE
CORBA::TypedefDef_var::CORBA_TypedefDef_var (void) // default constructor
  : ptr_ (CORBA::TypedefDef::_nil ())
{}

ACE_INLINE
CORBA::TypedefDef_var::CORBA_TypedefDef_var (CORBA::TypedefDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::TypedefDef_ptr 
CORBA::TypedefDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::TypedefDef_var::CORBA_TypedefDef_var (const CORBA::TypedefDef_var &p) // copy constructor
  : ptr_ (CORBA::TypedefDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::TypedefDef_var::~CORBA_TypedefDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::TypedefDef_var &
CORBA::TypedefDef_var::operator= (CORBA::TypedefDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::TypedefDef_var &
CORBA::TypedefDef_var::operator= (const CORBA::TypedefDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::TypedefDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::TypedefDef_var::operator const CORBA::TypedefDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::TypedefDef_var::operator CORBA::TypedefDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr 
CORBA::TypedefDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr
CORBA::TypedefDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr &
CORBA::TypedefDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr &
CORBA::TypedefDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::TypedefDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr 
CORBA::TypedefDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::TypedefDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::TypedefDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_TYPEDEFDEF___OUT_CI_)
#define _CORBA_TYPEDEFDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::TypedefDef_out
// *************************************************************

ACE_INLINE
CORBA::TypedefDef_out::CORBA_TypedefDef_out (CORBA::TypedefDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::TypedefDef::_nil ();
}

ACE_INLINE
CORBA::TypedefDef_out::CORBA_TypedefDef_out (CORBA::TypedefDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::TypedefDef::_nil ();
}

ACE_INLINE
CORBA::TypedefDef_out::CORBA_TypedefDef_out (const CORBA::TypedefDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::TypedefDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::TypedefDef_out &
CORBA::TypedefDef_out::operator= (const CORBA::TypedefDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::TypedefDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::TypedefDef_out &
CORBA::TypedefDef_out::operator= (const CORBA::TypedefDef_var &p)
{
  this->ptr_ = CORBA::TypedefDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::TypedefDef_out &
CORBA::TypedefDef_out::operator= (CORBA::TypedefDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::TypedefDef_out::operator CORBA::TypedefDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr &
CORBA::TypedefDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypedefDef_ptr 
CORBA::TypedefDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::TypeDescription_var
// *************************************************************

ACE_INLINE
CORBA::TypeDescription_var::CORBA_TypeDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::TypeDescription_var::CORBA_TypeDescription_var (CORBA::TypeDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::TypeDescription_var::CORBA_TypeDescription_var (const CORBA::TypeDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::TypeDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::TypeDescription_var::~CORBA_TypeDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::TypeDescription_var &
CORBA::TypeDescription_var::operator= (CORBA::TypeDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::TypeDescription_var &
CORBA::TypeDescription_var::operator= (const CORBA::TypeDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::TypeDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::TypeDescription *
CORBA::TypeDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypeDescription *
CORBA::TypeDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::TypeDescription_var::operator const CORBA::TypeDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::TypeDescription_var::operator CORBA::TypeDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::TypeDescription_var::operator CORBA::TypeDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::TypeDescription &
CORBA::TypeDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::TypeDescription &
CORBA::TypeDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::TypeDescription *&
CORBA::TypeDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::TypeDescription *
CORBA::TypeDescription_var::_retn (void)
{
  CORBA::TypeDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::TypeDescription *
CORBA::TypeDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::TypeDescription_out
// *************************************************************

ACE_INLINE
CORBA::TypeDescription_out::CORBA_TypeDescription_out (CORBA::TypeDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::TypeDescription_out::CORBA_TypeDescription_out (CORBA::TypeDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::TypeDescription_out::CORBA_TypeDescription_out (const CORBA::TypeDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::TypeDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::TypeDescription_out &
CORBA::TypeDescription_out::operator= (const CORBA::TypeDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::TypeDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::TypeDescription_out &
CORBA::TypeDescription_out::operator= (CORBA::TypeDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::TypeDescription_out::operator CORBA::TypeDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypeDescription *&
CORBA::TypeDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::TypeDescription *
CORBA::TypeDescription_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::StructDef::CORBA_StructDef (void) // default constructor
{}

ACE_INLINE
CORBA::StructDef::CORBA_StructDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::StructDef::~CORBA_StructDef (void) // destructor
{}


#if !defined (_CORBA_STRUCTDEF___VAR_CI_)
#define _CORBA_STRUCTDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::StructDef_var
// *************************************************************

ACE_INLINE
CORBA::StructDef_var::CORBA_StructDef_var (void) // default constructor
  : ptr_ (CORBA::StructDef::_nil ())
{}

ACE_INLINE
CORBA::StructDef_var::CORBA_StructDef_var (CORBA::StructDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::StructDef_ptr 
CORBA::StructDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::StructDef_var::CORBA_StructDef_var (const CORBA::StructDef_var &p) // copy constructor
  : ptr_ (CORBA::StructDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::StructDef_var::~CORBA_StructDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::StructDef_var &
CORBA::StructDef_var::operator= (CORBA::StructDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::StructDef_var &
CORBA::StructDef_var::operator= (const CORBA::StructDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::StructDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::StructDef_var::operator const CORBA::StructDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::StructDef_var::operator CORBA::StructDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr 
CORBA::StructDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr
CORBA::StructDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr &
CORBA::StructDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr &
CORBA::StructDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::StructDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr 
CORBA::StructDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::StructDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::StructDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_STRUCTDEF___OUT_CI_)
#define _CORBA_STRUCTDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::StructDef_out
// *************************************************************

ACE_INLINE
CORBA::StructDef_out::CORBA_StructDef_out (CORBA::StructDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::StructDef::_nil ();
}

ACE_INLINE
CORBA::StructDef_out::CORBA_StructDef_out (CORBA::StructDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::StructDef::_nil ();
}

ACE_INLINE
CORBA::StructDef_out::CORBA_StructDef_out (const CORBA::StructDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::StructDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::StructDef_out &
CORBA::StructDef_out::operator= (const CORBA::StructDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::StructDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::StructDef_out &
CORBA::StructDef_out::operator= (const CORBA::StructDef_var &p)
{
  this->ptr_ = CORBA::StructDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::StructDef_out &
CORBA::StructDef_out::operator= (CORBA::StructDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::StructDef_out::operator CORBA::StructDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr &
CORBA::StructDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::StructDef_ptr 
CORBA::StructDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::UnionDef::CORBA_UnionDef (void) // default constructor
{}

ACE_INLINE
CORBA::UnionDef::CORBA_UnionDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::UnionDef::~CORBA_UnionDef (void) // destructor
{}


#if !defined (_CORBA_UNIONDEF___VAR_CI_)
#define _CORBA_UNIONDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::UnionDef_var
// *************************************************************

ACE_INLINE
CORBA::UnionDef_var::CORBA_UnionDef_var (void) // default constructor
  : ptr_ (CORBA::UnionDef::_nil ())
{}

ACE_INLINE
CORBA::UnionDef_var::CORBA_UnionDef_var (CORBA::UnionDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::UnionDef_ptr 
CORBA::UnionDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::UnionDef_var::CORBA_UnionDef_var (const CORBA::UnionDef_var &p) // copy constructor
  : ptr_ (CORBA::UnionDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::UnionDef_var::~CORBA_UnionDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::UnionDef_var &
CORBA::UnionDef_var::operator= (CORBA::UnionDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::UnionDef_var &
CORBA::UnionDef_var::operator= (const CORBA::UnionDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::UnionDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::UnionDef_var::operator const CORBA::UnionDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::UnionDef_var::operator CORBA::UnionDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr 
CORBA::UnionDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr
CORBA::UnionDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr &
CORBA::UnionDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr &
CORBA::UnionDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::UnionDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr 
CORBA::UnionDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::UnionDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::UnionDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_UNIONDEF___OUT_CI_)
#define _CORBA_UNIONDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::UnionDef_out
// *************************************************************

ACE_INLINE
CORBA::UnionDef_out::CORBA_UnionDef_out (CORBA::UnionDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::UnionDef::_nil ();
}

ACE_INLINE
CORBA::UnionDef_out::CORBA_UnionDef_out (CORBA::UnionDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::UnionDef::_nil ();
}

ACE_INLINE
CORBA::UnionDef_out::CORBA_UnionDef_out (const CORBA::UnionDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::UnionDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::UnionDef_out &
CORBA::UnionDef_out::operator= (const CORBA::UnionDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::UnionDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::UnionDef_out &
CORBA::UnionDef_out::operator= (const CORBA::UnionDef_var &p)
{
  this->ptr_ = CORBA::UnionDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::UnionDef_out &
CORBA::UnionDef_out::operator= (CORBA::UnionDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::UnionDef_out::operator CORBA::UnionDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr &
CORBA::UnionDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::UnionDef_ptr 
CORBA::UnionDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::EnumDef::CORBA_EnumDef (void) // default constructor
{}

ACE_INLINE
CORBA::EnumDef::CORBA_EnumDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::EnumDef::~CORBA_EnumDef (void) // destructor
{}


#if !defined (_CORBA_ENUMDEF___VAR_CI_)
#define _CORBA_ENUMDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::EnumDef_var
// *************************************************************

ACE_INLINE
CORBA::EnumDef_var::CORBA_EnumDef_var (void) // default constructor
  : ptr_ (CORBA::EnumDef::_nil ())
{}

ACE_INLINE
CORBA::EnumDef_var::CORBA_EnumDef_var (CORBA::EnumDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::EnumDef_ptr 
CORBA::EnumDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::EnumDef_var::CORBA_EnumDef_var (const CORBA::EnumDef_var &p) // copy constructor
  : ptr_ (CORBA::EnumDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::EnumDef_var::~CORBA_EnumDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::EnumDef_var &
CORBA::EnumDef_var::operator= (CORBA::EnumDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::EnumDef_var &
CORBA::EnumDef_var::operator= (const CORBA::EnumDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::EnumDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::EnumDef_var::operator const CORBA::EnumDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::EnumDef_var::operator CORBA::EnumDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr 
CORBA::EnumDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr
CORBA::EnumDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr &
CORBA::EnumDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr &
CORBA::EnumDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::EnumDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr 
CORBA::EnumDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::EnumDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::EnumDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ENUMDEF___OUT_CI_)
#define _CORBA_ENUMDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::EnumDef_out
// *************************************************************

ACE_INLINE
CORBA::EnumDef_out::CORBA_EnumDef_out (CORBA::EnumDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::EnumDef::_nil ();
}

ACE_INLINE
CORBA::EnumDef_out::CORBA_EnumDef_out (CORBA::EnumDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::EnumDef::_nil ();
}

ACE_INLINE
CORBA::EnumDef_out::CORBA_EnumDef_out (const CORBA::EnumDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::EnumDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::EnumDef_out &
CORBA::EnumDef_out::operator= (const CORBA::EnumDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::EnumDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::EnumDef_out &
CORBA::EnumDef_out::operator= (const CORBA::EnumDef_var &p)
{
  this->ptr_ = CORBA::EnumDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::EnumDef_out &
CORBA::EnumDef_out::operator= (CORBA::EnumDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::EnumDef_out::operator CORBA::EnumDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr &
CORBA::EnumDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::EnumDef_ptr 
CORBA::EnumDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::AliasDef::CORBA_AliasDef (void) // default constructor
{}

ACE_INLINE
CORBA::AliasDef::CORBA_AliasDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::AliasDef::~CORBA_AliasDef (void) // destructor
{}


#if !defined (_CORBA_ALIASDEF___VAR_CI_)
#define _CORBA_ALIASDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::AliasDef_var
// *************************************************************

ACE_INLINE
CORBA::AliasDef_var::CORBA_AliasDef_var (void) // default constructor
  : ptr_ (CORBA::AliasDef::_nil ())
{}

ACE_INLINE
CORBA::AliasDef_var::CORBA_AliasDef_var (CORBA::AliasDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::AliasDef_ptr 
CORBA::AliasDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AliasDef_var::CORBA_AliasDef_var (const CORBA::AliasDef_var &p) // copy constructor
  : ptr_ (CORBA::AliasDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::AliasDef_var::~CORBA_AliasDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::AliasDef_var &
CORBA::AliasDef_var::operator= (CORBA::AliasDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::AliasDef_var &
CORBA::AliasDef_var::operator= (const CORBA::AliasDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::AliasDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::AliasDef_var::operator const CORBA::AliasDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::AliasDef_var::operator CORBA::AliasDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr 
CORBA::AliasDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr
CORBA::AliasDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr &
CORBA::AliasDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr &
CORBA::AliasDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::AliasDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr 
CORBA::AliasDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::AliasDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::AliasDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ALIASDEF___OUT_CI_)
#define _CORBA_ALIASDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::AliasDef_out
// *************************************************************

ACE_INLINE
CORBA::AliasDef_out::CORBA_AliasDef_out (CORBA::AliasDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::AliasDef::_nil ();
}

ACE_INLINE
CORBA::AliasDef_out::CORBA_AliasDef_out (CORBA::AliasDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::AliasDef::_nil ();
}

ACE_INLINE
CORBA::AliasDef_out::CORBA_AliasDef_out (const CORBA::AliasDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::AliasDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::AliasDef_out &
CORBA::AliasDef_out::operator= (const CORBA::AliasDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::AliasDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::AliasDef_out &
CORBA::AliasDef_out::operator= (const CORBA::AliasDef_var &p)
{
  this->ptr_ = CORBA::AliasDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::AliasDef_out &
CORBA::AliasDef_out::operator= (CORBA::AliasDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::AliasDef_out::operator CORBA::AliasDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr &
CORBA::AliasDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::AliasDef_ptr 
CORBA::AliasDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::PrimitiveDef::CORBA_PrimitiveDef (void) // default constructor
{}

ACE_INLINE
CORBA::PrimitiveDef::CORBA_PrimitiveDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::PrimitiveDef::~CORBA_PrimitiveDef (void) // destructor
{}


#if !defined (_CORBA_PRIMITIVEDEF___VAR_CI_)
#define _CORBA_PRIMITIVEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::PrimitiveDef_var
// *************************************************************

ACE_INLINE
CORBA::PrimitiveDef_var::CORBA_PrimitiveDef_var (void) // default constructor
  : ptr_ (CORBA::PrimitiveDef::_nil ())
{}

ACE_INLINE
CORBA::PrimitiveDef_var::CORBA_PrimitiveDef_var (CORBA::PrimitiveDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::PrimitiveDef_ptr 
CORBA::PrimitiveDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::PrimitiveDef_var::CORBA_PrimitiveDef_var (const CORBA::PrimitiveDef_var &p) // copy constructor
  : ptr_ (CORBA::PrimitiveDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::PrimitiveDef_var::~CORBA_PrimitiveDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::PrimitiveDef_var &
CORBA::PrimitiveDef_var::operator= (CORBA::PrimitiveDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::PrimitiveDef_var &
CORBA::PrimitiveDef_var::operator= (const CORBA::PrimitiveDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::PrimitiveDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::PrimitiveDef_var::operator const CORBA::PrimitiveDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::PrimitiveDef_var::operator CORBA::PrimitiveDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr 
CORBA::PrimitiveDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr
CORBA::PrimitiveDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr &
CORBA::PrimitiveDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr &
CORBA::PrimitiveDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::PrimitiveDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr 
CORBA::PrimitiveDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::PrimitiveDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::PrimitiveDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_PRIMITIVEDEF___OUT_CI_)
#define _CORBA_PRIMITIVEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::PrimitiveDef_out
// *************************************************************

ACE_INLINE
CORBA::PrimitiveDef_out::CORBA_PrimitiveDef_out (CORBA::PrimitiveDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::PrimitiveDef::_nil ();
}

ACE_INLINE
CORBA::PrimitiveDef_out::CORBA_PrimitiveDef_out (CORBA::PrimitiveDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::PrimitiveDef::_nil ();
}

ACE_INLINE
CORBA::PrimitiveDef_out::CORBA_PrimitiveDef_out (const CORBA::PrimitiveDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::PrimitiveDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::PrimitiveDef_out &
CORBA::PrimitiveDef_out::operator= (const CORBA::PrimitiveDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::PrimitiveDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::PrimitiveDef_out &
CORBA::PrimitiveDef_out::operator= (const CORBA::PrimitiveDef_var &p)
{
  this->ptr_ = CORBA::PrimitiveDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::PrimitiveDef_out &
CORBA::PrimitiveDef_out::operator= (CORBA::PrimitiveDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::PrimitiveDef_out::operator CORBA::PrimitiveDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr &
CORBA::PrimitiveDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::PrimitiveDef_ptr 
CORBA::PrimitiveDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::StringDef::CORBA_StringDef (void) // default constructor
{}

ACE_INLINE
CORBA::StringDef::CORBA_StringDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::StringDef::~CORBA_StringDef (void) // destructor
{}


#if !defined (_CORBA_STRINGDEF___VAR_CI_)
#define _CORBA_STRINGDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::StringDef_var
// *************************************************************

ACE_INLINE
CORBA::StringDef_var::CORBA_StringDef_var (void) // default constructor
  : ptr_ (CORBA::StringDef::_nil ())
{}

ACE_INLINE
CORBA::StringDef_var::CORBA_StringDef_var (CORBA::StringDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::StringDef_ptr 
CORBA::StringDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::StringDef_var::CORBA_StringDef_var (const CORBA::StringDef_var &p) // copy constructor
  : ptr_ (CORBA::StringDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::StringDef_var::~CORBA_StringDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::StringDef_var &
CORBA::StringDef_var::operator= (CORBA::StringDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::StringDef_var &
CORBA::StringDef_var::operator= (const CORBA::StringDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::StringDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::StringDef_var::operator const CORBA::StringDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::StringDef_var::operator CORBA::StringDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr 
CORBA::StringDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr
CORBA::StringDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr &
CORBA::StringDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr &
CORBA::StringDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::StringDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr 
CORBA::StringDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::StringDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::StringDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_STRINGDEF___OUT_CI_)
#define _CORBA_STRINGDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::StringDef_out
// *************************************************************

ACE_INLINE
CORBA::StringDef_out::CORBA_StringDef_out (CORBA::StringDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::StringDef::_nil ();
}

ACE_INLINE
CORBA::StringDef_out::CORBA_StringDef_out (CORBA::StringDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::StringDef::_nil ();
}

ACE_INLINE
CORBA::StringDef_out::CORBA_StringDef_out (const CORBA::StringDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::StringDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::StringDef_out &
CORBA::StringDef_out::operator= (const CORBA::StringDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::StringDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::StringDef_out &
CORBA::StringDef_out::operator= (const CORBA::StringDef_var &p)
{
  this->ptr_ = CORBA::StringDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::StringDef_out &
CORBA::StringDef_out::operator= (CORBA::StringDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::StringDef_out::operator CORBA::StringDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr &
CORBA::StringDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::StringDef_ptr 
CORBA::StringDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::WstringDef::CORBA_WstringDef (void) // default constructor
{}

ACE_INLINE
CORBA::WstringDef::CORBA_WstringDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::WstringDef::~CORBA_WstringDef (void) // destructor
{}


#if !defined (_CORBA_WSTRINGDEF___VAR_CI_)
#define _CORBA_WSTRINGDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::WstringDef_var
// *************************************************************

ACE_INLINE
CORBA::WstringDef_var::CORBA_WstringDef_var (void) // default constructor
  : ptr_ (CORBA::WstringDef::_nil ())
{}

ACE_INLINE
CORBA::WstringDef_var::CORBA_WstringDef_var (CORBA::WstringDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::WstringDef_ptr 
CORBA::WstringDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::WstringDef_var::CORBA_WstringDef_var (const CORBA::WstringDef_var &p) // copy constructor
  : ptr_ (CORBA::WstringDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::WstringDef_var::~CORBA_WstringDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::WstringDef_var &
CORBA::WstringDef_var::operator= (CORBA::WstringDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::WstringDef_var &
CORBA::WstringDef_var::operator= (const CORBA::WstringDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::WstringDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::WstringDef_var::operator const CORBA::WstringDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::WstringDef_var::operator CORBA::WstringDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr 
CORBA::WstringDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr
CORBA::WstringDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr &
CORBA::WstringDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr &
CORBA::WstringDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::WstringDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr 
CORBA::WstringDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::WstringDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::WstringDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_WSTRINGDEF___OUT_CI_)
#define _CORBA_WSTRINGDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::WstringDef_out
// *************************************************************

ACE_INLINE
CORBA::WstringDef_out::CORBA_WstringDef_out (CORBA::WstringDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::WstringDef::_nil ();
}

ACE_INLINE
CORBA::WstringDef_out::CORBA_WstringDef_out (CORBA::WstringDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::WstringDef::_nil ();
}

ACE_INLINE
CORBA::WstringDef_out::CORBA_WstringDef_out (const CORBA::WstringDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::WstringDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::WstringDef_out &
CORBA::WstringDef_out::operator= (const CORBA::WstringDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::WstringDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::WstringDef_out &
CORBA::WstringDef_out::operator= (const CORBA::WstringDef_var &p)
{
  this->ptr_ = CORBA::WstringDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::WstringDef_out &
CORBA::WstringDef_out::operator= (CORBA::WstringDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::WstringDef_out::operator CORBA::WstringDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr &
CORBA::WstringDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::WstringDef_ptr 
CORBA::WstringDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::FixedDef::CORBA_FixedDef (void) // default constructor
{}

ACE_INLINE
CORBA::FixedDef::CORBA_FixedDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::FixedDef::~CORBA_FixedDef (void) // destructor
{}


#if !defined (_CORBA_FIXEDDEF___VAR_CI_)
#define _CORBA_FIXEDDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::FixedDef_var
// *************************************************************

ACE_INLINE
CORBA::FixedDef_var::CORBA_FixedDef_var (void) // default constructor
  : ptr_ (CORBA::FixedDef::_nil ())
{}

ACE_INLINE
CORBA::FixedDef_var::CORBA_FixedDef_var (CORBA::FixedDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::FixedDef_ptr 
CORBA::FixedDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::FixedDef_var::CORBA_FixedDef_var (const CORBA::FixedDef_var &p) // copy constructor
  : ptr_ (CORBA::FixedDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::FixedDef_var::~CORBA_FixedDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::FixedDef_var &
CORBA::FixedDef_var::operator= (CORBA::FixedDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::FixedDef_var &
CORBA::FixedDef_var::operator= (const CORBA::FixedDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::FixedDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::FixedDef_var::operator const CORBA::FixedDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::FixedDef_var::operator CORBA::FixedDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr 
CORBA::FixedDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr
CORBA::FixedDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr &
CORBA::FixedDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr &
CORBA::FixedDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::FixedDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr 
CORBA::FixedDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::FixedDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::FixedDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_FIXEDDEF___OUT_CI_)
#define _CORBA_FIXEDDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::FixedDef_out
// *************************************************************

ACE_INLINE
CORBA::FixedDef_out::CORBA_FixedDef_out (CORBA::FixedDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::FixedDef::_nil ();
}

ACE_INLINE
CORBA::FixedDef_out::CORBA_FixedDef_out (CORBA::FixedDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::FixedDef::_nil ();
}

ACE_INLINE
CORBA::FixedDef_out::CORBA_FixedDef_out (const CORBA::FixedDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::FixedDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::FixedDef_out &
CORBA::FixedDef_out::operator= (const CORBA::FixedDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::FixedDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::FixedDef_out &
CORBA::FixedDef_out::operator= (const CORBA::FixedDef_var &p)
{
  this->ptr_ = CORBA::FixedDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::FixedDef_out &
CORBA::FixedDef_out::operator= (CORBA::FixedDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::FixedDef_out::operator CORBA::FixedDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr &
CORBA::FixedDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::FixedDef_ptr 
CORBA::FixedDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::SequenceDef::CORBA_SequenceDef (void) // default constructor
{}

ACE_INLINE
CORBA::SequenceDef::CORBA_SequenceDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::SequenceDef::~CORBA_SequenceDef (void) // destructor
{}


#if !defined (_CORBA_SEQUENCEDEF___VAR_CI_)
#define _CORBA_SEQUENCEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::SequenceDef_var
// *************************************************************

ACE_INLINE
CORBA::SequenceDef_var::CORBA_SequenceDef_var (void) // default constructor
  : ptr_ (CORBA::SequenceDef::_nil ())
{}

ACE_INLINE
CORBA::SequenceDef_var::CORBA_SequenceDef_var (CORBA::SequenceDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::SequenceDef_ptr 
CORBA::SequenceDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::SequenceDef_var::CORBA_SequenceDef_var (const CORBA::SequenceDef_var &p) // copy constructor
  : ptr_ (CORBA::SequenceDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::SequenceDef_var::~CORBA_SequenceDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::SequenceDef_var &
CORBA::SequenceDef_var::operator= (CORBA::SequenceDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::SequenceDef_var &
CORBA::SequenceDef_var::operator= (const CORBA::SequenceDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::SequenceDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::SequenceDef_var::operator const CORBA::SequenceDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::SequenceDef_var::operator CORBA::SequenceDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr 
CORBA::SequenceDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr
CORBA::SequenceDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr &
CORBA::SequenceDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr &
CORBA::SequenceDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::SequenceDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr 
CORBA::SequenceDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::SequenceDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::SequenceDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_SEQUENCEDEF___OUT_CI_)
#define _CORBA_SEQUENCEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::SequenceDef_out
// *************************************************************

ACE_INLINE
CORBA::SequenceDef_out::CORBA_SequenceDef_out (CORBA::SequenceDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::SequenceDef::_nil ();
}

ACE_INLINE
CORBA::SequenceDef_out::CORBA_SequenceDef_out (CORBA::SequenceDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::SequenceDef::_nil ();
}

ACE_INLINE
CORBA::SequenceDef_out::CORBA_SequenceDef_out (const CORBA::SequenceDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::SequenceDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::SequenceDef_out &
CORBA::SequenceDef_out::operator= (const CORBA::SequenceDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::SequenceDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::SequenceDef_out &
CORBA::SequenceDef_out::operator= (const CORBA::SequenceDef_var &p)
{
  this->ptr_ = CORBA::SequenceDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::SequenceDef_out &
CORBA::SequenceDef_out::operator= (CORBA::SequenceDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::SequenceDef_out::operator CORBA::SequenceDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr &
CORBA::SequenceDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::SequenceDef_ptr 
CORBA::SequenceDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::ArrayDef::CORBA_ArrayDef (void) // default constructor
{}

ACE_INLINE
CORBA::ArrayDef::CORBA_ArrayDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ArrayDef::~CORBA_ArrayDef (void) // destructor
{}


#if !defined (_CORBA_ARRAYDEF___VAR_CI_)
#define _CORBA_ARRAYDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ArrayDef_var
// *************************************************************

ACE_INLINE
CORBA::ArrayDef_var::CORBA_ArrayDef_var (void) // default constructor
  : ptr_ (CORBA::ArrayDef::_nil ())
{}

ACE_INLINE
CORBA::ArrayDef_var::CORBA_ArrayDef_var (CORBA::ArrayDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ArrayDef_ptr 
CORBA::ArrayDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ArrayDef_var::CORBA_ArrayDef_var (const CORBA::ArrayDef_var &p) // copy constructor
  : ptr_ (CORBA::ArrayDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ArrayDef_var::~CORBA_ArrayDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ArrayDef_var &
CORBA::ArrayDef_var::operator= (CORBA::ArrayDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ArrayDef_var &
CORBA::ArrayDef_var::operator= (const CORBA::ArrayDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ArrayDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ArrayDef_var::operator const CORBA::ArrayDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ArrayDef_var::operator CORBA::ArrayDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr 
CORBA::ArrayDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr
CORBA::ArrayDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr &
CORBA::ArrayDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr &
CORBA::ArrayDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ArrayDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr 
CORBA::ArrayDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ArrayDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ArrayDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ARRAYDEF___OUT_CI_)
#define _CORBA_ARRAYDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ArrayDef_out
// *************************************************************

ACE_INLINE
CORBA::ArrayDef_out::CORBA_ArrayDef_out (CORBA::ArrayDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ArrayDef::_nil ();
}

ACE_INLINE
CORBA::ArrayDef_out::CORBA_ArrayDef_out (CORBA::ArrayDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ArrayDef::_nil ();
}

ACE_INLINE
CORBA::ArrayDef_out::CORBA_ArrayDef_out (const CORBA::ArrayDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ArrayDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ArrayDef_out &
CORBA::ArrayDef_out::operator= (const CORBA::ArrayDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ArrayDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ArrayDef_out &
CORBA::ArrayDef_out::operator= (const CORBA::ArrayDef_var &p)
{
  this->ptr_ = CORBA::ArrayDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ArrayDef_out &
CORBA::ArrayDef_out::operator= (CORBA::ArrayDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ArrayDef_out::operator CORBA::ArrayDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr &
CORBA::ArrayDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ArrayDef_ptr 
CORBA::ArrayDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::ExceptionDef::CORBA_ExceptionDef (void) // default constructor
{}

ACE_INLINE
CORBA::ExceptionDef::CORBA_ExceptionDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ExceptionDef::~CORBA_ExceptionDef (void) // destructor
{}


#if !defined (_CORBA_EXCEPTIONDEF___VAR_CI_)
#define _CORBA_EXCEPTIONDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ExceptionDef_var
// *************************************************************

ACE_INLINE
CORBA::ExceptionDef_var::CORBA_ExceptionDef_var (void) // default constructor
  : ptr_ (CORBA::ExceptionDef::_nil ())
{}

ACE_INLINE
CORBA::ExceptionDef_var::CORBA_ExceptionDef_var (CORBA::ExceptionDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ExceptionDef_ptr 
CORBA::ExceptionDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDef_var::CORBA_ExceptionDef_var (const CORBA::ExceptionDef_var &p) // copy constructor
  : ptr_ (CORBA::ExceptionDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ExceptionDef_var::~CORBA_ExceptionDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ExceptionDef_var &
CORBA::ExceptionDef_var::operator= (CORBA::ExceptionDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ExceptionDef_var &
CORBA::ExceptionDef_var::operator= (const CORBA::ExceptionDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ExceptionDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ExceptionDef_var::operator const CORBA::ExceptionDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDef_var::operator CORBA::ExceptionDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr 
CORBA::ExceptionDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr
CORBA::ExceptionDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr &
CORBA::ExceptionDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr &
CORBA::ExceptionDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ExceptionDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr 
CORBA::ExceptionDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ExceptionDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ExceptionDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_EXCEPTIONDEF___OUT_CI_)
#define _CORBA_EXCEPTIONDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ExceptionDef_out
// *************************************************************

ACE_INLINE
CORBA::ExceptionDef_out::CORBA_ExceptionDef_out (CORBA::ExceptionDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ExceptionDef::_nil ();
}

ACE_INLINE
CORBA::ExceptionDef_out::CORBA_ExceptionDef_out (CORBA::ExceptionDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ExceptionDef::_nil ();
}

ACE_INLINE
CORBA::ExceptionDef_out::CORBA_ExceptionDef_out (const CORBA::ExceptionDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ExceptionDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ExceptionDef_out &
CORBA::ExceptionDef_out::operator= (const CORBA::ExceptionDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ExceptionDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ExceptionDef_out &
CORBA::ExceptionDef_out::operator= (const CORBA::ExceptionDef_var &p)
{
  this->ptr_ = CORBA::ExceptionDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ExceptionDef_out &
CORBA::ExceptionDef_out::operator= (CORBA::ExceptionDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ExceptionDef_out::operator CORBA::ExceptionDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr &
CORBA::ExceptionDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDef_ptr 
CORBA::ExceptionDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::ExceptionDescription_var
// *************************************************************

ACE_INLINE
CORBA::ExceptionDescription_var::CORBA_ExceptionDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ExceptionDescription_var::CORBA_ExceptionDescription_var (CORBA::ExceptionDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ExceptionDescription_var::CORBA_ExceptionDescription_var (const CORBA::ExceptionDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ExceptionDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDescription_var::~CORBA_ExceptionDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription_var &
CORBA::ExceptionDescription_var::operator= (CORBA::ExceptionDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ExceptionDescription_var &
CORBA::ExceptionDescription_var::operator= (const CORBA::ExceptionDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ExceptionDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDescription_var::operator const CORBA::ExceptionDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDescription_var::operator CORBA::ExceptionDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDescription_var::operator CORBA::ExceptionDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ExceptionDescription &
CORBA::ExceptionDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription &
CORBA::ExceptionDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ExceptionDescription *&
CORBA::ExceptionDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::_retn (void)
{
  CORBA::ExceptionDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ExceptionDescription_out
// *************************************************************

ACE_INLINE
CORBA::ExceptionDescription_out::CORBA_ExceptionDescription_out (CORBA::ExceptionDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDescription_out::CORBA_ExceptionDescription_out (CORBA::ExceptionDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDescription_out::CORBA_ExceptionDescription_out (const CORBA::ExceptionDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ExceptionDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::ExceptionDescription_out &
CORBA::ExceptionDescription_out::operator= (const CORBA::ExceptionDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ExceptionDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ExceptionDescription_out &
CORBA::ExceptionDescription_out::operator= (CORBA::ExceptionDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ExceptionDescription_out::operator CORBA::ExceptionDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription *&
CORBA::ExceptionDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription *
CORBA::ExceptionDescription_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AttributeDef::CORBA_AttributeDef (void) // default constructor
{}

ACE_INLINE
CORBA::AttributeDef::CORBA_AttributeDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::AttributeDef::~CORBA_AttributeDef (void) // destructor
{}


#if !defined (_CORBA_ATTRIBUTEDEF___VAR_CI_)
#define _CORBA_ATTRIBUTEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::AttributeDef_var
// *************************************************************

ACE_INLINE
CORBA::AttributeDef_var::CORBA_AttributeDef_var (void) // default constructor
  : ptr_ (CORBA::AttributeDef::_nil ())
{}

ACE_INLINE
CORBA::AttributeDef_var::CORBA_AttributeDef_var (CORBA::AttributeDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::AttributeDef_ptr 
CORBA::AttributeDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AttributeDef_var::CORBA_AttributeDef_var (const CORBA::AttributeDef_var &p) // copy constructor
  : ptr_ (CORBA::AttributeDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::AttributeDef_var::~CORBA_AttributeDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::AttributeDef_var &
CORBA::AttributeDef_var::operator= (CORBA::AttributeDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::AttributeDef_var &
CORBA::AttributeDef_var::operator= (const CORBA::AttributeDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::AttributeDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::AttributeDef_var::operator const CORBA::AttributeDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::AttributeDef_var::operator CORBA::AttributeDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr 
CORBA::AttributeDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr
CORBA::AttributeDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr &
CORBA::AttributeDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr &
CORBA::AttributeDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::AttributeDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr 
CORBA::AttributeDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::AttributeDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::AttributeDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_ATTRIBUTEDEF___OUT_CI_)
#define _CORBA_ATTRIBUTEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::AttributeDef_out
// *************************************************************

ACE_INLINE
CORBA::AttributeDef_out::CORBA_AttributeDef_out (CORBA::AttributeDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::AttributeDef::_nil ();
}

ACE_INLINE
CORBA::AttributeDef_out::CORBA_AttributeDef_out (CORBA::AttributeDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::AttributeDef::_nil ();
}

ACE_INLINE
CORBA::AttributeDef_out::CORBA_AttributeDef_out (const CORBA::AttributeDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::AttributeDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::AttributeDef_out &
CORBA::AttributeDef_out::operator= (const CORBA::AttributeDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::AttributeDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::AttributeDef_out &
CORBA::AttributeDef_out::operator= (const CORBA::AttributeDef_var &p)
{
  this->ptr_ = CORBA::AttributeDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::AttributeDef_out &
CORBA::AttributeDef_out::operator= (CORBA::AttributeDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::AttributeDef_out::operator CORBA::AttributeDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr &
CORBA::AttributeDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDef_ptr 
CORBA::AttributeDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::AttributeDescription_var
// *************************************************************

ACE_INLINE
CORBA::AttributeDescription_var::CORBA_AttributeDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::AttributeDescription_var::CORBA_AttributeDescription_var (CORBA::AttributeDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::AttributeDescription_var::CORBA_AttributeDescription_var (const CORBA::AttributeDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::AttributeDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttributeDescription_var::~CORBA_AttributeDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription_var &
CORBA::AttributeDescription_var::operator= (CORBA::AttributeDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::AttributeDescription_var &
CORBA::AttributeDescription_var::operator= (const CORBA::AttributeDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::AttributeDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::AttributeDescription *
CORBA::AttributeDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription *
CORBA::AttributeDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::AttributeDescription_var::operator const CORBA::AttributeDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::AttributeDescription_var::operator CORBA::AttributeDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::AttributeDescription_var::operator CORBA::AttributeDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::AttributeDescription &
CORBA::AttributeDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription &
CORBA::AttributeDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::AttributeDescription *&
CORBA::AttributeDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription *
CORBA::AttributeDescription_var::_retn (void)
{
  CORBA::AttributeDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::AttributeDescription *
CORBA::AttributeDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::AttributeDescription_out
// *************************************************************

ACE_INLINE
CORBA::AttributeDescription_out::CORBA_AttributeDescription_out (CORBA::AttributeDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttributeDescription_out::CORBA_AttributeDescription_out (CORBA::AttributeDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttributeDescription_out::CORBA_AttributeDescription_out (const CORBA::AttributeDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::AttributeDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::AttributeDescription_out &
CORBA::AttributeDescription_out::operator= (const CORBA::AttributeDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::AttributeDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::AttributeDescription_out &
CORBA::AttributeDescription_out::operator= (CORBA::AttributeDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::AttributeDescription_out::operator CORBA::AttributeDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription *&
CORBA::AttributeDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription *
CORBA::AttributeDescription_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ParameterDescription_var
// *************************************************************

ACE_INLINE
CORBA::ParameterDescription_var::CORBA_ParameterDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ParameterDescription_var::CORBA_ParameterDescription_var (CORBA::ParameterDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ParameterDescription_var::CORBA_ParameterDescription_var (const CORBA::ParameterDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ParameterDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParameterDescription_var::~CORBA_ParameterDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription_var &
CORBA::ParameterDescription_var::operator= (CORBA::ParameterDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ParameterDescription_var &
CORBA::ParameterDescription_var::operator= (const CORBA::ParameterDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ParameterDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ParameterDescription *
CORBA::ParameterDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription *
CORBA::ParameterDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ParameterDescription_var::operator const CORBA::ParameterDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ParameterDescription_var::operator CORBA::ParameterDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ParameterDescription_var::operator CORBA::ParameterDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ParameterDescription &
CORBA::ParameterDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription &
CORBA::ParameterDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ParameterDescription *&
CORBA::ParameterDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription *
CORBA::ParameterDescription_var::_retn (void)
{
  CORBA::ParameterDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ParameterDescription *
CORBA::ParameterDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ParameterDescription_out
// *************************************************************

ACE_INLINE
CORBA::ParameterDescription_out::CORBA_ParameterDescription_out (CORBA::ParameterDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParameterDescription_out::CORBA_ParameterDescription_out (CORBA::ParameterDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParameterDescription_out::CORBA_ParameterDescription_out (const CORBA::ParameterDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ParameterDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::ParameterDescription_out &
CORBA::ParameterDescription_out::operator= (const CORBA::ParameterDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ParameterDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ParameterDescription_out &
CORBA::ParameterDescription_out::operator= (CORBA::ParameterDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ParameterDescription_out::operator CORBA::ParameterDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription *&
CORBA::ParameterDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription *
CORBA::ParameterDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_PARDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_PARDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ParameterDescription *
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::ParameterDescription[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (CORBA::ParameterDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ParameterDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::ParameterDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (this->maximum_);
    CORBA::ParameterDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ParameterDescription *tmp = ACE_reinterpret_cast (CORBA::ParameterDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ParameterDescription *tmp1 = ACE_reinterpret_cast (CORBA::ParameterDescription *, this->buffer_);
    CORBA::ParameterDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ParameterDescription &
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ParameterDescription* tmp = ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ParameterDescription &
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ParameterDescription * const tmp = ACE_reinterpret_cast (CORBA::ParameterDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ParameterDescription *
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ParameterDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ParameterDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ParameterDescription *
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ParameterDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ParameterDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ParameterDescription *tmp = ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_PARDESCRIPTIONSEQ_CI_)
#define _CORBA_PARDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ParDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::ParDescriptionSeq_var::CORBA_ParDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ParDescriptionSeq_var::CORBA_ParDescriptionSeq_var (CORBA::ParDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ParDescriptionSeq_var::CORBA_ParDescriptionSeq_var (const CORBA::ParDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ParDescriptionSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParDescriptionSeq_var::~CORBA_ParDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ParDescriptionSeq_var &
CORBA::ParDescriptionSeq_var::operator= (CORBA::ParDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ParDescriptionSeq_var &
CORBA::ParDescriptionSeq_var::operator= (const CORBA::ParDescriptionSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ParDescriptionSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ParDescriptionSeq_var::operator const CORBA::ParDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ParDescriptionSeq_var::operator CORBA::ParDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ParDescriptionSeq_var::operator CORBA::ParDescriptionSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription &
CORBA::ParDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ParDescriptionSeq &
CORBA::ParDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ParDescriptionSeq &
CORBA::ParDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ParDescriptionSeq *&
CORBA::ParDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::_retn (void)
{
  CORBA::ParDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ParDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::ParDescriptionSeq_out::CORBA_ParDescriptionSeq_out (CORBA::ParDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParDescriptionSeq_out::CORBA_ParDescriptionSeq_out (CORBA::ParDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParDescriptionSeq_out::CORBA_ParDescriptionSeq_out (const CORBA::ParDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ParDescriptionSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ParDescriptionSeq_out &
CORBA::ParDescriptionSeq_out::operator= (const CORBA::ParDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ParDescriptionSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ParDescriptionSeq_out &
CORBA::ParDescriptionSeq_out::operator= (CORBA::ParDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ParDescriptionSeq_out::operator CORBA::ParDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParDescriptionSeq *&
CORBA::ParDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ParameterDescription &
CORBA::ParDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_CORBA_CONTEXTIDSEQ_CI_)
#define _CORBA_CONTEXTIDSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ContextIdSeq_var
// *************************************************************

ACE_INLINE
CORBA::ContextIdSeq_var::CORBA_ContextIdSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ContextIdSeq_var::CORBA_ContextIdSeq_var (CORBA::ContextIdSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ContextIdSeq_var::CORBA_ContextIdSeq_var (const CORBA::ContextIdSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ContextIdSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContextIdSeq_var::~CORBA_ContextIdSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ContextIdSeq_var &
CORBA::ContextIdSeq_var::operator= (CORBA::ContextIdSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ContextIdSeq_var &
CORBA::ContextIdSeq_var::operator= (const CORBA::ContextIdSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ContextIdSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ContextIdSeq_var::operator const CORBA::ContextIdSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ContextIdSeq_var::operator CORBA::ContextIdSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ContextIdSeq_var::operator CORBA::ContextIdSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager 
CORBA::ContextIdSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ContextIdSeq &
CORBA::ContextIdSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ContextIdSeq &
CORBA::ContextIdSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ContextIdSeq *&
CORBA::ContextIdSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::_retn (void)
{
  CORBA::ContextIdSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ContextIdSeq_out
// *************************************************************

ACE_INLINE
CORBA::ContextIdSeq_out::CORBA_ContextIdSeq_out (CORBA::ContextIdSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContextIdSeq_out::CORBA_ContextIdSeq_out (CORBA::ContextIdSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContextIdSeq_out::CORBA_ContextIdSeq_out (const CORBA::ContextIdSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ContextIdSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ContextIdSeq_out &
CORBA::ContextIdSeq_out::operator= (const CORBA::ContextIdSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ContextIdSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ContextIdSeq_out &
CORBA::ContextIdSeq_out::operator= (CORBA::ContextIdSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ContextIdSeq_out::operator CORBA::ContextIdSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ContextIdSeq *&
CORBA::ContextIdSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ContextIdSeq *
CORBA::ContextIdSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager 
CORBA::ContextIdSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_EXCEPTIONDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_EXCEPTIONDEFSEQ_CI_

  ACE_INLINE CORBA::ExceptionDef **
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (CORBA::ULong nelems)
  {
    CORBA::ExceptionDef **buf = 0;
    
    ACE_NEW_RETURN (buf, CORBA::ExceptionDef*[nelems], 0);
    
    for (CORBA::ULong i = 0; i < nelems; i++)
      buf[i] = CORBA::ExceptionDef::_nil ();
    
    return buf;
  }
  
  ACE_INLINE void 
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::freebuf (CORBA::ExceptionDef **buffer)
  {
    if (buffer == 0)
      return;
    delete[] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (void)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (CORBA::ULong maximum)
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ExceptionDef* *value,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq(const _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &rhs)
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::ExceptionDef **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (this->maximum_);
    CORBA::ExceptionDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::ExceptionDef::_duplicate (tmp2[i]);
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::operator= (const _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &rhs)
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      CORBA::ExceptionDef **tmp = ACE_reinterpret_cast (CORBA::ExceptionDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
      {
        CORBA::release (tmp[i]);
        tmp[i] = CORBA::ExceptionDef::_nil ();
      }
      if (this->maximum_ < rhs.maximum_)
      {
        _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ExceptionDef **tmp1 = ACE_reinterpret_cast (CORBA::ExceptionDef **, this->buffer_);
    CORBA::ExceptionDef ** const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      tmp1[i] = CORBA::ExceptionDef::_duplicate (tmp2[i]);
    
    return *this;
  }
  
  ACE_INLINE TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var>
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::operator[] (CORBA::ULong index) const
  // read-write accessor
  {
    ACE_ASSERT (index < this->maximum_);
    CORBA::ExceptionDef ** const tmp = ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
    return TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var> (tmp + index, this->release_);
  }
  
  ACE_INLINE CORBA::ExceptionDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ExceptionDef **result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (this->maximum_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ExceptionDef**, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ExceptionDef**,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ExceptionDef* *
  _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
  }
  
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_EXCEPTIONDEFSEQ_CI_)
#define _CORBA_EXCEPTIONDEFSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ExceptionDefSeq_var
// *************************************************************

ACE_INLINE
CORBA::ExceptionDefSeq_var::CORBA_ExceptionDefSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ExceptionDefSeq_var::CORBA_ExceptionDefSeq_var (CORBA::ExceptionDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ExceptionDefSeq_var::CORBA_ExceptionDefSeq_var (const CORBA::ExceptionDefSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ExceptionDefSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDefSeq_var::~CORBA_ExceptionDefSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ExceptionDefSeq_var &
CORBA::ExceptionDefSeq_var::operator= (CORBA::ExceptionDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ExceptionDefSeq_var &
CORBA::ExceptionDefSeq_var::operator= (const CORBA::ExceptionDefSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ExceptionDefSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDefSeq_var::operator const CORBA::ExceptionDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDefSeq_var::operator CORBA::ExceptionDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ExceptionDefSeq_var::operator CORBA::ExceptionDefSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var> 
CORBA::ExceptionDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ExceptionDefSeq &
CORBA::ExceptionDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ExceptionDefSeq &
CORBA::ExceptionDefSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ExceptionDefSeq *&
CORBA::ExceptionDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::_retn (void)
{
  CORBA::ExceptionDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ExceptionDefSeq_out
// *************************************************************

ACE_INLINE
CORBA::ExceptionDefSeq_out::CORBA_ExceptionDefSeq_out (CORBA::ExceptionDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDefSeq_out::CORBA_ExceptionDefSeq_out (CORBA::ExceptionDefSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDefSeq_out::CORBA_ExceptionDefSeq_out (const CORBA::ExceptionDefSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ExceptionDefSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ExceptionDefSeq_out &
CORBA::ExceptionDefSeq_out::operator= (const CORBA::ExceptionDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ExceptionDefSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ExceptionDefSeq_out &
CORBA::ExceptionDefSeq_out::operator= (CORBA::ExceptionDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ExceptionDefSeq_out::operator CORBA::ExceptionDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDefSeq *&
CORBA::ExceptionDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var> 
CORBA::ExceptionDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_EXCDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_EXCDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ExceptionDescription *
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::ExceptionDescription[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (CORBA::ExceptionDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ExceptionDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::ExceptionDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (this->maximum_);
    CORBA::ExceptionDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ExceptionDescription *tmp = ACE_reinterpret_cast (CORBA::ExceptionDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ExceptionDescription *tmp1 = ACE_reinterpret_cast (CORBA::ExceptionDescription *, this->buffer_);
    CORBA::ExceptionDescription * const tmp2 = ACE_reinterpret_cast (CORBA::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ExceptionDescription &
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ExceptionDescription* tmp = ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ExceptionDescription &
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ExceptionDescription * const tmp = ACE_reinterpret_cast (CORBA::ExceptionDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ExceptionDescription *
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ExceptionDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ExceptionDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ExceptionDescription *
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ExceptionDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ExceptionDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ExceptionDescription *tmp = ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CI_)
#define _CORBA_EXCDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ExcDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::ExcDescriptionSeq_var::CORBA_ExcDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::CORBA_ExcDescriptionSeq_var (CORBA::ExcDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::CORBA_ExcDescriptionSeq_var (const CORBA::ExcDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ExcDescriptionSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::~CORBA_ExcDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ExcDescriptionSeq_var &
CORBA::ExcDescriptionSeq_var::operator= (CORBA::ExcDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ExcDescriptionSeq_var &
CORBA::ExcDescriptionSeq_var::operator= (const CORBA::ExcDescriptionSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ExcDescriptionSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ExcDescriptionSeq_var::operator const CORBA::ExcDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ExcDescriptionSeq_var::operator CORBA::ExcDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ExcDescriptionSeq_var::operator CORBA::ExcDescriptionSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription &
CORBA::ExcDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ExcDescriptionSeq &
CORBA::ExcDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ExcDescriptionSeq &
CORBA::ExcDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ExcDescriptionSeq *&
CORBA::ExcDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::_retn (void)
{
  CORBA::ExcDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ExcDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::ExcDescriptionSeq_out::CORBA_ExcDescriptionSeq_out (CORBA::ExcDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_out::CORBA_ExcDescriptionSeq_out (CORBA::ExcDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_out::CORBA_ExcDescriptionSeq_out (const CORBA::ExcDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ExcDescriptionSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ExcDescriptionSeq_out &
CORBA::ExcDescriptionSeq_out::operator= (const CORBA::ExcDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ExcDescriptionSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ExcDescriptionSeq_out &
CORBA::ExcDescriptionSeq_out::operator= (CORBA::ExcDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ExcDescriptionSeq_out::operator CORBA::ExcDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExcDescriptionSeq *&
CORBA::ExcDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ExceptionDescription &
CORBA::ExcDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::OperationDef::CORBA_OperationDef (void) // default constructor
{}

ACE_INLINE
CORBA::OperationDef::CORBA_OperationDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::OperationDef::~CORBA_OperationDef (void) // destructor
{}


#if !defined (_CORBA_OPERATIONDEF___VAR_CI_)
#define _CORBA_OPERATIONDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::OperationDef_var
// *************************************************************

ACE_INLINE
CORBA::OperationDef_var::CORBA_OperationDef_var (void) // default constructor
  : ptr_ (CORBA::OperationDef::_nil ())
{}

ACE_INLINE
CORBA::OperationDef_var::CORBA_OperationDef_var (CORBA::OperationDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::OperationDef_ptr 
CORBA::OperationDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::OperationDef_var::CORBA_OperationDef_var (const CORBA::OperationDef_var &p) // copy constructor
  : ptr_ (CORBA::OperationDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::OperationDef_var::~CORBA_OperationDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::OperationDef_var &
CORBA::OperationDef_var::operator= (CORBA::OperationDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::OperationDef_var &
CORBA::OperationDef_var::operator= (const CORBA::OperationDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::OperationDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::OperationDef_var::operator const CORBA::OperationDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::OperationDef_var::operator CORBA::OperationDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr 
CORBA::OperationDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr
CORBA::OperationDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr &
CORBA::OperationDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr &
CORBA::OperationDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::OperationDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr 
CORBA::OperationDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::OperationDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::OperationDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_OPERATIONDEF___OUT_CI_)
#define _CORBA_OPERATIONDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::OperationDef_out
// *************************************************************

ACE_INLINE
CORBA::OperationDef_out::CORBA_OperationDef_out (CORBA::OperationDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::OperationDef::_nil ();
}

ACE_INLINE
CORBA::OperationDef_out::CORBA_OperationDef_out (CORBA::OperationDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::OperationDef::_nil ();
}

ACE_INLINE
CORBA::OperationDef_out::CORBA_OperationDef_out (const CORBA::OperationDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::OperationDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::OperationDef_out &
CORBA::OperationDef_out::operator= (const CORBA::OperationDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::OperationDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::OperationDef_out &
CORBA::OperationDef_out::operator= (const CORBA::OperationDef_var &p)
{
  this->ptr_ = CORBA::OperationDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::OperationDef_out &
CORBA::OperationDef_out::operator= (CORBA::OperationDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::OperationDef_out::operator CORBA::OperationDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr &
CORBA::OperationDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDef_ptr 
CORBA::OperationDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::OperationDescription_var
// *************************************************************

ACE_INLINE
CORBA::OperationDescription_var::CORBA_OperationDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::OperationDescription_var::CORBA_OperationDescription_var (CORBA::OperationDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::OperationDescription_var::CORBA_OperationDescription_var (const CORBA::OperationDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::OperationDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::OperationDescription_var::~CORBA_OperationDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::OperationDescription_var &
CORBA::OperationDescription_var::operator= (CORBA::OperationDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::OperationDescription_var &
CORBA::OperationDescription_var::operator= (const CORBA::OperationDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::OperationDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::OperationDescription *
CORBA::OperationDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription *
CORBA::OperationDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::OperationDescription_var::operator const CORBA::OperationDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::OperationDescription_var::operator CORBA::OperationDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::OperationDescription_var::operator CORBA::OperationDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::OperationDescription &
CORBA::OperationDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::OperationDescription &
CORBA::OperationDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::OperationDescription *&
CORBA::OperationDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription *
CORBA::OperationDescription_var::_retn (void)
{
  CORBA::OperationDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::OperationDescription *
CORBA::OperationDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::OperationDescription_out
// *************************************************************

ACE_INLINE
CORBA::OperationDescription_out::CORBA_OperationDescription_out (CORBA::OperationDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OperationDescription_out::CORBA_OperationDescription_out (CORBA::OperationDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OperationDescription_out::CORBA_OperationDescription_out (const CORBA::OperationDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::OperationDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::OperationDescription_out &
CORBA::OperationDescription_out::operator= (const CORBA::OperationDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::OperationDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::OperationDescription_out &
CORBA::OperationDescription_out::operator= (CORBA::OperationDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::OperationDescription_out::operator CORBA::OperationDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription *&
CORBA::OperationDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription *
CORBA::OperationDescription_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_CORBA_REPOSITORYIDSEQ_CI_)
#define _CORBA_REPOSITORYIDSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::RepositoryIdSeq_var
// *************************************************************

ACE_INLINE
CORBA::RepositoryIdSeq_var::CORBA_RepositoryIdSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::RepositoryIdSeq_var::CORBA_RepositoryIdSeq_var (CORBA::RepositoryIdSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::RepositoryIdSeq_var::CORBA_RepositoryIdSeq_var (const CORBA::RepositoryIdSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::RepositoryIdSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::RepositoryIdSeq_var::~CORBA_RepositoryIdSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::RepositoryIdSeq_var &
CORBA::RepositoryIdSeq_var::operator= (CORBA::RepositoryIdSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::RepositoryIdSeq_var &
CORBA::RepositoryIdSeq_var::operator= (const CORBA::RepositoryIdSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::RepositoryIdSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::RepositoryIdSeq_var::operator const CORBA::RepositoryIdSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::RepositoryIdSeq_var::operator CORBA::RepositoryIdSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::RepositoryIdSeq_var::operator CORBA::RepositoryIdSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager 
CORBA::RepositoryIdSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::RepositoryIdSeq &
CORBA::RepositoryIdSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::RepositoryIdSeq &
CORBA::RepositoryIdSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::RepositoryIdSeq *&
CORBA::RepositoryIdSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::_retn (void)
{
  CORBA::RepositoryIdSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::RepositoryIdSeq_out
// *************************************************************

ACE_INLINE
CORBA::RepositoryIdSeq_out::CORBA_RepositoryIdSeq_out (CORBA::RepositoryIdSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::RepositoryIdSeq_out::CORBA_RepositoryIdSeq_out (CORBA::RepositoryIdSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::RepositoryIdSeq_out::CORBA_RepositoryIdSeq_out (const CORBA::RepositoryIdSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::RepositoryIdSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::RepositoryIdSeq_out &
CORBA::RepositoryIdSeq_out::operator= (const CORBA::RepositoryIdSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::RepositoryIdSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::RepositoryIdSeq_out &
CORBA::RepositoryIdSeq_out::operator= (CORBA::RepositoryIdSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::RepositoryIdSeq_out::operator CORBA::RepositoryIdSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::RepositoryIdSeq *&
CORBA::RepositoryIdSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager 
CORBA::RepositoryIdSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_OPDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_OPDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::OperationDescription *
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::OperationDescription[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (CORBA::OperationDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::OperationDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::OperationDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (this->maximum_);
    CORBA::OperationDescription * const tmp2 = ACE_reinterpret_cast (CORBA::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::OperationDescription *tmp = ACE_reinterpret_cast (CORBA::OperationDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::OperationDescription *tmp1 = ACE_reinterpret_cast (CORBA::OperationDescription *, this->buffer_);
    CORBA::OperationDescription * const tmp2 = ACE_reinterpret_cast (CORBA::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::OperationDescription &
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::OperationDescription* tmp = ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::OperationDescription &
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::OperationDescription * const tmp = ACE_reinterpret_cast (CORBA::OperationDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::OperationDescription *
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::OperationDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::OperationDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::OperationDescription *
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::OperationDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::OperationDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::OperationDescription *tmp = ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_OPDESCRIPTIONSEQ_CI_)
#define _CORBA_OPDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::OpDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::OpDescriptionSeq_var::CORBA_OpDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::OpDescriptionSeq_var::CORBA_OpDescriptionSeq_var (CORBA::OpDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::OpDescriptionSeq_var::CORBA_OpDescriptionSeq_var (const CORBA::OpDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::OpDescriptionSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::OpDescriptionSeq_var::~CORBA_OpDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::OpDescriptionSeq_var &
CORBA::OpDescriptionSeq_var::operator= (CORBA::OpDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::OpDescriptionSeq_var &
CORBA::OpDescriptionSeq_var::operator= (const CORBA::OpDescriptionSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::OpDescriptionSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::OpDescriptionSeq_var::operator const CORBA::OpDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::OpDescriptionSeq_var::operator CORBA::OpDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::OpDescriptionSeq_var::operator CORBA::OpDescriptionSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::OperationDescription &
CORBA::OpDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::OpDescriptionSeq &
CORBA::OpDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::OpDescriptionSeq &
CORBA::OpDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::OpDescriptionSeq *&
CORBA::OpDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::_retn (void)
{
  CORBA::OpDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::OpDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::OpDescriptionSeq_out::CORBA_OpDescriptionSeq_out (CORBA::OpDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OpDescriptionSeq_out::CORBA_OpDescriptionSeq_out (CORBA::OpDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OpDescriptionSeq_out::CORBA_OpDescriptionSeq_out (const CORBA::OpDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::OpDescriptionSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::OpDescriptionSeq_out &
CORBA::OpDescriptionSeq_out::operator= (const CORBA::OpDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::OpDescriptionSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::OpDescriptionSeq_out &
CORBA::OpDescriptionSeq_out::operator= (CORBA::OpDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::OpDescriptionSeq_out::operator CORBA::OpDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::OpDescriptionSeq *&
CORBA::OpDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::OperationDescription &
CORBA::OpDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_ATTRDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_ATTRDESCRIPTIONSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::AttributeDescription *
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::AttributeDescription[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (CORBA::AttributeDescription *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::AttributeDescription *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (const _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::AttributeDescription *tmp1 = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (this->maximum_);
    CORBA::AttributeDescription * const tmp2 = ACE_reinterpret_cast (CORBA::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::AttributeDescription *tmp = ACE_reinterpret_cast (CORBA::AttributeDescription *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::AttributeDescription *tmp1 = ACE_reinterpret_cast (CORBA::AttributeDescription *, this->buffer_);
    CORBA::AttributeDescription * const tmp2 = ACE_reinterpret_cast (CORBA::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::AttributeDescription &
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::AttributeDescription* tmp = ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::AttributeDescription &
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::AttributeDescription * const tmp = ACE_reinterpret_cast (CORBA::AttributeDescription* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::AttributeDescription *
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::AttributeDescription *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::AttributeDescription*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::AttributeDescription *
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::AttributeDescription * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::AttributeDescription *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::AttributeDescription *tmp = ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_ATTRDESCRIPTIONSEQ_CI_)
#define _CORBA_ATTRDESCRIPTIONSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::AttrDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::AttrDescriptionSeq_var::CORBA_AttrDescriptionSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::CORBA_AttrDescriptionSeq_var (CORBA::AttrDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::CORBA_AttrDescriptionSeq_var (const CORBA::AttrDescriptionSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::AttrDescriptionSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::~CORBA_AttrDescriptionSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::AttrDescriptionSeq_var &
CORBA::AttrDescriptionSeq_var::operator= (CORBA::AttrDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::AttrDescriptionSeq_var &
CORBA::AttrDescriptionSeq_var::operator= (const CORBA::AttrDescriptionSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::AttrDescriptionSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::AttrDescriptionSeq_var::operator const CORBA::AttrDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::AttrDescriptionSeq_var::operator CORBA::AttrDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::AttrDescriptionSeq_var::operator CORBA::AttrDescriptionSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription &
CORBA::AttrDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::AttrDescriptionSeq &
CORBA::AttrDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::AttrDescriptionSeq &
CORBA::AttrDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::AttrDescriptionSeq *&
CORBA::AttrDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::_retn (void)
{
  CORBA::AttrDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::AttrDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::AttrDescriptionSeq_out::CORBA_AttrDescriptionSeq_out (CORBA::AttrDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_out::CORBA_AttrDescriptionSeq_out (CORBA::AttrDescriptionSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_out::CORBA_AttrDescriptionSeq_out (const CORBA::AttrDescriptionSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::AttrDescriptionSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::AttrDescriptionSeq_out &
CORBA::AttrDescriptionSeq_out::operator= (const CORBA::AttrDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::AttrDescriptionSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::AttrDescriptionSeq_out &
CORBA::AttrDescriptionSeq_out::operator= (CORBA::AttrDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::AttrDescriptionSeq_out::operator CORBA::AttrDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttrDescriptionSeq *&
CORBA::AttrDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::AttributeDescription &
CORBA::AttrDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::InterfaceDef::CORBA_InterfaceDef (void) // default constructor
{}

ACE_INLINE
CORBA::InterfaceDef::CORBA_InterfaceDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::InterfaceDef::~CORBA_InterfaceDef (void) // destructor
{}


#if !defined (_CORBA_INTERFACEDEF___VAR_CI_)
#define _CORBA_INTERFACEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::InterfaceDef_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef_var::CORBA_InterfaceDef_var (void) // default constructor
  : ptr_ (CORBA::InterfaceDef::_nil ())
{}

ACE_INLINE
CORBA::InterfaceDef_var::CORBA_InterfaceDef_var (CORBA::InterfaceDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::InterfaceDef_ptr 
CORBA::InterfaceDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef_var::CORBA_InterfaceDef_var (const CORBA::InterfaceDef_var &p) // copy constructor
  : ptr_ (CORBA::InterfaceDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::InterfaceDef_var::~CORBA_InterfaceDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::InterfaceDef_var &
CORBA::InterfaceDef_var::operator= (CORBA::InterfaceDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::InterfaceDef_var &
CORBA::InterfaceDef_var::operator= (const CORBA::InterfaceDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::InterfaceDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDef_var::operator const CORBA::InterfaceDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDef_var::operator CORBA::InterfaceDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr 
CORBA::InterfaceDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr
CORBA::InterfaceDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr &
CORBA::InterfaceDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr &
CORBA::InterfaceDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::InterfaceDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr 
CORBA::InterfaceDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::InterfaceDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::InterfaceDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_INTERFACEDEF___OUT_CI_)
#define _CORBA_INTERFACEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::InterfaceDef_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef_out::CORBA_InterfaceDef_out (CORBA::InterfaceDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::InterfaceDef::_nil ();
}

ACE_INLINE
CORBA::InterfaceDef_out::CORBA_InterfaceDef_out (CORBA::InterfaceDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::InterfaceDef::_nil ();
}

ACE_INLINE
CORBA::InterfaceDef_out::CORBA_InterfaceDef_out (const CORBA::InterfaceDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::InterfaceDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::InterfaceDef_out &
CORBA::InterfaceDef_out::operator= (const CORBA::InterfaceDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::InterfaceDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::InterfaceDef_out &
CORBA::InterfaceDef_out::operator= (const CORBA::InterfaceDef_var &p)
{
  this->ptr_ = CORBA::InterfaceDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::InterfaceDef_out &
CORBA::InterfaceDef_out::operator= (CORBA::InterfaceDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDef_out::operator CORBA::InterfaceDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr &
CORBA::InterfaceDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef_ptr 
CORBA::InterfaceDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::InterfaceDef::FullInterfaceDescription_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (CORBA::InterfaceDef::FullInterfaceDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (const CORBA::InterfaceDef::FullInterfaceDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::InterfaceDef::FullInterfaceDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::~FullInterfaceDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_var &
CORBA::InterfaceDef::FullInterfaceDescription_var::operator= (CORBA::InterfaceDef::FullInterfaceDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_var &
CORBA::InterfaceDef::FullInterfaceDescription_var::operator= (const CORBA::InterfaceDef::FullInterfaceDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::InterfaceDef::FullInterfaceDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDef::FullInterfaceDescription_var::operator const CORBA::InterfaceDef::FullInterfaceDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDef::FullInterfaceDescription_var::operator CORBA::InterfaceDef::FullInterfaceDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDef::FullInterfaceDescription_var::operator CORBA::InterfaceDef::FullInterfaceDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::InterfaceDef::FullInterfaceDescription &
CORBA::InterfaceDef::FullInterfaceDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription &
CORBA::InterfaceDef::FullInterfaceDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription *&
CORBA::InterfaceDef::FullInterfaceDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::_retn (void)
{
  CORBA::InterfaceDef::FullInterfaceDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::InterfaceDef::FullInterfaceDescription_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (CORBA::InterfaceDef::FullInterfaceDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (CORBA::InterfaceDef::FullInterfaceDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (const CORBA::InterfaceDef::FullInterfaceDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::InterfaceDef::FullInterfaceDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_out &
CORBA::InterfaceDef::FullInterfaceDescription_out::operator= (const CORBA::InterfaceDef::FullInterfaceDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::InterfaceDef::FullInterfaceDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription_out &
CORBA::InterfaceDef::FullInterfaceDescription_out::operator= (CORBA::InterfaceDef::FullInterfaceDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDef::FullInterfaceDescription_out::operator CORBA::InterfaceDef::FullInterfaceDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription *&
CORBA::InterfaceDef::FullInterfaceDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::InterfaceDescription_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDescription_var::CORBA_InterfaceDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InterfaceDescription_var::CORBA_InterfaceDescription_var (CORBA::InterfaceDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InterfaceDescription_var::CORBA_InterfaceDescription_var (const CORBA::InterfaceDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::InterfaceDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDescription_var::~CORBA_InterfaceDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::InterfaceDescription_var &
CORBA::InterfaceDescription_var::operator= (CORBA::InterfaceDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::InterfaceDescription_var &
CORBA::InterfaceDescription_var::operator= (const CORBA::InterfaceDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::InterfaceDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDescription_var::operator const CORBA::InterfaceDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDescription_var::operator CORBA::InterfaceDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::InterfaceDescription_var::operator CORBA::InterfaceDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::InterfaceDescription &
CORBA::InterfaceDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::InterfaceDescription &
CORBA::InterfaceDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::InterfaceDescription *&
CORBA::InterfaceDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::_retn (void)
{
  CORBA::InterfaceDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::InterfaceDescription_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDescription_out::CORBA_InterfaceDescription_out (CORBA::InterfaceDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDescription_out::CORBA_InterfaceDescription_out (CORBA::InterfaceDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDescription_out::CORBA_InterfaceDescription_out (const CORBA::InterfaceDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::InterfaceDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::InterfaceDescription_out &
CORBA::InterfaceDescription_out::operator= (const CORBA::InterfaceDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::InterfaceDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::InterfaceDescription_out &
CORBA::InterfaceDescription_out::operator= (CORBA::InterfaceDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDescription_out::operator CORBA::InterfaceDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDescription *&
CORBA::InterfaceDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::InterfaceDescription *
CORBA::InterfaceDescription_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueMember_var
// *************************************************************

ACE_INLINE
CORBA::ValueMember_var::CORBA_ValueMember_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ValueMember_var::CORBA_ValueMember_var (CORBA::ValueMember *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ValueMember_var::CORBA_ValueMember_var (const CORBA::ValueMember_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ValueMember(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueMember_var::~CORBA_ValueMember_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ValueMember_var &
CORBA::ValueMember_var::operator= (CORBA::ValueMember *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueMember_var &
CORBA::ValueMember_var::operator= (const CORBA::ValueMember_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ValueMember (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ValueMember *
CORBA::ValueMember_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember *
CORBA::ValueMember_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueMember_var::operator const CORBA::ValueMember &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueMember_var::operator CORBA::ValueMember &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueMember_var::operator CORBA::ValueMember &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ValueMember &
CORBA::ValueMember_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ValueMember &
CORBA::ValueMember_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ValueMember *&
CORBA::ValueMember_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember *
CORBA::ValueMember_var::_retn (void)
{
  CORBA::ValueMember *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ValueMember *
CORBA::ValueMember_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueMember_out
// *************************************************************

ACE_INLINE
CORBA::ValueMember_out::CORBA_ValueMember_out (CORBA::ValueMember *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueMember_out::CORBA_ValueMember_out (CORBA::ValueMember_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueMember_out::CORBA_ValueMember_out (const CORBA::ValueMember_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueMember_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueMember_out &
CORBA::ValueMember_out::operator= (const CORBA::ValueMember_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueMember_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueMember_out &
CORBA::ValueMember_out::operator= (CORBA::ValueMember *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueMember_out::operator CORBA::ValueMember *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember *&
CORBA::ValueMember_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember *
CORBA::ValueMember_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_VALUEMEMBERSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_VALUEMEMBERSEQ_CI_

  // = Static operations.
  ACE_INLINE CORBA::ValueMember *
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    return new CORBA::ValueMember[size];
  }
  
  ACE_INLINE void _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (CORBA::ValueMember *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ValueMember *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::_TAO_Unbounded_Sequence_CORBA_ValueMemberSeq (const _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    CORBA::ValueMember *tmp1 = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (this->maximum_);
    CORBA::ValueMember * const tmp2 = ACE_reinterpret_cast (CORBA::ValueMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    this->buffer_ = tmp1;
  }
  
  ACE_INLINE _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq &
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::operator= (const _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        CORBA::ValueMember *tmp = ACE_reinterpret_cast (CORBA::ValueMember *, this->buffer_);
        _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    CORBA::ValueMember *tmp1 = ACE_reinterpret_cast (CORBA::ValueMember *, this->buffer_);
    CORBA::ValueMember * const tmp2 = ACE_reinterpret_cast (CORBA::ValueMember * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE CORBA::ValueMember &
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ValueMember* tmp = ACE_reinterpret_cast(CORBA::ValueMember*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const CORBA::ValueMember &
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    CORBA::ValueMember * const tmp = ACE_reinterpret_cast (CORBA::ValueMember* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE CORBA::ValueMember *
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::get_buffer (CORBA::Boolean orphan)
  {
    CORBA::ValueMember *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::allocbuf (this->length_);
        this->buffer_ = result;
      }
      else
      {
        result = ACE_reinterpret_cast (CORBA::ValueMember*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(CORBA::ValueMember*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const CORBA::ValueMember *
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const CORBA::ValueMember * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::replace (CORBA::ULong max,
  CORBA::ULong length,
  CORBA::ValueMember *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ValueMember *tmp = ACE_reinterpret_cast(CORBA::ValueMember*,this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ValueMemberSeq::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_VALUEMEMBERSEQ_CI_)
#define _CORBA_VALUEMEMBERSEQ_CI_

// *************************************************************
// Inline operations for class CORBA::ValueMemberSeq_var
// *************************************************************

ACE_INLINE
CORBA::ValueMemberSeq_var::CORBA_ValueMemberSeq_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ValueMemberSeq_var::CORBA_ValueMemberSeq_var (CORBA::ValueMemberSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ValueMemberSeq_var::CORBA_ValueMemberSeq_var (const CORBA::ValueMemberSeq_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ValueMemberSeq(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueMemberSeq_var::~CORBA_ValueMemberSeq_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ValueMemberSeq_var &
CORBA::ValueMemberSeq_var::operator= (CORBA::ValueMemberSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueMemberSeq_var &
CORBA::ValueMemberSeq_var::operator= (const CORBA::ValueMemberSeq_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ValueMemberSeq (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ValueMemberSeq *
CORBA::ValueMemberSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberSeq *
CORBA::ValueMemberSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueMemberSeq_var::operator const CORBA::ValueMemberSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueMemberSeq_var::operator CORBA::ValueMemberSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueMemberSeq_var::operator CORBA::ValueMemberSeq &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ValueMember &
CORBA::ValueMemberSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::ValueMemberSeq &
CORBA::ValueMemberSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ValueMemberSeq &
CORBA::ValueMemberSeq_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ValueMemberSeq *&
CORBA::ValueMemberSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberSeq *
CORBA::ValueMemberSeq_var::_retn (void)
{
  CORBA::ValueMemberSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ValueMemberSeq *
CORBA::ValueMemberSeq_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueMemberSeq_out
// *************************************************************

ACE_INLINE
CORBA::ValueMemberSeq_out::CORBA_ValueMemberSeq_out (CORBA::ValueMemberSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueMemberSeq_out::CORBA_ValueMemberSeq_out (CORBA::ValueMemberSeq_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueMemberSeq_out::CORBA_ValueMemberSeq_out (const CORBA::ValueMemberSeq_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueMemberSeq_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueMemberSeq_out &
CORBA::ValueMemberSeq_out::operator= (const CORBA::ValueMemberSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueMemberSeq_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueMemberSeq_out &
CORBA::ValueMemberSeq_out::operator= (CORBA::ValueMemberSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueMemberSeq_out::operator CORBA::ValueMemberSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberSeq *&
CORBA::ValueMemberSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberSeq *
CORBA::ValueMemberSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMember &
CORBA::ValueMemberSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::ValueMemberDef::CORBA_ValueMemberDef (void) // default constructor
{}

ACE_INLINE
CORBA::ValueMemberDef::CORBA_ValueMemberDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ValueMemberDef::~CORBA_ValueMemberDef (void) // destructor
{}


#if !defined (_CORBA_VALUEMEMBERDEF___VAR_CI_)
#define _CORBA_VALUEMEMBERDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ValueMemberDef_var
// *************************************************************

ACE_INLINE
CORBA::ValueMemberDef_var::CORBA_ValueMemberDef_var (void) // default constructor
  : ptr_ (CORBA::ValueMemberDef::_nil ())
{}

ACE_INLINE
CORBA::ValueMemberDef_var::CORBA_ValueMemberDef_var (CORBA::ValueMemberDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ValueMemberDef_ptr 
CORBA::ValueMemberDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ValueMemberDef_var::CORBA_ValueMemberDef_var (const CORBA::ValueMemberDef_var &p) // copy constructor
  : ptr_ (CORBA::ValueMemberDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ValueMemberDef_var::~CORBA_ValueMemberDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ValueMemberDef_var &
CORBA::ValueMemberDef_var::operator= (CORBA::ValueMemberDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueMemberDef_var &
CORBA::ValueMemberDef_var::operator= (const CORBA::ValueMemberDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ValueMemberDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ValueMemberDef_var::operator const CORBA::ValueMemberDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueMemberDef_var::operator CORBA::ValueMemberDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr 
CORBA::ValueMemberDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr
CORBA::ValueMemberDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr &
CORBA::ValueMemberDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr &
CORBA::ValueMemberDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ValueMemberDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr 
CORBA::ValueMemberDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ValueMemberDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ValueMemberDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEMEMBERDEF___OUT_CI_)
#define _CORBA_VALUEMEMBERDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ValueMemberDef_out
// *************************************************************

ACE_INLINE
CORBA::ValueMemberDef_out::CORBA_ValueMemberDef_out (CORBA::ValueMemberDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ValueMemberDef::_nil ();
}

ACE_INLINE
CORBA::ValueMemberDef_out::CORBA_ValueMemberDef_out (CORBA::ValueMemberDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ValueMemberDef::_nil ();
}

ACE_INLINE
CORBA::ValueMemberDef_out::CORBA_ValueMemberDef_out (const CORBA::ValueMemberDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueMemberDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueMemberDef_out &
CORBA::ValueMemberDef_out::operator= (const CORBA::ValueMemberDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueMemberDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueMemberDef_out &
CORBA::ValueMemberDef_out::operator= (const CORBA::ValueMemberDef_var &p)
{
  this->ptr_ = CORBA::ValueMemberDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ValueMemberDef_out &
CORBA::ValueMemberDef_out::operator= (CORBA::ValueMemberDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueMemberDef_out::operator CORBA::ValueMemberDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr &
CORBA::ValueMemberDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueMemberDef_ptr 
CORBA::ValueMemberDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
CORBA::ValueDef::CORBA_ValueDef (void) // default constructor
{}

ACE_INLINE
CORBA::ValueDef::CORBA_ValueDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ValueDef::~CORBA_ValueDef (void) // destructor
{}


#if !defined (_CORBA_VALUEDEF___VAR_CI_)
#define _CORBA_VALUEDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ValueDef_var
// *************************************************************

ACE_INLINE
CORBA::ValueDef_var::CORBA_ValueDef_var (void) // default constructor
  : ptr_ (CORBA::ValueDef::_nil ())
{}

ACE_INLINE
CORBA::ValueDef_var::CORBA_ValueDef_var (CORBA::ValueDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ValueDef_ptr 
CORBA::ValueDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ValueDef_var::CORBA_ValueDef_var (const CORBA::ValueDef_var &p) // copy constructor
  : ptr_ (CORBA::ValueDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ValueDef_var::~CORBA_ValueDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ValueDef_var &
CORBA::ValueDef_var::operator= (CORBA::ValueDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueDef_var &
CORBA::ValueDef_var::operator= (const CORBA::ValueDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ValueDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ValueDef_var::operator const CORBA::ValueDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueDef_var::operator CORBA::ValueDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr 
CORBA::ValueDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr
CORBA::ValueDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr &
CORBA::ValueDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr &
CORBA::ValueDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ValueDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr 
CORBA::ValueDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ValueDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ValueDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEDEF___OUT_CI_)
#define _CORBA_VALUEDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ValueDef_out
// *************************************************************

ACE_INLINE
CORBA::ValueDef_out::CORBA_ValueDef_out (CORBA::ValueDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ValueDef::_nil ();
}

ACE_INLINE
CORBA::ValueDef_out::CORBA_ValueDef_out (CORBA::ValueDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ValueDef::_nil ();
}

ACE_INLINE
CORBA::ValueDef_out::CORBA_ValueDef_out (const CORBA::ValueDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueDef_out &
CORBA::ValueDef_out::operator= (const CORBA::ValueDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueDef_out &
CORBA::ValueDef_out::operator= (const CORBA::ValueDef_var &p)
{
  this->ptr_ = CORBA::ValueDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ValueDef_out &
CORBA::ValueDef_out::operator= (CORBA::ValueDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueDef_out::operator CORBA::ValueDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr &
CORBA::ValueDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef_ptr 
CORBA::ValueDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class CORBA::ValueDef::FullValueDescription_var
// *************************************************************

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::FullValueDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::FullValueDescription_var (CORBA::ValueDef::FullValueDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::FullValueDescription_var (const CORBA::ValueDef::FullValueDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ValueDef::FullValueDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_var::~FullValueDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription_var &
CORBA::ValueDef::FullValueDescription_var::operator= (CORBA::ValueDef::FullValueDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription_var &
CORBA::ValueDef::FullValueDescription_var::operator= (const CORBA::ValueDef::FullValueDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ValueDef::FullValueDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueDef::FullValueDescription_var::operator const CORBA::ValueDef::FullValueDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueDef::FullValueDescription_var::operator CORBA::ValueDef::FullValueDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueDef::FullValueDescription_var::operator CORBA::ValueDef::FullValueDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ValueDef::FullValueDescription &
CORBA::ValueDef::FullValueDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription &
CORBA::ValueDef::FullValueDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ValueDef::FullValueDescription *&
CORBA::ValueDef::FullValueDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::_retn (void)
{
  CORBA::ValueDef::FullValueDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueDef::FullValueDescription_out
// *************************************************************

ACE_INLINE
CORBA::ValueDef::FullValueDescription_out::FullValueDescription_out (CORBA::ValueDef::FullValueDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_out::FullValueDescription_out (CORBA::ValueDef::FullValueDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDef::FullValueDescription_out::FullValueDescription_out (const CORBA::ValueDef::FullValueDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueDef::FullValueDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueDef::FullValueDescription_out &
CORBA::ValueDef::FullValueDescription_out::operator= (const CORBA::ValueDef::FullValueDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueDef::FullValueDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription_out &
CORBA::ValueDef::FullValueDescription_out::operator= (CORBA::ValueDef::FullValueDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueDef::FullValueDescription_out::operator CORBA::ValueDef::FullValueDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription *&
CORBA::ValueDef::FullValueDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDef::FullValueDescription *
CORBA::ValueDef::FullValueDescription_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueDescription_var
// *************************************************************

ACE_INLINE
CORBA::ValueDescription_var::CORBA_ValueDescription_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ValueDescription_var::CORBA_ValueDescription_var (CORBA::ValueDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ValueDescription_var::CORBA_ValueDescription_var (const CORBA::ValueDescription_var &p) // copy constructor
{
  if (p.ptr_)
    this->ptr_ = new CORBA::ValueDescription(*p.ptr_);
  else
    this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDescription_var::~CORBA_ValueDescription_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CORBA::ValueDescription_var &
CORBA::ValueDescription_var::operator= (CORBA::ValueDescription *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueDescription_var &
CORBA::ValueDescription_var::operator= (const CORBA::ValueDescription_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CORBA::ValueDescription (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CORBA::ValueDescription *
CORBA::ValueDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDescription *
CORBA::ValueDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueDescription_var::operator const CORBA::ValueDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueDescription_var::operator CORBA::ValueDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CORBA::ValueDescription_var::operator CORBA::ValueDescription &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CORBA::ValueDescription &
CORBA::ValueDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CORBA::ValueDescription &
CORBA::ValueDescription_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CORBA::ValueDescription *&
CORBA::ValueDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDescription *
CORBA::ValueDescription_var::_retn (void)
{
  CORBA::ValueDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CORBA::ValueDescription *
CORBA::ValueDescription_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CORBA::ValueDescription_out
// *************************************************************

ACE_INLINE
CORBA::ValueDescription_out::CORBA_ValueDescription_out (CORBA::ValueDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDescription_out::CORBA_ValueDescription_out (CORBA::ValueDescription_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ValueDescription_out::CORBA_ValueDescription_out (const CORBA::ValueDescription_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueDescription_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueDescription_out &
CORBA::ValueDescription_out::operator= (const CORBA::ValueDescription_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueDescription_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueDescription_out &
CORBA::ValueDescription_out::operator= (CORBA::ValueDescription *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueDescription_out::operator CORBA::ValueDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDescription *&
CORBA::ValueDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueDescription *
CORBA::ValueDescription_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ValueBoxDef::CORBA_ValueBoxDef (void) // default constructor
{}

ACE_INLINE
CORBA::ValueBoxDef::CORBA_ValueBoxDef (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}

ACE_INLINE
CORBA::ValueBoxDef::~CORBA_ValueBoxDef (void) // destructor
{}


#if !defined (_CORBA_VALUEBOXDEF___VAR_CI_)
#define _CORBA_VALUEBOXDEF___VAR_CI_

// *************************************************************
// Inline operations for class CORBA::ValueBoxDef_var
// *************************************************************

ACE_INLINE
CORBA::ValueBoxDef_var::CORBA_ValueBoxDef_var (void) // default constructor
  : ptr_ (CORBA::ValueBoxDef::_nil ())
{}

ACE_INLINE
CORBA::ValueBoxDef_var::CORBA_ValueBoxDef_var (CORBA::ValueBoxDef_ptr p)
  : ptr_ (p)
{}

ACE_INLINE CORBA::ValueBoxDef_ptr 
CORBA::ValueBoxDef_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ValueBoxDef_var::CORBA_ValueBoxDef_var (const CORBA::ValueBoxDef_var &p) // copy constructor
  : ptr_ (CORBA::ValueBoxDef::_duplicate (p.ptr ()))
{}

ACE_INLINE
CORBA::ValueBoxDef_var::~CORBA_ValueBoxDef_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CORBA::ValueBoxDef_var &
CORBA::ValueBoxDef_var::operator= (CORBA::ValueBoxDef_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CORBA::ValueBoxDef_var &
CORBA::ValueBoxDef_var::operator= (const CORBA::ValueBoxDef_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CORBA::ValueBoxDef::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CORBA::ValueBoxDef_var::operator const CORBA::ValueBoxDef_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CORBA::ValueBoxDef_var::operator CORBA::ValueBoxDef_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr 
CORBA::ValueBoxDef_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr
CORBA::ValueBoxDef_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr &
CORBA::ValueBoxDef_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr &
CORBA::ValueBoxDef_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ValueBoxDef::_nil ();
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr 
CORBA::ValueBoxDef_var::_retn (void)
{
  // yield ownership of managed obj reference
  CORBA::ValueBoxDef_ptr val = this->ptr_;
  this->ptr_ = CORBA::ValueBoxDef::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_CORBA_VALUEBOXDEF___OUT_CI_)
#define _CORBA_VALUEBOXDEF___OUT_CI_

// *************************************************************
// Inline operations for class CORBA::ValueBoxDef_out
// *************************************************************

ACE_INLINE
CORBA::ValueBoxDef_out::CORBA_ValueBoxDef_out (CORBA::ValueBoxDef_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = CORBA::ValueBoxDef::_nil ();
}

ACE_INLINE
CORBA::ValueBoxDef_out::CORBA_ValueBoxDef_out (CORBA::ValueBoxDef_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CORBA::ValueBoxDef::_nil ();
}

ACE_INLINE
CORBA::ValueBoxDef_out::CORBA_ValueBoxDef_out (const CORBA::ValueBoxDef_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CORBA::ValueBoxDef_out&,p).ptr_)
{}

ACE_INLINE CORBA::ValueBoxDef_out &
CORBA::ValueBoxDef_out::operator= (const CORBA::ValueBoxDef_out &p)
{
  this->ptr_ = ACE_const_cast (CORBA::ValueBoxDef_out&,p).ptr_;
  return *this;
}

ACE_INLINE CORBA::ValueBoxDef_out &
CORBA::ValueBoxDef_out::operator= (const CORBA::ValueBoxDef_var &p)
{
  this->ptr_ = CORBA::ValueBoxDef::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CORBA::ValueBoxDef_out &
CORBA::ValueBoxDef_out::operator= (CORBA::ValueBoxDef_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CORBA::ValueBoxDef_out::operator CORBA::ValueBoxDef_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr &
CORBA::ValueBoxDef_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CORBA::ValueBoxDef_ptr 
CORBA::ValueBoxDef_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::DefinitionKind &_tao_enumval)
{
  return strm.write_ulong ((CORBA::ULong) _tao_enumval);
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::DefinitionKind &_tao_enumval)
{
  CORBA::ULong _tao_temp;
  if (strm.read_ulong (_tao_temp))
  {
    ACE_OS::memcpy (&_tao_enumval, &_tao_temp, sizeof (CORBA::ULong));
    return 1;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::IRObject_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::IRObject_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::IRObject_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::IRObject_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::IRObject::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Contained_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Contained_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Repository_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Repository_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Container_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Container_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Contained_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Contained_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::Contained::Description &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::Contained::Description &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Contained_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::Contained_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::Contained::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ModuleDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ModuleDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ConstantDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ConstantDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::IDLType_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::IDLType_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StructDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StructDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::UnionDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::UnionDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::EnumDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::EnumDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::AliasDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::AliasDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::InterfaceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::InterfaceDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::NativeDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::NativeDef_ptr &
  );
CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::InterfaceDefSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::InterfaceDefSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueDef_ptr &
  );
CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueDefSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ValueDefSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueBoxDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueBoxDef_ptr &
  );
CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ContainedSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ContainedSeq &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::StructMember &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::StructMember &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ())
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::StructMemberSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::StructMemberSeq &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::Initializer &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.members)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::Initializer &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.members)
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::InitializerSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::InitializerSeq &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::UnionMember &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.label) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::UnionMember &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.label) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ())
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::UnionMemberSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::UnionMemberSeq &
  );

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::EnumMemberSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::EnumMemberSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Container_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Container_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::Container::Description &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.contained_object.in ()) &&
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::Container::Description &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.contained_object.out ()) &&
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::Container::DescriptionSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::Container::DescriptionSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Container_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::Container_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::Container::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::IDLType_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::IDLType_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::IDLType_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::IDLType_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::IDLType::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::PrimitiveDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::PrimitiveDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StringDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::SequenceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::SequenceDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ArrayDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ArrayDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::WstringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::WstringDef_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::FixedDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::FixedDef_ptr &
  );
ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::PrimitiveKind &_tao_enumval)
{
  return strm.write_ulong ((CORBA::ULong) _tao_enumval);
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::PrimitiveKind &_tao_enumval)
{
  CORBA::ULong _tao_temp;
  if (strm.read_ulong (_tao_temp))
  {
    ACE_OS::memcpy (&_tao_enumval, &_tao_temp, sizeof (CORBA::ULong));
    return 1;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::Repository_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::Repository_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Repository_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::Repository_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::Repository::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ModuleDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ModuleDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ModuleDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ModuleDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ModuleDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ModuleDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ModuleDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ConstantDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ConstantDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ConstantDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ConstantDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ConstantDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ConstantDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ConstantDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.value)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::TypedefDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::TypedefDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::TypedefDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::TypedefDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::TypedefDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::TypeDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::TypeDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StructDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StructDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StructDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::StructDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::StructDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::UnionDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::UnionDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::UnionDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::UnionDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::UnionDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::EnumDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::EnumDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::EnumDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::EnumDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::EnumDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::AliasDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::AliasDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AliasDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::AliasDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::AliasDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::PrimitiveDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::PrimitiveDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::PrimitiveDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::PrimitiveDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::PrimitiveDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::StringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::StringDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StringDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::StringDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::StringDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::WstringDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::WstringDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::WstringDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::WstringDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::WstringDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::FixedDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::FixedDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::FixedDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::FixedDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::FixedDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::SequenceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::SequenceDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::SequenceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::SequenceDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::SequenceDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ArrayDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ArrayDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ArrayDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ArrayDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ArrayDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExceptionDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ExceptionDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ExceptionDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ExceptionDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ExceptionDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::AttributeMode &_tao_enumval)
{
  return strm.write_ulong ((CORBA::ULong) _tao_enumval);
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::AttributeMode &_tao_enumval)
{
  CORBA::ULong _tao_temp;
  if (strm.read_ulong (_tao_temp))
  {
    ACE_OS::memcpy (&_tao_enumval, &_tao_temp, sizeof (CORBA::ULong));
    return 1;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::AttributeDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::AttributeDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AttributeDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::AttributeDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::AttributeDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::AttributeDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::AttributeDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::OperationMode &_tao_enumval)
{
  return strm.write_ulong ((CORBA::ULong) _tao_enumval);
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::OperationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp;
  if (strm.read_ulong (_tao_temp))
  {
    ACE_OS::memcpy (&_tao_enumval, &_tao_temp, sizeof (CORBA::ULong));
    return 1;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ParameterMode &_tao_enumval)
{
  return strm.write_ulong ((CORBA::ULong) _tao_enumval);
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ParameterMode &_tao_enumval)
{
  CORBA::ULong _tao_temp;
  if (strm.read_ulong (_tao_temp))
  {
    ACE_OS::memcpy (&_tao_enumval, &_tao_temp, sizeof (CORBA::ULong));
    return 1;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ParameterDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ()) &&
    (strm << _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ParameterDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ()) &&
    (strm >> _tao_aggregate.mode)
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ParDescriptionSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ParDescriptionSeq &
  );

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ContextIdSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ContextIdSeq &
  );

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDefSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDefSeq &
  );

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ExcDescriptionSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ExcDescriptionSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::OperationDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::OperationDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::OperationDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::OperationDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::OperationDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::OperationDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.result.in ()) &&
    (strm << _tao_aggregate.mode) &&
    (strm << _tao_aggregate.contexts) &&
    (strm << _tao_aggregate.parameters) &&
    (strm << _tao_aggregate.exceptions)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::OperationDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.result.out ()) &&
    (strm >> _tao_aggregate.mode) &&
    (strm >> _tao_aggregate.contexts) &&
    (strm >> _tao_aggregate.parameters) &&
    (strm >> _tao_aggregate.exceptions)
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::RepositoryIdSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::RepositoryIdSeq &
  );

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::OpDescriptionSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::OpDescriptionSeq &
  );

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::AttrDescriptionSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::AttrDescriptionSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::InterfaceDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::InterfaceDef_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::InterfaceDef::FullInterfaceDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.operations) &&
    (strm << _tao_aggregate.attributes) &&
    (strm << _tao_aggregate.base_interfaces) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_abstract))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::InterfaceDef::FullInterfaceDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.operations) &&
    (strm >> _tao_aggregate.attributes) &&
    (strm >> _tao_aggregate.base_interfaces) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_abstract))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::InterfaceDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::InterfaceDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.base_interfaces) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_abstract))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::InterfaceDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.base_interfaces) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_abstract))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ValueMember &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.type_def.in ()) &&
    (strm << _tao_aggregate.access)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ValueMember &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ()) &&
    (strm >> _tao_aggregate.access)
  )
    return 1;
  else
    return 0;
  
}

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueMemberSeq &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    CORBA::ValueMemberSeq &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueMemberDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueMemberDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueMemberDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueMemberDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ValueMemberDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueDef_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ValueDef::FullValueDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_abstract)) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_custom)) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.operations) &&
    (strm << _tao_aggregate.attributes) &&
    (strm << _tao_aggregate.members) &&
    (strm << _tao_aggregate.initializers) &&
    (strm << _tao_aggregate.supported_interfaces) &&
    (strm << _tao_aggregate.abstract_base_values) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_truncatable)) &&
    (strm << _tao_aggregate.base_value.in ()) &&
    (strm << _tao_aggregate.type.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ValueDef::FullValueDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_abstract)) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_custom)) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.operations) &&
    (strm >> _tao_aggregate.attributes) &&
    (strm >> _tao_aggregate.members) &&
    (strm >> _tao_aggregate.initializers) &&
    (strm >> _tao_aggregate.supported_interfaces) &&
    (strm >> _tao_aggregate.abstract_base_values) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_truncatable)) &&
    (strm >> _tao_aggregate.base_value.out ()) &&
    (strm >> _tao_aggregate.type.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ValueDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::ValueDescription &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_abstract)) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_custom)) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.supported_interface.in ()) &&
    (strm << _tao_aggregate.abstract_base_values) &&
    (strm << CORBA::Any::from_boolean (_tao_aggregate.is_truncatable)) &&
    (strm << _tao_aggregate.base_value.in ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::ValueDescription &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_abstract)) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_custom)) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.supported_interface.out ()) &&
    (strm >> _tao_aggregate.abstract_base_values) &&
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.is_truncatable)) &&
    (strm >> _tao_aggregate.base_value.out ())
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const CORBA::ValueBoxDef_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    CORBA::ValueBoxDef_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueBoxDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueBoxDef_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      CORBA::ValueBoxDef::_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

#endif /*TAO_HAS_INTERFACE_REPOSITORY */
