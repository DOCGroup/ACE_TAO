/**
 * @file IORTable.pidl
 *
 * $Id$
 *
 * @author Carlos O'Ryan <coryan@uci.edu>
 *
 * @brief Pre-compiled IDL source for the IORTable module.
 */

#ifndef TAO_IORTABLE_IORTABLE_PIDL
#define TAO_IORTABLE_IORTABLE_PIDL

/// Define a module to avoid namespace pollution
module IORTable
{
  local interface Locator;

  /// The object key is already in the IORTable
  exception AlreadyBound {};

  /// Cannot find the object key in the IORTable
  exception NotFound {};

  /// Define the IORTable interface
  /**
   *
   *  Any TAO server can be configured as an corbaloc agent.
   *  Such agents forward requests generated using a simple
   *  ObjectKey in a corbaloc specifcation to the real location
   *  of the object.
   *  In TAO we implement this feature by dynamically (or
   *  statically) adding a new Object Adapter to the ORB, that
   *  handles any sort of request.
   */
  local interface Table
  {
    /// Bind @a object_key to the @a IOR
    void bind (in string object_key,
               in string IOR)
      raises (AlreadyBound);

    /// Bind @a object_key to the @a IOR
    void rebind (in string object_key,
                 in string IOR);

    /// Remove the binding for @a object_key
    void unbind (in string object_key)
      raises (NotFound);

    /// Set the locator, if no binding is set for an object_key we try
    /// to use the locator to resolve it
    void set_locator (in Locator the_locator);
  };

  /// Callback interface to locate object keys dynamically
  /**
   * The application can provide a callback interface to locate object
   * keys dynamically.
   */
  local interface Locator
  {
    /// Returns an IOR to use for @a object_key
    string locate (in string object_key)
      raises (NotFound);
  };

  /// Callback interface to locate object keys dynamically
  /**
   * The application can provide a callback interface to locate object
   * keys dynamically.
   */
  native Locate_ResponseHandler;
  local interface AsyncLocator : Locator
  {
    /// Uses AMH semantics to send IOR for @a object_key via the supplied
    /// response handler
    void async_locate (in Locate_ResponseHandler rh, in string object_key);

  };
};

#endif /* TAO_IORTABLE_IORTABLE_PIDL */
