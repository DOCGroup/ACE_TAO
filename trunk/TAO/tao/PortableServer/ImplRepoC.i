// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_IMPLEMENTATIONREPOSITORY_SERVEROBJECT___CI_)
#define _IMPLEMENTATIONREPOSITORY_SERVEROBJECT___CI_

ACE_INLINE ImplementationRepository::ServerObject_ptr
tao_ImplementationRepository_ServerObject_duplicate (
    ImplementationRepository::ServerObject_ptr p
  )
{
  return ImplementationRepository::ServerObject::_duplicate (p);
}

ACE_INLINE void
tao_ImplementationRepository_ServerObject_release (
    ImplementationRepository::ServerObject_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE ImplementationRepository::ServerObject_ptr
tao_ImplementationRepository_ServerObject_nil (
    void
  )
{
  return ImplementationRepository::ServerObject::_nil ();
}

ACE_INLINE ImplementationRepository::ServerObject_ptr
tao_ImplementationRepository_ServerObject_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ImplementationRepository::ServerObject::_narrow (p TAO_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_ImplementationRepository_ServerObject_upcast (
    void *src
  )
{
  ImplementationRepository::ServerObject **tmp =
    ACE_static_cast (ImplementationRepository::ServerObject **, src);
  return *tmp;
}

ACE_INLINE
ImplementationRepository::ServerObject::ServerObject (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->ImplementationRepository_ServerObject_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class ImplementationRepository::EnvironmentVariable_var
// *************************************************************

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::EnvironmentVariable_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::EnvironmentVariable_var (EnvironmentVariable *p)
  : ptr_ (p)
{}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::EnvironmentVariable_var (const ::ImplementationRepository::EnvironmentVariable_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::ImplementationRepository::EnvironmentVariable (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::~EnvironmentVariable_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE ImplementationRepository::EnvironmentVariable_var &
ImplementationRepository::EnvironmentVariable_var::operator= (EnvironmentVariable *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable_var &
ImplementationRepository::EnvironmentVariable_var::operator= (const ::ImplementationRepository::EnvironmentVariable_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          EnvironmentVariable *deep_copy =
            new EnvironmentVariable (*p.ptr_);

          if (deep_copy != 0)
            {
              EnvironmentVariable *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::ImplementationRepository::EnvironmentVariable *
ImplementationRepository::EnvironmentVariable_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable *
ImplementationRepository::EnvironmentVariable_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::operator const ::ImplementationRepository::EnvironmentVariable &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::operator ::ImplementationRepository::EnvironmentVariable &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::operator ::ImplementationRepository::EnvironmentVariable &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
ImplementationRepository::EnvironmentVariable_var::operator ::ImplementationRepository::EnvironmentVariable *&() // cast
{
  return this->ptr_;
}

ACE_INLINE const ::ImplementationRepository::EnvironmentVariable &
ImplementationRepository::EnvironmentVariable_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable &
ImplementationRepository::EnvironmentVariable_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::ImplementationRepository::EnvironmentVariable *&
ImplementationRepository::EnvironmentVariable_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable *
ImplementationRepository::EnvironmentVariable_var::_retn (void)
{
  ::ImplementationRepository::EnvironmentVariable *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable *
ImplementationRepository::EnvironmentVariable_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class ImplementationRepository::EnvironmentVariable_out
// *************************************************************

ACE_INLINE
ImplementationRepository::EnvironmentVariable_out::EnvironmentVariable_out (::ImplementationRepository::EnvironmentVariable *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_out::EnvironmentVariable_out (EnvironmentVariable_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_out::EnvironmentVariable_out (const ::ImplementationRepository::EnvironmentVariable_out &p) // copy constructor
  : ptr_ (ACE_const_cast (EnvironmentVariable_out&, p).ptr_)
{}

ACE_INLINE ImplementationRepository::EnvironmentVariable_out &
ImplementationRepository::EnvironmentVariable_out::operator= (const ::ImplementationRepository::EnvironmentVariable_out &p)
{
  this->ptr_ = ACE_const_cast (EnvironmentVariable_out&, p).ptr_;
  return *this;
}

ACE_INLINE ImplementationRepository::EnvironmentVariable_out &
ImplementationRepository::EnvironmentVariable_out::operator= (EnvironmentVariable *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
ImplementationRepository::EnvironmentVariable_out::operator ::ImplementationRepository::EnvironmentVariable *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable *&
ImplementationRepository::EnvironmentVariable_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentVariable *
ImplementationRepository::EnvironmentVariable_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CI_

// = Static operations.
ACE_INLINE ImplementationRepository::EnvironmentVariable *
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (CORBA::ULong size)
// Allocate storage for the sequence.
{
  ImplementationRepository::EnvironmentVariable *retval = 0;
  ACE_NEW_RETURN (retval, ImplementationRepository::EnvironmentVariable[size], 0);
  return retval;
}

ACE_INLINE void ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::freebuf (ImplementationRepository::EnvironmentVariable *buffer)
// Free the sequence.
{
  delete [] buffer;
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList (void) // Default constructor.
{
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList (CORBA::ULong maximum) // Constructor using a maximum length value.
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (maximum))
{
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList (CORBA::ULong maximum,
  CORBA::ULong length,
  ImplementationRepository::EnvironmentVariable *data,
  CORBA::Boolean release)
: TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList (const _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList &rhs)
// Copy constructor.
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
  {
    ImplementationRepository::EnvironmentVariable *tmp1 = _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (this->maximum_);
    ImplementationRepository::EnvironmentVariable * const tmp2 = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    this->buffer_ = tmp1;
  }
  else
  {
    this->buffer_ = 0;
  }
}

ACE_INLINE ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList &
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::operator= (const _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList &rhs)
// Assignment operator.
{
  if (this == &rhs)
    return *this;

  if (this->release_)
  {
    if (this->maximum_ < rhs.maximum_)
    {
      // free the old buffer
      ImplementationRepository::EnvironmentVariable *tmp = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable *, this->buffer_);
      _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::freebuf (tmp);
      this->buffer_ = _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (rhs.maximum_);
    }
  }
  else
    this->buffer_ = _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (rhs.maximum_);

  TAO_Unbounded_Base_Sequence::operator= (rhs);

  ImplementationRepository::EnvironmentVariable *tmp1 = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable *, this->buffer_);
  ImplementationRepository::EnvironmentVariable * const tmp2 = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable * ACE_CAST_CONST, rhs.buffer_);

  for (CORBA::ULong i = 0; i < this->length_; ++i)
    tmp1[i] = tmp2[i];

  return *this;
}

// = Accessors.
ACE_INLINE ImplementationRepository::EnvironmentVariable &
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::operator[] (CORBA::ULong i)
// operator []
{
  ACE_ASSERT (i < this->maximum_);
  ImplementationRepository::EnvironmentVariable* tmp = ACE_reinterpret_cast(ImplementationRepository::EnvironmentVariable*,this->buffer_);
  return tmp[i];
}

ACE_INLINE const ImplementationRepository::EnvironmentVariable &
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::operator[] (CORBA::ULong i) const
// operator []
{
  ACE_ASSERT (i < this->maximum_);
  ImplementationRepository::EnvironmentVariable * const tmp = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE ImplementationRepository::EnvironmentVariable *
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::get_buffer (CORBA::Boolean orphan)
{
  ImplementationRepository::EnvironmentVariable *result = 0;
  if (orphan == 0)
  {
    // We retain ownership.
    if (this->buffer_ == 0)
    {
      result = _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::allocbuf (this->length_);
      this->buffer_ = result;
      this->release_ = 1;
    }
    else
    {
      result = ACE_reinterpret_cast (ImplementationRepository::EnvironmentVariable*, this->buffer_);
    }
  }
  else // if (orphan == 1)
  {
    if (this->release_ != 0)
    {
      // We set the state back to default and relinquish
      // ownership.
      result = ACE_reinterpret_cast(ImplementationRepository::EnvironmentVariable*,this->buffer_);
      this->maximum_ = 0;
      this->length_ = 0;
      this->buffer_ = 0;
      this->release_ = 0;
    }
  }
  return result;
}

ACE_INLINE const ImplementationRepository::EnvironmentVariable *
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::get_buffer (void) const
{
  return ACE_reinterpret_cast(const ImplementationRepository::EnvironmentVariable * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE void
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::replace (CORBA::ULong max,
CORBA::ULong length,
ImplementationRepository::EnvironmentVariable *data,
CORBA::Boolean release)
{
  this->maximum_ = max;
  this->length_ = length;
  if (this->buffer_ && this->release_ == 1)
  {
    ImplementationRepository::EnvironmentVariable *tmp = ACE_reinterpret_cast(ImplementationRepository::EnvironmentVariable*,this->buffer_);
    _TAO_Unbounded_Sequence_ImplementationRepository_EnvironmentList::freebuf (tmp);
  }
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CI_)
#define _IMPLEMENTATIONREPOSITORY_ENVIRONMENTLIST_CI_

// *************************************************************
// Inline operations for class ImplementationRepository::EnvironmentList_var
// *************************************************************

ACE_INLINE
ImplementationRepository::EnvironmentList_var::EnvironmentList_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
ImplementationRepository::EnvironmentList_var::EnvironmentList_var (EnvironmentList *p)
  : ptr_ (p)
{}

ACE_INLINE
ImplementationRepository::EnvironmentList_var::EnvironmentList_var (const ::ImplementationRepository::EnvironmentList_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::ImplementationRepository::EnvironmentList (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_var::~EnvironmentList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE ImplementationRepository::EnvironmentList_var &
ImplementationRepository::EnvironmentList_var::operator= (EnvironmentList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList_var &
ImplementationRepository::EnvironmentList_var::operator= (const ::ImplementationRepository::EnvironmentList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          EnvironmentList *deep_copy =
            new EnvironmentList (*p.ptr_);

          if (deep_copy != 0)
            {
              EnvironmentList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::ImplementationRepository::EnvironmentList *
ImplementationRepository::EnvironmentList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList *
ImplementationRepository::EnvironmentList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_var::operator const ::ImplementationRepository::EnvironmentList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_var::operator ::ImplementationRepository::EnvironmentList &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_var::operator ::ImplementationRepository::EnvironmentList &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
ImplementationRepository::EnvironmentList_var::operator ::ImplementationRepository::EnvironmentList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ImplementationRepository::EnvironmentVariable &
ImplementationRepository::EnvironmentList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ImplementationRepository::EnvironmentVariable &
ImplementationRepository::EnvironmentList_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const ImplementationRepository::EnvironmentVariable &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::ImplementationRepository::EnvironmentList &
ImplementationRepository::EnvironmentList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList &
ImplementationRepository::EnvironmentList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::ImplementationRepository::EnvironmentList *&
ImplementationRepository::EnvironmentList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList *
ImplementationRepository::EnvironmentList_var::_retn (void)
{
  ::ImplementationRepository::EnvironmentList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList *
ImplementationRepository::EnvironmentList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class ImplementationRepository::EnvironmentList_out
// *************************************************************

ACE_INLINE
ImplementationRepository::EnvironmentList_out::EnvironmentList_out (EnvironmentList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_out::EnvironmentList_out (EnvironmentList_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_out::EnvironmentList_out (const ::ImplementationRepository::EnvironmentList_out &p) // copy constructor
  : ptr_ (ACE_const_cast (EnvironmentList_out&, p).ptr_)
{}

ACE_INLINE ::ImplementationRepository::EnvironmentList_out &
ImplementationRepository::EnvironmentList_out::operator= (const ::ImplementationRepository::EnvironmentList_out &p)
{
  this->ptr_ = ACE_const_cast (EnvironmentList_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList_out &
ImplementationRepository::EnvironmentList_out::operator= (EnvironmentList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
ImplementationRepository::EnvironmentList_out::operator ::ImplementationRepository::EnvironmentList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList *&
ImplementationRepository::EnvironmentList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::EnvironmentList *
ImplementationRepository::EnvironmentList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE ImplementationRepository::EnvironmentVariable &
ImplementationRepository::EnvironmentList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class ImplementationRepository::StartupOptions_var
// *************************************************************

ACE_INLINE
ImplementationRepository::StartupOptions_var::StartupOptions_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
ImplementationRepository::StartupOptions_var::StartupOptions_var (StartupOptions *p)
  : ptr_ (p)
{}

ACE_INLINE
ImplementationRepository::StartupOptions_var::StartupOptions_var (const ::ImplementationRepository::StartupOptions_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::ImplementationRepository::StartupOptions (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::StartupOptions_var::~StartupOptions_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE ImplementationRepository::StartupOptions_var &
ImplementationRepository::StartupOptions_var::operator= (StartupOptions *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::ImplementationRepository::StartupOptions_var &
ImplementationRepository::StartupOptions_var::operator= (const ::ImplementationRepository::StartupOptions_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          StartupOptions *deep_copy =
            new StartupOptions (*p.ptr_);

          if (deep_copy != 0)
            {
              StartupOptions *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::ImplementationRepository::StartupOptions *
ImplementationRepository::StartupOptions_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::StartupOptions *
ImplementationRepository::StartupOptions_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
ImplementationRepository::StartupOptions_var::operator const ::ImplementationRepository::StartupOptions &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::StartupOptions_var::operator ::ImplementationRepository::StartupOptions &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::StartupOptions_var::operator ::ImplementationRepository::StartupOptions &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
ImplementationRepository::StartupOptions_var::operator ::ImplementationRepository::StartupOptions *&() // cast
{
  return this->ptr_;
}

ACE_INLINE const ::ImplementationRepository::StartupOptions &
ImplementationRepository::StartupOptions_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::ImplementationRepository::StartupOptions &
ImplementationRepository::StartupOptions_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::ImplementationRepository::StartupOptions *&
ImplementationRepository::StartupOptions_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::StartupOptions *
ImplementationRepository::StartupOptions_var::_retn (void)
{
  ::ImplementationRepository::StartupOptions *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::ImplementationRepository::StartupOptions *
ImplementationRepository::StartupOptions_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class ImplementationRepository::StartupOptions_out
// *************************************************************

ACE_INLINE
ImplementationRepository::StartupOptions_out::StartupOptions_out (::ImplementationRepository::StartupOptions *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::StartupOptions_out::StartupOptions_out (StartupOptions_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::StartupOptions_out::StartupOptions_out (const ::ImplementationRepository::StartupOptions_out &p) // copy constructor
  : ptr_ (ACE_const_cast (StartupOptions_out&, p).ptr_)
{}

ACE_INLINE ImplementationRepository::StartupOptions_out &
ImplementationRepository::StartupOptions_out::operator= (const ::ImplementationRepository::StartupOptions_out &p)
{
  this->ptr_ = ACE_const_cast (StartupOptions_out&, p).ptr_;
  return *this;
}

ACE_INLINE ImplementationRepository::StartupOptions_out &
ImplementationRepository::StartupOptions_out::operator= (StartupOptions *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
ImplementationRepository::StartupOptions_out::operator ::ImplementationRepository::StartupOptions *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::StartupOptions *&
ImplementationRepository::StartupOptions_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::StartupOptions *
ImplementationRepository::StartupOptions_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class ImplementationRepository::ServerInformation_var
// *************************************************************

ACE_INLINE
ImplementationRepository::ServerInformation_var::ServerInformation_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
ImplementationRepository::ServerInformation_var::ServerInformation_var (ServerInformation *p)
  : ptr_ (p)
{}

ACE_INLINE
ImplementationRepository::ServerInformation_var::ServerInformation_var (const ::ImplementationRepository::ServerInformation_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::ImplementationRepository::ServerInformation (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::ServerInformation_var::~ServerInformation_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE ImplementationRepository::ServerInformation_var &
ImplementationRepository::ServerInformation_var::operator= (ServerInformation *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::ImplementationRepository::ServerInformation_var &
ImplementationRepository::ServerInformation_var::operator= (const ::ImplementationRepository::ServerInformation_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ServerInformation *deep_copy =
            new ServerInformation (*p.ptr_);

          if (deep_copy != 0)
            {
              ServerInformation *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::ImplementationRepository::ServerInformation *
ImplementationRepository::ServerInformation_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformation *
ImplementationRepository::ServerInformation_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
ImplementationRepository::ServerInformation_var::operator const ::ImplementationRepository::ServerInformation &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::ServerInformation_var::operator ::ImplementationRepository::ServerInformation &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::ServerInformation_var::operator ::ImplementationRepository::ServerInformation &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
ImplementationRepository::ServerInformation_var::operator ::ImplementationRepository::ServerInformation *&() // cast
{
  return this->ptr_;
}

ACE_INLINE const ::ImplementationRepository::ServerInformation &
ImplementationRepository::ServerInformation_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformation &
ImplementationRepository::ServerInformation_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::ImplementationRepository::ServerInformation *&
ImplementationRepository::ServerInformation_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformation *
ImplementationRepository::ServerInformation_var::_retn (void)
{
  ::ImplementationRepository::ServerInformation *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::ImplementationRepository::ServerInformation *
ImplementationRepository::ServerInformation_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class ImplementationRepository::ServerInformation_out
// *************************************************************

ACE_INLINE
ImplementationRepository::ServerInformation_out::ServerInformation_out (::ImplementationRepository::ServerInformation *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::ServerInformation_out::ServerInformation_out (ServerInformation_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::ServerInformation_out::ServerInformation_out (const ::ImplementationRepository::ServerInformation_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ServerInformation_out&, p).ptr_)
{}

ACE_INLINE ImplementationRepository::ServerInformation_out &
ImplementationRepository::ServerInformation_out::operator= (const ::ImplementationRepository::ServerInformation_out &p)
{
  this->ptr_ = ACE_const_cast (ServerInformation_out&, p).ptr_;
  return *this;
}

ACE_INLINE ImplementationRepository::ServerInformation_out &
ImplementationRepository::ServerInformation_out::operator= (ServerInformation *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
ImplementationRepository::ServerInformation_out::operator ::ImplementationRepository::ServerInformation *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformation *&
ImplementationRepository::ServerInformation_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformation *
ImplementationRepository::ServerInformation_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CI_

// = Static operations.
ACE_INLINE ImplementationRepository::ServerInformation *
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (CORBA::ULong size)
// Allocate storage for the sequence.
{
  ImplementationRepository::ServerInformation *retval = 0;
  ACE_NEW_RETURN (retval, ImplementationRepository::ServerInformation[size], 0);
  return retval;
}

ACE_INLINE void ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::freebuf (ImplementationRepository::ServerInformation *buffer)
// Free the sequence.
{
  delete [] buffer;
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList (void) // Default constructor.
{
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList (CORBA::ULong maximum) // Constructor using a maximum length value.
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (maximum))
{
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList (CORBA::ULong maximum,
  CORBA::ULong length,
  ImplementationRepository::ServerInformation *data,
  CORBA::Boolean release)
: TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList (const _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList &rhs)
// Copy constructor.
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
  {
    ImplementationRepository::ServerInformation *tmp1 = _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (this->maximum_);
    ImplementationRepository::ServerInformation * const tmp2 = ACE_reinterpret_cast (ImplementationRepository::ServerInformation * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    this->buffer_ = tmp1;
  }
  else
  {
    this->buffer_ = 0;
  }
}

ACE_INLINE ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList &
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::operator= (const _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList &rhs)
// Assignment operator.
{
  if (this == &rhs)
    return *this;

  if (this->release_)
  {
    if (this->maximum_ < rhs.maximum_)
    {
      // free the old buffer
      ImplementationRepository::ServerInformation *tmp = ACE_reinterpret_cast (ImplementationRepository::ServerInformation *, this->buffer_);
      _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::freebuf (tmp);
      this->buffer_ = _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (rhs.maximum_);
    }
  }
  else
    this->buffer_ = _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (rhs.maximum_);

  TAO_Unbounded_Base_Sequence::operator= (rhs);

  ImplementationRepository::ServerInformation *tmp1 = ACE_reinterpret_cast (ImplementationRepository::ServerInformation *, this->buffer_);
  ImplementationRepository::ServerInformation * const tmp2 = ACE_reinterpret_cast (ImplementationRepository::ServerInformation * ACE_CAST_CONST, rhs.buffer_);

  for (CORBA::ULong i = 0; i < this->length_; ++i)
    tmp1[i] = tmp2[i];

  return *this;
}

// = Accessors.
ACE_INLINE ImplementationRepository::ServerInformation &
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::operator[] (CORBA::ULong i)
// operator []
{
  ACE_ASSERT (i < this->maximum_);
  ImplementationRepository::ServerInformation* tmp = ACE_reinterpret_cast(ImplementationRepository::ServerInformation*,this->buffer_);
  return tmp[i];
}

ACE_INLINE const ImplementationRepository::ServerInformation &
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::operator[] (CORBA::ULong i) const
// operator []
{
  ACE_ASSERT (i < this->maximum_);
  ImplementationRepository::ServerInformation * const tmp = ACE_reinterpret_cast (ImplementationRepository::ServerInformation* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE ImplementationRepository::ServerInformation *
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::get_buffer (CORBA::Boolean orphan)
{
  ImplementationRepository::ServerInformation *result = 0;
  if (orphan == 0)
  {
    // We retain ownership.
    if (this->buffer_ == 0)
    {
      result = _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::allocbuf (this->length_);
      this->buffer_ = result;
      this->release_ = 1;
    }
    else
    {
      result = ACE_reinterpret_cast (ImplementationRepository::ServerInformation*, this->buffer_);
    }
  }
  else // if (orphan == 1)
  {
    if (this->release_ != 0)
    {
      // We set the state back to default and relinquish
      // ownership.
      result = ACE_reinterpret_cast(ImplementationRepository::ServerInformation*,this->buffer_);
      this->maximum_ = 0;
      this->length_ = 0;
      this->buffer_ = 0;
      this->release_ = 0;
    }
  }
  return result;
}

ACE_INLINE const ImplementationRepository::ServerInformation *
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::get_buffer (void) const
{
  return ACE_reinterpret_cast(const ImplementationRepository::ServerInformation * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE void
ImplementationRepository::_TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::replace (CORBA::ULong max,
CORBA::ULong length,
ImplementationRepository::ServerInformation *data,
CORBA::Boolean release)
{
  this->maximum_ = max;
  this->length_ = length;
  if (this->buffer_ && this->release_ == 1)
  {
    ImplementationRepository::ServerInformation *tmp = ACE_reinterpret_cast(ImplementationRepository::ServerInformation*,this->buffer_);
    _TAO_Unbounded_Sequence_ImplementationRepository_ServerInformationList::freebuf (tmp);
  }
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CI_)
#define _IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST_CI_

// *************************************************************
// Inline operations for class ImplementationRepository::ServerInformationList_var
// *************************************************************

ACE_INLINE
ImplementationRepository::ServerInformationList_var::ServerInformationList_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
ImplementationRepository::ServerInformationList_var::ServerInformationList_var (ServerInformationList *p)
  : ptr_ (p)
{}

ACE_INLINE
ImplementationRepository::ServerInformationList_var::ServerInformationList_var (const ::ImplementationRepository::ServerInformationList_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::ImplementationRepository::ServerInformationList (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_var::~ServerInformationList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE ImplementationRepository::ServerInformationList_var &
ImplementationRepository::ServerInformationList_var::operator= (ServerInformationList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList_var &
ImplementationRepository::ServerInformationList_var::operator= (const ::ImplementationRepository::ServerInformationList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ServerInformationList *deep_copy =
            new ServerInformationList (*p.ptr_);

          if (deep_copy != 0)
            {
              ServerInformationList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::ImplementationRepository::ServerInformationList *
ImplementationRepository::ServerInformationList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList *
ImplementationRepository::ServerInformationList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_var::operator const ::ImplementationRepository::ServerInformationList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_var::operator ::ImplementationRepository::ServerInformationList &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_var::operator ::ImplementationRepository::ServerInformationList &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
ImplementationRepository::ServerInformationList_var::operator ::ImplementationRepository::ServerInformationList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ImplementationRepository::ServerInformation &
ImplementationRepository::ServerInformationList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ImplementationRepository::ServerInformation &
ImplementationRepository::ServerInformationList_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const ImplementationRepository::ServerInformation &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::ImplementationRepository::ServerInformationList &
ImplementationRepository::ServerInformationList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList &
ImplementationRepository::ServerInformationList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::ImplementationRepository::ServerInformationList *&
ImplementationRepository::ServerInformationList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList *
ImplementationRepository::ServerInformationList_var::_retn (void)
{
  ::ImplementationRepository::ServerInformationList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList *
ImplementationRepository::ServerInformationList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class ImplementationRepository::ServerInformationList_out
// *************************************************************

ACE_INLINE
ImplementationRepository::ServerInformationList_out::ServerInformationList_out (ServerInformationList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_out::ServerInformationList_out (ServerInformationList_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_out::ServerInformationList_out (const ::ImplementationRepository::ServerInformationList_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ServerInformationList_out&, p).ptr_)
{}

ACE_INLINE ::ImplementationRepository::ServerInformationList_out &
ImplementationRepository::ServerInformationList_out::operator= (const ::ImplementationRepository::ServerInformationList_out &p)
{
  this->ptr_ = ACE_const_cast (ServerInformationList_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList_out &
ImplementationRepository::ServerInformationList_out::operator= (ServerInformationList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
ImplementationRepository::ServerInformationList_out::operator ::ImplementationRepository::ServerInformationList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList *&
ImplementationRepository::ServerInformationList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::ImplementationRepository::ServerInformationList *
ImplementationRepository::ServerInformationList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE ImplementationRepository::ServerInformation &
ImplementationRepository::ServerInformationList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception ImplementationRepository::Administration::AlreadyRegistered
// *************************************************************

// *************************************************************
// Inline operations for exception ImplementationRepository::Administration::CannotActivate
// *************************************************************

// *************************************************************
// Inline operations for exception ImplementationRepository::Administration::NotFound
// *************************************************************


#if !defined (_IMPLEMENTATIONREPOSITORY_ADMINISTRATION___CI_)
#define _IMPLEMENTATIONREPOSITORY_ADMINISTRATION___CI_

ACE_INLINE ImplementationRepository::Administration_ptr
tao_ImplementationRepository_Administration_duplicate (
    ImplementationRepository::Administration_ptr p
  )
{
  return ImplementationRepository::Administration::_duplicate (p);
}

ACE_INLINE void
tao_ImplementationRepository_Administration_release (
    ImplementationRepository::Administration_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE ImplementationRepository::Administration_ptr
tao_ImplementationRepository_Administration_nil (
    void
  )
{
  return ImplementationRepository::Administration::_nil ();
}

ACE_INLINE ImplementationRepository::Administration_ptr
tao_ImplementationRepository_Administration_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ImplementationRepository::Administration::_narrow (p TAO_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_ImplementationRepository_Administration_upcast (
    void *src
  )
{
  ImplementationRepository::Administration **tmp =
    ACE_static_cast (ImplementationRepository::Administration **, src);
  return *tmp;
}

ACE_INLINE
ImplementationRepository::Administration::Administration (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->ImplementationRepository_Administration_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined (_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONITERATOR___CI_)
#define _IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONITERATOR___CI_

ACE_INLINE ImplementationRepository::ServerInformationIterator_ptr
tao_ImplementationRepository_ServerInformationIterator_duplicate (
    ImplementationRepository::ServerInformationIterator_ptr p
  )
{
  return ImplementationRepository::ServerInformationIterator::_duplicate (p);
}

ACE_INLINE void
tao_ImplementationRepository_ServerInformationIterator_release (
    ImplementationRepository::ServerInformationIterator_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE ImplementationRepository::ServerInformationIterator_ptr
tao_ImplementationRepository_ServerInformationIterator_nil (
    void
  )
{
  return ImplementationRepository::ServerInformationIterator::_nil ();
}

ACE_INLINE ImplementationRepository::ServerInformationIterator_ptr
tao_ImplementationRepository_ServerInformationIterator_narrow (
    CORBA::Object *p
    TAO_ENV_ARG_DECL
  )
{
  return ImplementationRepository::ServerInformationIterator::_narrow (p TAO_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_ImplementationRepository_ServerInformationIterator_upcast (
    void *src
  )
{
  ImplementationRepository::ServerInformationIterator **tmp =
    ACE_static_cast (ImplementationRepository::ServerInformationIterator **, src);
  return *tmp;
}

ACE_INLINE
ImplementationRepository::ServerInformationIterator::ServerInformationIterator (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->ImplementationRepository_ServerInformationIterator_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const ImplementationRepository::ServerObject_ptr
  );

CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    ImplementationRepository::ServerObject_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::EnvironmentVariable &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value.in ())
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::EnvironmentVariable &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value.out ())
  )
    return 1;
  else
    return 0;

}


#if !defined _TAO_CDR_OP_ImplementationRepository_EnvironmentList_I_
#define _TAO_CDR_OP_ImplementationRepository_EnvironmentList_I_

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const ImplementationRepository::EnvironmentList &
  );
CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    ImplementationRepository::EnvironmentList &
  );

#endif /* _TAO_CDR_OP_ImplementationRepository_EnvironmentList_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::ActivationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::ActivationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (ImplementationRepository::ActivationMode, _tao_temp);
    }

  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::StartupOptions &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.command_line.in ()) &&
    (strm << _tao_aggregate.environment) &&
    (strm << _tao_aggregate.working_directory.in ()) &&
    (strm << _tao_aggregate.activation)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::StartupOptions &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.command_line.out ()) &&
    (strm >> _tao_aggregate.environment) &&
    (strm >> _tao_aggregate.working_directory.out ()) &&
    (strm >> _tao_aggregate.activation)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::ServerInformation &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.logical_server.in ()) &&
    (strm << _tao_aggregate.server.in ()) &&
    (strm << _tao_aggregate.startup) &&
    (strm << _tao_aggregate.location.in ())
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::ServerInformation &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.logical_server.out ()) &&
    (strm >> _tao_aggregate.server.out ()) &&
    (strm >> _tao_aggregate.startup) &&
    (strm >> _tao_aggregate.location.out ())
  )
    return 1;
  else
    return 0;

}


#if !defined _TAO_CDR_OP_ImplementationRepository_ServerInformationList_I_
#define _TAO_CDR_OP_ImplementationRepository_ServerInformationList_I_

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const ImplementationRepository::ServerInformationList &
  );
CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    ImplementationRepository::ServerInformationList &
  );

#endif /* _TAO_CDR_OP_ImplementationRepository_ServerInformationList_I_ */

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const ImplementationRepository::ServerInformationIterator_ptr
  );

CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    ImplementationRepository::ServerInformationIterator_ptr &
  );

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const ImplementationRepository::Administration_ptr
  );

CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    ImplementationRepository::Administration_ptr &
  );

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::Administration::AlreadyRegistered &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,ImplementationRepository::Administration::AlreadyRegistered&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::Administration::CannotActivate &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.reason.in ())
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,ImplementationRepository::Administration::CannotActivate &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.reason.out ())
  )
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ImplementationRepository::Administration::NotFound &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,ImplementationRepository::Administration::NotFound&)
{
  return 1;
}

