--- orig/Default_ORTC.h	2003-04-25 17:36:27.000000000 -0500
+++ Default_ORTC.h	2003-04-25 17:40:52.000000000 -0500
@@ -30,17 +30,16 @@
 
 #ifndef _TAO_IDL_ORIG_DEFAULT_ORTC_H_
 #define _TAO_IDL_ORIG_DEFAULT_ORTC_H_
-
 #include "ace/pre.h"
+#include "portableserver_export.h"
 
-#include "tao/corba.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-
-#include "portableserver_export.h"
+#include "tao/corbafwd.h"
+#include "tao/ObjectReferenceTemplateC.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -70,32 +69,32 @@
 
 TAO_NAMESPACE  TAO_Default_ORT
 {
-  
+
   // TAO_IDL - Generated from
   // be/be_valuetype.cpp:282
-  
-  
+
+
 
 #if !defined (_TAO_DEFAULT_ORT_OBJECTREFERENCETEMPLATE__ODDS_N_ENDS_CH_)
 #define _TAO_DEFAULT_ORT_OBJECTREFERENCETEMPLATE__ODDS_N_ENDS_CH_
-  
+
   class ObjectReferenceTemplate;
   struct tao_ObjectReferenceTemplate_life;
-  
+
   typedef
     TAO_Value_Var_T<
         ObjectReferenceTemplate,
         tao_ObjectReferenceTemplate_life
       >
     ObjectReferenceTemplate_var;
-  
+
   typedef
     TAO_Value_Out_T<
         ObjectReferenceTemplate,
         tao_ObjectReferenceTemplate_life
       >
     ObjectReferenceTemplate_out;
-  
+
   struct TAO_PortableServer_Export tao_ObjectReferenceTemplate_life
   {
     static void tao_add_ref (ObjectReferenceTemplate *);
@@ -103,13 +102,13 @@
   };
 
 #endif /* end #if !defined */
-  
+
   // TAO_IDL - Generated from
   // be/be_visitor_valuetype/valuetype_ch.cpp:56
 
 #if !defined (_TAO_DEFAULT_ORT_OBJECTREFERENCETEMPLATE_CH_)
 #define _TAO_DEFAULT_ORT_OBJECTREFERENCETEMPLATE_CH_
-  
+
   class TAO_PortableServer_Export ObjectReferenceTemplate
     : public virtual PortableInterceptor::ObjectReferenceTemplate
   {
@@ -125,37 +124,37 @@
       );
     virtual const char* _tao_obv_repository_id (void) const;
     static const char* _tao_obv_static_repository_id (void);
-    
+
     static void _tao_any_destructor (void *);
-    
+
     // TAO_IDL - Generated from
     // be/be_visitor_valuetype/valuetype_ch.cpp:272
-  
+
   protected:
     ObjectReferenceTemplate (void);
     virtual ~ObjectReferenceTemplate (void);
-    
+
     virtual void *_tao_obv_narrow (ptr_arith_t);
 #if defined (_MSC_VER)
     virtual void *TAO_Default_ORT_ObjectReferenceTemplate_tao_obv_narrow (ptr_arith_t);
 #endif /* _MSC_VER */
     virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
     virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
-    
+
   private:
     ObjectReferenceTemplate (const ObjectReferenceTemplate &);
     void operator= (const ObjectReferenceTemplate &);
-    
+
   protected:
     virtual CORBA::Boolean _tao_marshal__TAO_Default_ORT_ObjectReferenceTemplate (TAO_OutputCDR &) = 0;
     virtual CORBA::Boolean _tao_unmarshal__TAO_Default_ORT_ObjectReferenceTemplate (TAO_InputCDR &) = 0;
   };
 
 #endif /* end #if !defined */
-  
+
   // TAO_IDL - Generated from
   // be/be_visitor_typecode/typecode_decl.cpp:44
-  
+
   TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ObjectReferenceTemplate;
 
 // TAO_IDL - Generated from
@@ -169,31 +168,31 @@
 
 TAO_NAMESPACE  OBV_TAO_Default_ORT
 {
-  
+
   // TAO_IDL - Generated from
   // be/be_visitor_valuetype/valuetype_obv_ch.cpp:58
 
 #if !defined (_TAO_DEFAULT_ORT_OBJECTREFERENCETEMPLATE___OBV_CH_)
 #define _TAO_DEFAULT_ORT_OBJECTREFERENCETEMPLATE___OBV_CH_
-  
+
   // OBV_ class
   class TAO_PortableServer_Export ObjectReferenceTemplate
     : public virtual TAO_Default_ORT::ObjectReferenceTemplate
   {
   public:
     virtual ~ObjectReferenceTemplate (void);
-    
+
   protected:
     virtual CORBA::Boolean _tao_marshal__TAO_Default_ORT_ObjectReferenceTemplate (TAO_OutputCDR &);
     virtual CORBA::Boolean _tao_unmarshal__TAO_Default_ORT_ObjectReferenceTemplate (TAO_InputCDR &);
     CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &);
     CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &);
-  
+
   private:
   };
 
 #endif /* end #if !defined */
-  
+
   // TAO_IDL - Generated from
   // be/be_visitor_valuetype/obv_module.cpp:85
 
@@ -249,4 +248,3 @@
 
 #include "ace/post.h"
 #endif /* ifndef */
-
--- orig/Default_ORTC.cpp	2003-04-25 17:36:27.000000000 -0500
+++ Default_ORTC.cpp	2003-04-25 17:41:28.000000000 -0500
@@ -30,15 +30,9 @@
 
 
 #include "Default_ORTC.h"
-#include "tao/Stub.h"
-#include "tao/Invocation.h"
-#include "tao/PortableInterceptor.h"
-
-#if TAO_HAS_INTERCEPTORS == 1
-#include "tao/RequestInfo_Util.h"
-#include "tao/ClientRequestInfo_i.h"
-#include "tao/ClientInterceptorAdapter.h"
-#endif  /* TAO_HAS_INTERCEPTORS == 1 */
+#include "tao/Any.h"
+#include "tao/ValueFactory.h"
+
 
 
 #if defined (__BORLANDC__)
@@ -56,24 +50,24 @@
 {
     TAO_ENCAP_BYTE_ORDER, // byte order
   48,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x54414f5f), 
-  ACE_NTOHL (0x44656661), 
-  ACE_NTOHL (0x756c745f), 
-  ACE_NTOHL (0x4f52542f), 
-  ACE_NTOHL (0x4f626a65), 
-  ACE_NTOHL (0x63745265), 
-  ACE_NTOHL (0x66657265), 
-  ACE_NTOHL (0x6e636554), 
-  ACE_NTOHL (0x656d706c), 
-  ACE_NTOHL (0x6174653a), 
+  ACE_NTOHL (0x49444c3a),
+  ACE_NTOHL (0x54414f5f),
+  ACE_NTOHL (0x44656661),
+  ACE_NTOHL (0x756c745f),
+  ACE_NTOHL (0x4f52542f),
+  ACE_NTOHL (0x4f626a65),
+  ACE_NTOHL (0x63745265),
+  ACE_NTOHL (0x66657265),
+  ACE_NTOHL (0x6e636554),
+  ACE_NTOHL (0x656d706c),
+  ACE_NTOHL (0x6174653a),
   ACE_NTOHL (0x312e3000),  // repository ID = IDL:TAO_Default_ORT/ObjectReferenceTemplate:1.0
     24,
-  ACE_NTOHL (0x4f626a65), 
-  ACE_NTOHL (0x63745265), 
-  ACE_NTOHL (0x66657265), 
-  ACE_NTOHL (0x6e636554), 
-  ACE_NTOHL (0x656d706c), 
+  ACE_NTOHL (0x4f626a65),
+  ACE_NTOHL (0x63745265),
+  ACE_NTOHL (0x66657265),
+  ACE_NTOHL (0x6e636554),
+  ACE_NTOHL (0x656d706c),
   ACE_NTOHL (0x61746500),  // name = ObjectReferenceTemplate
     0, // value modifier
   CORBA::tk_null, // no stateful base valuetype
@@ -148,7 +142,7 @@
     {
       return 0;
     }
-  
+
   return (ObjectReferenceTemplate *) v->_tao_obv_narrow ((ptr_arith_t) &_downcast);
 }
 
@@ -169,9 +163,9 @@
     {
       return this;
     }
-  
+
   void *rval = 0;
-  
+
   if (rval == 0)
     {
 #if defined (_MSC_VER)
@@ -180,7 +174,7 @@
       rval = this->PortableInterceptor::ObjectReferenceTemplate::_tao_obv_narrow (type_id);
 #endif /* _MSC_VER */
     }
-  
+
   return rval;
 }
 
@@ -227,29 +221,29 @@
         base,
         ObjectReferenceTemplate::_tao_obv_static_repository_id ()
       );
-  
+
   if (retval == 0)
     {
       return 0;
     }
-  
+
   if (factory.in () != 0)
     {
       base = factory->create_for_unmarshal ();
-      
+
       if (base == 0)
         {
           return 0;  // %! except.?
         }
-      
+
       retval = base->_tao_unmarshal_v (strm);
-      
+
       if (retval == 0)
         {
           return 0;
         }
     }
-  
+
   // Now base must be null or point to the unmarshaled object.
   // Align the pointer to the right subobject.
   new_object = ObjectReferenceTemplate::_downcast (base);
@@ -407,4 +401,3 @@
       return 0;
     }
 }
-
