// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:171

#ifndef _TAO_IDL_ORIG_PORTABLESERVERC_H_
#define _TAO_IDL_ORIG_PORTABLESERVERC_H_

#include /**/ "ace/pre.h"

#include "portableserver_export.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "portableserver_export.h"
#include "tao/Environment.h"
#include "tao/Object.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"

#include "tao/OctetSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/PolicyC.h"
#include "tao/CurrentC.h"
#include "tao/OctetSeqC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_PortableServer_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_PortableServer_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

class TAO_ServantBase;
class TAO_ServantBase_var;
class TAO_RefCountServantBase;
class TAO_Local_ServantBase;
class TAO_DynamicImplementation;
class TAO_POA;

// TAO_IDL - Generated from
// be\be_visitor_root/root_ch.cpp:63

namespace TAO
{
  class Collocation_Proxy_Broker;

  template<typename T> class Narrow_Utils;
  template<typename T> class AbstractBase_Narrow_Utils;
}

// TAO_IDL - Generated from
// be\be_visitor_module/module_ch.cpp:48

namespace PortableServer
{
  typedef TAO_ServantBase ServantBase;
  typedef TAO_ServantBase_var ServantBase_var;
  typedef TAO_RefCountServantBase RefCountServantBase;
  typedef ServantBase *Servant;

  typedef TAO_Local_ServantBase LocalServantBase;
  typedef TAO_DynamicImplementation DynamicImplementation;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_POA__VAR_OUT_CH_)
#define _PORTABLESERVER_POA__VAR_OUT_CH_

  class POA;
  typedef POA *POA_ptr;

  typedef
    TAO_Objref_Var_T<
        POA
      >
    POA_var;

  typedef
    TAO_Objref_Out_T<
        POA
      >
    POA_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_sequence/sequence_ch.cpp:101

#if !defined (_PORTABLESERVER_POALIST_CH_)
#define _PORTABLESERVER_POALIST_CH_

  class POAList;

  typedef
    TAO_MngSeq_Var_T<
        POAList,
        TAO_Object_Manager<
            POA,
            POA_var
          >
      >
    POAList_var;

  typedef
    TAO_MngSeq_Out_T<
        POAList,
        POAList_var,
        TAO_Object_Manager<
            POA,
            POA_var
          >
      >
    POAList_out;

  class TAO_PortableServer_Export POAList
    : public
        TAO_Unbounded_Object_Sequence<
            POA,
            POA_var
          >
  {
  public:
    POAList (void);
    POAList (CORBA::ULong max);
    POAList (
        CORBA::ULong max,
        CORBA::ULong length,
        POA_ptr* buffer,
        CORBA::Boolean release = 0
      );
    POAList (const POAList &);
    ~POAList (void);

    static void _tao_any_destructor (void *);

    typedef POAList_var _var_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_POAList;

  // TAO_IDL - Generated from
  // be\be_visitor_typedef/typedef_ch.cpp:435

  typedef CORBA::OctetSeq ObjectId;
  typedef CORBA::OctetSeq_var ObjectId_var;
  typedef CORBA::OctetSeq_out ObjectId_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ObjectId;

#if (TAO_HAS_MINIMUM_CORBA == 0)

  // TAO_IDL - Generated from
  // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_FORWARDREQUEST_CH_)
#define _PORTABLESERVER_FORWARDREQUEST_CH_

  class TAO_PortableServer_Export ForwardRequest : public CORBA::UserException
  {
  public:

    CORBA::Object_var forward_reference;
    ForwardRequest (void);
    ForwardRequest (const ForwardRequest &);
    ~ForwardRequest (void);

    ForwardRequest &operator= (const ForwardRequest &);

    static void _tao_any_destructor (void *);

    static ForwardRequest *_downcast (CORBA::Exception *);
    static CORBA::Exception *_alloc (void);

    virtual CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (
        TAO_OutputCDR &
        ACE_ENV_ARG_DECL
      ) const;

    virtual void _tao_decode (
        TAO_InputCDR &
        ACE_ENV_ARG_DECL
      );

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ctor.cpp:66

    ForwardRequest (
        const CORBA::Object_ptr  _tao_forward_reference
      );

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:125

    virtual CORBA::TypeCode_ptr _type (void) const;
  };

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ForwardRequest;

#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

  // TAO_IDL - Generated from
  // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_NOTAGROUPOBJECT_CH_)
#define _PORTABLESERVER_NOTAGROUPOBJECT_CH_

  class TAO_PortableServer_Export NotAGroupObject : public CORBA::UserException
  {
  public:

    NotAGroupObject (void);
    NotAGroupObject (const NotAGroupObject &);
    ~NotAGroupObject (void);

    NotAGroupObject &operator= (const NotAGroupObject &);

    static void _tao_any_destructor (void *);

    static NotAGroupObject *_downcast (CORBA::Exception *);
    static CORBA::Exception *_alloc (void);

    virtual CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (
        TAO_OutputCDR &
        ACE_ENV_ARG_DECL
      ) const;

    virtual void _tao_decode (
        TAO_InputCDR &
        ACE_ENV_ARG_DECL
      );

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:125

    virtual CORBA::TypeCode_ptr _type (void) const;
  };

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_NotAGroupObject;

#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

  // TAO_IDL - Generated from
  // be\be_visitor_sequence/sequence_ch.cpp:101

#if !defined (_PORTABLESERVER_IDS_CH_)
#define _PORTABLESERVER_IDS_CH_

  class IDs;

  typedef
    TAO_VarSeq_Var_T<
        IDs,
        ObjectId
      >
    IDs_var;

  typedef
    TAO_Seq_Out_T<
        IDs,
        IDs_var,
        ObjectId
      >
    IDs_out;

  class TAO_PortableServer_Export IDs
    : public
        TAO_Unbounded_Sequence<
            ObjectId
          >
  {
  public:
    IDs (void);
    IDs (CORBA::ULong max);
    IDs (
        CORBA::ULong max,
        CORBA::ULong length,
        ObjectId* buffer,
        CORBA::Boolean release = 0
      );
    IDs (const IDs &);
    ~IDs (void);

    static void _tao_any_destructor (void *);

    typedef IDs_var _var_type;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IDs;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType THREAD_POLICY_ID = 16U;

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType LIFESPAN_POLICY_ID = 17U;

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType ID_UNIQUENESS_POLICY_ID = 18U;

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType ID_ASSIGNMENT_POLICY_ID = 19U;

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType IMPLICIT_ACTIVATION_POLICY_ID = 20U;

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType SERVANT_RETENTION_POLICY_ID = 21U;

  // TAO_IDL - Generated from
  // be\be_visitor_constant/constant_ch.cpp:52

  const CORBA::PolicyType REQUEST_PROCESSING_POLICY_ID = 22U;

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum ThreadPolicyValue
  {
    ORB_CTRL_MODEL,
    SINGLE_THREAD_MODEL
  };

#if (TAO_HAS_MINIMUM_POA == 0)

  typedef ThreadPolicyValue &ThreadPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ThreadPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_THREADPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_THREADPOLICY__VAR_OUT_CH_

  class ThreadPolicy;
  typedef ThreadPolicy *ThreadPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        ThreadPolicy
      >
    ThreadPolicy_var;

  typedef
    TAO_Objref_Out_T<
        ThreadPolicy
      >
    ThreadPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_THREADPOLICY_CH_)
#define _PORTABLESERVER_THREADPOLICY_CH_

  class TAO_PortableServer_Export ThreadPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef ThreadPolicy_ptr _ptr_type;
    typedef ThreadPolicy_var _var_type;

    // The static operations.
    static ThreadPolicy_ptr _duplicate (ThreadPolicy_ptr obj);

    static ThreadPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ThreadPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ThreadPolicy_ptr _nil (void)
    {
      return (ThreadPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ThreadPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    ThreadPolicy (void);

    virtual ~ThreadPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ThreadPolicy (const ThreadPolicy &);

    void operator= (const ThreadPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ThreadPolicy;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum LifespanPolicyValue
  {
    TRANSIENT,
    PERSISTENT
  };

  typedef LifespanPolicyValue &LifespanPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_LifespanPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_LIFESPANPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_LIFESPANPOLICY__VAR_OUT_CH_

  class LifespanPolicy;
  typedef LifespanPolicy *LifespanPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        LifespanPolicy
      >
    LifespanPolicy_var;

  typedef
    TAO_Objref_Out_T<
        LifespanPolicy
      >
    LifespanPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_LIFESPANPOLICY_CH_)
#define _PORTABLESERVER_LIFESPANPOLICY_CH_

  class TAO_PortableServer_Export LifespanPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef LifespanPolicy_ptr _ptr_type;
    typedef LifespanPolicy_var _var_type;

    // The static operations.
    static LifespanPolicy_ptr _duplicate (LifespanPolicy_ptr obj);

    static LifespanPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static LifespanPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static LifespanPolicy_ptr _nil (void)
    {
      return (LifespanPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::LifespanPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    LifespanPolicy (void);

    virtual ~LifespanPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    LifespanPolicy (const LifespanPolicy &);

    void operator= (const LifespanPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_LifespanPolicy;

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum IdUniquenessPolicyValue
  {
    UNIQUE_ID,
    MULTIPLE_ID
  };

  typedef IdUniquenessPolicyValue &IdUniquenessPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IdUniquenessPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_IDUNIQUENESSPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_IDUNIQUENESSPOLICY__VAR_OUT_CH_

  class IdUniquenessPolicy;
  typedef IdUniquenessPolicy *IdUniquenessPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        IdUniquenessPolicy
      >
    IdUniquenessPolicy_var;

  typedef
    TAO_Objref_Out_T<
        IdUniquenessPolicy
      >
    IdUniquenessPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_IDUNIQUENESSPOLICY_CH_)
#define _PORTABLESERVER_IDUNIQUENESSPOLICY_CH_

  class TAO_PortableServer_Export IdUniquenessPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef IdUniquenessPolicy_ptr _ptr_type;
    typedef IdUniquenessPolicy_var _var_type;

    // The static operations.
    static IdUniquenessPolicy_ptr _duplicate (IdUniquenessPolicy_ptr obj);

    static IdUniquenessPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static IdUniquenessPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static IdUniquenessPolicy_ptr _nil (void)
    {
      return (IdUniquenessPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::IdUniquenessPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    IdUniquenessPolicy (void);

    virtual ~IdUniquenessPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    IdUniquenessPolicy (const IdUniquenessPolicy &);

    void operator= (const IdUniquenessPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IdUniquenessPolicy;

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum IdAssignmentPolicyValue
  {
    USER_ID,
    SYSTEM_ID
  };

  typedef IdAssignmentPolicyValue &IdAssignmentPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IdAssignmentPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_IDASSIGNMENTPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_IDASSIGNMENTPOLICY__VAR_OUT_CH_

  class IdAssignmentPolicy;
  typedef IdAssignmentPolicy *IdAssignmentPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        IdAssignmentPolicy
      >
    IdAssignmentPolicy_var;

  typedef
    TAO_Objref_Out_T<
        IdAssignmentPolicy
      >
    IdAssignmentPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_IDASSIGNMENTPOLICY_CH_)
#define _PORTABLESERVER_IDASSIGNMENTPOLICY_CH_

  class TAO_PortableServer_Export IdAssignmentPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef IdAssignmentPolicy_ptr _ptr_type;
    typedef IdAssignmentPolicy_var _var_type;

    // The static operations.
    static IdAssignmentPolicy_ptr _duplicate (IdAssignmentPolicy_ptr obj);

    static IdAssignmentPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static IdAssignmentPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static IdAssignmentPolicy_ptr _nil (void)
    {
      return (IdAssignmentPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::IdAssignmentPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    IdAssignmentPolicy (void);

    virtual ~IdAssignmentPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    IdAssignmentPolicy (const IdAssignmentPolicy &);

    void operator= (const IdAssignmentPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_IdAssignmentPolicy;

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum ImplicitActivationPolicyValue
  {
    IMPLICIT_ACTIVATION,
    NO_IMPLICIT_ACTIVATION
  };

#if (TAO_HAS_MINIMUM_POA == 0)

  typedef ImplicitActivationPolicyValue &ImplicitActivationPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ImplicitActivationPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_IMPLICITACTIVATIONPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_IMPLICITACTIVATIONPOLICY__VAR_OUT_CH_

  class ImplicitActivationPolicy;
  typedef ImplicitActivationPolicy *ImplicitActivationPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        ImplicitActivationPolicy
      >
    ImplicitActivationPolicy_var;

  typedef
    TAO_Objref_Out_T<
        ImplicitActivationPolicy
      >
    ImplicitActivationPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_IMPLICITACTIVATIONPOLICY_CH_)
#define _PORTABLESERVER_IMPLICITACTIVATIONPOLICY_CH_

  class TAO_PortableServer_Export ImplicitActivationPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef ImplicitActivationPolicy_ptr _ptr_type;
    typedef ImplicitActivationPolicy_var _var_type;

    // The static operations.
    static ImplicitActivationPolicy_ptr _duplicate (ImplicitActivationPolicy_ptr obj);

    static ImplicitActivationPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ImplicitActivationPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ImplicitActivationPolicy_ptr _nil (void)
    {
      return (ImplicitActivationPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ImplicitActivationPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    ImplicitActivationPolicy (void);

    virtual ~ImplicitActivationPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ImplicitActivationPolicy (const ImplicitActivationPolicy &);

    void operator= (const ImplicitActivationPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ImplicitActivationPolicy;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum ServantRetentionPolicyValue
  {
    RETAIN,
    NON_RETAIN
  };

#if (TAO_HAS_MINIMUM_POA == 0)

  typedef ServantRetentionPolicyValue &ServantRetentionPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ServantRetentionPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_SERVANTRETENTIONPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_SERVANTRETENTIONPOLICY__VAR_OUT_CH_

  class ServantRetentionPolicy;
  typedef ServantRetentionPolicy *ServantRetentionPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        ServantRetentionPolicy
      >
    ServantRetentionPolicy_var;

  typedef
    TAO_Objref_Out_T<
        ServantRetentionPolicy
      >
    ServantRetentionPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_SERVANTRETENTIONPOLICY_CH_)
#define _PORTABLESERVER_SERVANTRETENTIONPOLICY_CH_

  class TAO_PortableServer_Export ServantRetentionPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef ServantRetentionPolicy_ptr _ptr_type;
    typedef ServantRetentionPolicy_var _var_type;

    // The static operations.
    static ServantRetentionPolicy_ptr _duplicate (ServantRetentionPolicy_ptr obj);

    static ServantRetentionPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantRetentionPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantRetentionPolicy_ptr _nil (void)
    {
      return (ServantRetentionPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ServantRetentionPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    ServantRetentionPolicy (void);

    virtual ~ServantRetentionPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ServantRetentionPolicy (const ServantRetentionPolicy &);

    void operator= (const ServantRetentionPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ServantRetentionPolicy;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

  // TAO_IDL - Generated from
  // be\be_visitor_enum/enum_ch.cpp:57

  enum RequestProcessingPolicyValue
  {
    USE_ACTIVE_OBJECT_MAP_ONLY,
    USE_DEFAULT_SERVANT,
    USE_SERVANT_MANAGER
  };

#if (TAO_HAS_MINIMUM_POA == 0)

  typedef RequestProcessingPolicyValue &RequestProcessingPolicyValue_out;

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_RequestProcessingPolicyValue;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_REQUESTPROCESSINGPOLICY__VAR_OUT_CH_)
#define _PORTABLESERVER_REQUESTPROCESSINGPOLICY__VAR_OUT_CH_

  class RequestProcessingPolicy;
  typedef RequestProcessingPolicy *RequestProcessingPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        RequestProcessingPolicy
      >
    RequestProcessingPolicy_var;

  typedef
    TAO_Objref_Out_T<
        RequestProcessingPolicy
      >
    RequestProcessingPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_REQUESTPROCESSINGPOLICY_CH_)
#define _PORTABLESERVER_REQUESTPROCESSINGPOLICY_CH_

  class TAO_PortableServer_Export RequestProcessingPolicy
    : public virtual CORBA::Policy
  {
  public:
    typedef RequestProcessingPolicy_ptr _ptr_type;
    typedef RequestProcessingPolicy_var _var_type;

    // The static operations.
    static RequestProcessingPolicy_ptr _duplicate (RequestProcessingPolicy_ptr obj);

    static RequestProcessingPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static RequestProcessingPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static RequestProcessingPolicy_ptr _nil (void)
    {
      return (RequestProcessingPolicy_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::RequestProcessingPolicyValue value (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::Policy_ptr copy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    RequestProcessingPolicy (void);

    virtual ~RequestProcessingPolicy (void);

  private:
    // Private and unimplemented for concrete interfaces.
    RequestProcessingPolicy (const RequestProcessingPolicy &);

    void operator= (const RequestProcessingPolicy &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_RequestProcessingPolicy;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_POAMANAGER__VAR_OUT_CH_)
#define _PORTABLESERVER_POAMANAGER__VAR_OUT_CH_

  class POAManager;
  typedef POAManager *POAManager_ptr;

  typedef
    TAO_Objref_Var_T<
        POAManager
      >
    POAManager_var;

  typedef
    TAO_Objref_Out_T<
        POAManager
      >
    POAManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_POAMANAGER_CH_)
#define _PORTABLESERVER_POAMANAGER_CH_

  class TAO_PortableServer_Export POAManager
    : public virtual CORBA::Object
  {
  public:
    typedef POAManager_ptr _ptr_type;
    typedef POAManager_var _var_type;

    // The static operations.
    static POAManager_ptr _duplicate (POAManager_ptr obj);

    static POAManager_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static POAManager_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static POAManager_ptr _nil (void)
    {
      return (POAManager_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POAMANAGER_ADAPTERINACTIVE_CH_)
#define _PORTABLESERVER_POAMANAGER_ADAPTERINACTIVE_CH_

    class TAO_PortableServer_Export AdapterInactive : public CORBA::UserException
    {
    public:

      AdapterInactive (void);
      AdapterInactive (const AdapterInactive &);
      ~AdapterInactive (void);

      AdapterInactive &operator= (const AdapterInactive &);

      static void _tao_any_destructor (void *);

      static AdapterInactive *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_AdapterInactive;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_enum/enum_ch.cpp:57

    enum State
    {
      HOLDING,
      ACTIVE,
      DISCARDING,
      INACTIVE
    };

    typedef State &State_out;

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_State;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void activate (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POAManager::AdapterInactive
      )) = 0;

#if (TAO_HAS_MINIMUM_POA == 0)

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void hold_requests (
        CORBA::Boolean wait_for_completion
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POAManager::AdapterInactive
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void discard_requests (
        CORBA::Boolean wait_for_completion
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POAManager::AdapterInactive
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void deactivate (
        CORBA::Boolean etherealize_objects,
        CORBA::Boolean wait_for_completion
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POAManager::AdapterInactive
      )) = 0;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POAManager::State get_state (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    POAManager (void);

    virtual ~POAManager (void);

  private:
    // Private and unimplemented for concrete interfaces.
    POAManager (const POAManager &);

    void operator= (const POAManager &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_POAManager;

#if (TAO_HAS_MINIMUM_POA == 0)

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_ADAPTERACTIVATOR__VAR_OUT_CH_)
#define _PORTABLESERVER_ADAPTERACTIVATOR__VAR_OUT_CH_

  class AdapterActivator;
  typedef AdapterActivator *AdapterActivator_ptr;

  typedef
    TAO_Objref_Var_T<
        AdapterActivator
      >
    AdapterActivator_var;

  typedef
    TAO_Objref_Out_T<
        AdapterActivator
      >
    AdapterActivator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_ADAPTERACTIVATOR_CH_)
#define _PORTABLESERVER_ADAPTERACTIVATOR_CH_

  class TAO_PortableServer_Export AdapterActivator
    : public virtual CORBA::Object
  {
  public:
    typedef AdapterActivator_ptr _ptr_type;
    typedef AdapterActivator_var _var_type;

    // The static operations.
    static AdapterActivator_ptr _duplicate (AdapterActivator_ptr obj);

    static AdapterActivator_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static AdapterActivator_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static AdapterActivator_ptr _nil (void)
    {
      return (AdapterActivator_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Boolean unknown_adapter (
        PortableServer::POA_ptr parent,
        const char * name
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    AdapterActivator (void);

    virtual ~AdapterActivator (void);

  private:
    // Private and unimplemented for concrete interfaces.
    AdapterActivator (const AdapterActivator &);

    void operator= (const AdapterActivator &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AdapterActivator;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_SERVANTMANAGER__VAR_OUT_CH_)
#define _PORTABLESERVER_SERVANTMANAGER__VAR_OUT_CH_

  class ServantManager;
  typedef ServantManager *ServantManager_ptr;

  typedef
    TAO_Objref_Var_T<
        ServantManager
      >
    ServantManager_var;

  typedef
    TAO_Objref_Out_T<
        ServantManager
      >
    ServantManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_SERVANTMANAGER_CH_)
#define _PORTABLESERVER_SERVANTMANAGER_CH_

  class TAO_PortableServer_Export ServantManager
    : public virtual CORBA::Object
  {
  public:
    typedef ServantManager_ptr _ptr_type;
    typedef ServantManager_var _var_type;

    // The static operations.
    static ServantManager_ptr _duplicate (ServantManager_ptr obj);

    static ServantManager_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantManager_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantManager_ptr _nil (void)
    {
      return (ServantManager_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    ServantManager (void);

    virtual ~ServantManager (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ServantManager (const ServantManager &);

    void operator= (const ServantManager &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ServantManager;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_SERVANTACTIVATOR__VAR_OUT_CH_)
#define _PORTABLESERVER_SERVANTACTIVATOR__VAR_OUT_CH_

  class ServantActivator;
  typedef ServantActivator *ServantActivator_ptr;

  typedef
    TAO_Objref_Var_T<
        ServantActivator
      >
    ServantActivator_var;

  typedef
    TAO_Objref_Out_T<
        ServantActivator
      >
    ServantActivator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_SERVANTACTIVATOR_CH_)
#define _PORTABLESERVER_SERVANTACTIVATOR_CH_

  class TAO_PortableServer_Export ServantActivator
    : public virtual PortableServer::ServantManager
  {
  public:
    typedef ServantActivator_ptr _ptr_type;
    typedef ServantActivator_var _var_type;

    // The static operations.
    static ServantActivator_ptr _duplicate (ServantActivator_ptr obj);

    static ServantActivator_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantActivator_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantActivator_ptr _nil (void)
    {
      return (ServantActivator_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::Servant incarnate (
        const PortableServer::ObjectId & oid,
        PortableServer::POA_ptr adapter
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
#if (TAO_HAS_MINIMUM_CORBA == 0)
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::ForwardRequest
      )) = 0;
#else
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void etherealize (
        const PortableServer::ObjectId & oid,
        PortableServer::POA_ptr adapter,
        PortableServer::Servant serv,
        CORBA::Boolean cleanup_in_progress,
        CORBA::Boolean remaining_activations
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    ServantActivator (void);

    virtual ~ServantActivator (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ServantActivator (const ServantActivator &);

    void operator= (const ServantActivator &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ServantActivator;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_SERVANTLOCATOR__VAR_OUT_CH_)
#define _PORTABLESERVER_SERVANTLOCATOR__VAR_OUT_CH_

  class ServantLocator;
  typedef ServantLocator *ServantLocator_ptr;

  typedef
    TAO_Objref_Var_T<
        ServantLocator
      >
    ServantLocator_var;

  typedef
    TAO_Objref_Out_T<
        ServantLocator
      >
    ServantLocator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_SERVANTLOCATOR_CH_)
#define _PORTABLESERVER_SERVANTLOCATOR_CH_

  class TAO_PortableServer_Export ServantLocator
    : public virtual PortableServer::ServantManager
  {
  public:
    typedef void *Cookie;

    typedef ServantLocator_ptr _ptr_type;
    typedef ServantLocator_var _var_type;

    // The static operations.
    static ServantLocator_ptr _duplicate (ServantLocator_ptr obj);

    static ServantLocator_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantLocator_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ServantLocator_ptr _nil (void)
    {
      return (ServantLocator_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::Servant preinvoke (
        const PortableServer::ObjectId & oid,
        PortableServer::POA_ptr adapter,
        const char * operation,
        PortableServer::ServantLocator::Cookie & the_cookie
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
#if (TAO_HAS_MINIMUM_CORBA == 0)
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::ForwardRequest
      )) = 0;
#else
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void postinvoke (
        const PortableServer::ObjectId & oid,
        PortableServer::POA_ptr adapter,
        const char * operation,
        PortableServer::ServantLocator::Cookie the_cookie,
        PortableServer::Servant the_servant
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    ServantLocator (void);

    virtual ~ServantLocator (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ServantLocator (const ServantLocator &);

    void operator= (const ServantLocator &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ServantLocator;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_POA_CH_)
#define _PORTABLESERVER_POA_CH_

  class TAO_PortableServer_Export POA
    : public virtual CORBA::Object
  {
  public:
    typedef POA_ptr _ptr_type;
    typedef POA_var _var_type;

    // The static operations.
    static POA_ptr _duplicate (POA_ptr obj);

    static POA_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // Hand crafted.
    virtual TAO_POA* _tao_poa_downcast (void)
      {
        return 0;
      }

    static POA_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static POA_ptr _nil (void)
    {
      return (POA_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_ADAPTERALREADYEXISTS_CH_)
#define _PORTABLESERVER_POA_ADAPTERALREADYEXISTS_CH_

    class TAO_PortableServer_Export AdapterAlreadyExists : public CORBA::UserException
    {
    public:

      AdapterAlreadyExists (void);
      AdapterAlreadyExists (const AdapterAlreadyExists &);
      ~AdapterAlreadyExists (void);

      AdapterAlreadyExists &operator= (const AdapterAlreadyExists &);

      static void _tao_any_destructor (void *);

      static AdapterAlreadyExists *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_AdapterAlreadyExists;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_ADAPTERNONEXISTENT_CH_)
#define _PORTABLESERVER_POA_ADAPTERNONEXISTENT_CH_

    class TAO_PortableServer_Export AdapterNonExistent : public CORBA::UserException
    {
    public:

      AdapterNonExistent (void);
      AdapterNonExistent (const AdapterNonExistent &);
      ~AdapterNonExistent (void);

      AdapterNonExistent &operator= (const AdapterNonExistent &);

      static void _tao_any_destructor (void *);

      static AdapterNonExistent *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_AdapterNonExistent;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_INVALIDPOLICY_CH_)
#define _PORTABLESERVER_POA_INVALIDPOLICY_CH_

    class TAO_PortableServer_Export InvalidPolicy : public CORBA::UserException
    {
    public:

      CORBA::UShort index;
      InvalidPolicy (void);
      InvalidPolicy (const InvalidPolicy &);
      ~InvalidPolicy (void);

      InvalidPolicy &operator= (const InvalidPolicy &);

      static void _tao_any_destructor (void *);

      static InvalidPolicy *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ctor.cpp:66

      InvalidPolicy (
          CORBA::UShort _tao_index
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_InvalidPolicy;

#endif /* end #if !defined */

#if (TAO_HAS_MINIMUM_POA == 0)

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_NOSERVANT_CH_)
#define _PORTABLESERVER_POA_NOSERVANT_CH_

    class TAO_PortableServer_Export NoServant : public CORBA::UserException
    {
    public:

      NoServant (void);
      NoServant (const NoServant &);
      ~NoServant (void);

      NoServant &operator= (const NoServant &);

      static void _tao_any_destructor (void *);

      static NoServant *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_NoServant;

#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_OBJECTALREADYACTIVE_CH_)
#define _PORTABLESERVER_POA_OBJECTALREADYACTIVE_CH_

    class TAO_PortableServer_Export ObjectAlreadyActive : public CORBA::UserException
    {
    public:

      ObjectAlreadyActive (void);
      ObjectAlreadyActive (const ObjectAlreadyActive &);
      ~ObjectAlreadyActive (void);

      ObjectAlreadyActive &operator= (const ObjectAlreadyActive &);

      static void _tao_any_destructor (void *);

      static ObjectAlreadyActive *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_ObjectAlreadyActive;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_OBJECTNOTACTIVE_CH_)
#define _PORTABLESERVER_POA_OBJECTNOTACTIVE_CH_

    class TAO_PortableServer_Export ObjectNotActive : public CORBA::UserException
    {
    public:

      ObjectNotActive (void);
      ObjectNotActive (const ObjectNotActive &);
      ~ObjectNotActive (void);

      ObjectNotActive &operator= (const ObjectNotActive &);

      static void _tao_any_destructor (void *);

      static ObjectNotActive *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_ObjectNotActive;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_SERVANTALREADYACTIVE_CH_)
#define _PORTABLESERVER_POA_SERVANTALREADYACTIVE_CH_

    class TAO_PortableServer_Export ServantAlreadyActive : public CORBA::UserException
    {
    public:

      ServantAlreadyActive (void);
      ServantAlreadyActive (const ServantAlreadyActive &);
      ~ServantAlreadyActive (void);

      ServantAlreadyActive &operator= (const ServantAlreadyActive &);

      static void _tao_any_destructor (void *);

      static ServantAlreadyActive *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_ServantAlreadyActive;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_SERVANTNOTACTIVE_CH_)
#define _PORTABLESERVER_POA_SERVANTNOTACTIVE_CH_

    class TAO_PortableServer_Export ServantNotActive : public CORBA::UserException
    {
    public:

      ServantNotActive (void);
      ServantNotActive (const ServantNotActive &);
      ~ServantNotActive (void);

      ServantNotActive &operator= (const ServantNotActive &);

      static void _tao_any_destructor (void *);

      static ServantNotActive *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_ServantNotActive;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_WRONGADAPTER_CH_)
#define _PORTABLESERVER_POA_WRONGADAPTER_CH_

    class TAO_PortableServer_Export WrongAdapter : public CORBA::UserException
    {
    public:

      WrongAdapter (void);
      WrongAdapter (const WrongAdapter &);
      ~WrongAdapter (void);

      WrongAdapter &operator= (const WrongAdapter &);

      static void _tao_any_destructor (void *);

      static WrongAdapter *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_WrongAdapter;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_POA_WRONGPOLICY_CH_)
#define _PORTABLESERVER_POA_WRONGPOLICY_CH_

    class TAO_PortableServer_Export WrongPolicy : public CORBA::UserException
    {
    public:

      WrongPolicy (void);
      WrongPolicy (const WrongPolicy &);
      ~WrongPolicy (void);

      WrongPolicy &operator= (const WrongPolicy &);

      static void _tao_any_destructor (void *);

      static WrongPolicy *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_WrongPolicy;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POA_ptr create_POA (
        const char * adapter_name,
        PortableServer::POAManager_ptr a_POAManager,
        const CORBA::PolicyList & policies
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::AdapterAlreadyExists
        , PortableServer::POA::InvalidPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POA_ptr find_POA (
        const char * adapter_name,
        CORBA::Boolean activate_it
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::AdapterNonExistent
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void destroy (
        CORBA::Boolean etherealize_objects,
        CORBA::Boolean wait_for_completion
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#if (TAO_HAS_MINIMUM_POA == 0)

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ThreadPolicy_ptr create_thread_policy (
        PortableServer::ThreadPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::LifespanPolicy_ptr create_lifespan_policy (
        PortableServer::LifespanPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::IdUniquenessPolicy_ptr create_id_uniqueness_policy (
        PortableServer::IdUniquenessPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::IdAssignmentPolicy_ptr create_id_assignment_policy (
        PortableServer::IdAssignmentPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#if (TAO_HAS_MINIMUM_POA == 0)

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ImplicitActivationPolicy_ptr create_implicit_activation_policy (
        PortableServer::ImplicitActivationPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ServantRetentionPolicy_ptr create_servant_retention_policy (
        PortableServer::ServantRetentionPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::RequestProcessingPolicy_ptr create_request_processing_policy (
        PortableServer::RequestProcessingPolicyValue value
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual char * the_name (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POA_ptr the_parent (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POAList * the_children (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POAManager_ptr the_POAManager (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#if (TAO_HAS_MINIMUM_POA == 0)

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::AdapterActivator_ptr the_activator (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void the_activator (
        PortableServer::AdapterActivator_ptr the_activator
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ServantManager_ptr get_servant_manager (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void set_servant_manager (
        PortableServer::ServantManager_ptr imgr
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::Servant get_servant (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::NoServant
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void set_servant (
        PortableServer::Servant p_servant
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::WrongPolicy
      )) = 0;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ObjectId * activate_object (
        PortableServer::Servant p_servant
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ServantAlreadyActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void activate_object_with_id (
        const PortableServer::ObjectId & id,
        PortableServer::Servant p_servant
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ServantAlreadyActive
        , PortableServer::POA::ObjectAlreadyActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void deactivate_object (
        const PortableServer::ObjectId & oid
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ObjectNotActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Object_ptr create_reference (
        const char * intf
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Object_ptr create_reference_with_id (
        const PortableServer::ObjectId & oid,
        const char * intf
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ObjectId * servant_to_id (
        PortableServer::Servant p_servant
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ServantNotActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Object_ptr servant_to_reference (
        PortableServer::Servant p_servant
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ServantNotActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::Servant reference_to_servant (
        CORBA::Object_ptr reference
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ObjectNotActive
        , PortableServer::POA::WrongAdapter
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ObjectId * reference_to_id (
        CORBA::Object_ptr reference
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::WrongAdapter
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::Servant id_to_servant (
        const PortableServer::ObjectId & oid
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ObjectNotActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Object_ptr id_to_reference (
        const PortableServer::ObjectId & oid
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::POA::ObjectNotActive
        , PortableServer::POA::WrongPolicy
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::CORBA::OctetSeq * id (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#if (TAO_HAS_MINIMUM_POA == 0)

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ObjectId * create_id_for_reference (
        CORBA::Object_ptr the_ref
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::NotAGroupObject
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::IDs * reference_to_ids (
        CORBA::Object_ptr the_ref
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::NotAGroupObject
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void associate_reference_with_id (
        CORBA::Object_ptr ref,
        const PortableServer::ObjectId & oid
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::NotAGroupObject
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual void disassociate_reference_with_id (
        CORBA::Object_ptr ref,
        const PortableServer::ObjectId & oid
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::NotAGroupObject
      )) = 0;

#endif /* TAO_HAS_MINIMUM_POA == 0 */

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    POA (void);

    virtual ~POA (void);

  private:
    // Private and unimplemented for concrete interfaces.
    POA (const POA &);

    void operator= (const POA &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_POA;

  // TAO_IDL - Generated from
  // be\be_interface.cpp:611

#if !defined (_PORTABLESERVER_CURRENT__VAR_OUT_CH_)
#define _PORTABLESERVER_CURRENT__VAR_OUT_CH_

  class Current;
  typedef Current *Current_ptr;

  typedef
    TAO_Objref_Var_T<
        Current
      >
    Current_var;

  typedef
    TAO_Objref_Out_T<
        Current
      >
    Current_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_PORTABLESERVER_CURRENT_CH_)
#define _PORTABLESERVER_CURRENT_CH_

  class TAO_PortableServer_Export Current
    : public virtual CORBA::Current
  {
  public:
    typedef Current_ptr _ptr_type;
    typedef Current_var _var_type;

    // The static operations.
    static Current_ptr _duplicate (Current_ptr obj);

    static Current_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static Current_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static Current_ptr _nil (void)
    {
      return (Current_ptr)0;
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_PORTABLESERVER_CURRENT_NOCONTEXT_CH_)
#define _PORTABLESERVER_CURRENT_NOCONTEXT_CH_

    class TAO_PortableServer_Export NoContext : public CORBA::UserException
    {
    public:

      NoContext (void);
      NoContext (const NoContext &);
      ~NoContext (void);

      NoContext &operator= (const NoContext &);

      static void _tao_any_destructor (void *);

      static NoContext *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL
        ) const;

      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL
        );

      // TAO_IDL - Generated from
      // be\be_visitor_exception/exception_ch.cpp:125

      virtual CORBA::TypeCode_ptr _type (void) const;
    };

    // TAO_IDL - Generated from
    // be\be_visitor_typecode/typecode_decl.cpp:44

    static ::CORBA::TypeCode_ptr _tc_NoContext;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::POA_ptr get_POA (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::Current::NoContext
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_operation/operation_ch.cpp:46

    virtual ::PortableServer::ObjectId * get_object_id (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableServer::Current::NoContext
      )) = 0;

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:208

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);

  protected:
    // Abstract or local interface only.
    Current (void);

    virtual ~Current (void);

  private:
    // Private and unimplemented for concrete interfaces.
    Current (const Current &);

    void operator= (const Current &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Current;

  // Hand crafted.
  TAO_NAMESPACE_STORAGE_CLASS char *ObjectId_to_string (const PortableServer::ObjectId &id);
  TAO_NAMESPACE_STORAGE_CLASS CORBA::WChar *ObjectId_to_wstring (const PortableServer::ObjectId &id);
  TAO_NAMESPACE_STORAGE_CLASS PortableServer::ObjectId *string_to_ObjectId (const char *id);
  TAO_NAMESPACE_STORAGE_CLASS PortableServer::ObjectId *wstring_to_ObjectId (const CORBA::WChar *id);

// TAO_IDL - Generated from
// be\be_visitor_module/module_ch.cpp:66

} // module PortableServer

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:59

// Traits specializations.
namespace TAO
{

#if !defined (_PORTABLESERVER_POA__TRAITS_CH_)
#define _PORTABLESERVER_POA__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::POA>
  {
    static PortableServer::POA_ptr tao_duplicate (
        PortableServer::POA_ptr
      );
    static void tao_release (
        PortableServer::POA_ptr
      );
    static PortableServer::POA_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::POA_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if (TAO_HAS_MINIMUM_POA == 0)

#if !defined (_PORTABLESERVER_THREADPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_THREADPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::ThreadPolicy>
  {
    static PortableServer::ThreadPolicy_ptr tao_duplicate (
        PortableServer::ThreadPolicy_ptr
      );
    static void tao_release (
        PortableServer::ThreadPolicy_ptr
      );
    static PortableServer::ThreadPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::ThreadPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if !defined (_PORTABLESERVER_LIFESPANPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_LIFESPANPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::LifespanPolicy>
  {
    static PortableServer::LifespanPolicy_ptr tao_duplicate (
        PortableServer::LifespanPolicy_ptr
      );
    static void tao_release (
        PortableServer::LifespanPolicy_ptr
      );
    static PortableServer::LifespanPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::LifespanPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_IDUNIQUENESSPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_IDUNIQUENESSPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::IdUniquenessPolicy>
  {
    static PortableServer::IdUniquenessPolicy_ptr tao_duplicate (
        PortableServer::IdUniquenessPolicy_ptr
      );
    static void tao_release (
        PortableServer::IdUniquenessPolicy_ptr
      );
    static PortableServer::IdUniquenessPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::IdUniquenessPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_IDASSIGNMENTPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_IDASSIGNMENTPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::IdAssignmentPolicy>
  {
    static PortableServer::IdAssignmentPolicy_ptr tao_duplicate (
        PortableServer::IdAssignmentPolicy_ptr
      );
    static void tao_release (
        PortableServer::IdAssignmentPolicy_ptr
      );
    static PortableServer::IdAssignmentPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::IdAssignmentPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if (TAO_HAS_MINIMUM_POA == 0)

#if !defined (_PORTABLESERVER_IMPLICITACTIVATIONPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_IMPLICITACTIVATIONPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::ImplicitActivationPolicy>
  {
    static PortableServer::ImplicitActivationPolicy_ptr tao_duplicate (
        PortableServer::ImplicitActivationPolicy_ptr
      );
    static void tao_release (
        PortableServer::ImplicitActivationPolicy_ptr
      );
    static PortableServer::ImplicitActivationPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::ImplicitActivationPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_SERVANTRETENTIONPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_SERVANTRETENTIONPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::ServantRetentionPolicy>
  {
    static PortableServer::ServantRetentionPolicy_ptr tao_duplicate (
        PortableServer::ServantRetentionPolicy_ptr
      );
    static void tao_release (
        PortableServer::ServantRetentionPolicy_ptr
      );
    static PortableServer::ServantRetentionPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::ServantRetentionPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_REQUESTPROCESSINGPOLICY__TRAITS_CH_)
#define _PORTABLESERVER_REQUESTPROCESSINGPOLICY__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::RequestProcessingPolicy>
  {
    static PortableServer::RequestProcessingPolicy_ptr tao_duplicate (
        PortableServer::RequestProcessingPolicy_ptr
      );
    static void tao_release (
        PortableServer::RequestProcessingPolicy_ptr
      );
    static PortableServer::RequestProcessingPolicy_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::RequestProcessingPolicy_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if !defined (_PORTABLESERVER_POAMANAGER__TRAITS_CH_)
#define _PORTABLESERVER_POAMANAGER__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::POAManager>
  {
    static PortableServer::POAManager_ptr tao_duplicate (
        PortableServer::POAManager_ptr
      );
    static void tao_release (
        PortableServer::POAManager_ptr
      );
    static PortableServer::POAManager_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::POAManager_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if (TAO_HAS_MINIMUM_POA == 0)

#if !defined (_PORTABLESERVER_ADAPTERACTIVATOR__TRAITS_CH_)
#define _PORTABLESERVER_ADAPTERACTIVATOR__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::AdapterActivator>
  {
    static PortableServer::AdapterActivator_ptr tao_duplicate (
        PortableServer::AdapterActivator_ptr
      );
    static void tao_release (
        PortableServer::AdapterActivator_ptr
      );
    static PortableServer::AdapterActivator_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::AdapterActivator_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_SERVANTMANAGER__TRAITS_CH_)
#define _PORTABLESERVER_SERVANTMANAGER__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::ServantManager>
  {
    static PortableServer::ServantManager_ptr tao_duplicate (
        PortableServer::ServantManager_ptr
      );
    static void tao_release (
        PortableServer::ServantManager_ptr
      );
    static PortableServer::ServantManager_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::ServantManager_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_SERVANTACTIVATOR__TRAITS_CH_)
#define _PORTABLESERVER_SERVANTACTIVATOR__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::ServantActivator>
  {
    static PortableServer::ServantActivator_ptr tao_duplicate (
        PortableServer::ServantActivator_ptr
      );
    static void tao_release (
        PortableServer::ServantActivator_ptr
      );
    static PortableServer::ServantActivator_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::ServantActivator_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PORTABLESERVER_SERVANTLOCATOR__TRAITS_CH_)
#define _PORTABLESERVER_SERVANTLOCATOR__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::ServantLocator>
  {
    static PortableServer::ServantLocator_ptr tao_duplicate (
        PortableServer::ServantLocator_ptr
      );
    static void tao_release (
        PortableServer::ServantLocator_ptr
      );
    static PortableServer::ServantLocator_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::ServantLocator_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if !defined (_PORTABLESERVER_CURRENT__TRAITS_CH_)
#define _PORTABLESERVER_CURRENT__TRAITS_CH_

  ACE_TEMPLATE_SPECIALIZATION
  struct TAO_PortableServer_Export Objref_Traits<PortableServer::Current>
  {
    static PortableServer::Current_ptr tao_duplicate (
        PortableServer::Current_ptr
      );
    static void tao_release (
        PortableServer::Current_ptr
      );
    static PortableServer::Current_ptr tao_nil (void);
    static CORBA::Boolean tao_marshal (
        PortableServer::Current_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}

// TAO_IDL - Generated from
// be\be_visitor_sequence/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POAList &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POAList*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POAList *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POAList *&);

#if (TAO_HAS_MINIMUM_CORBA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::ForwardRequest &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ForwardRequest*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ForwardRequest *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::ForwardRequest *&);

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::NotAGroupObject &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::NotAGroupObject*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::NotAGroupObject *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::NotAGroupObject *&);

// TAO_IDL - Generated from
// be\be_visitor_sequence/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::IDs &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IDs*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::IDs *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::IDs *&);

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ThreadPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ThreadPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ThreadPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ThreadPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ThreadPolicy_ptr &);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::LifespanPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::LifespanPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::LifespanPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::LifespanPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::LifespanPolicy_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IdUniquenessPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::IdUniquenessPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IdUniquenessPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IdUniquenessPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::IdUniquenessPolicy_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IdAssignmentPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::IdAssignmentPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IdAssignmentPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::IdAssignmentPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::IdAssignmentPolicy_ptr &);

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ImplicitActivationPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ImplicitActivationPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ImplicitActivationPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ImplicitActivationPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ImplicitActivationPolicy_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantRetentionPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ServantRetentionPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantRetentionPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantRetentionPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ServantRetentionPolicy_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::RequestProcessingPolicyValue);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::RequestProcessingPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::RequestProcessingPolicy_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::RequestProcessingPolicy_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::RequestProcessingPolicy_ptr &);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POAManager_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POAManager_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POAManager_ptr &);

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POAManager::AdapterInactive &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POAManager::AdapterInactive*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POAManager::AdapterInactive *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POAManager::AdapterInactive *&);

// TAO_IDL - Generated from
// be\be_visitor_enum/any_op_ch.cpp:51

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POAManager::State);
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POAManager::State &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::AdapterActivator_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::AdapterActivator_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::AdapterActivator_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantManager_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantManager_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ServantManager_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantActivator_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantActivator_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ServantActivator_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantLocator_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::ServantLocator_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::ServantLocator_ptr &);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA_ptr &);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::AdapterAlreadyExists &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::AdapterAlreadyExists*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::AdapterAlreadyExists *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::AdapterAlreadyExists *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::AdapterNonExistent &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::AdapterNonExistent*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::AdapterNonExistent *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::AdapterNonExistent *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::InvalidPolicy &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::InvalidPolicy*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::InvalidPolicy *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::InvalidPolicy *&);

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::NoServant &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::NoServant*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::NoServant *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::NoServant *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::ObjectAlreadyActive &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::ObjectAlreadyActive*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::ObjectAlreadyActive *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::ObjectAlreadyActive *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::ObjectNotActive &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::ObjectNotActive*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::ObjectNotActive *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::ObjectNotActive *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::ServantAlreadyActive &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::ServantAlreadyActive*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::ServantAlreadyActive *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::ServantAlreadyActive *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::ServantNotActive &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::ServantNotActive*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::ServantNotActive *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::ServantNotActive *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::WrongAdapter &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::WrongAdapter*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::WrongAdapter *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::WrongAdapter *&);

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::POA::WrongPolicy &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::POA::WrongPolicy*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::POA::WrongPolicy *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::POA::WrongPolicy *&);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::Current_ptr); // copying
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::Current_ptr *); // non-copying
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::Current_ptr &);

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/any_op_ch.cpp:52

TAO_PortableServer_Export void operator<<= (CORBA::Any &, const PortableServer::Current::NoContext &); // copying version
TAO_PortableServer_Export void operator<<= (CORBA::Any &, PortableServer::Current::NoContext*); // noncopying version
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, PortableServer::Current::NoContext *&); // deprecated
TAO_PortableServer_Export CORBA::Boolean operator>>= (const CORBA::Any &, const PortableServer::Current::NoContext *&);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if (TAO_HAS_MINIMUM_CORBA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::ForwardRequest &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::ForwardRequest &);

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_exception/cdr_op_ch.cpp:52

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::NotAGroupObject &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::NotAGroupObject &);

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_PortableServer_IDs_H_
#define _TAO_CDR_OP_PortableServer_IDs_H_

TAO_PortableServer_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const PortableServer::IDs &
  );
TAO_PortableServer_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    PortableServer::IDs &
  );

#endif /* _TAO_CDR_OP_PortableServer_IDs_H_ */

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::ThreadPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::ThreadPolicyValue &);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::LifespanPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::LifespanPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::IdUniquenessPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::IdUniquenessPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::IdAssignmentPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::IdAssignmentPolicyValue &);

#if (TAO_HAS_MINIMUM_POA == 0)

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::ImplicitActivationPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::ImplicitActivationPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::ServantRetentionPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::ServantRetentionPolicyValue &);

// TAO_IDL - Generated from
// be\be_visitor_enum/cdr_op_ch.cpp:50

TAO_PortableServer_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableServer::RequestProcessingPolicyValue &);
TAO_PortableServer_Export CORBA::Boolean operator>> (TAO_InputCDR &, PortableServer::RequestProcessingPolicyValue &);

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// TAO_IDL - Generated from
// be\be_codegen.cpp:978

#if defined (__ACE_INLINE__)
#include "PortableServerC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include /**/ "ace/post.h"

#endif /* ifndef */

