// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_PORTABLESERVER_POALIST_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_PORTABLESERVER_POALIST_CI_

ACE_INLINE PortableServer::POA **
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::allocbuf (CORBA::ULong nelems)
{
  PortableServer::POA **buf = 0;

  ACE_NEW_RETURN (buf, PortableServer::POA*[nelems], 0);

  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = PortableServer::POA::_nil ();
    }

  return buf;
}

ACE_INLINE void
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::freebuf (PortableServer::POA **buffer)
{
  if (buffer == 0)
    return;
  delete[] buffer;
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::_TAO_Unbounded_Object_Sequence_PortableServer_POAList (void)
{
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::_TAO_Unbounded_Object_Sequence_PortableServer_POAList (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_PortableServer_POAList::allocbuf (maximum))
{
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::_TAO_Unbounded_Object_Sequence_PortableServer_POAList (CORBA::ULong maximum,
  CORBA::ULong length,
  PortableServer::POA* *value,
  CORBA::Boolean release)
: TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::_TAO_Unbounded_Object_Sequence_PortableServer_POAList(const _TAO_Unbounded_Object_Sequence_PortableServer_POAList &rhs)
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
  {
    PortableServer::POA **tmp1 = _TAO_Unbounded_Object_Sequence_PortableServer_POAList::allocbuf (this->maximum_);
    PortableServer::POA ** const tmp2 = ACE_reinterpret_cast (PortableServer::POA ** ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp1[i] = PortableServer::POA::_duplicate (tmp2[i]);
      }

    this->buffer_ = tmp1;
  }
  else
  {
    this->buffer_ = 0;
  }
}

ACE_INLINE PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList &
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::operator= (const _TAO_Unbounded_Object_Sequence_PortableServer_POAList &rhs)
{
  if (this == &rhs)
    return *this;

  if (this->release_)
  {
    PortableServer::POA **tmp = ACE_reinterpret_cast (PortableServer::POA **, this->buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = PortableServer::POA::_nil ();
    }
    if (this->maximum_ < rhs.maximum_)
    {
      _TAO_Unbounded_Object_Sequence_PortableServer_POAList::freebuf (tmp);
      this->buffer_ = _TAO_Unbounded_Object_Sequence_PortableServer_POAList::allocbuf (rhs.maximum_);
    }
  }
  else
    this->buffer_ = _TAO_Unbounded_Object_Sequence_PortableServer_POAList::allocbuf (rhs.maximum_);

  TAO_Unbounded_Base_Sequence::operator= (rhs);

  PortableServer::POA **tmp1 = ACE_reinterpret_cast (PortableServer::POA **, this->buffer_);
  PortableServer::POA ** const tmp2 = ACE_reinterpret_cast (PortableServer::POA ** ACE_CAST_CONST, rhs.buffer_);

  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp1[i] = PortableServer::POA::_duplicate (tmp2[i]);
    }

  return *this;
}

ACE_INLINE TAO_Object_Manager<PortableServer::POA,PortableServer::POA_var>
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::operator[] (CORBA::ULong index) const
// read-write accessor
{
  ACE_ASSERT (index < this->maximum_);
  PortableServer::POA ** const tmp = ACE_reinterpret_cast (PortableServer::POA ** ACE_CAST_CONST, this->buffer_);
  return TAO_Object_Manager<PortableServer::POA,PortableServer::POA_var> (tmp + index, this->release_);
}

ACE_INLINE PortableServer::POA* *
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::get_buffer (CORBA::Boolean orphan)
{
  PortableServer::POA **result = 0;
  if (orphan == 0)
  {
    // We retain ownership.
    if (this->buffer_ == 0)
    {
      result = _TAO_Unbounded_Object_Sequence_PortableServer_POAList::allocbuf (this->maximum_);
      this->buffer_ = result;
      this->release_ = 1;
    }
    else
    {
      result = ACE_reinterpret_cast (PortableServer::POA**, this->buffer_);
    }
  }
  else // if (orphan == 1)
  {
    if (this->release_ != 0)
    {
      // We set the state back to default and relinquish
      // ownership.
      result = ACE_reinterpret_cast(PortableServer::POA**,this->buffer_);
      this->maximum_ = 0;
      this->length_ = 0;
      this->buffer_ = 0;
      this->release_ = 0;
    }
  }
  return result;
}

ACE_INLINE const PortableServer::POA* *
PortableServer::_TAO_Unbounded_Object_Sequence_PortableServer_POAList::get_buffer (void) const
{
  return ACE_reinterpret_cast(const PortableServer::POA ** ACE_CAST_CONST, this->buffer_);
}


#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_PORTABLESERVER_POALIST_CI_)
#define _PORTABLESERVER_POALIST_CI_

// *************************************************************
// Inline operations for class PortableServer::POAList_var
// *************************************************************

ACE_INLINE
PortableServer::POAList_var::POAList_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableServer::POAList_var::POAList_var (POAList *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableServer::POAList_var::POAList_var (const ::PortableServer::POAList_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableServer::POAList (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableServer::POAList_var::~POAList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableServer::POAList_var &
PortableServer::POAList_var::operator= (POAList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableServer::POAList_var &
PortableServer::POAList_var::operator= (const ::PortableServer::POAList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          POAList *deep_copy =
            new POAList (*p.ptr_);

          if (deep_copy != 0)
            {
              POAList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::PortableServer::POAList *
PortableServer::POAList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::POAList *
PortableServer::POAList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
PortableServer::POAList_var::operator const ::PortableServer::POAList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableServer::POAList_var::operator ::PortableServer::POAList &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableServer::POAList_var::operator ::PortableServer::POAList &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableServer::POAList_var::operator ::PortableServer::POAList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<PortableServer::POA, PortableServer::POA_var>
PortableServer::POAList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::PortableServer::POAList &
PortableServer::POAList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableServer::POAList &
PortableServer::POAList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::PortableServer::POAList *&
PortableServer::POAList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableServer::POAList *
PortableServer::POAList_var::_retn (void)
{
  ::PortableServer::POAList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableServer::POAList *
PortableServer::POAList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableServer::POAList_out
// *************************************************************

ACE_INLINE
PortableServer::POAList_out::POAList_out (POAList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableServer::POAList_out::POAList_out (POAList_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableServer::POAList_out::POAList_out (const ::PortableServer::POAList_out &p) // copy constructor
  : ptr_ (ACE_const_cast (POAList_out&, p).ptr_)
{}

ACE_INLINE ::PortableServer::POAList_out &
PortableServer::POAList_out::operator= (const ::PortableServer::POAList_out &p)
{
  this->ptr_ = ACE_const_cast (POAList_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableServer::POAList_out &
PortableServer::POAList_out::operator= (POAList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
PortableServer::POAList_out::operator ::PortableServer::POAList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::POAList *&
PortableServer::POAList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::POAList *
PortableServer::POAList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Object_Manager<PortableServer::POA, PortableServer::POA_var>
PortableServer::POAList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_OBJECTID_CI_)
#define _PORTABLESERVER_OBJECTID_CI_

// *************************************************************
// Inline operations for class PortableServer::ObjectId_var
// *************************************************************

ACE_INLINE
PortableServer::ObjectId_var::ObjectId_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableServer::ObjectId_var::ObjectId_var (ObjectId *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableServer::ObjectId_var::ObjectId_var (const ::PortableServer::ObjectId_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableServer::ObjectId (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
PortableServer::ObjectId_var::ObjectId_var (const ::PortableServer::ObjectId &p)
{
  ACE_NEW (this->ptr_, ::PortableServer::ObjectId (p));
}

ACE_INLINE
PortableServer::ObjectId_var::~ObjectId_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableServer::ObjectId_var &
PortableServer::ObjectId_var::operator= (ObjectId *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableServer::ObjectId_var &
PortableServer::ObjectId_var::operator= (const ::PortableServer::ObjectId_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ObjectId *deep_copy =
            new ObjectId (*p.ptr_);

          if (deep_copy != 0)
            {
              ObjectId *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

// fixed-size types only
ACE_INLINE ::PortableServer::ObjectId_var &
PortableServer::ObjectId_var::operator= (const ::PortableServer::ObjectId &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::PortableServer::ObjectId (p), *this);
  }
  return *this;
}

ACE_INLINE const ::PortableServer::ObjectId *
PortableServer::ObjectId_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::ObjectId *
PortableServer::ObjectId_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
PortableServer::ObjectId_var::operator const ::PortableServer::ObjectId &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableServer::ObjectId_var::operator ::PortableServer::ObjectId &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableServer::ObjectId_var::operator ::PortableServer::ObjectId &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Octet &
PortableServer::ObjectId_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::Octet &
PortableServer::ObjectId_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::Octet &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::PortableServer::ObjectId &
PortableServer::ObjectId_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableServer::ObjectId &
PortableServer::ObjectId_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::PortableServer::ObjectId *&
PortableServer::ObjectId_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableServer::ObjectId *
PortableServer::ObjectId_var::_retn (void)
{
  ::PortableServer::ObjectId *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableServer::ObjectId *
PortableServer::ObjectId_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableServer::ObjectId_out
// *************************************************************

ACE_INLINE
PortableServer::ObjectId_out::ObjectId_out (ObjectId *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableServer::ObjectId_out::ObjectId_out (ObjectId_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableServer::ObjectId_out::ObjectId_out (const ::PortableServer::ObjectId_out &p) // copy constructor
  : ptr_ (ACE_const_cast (ObjectId_out&, p).ptr_)
{}

ACE_INLINE ::PortableServer::ObjectId_out &
PortableServer::ObjectId_out::operator= (const ::PortableServer::ObjectId_out &p)
{
  this->ptr_ = ACE_const_cast (ObjectId_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableServer::ObjectId_out &
PortableServer::ObjectId_out::operator= (ObjectId *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
PortableServer::ObjectId_out::operator ::PortableServer::ObjectId *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::ObjectId *&
PortableServer::ObjectId_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::ObjectId *
PortableServer::ObjectId_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Octet &
PortableServer::ObjectId_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception PortableServer::ForwardRequest
// *************************************************************

#if (TAO_HAS_MINIMUM_POA == 0)

// *************************************************************
// Inline operations for exception PortableServer::NotAGroupObject
// *************************************************************


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_PORTABLESERVER_IDS_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_PORTABLESERVER_IDS_CI_

// = Static operations.
ACE_INLINE PortableServer::ObjectId *
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::allocbuf (CORBA::ULong size)
// Allocate storage for the sequence.
{
  PortableServer::ObjectId *retval = 0;
  ACE_NEW_RETURN (retval, PortableServer::ObjectId[size], 0);
  return retval;
}

ACE_INLINE void PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::freebuf (PortableServer::ObjectId *buffer)
// Free the sequence.
{
  delete [] buffer;
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::_TAO_Unbounded_Sequence_PortableServer_IDs (void) // Default constructor.
{
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::_TAO_Unbounded_Sequence_PortableServer_IDs (CORBA::ULong maximum) // Constructor using a maximum length value.
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_PortableServer_IDs::allocbuf (maximum))
{
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::_TAO_Unbounded_Sequence_PortableServer_IDs (CORBA::ULong maximum,
  CORBA::ULong length,
  PortableServer::ObjectId *data,
  CORBA::Boolean release)
: TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::_TAO_Unbounded_Sequence_PortableServer_IDs (const _TAO_Unbounded_Sequence_PortableServer_IDs &rhs)
// Copy constructor.
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
  {
    PortableServer::ObjectId *tmp1 = _TAO_Unbounded_Sequence_PortableServer_IDs::allocbuf (this->maximum_);
    PortableServer::ObjectId * const tmp2 = ACE_reinterpret_cast (PortableServer::ObjectId * ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];

    this->buffer_ = tmp1;
  }
  else
  {
    this->buffer_ = 0;
  }
}

ACE_INLINE PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs &
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::operator= (const _TAO_Unbounded_Sequence_PortableServer_IDs &rhs)
// Assignment operator.
{
  if (this == &rhs)
    return *this;

  if (this->release_)
  {
    if (this->maximum_ < rhs.maximum_)
    {
      // free the old buffer
      PortableServer::ObjectId *tmp = ACE_reinterpret_cast (PortableServer::ObjectId *, this->buffer_);
      _TAO_Unbounded_Sequence_PortableServer_IDs::freebuf (tmp);
      this->buffer_ = _TAO_Unbounded_Sequence_PortableServer_IDs::allocbuf (rhs.maximum_);
    }
  }
  else
    this->buffer_ = _TAO_Unbounded_Sequence_PortableServer_IDs::allocbuf (rhs.maximum_);

  TAO_Unbounded_Base_Sequence::operator= (rhs);

  PortableServer::ObjectId *tmp1 = ACE_reinterpret_cast (PortableServer::ObjectId *, this->buffer_);
  PortableServer::ObjectId * const tmp2 = ACE_reinterpret_cast (PortableServer::ObjectId * ACE_CAST_CONST, rhs.buffer_);

  for (CORBA::ULong i = 0; i < this->length_; ++i)
    tmp1[i] = tmp2[i];

  return *this;
}

// = Accessors.
ACE_INLINE PortableServer::ObjectId &
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::operator[] (CORBA::ULong i)
// operator []
{
  ACE_ASSERT (i < this->maximum_);
  PortableServer::ObjectId* tmp = ACE_reinterpret_cast(PortableServer::ObjectId*,this->buffer_);
  return tmp[i];
}

ACE_INLINE const PortableServer::ObjectId &
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::operator[] (CORBA::ULong i) const
// operator []
{
  ACE_ASSERT (i < this->maximum_);
  PortableServer::ObjectId * const tmp = ACE_reinterpret_cast (PortableServer::ObjectId* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE PortableServer::ObjectId *
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::get_buffer (CORBA::Boolean orphan)
{
  PortableServer::ObjectId *result = 0;
  if (orphan == 0)
  {
    // We retain ownership.
    if (this->buffer_ == 0)
    {
      result = _TAO_Unbounded_Sequence_PortableServer_IDs::allocbuf (this->length_);
      this->buffer_ = result;
      this->release_ = 1;
    }
    else
    {
      result = ACE_reinterpret_cast (PortableServer::ObjectId*, this->buffer_);
    }
  }
  else // if (orphan == 1)
  {
    if (this->release_ != 0)
    {
      // We set the state back to default and relinquish
      // ownership.
      result = ACE_reinterpret_cast(PortableServer::ObjectId*,this->buffer_);
      this->maximum_ = 0;
      this->length_ = 0;
      this->buffer_ = 0;
      this->release_ = 0;
    }
  }
  return result;
}

ACE_INLINE const PortableServer::ObjectId *
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::get_buffer (void) const
{
  return ACE_reinterpret_cast(const PortableServer::ObjectId * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE void
PortableServer::_TAO_Unbounded_Sequence_PortableServer_IDs::replace (CORBA::ULong max,
CORBA::ULong length,
PortableServer::ObjectId *data,
CORBA::Boolean release)
{
  this->maximum_ = max;
  this->length_ = length;
  if (this->buffer_ && this->release_ == 1)
  {
    PortableServer::ObjectId *tmp = ACE_reinterpret_cast(PortableServer::ObjectId*,this->buffer_);
    _TAO_Unbounded_Sequence_PortableServer_IDs::freebuf (tmp);
  }
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_PORTABLESERVER_IDS_CI_)
#define _PORTABLESERVER_IDS_CI_

// *************************************************************
// Inline operations for class PortableServer::IDs_var
// *************************************************************

ACE_INLINE
PortableServer::IDs_var::IDs_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableServer::IDs_var::IDs_var (IDs *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableServer::IDs_var::IDs_var (const ::PortableServer::IDs_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableServer::IDs (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableServer::IDs_var::~IDs_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableServer::IDs_var &
PortableServer::IDs_var::operator= (IDs *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableServer::IDs_var &
PortableServer::IDs_var::operator= (const ::PortableServer::IDs_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          IDs *deep_copy =
            new IDs (*p.ptr_);

          if (deep_copy != 0)
            {
              IDs *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::PortableServer::IDs *
PortableServer::IDs_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::IDs *
PortableServer::IDs_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
PortableServer::IDs_var::operator const ::PortableServer::IDs &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableServer::IDs_var::operator ::PortableServer::IDs &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableServer::IDs_var::operator ::PortableServer::IDs &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableServer::IDs_var::operator ::PortableServer::IDs *&() // cast
{
  return this->ptr_;
}

ACE_INLINE PortableServer::ObjectId &
PortableServer::IDs_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const PortableServer::ObjectId &
PortableServer::IDs_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const PortableServer::ObjectId &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::PortableServer::IDs &
PortableServer::IDs_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableServer::IDs &
PortableServer::IDs_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::PortableServer::IDs *&
PortableServer::IDs_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableServer::IDs *
PortableServer::IDs_var::_retn (void)
{
  ::PortableServer::IDs *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableServer::IDs *
PortableServer::IDs_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableServer::IDs_out
// *************************************************************

ACE_INLINE
PortableServer::IDs_out::IDs_out (IDs *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableServer::IDs_out::IDs_out (IDs_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableServer::IDs_out::IDs_out (const ::PortableServer::IDs_out &p) // copy constructor
  : ptr_ (ACE_const_cast (IDs_out&, p).ptr_)
{}

ACE_INLINE ::PortableServer::IDs_out &
PortableServer::IDs_out::operator= (const ::PortableServer::IDs_out &p)
{
  this->ptr_ = ACE_const_cast (IDs_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableServer::IDs_out &
PortableServer::IDs_out::operator= (IDs *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
PortableServer::IDs_out::operator ::PortableServer::IDs *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::IDs *&
PortableServer::IDs_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableServer::IDs *
PortableServer::IDs_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE PortableServer::ObjectId &
PortableServer::IDs_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */


#if (TAO_HAS_MINIMUM_POA == 0)

#if !defined (_PORTABLESERVER_THREADPOLICY___CI_)
#define _PORTABLESERVER_THREADPOLICY___CI_

ACE_INLINE PortableServer::ThreadPolicy_ptr
tao_PortableServer_ThreadPolicy_duplicate (
    PortableServer::ThreadPolicy_ptr p
  )
{
  return PortableServer::ThreadPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_ThreadPolicy_release (
    PortableServer::ThreadPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::ThreadPolicy_ptr
tao_PortableServer_ThreadPolicy_nil (
    void
  )
{
  return PortableServer::ThreadPolicy::_nil ();
}

ACE_INLINE PortableServer::ThreadPolicy_ptr
tao_PortableServer_ThreadPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::ThreadPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_ThreadPolicy_upcast (
    void *src
  )
{
  PortableServer::ThreadPolicy **tmp =
    ACE_static_cast (PortableServer::ThreadPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if !defined (_PORTABLESERVER_LIFESPANPOLICY___CI_)
#define _PORTABLESERVER_LIFESPANPOLICY___CI_

ACE_INLINE PortableServer::LifespanPolicy_ptr
tao_PortableServer_LifespanPolicy_duplicate (
    PortableServer::LifespanPolicy_ptr p
  )
{
  return PortableServer::LifespanPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_LifespanPolicy_release (
    PortableServer::LifespanPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::LifespanPolicy_ptr
tao_PortableServer_LifespanPolicy_nil (
    void
  )
{
  return PortableServer::LifespanPolicy::_nil ();
}

ACE_INLINE PortableServer::LifespanPolicy_ptr
tao_PortableServer_LifespanPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::LifespanPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_LifespanPolicy_upcast (
    void *src
  )
{
  PortableServer::LifespanPolicy **tmp =
    ACE_static_cast (PortableServer::LifespanPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_IDUNIQUENESSPOLICY___CI_)
#define _PORTABLESERVER_IDUNIQUENESSPOLICY___CI_

ACE_INLINE PortableServer::IdUniquenessPolicy_ptr
tao_PortableServer_IdUniquenessPolicy_duplicate (
    PortableServer::IdUniquenessPolicy_ptr p
  )
{
  return PortableServer::IdUniquenessPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_IdUniquenessPolicy_release (
    PortableServer::IdUniquenessPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::IdUniquenessPolicy_ptr
tao_PortableServer_IdUniquenessPolicy_nil (
    void
  )
{
  return PortableServer::IdUniquenessPolicy::_nil ();
}

ACE_INLINE PortableServer::IdUniquenessPolicy_ptr
tao_PortableServer_IdUniquenessPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::IdUniquenessPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_IdUniquenessPolicy_upcast (
    void *src
  )
{
  PortableServer::IdUniquenessPolicy **tmp =
    ACE_static_cast (PortableServer::IdUniquenessPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_IDASSIGNMENTPOLICY___CI_)
#define _PORTABLESERVER_IDASSIGNMENTPOLICY___CI_

ACE_INLINE PortableServer::IdAssignmentPolicy_ptr
tao_PortableServer_IdAssignmentPolicy_duplicate (
    PortableServer::IdAssignmentPolicy_ptr p
  )
{
  return PortableServer::IdAssignmentPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_IdAssignmentPolicy_release (
    PortableServer::IdAssignmentPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::IdAssignmentPolicy_ptr
tao_PortableServer_IdAssignmentPolicy_nil (
    void
  )
{
  return PortableServer::IdAssignmentPolicy::_nil ();
}

ACE_INLINE PortableServer::IdAssignmentPolicy_ptr
tao_PortableServer_IdAssignmentPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::IdAssignmentPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_IdAssignmentPolicy_upcast (
    void *src
  )
{
  PortableServer::IdAssignmentPolicy **tmp =
    ACE_static_cast (PortableServer::IdAssignmentPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if (TAO_HAS_MINIMUM_POA == 0)

#if !defined (_PORTABLESERVER_IMPLICITACTIVATIONPOLICY___CI_)
#define _PORTABLESERVER_IMPLICITACTIVATIONPOLICY___CI_

ACE_INLINE PortableServer::ImplicitActivationPolicy_ptr
tao_PortableServer_ImplicitActivationPolicy_duplicate (
    PortableServer::ImplicitActivationPolicy_ptr p
  )
{
  return PortableServer::ImplicitActivationPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_ImplicitActivationPolicy_release (
    PortableServer::ImplicitActivationPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::ImplicitActivationPolicy_ptr
tao_PortableServer_ImplicitActivationPolicy_nil (
    void
  )
{
  return PortableServer::ImplicitActivationPolicy::_nil ();
}

ACE_INLINE PortableServer::ImplicitActivationPolicy_ptr
tao_PortableServer_ImplicitActivationPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::ImplicitActivationPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_ImplicitActivationPolicy_upcast (
    void *src
  )
{
  PortableServer::ImplicitActivationPolicy **tmp =
    ACE_static_cast (PortableServer::ImplicitActivationPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_SERVANTRETENTIONPOLICY___CI_)
#define _PORTABLESERVER_SERVANTRETENTIONPOLICY___CI_

ACE_INLINE PortableServer::ServantRetentionPolicy_ptr
tao_PortableServer_ServantRetentionPolicy_duplicate (
    PortableServer::ServantRetentionPolicy_ptr p
  )
{
  return PortableServer::ServantRetentionPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_ServantRetentionPolicy_release (
    PortableServer::ServantRetentionPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::ServantRetentionPolicy_ptr
tao_PortableServer_ServantRetentionPolicy_nil (
    void
  )
{
  return PortableServer::ServantRetentionPolicy::_nil ();
}

ACE_INLINE PortableServer::ServantRetentionPolicy_ptr
tao_PortableServer_ServantRetentionPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::ServantRetentionPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_ServantRetentionPolicy_upcast (
    void *src
  )
{
  PortableServer::ServantRetentionPolicy **tmp =
    ACE_static_cast (PortableServer::ServantRetentionPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_REQUESTPROCESSINGPOLICY___CI_)
#define _PORTABLESERVER_REQUESTPROCESSINGPOLICY___CI_

ACE_INLINE PortableServer::RequestProcessingPolicy_ptr
tao_PortableServer_RequestProcessingPolicy_duplicate (
    PortableServer::RequestProcessingPolicy_ptr p
  )
{
  return PortableServer::RequestProcessingPolicy::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_RequestProcessingPolicy_release (
    PortableServer::RequestProcessingPolicy_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::RequestProcessingPolicy_ptr
tao_PortableServer_RequestProcessingPolicy_nil (
    void
  )
{
  return PortableServer::RequestProcessingPolicy::_nil ();
}

ACE_INLINE PortableServer::RequestProcessingPolicy_ptr
tao_PortableServer_RequestProcessingPolicy_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::RequestProcessingPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_RequestProcessingPolicy_upcast (
    void *src
  )
{
  PortableServer::RequestProcessingPolicy **tmp =
    ACE_static_cast (PortableServer::RequestProcessingPolicy **, src);
  return *tmp;
}


#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// *************************************************************
// Inline operations for exception PortableServer::POAManager::AdapterInactive
// *************************************************************


#if !defined (_PORTABLESERVER_POAMANAGER___CI_)
#define _PORTABLESERVER_POAMANAGER___CI_

ACE_INLINE PortableServer::POAManager_ptr
tao_PortableServer_POAManager_duplicate (
    PortableServer::POAManager_ptr p
  )
{
  return PortableServer::POAManager::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_POAManager_release (
    PortableServer::POAManager_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::POAManager_ptr
tao_PortableServer_POAManager_nil (
    void
  )
{
  return PortableServer::POAManager::_nil ();
}

ACE_INLINE PortableServer::POAManager_ptr
tao_PortableServer_POAManager_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::POAManager::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_POAManager_upcast (
    void *src
  )
{
  PortableServer::POAManager **tmp =
    ACE_static_cast (PortableServer::POAManager **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if (TAO_HAS_MINIMUM_POA == 0)

#if !defined (_PORTABLESERVER_ADAPTERACTIVATOR___CI_)
#define _PORTABLESERVER_ADAPTERACTIVATOR___CI_

ACE_INLINE PortableServer::AdapterActivator_ptr
tao_PortableServer_AdapterActivator_duplicate (
    PortableServer::AdapterActivator_ptr p
  )
{
  return PortableServer::AdapterActivator::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_AdapterActivator_release (
    PortableServer::AdapterActivator_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::AdapterActivator_ptr
tao_PortableServer_AdapterActivator_nil (
    void
  )
{
  return PortableServer::AdapterActivator::_nil ();
}

ACE_INLINE PortableServer::AdapterActivator_ptr
tao_PortableServer_AdapterActivator_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::AdapterActivator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_AdapterActivator_upcast (
    void *src
  )
{
  PortableServer::AdapterActivator **tmp =
    ACE_static_cast (PortableServer::AdapterActivator **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_SERVANTMANAGER___CI_)
#define _PORTABLESERVER_SERVANTMANAGER___CI_

ACE_INLINE PortableServer::ServantManager_ptr
tao_PortableServer_ServantManager_duplicate (
    PortableServer::ServantManager_ptr p
  )
{
  return PortableServer::ServantManager::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_ServantManager_release (
    PortableServer::ServantManager_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::ServantManager_ptr
tao_PortableServer_ServantManager_nil (
    void
  )
{
  return PortableServer::ServantManager::_nil ();
}

ACE_INLINE PortableServer::ServantManager_ptr
tao_PortableServer_ServantManager_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::ServantManager::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_ServantManager_upcast (
    void *src
  )
{
  PortableServer::ServantManager **tmp =
    ACE_static_cast (PortableServer::ServantManager **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_SERVANTACTIVATOR___CI_)
#define _PORTABLESERVER_SERVANTACTIVATOR___CI_

ACE_INLINE PortableServer::ServantActivator_ptr
tao_PortableServer_ServantActivator_duplicate (
    PortableServer::ServantActivator_ptr p
  )
{
  return PortableServer::ServantActivator::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_ServantActivator_release (
    PortableServer::ServantActivator_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::ServantActivator_ptr
tao_PortableServer_ServantActivator_nil (
    void
  )
{
  return PortableServer::ServantActivator::_nil ();
}

ACE_INLINE PortableServer::ServantActivator_ptr
tao_PortableServer_ServantActivator_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::ServantActivator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_ServantActivator_upcast (
    void *src
  )
{
  PortableServer::ServantActivator **tmp =
    ACE_static_cast (PortableServer::ServantActivator **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined (_PORTABLESERVER_SERVANTLOCATOR___CI_)
#define _PORTABLESERVER_SERVANTLOCATOR___CI_

ACE_INLINE PortableServer::ServantLocator_ptr
tao_PortableServer_ServantLocator_duplicate (
    PortableServer::ServantLocator_ptr p
  )
{
  return PortableServer::ServantLocator::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_ServantLocator_release (
    PortableServer::ServantLocator_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::ServantLocator_ptr
tao_PortableServer_ServantLocator_nil (
    void
  )
{
  return PortableServer::ServantLocator::_nil ();
}

ACE_INLINE PortableServer::ServantLocator_ptr
tao_PortableServer_ServantLocator_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::ServantLocator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_ServantLocator_upcast (
    void *src
  )
{
  PortableServer::ServantLocator **tmp =
    ACE_static_cast (PortableServer::ServantLocator **, src);
  return *tmp;
}


#endif /* end #if !defined */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

// *************************************************************
// Inline operations for exception PortableServer::POA::AdapterAlreadyExists
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::AdapterNonExistent
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::InvalidPolicy
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::NoServant
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::ObjectAlreadyActive
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::ObjectNotActive
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::ServantAlreadyActive
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::ServantNotActive
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::WrongAdapter
// *************************************************************

// *************************************************************
// Inline operations for exception PortableServer::POA::WrongPolicy
// *************************************************************


#if !defined (_PORTABLESERVER_POA___CI_)
#define _PORTABLESERVER_POA___CI_

ACE_INLINE PortableServer::POA_ptr
tao_PortableServer_POA_duplicate (
    PortableServer::POA_ptr p
  )
{
  return PortableServer::POA::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_POA_release (
    PortableServer::POA_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::POA_ptr
tao_PortableServer_POA_nil (
    void
  )
{
  return PortableServer::POA::_nil ();
}

ACE_INLINE PortableServer::POA_ptr
tao_PortableServer_POA_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::POA::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_POA_upcast (
    void *src
  )
{
  PortableServer::POA **tmp =
    ACE_static_cast (PortableServer::POA **, src);
  return *tmp;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception PortableServer::Current::NoContext
// *************************************************************


#if !defined (_PORTABLESERVER_CURRENT___CI_)
#define _PORTABLESERVER_CURRENT___CI_

ACE_INLINE PortableServer::Current_ptr
tao_PortableServer_Current_duplicate (
    PortableServer::Current_ptr p
  )
{
  return PortableServer::Current::_duplicate (p);
}

ACE_INLINE void
tao_PortableServer_Current_release (
    PortableServer::Current_ptr p
  )
{
  CORBA::release (p);
}

ACE_INLINE PortableServer::Current_ptr
tao_PortableServer_Current_nil (
    void
  )
{
  return PortableServer::Current::_nil ();
}

ACE_INLINE PortableServer::Current_ptr
tao_PortableServer_Current_narrow (
    CORBA::Object *p ACE_ENV_ARG_DECL
  )
{
  return PortableServer::Current::_narrow (p ACE_ENV_ARG_PARAMETER);
}

ACE_INLINE CORBA::Object *
tao_PortableServer_Current_upcast (
    void *src
  )
{
  PortableServer::Current **tmp =
    ACE_static_cast (PortableServer::Current **, src);
  return *tmp;
}


#endif /* end #if !defined */


#if !defined _TAO_CDR_OP_PortableServer_ObjectId_I_
#define _TAO_CDR_OP_PortableServer_ObjectId_I_

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const PortableServer::ObjectId &
  );
CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    PortableServer::ObjectId &
  );

#endif /* _TAO_CDR_OP_PortableServer_ObjectId_I_ */

#if (TAO_HAS_MINIMUM_CORBA == 0)

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::ForwardRequest &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.forward_reference.in ())
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,PortableServer::ForwardRequest &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.forward_reference.out ())
  )
    return 1;
  else
    return 0;
}

#endif /* TAO_HAS_MINIMUM_CORBA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::NotAGroupObject &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableServer::NotAGroupObject&)
{
  return 1;
}


#if !defined _TAO_CDR_OP_PortableServer_IDs_I_
#define _TAO_CDR_OP_PortableServer_IDs_I_

CORBA::Boolean TAO_PortableServer_Export operator<< (
    TAO_OutputCDR &,
    const PortableServer::IDs &
  );
CORBA::Boolean TAO_PortableServer_Export operator>> (
    TAO_InputCDR &,
    PortableServer::IDs &
  );

#endif /* _TAO_CDR_OP_PortableServer_IDs_I_ */

#endif /* TAO_HAS_MINIMUM_POA == 0 */

#if (TAO_HAS_MINIMUM_POA == 0)

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::ThreadPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::ThreadPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::ThreadPolicyValue, _tao_temp);
    }

  return _tao_result;
}

#endif /* TAO_HAS_MINIMUM_POA == 0 */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::LifespanPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::LifespanPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::LifespanPolicyValue, _tao_temp);
    }

  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::IdUniquenessPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::IdUniquenessPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::IdUniquenessPolicyValue, _tao_temp);
    }

  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::IdAssignmentPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::IdAssignmentPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::IdAssignmentPolicyValue, _tao_temp);
    }

  return _tao_result;
}

#if (TAO_HAS_MINIMUM_POA == 0)

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::ImplicitActivationPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::ImplicitActivationPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::ImplicitActivationPolicyValue, _tao_temp);
    }

  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::ServantRetentionPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::ServantRetentionPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::ServantRetentionPolicyValue, _tao_temp);
    }

  return _tao_result;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableServer::RequestProcessingPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableServer::RequestProcessingPolicyValue &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;

  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (PortableServer::RequestProcessingPolicyValue, _tao_temp);
    }

  return _tao_result;
}

#endif /* TAO_HAS_MINIMUM_POA == 0 */
