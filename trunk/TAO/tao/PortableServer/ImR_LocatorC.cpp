// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:338


#include "ImR_LocatorC.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Typecode.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "ImR_LocatorC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:62

// Arg traits specializations.
namespace TAO
{

#if !defined (_IMPLEMENTATIONREPOSITORY_SERVEROBJECT__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_SERVEROBJECT__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::ServerObject>
    : public
        Object_Arg_Traits_T<
            ImplementationRepository::ServerObject_ptr,
            ImplementationRepository::ServerObject_var,
            ImplementationRepository::ServerObject_out,
            TAO::Objref_Traits<ImplementationRepository::ServerObject>
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:474

#if !defined (_IMPLEMENTATIONREPOSITORY_STARTUPOPTIONS__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_STARTUPOPTIONS__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::StartupOptions>
    : public
        Var_Size_Arg_Traits_T<
            ImplementationRepository::StartupOptions,
            ImplementationRepository::StartupOptions_var,
            ImplementationRepository::StartupOptions_out
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:474

#if !defined (_IMPLEMENTATIONREPOSITORY_SERVERINFORMATION__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_SERVERINFORMATION__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::ServerInformation>
    : public
        Var_Size_Arg_Traits_T<
            ImplementationRepository::ServerInformation,
            ImplementationRepository::ServerInformation_var,
            ImplementationRepository::ServerInformation_out
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:265

#if !defined (_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONLIST__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::ServerInformationList>
    : public
        Var_Size_Arg_Traits_T<
            ImplementationRepository::ServerInformationList,
            ImplementationRepository::ServerInformationList_var,
            ImplementationRepository::ServerInformationList_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONITERATOR__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_SERVERINFORMATIONITERATOR__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::ServerInformationIterator>
    : public
        Object_Arg_Traits_T<
            ImplementationRepository::ServerInformationIterator_ptr,
            ImplementationRepository::ServerInformationIterator_var,
            ImplementationRepository::ServerInformationIterator_out,
            TAO::Objref_Traits<ImplementationRepository::ServerInformationIterator>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_ADMINISTRATION__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_ADMINISTRATION__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::Administration>
    : public
        Object_Arg_Traits_T<
            ImplementationRepository::Administration_ptr,
            ImplementationRepository::Administration_var,
            ImplementationRepository::Administration_out,
            TAO::Objref_Traits<ImplementationRepository::Administration>
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:265

#if !defined (_IMPLEMENTATIONREPOSITORY_LOCATOR_SERVERNAMELIST__ARG_TRAITS_CS_)
#define _IMPLEMENTATIONREPOSITORY_LOCATOR_SERVERNAMELIST__ARG_TRAITS_CS_

  ACE_TEMPLATE_SPECIALIZATION
  class TAO_PortableServer_Export Arg_Traits<ImplementationRepository::Locator::ServerNameList>
    : public
        Var_Size_Arg_Traits_T<
            ImplementationRepository::Locator::ServerNameList,
            ImplementationRepository::Locator::ServerNameList_var,
            ImplementationRepository::Locator::ServerNameList_out
          >
  {
  };

#endif /* end #if !defined */
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ImplementationRepository::Locator.

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
ImplementationRepository::Locator_ptr
TAO::Objref_Traits<ImplementationRepository::Locator>::tao_duplicate (
    ImplementationRepository::Locator_ptr p
  )
{
  return ImplementationRepository::Locator::_duplicate (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
void
TAO::Objref_Traits<ImplementationRepository::Locator>::tao_release (
    ImplementationRepository::Locator_ptr p
  )
{
  CORBA::release (p);
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
ImplementationRepository::Locator_ptr
TAO::Objref_Traits<ImplementationRepository::Locator>::tao_nil (void)
{
  return ImplementationRepository::Locator::_nil ();
}

ACE_TEMPLATE_CLASS_MEMBER_SPECIALIZATION
CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::Locator>::tao_marshal (
    ImplementationRepository::Locator_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker *
(*ImplementationRepository__TAO_Locator_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_IMPLEMENTATIONREPOSITORY_LOCATOR_SERVERNAMELIST_CS_)
#define _IMPLEMENTATIONREPOSITORY_LOCATOR_SERVERNAMELIST_CS_

ImplementationRepository::Locator::ServerNameList::ServerNameList (void)
{}

ImplementationRepository::Locator::ServerNameList::ServerNameList (
    CORBA::ULong max
  )
  : TAO_Unbounded_String_Sequence
    (max)
{}

ImplementationRepository::Locator::ServerNameList::ServerNameList (
    CORBA::ULong max,
    CORBA::ULong length,
    char * * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_String_Sequence
    (max, length, buffer, release)
{}

ImplementationRepository::Locator::ServerNameList::ServerNameList (
    const ServerNameList &seq
  )
  : TAO_Unbounded_String_Sequence
    (seq)
{}

ImplementationRepository::Locator::ServerNameList::~ServerNameList (void)
{}

void ImplementationRepository::Locator::ServerNameList::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ServerNameList * _tao_tmp_pointer =
    ACE_static_cast (ServerNameList *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_ImplementationRepository_Locator_ServerNameList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  56,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x496d706c),
  ACE_NTOHL (0x656d656e),
  ACE_NTOHL (0x74617469),
  ACE_NTOHL (0x6f6e5265),
  ACE_NTOHL (0x706f7369),
  ACE_NTOHL (0x746f7279),
  ACE_NTOHL (0x2f4c6f63),
  ACE_NTOHL (0x61746f72),
  ACE_NTOHL (0x2f536572),
  ACE_NTOHL (0x7665724e),
  ACE_NTOHL (0x616d654c),
  ACE_NTOHL (0x6973743a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:ImplementationRepository/Locator/ServerNameList:1.0
    15,
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65724e61),
  ACE_NTOHL (0x6d654c69),
  ACE_NTOHL (0x73740000),  // name = ServerNameList
    CORBA::tk_sequence, // typecode kind
  16, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_string,
    0U, // string length
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_ImplementationRepository_Locator_ServerNameList (
    CORBA::tk_alias,
    sizeof (_oc_ImplementationRepository_Locator_ServerNameList),
    (char *) &_oc_ImplementationRepository_Locator_ServerNameList,
    0,
    sizeof (ImplementationRepository::Locator::ServerNameList)
  );

::CORBA::TypeCode_ptr ImplementationRepository::Locator::_tc_ServerNameList =
  &_tc_TAO_tc_ImplementationRepository_Locator_ServerNameList;

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::activate_server_in_activator (
    const char * server,
    const char * activator
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , ImplementationRepository::NotFound
    , ImplementationRepository::CannotActivate
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_server (server);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_server,
      &_tao_activator
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_Locator_activate_server_in_activator_exceptiondata [] =
    {
      {
        "IDL:ImplementationRepository/NotFound:1.0",
        ImplementationRepository::NotFound::_alloc,
        ImplementationRepository::_tc_NotFound
      },

      {
        "IDL:ImplementationRepository/CannotActivate:1.0",
        ImplementationRepository::CannotActivate::_alloc,
        ImplementationRepository::_tc_CannotActivate
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "activate_server_in_activator",
      28,
      this->the_TAO_Locator_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_Locator_activate_server_in_activator_exceptiondata,
      2
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::remove_server_in_activator (
    const char * server,
    const char * activator
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , ImplementationRepository::NotFound
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_server (server);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_server,
      &_tao_activator
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_Locator_remove_server_in_activator_exceptiondata [] =
    {
      {
        "IDL:ImplementationRepository/NotFound:1.0",
        ImplementationRepository::NotFound::_alloc,
        ImplementationRepository::_tc_NotFound
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "remove_server_in_activator",
      26,
      this->the_TAO_Locator_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_Locator_remove_server_in_activator_exceptiondata,
      1
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::shutdown_server_in_activator (
    const char * server,
    const char * activator
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , ImplementationRepository::NotFound
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_server (server);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_server,
      &_tao_activator
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_Locator_shutdown_server_in_activator_exceptiondata [] =
    {
      {
        "IDL:ImplementationRepository/NotFound:1.0",
        ImplementationRepository::NotFound::_alloc,
        ImplementationRepository::_tc_NotFound
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "shutdown_server_in_activator",
      28,
      this->the_TAO_Locator_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_Locator_shutdown_server_in_activator_exceptiondata,
      1
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::server_is_shutting_down_in_activator (
    const char * server,
    const char * activator
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , ImplementationRepository::NotFound
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_server (server);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_server,
      &_tao_activator
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_Locator_server_is_shutting_down_in_activator_exceptiondata [] =
    {
      {
        "IDL:ImplementationRepository/NotFound:1.0",
        ImplementationRepository::NotFound::_alloc,
        ImplementationRepository::_tc_NotFound
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "server_is_shutting_down_in_activator",
      36,
      this->the_TAO_Locator_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_Locator_server_is_shutting_down_in_activator_exceptiondata,
      1
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

CORBA::Long ImplementationRepository::Locator::register_activator (
    const char * activator,
    ImplementationRepository::Administration_ptr admin,
    const ImplementationRepository::Locator::ServerNameList & servers
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);
  TAO::Arg_Traits<ImplementationRepository::Administration>::in_arg_val _tao_admin (admin);
  TAO::Arg_Traits<ImplementationRepository::Locator::ServerNameList>::in_arg_val _tao_servers (servers);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_activator,
      &_tao_admin,
      &_tao_servers
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "register_activator",
      18,
      this->the_TAO_Locator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::unregister_activator (
    const char * activator,
    CORBA::Long token
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_token (token);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_activator,
      &_tao_token
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "unregister_activator",
      20,
      this->the_TAO_Locator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::server_is_running_in_activator (
    const char * server,
    const char * activator,
    const char * addr,
    ImplementationRepository::ServerObject_ptr server_object
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , ImplementationRepository::NotFound
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_server (server);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);
  TAO::Arg_Traits<ImplementationRepository::Address>::in_arg_val _tao_addr (addr);
  TAO::Arg_Traits<ImplementationRepository::ServerObject>::in_arg_val _tao_server_object (server_object);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_server,
      &_tao_activator,
      &_tao_addr,
      &_tao_server_object
    };
  
  static TAO::Exception_Data
  _tao_ImplementationRepository_Locator_server_is_running_in_activator_exceptiondata [] = 
    {
      {
        "IDL:ImplementationRepository/NotFound:1.0",
        ImplementationRepository::NotFound::_alloc,
        ImplementationRepository::_tc_NotFound
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "server_is_running_in_activator",
      30,
      this->the_TAO_Locator_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ImplementationRepository_Locator_server_is_running_in_activator_exceptiondata,
      1
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void ImplementationRepository::Locator::find_in_activator (
    const char * server,
    const char * activator,
    ImplementationRepository::ServerInformation_out info
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , ImplementationRepository::NotFound
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Locator_Proxy_Broker_ == 0)
    {
      ImplementationRepository_Locator_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_server (server);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_activator (activator);
  TAO::Arg_Traits<ImplementationRepository::ServerInformation>::out_arg_val _tao_info (info);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_server,
      &_tao_activator,
      &_tao_info
    };
  
  static TAO::Exception_Data
  _tao_ImplementationRepository_Locator_find_in_activator_exceptiondata [] = 
    {
      {
        "IDL:ImplementationRepository/NotFound:1.0",
        ImplementationRepository::NotFound::_alloc,
        ImplementationRepository::_tc_NotFound
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "find_in_activator",
      17,
      this->the_TAO_Locator_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ImplementationRepository_Locator_find_in_activator_exceptiondata,
      1
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK;
}

ImplementationRepository::Locator::Locator (int collocated)
 : the_TAO_Locator_Proxy_Broker_ (0)
{
  this->ImplementationRepository_Locator_setup_collocation (collocated);
}

void
ImplementationRepository::Locator::ImplementationRepository_Locator_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_Locator_Proxy_Broker_ =
        ::ImplementationRepository__TAO_Locator_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ImplementationRepository_Administration_setup_collocation (collocated);
}

ImplementationRepository::Locator::~Locator (void)
{}

void 
ImplementationRepository::Locator::_tao_any_destructor (void *_tao_void_pointer)
{
  Locator *_tao_tmp_pointer =
    ACE_static_cast (Locator *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::Locator_ptr
ImplementationRepository::Locator::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Locator>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/Locator:1.0",
        ImplementationRepository__TAO_Locator_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

ImplementationRepository::Locator_ptr
ImplementationRepository::Locator::_duplicate (Locator_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
ImplementationRepository::Locator::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ImplementationRepository/Administration:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ImplementationRepository/Locator:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* ImplementationRepository::Locator::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/Locator:1.0";
}

CORBA::Boolean
ImplementationRepository::Locator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_ImplementationRepository_Locator[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x496d706c), 
  ACE_NTOHL (0x656d656e), 
  ACE_NTOHL (0x74617469), 
  ACE_NTOHL (0x6f6e5265), 
  ACE_NTOHL (0x706f7369), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x2f4c6f63), 
  ACE_NTOHL (0x61746f72), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:ImplementationRepository/Locator:1.0
    8,
  ACE_NTOHL (0x4c6f6361), 
  ACE_NTOHL (0x746f7200),  // name = Locator
  };

static CORBA::TypeCode _tc_TAO_tc_ImplementationRepository_Locator (
    CORBA::tk_objref,
    sizeof (_oc_ImplementationRepository_Locator),
    (char *) &_oc_ImplementationRepository_Locator,
    0,
    sizeof (ImplementationRepository::Locator)
  );

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr _tc_Locator =
    &_tc_TAO_tc_ImplementationRepository_Locator;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<ImplementationRepository::Locator>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    ImplementationRepository::Locator_ptr _tao_elem
  )
{
  ImplementationRepository::Locator_ptr _tao_objptr =
    ImplementationRepository::Locator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    ImplementationRepository::Locator_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<ImplementationRepository::Locator>::insert (
      _tao_any,
      ImplementationRepository::Locator::_tao_any_destructor,
      ImplementationRepository::_tc_Locator,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    ImplementationRepository::Locator_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<ImplementationRepository::Locator>::extract (
        _tao_any,
        ImplementationRepository::Locator::_tao_any_destructor,
        ImplementationRepository::_tc_Locator,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const ImplementationRepository::Locator::ServerNameList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::Locator::ServerNameList>::insert_copy (
      _tao_any,
      ImplementationRepository::Locator::ServerNameList::_tao_any_destructor,
      ImplementationRepository::Locator::_tc_ServerNameList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    ImplementationRepository::Locator::ServerNameList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::Locator::ServerNameList>::insert (
      _tao_any,
      ImplementationRepository::Locator::ServerNameList::_tao_any_destructor,
      ImplementationRepository::Locator::_tc_ServerNameList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    ImplementationRepository::Locator::ServerNameList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const ImplementationRepository::Locator::ServerNameList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const ImplementationRepository::Locator::ServerNameList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::Locator::ServerNameList>::extract (
        _tao_any,
        ImplementationRepository::Locator::ServerNameList::_tao_any_destructor,
        ImplementationRepository::Locator::_tc_ServerNameList,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_ImplementationRepository_Locator_ServerNameList_CPP_
#define _TAO_CDR_OP_ImplementationRepository_Locator_ServerNameList_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::Locator::ServerNameList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::Locator::ServerNameList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        
      }
    
    return _tao_marshal_flag;
  
  }

return 0;
}

#endif /* _TAO_CDR_OP_ImplementationRepository_Locator_ServerNameList_CPP_ */

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::Locator_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::Locator_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::ImplementationRepository::Locator RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ImplementationRepository__TAO_Locator_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// c:\cvsdoc\ace_wrappers\build\vc71\tao\tao_idl\be\be_visitor_root/root.cpp:1725

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO::Objref_Traits<
        ImplementationRepository::Locator
      >;

  template class
    TAO_Objref_Var_T<
        ImplementationRepository::Locator
      >;
  
  template class
    TAO_Objref_Out_T<
        ImplementationRepository::Locator
      >;

  template class
    TAO::Narrow_Utils<
        ImplementationRepository::Locator
      >;

  template class
    TAO::Any_Impl_T<
        ImplementationRepository::Locator
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO::Objref_Traits< \
        ImplementationRepository::Locator \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        ImplementationRepository::Locator
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        ImplementationRepository::Locator
      >

# pragma instantiate \
    TAO::Narrow_Utils< \
        ImplementationRepository::Locator \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        ImplementationRepository::Locator \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

