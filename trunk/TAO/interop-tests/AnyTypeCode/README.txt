$Id$

This test demonstrates the interoperation of JacORB and TAO with respect to
the use of indirection in the type codes marshaled with Anys. These are
represented by structs, unions, and value types. The test is composed of a
client and server for both JacORB and TAO, enabling a client of either to
send to a server of either.

For now, TAO can unmarshal an Any using indirect types, but it cannot generate
them. The TAO-marshaled Anys are quite a bit larger than those generated by
JacORB.

Building
--------
Use MPC tools to generate a workspace from atc.mwc, then your native C++
compiler. The result will be a client and server executables in the "tao"
directory.

Use Ant or equivalent tool to build the Java classes, which will end up in
a new "build" directory. If you use a Java IDE such as Eclipse, the build
target path may be different.

Running
-------
These are the example test command lines:

TAO -
  tao/client [-k <ior>] [-ORB...]
     where <ior> defaults to "file://test.ior"
  tao/server [-o <iorfile>] [-ORB...]
     where <iorfile> defaults to "test.ior"

JacORB
  jaco -classpath build/classes [-Djacorb.interop.indirection_encoding_disable=true] demo.Client [<iorfile>]
  jaco -classpath build/classes [-Djacorb.interop.indirection_encoding_disable=true] demo.Server [<iorfile>]
     where <iorfile> defaults to "test.ior"
     the -Djacorb option disables the use of indirect type ids for that run.

The expected outcome is that with indirection enabled or not, the tests run to completion.
