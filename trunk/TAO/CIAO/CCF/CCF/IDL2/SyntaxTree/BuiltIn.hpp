// file      : CCF/IDL2/SyntaxTree/BuiltIn.hpp
// author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
// cvs-id    : $Id$

// Note, that this file is automatically generated!
//

#ifndef CCF_IDL2_SYNTAX_TREE_BUILT_IN_HPP
#define CCF_IDL2_SYNTAX_TREE_BUILT_IN_HPP

#include "CCF/IDL2/SyntaxTree/Elements.hpp"

namespace CCF
{
  namespace IDL2
  {
    namespace SyntaxTree
    {
      //
      //
      //
      class BuiltInTypeDecl : public virtual TypeDecl
      {
      protected:
        virtual
        ~BuiltInTypeDecl () throw () {}

        BuiltInTypeDecl ()
        {
          type_info (static_type_info ());
        }

      public:
        virtual bool
        complete () const
        {
          return true;
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<BuiltInTypeDecl>
      BuiltInTypeDeclPtr;


      //
      //
      //
      class ObjectDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~ObjectDecl () throw () {}

        ObjectDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("Object"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        ObjectDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new ObjectDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type Object";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<ObjectDecl>
      ObjectDeclPtr;


      //
      //
      //
      class ValueBaseDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~ValueBaseDecl () throw () {}

        ValueBaseDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("ValueBase"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        ValueBaseDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new ValueBaseDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type ValueBase";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<ValueBaseDecl>
      ValueBaseDeclPtr;


      //
      //
      //
      class AnyDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~AnyDecl () throw () {}

        AnyDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("any"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        AnyDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new AnyDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type any";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<AnyDecl>
      AnyDeclPtr;


      //
      //
      //
      class BooleanDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~BooleanDecl () throw () {}

        BooleanDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("boolean"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        BooleanDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new BooleanDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type boolean";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<BooleanDecl>
      BooleanDeclPtr;


      //
      //
      //
      class CharDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~CharDecl () throw () {}

        CharDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("char"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        CharDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new CharDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type char";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<CharDecl>
      CharDeclPtr;


      //
      //
      //
      class DoubleDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~DoubleDecl () throw () {}

        DoubleDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("double"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        DoubleDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new DoubleDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type double";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<DoubleDecl>
      DoubleDeclPtr;


      //
      //
      //
      class FloatDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~FloatDecl () throw () {}

        FloatDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("float"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        FloatDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new FloatDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type float";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<FloatDecl>
      FloatDeclPtr;


      //
      //
      //
      class LongDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~LongDecl () throw () {}

        LongDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("long"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        LongDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new LongDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<LongDecl>
      LongDeclPtr;


      //
      //
      //
      class LongDoubleDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~LongDoubleDecl () throw () {}

        LongDoubleDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("long double"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        LongDoubleDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new LongDoubleDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type long double";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<LongDoubleDecl>
      LongDoubleDeclPtr;


      //
      //
      //
      class LongLongDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~LongLongDecl () throw () {}

        LongLongDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("long long"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        LongLongDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new LongLongDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type long long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<LongLongDecl>
      LongLongDeclPtr;


      //
      //
      //
      class OctetDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~OctetDecl () throw () {}

        OctetDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("octet"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        OctetDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new OctetDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type octet";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<OctetDecl>
      OctetDeclPtr;


      //
      //
      //
      class ShortDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~ShortDecl () throw () {}

        ShortDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("short"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        ShortDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new ShortDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type short";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<ShortDecl>
      ShortDeclPtr;


      //
      //
      //
      class StringDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~StringDecl () throw () {}

        StringDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("string"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        StringDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new StringDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type string";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<StringDecl>
      StringDeclPtr;


      //
      //
      //
      class UnsignedLongDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~UnsignedLongDecl () throw () {}

        UnsignedLongDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("unsigned long"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        UnsignedLongDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new UnsignedLongDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type unsigned long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<UnsignedLongDecl>
      UnsignedLongDeclPtr;


      //
      //
      //
      class UnsignedLongLongDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~UnsignedLongLongDecl () throw () {}

        UnsignedLongLongDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("unsigned long long"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        UnsignedLongLongDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new UnsignedLongLongDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type unsigned long long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<UnsignedLongLongDecl>
      UnsignedLongLongDeclPtr;


      //
      //
      //
      class UnsignedShortDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~UnsignedShortDecl () throw () {}

        UnsignedShortDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("unsigned short"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        UnsignedShortDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new UnsignedShortDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type unsigned short";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<UnsignedShortDecl>
      UnsignedShortDeclPtr;


      //
      //
      //
      class VoidDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~VoidDecl () throw () {}

        VoidDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("void"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        VoidDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new VoidDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type void";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<VoidDecl>
      VoidDeclPtr;


      //
      //
      //
      class WcharDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~WcharDecl () throw () {}

        WcharDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("wchar"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        WcharDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new WcharDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type wchar";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<WcharDecl>
      WcharDeclPtr;


      //
      //
      //
      class WstringDecl : public virtual BuiltInTypeDecl
      {
      public:
        virtual
        ~WstringDecl () throw () {}

        WstringDecl (ScopePtr const& scope)
            : Declaration (SimpleName ("wstring"), scope)
        {
          type_info (static_type_info ());
        }

      protected:
        WstringDecl (SimpleName const& name, Order const& order, ScopePtr const& scope)
            : Declaration (name, order, scope)
        {
          type_info (static_type_info ());
        }

      public:
        virtual TypeDeclPtr
        clone_typedef_temporary (SimpleName const& name,
                                 Order const& order,
                                 ScopePtr const& scope)
        {
          return TypeDeclPtr (new WstringDecl (name, order, scope));
        }

        // Runtime declaration type information.
        //
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type wstring";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<WstringDecl>
      WstringDeclPtr;
    }
  }
}

#endif  // CCF_IDL2_SYNTAX_TREE_BUILT_IN_HPP
