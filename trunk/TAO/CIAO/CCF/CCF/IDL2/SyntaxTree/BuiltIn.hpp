// file      : CCF/IDL2/SyntaxTree/BuiltIn.hpp
// author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
// cvs-id    : $Id$

// Note, that this file is automatically generated!
//

#ifndef CCF_IDL2_SYNTAX_TREE_BUILT_IN_HPP
#define CCF_IDL2_SYNTAX_TREE_BUILT_IN_HPP

#include "CCF/IDL2/SyntaxTree/Elements.hpp"

namespace CCF
{
  namespace IDL2
  {
    namespace SyntaxTree
    {
      //
      //
      //
      class BuiltInTypeDef : public virtual TypeDef
      {
      protected:
        virtual
        ~BuiltInTypeDef () throw () {}

        BuiltInTypeDef ()
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<BuiltInTypeDef>
      BuiltInTypeDefPtr;


      //
      //
      //
      class Object : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Object () throw () {}

        Object (ScopePtr const& scope)
            : Declaration (SimpleName ("Object"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type Object";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Object>
      ObjectPtr;


      //
      //
      //
      class ValueBase : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~ValueBase () throw () {}

        ValueBase (ScopePtr const& scope)
            : Declaration (SimpleName ("ValueBase"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type ValueBase";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<ValueBase>
      ValueBasePtr;


      //
      //
      //
      class Any : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Any () throw () {}

        Any (ScopePtr const& scope)
            : Declaration (SimpleName ("any"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type any";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Any>
      AnyPtr;


      //
      //
      //
      class Boolean : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Boolean () throw () {}

        Boolean (ScopePtr const& scope)
            : Declaration (SimpleName ("boolean"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type boolean";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Boolean>
      BooleanPtr;


      //
      //
      //
      class Char : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Char () throw () {}

        Char (ScopePtr const& scope)
            : Declaration (SimpleName ("char"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type char";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Char>
      CharPtr;


      //
      //
      //
      class Double : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Double () throw () {}

        Double (ScopePtr const& scope)
            : Declaration (SimpleName ("double"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type double";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Double>
      DoublePtr;


      //
      //
      //
      class Float : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Float () throw () {}

        Float (ScopePtr const& scope)
            : Declaration (SimpleName ("float"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type float";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Float>
      FloatPtr;


      //
      //
      //
      class Long : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Long () throw () {}

        Long (ScopePtr const& scope)
            : Declaration (SimpleName ("long"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Long>
      LongPtr;


      //
      //
      //
      class LongDouble : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~LongDouble () throw () {}

        LongDouble (ScopePtr const& scope)
            : Declaration (SimpleName ("long double"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type long double";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<LongDouble>
      LongDoublePtr;


      //
      //
      //
      class LongLong : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~LongLong () throw () {}

        LongLong (ScopePtr const& scope)
            : Declaration (SimpleName ("long long"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type long long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<LongLong>
      LongLongPtr;


      //
      //
      //
      class Octet : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Octet () throw () {}

        Octet (ScopePtr const& scope)
            : Declaration (SimpleName ("octet"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type octet";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Octet>
      OctetPtr;


      //
      //
      //
      class Short : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Short () throw () {}

        Short (ScopePtr const& scope)
            : Declaration (SimpleName ("short"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type short";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Short>
      ShortPtr;


      //
      //
      //
      class String : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~String () throw () {}

        String (ScopePtr const& scope)
            : Declaration (SimpleName ("string"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type string";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<String>
      StringPtr;


      //
      //
      //
      class UnsignedLong : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~UnsignedLong () throw () {}

        UnsignedLong (ScopePtr const& scope)
            : Declaration (SimpleName ("unsigned long"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type unsigned long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<UnsignedLong>
      UnsignedLongPtr;


      //
      //
      //
      class UnsignedLongLong : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~UnsignedLongLong () throw () {}

        UnsignedLongLong (ScopePtr const& scope)
            : Declaration (SimpleName ("unsigned long long"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type unsigned long long";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<UnsignedLongLong>
      UnsignedLongLongPtr;


      //
      //
      //
      class UnsignedShort : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~UnsignedShort () throw () {}

        UnsignedShort (ScopePtr const& scope)
            : Declaration (SimpleName ("unsigned short"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type unsigned short";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<UnsignedShort>
      UnsignedShortPtr;


      //
      //
      //
      class Void : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Void () throw () {}

        Void (ScopePtr const& scope)
            : Declaration (SimpleName ("void"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type void";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Void>
      VoidPtr;


      //
      //
      //
      class Wchar : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Wchar () throw () {}

        Wchar (ScopePtr const& scope)
            : Declaration (SimpleName ("wchar"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type wchar";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Wchar>
      WcharPtr;


      //
      //
      //
      class Wstring : public virtual BuiltInTypeDef
      {
      public:
        virtual
        ~Wstring () throw () {}

        Wstring (ScopePtr const& scope)
            : Declaration (SimpleName ("wstring"), scope)
        {
          type_info (static_type_info ());
        }

        // Runtime declaration type information
      public:
        virtual std::string
        declaration_class ()
        {
          return "built-in type wstring";
        }

      public:
        static Utility::Introspection::TypeInfo const&
        static_type_info ();
      };

      typedef
      StrictPtr<Wstring>
      WstringPtr;
    }
  }
}

#endif  // CCF_IDL2_SYNTAX_TREE_BUILT_IN_HPP
