// file      : CCF/IDL2/Traversal/BuiltIn.hpp
// author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
// cvs-id    : $Id$

// Note, that this file is automatically generated!
//

#ifndef CCF_IDL2_TRAVERSAL_BUILT_IN_HPP
#define CCF_IDL2_TRAVERSAL_BUILT_IN_HPP

#include "CCF/IDL2/Traversal/Elements.hpp"
#include "CCF/IDL2/SyntaxTree/BuiltIn.hpp"

namespace CCF
{
  namespace IDL2
  {
    namespace Traversal
    {

      // BuiltInTypeDef
      //
      //
      struct BuiltInTypeDef : Traverser
      {
        typedef
        SyntaxTree::BuiltInTypeDefPtr
        NodePtr;

        BuiltInTypeDef ()
        {
          map (typeid (SyntaxTree::BuiltInTypeDef), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::BuiltInTypeDef> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Object
      //
      //
      struct Object : Traverser
      {
        typedef
        SyntaxTree::ObjectPtr
        NodePtr;

        Object ()
        {
          map (typeid (SyntaxTree::Object), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Object> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // ValueBase
      //
      //
      struct ValueBase : Traverser
      {
        typedef
        SyntaxTree::ValueBasePtr
        NodePtr;

        ValueBase ()
        {
          map (typeid (SyntaxTree::ValueBase), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::ValueBase> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Any
      //
      //
      struct Any : Traverser
      {
        typedef
        SyntaxTree::AnyPtr
        NodePtr;

        Any ()
        {
          map (typeid (SyntaxTree::Any), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Any> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Boolean
      //
      //
      struct Boolean : Traverser
      {
        typedef
        SyntaxTree::BooleanPtr
        NodePtr;

        Boolean ()
        {
          map (typeid (SyntaxTree::Boolean), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Boolean> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Char
      //
      //
      struct Char : Traverser
      {
        typedef
        SyntaxTree::CharPtr
        NodePtr;

        Char ()
        {
          map (typeid (SyntaxTree::Char), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Char> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Double
      //
      //
      struct Double : Traverser
      {
        typedef
        SyntaxTree::DoublePtr
        NodePtr;

        Double ()
        {
          map (typeid (SyntaxTree::Double), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Double> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Float
      //
      //
      struct Float : Traverser
      {
        typedef
        SyntaxTree::FloatPtr
        NodePtr;

        Float ()
        {
          map (typeid (SyntaxTree::Float), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Float> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Long
      //
      //
      struct Long : Traverser
      {
        typedef
        SyntaxTree::LongPtr
        NodePtr;

        Long ()
        {
          map (typeid (SyntaxTree::Long), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Long> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // LongDouble
      //
      //
      struct LongDouble : Traverser
      {
        typedef
        SyntaxTree::LongDoublePtr
        NodePtr;

        LongDouble ()
        {
          map (typeid (SyntaxTree::LongDouble), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::LongDouble> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // LongLong
      //
      //
      struct LongLong : Traverser
      {
        typedef
        SyntaxTree::LongLongPtr
        NodePtr;

        LongLong ()
        {
          map (typeid (SyntaxTree::LongLong), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::LongLong> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Octet
      //
      //
      struct Octet : Traverser
      {
        typedef
        SyntaxTree::OctetPtr
        NodePtr;

        Octet ()
        {
          map (typeid (SyntaxTree::Octet), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Octet> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Short
      //
      //
      struct Short : Traverser
      {
        typedef
        SyntaxTree::ShortPtr
        NodePtr;

        Short ()
        {
          map (typeid (SyntaxTree::Short), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Short> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // String
      //
      //
      struct String : Traverser
      {
        typedef
        SyntaxTree::StringPtr
        NodePtr;

        String ()
        {
          map (typeid (SyntaxTree::String), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::String> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // UnsignedLong
      //
      //
      struct UnsignedLong : Traverser
      {
        typedef
        SyntaxTree::UnsignedLongPtr
        NodePtr;

        UnsignedLong ()
        {
          map (typeid (SyntaxTree::UnsignedLong), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::UnsignedLong> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // UnsignedLongLong
      //
      //
      struct UnsignedLongLong : Traverser
      {
        typedef
        SyntaxTree::UnsignedLongLongPtr
        NodePtr;

        UnsignedLongLong ()
        {
          map (typeid (SyntaxTree::UnsignedLongLong), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::UnsignedLongLong> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // UnsignedShort
      //
      //
      struct UnsignedShort : Traverser
      {
        typedef
        SyntaxTree::UnsignedShortPtr
        NodePtr;

        UnsignedShort ()
        {
          map (typeid (SyntaxTree::UnsignedShort), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::UnsignedShort> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Void
      //
      //
      struct Void : Traverser
      {
        typedef
        SyntaxTree::VoidPtr
        NodePtr;

        Void ()
        {
          map (typeid (SyntaxTree::Void), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Void> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Wchar
      //
      //
      struct Wchar : Traverser
      {
        typedef
        SyntaxTree::WcharPtr
        NodePtr;

        Wchar ()
        {
          map (typeid (SyntaxTree::Wchar), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Wchar> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // Wstring
      //
      //
      struct Wstring : Traverser
      {
        typedef
        SyntaxTree::WstringPtr
        NodePtr;

        Wstring ()
        {
          map (typeid (SyntaxTree::Wstring), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::Wstring> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };
    }
  }
}

#endif  // CCF_IDL2_TRAVERSAL_BUILT_IN_HPP
