// file      : CCF/IDL2/Traversal/BuiltIn.hpp
// author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
// cvs-id    : $Id$

// Note, that this file is automatically generated!
//

#ifndef CCF_IDL2_TRAVERSAL_BUILT_IN_HPP
#define CCF_IDL2_TRAVERSAL_BUILT_IN_HPP

#include "CCF/IDL2/Traversal/Elements.hpp"
#include "CCF/IDL2/SyntaxTree/BuiltIn.hpp"

namespace CCF
{
  namespace IDL2
  {
    namespace Traversal
    {

      // BuiltInTypeDecl
      //
      //
      struct BuiltInTypeDecl : Traverser
      {
        typedef
        SyntaxTree::BuiltInTypeDeclPtr
        NodePtr;

        BuiltInTypeDecl ()
        {
          map (typeid (SyntaxTree::BuiltInTypeDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::BuiltInTypeDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // ObjectDecl
      //
      //
      struct ObjectDecl : Traverser
      {
        typedef
        SyntaxTree::ObjectDeclPtr
        NodePtr;

        ObjectDecl ()
        {
          map (typeid (SyntaxTree::ObjectDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::ObjectDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // ValueBaseDecl
      //
      //
      struct ValueBaseDecl : Traverser
      {
        typedef
        SyntaxTree::ValueBaseDeclPtr
        NodePtr;

        ValueBaseDecl ()
        {
          map (typeid (SyntaxTree::ValueBaseDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::ValueBaseDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // AnyDecl
      //
      //
      struct AnyDecl : Traverser
      {
        typedef
        SyntaxTree::AnyDeclPtr
        NodePtr;

        AnyDecl ()
        {
          map (typeid (SyntaxTree::AnyDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::AnyDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // BooleanDecl
      //
      //
      struct BooleanDecl : Traverser
      {
        typedef
        SyntaxTree::BooleanDeclPtr
        NodePtr;

        BooleanDecl ()
        {
          map (typeid (SyntaxTree::BooleanDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::BooleanDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // CharDecl
      //
      //
      struct CharDecl : Traverser
      {
        typedef
        SyntaxTree::CharDeclPtr
        NodePtr;

        CharDecl ()
        {
          map (typeid (SyntaxTree::CharDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::CharDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // DoubleDecl
      //
      //
      struct DoubleDecl : Traverser
      {
        typedef
        SyntaxTree::DoubleDeclPtr
        NodePtr;

        DoubleDecl ()
        {
          map (typeid (SyntaxTree::DoubleDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::DoubleDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // FloatDecl
      //
      //
      struct FloatDecl : Traverser
      {
        typedef
        SyntaxTree::FloatDeclPtr
        NodePtr;

        FloatDecl ()
        {
          map (typeid (SyntaxTree::FloatDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::FloatDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // LongDecl
      //
      //
      struct LongDecl : Traverser
      {
        typedef
        SyntaxTree::LongDeclPtr
        NodePtr;

        LongDecl ()
        {
          map (typeid (SyntaxTree::LongDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::LongDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // LongDoubleDecl
      //
      //
      struct LongDoubleDecl : Traverser
      {
        typedef
        SyntaxTree::LongDoubleDeclPtr
        NodePtr;

        LongDoubleDecl ()
        {
          map (typeid (SyntaxTree::LongDoubleDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::LongDoubleDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // LongLongDecl
      //
      //
      struct LongLongDecl : Traverser
      {
        typedef
        SyntaxTree::LongLongDeclPtr
        NodePtr;

        LongLongDecl ()
        {
          map (typeid (SyntaxTree::LongLongDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::LongLongDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // OctetDecl
      //
      //
      struct OctetDecl : Traverser
      {
        typedef
        SyntaxTree::OctetDeclPtr
        NodePtr;

        OctetDecl ()
        {
          map (typeid (SyntaxTree::OctetDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::OctetDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // ShortDecl
      //
      //
      struct ShortDecl : Traverser
      {
        typedef
        SyntaxTree::ShortDeclPtr
        NodePtr;

        ShortDecl ()
        {
          map (typeid (SyntaxTree::ShortDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::ShortDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // StringDecl
      //
      //
      struct StringDecl : Traverser
      {
        typedef
        SyntaxTree::StringDeclPtr
        NodePtr;

        StringDecl ()
        {
          map (typeid (SyntaxTree::StringDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::StringDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // UnsignedLongDecl
      //
      //
      struct UnsignedLongDecl : Traverser
      {
        typedef
        SyntaxTree::UnsignedLongDeclPtr
        NodePtr;

        UnsignedLongDecl ()
        {
          map (typeid (SyntaxTree::UnsignedLongDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::UnsignedLongDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // UnsignedLongLongDecl
      //
      //
      struct UnsignedLongLongDecl : Traverser
      {
        typedef
        SyntaxTree::UnsignedLongLongDeclPtr
        NodePtr;

        UnsignedLongLongDecl ()
        {
          map (typeid (SyntaxTree::UnsignedLongLongDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::UnsignedLongLongDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // UnsignedShortDecl
      //
      //
      struct UnsignedShortDecl : Traverser
      {
        typedef
        SyntaxTree::UnsignedShortDeclPtr
        NodePtr;

        UnsignedShortDecl ()
        {
          map (typeid (SyntaxTree::UnsignedShortDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::UnsignedShortDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // VoidDecl
      //
      //
      struct VoidDecl : Traverser
      {
        typedef
        SyntaxTree::VoidDeclPtr
        NodePtr;

        VoidDecl ()
        {
          map (typeid (SyntaxTree::VoidDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::VoidDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // WcharDecl
      //
      //
      struct WcharDecl : Traverser
      {
        typedef
        SyntaxTree::WcharDeclPtr
        NodePtr;

        WcharDecl ()
        {
          map (typeid (SyntaxTree::WcharDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::WcharDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };


      // WstringDecl
      //
      //
      struct WstringDecl : Traverser
      {
        typedef
        SyntaxTree::WstringDeclPtr
        NodePtr;

        WstringDecl ()
        {
          map (typeid (SyntaxTree::WstringDecl), this);
        }

        virtual bool
        traverse (SyntaxTree::NodePtr const& n)
        {
          traverse (n->dynamic_type<SyntaxTree::WstringDecl> ());
	  return true;
        }

        virtual void
        traverse (NodePtr const& n)
        {
          delegate (n);
        }
      };
    }
  }
}

#endif  // CCF_IDL2_TRAVERSAL_BUILT_IN_HPP
