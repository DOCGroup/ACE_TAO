PLANNED MAJOR CHANGES "SOMETIME IN THE FUTURE" (i.e., exact beta not known)
===========================================================================

. Integrate various Pub/Sub services into CIAO and DAnCE.

. Static Configuration for DAnCE.

. Target Manager implementation.

. Support threading models in NodeApplication, such as thread pools
  and the like.

. Enhance DAnCE to support adding/removing components to/from the
  existing running assembly without shutting down the running appliation.
  This will allow the application developers to evolve their applications
  on the fly without server down time.
  
. Adding support to manage multiple nested assemblies, which will involve
  the work through ExternalReferenceEndPoint idea.
  
. Modify the <Connection> IDL data structure to make it compliant to the
  D&C spec.

PLANNED MAJOR CHANGES FOR CIAO-0.4.8
====================================
 
. Integrate Real-time QoS support to CIAO based on OMG's new
  Deployment and Configuration (D&C) specification. Such effort
  will allow application developers to use real-time CORBA features
  within their CCM appliation through meta-programming (via XML
  metadata). Particularly, we will add support for server-side
  RT policies, including extension for schema, container,
  and NodeApplication.  Configuring client-side (receptacle) policies
  to honor these server policies.

. Modify ciao_preactivate, ciao_postactivate operations to make them
  complaint to the D&C specification. 

. Modify DomainApplicationManager interface to make it separate from the
  DomainApplication interface, hence compliant to the D&C spec.

. Enhanced DAnCE to support deploying multiple assemblies with the same
  set of ExecutionManager and NodeMangers.

USER VISIBLE CHANGES BETWEEN CIAO-0.4.6 and CIAO-0.4.7
======================================================
. Added a component packaging tool to DAnCE. This tool will allow 
  component packagers to create from deployment plan archived 
  packages that wrap up all relevant component properties, 
  descriptors and implementation artifacts.The component packages
  generated from this tool will be distributed to Repository 
  Manager.

. Enhanced DAnCE to allow more than one NodeApplicationManagers within 
  a NodeManager.

. Enhanced DAnCE to support configurable output of debugging information.
  Support for debugging information will be added at the level of both the
  DAnCE/CIAO infrastructure as well as individual component instances.
  Support for tracing of the DAnCE/CIAO infrastructure will also be added.
  Together, these efforts will help developers to understand the execution of
  their component-based applications, as well as allowing customization of
  the amount of debugging information logged

. Added binding component to the Naming Service. A system deployer
  could configure this through XML-based flattened deployment plan
  descriptor. 
  See $CIAO_ROOT/DAnCE/examples/Hello/descriptors/flattened_deploymentplan.cdp
  for details. Currently DAnCE only provides resolving naming service
  reference through multicast, so be sure to initialize the naming service
  with multicast port.

. Added the first cut of the RepositoryManager implementation.

USER VISIBLE CHANGES BETWEEN CIAO-0.4.5 and CIAO-0.4.6
======================================================

. Added support for handle component activation/passivation in D&C
  assemblies.

. Added a test for the tool that converts IDL3 into equivalent IDL2.

. Fixed CIDL compiler bug in code generation for sequence type
  attributes of components.

. Added more examples for CIAO, including a new Quoter example that is
  similar to the one in TAO, as well as GUI-based example.

. Added support for handle component activation/passivation in D&C
  assemblies.

. Added support for deactivating facets/event consumers when component
  is getting deactivated.

. Added support for destroying the component executors, when the
  component is getting deactivated.

USER VISIBLE CHANGES BETWEEN CIAO-0.4.4 and CIAO-0.4.5
======================================================

. Split the previous NodeApplication interface into NodeApplication
  and Container interfaces to allow multi-container NodeApplication
  support. This will be particularly useful to provide an optimized
  CIAO container support for RT-CORBA features.

. Enhanced CIAO to handle dynamic replacement of components. Please
  see an example in $CIAO_ROOT/DAnCE/examples/Swapping

. The Config Handlers have been modified to use XML parsing code
  generated by the XML Schema Compiler (XSC).  Binary releases of XSC can
  currently be found at (http://www.dre.vanderbilt.edu/~boris/xsc), and a
  recent snapshot of the CVS repository can be found at
  (http://www.dre.vanderbilt.edu/~wotte/xsc.tbz2).

  Please direct all XSC inquiries/bug reports to wotte at
  dre.vanderbilt.edu

. Supported initializing attribute values on Component through XML
  tags. Please refer to the $CIAO_ROOT/DAnCE/examples/Hello for
  details, particularly the Hello.cid descriptor file.

. Supported parsing component instance names and using them to generate
  unique component port references, so that multiple instances of the
  same component can be deployed in a single container and the client
  requests could be properly designated to the appropriate ports.

. Enhance CIAO to support establishing connections between derived
  type ports and base type ports. For example, application deployer
  could set up event connections between base event sink port type and
  derived event source port type.

. Enhanced the existing set of DAnCE tools to support flattened
  Deployment Plan based deployment. Please refer an example in
  $CIAO_ROOT/DAnCE/examples/BasicSP/flattened_deploymentplan.cdp
  to see how the flattened deployment plan descriptor is used to
  deploy the BasicSP example.

. Develop regression/performance tests (similar to TAO
  regression/performance tests) that will test/evaluate the
  performance of various features of CIAO.

. Added regression test script to the nightly build for DAnCE example.
  This will make sure DAnCE tools could be ready to use out of
  box in various platforms.

. Improved documentation pages in various places.

. Some bug fixes.

. Added support for reception of eventtypes of a more derived type than
  the type of the event sink. Subscription will succeed if the passed
  event consumer is associated with an eventtype that is an ancestor of
  the published eventtype.

USER VISIBLE CHANGES BETWEEN CIAO-0.4.3 and CIAO-0.4.4
======================================================

. Minor bugfixes.

USER VISIBLE CHANGES BETWEEN CIAO-0.4.2 and CIAO-0.4.3
======================================================

. CIDLC can generate empty executor implementations for a given
  composition, which makes it easier to write executors.  This can be
  trigerred by passing --gen-exec-impl option while invoking CIDLC.

. Generated container code has been refactored into base classes,
  thereby reducing the amount of code generated by CIDLC.

. A new tool for generating equivalent IDL2 declarations from IDL3
  declarations has been added.

. Fixed a problem with DAnCE that prevented ports from getting activated
  properly.

. Added support for eventtype factories within CIDLC.

. DAncE compiles clean and works with VC6 and Borland compilers.

. Fixed compile errors and memory related errors on many platforms.


USER VISIBLE CHANGES BETWEEN CIAO-0.4.1 and CIAO-0.4.2
======================================================

. Overall
  - Support for g++ 3.4.1.
  - Support added for latest HP aCC compiler.

. CCM Deployment and Configuration specification has largely been
  implemented.  The implementation is called "DAnCE", the Deployment
  and Configuration Engine.  For more information about DAnCE, and a
  list of supported features, please refer to
  $CIAO_ROOT/docs/releasenotes/dance.html.

. CIDL compiler
 . Added missing generation of servant code for operations and
   attributes of ancestors of interfaces supported and used as ports.
 . Added missing generation of factory operation(s) from inherited
   home(s).
 . Added support for "uses multiple" in generated code.
 . Fixed bugs in generation of inherited:     [Bug 1800]
        home operations
        attribute operations
        port operations
        home factory operations
        supported operations
  . Added automatic registration of value factories for event
    consumers.
  . Added support for emits-related navigation.
  . Fixed bug with multiple facets that provide the same interface.
  . Implemented get_all_facets() and get_all_consumers() navigation
    methods.

USER VISIBLE CHANGES BETWEEN CIAO-0.4 and CIAO-0.4.1
====================================================

CIAO
----

. Added support for statically configuring an assembly. Please see
  $CIAO_ROOT/docs/static_toc_ciao.html for details.

CIDL:
-----
. Fixed incorrect generation of ACE environment macros in servant glue
  code operations.

. Fixed incorrect code generation in the body of a servant operation
  that delegates to the executor class.

. Added support for attributes in facets and supported
  interfaces.

. Fixed bug in code servant glue code generation when there are
  multiple nested modules in the IDL and/or CIDL files.

. Added missing code generation of enum type names.

. Fixed a bug in the generation of the scoped name of a local variable
  which is a _var of an executor interface for a facet. These types
  are required by the CCM spec to be generated in the same scope as
  the interface that underlies the facet.

. Fixed a bug in the generation of *S.h file includes corresponding to
  IDL files included in the CIDL file.

. Added ACE style Makefiles.

. Added support for bounded strings

MPC
===
. Removed all of the project type specific and unnecessary keywords.

. Changed the defaulting rules for idl files (generated source files
  will be automatically added even if idl files are explicitly
  listed).

. The makefiles generated by the gnuace type are now named GNUmakefile
  instead of Makefile.

. The IDL_Files section is no longer a built-in MPC type.  It is a
  custom build type defined in taoidldefaults.mpb.

. Added support for Borland Makefiles that aren't tied to ACE_wrappers
  (the bmake project type).

. Added wild-cards to the default.rel file.  Now, environment
  variables that end in _ROOT are automatically considered as if they
  were used with the -relative option.

. Added an environment variable,
  MPC_DEPENDENCY_COMBINED_STATIC_LIBRARY, to force MPC to put
  inter-project dependencies in static vc6 and vc71 workspaces.

. Added an html project type (originally by Justin Michel) to aid in
  the debugging of mpc files.

. Added a new keyword, pure_libs, that is put into a project
  unmodified (unlike the libs and lit_libs keywords).

. The behavior obtained through the use of the -hierarchy option is
  now the default for all "make" based project types.  This includes
  borland, bmake, gnuace, make and nmake.

. Added support for referencing workspace files (.mwc) from within
  other workspaces.

. Added an option, -genins, that causes MPC to generate .ins files
  that can be used with prj_install.pl.  This will help users install
  portions of their projects into alternate directories.

. Modified the gnuace workspace output to be based on directory
  recursion instead of having inter-project dependencies built into
  each workspace level GNUmakefile.

. Added a new keyword, dependent, for use within a Define_Custom that
  causes MPC to add a dependency to generated files upon the custom
  command.

. Assignments within a 'specific' section that are not recognized MPC
  keywords are assumed to be template value overrides (similar to
  using the -value_template option).

. Partial support for Visual SlickEdit has been added.

. Various bug fixes and optimizations have been added as well.

USER VISIBLE CHANGES BETWEEN CIAO-0.3.6 and CIAO-0.4
====================================================

. Added Makefiles to build the ciao and tools subdirs by default.

. The suport for the following IDL features have been added to the
  CIDL since the last beta

  - exception (exception declaration and raises() specification)
  - valuetype
  - enum
  - const declaration
  - const expression and literals
  - native
  - home finder
  - oneway operation
  - readonly attribute
  - type declaration inside interfaces, valuetypes
  - union

  CIDL doesn't yet support the following features

  - Complete error detection and recovery
  - Attribute exception specification
  - Array
  - Bounded sequence
  - Fixed type
  - Floating-point and Fixed-point constant expressions & literal.

  though we plan to add this support over the next several months,
  depending on user/sponsor needs.
