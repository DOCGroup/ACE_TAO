// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from 
// be/be_codegen.cpp:611

#ifndef _TAO_IDL_RECEPTACLESS_CPP_
#define _TAO_IDL_RECEPTACLESS_CPP_


#include "ReceptaclesS.h"
#include "tao/PortableServer/Object_Adapter.h"
#include "tao/PortableServer/Operation_Table.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Typecode.h"
#include "tao/DynamicC.h"
#include "tao/CDR.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/PortableInterceptor.h"
#if TAO_HAS_INTERCEPTORS == 1
#include "tao/PortableServer/PICurrent_Guard.h"
#include "tao/PortableServer/ServerRequestInfo.h"
#include "tao/PortableServer/ServerInterceptorAdapter.h"
#include "tao/RequestInfo_Util.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "ace/config-all.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "ReceptaclesS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:64

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:582

#if !defined (_CORBA_ANY__ARG_TRAITS_SS_)
#define _CORBA_ANY__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::Any>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Any,
            CORBA::Any_var,
            CORBA::Any_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_COMPONENTS_NAMELIST__ARG_TRAITS_SS_)
#define _COMPONENTS_NAMELIST__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::NameList>
    : public
        Var_Size_Arg_Traits_T<
            Components::NameList,
            Components::NameList_var,
            Components::NameList_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_COOKIE__ARG_TRAITS_SS_)
#define _COMPONENTS_COOKIE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::Cookie>
    : public
        Object_Arg_Traits_T<
            Components::Cookie *,
            Components::Cookie_var,
            Components::Cookie_out,
            TAO::Value_Traits<Components::Cookie>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTBASE__ARG_TRAITS_SS_)
#define _COMPONENTS_EVENTBASE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::EventBase>
    : public
        Object_Arg_Traits_T<
            Components::EventBase *,
            Components::EventBase_var,
            Components::EventBase_out,
            TAO::Value_Traits<Components::EventBase>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTCONSUMERBASE__ARG_TRAITS_SS_)
#define _COMPONENTS_EVENTCONSUMERBASE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::EventConsumerBase>
    : public
        Object_Arg_Traits_T<
            Components::EventConsumerBase_ptr,
            Components::EventConsumerBase_var,
            Components::EventConsumerBase_out,
            TAO::Objref_Traits<Components::EventConsumerBase>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:537

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_SS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::DefinitionKind>
    : public
        Basic_Arg_Traits_T<
            CORBA::DefinitionKind
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_SS_)
#define _CORBA_CONTAINER__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::Container>
    : public
        Object_Arg_Traits_T<
            CORBA::Container_ptr,
            CORBA::Container_var,
            CORBA::Container_out,
            TAO::Objref_Traits<CORBA::Container>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_SS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::IDLType>
    : public
        Object_Arg_Traits_T<
            CORBA::IDLType_ptr,
            CORBA::IDLType_var,
            CORBA::IDLType_out,
            TAO::Objref_Traits<CORBA::IDLType>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_SS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::InterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceDefSeq,
            CORBA::InterfaceDefSeq_var,
            CORBA::InterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_SS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::ValueDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ValueDef_ptr,
            CORBA::ValueDef_var,
            CORBA::ValueDef_out,
            TAO::Objref_Traits<CORBA::ValueDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_SS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::ValueDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ValueDefSeq,
            CORBA::ValueDefSeq_var,
            CORBA::ValueDefSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_SS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::AbstractInterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::AbstractInterfaceDefSeq,
            CORBA::AbstractInterfaceDefSeq_var,
            CORBA::AbstractInterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_SS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::StructMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::StructMemberSeq,
            CORBA::StructMemberSeq_var,
            CORBA::StructMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_SS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::InitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InitializerSeq,
            CORBA::InitializerSeq_var,
            CORBA::InitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_SS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::ExtInitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExtInitializerSeq,
            CORBA::ExtInitializerSeq_var,
            CORBA::ExtInitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_SS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::UnionMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::UnionMemberSeq,
            CORBA::UnionMemberSeq_var,
            CORBA::UnionMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_SS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<CORBA::EnumMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::EnumMemberSeq,
            CORBA::EnumMemberSeq_var,
            CORBA::EnumMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CCMOBJECT__ARG_TRAITS_SS_)
#define _COMPONENTS_CCMOBJECT__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::CCMObject>
    : public
        Object_Arg_Traits_T<
            Components::CCMObject_ptr,
            Components::CCMObject_var,
            Components::CCMObject_out,
            TAO::Objref_Traits<Components::CCMObject>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONFIGURATOR__ARG_TRAITS_SS_)
#define _COMPONENTS_CONFIGURATOR__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::Configurator>
    : public
        Object_Arg_Traits_T<
            Components::Configurator_ptr,
            Components::Configurator_var,
            Components::Configurator_out,
            TAO::Objref_Traits<Components::Configurator>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_COMPONENTS_CONFIGVALUES__ARG_TRAITS_SS_)
#define _COMPONENTS_CONFIGVALUES__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Components::ConfigValues>
    : public
        Var_Size_Arg_Traits_T<
            Components::ConfigValues,
            Components::ConfigValues_var,
            Components::ConfigValues_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_SECURITY_RIGHTSLIST__ARG_TRAITS_SS_)
#define _SECURITY_RIGHTSLIST__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Security::RightsList>
    : public
        Var_Size_Arg_Traits_T<
            Security::RightsList,
            Security::RightsList_var,
            Security::RightsList_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:537

#if !defined (_SECURITY_RIGHTSCOMBINATOR__ARG_TRAITS_SS_)
#define _SECURITY_RIGHTSCOMBINATOR__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<Security::RightsCombinator>
    : public
        Basic_Arg_Traits_T<
            Security::RightsCombinator
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_RECEPTACLESSINGLE_FOO_INTERFACE__ARG_TRAITS_SS_)
#define _RECEPTACLESSINGLE_FOO_INTERFACE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesSingle::foo_interface>
    : public
        Object_Arg_Traits_T<
            ReceptaclesSingle::foo_interface_ptr,
            ReceptaclesSingle::foo_interface_var,
            ReceptaclesSingle::foo_interface_out,
            TAO::Objref_Traits<ReceptaclesSingle::foo_interface>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_RECEPTACLESSINGLE_BAR_INTERFACE__ARG_TRAITS_SS_)
#define _RECEPTACLESSINGLE_BAR_INTERFACE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesSingle::bar_interface>
    : public
        Object_Arg_Traits_T<
            ReceptaclesSingle::bar_interface_ptr,
            ReceptaclesSingle::bar_interface_var,
            ReceptaclesSingle::bar_interface_out,
            TAO::Objref_Traits<ReceptaclesSingle::bar_interface>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_RECEPTACLESMULTIPLE_FOO_INTERFACE__ARG_TRAITS_SS_)
#define _RECEPTACLESMULTIPLE_FOO_INTERFACE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesMultiple::foo_interface>
    : public
        Object_Arg_Traits_T<
            ReceptaclesMultiple::foo_interface_ptr,
            ReceptaclesMultiple::foo_interface_var,
            ReceptaclesMultiple::foo_interface_out,
            TAO::Objref_Traits<ReceptaclesMultiple::foo_interface>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_RECEPTACLESMULTIPLE_BAR_INTERFACE__ARG_TRAITS_SS_)
#define _RECEPTACLESMULTIPLE_BAR_INTERFACE__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesMultiple::bar_interface>
    : public
        Object_Arg_Traits_T<
            ReceptaclesMultiple::bar_interface_ptr,
            ReceptaclesMultiple::bar_interface_var,
            ReceptaclesMultiple::bar_interface_out,
            TAO::Objref_Traits<ReceptaclesMultiple::bar_interface>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_RECEPTACLESMULTIPLE_FOO_FOOCONNECTIONS__ARG_TRAITS_SS_)
#define _RECEPTACLESMULTIPLE_FOO_FOOCONNECTIONS__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesMultiple::Foo::fooConnections>
    : public
        Var_Size_Arg_Traits_T<
            ReceptaclesMultiple::Foo::fooConnections,
            ReceptaclesMultiple::Foo::fooConnections_var,
            ReceptaclesMultiple::Foo::fooConnections_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_RECEPTACLESMULTIPLE_BAR_BARCONNECTIONS__ARG_TRAITS_SS_)
#define _RECEPTACLESMULTIPLE_BAR_BARCONNECTIONS__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesMultiple::Bar::barConnections>
    : public
        Var_Size_Arg_Traits_T<
            ReceptaclesMultiple::Bar::barConnections,
            ReceptaclesMultiple::Bar::barConnections_var,
            ReceptaclesMultiple::Bar::barConnections_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:379

#if !defined (_RECEPTACLESMULTIPLE_OBJECTFOO_FOOCONNECTIONS__ARG_TRAITS_SS_)
#define _RECEPTACLESMULTIPLE_OBJECTFOO_FOOCONNECTIONS__ARG_TRAITS_SS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class RECEPTACLES_STUB_Export Arg_Traits<ReceptaclesMultiple::ObjectFoo::fooConnections>
    : public
        Var_Size_Arg_Traits_T<
            ReceptaclesMultiple::ObjectFoo::fooConnections,
            ReceptaclesMultiple::ObjectFoo::fooConnections_var,
            ReceptaclesMultiple::ObjectFoo::fooConnections_out
          >
  {
  };

#endif /* end #if !defined */
}


// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesSingle_foo_interface_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesSingle_foo_interface_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesSingle_foo_interface_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14,  1, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14,  0, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,
#else
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14,  0, 14,  0, 14, 14,
     14,  1, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,  0, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesSingle_foo_interface_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 4,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 13,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 13,
      HASH_VALUE_RANGE = 9,
      DUPLICATES = 0,
      WORDLIST_SIZE = 9
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesSingle::foo_interface::_is_a_skel, 0, 0},
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_component", &POA_ReceptaclesSingle::foo_interface::_component_skel, 0, 0},
      {"_interface", &POA_ReceptaclesSingle::foo_interface::_interface_skel, 0, 0},
      {"",0,0,0},
      {"_non_existent", &POA_ReceptaclesSingle::foo_interface::_non_existent_skel, 0, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname_;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ReceptaclesSingle_foo_interface_Perfect_Hash_OpTable tao_ReceptaclesSingle_foo_interface_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker *
POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker::the_TAO_foo_interface_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker::_TAO_foo_interface_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker::~_TAO_foo_interface_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesSingle::_TAO_foo_interface_Strategized_Proxy_Broker::the_TAO_foo_interface_Strategized_Proxy_Broker ();
}

int
ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesSingle::_TAO_foo_interface_ThruPOA_Proxy_Impl::_TAO_foo_interface_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesSingle::foo_interface::foo_interface (void)
{
  this->optable_ = &tao_ReceptaclesSingle_foo_interface_optable;
}

POA_ReceptaclesSingle::foo_interface::foo_interface (const foo_interface& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ReceptaclesSingle::foo_interface::~foo_interface (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesSingle::foo_interface::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesSingle::foo_interface *_tao_impl =
    (POA_ReceptaclesSingle::foo_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::foo_interface::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::foo_interface *_tao_impl =
    (POA_ReceptaclesSingle::foo_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::foo_interface::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesSingle::foo_interface *_tao_impl =
    (POA_ReceptaclesSingle::foo_interface *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::foo_interface::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::foo_interface *_tao_impl =
    (POA_ReceptaclesSingle::foo_interface *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesSingle::foo_interface::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/foo_interface:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesSingle::foo_interface::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/foo_interface:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::foo_interface_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesSingle::foo_interface::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesSingle/foo_interface:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesSingle::foo_interface::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesSingle::foo_interface *
POA_ReceptaclesSingle::foo_interface::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesSingle::foo_interface STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesSingle__TAO_foo_interface_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesSingle_bar_interface_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesSingle_bar_interface_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesSingle_bar_interface_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14,  1, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14,  0, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,
#else
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14,  0, 14,  0, 14, 14,
     14,  1, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,  0, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesSingle_bar_interface_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 4,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 13,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 13,
      HASH_VALUE_RANGE = 9,
      DUPLICATES = 0,
      WORDLIST_SIZE = 9
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesSingle::bar_interface::_is_a_skel, 0, 0},
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_component", &POA_ReceptaclesSingle::bar_interface::_component_skel, 0, 0},
      {"_interface", &POA_ReceptaclesSingle::bar_interface::_interface_skel, 0, 0},
      {"",0,0,0},
      {"_non_existent", &POA_ReceptaclesSingle::bar_interface::_non_existent_skel, 0, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname_;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ReceptaclesSingle_bar_interface_Perfect_Hash_OpTable tao_ReceptaclesSingle_bar_interface_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker *
POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker::the_TAO_bar_interface_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker::_TAO_bar_interface_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker::~_TAO_bar_interface_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesSingle::_TAO_bar_interface_Strategized_Proxy_Broker::the_TAO_bar_interface_Strategized_Proxy_Broker ();
}

int
ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesSingle::_TAO_bar_interface_ThruPOA_Proxy_Impl::_TAO_bar_interface_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesSingle::bar_interface::bar_interface (void)
{
  this->optable_ = &tao_ReceptaclesSingle_bar_interface_optable;
}

POA_ReceptaclesSingle::bar_interface::bar_interface (const bar_interface& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ReceptaclesSingle::bar_interface::~bar_interface (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesSingle::bar_interface::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesSingle::bar_interface *_tao_impl =
    (POA_ReceptaclesSingle::bar_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::bar_interface::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::bar_interface *_tao_impl =
    (POA_ReceptaclesSingle::bar_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::bar_interface::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesSingle::bar_interface *_tao_impl =
    (POA_ReceptaclesSingle::bar_interface *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::bar_interface::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::bar_interface *_tao_impl =
    (POA_ReceptaclesSingle::bar_interface *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesSingle::bar_interface::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/bar_interface:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesSingle::bar_interface::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/bar_interface:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::bar_interface_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesSingle::bar_interface::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesSingle/bar_interface:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesSingle::bar_interface::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesSingle::bar_interface *
POA_ReceptaclesSingle::bar_interface::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesSingle::bar_interface STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesSingle__TAO_bar_interface_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesSingle_Foo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesSingle_Foo_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesSingle_Foo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62,  0,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62,  0,
     62, 15,  5,  0,  5,  0, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     15,  5, 62, 30, 62, 62, 62, 62, 62, 62,
     62, 62,  0, 25,  0, 62, 62, 62, 10, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62,
#else
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62,  0, 62,  0, 62, 15,
      5,  0,  5,  0, 62, 62, 62, 62, 62, 62,
     62, 15,  5, 62, 30,  0, 25,  0, 62, 62,
     62, 10, 62, 62, 62, 62, 62, 62,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesSingle_Foo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 36,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 61,
      HASH_VALUE_RANGE = 57,
      DUPLICATES = 4,
      WORDLIST_SIZE = 41
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesSingle::Foo::_is_a_skel, 0, 0},
      {"subscribe", &POA_ReceptaclesSingle::Foo::subscribe_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::subscribe, 0},
      {"_interface", &POA_ReceptaclesSingle::Foo::_interface_skel, 0, 0},
      {"unsubscribe", &POA_ReceptaclesSingle::Foo::unsubscribe_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::unsubscribe, 0},
      {"get_ccm_home", &POA_ReceptaclesSingle::Foo::get_ccm_home_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_ccm_home, 0},
      {"get_all_ports", &POA_ReceptaclesSingle::Foo::get_all_ports_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_ports, 0},
      {"get_all_facets", &POA_ReceptaclesSingle::Foo::get_all_facets_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_facets, 0},
      {"get_connections", &POA_ReceptaclesSingle::Foo::get_connections_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_connections, 0},
      {"get_named_facets", &POA_ReceptaclesSingle::Foo::get_named_facets_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_facets, 0},
      {"get_all_emitters", &POA_ReceptaclesSingle::Foo::get_all_emitters_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_emitters, 0},
      {"get_all_consumers", &POA_ReceptaclesSingle::Foo::get_all_consumers_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_consumers, 0},
      {"get_named_emitters", &POA_ReceptaclesSingle::Foo::get_named_emitters_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_emitters, 0},
      {"get_all_publishers", &POA_ReceptaclesSingle::Foo::get_all_publishers_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_publishers, 0},
      {"get_all_receptacles", &POA_ReceptaclesSingle::Foo::get_all_receptacles_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_receptacles, 0},
      {"get_named_consumers", &POA_ReceptaclesSingle::Foo::get_named_consumers_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_consumers, 0},
      {"get_named_publishers", &POA_ReceptaclesSingle::Foo::get_named_publishers_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_publishers, 0},
      {"get_named_receptacles", &POA_ReceptaclesSingle::Foo::get_named_receptacles_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_receptacles, 0},
      {"get_component_def", &POA_ReceptaclesSingle::Foo::get_component_def_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_component_def, 0},
      {"get_primary_key", &POA_ReceptaclesSingle::Foo::get_primary_key_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_primary_key, 0},
      {"ciao_activate", &POA_ReceptaclesSingle::Foo::ciao_activate_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::ciao_activate, 0},
      {"ciao_preactivate", &POA_ReceptaclesSingle::Foo::ciao_preactivate_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::ciao_preactivate, 0},
      {"ciao_postactivate", &POA_ReceptaclesSingle::Foo::ciao_postactivate_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::ciao_postactivate, 0},
      {"get_connection_foo", &POA_ReceptaclesSingle::Foo::get_connection_foo_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_connection_foo, 0},
      {"disconnect_foo", &POA_ReceptaclesSingle::Foo::disconnect_foo_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect_foo, 0},
      {"_component", &POA_ReceptaclesSingle::Foo::_component_skel, 0, 0},
      {"remove", &POA_ReceptaclesSingle::Foo::remove_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::remove, 0},
      {"configuration_complete", &POA_ReceptaclesSingle::Foo::configuration_complete_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::configuration_complete, 0},
      {"_non_existent", &POA_ReceptaclesSingle::Foo::_non_existent_skel, 0, 0},
      {"same_component", &POA_ReceptaclesSingle::Foo::same_component_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::same_component, 0},
      {"disconnect", &POA_ReceptaclesSingle::Foo::disconnect_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect, 0},
      {"connect_foo", &POA_ReceptaclesSingle::Foo::connect_foo_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::connect_foo, 0},
      {"get_consumer", &POA_ReceptaclesSingle::Foo::get_consumer_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_consumer, 0},
      {"provide_facet", &POA_ReceptaclesSingle::Foo::provide_facet_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::provide_facet, 0},
      {"connect", &POA_ReceptaclesSingle::Foo::connect_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::connect, 0},
      {"disconnect_consumer", &POA_ReceptaclesSingle::Foo::disconnect_consumer_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect_consumer, 0},
      {"connect_consumer", &POA_ReceptaclesSingle::Foo::connect_consumer_skel, &POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::connect_consumer, 0},
    };

  static const signed char lookup[] =
    {
       -1, -13,  -2, -16,  -2,   5,  -1, -18,  -2,   6,   7,   8,   9,  10, 
       11,  12, -76,  15, -76, -73,  20,  21,  22,  -1,  -1,  23,  -1,  -1, 
       24,  -1,  -1,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35, 
       36,  37,  -1,  -1,  -1,  38,  -1,  -1,  -1,  -1,  -1,  -1,  39,  -1, 
       -1,  -1,  -1,  -1,  -1,  40, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname_;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_ReceptaclesSingle_Foo_Perfect_Hash_OpTable tao_ReceptaclesSingle_Foo_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::Foo *tao_impl,
      ::ReceptaclesSingle::foo_interface_ptr conxn
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
private:
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo &
    );
  
private:
  POA_ReceptaclesSingle::Foo *_tao_impl;
  
  ::ReceptaclesSingle::foo_interface_ptr conxn_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo::TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::Foo *tao_impl,
    ::ReceptaclesSingle::foo_interface_ptr conxn
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    conxn_ (conxn)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<=  this->conxn_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_Foo_connect_foo_exceptiondata[] = 
  {
    Components::_tc_AlreadyConnected,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_Foo_connect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::Foo *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::foo_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo &
    );
  
private:
  POA_ReceptaclesSingle::Foo *_tao_impl;
  
  ::ReceptaclesSingle::foo_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::Foo *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_Foo_disconnect_foo_exceptiondata[] = 
  {
    Components::_tc_NoConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_Foo_disconnect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo::result (::ReceptaclesSingle::foo_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::Foo *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::foo_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo &
    );
  
private:
  POA_ReceptaclesSingle::Foo *_tao_impl;
  
  ::ReceptaclesSingle::foo_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::Foo *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo::result (::ReceptaclesSingle::foo_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker *
POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker::the_TAO_Foo_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker::_TAO_Foo_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker::~_TAO_Foo_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesSingle::_TAO_Foo_Strategized_Proxy_Broker::the_TAO_Foo_Strategized_Proxy_Broker ();
}

int
ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesSingle__TAO_Foo_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::_TAO_Foo_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::connect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::AlreadyConnected,
    ::Components::InvalidConnection
  ))
{
  reinterpret_cast<
      POA_ReceptaclesSingle::Foo_ptr> (
      servant->_downcast (
          "IDL:ReceptaclesSingle/Foo:1.0"
        )
    )->connect_foo (
        ((TAO::Arg_Traits< ::ReceptaclesSingle::foo_interface>::in_arg_val *) args[1])->arg ()
        ACE_ENV_ARG_PARAMETER
      );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::NoConnection
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::foo_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::Foo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/Foo:1.0"
          )
      )->disconnect_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_Foo_ThruPOA_Proxy_Impl::get_connection_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::foo_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::Foo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/Foo:1.0"
          )
      )->get_connection_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesSingle::Foo::Foo (void)
{
  this->optable_ = &tao_ReceptaclesSingle_Foo_optable;
}

POA_ReceptaclesSingle::Foo::Foo (const Foo& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_Components, Navigation) (rhs),
    ACE_NESTED_CLASS (POA_Components, Receptacles) (rhs),
    ACE_NESTED_CLASS (POA_Components, Events) (rhs),
    ACE_NESTED_CLASS (POA_Components, CCMObject) (rhs)
{
}

POA_ReceptaclesSingle::Foo::~Foo (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::Foo::connect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesSingle::Foo *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::Foo *> (
        _tao_servant
      );
  _tao_server_request.argument_flag (0);
  
  ::ReceptaclesSingle::foo_interface_var conxn;
  
  if (!(
      (_tao_in >> conxn.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_connect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      conxn.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            
              _tao_impl->connect_foo (
                  conxn.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::Foo::disconnect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Foo *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::Foo *> (
        _tao_servant
      );
  ::ReceptaclesSingle::foo_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_disconnect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::foo_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::Foo::get_connection_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Foo *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::Foo *> (
        _tao_servant
      );
  ::ReceptaclesSingle::foo_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_Foo_get_connection_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connection_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::foo_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesSingle::Foo::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesSingle::Foo *_tao_impl =
    (POA_ReceptaclesSingle::Foo *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::Foo::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Foo *_tao_impl =
    (POA_ReceptaclesSingle::Foo *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::Foo::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesSingle::Foo *_tao_impl =
    (POA_ReceptaclesSingle::Foo *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::Foo::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Foo *_tao_impl =
    (POA_ReceptaclesSingle::Foo *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesSingle::Foo::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Navigation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Receptacles:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Events:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/Foo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesSingle::Foo::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Navigation:1.0") == 0)
    {
      return static_cast<POA_Components::Navigation_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Receptacles:1.0") == 0)
    {
      return static_cast<POA_Components::Receptacles_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Events:1.0") == 0)
    {
      return static_cast<POA_Components::Events_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/CCMObject:1.0") == 0)
    {
      return static_cast<POA_Components::CCMObject_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/Foo:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::Foo_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesSingle::Foo::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesSingle/Foo:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesSingle::Foo::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesSingle::Foo *
POA_ReceptaclesSingle::Foo::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesSingle::Foo STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesSingle__TAO_Foo_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesSingle_Bar_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesSingle_Bar_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesSingle_Bar_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24,  0,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24,  0,
     24,  0,  0,  5, 24,  0, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
      5, 24, 24,  0, 24, 24, 24, 24, 24, 24,
     24, 24, 24,  0, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24,
#else
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24,  0, 24,  0, 24,  0,
      0,  5, 24,  0, 24, 24, 24, 24, 24, 24,
     24,  5, 24, 24,  0, 24,  0, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesSingle_Bar_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 10,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 18,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 23,
      HASH_VALUE_RANGE = 19,
      DUPLICATES = 0,
      WORDLIST_SIZE = 15
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesSingle::Bar::_is_a_skel, 0, 0},
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_component", &POA_ReceptaclesSingle::Bar::_component_skel, 0, 0},
      {"connect_bar", &POA_ReceptaclesSingle::Bar::connect_bar_skel, &POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::connect_bar, 0},
      {"",0,0,0},
      {"_non_existent", &POA_ReceptaclesSingle::Bar::_non_existent_skel, 0, 0},
      {"disconnect_bar", &POA_ReceptaclesSingle::Bar::disconnect_bar_skel, &POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect_bar, 0},
      {"_interface", &POA_ReceptaclesSingle::Bar::_interface_skel, 0, 0},
      {"connect_foo", &POA_ReceptaclesSingle::Bar::connect_foo_skel, &POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::connect_foo, 0},
      {"",0,0,0},
      {"get_connection_bar", &POA_ReceptaclesSingle::Bar::get_connection_bar_skel, &POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::get_connection_bar, 0},
      {"disconnect_foo", &POA_ReceptaclesSingle::Bar::disconnect_foo_skel, &POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect_foo, 0},
      {"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"get_connection_foo", &POA_ReceptaclesSingle::Bar::get_connection_foo_skel, &POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::get_connection_foo, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname_;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ReceptaclesSingle_Bar_Perfect_Hash_OpTable tao_ReceptaclesSingle_Bar_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::Bar *tao_impl,
      ::ReceptaclesSingle::bar_interface_ptr conxn
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
private:
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar &
    );
  
private:
  POA_ReceptaclesSingle::Bar *_tao_impl;
  
  ::ReceptaclesSingle::bar_interface_ptr conxn_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar::TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::Bar *tao_impl,
    ::ReceptaclesSingle::bar_interface_ptr conxn
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    conxn_ (conxn)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<=  this->conxn_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_Bar_connect_bar_exceptiondata[] = 
  {
    Components::_tc_AlreadyConnected,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_Bar_connect_bar_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::Bar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::bar_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar &
    );
  
private:
  POA_ReceptaclesSingle::Bar *_tao_impl;
  
  ::ReceptaclesSingle::bar_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::Bar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_Bar_disconnect_bar_exceptiondata[] = 
  {
    Components::_tc_NoConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_Bar_disconnect_bar_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar::result (::ReceptaclesSingle::bar_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::Bar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::bar_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar &
    );
  
private:
  POA_ReceptaclesSingle::Bar *_tao_impl;
  
  ::ReceptaclesSingle::bar_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::Bar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar::result (::ReceptaclesSingle::bar_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker *
POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker::the_TAO_Bar_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker::_TAO_Bar_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker::~_TAO_Bar_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesSingle::_TAO_Bar_Strategized_Proxy_Broker::the_TAO_Bar_Strategized_Proxy_Broker ();
}

int
ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesSingle__TAO_Bar_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::_TAO_Bar_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::connect_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::AlreadyConnected,
    ::Components::InvalidConnection
  ))
{
  reinterpret_cast<
      POA_ReceptaclesSingle::Bar_ptr> (
      servant->_downcast (
          "IDL:ReceptaclesSingle/Bar:1.0"
        )
    )->connect_bar (
        ((TAO::Arg_Traits< ::ReceptaclesSingle::bar_interface>::in_arg_val *) args[1])->arg ()
        ACE_ENV_ARG_PARAMETER
      );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::NoConnection
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::bar_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::Bar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/Bar:1.0"
          )
      )->disconnect_bar (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_Bar_ThruPOA_Proxy_Impl::get_connection_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::bar_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::Bar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/Bar:1.0"
          )
      )->get_connection_bar (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesSingle::Bar::Bar (void)
{
  this->optable_ = &tao_ReceptaclesSingle_Bar_optable;
}

POA_ReceptaclesSingle::Bar::Bar (const Bar& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_ReceptaclesSingle, Foo) (rhs)
{
}

POA_ReceptaclesSingle::Bar::~Bar (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::Bar::connect_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesSingle::Bar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::Bar *> (
        _tao_servant
      );
  _tao_server_request.argument_flag (0);
  
  ::ReceptaclesSingle::bar_interface_var conxn;
  
  if (!(
      (_tao_in >> conxn.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_connect_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      conxn.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            
              _tao_impl->connect_bar (
                  conxn.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::Bar::disconnect_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Bar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::Bar *> (
        _tao_servant
      );
  ::ReceptaclesSingle::bar_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_disconnect_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_bar (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::bar_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::Bar::get_connection_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Bar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::Bar *> (
        _tao_servant
      );
  ::ReceptaclesSingle::bar_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_Bar_get_connection_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connection_bar (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::bar_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesSingle::Bar::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesSingle::Bar *_tao_impl =
    (POA_ReceptaclesSingle::Bar *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::Bar::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Bar *_tao_impl =
    (POA_ReceptaclesSingle::Bar *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::Bar::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesSingle::Bar *_tao_impl =
    (POA_ReceptaclesSingle::Bar *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::Bar::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::Bar *_tao_impl =
    (POA_ReceptaclesSingle::Bar *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesSingle::Bar::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/Foo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/Bar:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesSingle::Bar::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/Foo:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::Foo_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/Bar:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::Bar_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesSingle::Bar::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesSingle/Bar:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesSingle::Bar::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesSingle::Bar *
POA_ReceptaclesSingle::Bar::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesSingle::Bar STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesSingle__TAO_Bar_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesSingle_FooBar_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesSingle_FooBar_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesSingle_FooBar_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 20,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 15,
     62, 15,  0,  0,  5,  0, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     15,  0, 62, 30, 62, 62, 62, 62, 62, 62,
     62, 62,  0, 25,  0, 62, 62, 62, 10, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62,
#else
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 20, 62, 15, 62, 15,
      0,  0,  5,  0, 62, 62, 62, 62, 62, 62,
     62, 15,  0, 62, 30,  0, 25,  0, 62, 62,
     62, 10, 62, 62, 62, 62, 62, 62,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesSingle_FooBar_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 39,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 9,
      MAX_HASH_VALUE = 61,
      HASH_VALUE_RANGE = 53,
      DUPLICATES = 4,
      WORDLIST_SIZE = 48
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
            {"subscribe", &POA_ReceptaclesSingle::FooBar::subscribe_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::subscribe, 0},
      {"unsubscribe", &POA_ReceptaclesSingle::FooBar::unsubscribe_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::unsubscribe, 0},
      {"get_ccm_home", &POA_ReceptaclesSingle::FooBar::get_ccm_home_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_ccm_home, 0},
      {"get_all_ports", &POA_ReceptaclesSingle::FooBar::get_all_ports_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_all_ports, 0},
      {"get_all_facets", &POA_ReceptaclesSingle::FooBar::get_all_facets_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_all_facets, 0},
      {"get_connections", &POA_ReceptaclesSingle::FooBar::get_connections_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_connections, 0},
      {"get_named_facets", &POA_ReceptaclesSingle::FooBar::get_named_facets_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_named_facets, 0},
      {"get_all_emitters", &POA_ReceptaclesSingle::FooBar::get_all_emitters_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_all_emitters, 0},
      {"get_all_consumers", &POA_ReceptaclesSingle::FooBar::get_all_consumers_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_all_consumers, 0},
      {"get_named_emitters", &POA_ReceptaclesSingle::FooBar::get_named_emitters_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_named_emitters, 0},
      {"get_all_publishers", &POA_ReceptaclesSingle::FooBar::get_all_publishers_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_all_publishers, 0},
      {"get_all_receptacles", &POA_ReceptaclesSingle::FooBar::get_all_receptacles_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_all_receptacles, 0},
      {"get_named_consumers", &POA_ReceptaclesSingle::FooBar::get_named_consumers_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_named_consumers, 0},
      {"get_named_publishers", &POA_ReceptaclesSingle::FooBar::get_named_publishers_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_named_publishers, 0},
      {"get_named_receptacles", &POA_ReceptaclesSingle::FooBar::get_named_receptacles_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_named_receptacles, 0},
      {"get_component_def", &POA_ReceptaclesSingle::FooBar::get_component_def_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_component_def, 0},
      {"get_primary_key", &POA_ReceptaclesSingle::FooBar::get_primary_key_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_primary_key, 0},
      {"ciao_activate", &POA_ReceptaclesSingle::FooBar::ciao_activate_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::ciao_activate, 0},
      {"disconnect_foo", &POA_ReceptaclesSingle::FooBar::disconnect_foo_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::disconnect_foo, 0},
      {"_interface", &POA_ReceptaclesSingle::FooBar::_interface_skel, 0, 0},
      {"ciao_preactivate", &POA_ReceptaclesSingle::FooBar::ciao_preactivate_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::ciao_preactivate, 0},
      {"ciao_postactivate", &POA_ReceptaclesSingle::FooBar::ciao_postactivate_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::ciao_postactivate, 0},
      {"get_connection_foo", &POA_ReceptaclesSingle::FooBar::get_connection_foo_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_connection_foo, 0},
      {"disconnect", &POA_ReceptaclesSingle::FooBar::disconnect_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::disconnect, 0},
      {"remove", &POA_ReceptaclesSingle::FooBar::remove_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::remove, 0},
      {"configuration_complete", &POA_ReceptaclesSingle::FooBar::configuration_complete_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::configuration_complete, 0},
      {"provide_facet", &POA_ReceptaclesSingle::FooBar::provide_facet_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::provide_facet, 0},
      {"same_component", &POA_ReceptaclesSingle::FooBar::same_component_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::same_component, 0},
      {"_is_a", &POA_ReceptaclesSingle::FooBar::_is_a_skel, 0, 0},
      {"connect_foo", &POA_ReceptaclesSingle::FooBar::connect_foo_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::connect_foo, 0},
      {"get_consumer", &POA_ReceptaclesSingle::FooBar::get_consumer_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_consumer, 0},
      {"disconnect_bar", &POA_ReceptaclesSingle::FooBar::disconnect_bar_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::disconnect_bar, 0},
      {"connect", &POA_ReceptaclesSingle::FooBar::connect_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::connect, 0},
      {"get_connection_bar", &POA_ReceptaclesSingle::FooBar::get_connection_bar_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_connection_bar, 0},
      {"disconnect_consumer", &POA_ReceptaclesSingle::FooBar::disconnect_consumer_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::disconnect_consumer, 0},
      {"_component", &POA_ReceptaclesSingle::FooBar::_component_skel, 0, 0},
      {"connect_bar", &POA_ReceptaclesSingle::FooBar::connect_bar_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::connect_bar, 0},
      {"_non_existent", &POA_ReceptaclesSingle::FooBar::_non_existent_skel, 0, 0},
      {"connect_consumer", &POA_ReceptaclesSingle::FooBar::connect_consumer_skel, &POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::connect_consumer, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1, -15,  -2, -18,  -2, -20,  -2,   9,  -1,  10,  11,  12, 
       13,  14, -74,  17, -74, -73,  22,  23,  24,  -1,  -1,  25,  -1,  -1, 
       26,  27,  28,  29,  30,  31,  -1,  32,  33,  34,  35,  36,  37,  38, 
       39,  -1,  40,  -1,  -1,  41,  42,  43,  -1,  -1,  -1,  -1,  -1,  44, 
       45,  -1,  46,  -1,  -1,  47, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname_;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_ReceptaclesSingle_FooBar_Perfect_Hash_OpTable tao_ReceptaclesSingle_FooBar_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::FooBar *tao_impl,
      ::ReceptaclesSingle::foo_interface_ptr conxn
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
private:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo &
    );
  
private:
  POA_ReceptaclesSingle::FooBar *_tao_impl;
  
  ::ReceptaclesSingle::foo_interface_ptr conxn_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo::TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::FooBar *tao_impl,
    ::ReceptaclesSingle::foo_interface_ptr conxn
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    conxn_ (conxn)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<=  this->conxn_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_FooBar_connect_foo_exceptiondata[] = 
  {
    Components::_tc_AlreadyConnected,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_FooBar_connect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::FooBar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::foo_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo &
    );
  
private:
  POA_ReceptaclesSingle::FooBar *_tao_impl;
  
  ::ReceptaclesSingle::foo_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::FooBar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_FooBar_disconnect_foo_exceptiondata[] = 
  {
    Components::_tc_NoConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_FooBar_disconnect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo::result (::ReceptaclesSingle::foo_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::FooBar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::foo_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo &
    );
  
private:
  POA_ReceptaclesSingle::FooBar *_tao_impl;
  
  ::ReceptaclesSingle::foo_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::FooBar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo::result (::ReceptaclesSingle::foo_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::FooBar *tao_impl,
      ::ReceptaclesSingle::bar_interface_ptr conxn
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
private:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar &
    );
  
private:
  POA_ReceptaclesSingle::FooBar *_tao_impl;
  
  ::ReceptaclesSingle::bar_interface_ptr conxn_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar::TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::FooBar *tao_impl,
    ::ReceptaclesSingle::bar_interface_ptr conxn
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    conxn_ (conxn)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<=  this->conxn_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_FooBar_connect_bar_exceptiondata[] = 
  {
    Components::_tc_AlreadyConnected,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_FooBar_connect_bar_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::FooBar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::bar_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar &
    );
  
private:
  POA_ReceptaclesSingle::FooBar *_tao_impl;
  
  ::ReceptaclesSingle::bar_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::FooBar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_FooBar_disconnect_bar_exceptiondata[] = 
  {
    Components::_tc_NoConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_FooBar_disconnect_bar_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar::result (::ReceptaclesSingle::bar_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::FooBar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesSingle::bar_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar &
    );
  
private:
  POA_ReceptaclesSingle::FooBar *_tao_impl;
  
  ::ReceptaclesSingle::bar_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::FooBar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar::result (::ReceptaclesSingle::bar_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker *
POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker::the_TAO_FooBar_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker::_TAO_FooBar_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker::~_TAO_FooBar_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesSingle::_TAO_FooBar_Strategized_Proxy_Broker::the_TAO_FooBar_Strategized_Proxy_Broker ();
}

int
ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::_TAO_FooBar_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::connect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::AlreadyConnected,
    ::Components::InvalidConnection
  ))
{
  reinterpret_cast<
      POA_ReceptaclesSingle::FooBar_ptr> (
      servant->_downcast (
          "IDL:ReceptaclesSingle/FooBar:1.0"
        )
    )->connect_foo (
        ((TAO::Arg_Traits< ::ReceptaclesSingle::foo_interface>::in_arg_val *) args[1])->arg ()
        ACE_ENV_ARG_PARAMETER
      );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::disconnect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::NoConnection
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::foo_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::FooBar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/FooBar:1.0"
          )
      )->disconnect_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_connection_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::foo_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::FooBar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/FooBar:1.0"
          )
      )->get_connection_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::connect_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::AlreadyConnected,
    ::Components::InvalidConnection
  ))
{
  reinterpret_cast<
      POA_ReceptaclesSingle::FooBar_ptr> (
      servant->_downcast (
          "IDL:ReceptaclesSingle/FooBar:1.0"
        )
    )->connect_bar (
        ((TAO::Arg_Traits< ::ReceptaclesSingle::bar_interface>::in_arg_val *) args[1])->arg ()
        ACE_ENV_ARG_PARAMETER
      );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::disconnect_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::NoConnection
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::bar_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::FooBar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/FooBar:1.0"
          )
      )->disconnect_bar (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_FooBar_ThruPOA_Proxy_Impl::get_connection_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesSingle::bar_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::FooBar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/FooBar:1.0"
          )
      )->get_connection_bar (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesSingle::FooBar::FooBar (void)
{
  this->optable_ = &tao_ReceptaclesSingle_FooBar_optable;
}

POA_ReceptaclesSingle::FooBar::FooBar (const FooBar& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_Components, Navigation) (rhs),
    ACE_NESTED_CLASS (POA_Components, Receptacles) (rhs),
    ACE_NESTED_CLASS (POA_Components, Events) (rhs),
    ACE_NESTED_CLASS (POA_Components, CCMObject) (rhs)
{
}

POA_ReceptaclesSingle::FooBar::~FooBar (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::FooBar::connect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesSingle::FooBar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::FooBar *> (
        _tao_servant
      );
  _tao_server_request.argument_flag (0);
  
  ::ReceptaclesSingle::foo_interface_var conxn;
  
  if (!(
      (_tao_in >> conxn.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      conxn.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            
              _tao_impl->connect_foo (
                  conxn.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::FooBar::disconnect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::FooBar *> (
        _tao_servant
      );
  ::ReceptaclesSingle::foo_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::foo_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::FooBar::get_connection_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::FooBar *> (
        _tao_servant
      );
  ::ReceptaclesSingle::foo_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connection_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::foo_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::FooBar::connect_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesSingle::FooBar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::FooBar *> (
        _tao_servant
      );
  _tao_server_request.argument_flag (0);
  
  ::ReceptaclesSingle::bar_interface_var conxn;
  
  if (!(
      (_tao_in >> conxn.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_connect_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      conxn.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            
              _tao_impl->connect_bar (
                  conxn.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::FooBar::disconnect_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::FooBar *> (
        _tao_servant
      );
  ::ReceptaclesSingle::bar_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_disconnect_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_bar (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::bar_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::FooBar::get_connection_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::FooBar *> (
        _tao_servant
      );
  ::ReceptaclesSingle::bar_interface_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_FooBar_get_connection_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connection_bar (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesSingle::bar_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesSingle::FooBar::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    (POA_ReceptaclesSingle::FooBar *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::FooBar::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    (POA_ReceptaclesSingle::FooBar *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::FooBar::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    (POA_ReceptaclesSingle::FooBar *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::FooBar::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::FooBar *_tao_impl =
    (POA_ReceptaclesSingle::FooBar *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesSingle::FooBar::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Navigation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Receptacles:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Events:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/FooBar:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesSingle::FooBar::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Navigation:1.0") == 0)
    {
      return static_cast<POA_Components::Navigation_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Receptacles:1.0") == 0)
    {
      return static_cast<POA_Components::Receptacles_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Events:1.0") == 0)
    {
      return static_cast<POA_Components::Events_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/CCMObject:1.0") == 0)
    {
      return static_cast<POA_Components::CCMObject_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/FooBar:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::FooBar_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesSingle::FooBar::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesSingle/FooBar:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesSingle::FooBar::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesSingle::FooBar *
POA_ReceptaclesSingle::FooBar::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesSingle::FooBar STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesSingle__TAO_FooBar_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesSingle_ObjectFoo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesSingle_ObjectFoo_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesSingle_ObjectFoo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62,  0,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62,  0,
     62, 15,  5,  0,  5,  0, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     15,  5, 62, 30, 62, 62, 62, 62, 62, 62,
     62, 62,  0, 25,  0, 62, 62, 62, 10, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62,
#else
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62,  0, 62,  0, 62, 15,
      5,  0,  5,  0, 62, 62, 62, 62, 62, 62,
     62, 15,  5, 62, 30,  0, 25,  0, 62, 62,
     62, 10, 62, 62, 62, 62, 62, 62,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesSingle_ObjectFoo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 36,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 61,
      HASH_VALUE_RANGE = 57,
      DUPLICATES = 4,
      WORDLIST_SIZE = 41
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesSingle::ObjectFoo::_is_a_skel, 0, 0},
      {"subscribe", &POA_ReceptaclesSingle::ObjectFoo::subscribe_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::subscribe, 0},
      {"_interface", &POA_ReceptaclesSingle::ObjectFoo::_interface_skel, 0, 0},
      {"unsubscribe", &POA_ReceptaclesSingle::ObjectFoo::unsubscribe_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::unsubscribe, 0},
      {"get_ccm_home", &POA_ReceptaclesSingle::ObjectFoo::get_ccm_home_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_ccm_home, 0},
      {"get_all_ports", &POA_ReceptaclesSingle::ObjectFoo::get_all_ports_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_ports, 0},
      {"get_all_facets", &POA_ReceptaclesSingle::ObjectFoo::get_all_facets_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_facets, 0},
      {"get_connections", &POA_ReceptaclesSingle::ObjectFoo::get_connections_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_connections, 0},
      {"get_named_facets", &POA_ReceptaclesSingle::ObjectFoo::get_named_facets_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_facets, 0},
      {"get_all_emitters", &POA_ReceptaclesSingle::ObjectFoo::get_all_emitters_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_emitters, 0},
      {"get_all_consumers", &POA_ReceptaclesSingle::ObjectFoo::get_all_consumers_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_consumers, 0},
      {"get_named_emitters", &POA_ReceptaclesSingle::ObjectFoo::get_named_emitters_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_emitters, 0},
      {"get_all_publishers", &POA_ReceptaclesSingle::ObjectFoo::get_all_publishers_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_publishers, 0},
      {"get_all_receptacles", &POA_ReceptaclesSingle::ObjectFoo::get_all_receptacles_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_receptacles, 0},
      {"get_named_consumers", &POA_ReceptaclesSingle::ObjectFoo::get_named_consumers_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_consumers, 0},
      {"get_named_publishers", &POA_ReceptaclesSingle::ObjectFoo::get_named_publishers_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_publishers, 0},
      {"get_named_receptacles", &POA_ReceptaclesSingle::ObjectFoo::get_named_receptacles_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_receptacles, 0},
      {"get_component_def", &POA_ReceptaclesSingle::ObjectFoo::get_component_def_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_component_def, 0},
      {"get_primary_key", &POA_ReceptaclesSingle::ObjectFoo::get_primary_key_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_primary_key, 0},
      {"ciao_activate", &POA_ReceptaclesSingle::ObjectFoo::ciao_activate_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::ciao_activate, 0},
      {"ciao_preactivate", &POA_ReceptaclesSingle::ObjectFoo::ciao_preactivate_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::ciao_preactivate, 0},
      {"ciao_postactivate", &POA_ReceptaclesSingle::ObjectFoo::ciao_postactivate_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::ciao_postactivate, 0},
      {"get_connection_foo", &POA_ReceptaclesSingle::ObjectFoo::get_connection_foo_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_connection_foo, 0},
      {"disconnect_foo", &POA_ReceptaclesSingle::ObjectFoo::disconnect_foo_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect_foo, 0},
      {"_component", &POA_ReceptaclesSingle::ObjectFoo::_component_skel, 0, 0},
      {"remove", &POA_ReceptaclesSingle::ObjectFoo::remove_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::remove, 0},
      {"configuration_complete", &POA_ReceptaclesSingle::ObjectFoo::configuration_complete_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::configuration_complete, 0},
      {"_non_existent", &POA_ReceptaclesSingle::ObjectFoo::_non_existent_skel, 0, 0},
      {"same_component", &POA_ReceptaclesSingle::ObjectFoo::same_component_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::same_component, 0},
      {"disconnect", &POA_ReceptaclesSingle::ObjectFoo::disconnect_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect, 0},
      {"connect_foo", &POA_ReceptaclesSingle::ObjectFoo::connect_foo_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect_foo, 0},
      {"get_consumer", &POA_ReceptaclesSingle::ObjectFoo::get_consumer_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_consumer, 0},
      {"provide_facet", &POA_ReceptaclesSingle::ObjectFoo::provide_facet_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::provide_facet, 0},
      {"connect", &POA_ReceptaclesSingle::ObjectFoo::connect_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect, 0},
      {"disconnect_consumer", &POA_ReceptaclesSingle::ObjectFoo::disconnect_consumer_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect_consumer, 0},
      {"connect_consumer", &POA_ReceptaclesSingle::ObjectFoo::connect_consumer_skel, &POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect_consumer, 0},
    };

  static const signed char lookup[] =
    {
       -1, -13,  -2, -16,  -2,   5,  -1, -18,  -2,   6,   7,   8,   9,  10, 
       11,  12, -76,  15, -76, -73,  20,  21,  22,  -1,  -1,  23,  -1,  -1, 
       24,  -1,  -1,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35, 
       36,  37,  -1,  -1,  -1,  38,  -1,  -1,  -1,  -1,  -1,  -1,  39,  -1, 
       -1,  -1,  -1,  -1,  -1,  40, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname_;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_ReceptaclesSingle_ObjectFoo_Perfect_Hash_OpTable tao_ReceptaclesSingle_ObjectFoo_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::ObjectFoo *tao_impl,
      ::CORBA::Object_ptr conxn
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
private:
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo &
    );
  
private:
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl;
  
  ::CORBA::Object_ptr conxn_;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo::TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::ObjectFoo *tao_impl,
    ::CORBA::Object_ptr conxn
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    conxn_ (conxn)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<= conxn_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_ObjectFoo_connect_foo_exceptiondata[] = 
  {
    Components::_tc_AlreadyConnected,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_ObjectFoo_connect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::ObjectFoo *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (CORBA::Object_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo &
    );
  
private:
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl;
  
  CORBA::Object_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::ObjectFoo *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesSingle_ObjectFoo_disconnect_foo_exceptiondata[] = 
  {
    Components::_tc_NoConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesSingle_ObjectFoo_disconnect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo::result (CORBA::Object_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesSingle::ObjectFoo *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (CORBA::Object_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo (
      const TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo &
    );
  
private:
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl;
  
  CORBA::Object_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesSingle::ObjectFoo *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo::result (CORBA::Object_ptr result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker *
POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker::the_TAO_ObjectFoo_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker::_TAO_ObjectFoo_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker::~_TAO_ObjectFoo_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesSingle::_TAO_ObjectFoo_Strategized_Proxy_Broker::the_TAO_ObjectFoo_Strategized_Proxy_Broker ();
}

int
ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::_TAO_ObjectFoo_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::AlreadyConnected,
    ::Components::InvalidConnection
  ))
{
  reinterpret_cast<
      POA_ReceptaclesSingle::ObjectFoo_ptr> (
      servant->_downcast (
          "IDL:ReceptaclesSingle/ObjectFoo:1.0"
        )
    )->connect_foo (
        ((TAO::Arg_Traits< CORBA::Object>::in_arg_val *) args[1])->arg ()
        ACE_ENV_ARG_PARAMETER
      );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::NoConnection
  ))
{
  ((TAO::Arg_Traits< CORBA::Object>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::ObjectFoo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/ObjectFoo:1.0"
          )
      )->disconnect_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesSingle::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_connection_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< CORBA::Object>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesSingle::ObjectFoo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesSingle/ObjectFoo:1.0"
          )
      )->get_connection_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesSingle::ObjectFoo::ObjectFoo (void)
{
  this->optable_ = &tao_ReceptaclesSingle_ObjectFoo_optable;
}

POA_ReceptaclesSingle::ObjectFoo::ObjectFoo (const ObjectFoo& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_Components, Navigation) (rhs),
    ACE_NESTED_CLASS (POA_Components, Receptacles) (rhs),
    ACE_NESTED_CLASS (POA_Components, Events) (rhs),
    ACE_NESTED_CLASS (POA_Components, CCMObject) (rhs)
{
}

POA_ReceptaclesSingle::ObjectFoo::~ObjectFoo (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::ObjectFoo::connect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::ObjectFoo *> (
        _tao_servant
      );
  _tao_server_request.argument_flag (0);
  
  ::CORBA::Object_var conxn;
  
  if (!(
      (_tao_in >> conxn.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_connect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      conxn.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            
              _tao_impl->connect_foo (
                  conxn.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::ObjectFoo::disconnect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::ObjectFoo *> (
        _tao_servant
      );
  CORBA::Object_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_disconnect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          CORBA::Object_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesSingle::ObjectFoo::get_connection_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    static_cast<
        POA_ReceptaclesSingle::ObjectFoo *> (
        _tao_servant
      );
  CORBA::Object_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesSingle_ObjectFoo_get_connection_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connection_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          CORBA::Object_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesSingle::ObjectFoo::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    (POA_ReceptaclesSingle::ObjectFoo *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::ObjectFoo::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    (POA_ReceptaclesSingle::ObjectFoo *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::ObjectFoo::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    (POA_ReceptaclesSingle::ObjectFoo *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesSingle::ObjectFoo::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesSingle::ObjectFoo *_tao_impl =
    (POA_ReceptaclesSingle::ObjectFoo *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesSingle::ObjectFoo::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Navigation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Receptacles:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Events:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesSingle/ObjectFoo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesSingle::ObjectFoo::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Navigation:1.0") == 0)
    {
      return static_cast<POA_Components::Navigation_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Receptacles:1.0") == 0)
    {
      return static_cast<POA_Components::Receptacles_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Events:1.0") == 0)
    {
      return static_cast<POA_Components::Events_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/CCMObject:1.0") == 0)
    {
      return static_cast<POA_Components::CCMObject_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesSingle/ObjectFoo:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesSingle::ObjectFoo_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesSingle::ObjectFoo::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesSingle/ObjectFoo:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesSingle::ObjectFoo::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesSingle::ObjectFoo *
POA_ReceptaclesSingle::ObjectFoo::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesSingle::ObjectFoo STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesSingle__TAO_ObjectFoo_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesMultiple_foo_interface_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesMultiple_foo_interface_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesMultiple_foo_interface_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14,  1, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14,  0, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,
#else
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14,  0, 14,  0, 14, 14,
     14,  1, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,  0, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesMultiple_foo_interface_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 4,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 13,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 13,
      HASH_VALUE_RANGE = 9,
      DUPLICATES = 0,
      WORDLIST_SIZE = 9
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesMultiple::foo_interface::_is_a_skel, 0, 0},
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_component", &POA_ReceptaclesMultiple::foo_interface::_component_skel, 0, 0},
      {"_interface", &POA_ReceptaclesMultiple::foo_interface::_interface_skel, 0, 0},
      {"",0,0,0},
      {"_non_existent", &POA_ReceptaclesMultiple::foo_interface::_non_existent_skel, 0, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname_;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ReceptaclesMultiple_foo_interface_Perfect_Hash_OpTable tao_ReceptaclesMultiple_foo_interface_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker *
POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker::the_TAO_foo_interface_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker::_TAO_foo_interface_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker::~_TAO_foo_interface_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesMultiple::_TAO_foo_interface_Strategized_Proxy_Broker::the_TAO_foo_interface_Strategized_Proxy_Broker ();
}

int
ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesMultiple::_TAO_foo_interface_ThruPOA_Proxy_Impl::_TAO_foo_interface_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesMultiple::foo_interface::foo_interface (void)
{
  this->optable_ = &tao_ReceptaclesMultiple_foo_interface_optable;
}

POA_ReceptaclesMultiple::foo_interface::foo_interface (const foo_interface& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ReceptaclesMultiple::foo_interface::~foo_interface (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesMultiple::foo_interface::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesMultiple::foo_interface *_tao_impl =
    (POA_ReceptaclesMultiple::foo_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::foo_interface::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::foo_interface *_tao_impl =
    (POA_ReceptaclesMultiple::foo_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::foo_interface::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesMultiple::foo_interface *_tao_impl =
    (POA_ReceptaclesMultiple::foo_interface *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::foo_interface::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::foo_interface *_tao_impl =
    (POA_ReceptaclesMultiple::foo_interface *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesMultiple::foo_interface::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesMultiple/foo_interface:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesMultiple::foo_interface::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesMultiple/foo_interface:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesMultiple::foo_interface_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesMultiple::foo_interface::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesMultiple/foo_interface:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesMultiple::foo_interface::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesMultiple::foo_interface *
POA_ReceptaclesMultiple::foo_interface::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesMultiple::foo_interface STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesMultiple__TAO_foo_interface_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesMultiple_bar_interface_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesMultiple_bar_interface_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesMultiple_bar_interface_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14,  0,
     14, 14, 14,  1, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14,  0, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,
#else
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14,  0, 14,  0, 14, 14,
     14,  1, 14, 14, 14, 14, 14, 14, 14, 14,
     14, 14, 14, 14, 14, 14,  0, 14, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesMultiple_bar_interface_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 4,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 13,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 13,
      HASH_VALUE_RANGE = 9,
      DUPLICATES = 0,
      WORDLIST_SIZE = 9
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesMultiple::bar_interface::_is_a_skel, 0, 0},
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_component", &POA_ReceptaclesMultiple::bar_interface::_component_skel, 0, 0},
      {"_interface", &POA_ReceptaclesMultiple::bar_interface::_interface_skel, 0, 0},
      {"",0,0,0},
      {"_non_existent", &POA_ReceptaclesMultiple::bar_interface::_non_existent_skel, 0, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname_;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ReceptaclesMultiple_bar_interface_Perfect_Hash_OpTable tao_ReceptaclesMultiple_bar_interface_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker *
POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker::the_TAO_bar_interface_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker::_TAO_bar_interface_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker::~_TAO_bar_interface_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesMultiple::_TAO_bar_interface_Strategized_Proxy_Broker::the_TAO_bar_interface_Strategized_Proxy_Broker ();
}

int
ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesMultiple::_TAO_bar_interface_ThruPOA_Proxy_Impl::_TAO_bar_interface_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesMultiple::bar_interface::bar_interface (void)
{
  this->optable_ = &tao_ReceptaclesMultiple_bar_interface_optable;
}

POA_ReceptaclesMultiple::bar_interface::bar_interface (const bar_interface& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ReceptaclesMultiple::bar_interface::~bar_interface (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesMultiple::bar_interface::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesMultiple::bar_interface *_tao_impl =
    (POA_ReceptaclesMultiple::bar_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::bar_interface::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::bar_interface *_tao_impl =
    (POA_ReceptaclesMultiple::bar_interface *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::bar_interface::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesMultiple::bar_interface *_tao_impl =
    (POA_ReceptaclesMultiple::bar_interface *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::bar_interface::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::bar_interface *_tao_impl =
    (POA_ReceptaclesMultiple::bar_interface *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesMultiple::bar_interface::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesMultiple/bar_interface:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesMultiple::bar_interface::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesMultiple/bar_interface:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesMultiple::bar_interface_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesMultiple::bar_interface::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesMultiple/bar_interface:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesMultiple::bar_interface::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesMultiple::bar_interface *
POA_ReceptaclesMultiple::bar_interface::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesMultiple::bar_interface STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesMultiple__TAO_bar_interface_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesMultiple_Foo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesMultiple_Foo_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesMultiple_Foo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65,  0,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65,  0,
     65, 15, 15,  0,  5,  0, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     15,  5, 65, 30, 65, 65, 65, 65, 65, 65,
     65, 65,  0, 25,  0, 65, 65, 65, 10, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65,
#else
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65,  0, 65,  0, 65, 15,
     15,  0,  5,  0, 65, 65, 65, 65, 65, 65,
     65, 15,  5, 65, 30,  0, 25,  0, 65, 65,
     65, 10, 65, 65, 65, 65, 65, 65,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesMultiple_Foo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 36,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 64,
      HASH_VALUE_RANGE = 60,
      DUPLICATES = 4,
      WORDLIST_SIZE = 41
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesMultiple::Foo::_is_a_skel, 0, 0},
      {"subscribe", &POA_ReceptaclesMultiple::Foo::subscribe_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::subscribe, 0},
      {"_interface", &POA_ReceptaclesMultiple::Foo::_interface_skel, 0, 0},
      {"unsubscribe", &POA_ReceptaclesMultiple::Foo::unsubscribe_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::unsubscribe, 0},
      {"get_ccm_home", &POA_ReceptaclesMultiple::Foo::get_ccm_home_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_ccm_home, 0},
      {"get_all_ports", &POA_ReceptaclesMultiple::Foo::get_all_ports_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_ports, 0},
      {"get_all_facets", &POA_ReceptaclesMultiple::Foo::get_all_facets_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_facets, 0},
      {"get_connections", &POA_ReceptaclesMultiple::Foo::get_connections_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_connections, 0},
      {"get_named_facets", &POA_ReceptaclesMultiple::Foo::get_named_facets_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_facets, 0},
      {"get_all_emitters", &POA_ReceptaclesMultiple::Foo::get_all_emitters_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_emitters, 0},
      {"get_all_consumers", &POA_ReceptaclesMultiple::Foo::get_all_consumers_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_consumers, 0},
      {"get_named_emitters", &POA_ReceptaclesMultiple::Foo::get_named_emitters_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_emitters, 0},
      {"get_all_publishers", &POA_ReceptaclesMultiple::Foo::get_all_publishers_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_publishers, 0},
      {"get_all_receptacles", &POA_ReceptaclesMultiple::Foo::get_all_receptacles_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_all_receptacles, 0},
      {"get_named_consumers", &POA_ReceptaclesMultiple::Foo::get_named_consumers_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_consumers, 0},
      {"get_named_publishers", &POA_ReceptaclesMultiple::Foo::get_named_publishers_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_publishers, 0},
      {"get_named_receptacles", &POA_ReceptaclesMultiple::Foo::get_named_receptacles_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_named_receptacles, 0},
      {"get_component_def", &POA_ReceptaclesMultiple::Foo::get_component_def_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_component_def, 0},
      {"get_primary_key", &POA_ReceptaclesMultiple::Foo::get_primary_key_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_primary_key, 0},
      {"ciao_activate", &POA_ReceptaclesMultiple::Foo::ciao_activate_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::ciao_activate, 0},
      {"ciao_preactivate", &POA_ReceptaclesMultiple::Foo::ciao_preactivate_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::ciao_preactivate, 0},
      {"ciao_postactivate", &POA_ReceptaclesMultiple::Foo::ciao_postactivate_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::ciao_postactivate, 0},
      {"get_connections_foo", &POA_ReceptaclesMultiple::Foo::get_connections_foo_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_connections_foo, 0},
      {"_component", &POA_ReceptaclesMultiple::Foo::_component_skel, 0, 0},
      {"remove", &POA_ReceptaclesMultiple::Foo::remove_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::remove, 0},
      {"configuration_complete", &POA_ReceptaclesMultiple::Foo::configuration_complete_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::configuration_complete, 0},
      {"_non_existent", &POA_ReceptaclesMultiple::Foo::_non_existent_skel, 0, 0},
      {"same_component", &POA_ReceptaclesMultiple::Foo::same_component_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::same_component, 0},
      {"connect_foo", &POA_ReceptaclesMultiple::Foo::connect_foo_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::connect_foo, 0},
      {"get_consumer", &POA_ReceptaclesMultiple::Foo::get_consumer_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_consumer, 0},
      {"provide_facet", &POA_ReceptaclesMultiple::Foo::provide_facet_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::provide_facet, 0},
      {"disconnect_foo", &POA_ReceptaclesMultiple::Foo::disconnect_foo_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect_foo, 0},
      {"connect", &POA_ReceptaclesMultiple::Foo::connect_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::connect, 0},
      {"disconnect", &POA_ReceptaclesMultiple::Foo::disconnect_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect, 0},
      {"connect_consumer", &POA_ReceptaclesMultiple::Foo::connect_consumer_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::connect_consumer, 0},
      {"disconnect_consumer", &POA_ReceptaclesMultiple::Foo::disconnect_consumer_skel, &POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect_consumer, 0},
    };

  static const signed char lookup[] =
    {
       -1, -13,  -2, -16,  -2,   5,  -1, -18,  -2,   6,   7,   8,   9,  10, 
       11,  12, -79,  15, -79, -76,  20,  21,  22,  -1,  -1,  23,  -1,  -1, 
       24,  -1,  -1,  25,  26,  -1,  27,  28,  29,  30,  31,  32,  -1,  33, 
       34,  35,  36,  -1,  -1,  37,  -1,  -1,  38,  -1,  -1,  -1,  -1,  -1, 
       -1,  -1,  -1,  -1,  -1,  39,  -1,  -1,  40, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname_;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_ReceptaclesMultiple_Foo_Perfect_Hash_OpTable tao_ReceptaclesMultiple_Foo_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::Foo *tao_impl,
      ::ReceptaclesMultiple::foo_interface_ptr connection
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::Components::Cookie * result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo &
    );
  
private:
  POA_ReceptaclesMultiple::Foo *_tao_impl;
  
  ::ReceptaclesMultiple::foo_interface_ptr connection_;
  ::Components::Cookie * _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::Foo *tao_impl,
    ::ReceptaclesMultiple::foo_interface_ptr connection
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    connection_ (connection)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<=  this->connection_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesMultiple_Foo_connect_foo_exceptiondata[] = 
  {
    Components::_tc_ExceededConnectionLimit,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesMultiple_Foo_connect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo::result (::Components::Cookie * result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::Foo *tao_impl,
      ::Components::Cookie * ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesMultiple::foo_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo &
    );
  
private:
  POA_ReceptaclesMultiple::Foo *_tao_impl;
  
  ::Components::Cookie * ck_;
  ::ReceptaclesMultiple::foo_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::Foo *tao_impl,
    ::Components::Cookie * ck
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    ck_ (ck)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesMultiple_Foo_disconnect_foo_exceptiondata[] = 
  {
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesMultiple_Foo_disconnect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo::result (::ReceptaclesMultiple::foo_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::Foo *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesMultiple::Foo::fooConnections * result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo &
    );
  
private:
  POA_ReceptaclesMultiple::Foo *_tao_impl;
  
  ::ReceptaclesMultiple::Foo::fooConnections * _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::Foo *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= *this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo::result (::ReceptaclesMultiple::Foo::fooConnections * result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker *
POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker::the_TAO_Foo_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker::_TAO_Foo_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker::~_TAO_Foo_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesMultiple::_TAO_Foo_Strategized_Proxy_Broker::the_TAO_Foo_Strategized_Proxy_Broker ();
}

int
ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::_TAO_Foo_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::connect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::ExceededConnectionLimit,
    ::Components::InvalidConnection
  ))
{
  ((TAO::Arg_Traits< ::Components::Cookie>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::Foo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/Foo:1.0"
          )
      )->connect_foo (
          ((TAO::Arg_Traits< ::ReceptaclesMultiple::foo_interface>::in_arg_val *) args[1])->arg ()
          ACE_ENV_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::disconnect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::InvalidConnection
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesMultiple::foo_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::Foo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/Foo:1.0"
          )
      )->disconnect_foo (
          ((TAO::Arg_Traits< ::Components::Cookie>::in_arg_val *) args[1])->arg ()
          ACE_ENV_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_Foo_ThruPOA_Proxy_Impl::get_connections_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesMultiple::Foo::fooConnections>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::Foo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/Foo:1.0"
          )
      )->get_connections_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesMultiple::Foo::Foo (void)
{
  this->optable_ = &tao_ReceptaclesMultiple_Foo_optable;
}

POA_ReceptaclesMultiple::Foo::Foo (const Foo& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_Components, Navigation) (rhs),
    ACE_NESTED_CLASS (POA_Components, Receptacles) (rhs),
    ACE_NESTED_CLASS (POA_Components, Events) (rhs),
    ACE_NESTED_CLASS (POA_Components, CCMObject) (rhs)
{
}

POA_ReceptaclesMultiple::Foo::~Foo (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::Foo::connect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesMultiple::Foo *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::Foo *> (
        _tao_servant
      );
  ::Components::Cookie_var _tao_retval;
  ::ReceptaclesMultiple::foo_interface_var connection;
  
  if (!(
      (_tao_in >> connection.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_connect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      connection.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->connect_foo (
                  connection.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::Components::Cookie * _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::Foo::disconnect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesMultiple::Foo *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::Foo *> (
        _tao_servant
      );
  ::ReceptaclesMultiple::foo_interface_var _tao_retval;
  ::Components::Cookie_var ck;
  
  if (!(
      (_tao_in >> ck.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_disconnect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      ck.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_foo (
                  ck.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesMultiple::foo_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::Foo::get_connections_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::Foo *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::Foo *> (
        _tao_servant
      );
  ::ReceptaclesMultiple::Foo::fooConnections_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_Foo_get_connections_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connections_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesMultiple::Foo::fooConnections * _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesMultiple::Foo::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesMultiple::Foo *_tao_impl =
    (POA_ReceptaclesMultiple::Foo *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::Foo::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::Foo *_tao_impl =
    (POA_ReceptaclesMultiple::Foo *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::Foo::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesMultiple::Foo *_tao_impl =
    (POA_ReceptaclesMultiple::Foo *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::Foo::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::Foo *_tao_impl =
    (POA_ReceptaclesMultiple::Foo *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesMultiple::Foo::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Navigation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Receptacles:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Events:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesMultiple/Foo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesMultiple::Foo::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Navigation:1.0") == 0)
    {
      return static_cast<POA_Components::Navigation_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Receptacles:1.0") == 0)
    {
      return static_cast<POA_Components::Receptacles_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Events:1.0") == 0)
    {
      return static_cast<POA_Components::Events_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/CCMObject:1.0") == 0)
    {
      return static_cast<POA_Components::CCMObject_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesMultiple/Foo:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesMultiple::Foo_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesMultiple::Foo::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesMultiple/Foo:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesMultiple::Foo::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesMultiple::Foo *
POA_ReceptaclesMultiple::Foo::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesMultiple::Foo STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesMultiple__TAO_Foo_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesMultiple_Bar_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesMultiple_Bar_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesMultiple_Bar_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 20,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 10,
     57, 20, 10,  0,  5,  0, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57,  5, 57, 20, 57, 57, 57, 57, 57, 57,
     57, 57,  0, 20,  0, 57, 57, 57, 10, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57,
#else
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
     57, 57, 57, 57, 57, 20, 57, 10, 57, 20,
     10,  0,  5,  0, 57, 57, 57, 57, 57, 57,
     57, 57,  5, 57, 20,  0, 20,  0, 57, 57,
     57, 10, 57, 57, 57, 57, 57, 57,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesMultiple_Bar_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 36,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 9,
      MAX_HASH_VALUE = 56,
      HASH_VALUE_RANGE = 48,
      DUPLICATES = 4,
      WORDLIST_SIZE = 45
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
            {"subscribe", &POA_ReceptaclesMultiple::Bar::subscribe_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::subscribe, 0},
      {"unsubscribe", &POA_ReceptaclesMultiple::Bar::unsubscribe_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::unsubscribe, 0},
      {"get_ccm_home", &POA_ReceptaclesMultiple::Bar::get_ccm_home_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_ccm_home, 0},
      {"get_all_ports", &POA_ReceptaclesMultiple::Bar::get_all_ports_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_all_ports, 0},
      {"get_all_facets", &POA_ReceptaclesMultiple::Bar::get_all_facets_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_all_facets, 0},
      {"get_connections", &POA_ReceptaclesMultiple::Bar::get_connections_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_connections, 0},
      {"get_named_facets", &POA_ReceptaclesMultiple::Bar::get_named_facets_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_named_facets, 0},
      {"get_all_emitters", &POA_ReceptaclesMultiple::Bar::get_all_emitters_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_all_emitters, 0},
      {"get_all_consumers", &POA_ReceptaclesMultiple::Bar::get_all_consumers_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_all_consumers, 0},
      {"get_named_emitters", &POA_ReceptaclesMultiple::Bar::get_named_emitters_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_named_emitters, 0},
      {"get_all_publishers", &POA_ReceptaclesMultiple::Bar::get_all_publishers_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_all_publishers, 0},
      {"get_all_receptacles", &POA_ReceptaclesMultiple::Bar::get_all_receptacles_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_all_receptacles, 0},
      {"get_named_consumers", &POA_ReceptaclesMultiple::Bar::get_named_consumers_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_named_consumers, 0},
      {"get_named_publishers", &POA_ReceptaclesMultiple::Bar::get_named_publishers_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_named_publishers, 0},
      {"get_named_receptacles", &POA_ReceptaclesMultiple::Bar::get_named_receptacles_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_named_receptacles, 0},
      {"get_component_def", &POA_ReceptaclesMultiple::Bar::get_component_def_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_component_def, 0},
      {"get_primary_key", &POA_ReceptaclesMultiple::Bar::get_primary_key_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_primary_key, 0},
      {"remove", &POA_ReceptaclesMultiple::Bar::remove_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::remove, 0},
      {"_interface", &POA_ReceptaclesMultiple::Bar::_interface_skel, 0, 0},
      {"get_consumer", &POA_ReceptaclesMultiple::Bar::get_consumer_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_consumer, 0},
      {"ciao_activate", &POA_ReceptaclesMultiple::Bar::ciao_activate_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::ciao_activate, 0},
      {"same_component", &POA_ReceptaclesMultiple::Bar::same_component_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::same_component, 0},
      {"_is_a", &POA_ReceptaclesMultiple::Bar::_is_a_skel, 0, 0},
      {"ciao_preactivate", &POA_ReceptaclesMultiple::Bar::ciao_preactivate_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::ciao_preactivate, 0},
      {"ciao_postactivate", &POA_ReceptaclesMultiple::Bar::ciao_postactivate_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::ciao_postactivate, 0},
      {"provide_facet", &POA_ReceptaclesMultiple::Bar::provide_facet_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::provide_facet, 0},
      {"get_connections_bar", &POA_ReceptaclesMultiple::Bar::get_connections_bar_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_connections_bar, 0},
      {"disconnect", &POA_ReceptaclesMultiple::Bar::disconnect_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect, 0},
      {"configuration_complete", &POA_ReceptaclesMultiple::Bar::configuration_complete_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::configuration_complete, 0},
      {"disconnect_bar", &POA_ReceptaclesMultiple::Bar::disconnect_bar_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect_bar, 0},
      {"connect", &POA_ReceptaclesMultiple::Bar::connect_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::connect, 0},
      {"disconnect_consumer", &POA_ReceptaclesMultiple::Bar::disconnect_consumer_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect_consumer, 0},
      {"_component", &POA_ReceptaclesMultiple::Bar::_component_skel, 0, 0},
      {"connect_bar", &POA_ReceptaclesMultiple::Bar::connect_bar_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::connect_bar, 0},
      {"_non_existent", &POA_ReceptaclesMultiple::Bar::_non_existent_skel, 0, 0},
      {"connect_consumer", &POA_ReceptaclesMultiple::Bar::connect_consumer_skel, &POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::connect_consumer, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1, -15,  -2, -18,  -2, -20,  -2,   9,  -1,  10,  11,  12, 
       13,  14, -69,  17, -69, -68,  22,  23,  24,  -1,  -1,  25,  26,  -1, 
       -1,  -1,  27,  -1,  28,  29,  30,  31,  32,  33,  34,  35,  36,  -1, 
       37,  -1,  38,  -1,  -1,  39,  -1,  40,  41,  42,  -1,  43,  -1,  -1, 
       44, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname_;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_ReceptaclesMultiple_Bar_Perfect_Hash_OpTable tao_ReceptaclesMultiple_Bar_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::Bar *tao_impl,
      ::ReceptaclesMultiple::bar_interface_ptr connection
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::Components::Cookie * result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar &
    );
  
private:
  POA_ReceptaclesMultiple::Bar *_tao_impl;
  
  ::ReceptaclesMultiple::bar_interface_ptr connection_;
  ::Components::Cookie * _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::Bar *tao_impl,
    ::ReceptaclesMultiple::bar_interface_ptr connection
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    connection_ (connection)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<=  this->connection_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesMultiple_Bar_connect_bar_exceptiondata[] = 
  {
    Components::_tc_ExceededConnectionLimit,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesMultiple_Bar_connect_bar_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar::result (::Components::Cookie * result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::Bar *tao_impl,
      ::Components::Cookie * ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesMultiple::bar_interface_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar &
    );
  
private:
  POA_ReceptaclesMultiple::Bar *_tao_impl;
  
  ::Components::Cookie * ck_;
  ::ReceptaclesMultiple::bar_interface_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::Bar *tao_impl,
    ::Components::Cookie * ck
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    ck_ (ck)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesMultiple_Bar_disconnect_bar_exceptiondata[] = 
  {
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesMultiple_Bar_disconnect_bar_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar::result (::ReceptaclesMultiple::bar_interface_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::Bar *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesMultiple::Bar::barConnections * result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar &
    );
  
private:
  POA_ReceptaclesMultiple::Bar *_tao_impl;
  
  ::ReceptaclesMultiple::Bar::barConnections * _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::Bar *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= *this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar::result (::ReceptaclesMultiple::Bar::barConnections * result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker *
POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker::the_TAO_Bar_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker::_TAO_Bar_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker::~_TAO_Bar_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesMultiple::_TAO_Bar_Strategized_Proxy_Broker::the_TAO_Bar_Strategized_Proxy_Broker ();
}

int
ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::_TAO_Bar_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::connect_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::ExceededConnectionLimit,
    ::Components::InvalidConnection
  ))
{
  ((TAO::Arg_Traits< ::Components::Cookie>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::Bar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/Bar:1.0"
          )
      )->connect_bar (
          ((TAO::Arg_Traits< ::ReceptaclesMultiple::bar_interface>::in_arg_val *) args[1])->arg ()
          ACE_ENV_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::disconnect_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::InvalidConnection
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesMultiple::bar_interface>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::Bar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/Bar:1.0"
          )
      )->disconnect_bar (
          ((TAO::Arg_Traits< ::Components::Cookie>::in_arg_val *) args[1])->arg ()
          ACE_ENV_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_Bar_ThruPOA_Proxy_Impl::get_connections_bar (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesMultiple::Bar::barConnections>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::Bar_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/Bar:1.0"
          )
      )->get_connections_bar (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesMultiple::Bar::Bar (void)
{
  this->optable_ = &tao_ReceptaclesMultiple_Bar_optable;
}

POA_ReceptaclesMultiple::Bar::Bar (const Bar& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_Components, Navigation) (rhs),
    ACE_NESTED_CLASS (POA_Components, Receptacles) (rhs),
    ACE_NESTED_CLASS (POA_Components, Events) (rhs),
    ACE_NESTED_CLASS (POA_Components, CCMObject) (rhs)
{
}

POA_ReceptaclesMultiple::Bar::~Bar (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::Bar::connect_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesMultiple::Bar *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::Bar *> (
        _tao_servant
      );
  ::Components::Cookie_var _tao_retval;
  ::ReceptaclesMultiple::bar_interface_var connection;
  
  if (!(
      (_tao_in >> connection.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_connect_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      connection.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->connect_bar (
                  connection.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::Components::Cookie * _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::Bar::disconnect_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesMultiple::Bar *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::Bar *> (
        _tao_servant
      );
  ::ReceptaclesMultiple::bar_interface_var _tao_retval;
  ::Components::Cookie_var ck;
  
  if (!(
      (_tao_in >> ck.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_disconnect_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      ck.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_bar (
                  ck.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesMultiple::bar_interface_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::Bar::get_connections_bar_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::Bar *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::Bar *> (
        _tao_servant
      );
  ::ReceptaclesMultiple::Bar::barConnections_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_Bar_get_connections_bar _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connections_bar (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesMultiple::Bar::barConnections * _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesMultiple::Bar::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesMultiple::Bar *_tao_impl =
    (POA_ReceptaclesMultiple::Bar *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::Bar::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::Bar *_tao_impl =
    (POA_ReceptaclesMultiple::Bar *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::Bar::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesMultiple::Bar *_tao_impl =
    (POA_ReceptaclesMultiple::Bar *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::Bar::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::Bar *_tao_impl =
    (POA_ReceptaclesMultiple::Bar *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesMultiple::Bar::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Navigation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Receptacles:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Events:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesMultiple/Bar:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesMultiple::Bar::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Navigation:1.0") == 0)
    {
      return static_cast<POA_Components::Navigation_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Receptacles:1.0") == 0)
    {
      return static_cast<POA_Components::Receptacles_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Events:1.0") == 0)
    {
      return static_cast<POA_Components::Events_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/CCMObject:1.0") == 0)
    {
      return static_cast<POA_Components::CCMObject_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesMultiple/Bar:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesMultiple::Bar_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesMultiple::Bar::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesMultiple/Bar:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesMultiple::Bar::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesMultiple::Bar *
POA_ReceptaclesMultiple::Bar::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesMultiple::Bar STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesMultiple__TAO_Bar_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1538

class TAO_ReceptaclesMultiple_ObjectFoo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /build/valinortmp/wotte/cvs-workspace/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0,0 -a -o -t -p -K opname_ -L C++ -Z TAO_ReceptaclesMultiple_ObjectFoo_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ReceptaclesMultiple_ObjectFoo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65,  0,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65,  0,
     65, 15, 15,  0,  5,  0, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     15,  5, 65, 30, 65, 65, 65, 65, 65, 65,
     65, 65,  0, 25,  0, 65, 65, 65, 10, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65,
#else
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
     65, 65, 65, 65, 65,  0, 65,  0, 65, 15,
     15,  0,  5,  0, 65, 65, 65, 65, 65, 65,
     65, 15,  5, 65, 30,  0, 25,  0, 65, 65,
     65, 10, 65, 65, 65, 65, 65, 65,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const class TAO_operation_db_entry *
TAO_ReceptaclesMultiple_ObjectFoo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 36,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 64,
      HASH_VALUE_RANGE = 60,
      DUPLICATES = 4,
      WORDLIST_SIZE = 41
    };

  static const class TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},{"",0,0,0},
      {"_is_a", &POA_ReceptaclesMultiple::ObjectFoo::_is_a_skel, 0, 0},
      {"subscribe", &POA_ReceptaclesMultiple::ObjectFoo::subscribe_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::subscribe, 0},
      {"_interface", &POA_ReceptaclesMultiple::ObjectFoo::_interface_skel, 0, 0},
      {"unsubscribe", &POA_ReceptaclesMultiple::ObjectFoo::unsubscribe_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::unsubscribe, 0},
      {"get_ccm_home", &POA_ReceptaclesMultiple::ObjectFoo::get_ccm_home_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_ccm_home, 0},
      {"get_all_ports", &POA_ReceptaclesMultiple::ObjectFoo::get_all_ports_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_ports, 0},
      {"get_all_facets", &POA_ReceptaclesMultiple::ObjectFoo::get_all_facets_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_facets, 0},
      {"get_connections", &POA_ReceptaclesMultiple::ObjectFoo::get_connections_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_connections, 0},
      {"get_named_facets", &POA_ReceptaclesMultiple::ObjectFoo::get_named_facets_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_facets, 0},
      {"get_all_emitters", &POA_ReceptaclesMultiple::ObjectFoo::get_all_emitters_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_emitters, 0},
      {"get_all_consumers", &POA_ReceptaclesMultiple::ObjectFoo::get_all_consumers_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_consumers, 0},
      {"get_named_emitters", &POA_ReceptaclesMultiple::ObjectFoo::get_named_emitters_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_emitters, 0},
      {"get_all_publishers", &POA_ReceptaclesMultiple::ObjectFoo::get_all_publishers_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_publishers, 0},
      {"get_all_receptacles", &POA_ReceptaclesMultiple::ObjectFoo::get_all_receptacles_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_all_receptacles, 0},
      {"get_named_consumers", &POA_ReceptaclesMultiple::ObjectFoo::get_named_consumers_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_consumers, 0},
      {"get_named_publishers", &POA_ReceptaclesMultiple::ObjectFoo::get_named_publishers_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_publishers, 0},
      {"get_named_receptacles", &POA_ReceptaclesMultiple::ObjectFoo::get_named_receptacles_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_named_receptacles, 0},
      {"get_component_def", &POA_ReceptaclesMultiple::ObjectFoo::get_component_def_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_component_def, 0},
      {"get_primary_key", &POA_ReceptaclesMultiple::ObjectFoo::get_primary_key_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_primary_key, 0},
      {"ciao_activate", &POA_ReceptaclesMultiple::ObjectFoo::ciao_activate_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::ciao_activate, 0},
      {"ciao_preactivate", &POA_ReceptaclesMultiple::ObjectFoo::ciao_preactivate_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::ciao_preactivate, 0},
      {"ciao_postactivate", &POA_ReceptaclesMultiple::ObjectFoo::ciao_postactivate_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::ciao_postactivate, 0},
      {"get_connections_foo", &POA_ReceptaclesMultiple::ObjectFoo::get_connections_foo_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_connections_foo, 0},
      {"_component", &POA_ReceptaclesMultiple::ObjectFoo::_component_skel, 0, 0},
      {"remove", &POA_ReceptaclesMultiple::ObjectFoo::remove_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::remove, 0},
      {"configuration_complete", &POA_ReceptaclesMultiple::ObjectFoo::configuration_complete_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::configuration_complete, 0},
      {"_non_existent", &POA_ReceptaclesMultiple::ObjectFoo::_non_existent_skel, 0, 0},
      {"same_component", &POA_ReceptaclesMultiple::ObjectFoo::same_component_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::same_component, 0},
      {"connect_foo", &POA_ReceptaclesMultiple::ObjectFoo::connect_foo_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect_foo, 0},
      {"get_consumer", &POA_ReceptaclesMultiple::ObjectFoo::get_consumer_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_consumer, 0},
      {"provide_facet", &POA_ReceptaclesMultiple::ObjectFoo::provide_facet_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::provide_facet, 0},
      {"disconnect_foo", &POA_ReceptaclesMultiple::ObjectFoo::disconnect_foo_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect_foo, 0},
      {"connect", &POA_ReceptaclesMultiple::ObjectFoo::connect_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect, 0},
      {"disconnect", &POA_ReceptaclesMultiple::ObjectFoo::disconnect_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect, 0},
      {"connect_consumer", &POA_ReceptaclesMultiple::ObjectFoo::connect_consumer_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect_consumer, 0},
      {"disconnect_consumer", &POA_ReceptaclesMultiple::ObjectFoo::disconnect_consumer_skel, &POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect_consumer, 0},
    };

  static const signed char lookup[] =
    {
       -1, -13,  -2, -16,  -2,   5,  -1, -18,  -2,   6,   7,   8,   9,  10, 
       11,  12, -79,  15, -79, -76,  20,  21,  22,  -1,  -1,  23,  -1,  -1, 
       24,  -1,  -1,  25,  26,  -1,  27,  28,  29,  30,  31,  32,  -1,  33, 
       34,  35,  36,  -1,  -1,  37,  -1,  -1,  38,  -1,  -1,  -1,  -1,  -1, 
       -1,  -1,  -1,  -1,  -1,  39,  -1,  -1,  40, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname_;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_ReceptaclesMultiple_ObjectFoo_Perfect_Hash_OpTable tao_ReceptaclesMultiple_ObjectFoo_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interceptors_ss.cpp:53

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::ObjectFoo *tao_impl,
      ::CORBA::Object_ptr connection
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::Components::Cookie * result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo &
    );
  
private:
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl;
  
  ::CORBA::Object_ptr connection_;
  ::Components::Cookie * _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::ObjectFoo *tao_impl,
    ::CORBA::Object_ptr connection
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    connection_ (connection)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
  (*parameter_list)[len].argument <<= connection_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesMultiple_ObjectFoo_connect_foo_exceptiondata[] = 
  {
    Components::_tc_ExceededConnectionLimit,
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesMultiple_ObjectFoo_connect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo::result (::Components::Cookie * result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::ObjectFoo *tao_impl,
      ::Components::Cookie * ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (CORBA::Object_ptr result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo &
    );
  
private:
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl;
  
  ::Components::Cookie * ck_;
  CORBA::Object_ptr _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::ObjectFoo *tao_impl,
    ::Components::Cookie * ck
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl),
    ck_ (ck)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_ReceptaclesMultiple_ObjectFoo_disconnect_foo_exceptiondata[] = 
  {
    Components::_tc_InvalidConnection
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_ReceptaclesMultiple_ObjectFoo_disconnect_foo_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo::result (CORBA::Object_ptr result)
{
  // Update the result.
   this->_result = result;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:74

class TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,
      POA_ReceptaclesMultiple::ObjectFoo *tao_impl
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual Dynamic::ParameterList * arguments (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual char * target_most_derived_interface (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Boolean target_is_a (
      const char * id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  void result (::ReceptaclesMultiple::ObjectFoo::fooConnections * result);

private:
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo &
    );
  
  void operator= (
      const TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo &
    );
  
private:
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl;
  
  ::ReceptaclesMultiple::ObjectFoo::fooConnections * _result;
};

// TAO_IDL - Generated from
// be/be_visitor_operation/interceptors_ss.cpp:438

TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
    POA_ReceptaclesMultiple::ObjectFoo *tao_impl
    ACE_ENV_ARG_DECL_NOT_USED
  )
  : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
    _tao_impl (tao_impl)
{}

Dynamic::ParameterList *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::arguments (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= *this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::target_most_derived_interface (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::target_is_a (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id ACE_ENV_ARG_PARAMETER);
}

void 
TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo::result (::ReceptaclesMultiple::ObjectFoo::fooConnections * result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/strategized_proxy_broker_ss.cpp:40

// Factory function Implementation.
POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker *
POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker::the_TAO_ObjectFoo_Strategized_Proxy_Broker (void)
{
  static POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker
  strategized_proxy_broker;
  
  return &strategized_proxy_broker;
}

POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker::_TAO_ObjectFoo_Strategized_Proxy_Broker (void)
{
}

POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker::~_TAO_ObjectFoo_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker::get_strategy (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  TAO::Collocation_Strategy strategy =
    TAO_ORB_Core::collocation_strategy (obj ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (TAO::TAO_CS_REMOTE_STRATEGY);
  
  return strategy;
}

void
POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker::dispatch (
    CORBA::Object_ptr obj,
    CORBA::Object_out forward_obj,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((CORBA::Exception))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      obj->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  
  TAO_Collocated_Skeleton collocated_skel;
  TAO_Abstract_ServantBase *servant = 0;
  
  if (strategy == TAO::TAO_CS_THRU_POA_STRATEGY)
    {
      servant_upcall.prepare_for_upcall (
          obj->_stubobj ()->object_key (),
          op,
          forward_obj
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant_upcall.pre_invoke_collocated_request (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      
      servant = servant_upcall.servant ();
    }
  else
    {
      servant = obj->_servant ();
    }
  
  int status = servant->_find (op,
                               collocated_skel,
                               strategy,
                               op_len);
  
  if (status == -1)
    {
      ACE_THROW (CORBA::BAD_OPERATION ());
    }
  
  ACE_TRY
    {
      collocated_skel (servant,
                       args,
                       num_args
                       ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
#if (TAO_HAS_MINIMUM_CORBA == 0)
  ACE_CATCH (PortableServer::ForwardRequest, forward_request)
    {
      forward_obj =
        CORBA::Object::_duplicate (forward_request.forward_reference.in ());
      return;
    }
#else
  ACE_CATCHANY
    {
      ACE_UNUSED_ARG (forward_obj);
      ACE_RE_THROW;
    }
#endif /* TAO_HAS_MINIMUM_CORBA */
  ACE_ENDTRY;
  ACE_CHECK;
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:648

TAO::Collocation_Proxy_Broker *
ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_function (CORBA::Object_ptr)
{
  return
    ::POA_ReceptaclesMultiple::_TAO_ObjectFoo_Strategized_Proxy_Broker::the_TAO_ObjectFoo_Strategized_Proxy_Broker ();
}

int
ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_Initializer (size_t)
{
  ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_function_pointer = 
    ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<
          size_t> (
          ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_Initializer
        )
    );


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

// TAO_IDL - Generated from
// be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:37

POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::_TAO_ObjectFoo_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::connect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::ExceededConnectionLimit,
    ::Components::InvalidConnection
  ))
{
  ((TAO::Arg_Traits< ::Components::Cookie>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::ObjectFoo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/ObjectFoo:1.0"
          )
      )->connect_foo (
          ((TAO::Arg_Traits< CORBA::Object>::in_arg_val *) args[1])->arg ()
          ACE_ENV_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::disconnect_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException,
    ::Components::InvalidConnection
  ))
{
  ((TAO::Arg_Traits< CORBA::Object>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::ObjectFoo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/ObjectFoo:1.0"
          )
      )->disconnect_foo (
          ((TAO::Arg_Traits< ::Components::Cookie>::in_arg_val *) args[1])->arg ()
          ACE_ENV_ARG_PARAMETER
        );
  ACE_CHECK;
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:52

void
POA_ReceptaclesMultiple::_TAO_ObjectFoo_ThruPOA_Proxy_Impl::get_connections_foo (
    TAO_Abstract_ServantBase *servant,
    TAO::Argument ** args,
    int 
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ((TAO::Arg_Traits< ::ReceptaclesMultiple::ObjectFoo::fooConnections>::ret_val *) args[0])->arg () =
    reinterpret_cast<
        POA_ReceptaclesMultiple::ObjectFoo_ptr> (
        servant->_downcast (
            "IDL:ReceptaclesMultiple/ObjectFoo:1.0"
          )
      )->get_connections_foo (
          ACE_ENV_SINGLE_ARG_PARAMETER
        );
  ACE_CHECK;
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_ReceptaclesMultiple::ObjectFoo::ObjectFoo (void)
{
  this->optable_ = &tao_ReceptaclesMultiple_ObjectFoo_optable;
}

POA_ReceptaclesMultiple::ObjectFoo::ObjectFoo (const ObjectFoo& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_Components, Navigation) (rhs),
    ACE_NESTED_CLASS (POA_Components, Receptacles) (rhs),
    ACE_NESTED_CLASS (POA_Components, Events) (rhs),
    ACE_NESTED_CLASS (POA_Components, CCMObject) (rhs)
{
}

POA_ReceptaclesMultiple::ObjectFoo::~ObjectFoo (void)
{
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::ObjectFoo::connect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::ObjectFoo *> (
        _tao_servant
      );
  ::Components::Cookie_var _tao_retval;
  ::CORBA::Object_var connection;
  
  if (!(
      (_tao_in >> connection.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_connect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      connection.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->connect_foo (
                  connection.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::Components::Cookie * _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::ObjectFoo::disconnect_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
    TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::ObjectFoo *> (
        _tao_servant
      );
  CORBA::Object_var _tao_retval;
  ::Components::Cookie_var ck;
  
  if (!(
      (_tao_in >> ck.out ())
      ))
    {
      TAO_InputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
    }
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_disconnect_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      
      ck.in ()
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->disconnect_foo (
                  ck.in ()
                  ACE_ENV_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          CORBA::Object_ptr _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:98

void POA_ReceptaclesMultiple::ObjectFoo::get_connections_foo_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_servant,
    void *_tao_servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    static_cast<
        POA_ReceptaclesMultiple::ObjectFoo *> (
        _tao_servant
      );
  ::ReceptaclesMultiple::ObjectFoo::fooConnections_var _tao_retval;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    static_cast<
        TAO_Object_Adapter::Servant_Upcall *> (
        _tao_servant_upcall
      );
    
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_ReceptaclesMultiple_ObjectFoo_get_connections_foo _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
      ACE_ENV_ARG_PARAMETER
    );
  
  ACE_TRY
    {
      {
        TAO::PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                            true  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;
        
        if (!_tao_vfr.location_forwarded ())
          {
#endif /* TAO_HAS_INTERCEPTORS */
            _tao_retval = 
              _tao_impl->get_connections_foo (
                  ACE_ENV_SINGLE_ARG_PARAMETER
                );
            TAO_INTERCEPTOR_CHECK;
#if (TAO_HAS_INTERCEPTORS == 1)
          }
      }
      
      if (!_tao_vfr.location_forwarded ())
        {
          ::ReceptaclesMultiple::ObjectFoo::fooConnections * _tao_retval_info = _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
          _tao_vfr.send_reply (&_tao_ri ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        {
          ACE_RE_THROW;
        }
    }
  
# if defined (ACE_HAS_EXCEPTIONS) \
  && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
  ACE_CATCHALL
    {
      CORBA::UNKNOWN ex;
      
      _tao_ri.exception (&ex);
      _tao_vfr.send_exception (
          &_tao_ri
          ACE_ENV_ARG_PARAMETER
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
        ACE_TRY_THROW (ex);
    }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
#if (TAO_HAS_INTERCEPTORS == 1)
  if (!_tao_vfr.location_forwarded ())
    {
#endif /* TAO_HAS_INTERCEPTORS */
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      if (!(
          (_tao_out << _tao_retval.in ())
          ))
        {
          TAO_OutputCDR::throw_skel_exception (errno ACE_ENV_ARG_PARAMETER);
          ACE_CHECK;
        }
#if (TAO_HAS_INTERCEPTORS == 1)
    }
#endif /* TAO_HAS_INTERCEPTORS */
  
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:162

void POA_ReceptaclesMultiple::ObjectFoo::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    (POA_ReceptaclesMultiple::ObjectFoo *) _tao_servant;
  
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  
  if (!(_tao_in >> value.out ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
  
  _tao_retval = _tao_impl->_is_a (value.in () ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::ObjectFoo::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    (POA_ReceptaclesMultiple::ObjectFoo *) _tao_servant;
  
  CORBA::Boolean _tao_retval =
    _tao_impl->_non_existent (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::ObjectFoo::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_servant,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    (POA_ReceptaclesMultiple::ObjectFoo *) _tao_servant;
  
  CORBA::InterfaceDef_ptr _tao_retval = 
    _tao_impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  CORBA::Boolean _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

void POA_ReceptaclesMultiple::ObjectFoo::_component_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */
    ACE_ENV_ARG_DECL
  )
{
  POA_ReceptaclesMultiple::ObjectFoo *_tao_impl =
    (POA_ReceptaclesMultiple::ObjectFoo *) _tao_object_reference;
  
  CORBA::Object_var _tao_retval =
    _tao_impl->_get_component (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(_tao_out << _tao_retval.in ()))
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_ReceptaclesMultiple::ObjectFoo::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Navigation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Receptacles:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Events:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:ReceptaclesMultiple/ObjectFoo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

void* POA_ReceptaclesMultiple::ObjectFoo::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Navigation:1.0") == 0)
    {
      return static_cast<POA_Components::Navigation_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Receptacles:1.0") == 0)
    {
      return static_cast<POA_Components::Receptacles_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/Events:1.0") == 0)
    {
      return static_cast<POA_Components::Events_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/Components/CCMObject:1.0") == 0)
    {
      return static_cast<POA_Components::CCMObject_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:ReceptaclesMultiple/ObjectFoo:1.0") == 0)
    {
      return static_cast<POA_ReceptaclesMultiple::ObjectFoo_ptr> (this);
    }
  
  if (ACE_OS::strcmp (logical_type_id,
                      "IDL:omg.org/CORBA/Object:1.0") == 0)
    {
      return static_cast<PortableServer::Servant> (this);
    }
  
  return 0;
}

const char* POA_ReceptaclesMultiple::ObjectFoo::_interface_repository_id (void) const
{
  return "IDL:ReceptaclesMultiple/ObjectFoo:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:584

void POA_ReceptaclesMultiple::ObjectFoo::_dispatch (
    TAO_ServerRequest &req,
    void *servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:526

ReceptaclesMultiple::ObjectFoo *
POA_ReceptaclesMultiple::ObjectFoo::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 1, this),
          0
        );
    }
  else
    {
      ACE_NEW_RETURN (
          tmp,
          CORBA::Object (stub, 0, this),
          0
        );
    }
  
  CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::ReceptaclesMultiple::ObjectFoo STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ReceptaclesMultiple__TAO_ObjectFoo_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */
