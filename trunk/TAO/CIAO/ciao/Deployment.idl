// $Id$
#include "Packaging_Data.idl"
#include "ServerResources.idl"

module Deployment {

  exception ResourceNotAvailable {
    string name;
    string resourceType;
    string propertyName;
    string elementName;
    string resourceName;
  };

  exception PlanError {
    string name;
    string reason;
  };

  exception InvalidProperty {
    string name;
    string reason;
  };

  exception NameExists {
  };

  exception PackageError {
    string source;
    string reason;
  };

  exception NoSuchName {
  };

  exception LastConfiguration {
  };

  exception InvalidReference {
  };

  interface ApplicationManager {
    Application startLaunch (in Properties configProperty,
                             out Connections providedReference,
                             in boolean start)
      raises (ResourceNotAvailable, StartError, InvalidProperty);
    void destroyApplication (in Application app)
      raises (StopError);
  };

  typedef sequence < Application > Applications;

  /// CIAO 's DomainApplicationManager interface differs spec-defined interface
  /// in the same that it also integrates the spec-defined interface for
  /// DomainApplication into itself
  interface DomainApplicationManager
  {
    DeploymentPlan getPlan ();


    /// CIAO specific version of startLaunch implementation, this one
    /// differs with spec-defined operation in the sense that it doesn't
    /// return DomainApplication object reference.

    void startLaunch (in Properties configProperty, in boolean start)
      raises (ResourceNotAvailable, StartError, InvalidProperty);

    void finishLaunch (in boolean start, 
                       in boolean is_ReDAC)
      raises (StartError, InvalidConnection);

    void start ()
      raises (StartError);

    void destroyApplication ()
      raises (StopError);

    void destroyManager ()
      raises (StopError);

    // Perform the actual redeployment and reconfiguration on the dommain level.
    void perform_redeployment (in DeploymentPlan new_plan)
      raises (PlanError,
              InstallationFailure,
              UnknownImplId,
              ImplEntryPointNotFound,
              InvalidConnection,
              InvalidProperty,
              ::Components::RemoveFailure);
  };

  typedef sequence < DomainApplicationManager > DomainApplicationManagers;

  interface ExecutionManager {
    DomainApplicationManager preparePlan (in DeploymentPlan plan, 
                                          in boolean commitResources)
      raises (ResourceNotAvailable, PlanError, StartError);
    DomainApplicationManagers getManagers ();
    void destroyManager (in DomainApplicationManager manager)
      raises (StopError);

    /// CIAO specific operation to handle dynamic system redeployment
    /// and reconfiguration
    /// This operation could handle dynamic redeployment, and this
    /// is the operation exposed to clients directly. Other 
    /// "perform_redeployment" operation defined on DAM and NA
    /// are implementaion details within DAnCE.
    void perform_redeployment (in DeploymentPlan new_plan)
      raises (PlanError,
              InstallationFailure,
              UnknownImplId,
              ImplEntryPointNotFound,
              InvalidConnection,
              InvalidProperty,
              ::Components::RemoveFailure);

    // Get operation
    DeploymentPlan getPlan (in string plan_uuid);
  };

  interface TargetManager {
    Domain getAllResources ();
    Domain getAvailableResources ();
    void commitResources (in DeploymentPlan plan)
      raises (ResourceNotAvailable, PlanError);
    void releaseResources (in DeploymentPlan argname);
    void updateDomain (in ::CORBA::StringSeq elements,
                       in Domain domainSubset, 
                       in DomainUpdateKind updateKind);
  };

  interface Logger {
  };

  interface NodeApplicationManager :
      ApplicationManager
  {
    /// CIAO specific operation to handle dynamic system redeployment
    /// and reconfiguration
    /// This operation could handle dynamic redeployment for
    /// a node-level deployment plan within a node
    Application perform_redeployment (in Properties configProperty, 
                                      out Connections providedReference,
                                      in boolean start)
      raises (PlanError,
              InstallationFailure,
              UnknownImplId,
              ImplEntryPointNotFound,
              InvalidConnection,
              InvalidProperty,
              ::Components::RemoveFailure);

      void reset_plan (in DeploymentPlan plan);
  };

  interface NodeManager {
    void joinDomain (in Domain ciao_domain, 
                     in TargetManager manager,
                     in Logger log);
    void leaveDomain ();
    NodeApplicationManager preparePlan (in DeploymentPlan plan)
      raises (StartError, PlanError);
    void destroyManager (in NodeApplicationManager appManager)
      raises (StopError, InvalidReference);
  };

  interface RepositoryManager {
    void installPackage (in string installationName, in string location)
      raises (NameExists, PackageError);
    void createPackage (in string installationName, 
                        in PackageConfiguration package,
                        in string baseLocation,
                        in boolean replace)
      raises (NameExists, PackageError);
    PackageConfiguration findPackageByName (in string name)
      raises (NoSuchName);
    PackageConfiguration findPackageByUUID (in string UUID)
      raises (NoSuchName);
    ::CORBA::StringSeq findNamesByType (in string type);
    ::CORBA::StringSeq getAllNames ();
    ::CORBA::StringSeq getAllTypes ();
    void deletePackage (in string installationName)
      raises (NoSuchName);
  };


//***************************************new_RepositoryManager ONWARDS*****************************************


	typedef sequence<octet> Artifact;
	typedef sequence<octet> Package;

	exception NoPlan {
	};

	enum Platform {
		Win32,
		Unix,
		Linux,
		Solaris,
		Vxworks,
		UNDEF
	};

	struct Implementation
	{
		Platform the_platform;
		string name;
		Artifact the_implementation;
	};

	typedef sequence<Implementation> Implementations;

	interface new_RepositoryManager 
	{
		void installPackage (in string installationName,
                         in Package the_package,
                         in boolean replace)
	      raises (NameExists, PackageError);

		DeploymentPlan	retrievePlan (in string packageName)
			raises (NoPlan);

	    Package findPackageByName (in string name)
	      raises (NoSuchName);
	
		Implementation findImplementationByName (in string implementation_name,
                                             in string package_name)
	      raises (NoSuchName);

	    Package findPackageByUUID (in string UUID)
	      raises (NoSuchName);
	
	    Implementation findImplementationByUUID (in string UUID)
	      raises (NoSuchName);
	

	    //::CORBA::StringSeq findNamesByType (in string type);
	    //::CORBA::StringSeq getAllTypes ();

		::CORBA::StringSeq getAllPackageNames ();
	    
		void deletePackage (in string installationName)
	      raises (NoSuchName);
	};
};
