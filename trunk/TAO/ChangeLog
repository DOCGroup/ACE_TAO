Thu Apr 10 07:06:07 2003 Pradeep Gore <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/RT_lib/Makefile:
	* orbsvcs/tests/Notify/Test_Filter/Makefile:
	  Added missing linkage to RTCORBA.

	* orbsvcs/tests/Notify/ThreadPool/supplier.conf:
	  Corrected the names of the library loaded.

	* orbsvcs/orbsvcs/.depend.Makefile.RT_Notification:
	* orbsvcs/orbsvcs/Makefile.RT_Notification:
	  Added missing Structured/RT_StructuredProxyPushSupplier.cpp

	* orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp
	  Corrected ENV usage.

Thu Apr 10 15:01:18 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * docs/Options.html:

          Add description of the new codeset related resource factory
          options. These are -ORBNative[W]CharCodeset,
          -ORB[W]CharCodesetTranslator.

Thu Apr 10 01:39:23 2003 Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Destroy/Makefile:
	* orbsvcs/tests/Notify/Destroy/.depend.Makefile:
	  Corrected the Makefile.

Thu Apr 10 10:39:02 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:

          Moved template specializations to the top of the source file
          and removed the declarations in the header file. Thanks to
          Johnny Willemsen <jwillemsen@remedy.nl> for his help with
          fixing this BCB problem.

Thu Apr 10 10:30:33 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/default_client.cpp:
	* tao/default_client.h:
	* tao/Client_Strategy_Factory.cpp:
	* tao/Client_Strategy_Factory.h: Added a new -ORB option,
	  -ORBTransporMuxStrategyLock, and a accessor
	  create_transport_mux_strategy_lock () that  returns the lock
	  created by the strategy factory. The options and the accessor
	  helps the user to use either a locked or a lock free transport
	  muxed strategy. Please see the documentation in
	  docs/Options.html for details on how to use this.

	* tao/Transport_Mux_Strategy.cpp:
	* tao/Transport_Mux_Strategy.h: Added a lock to the muxed strategy
	  class. The lock will actually be created, and used by the
	  concrete strategies. Looks like the all the concrete strategies
	  may require some type of strategized locking. Hence this has
	  been moved here with a purpose.

	* tao/Muxed_TMS.cpp:
	* tao/Muxed_TMS.h: Removed the hard coded recursive mutex, and used
	  the strategized lock created by the client strategy factory
	  instead.

	  This fixes BUG 1491 and thanks again to Carlos for motivating
	  this change.

	* docs/Options.html: Added documentation for the new options.

Thu Apr 10 13:40:02 CEST 2003  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
	* orbsvcs/orbsvcs/Event/Event_Channel.{h,cpp}:

	  Use ACE_Unbounded_Set_Ex instead of ACE_Unbounded_Set.
	  This fixes bug 1465 for RTEC.

Thu Apr 10 06:27:14 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/orbconf.h:
	* tao/params.cpp: Added a compile time option to configure the
	  DefaultInitRef. It was hardcoded to mcast://:::

	  Thanks to Carlos O'Ryan for the patch. This shold fix BUG 1488.

Thu Apr 10 000:08:15 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/TAO_Static.dsp:

          Updated project settings.

Wed Apr  9 23:23:17 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Param_Test/server.cpp:

          Added 'const' to a static char& definition which has a string
          literal on the rhs. SunOS FORTE complained about it.

Wed Apr  9 23:09:09 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/tmplinst.cp:

          Fixed typos.

Wed Apr  9 22:50:12 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Fixed formatting in generated code for _unchecked_narrow().

        * TAO_IDL/be/be_visitor_component/component_cs.cpp:

          Fixed logic in code generation of _unchecked_narrow(). Thanks
          to Nanbor Wang <nanbor@cse.wustl.edu> for reporting the problem.

Wed Apr  9 15:28:47 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Stub.h (object_key):
	* tao/Stub.cpp: Added a new method object_key (). The methodology
	  adopted by the skeletons in the collocated cases could lead to
	  crashes if TAO_Stub::profile_in_use_ wasnt set. The method that
	  has been added should get around that problem, by always
	  returning a usable object key.

	* tao/Domain/DomainS.cpp:
	* tao/PortableServer/ImR_LocatorS.cpp:
	* tao/PortableServer/ImplRepoS.cpp:
	* tao/PortableServer/PolicyS.cpp:
	* tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
	* tao/RTPortableServer/RT_Collocation_Resolver.cpp:
	* orbsvcs/orbsvcs//IFRService/IFR_BaseS.cpp:
	* orbsvcs/orbsvcs//IFRService/IFR_BasicS.cpp:
	* orbsvcs/orbsvcs//IFRService/IFR_ComponentsS.cpp:
	* orbsvcs/orbsvcs//IFRService/IFR_ExtendedS.cpp:
	* orbsvcs/orbsvcs//IFRService/IFR_Service_Utils.cpp: Edited the
	  collocated portion of the generated code to use the above method.

	* TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
	  Use the above method in TAO_Stub to access the object_key.  This
	  should fix [BUG 1483].

Wed Apr 09 14:54:03 2003  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Destroy/main.cpp:
	  Invokes the NotifyExt::EventChannelFactory::destroy method.

	* orbsvcs/tests/Notify/Destroy/Destroy.mpc:
	* orbsvcs/tests/Notify/Destroy/Makefile:
	* orbsvcs/tests/Notify/Destroy/Notify_Test_Destroy.dsp:
	  Makefiles.

	* orbsvcs/tests/Notify/Makefile:
	* orbsvcs/tests/Notify/Notify_Tests.dsw:
	  Added the <Destroy> test.

	* orbsvcs/tests/Notify/lib/Makefile.bor:
	  Move the Activation_ManagerC to the top of the Makefile to fix
	  compile errors. Thanks to Johnny Willemsen
	  <jwillemsen@remedy.nl> for this suggestion.


Wed Apr  9 13:47:26 2003  Stuart Jones  <jones_s@ociweb.com>

	* tao/Messaging/Messaging.cpp

	  Added code to register exception pointer with ACE_Auto_Basic_Ptr
	  when TAO is compiled with exceptions. When using AMI, a leak
	  appeared if an exception was raised.  The exception was created
	  on the heap, but the "raise" made a copy of this on the stack.
	  See DOC bug# 1487.

Wed Apr  9 17:12:23 UTC 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        List of changed gathered the last weeks by me and Mark Drijver
        <mdrijver@remedy.nl>.

        * Makefile.bor:
          Removed nightlybuild because it is not needed anymore. Added
          orbsvcs/examples to the list of directories to build with a full
          build.

        * orbsvcs/examples/Makefile.bor:
        * orbsvcs/examples/RtEC/Makefile.bor:
        * orbsvcs/examples/RtEC/Simple/EC_Simple_Consumer.bor:
        * orbsvcs/examples/RtEC/Simple/EC_Simple_Service.bor:
        * orbsvcs/examples/RtEC/Simple/EC_Simple_Supplier.bor:
        * orbsvcs/examples/RtEC/Simple/Makefile.bor:
        * orbsvcs/examples/Security/Makefile.bor:
        * orbsvcs/examples/Security/Send_File/Makefile.bor:
        * orbsvcs/examples/Security/Send_File/client.bor:
        * orbsvcs/examples/Security/Send_File/server.bor:
          Added these new BCB makefiles to build these examples with BCB.

        * orbsvcs/examples/RtEC/Simple/Consumer.cpp:
        * orbsvcs/examples/RtEC/Simple/Service.cpp:
        * orbsvcs/examples/RtEC/Simple/Supplier.cpp:
        * orbsvcs/examples/RtEC/Simple/run_test.pl:
        * orbsvcs/examples/RtEC/Simple/README:
          Extended this example so that the Naming Service is used to locate
          the Event Service. This makes it a lot easier to use this test
          because we don't have to copy the IOR of the Event Service to the
          commandline options of the consumer and supplier.

        * docs/cec_options.html:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.i:
        * orbsvcs/orbsvcs/CosEvent/CEC_Defaults.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.h:
          When CECConsumerControl or CECSupplierControl is set to reactive the
          consumer/supplier was called and when the call took more than 10ms
          the consumer/supplier was assumed to be died. These 10ms was
          hardcoded and couldn't be configured. This is a problem on a WAN
          where just the method call can take 100ms. The CosEvent is extended
          with CECConsumerControlTimeout and CECSupplierControlTimeout with
          which this timeout can be specified.

        * docs/ec_options.html:
        * orbsvcs/orbsvcs/Event/EC_Basic_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.i:
        * orbsvcs/orbsvcs/Event/EC_Defaults.h:
        * orbsvcs/orbsvcs/Event/EC_ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.h:
          When ECConsumerControl or ECSupplierControl is set to reactive the
          consumer/supplier was called and when the call took more than 10ms
          the consumer/supplier was assumed to be died. These 10ms was
          hardcoded and couldn't be configured. This is a problem on a WAN
          where just the method call can take 100ms. The RTEvent is extended
          with ECConsumerControlTimeout and ECSupplierControlTimeout with
          which this timeout can be specified.

        * orbsvcs/tests/Makefile.bor:
          Added Bug_1393_Regression to the list of directories to build.

        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
          Only build this test when the Notify and Naming service are build.

        * tao/Connection_Handler.cpp:
        * tao/IIOP_Acceptor.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Transport.cpp:
        * tao/Invocation.cpp:
        * tao/Transport.cpp:
        * tao/Transport_Cache_Manager.cpp:
        * tao/Messaging/Connection_Timeout_Policy_i.cpp:
        * tao/Messaging/Messaging_Policy_i.cpp:
          Improved debugging lines to make the logs more readable, some lines
          where incompletely printed.

        * tao/ORBInitializer_Registry.cpp:
        * tao/ORB_Core.cpp:
        * tao/ORB_Table.cpp:
        * tao/ValueFactory_Map.cpp:
          For VxWorks, AIX and HPUX explicit instantiate static template
          member. Fixes problems when using implicit template instantiations.

        * tao/Server_Strategy_Factory.h:
          Converted documentation to doxygen style.

        * tao/RTCORBA/RT_Mutex.h:
        * tao/RTCORBA/RT_ORBInitializer.h:
        * tao/RTCORBA/RT_Protocols_Hooks.h:
        * tao/RTCORBA/RT_Stub.h:
        * tao/RTCORBA/RT_Thread_Lane_Resources_Manager.h:
        * tao/RTCORBA/Thread_Pool.h:
        * tao/TypeCodeFactory/TypeCodeFactory_i.h:
          Improved doxygen documentation.

        * tests/CodeSets/libs/IBM1047_ISO8859/Makefile:
        * tests/DLL_ORB/Makefile.Test_Client_Module:
        * tests/DLL_ORB/Makefile.Test_Server_Module:
          Set correct BUILD_DLL defines for Cygwin/MingW/Kylix.

        * tests/TestUtils/TestCombinedThreads.h:
          Don't forward declare ACE_CString but include correct file. Fixes a
          VxWorks error.

Wed Apr 09 17:54:59 2003  Simon McQueen  <sm@prismtechnologies.com>

	* tests/AMI_Buffering/admin.dsp:
	* tests/OBV/Any/client.dsp: Couple of RTTI settings that got missed.

Wed Apr  9 11:19:42 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tests/Bug_1482_Regression/Client_Task.h:
	* tests/Bug_1482_Regression/Client_Task.cpp: Minor memory
	  management tweaks to prevent the test from dumping a core during
	  exit.

Wed Apr 09 16:41:18 2003  Simon McQueen  <sm@prismtechnologies.com>

	* orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp: Fixed path to
	  tao_idl in release configuration.

Wed Apr  9 16:00:23 2003  Dave Smith  <dts@prismtechnologies.com>

	* tao/Any_T.cpp:
	* orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:

	  Fixed compile problems with HPUX and Windows.

Wed Apr  9 09:40:43 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Param_Test.server.cpp:
        * tests/Portable_Interceptors/AMI/client.cpp:

          Fixed warnings.

Wed Apr  9 08:23:28 2003  Chad Elliott  <elliott_c@ociweb.com>

        * tao/tao.mpc:

          Remove the 'tao' assignment.  It is now dynamically determined.

Wed Apr 09 07:47:52 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression/server.dsp: Added -GC to the release
          configuration.

Wed Apr  9 14:34:52 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1482_Regression/client.bor:
        * tests/Bug_1482_Regression/server.bor:
          Added -GC to the IDL compiler options, added Messaging to the
          server makefile.

Wed Apr  9 11:01:12 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1482_Regression/client.bor:
          Fixed error in this BCB makefile.

Tue Apr  8 23:52:35 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Added 'using namespace TAO' and removed 'TAO::' from template
          specializations at the top of the file, which were confusing
          Sun Forte. Thanks to Bala <bala@isis-server.isis.vanderbilt.edu>
          for coming up with the fix and to Irfan Pyarali <ifran@oomworks.com>
          for reporting the problem.

Tue Apr  8 18:46:17 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:

          Added generation of virtual marshal() method to correspond to
          the recent addition of this method to interface code generation.

Tue Apr 08 17:45:50 2003  Nanbor Wang  <nanbor@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_component/component_ch.cpp
          (visit_component): Removed a redundant closing paren.

Tue  Apr 8 13:20:02 2003 Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp:
          Method <destroy>: Removed extraneous call to shutdown ec_container_.

        * orbsvcs/orbsvcs/Notify/Object.cpp:
          Eat exceptions in the <deactivate> method.
          Shutdown the proxy_poa_ and object_poa_ in the destructor.

        * orbsvcs/orbsvcs/Notify/Property_T.cpp:
          Method <set>: Check to see if the >>= operator returned success.

        * orbsvcs/orbsvcs/Notify/QoSProperties.cpp:
          Method <init>: Try to set the individual QoS properties only if some properties are available.

        * orbsvcs/tests/Notify/ThreadPool/consumer.conf:
          Corrected formatting of the conf. file.

        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/Notify_Tests.dsw:
          Corrected  to fix compile errors.

Tue Apr  8 16:38:00 2003  Dave Smith  <dts@prismtechnologies.com>

        * tao/Any_T.cpp:

        Fixed compile errors in tests/IDL_Test for HPUX build.

Tue Apr 08 10:39:22 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/AMI_Buffering/client.dsp:
        * tests/AMI_Buffering/server.dsp:
        * tests/AMI_Buffering/admin.dsp: Turned on RTTI to prevent
          warnings in release builds.

Tue Apr 08 10:31:48 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression/server.dsp:
        * tests/Bug_1482_Regression/client.dsp: Fixed the release build
          configuration.

Tue Apr  8 17:01:55 CEST 2003  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:

          Adjusted explicit template instantiations to ACE_Unbounded_Set_Ex.

Tue Apr  8 000:00:06 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/DynamicInterface/DII_Invocation.cpp:

          Fixed exception handling.

        * tests/Param_Test/except.cpp:

          Cosmetic changes.

        * tests/Param_Test/client.cpp:
        * tests/Param_Test/options.cpp:
        * tests/Param_Test/server.cpp:

          Changes to allow a default filename for the server's IOR.

Mon Apr  7 19:20:55 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp (visit_eventtype):

          Fixed resetting of context states in this method.

Mon Apr  7 16:53:24 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/DynamicAny/DynCommon.cpp (get_any):

          Another stab at making all our compilers happy with
          temporary variations in constness.

Mon Apr 07 14:11:02 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Supplier:
          Corrected the code to populate the Any data with a payload.

Mon Apr  7 11:56:59 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_root/root.cpp (visit_root):

          Added a check at this higher level before creating and
          launching a visitor for OBV_* module code. This visitor
          should not be created unless we are generating code in
          stub files. Formerly the check of context state that catches
          this was done at a lower level, in visit_* methods of
          subclassed visitors. One case for eventtypes was missed,
          which was the cause of the invesitgation.

        * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp (visit_eventtype):

          Removed error message for case which is now caught at a
          higher level as described above, and made other cosmetic
          changes to the source code. Thanks to Nanbor Wang
          <nanbor@cse.wustl.edu> for reporting the problem.

Mon Apr  7 10:39:23 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/DynamicAny/DynCommon.cpp (get_any):

          Removed const cast from rhs of Any extraction.

Sun Apr  6 23:34:23 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/OBV/Any/server.dsp:
        * tests/OBV/Factory/client.dsp:
        * tests/OBV/Factory/server.dsp:
        * tests/OBV/Forward/client.dsp:
        * tests/OBV/Forward/server.dsp:
        * tests/OBV/TC_Alignment/client.dsp:
        * tests/OBV/TC_Alignment/server.dsp:
        * tests/Param_Test/anyop.dsp:

          Turned on RTTI for some configurations of these projects.

Sun Apr  6 23:18:35 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.h:

          Changed declaration of exported insertion and extraction
          operators for Any_var to be predicated on __ACE_INLINE__
          not being defined.

Sun Apr  6 22:40:01 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/RTCORBA/RTCORBAC.cpp:

          Fixed and cut and paste error.

Sun Apr  6 21:26:24 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Suppler.cpp:

          Changed use of Any extraction operator to use spec-preferred
          const Any*.

Sun Apr  6 18:03:45 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_helper.cpp:

          Added ISIS info to Wash U and Irvine info displayed at the top
          of each generated IDL file.

Sun Apr  6 17:37:24 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Portable_Interceptors/AMI/client.cpp:

          Modified code to make it possible to change the number of iterations
          in 3 separate loops and in correctness checks by changing one
          constant at the top of the file.

        * tests/Portable_Interceptors/Benchmark/server.cpp:
        * tests/Portable_Interceptors/Dynamic/server.cpp:
        * tests/Portable_Interceptors/IORInterceptor/server.cpp:
        * tests/Portable_Interceptors/PICurrent/server.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/server.cpp:

          Added default IOR filename.

Sun Apr  6 15:04:35 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any_T.cpp:
        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynArray_i.cpp:
        * tao/DynamicAny/DynEnum_i.cpp:
        * tao/DynamicAny/DynSequence_i.cpp:
        * tao/DynamicAny/DynStruct_i.cpp:
        * tao/DynamicAny/DynUnion_i.cpp:
        * tests/DynAny_Test/test_dynarray.cpp:
        * tests/DynAny_Test/test_dynstruct.cpp:
        * tests/DynAny_Test/test_dynunion.cpp:

          Changes necessary to get the DynAny tests to build and run
          successfully.

        * tao/Any.cpp:
        * tao/Any.h:
        * tests/Param_Test/typecode.cpp:

          Modified CORBA::TypeCode Any insertion operator to have copying
          and non-copying versions, as do CORBA::Any and CORBA::Object.
          Also modified Param Test file to use the copying version.

        * tests/DynAny_Test/Makefile:
        * tests/DynAny_Test/Makefile.bor:
        * tests/DynAny_Test/basic_test.dsp:

          Removed generated skeleton files from project and makefile.
          Although it is necessary to link to PortableServer in
          order to generate object references for testing, these
          are of type CORBA::Object and the skeleton files are
          not needed.

Sun Apr  6 09:26:18 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/.depend.Makefile.RT_Notification

Sat Apr  5 15:11:45 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/DynamicAny/DynCommon.cpp:

          Changed the type of a cast to const Any *& to eliminate
          a build error that somehow didn't show up before the
          last checkin.

Sat Apr  5 09:58:37 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/tests/Notify/RT_lib/TAO_RT_NotifyTests.dsp:
          Added missing path to ../lib

Fri Apr  4 19:46:27 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:
        * tao/Any.h:
        * tao/Any.i:
        * tao/Any_T.h:

          Changes to fix errors in Param_Test. Removed
          the special class and demarshaling code for the case
          where an Any contains an Any, it is now handled by
          Any_Dual_Impl_T. Also removed the non-spec extraction
          operator to CORBA::Any&.

        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynCommon.cpp:

          Changes to use the compliant Any extraction operator
          to const Any*, instead of the removed signature above.

        * tests/Param_Test/bd_short_seq.cpp:
        * tests/Param_Test/complex_any.cpp:
        * tests/Param_Test/nested_struct.cpp:
        * tests/Param_Test/objref_struct.cpp:

          Fixed errors in debugging code.

        * tests/Param_Test/typecode.cpp:

          Added duplication to Any insertion in DII version of
          the test, since there is no copying Any insertion for
          CORBA::TypeCode_ptr, as there is for CORBA::Object and
          other interfaces.

Fri Apr  4 12:06:34 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * tao/Any_T.cpp:
        * tao/Any_T.h:
        * tao/Any_T.inl:
        * tao/skip.cpp:

          Fixed problems with demarshaling Anys that contain arrays
          or unions with an enum discriminator type. Thanks to
          Phil Mesnier <mesnier_p@ociweb.com> for reporting the
          problem with arrays. Also changed the name of the first
          template parameter in Any_Array_Impl_T to T_slice, since
          it is the array slice pointer that is used for this
          parameter when instantiating the template class.

Fri Apr 04 10:43:55 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
          Removed default from ENV parameter.

        * orbsvcs/tests/Notify/lib/Makefile.bor:
        * orbsvcs/tests/Notify/Test_Filter/Makefile.bor:
          Updated.

Fri Apr 04 07:06:33 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/tests/Notify/lib/Activation_Manager.h:
          Use TAO_SYNCH_MUTEX instead of ACE_Condition_Thread_Mutex

Fri Apr 04 07:06:33 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/tests/Notify/lib/Periodic_Consumer_Command.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Supplier_Command.cpp:
          Added check for TAO_HAS_MINIMUM_CORBA in <handle_status>.

Fri Apr  4 07:05:29 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression/srver.bor: Fixed a typo. Thanks to
          Johnny for reporting the problem.

Thu Apr 03 13:31:17 2003  Pradeep Gore  <pradeep@oomworks.com>

        Added RT_Notification service and tests implementation -

        * orbsvcs/orbsvcs/Notify/RT_Builder.cpp:
        * orbsvcs/orbsvcs/Notify/RT_Builder.h:
        * orbsvcs/orbsvcs/Notify/RT_Builder.inl:
          Builder object for RT_Notification.

        * orbsvcs/orbsvcs/Notify/RT_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/RT_Factory.h:
        * orbsvcs/orbsvcs/Notify/RT_Factory.inl:
          Factory object for RT_Notification.

        * orbsvcs/orbsvcs/Notify/RT_Notify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/RT_Notify_Service.h:
        * orbsvcs/orbsvcs/Notify/RT_Notify_Service.inl:
          Service object for RT_Notification.

        * orbsvcs/orbsvcs/Notify/RT_POA_Helper.cpp:
        * orbsvcs/orbsvcs/Notify/RT_POA_Helper.h:
        * orbsvcs/orbsvcs/Notify/RT_POA_Helper.inl:
          RTPortableServer wrapper for RT_Notification

        * orbsvcs/orbsvcs/Notify/RT_Properties.cpp:
        * orbsvcs/orbsvcs/Notify/RT_Properties.h:
          RT_Notification specific properties.

        * orbsvcs/orbsvcs/Notify/rt_notify_export.h:
          RT_Notification export file.

        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/RT_StructuredProxyPushSupplier.inl:
          A Structured ProxySupplier for RT_Notification.

        * orbsvcs/orbsvcs/Makefile
        * orbsvcs/orbsvcs/Makefile.RT_Notification
        * orbsvcs/orbsvcs/orbsvcs.dsw:
        * orbsvcs/orbsvcs/orbsvcs_static.dsw:
          Included the RT_Notification project.

        * orbsvcs/orbsvcs/.depend.RT_Notification:
          Added dependency file.
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
          In <init> method, call TAO_NS_Object::init instead of
          TAO_NS_Proxy::init

        * orbsvcs/tests/Notify/lib/Periodic_Consumer.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Consumer.h:
          Added an option to check if the thread priority matches the
          priority specified in the event received.

        * orbsvcs/tests/Notify/ThreadPool/consumer.conf:
        * orbsvcs/tests/Notify/Lanes/consumer.conf:
          Added the "-Check_Priority" option to the Periodic Consumers.

        * orbsvcs/orbsvcs/Notify/Default_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/RT_Factory.cpp:
          Corrected to ACE_FACTORY_DEFINE macro.

        * orbsvcs/orbsvcs/NotifyExt.idl:
          Extended the ConsumerAdmin and SupplierAdmin interfaces with
          create methods for Proxys with initial QoS parameters.

        * orbsvcs/orbsvcs/Notify/Builder.h:
        * orbsvcs/orbsvcs/Notify/Builder.cpp:
          Revised the <build_proxy> to accept an inital QoS value.

        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
          Implemented the method to create Proxys with initial QoS
          parameters.

        * orbsvcs/orbsvcs/Notify/Proxy.h:
        * orbsvcs/orbsvcs/Notify/Proxy.cpp:
          Overload the <activate> and <deactivate> methods to use the <proxy_poa_>.

        * orbsvcs/orbsvcs/RT_Notification.dsp:
        * orbsvcs/orbsvcs/RT_Notification_Static.dsp:
        * orbsvcs/orbsvcs/RT_Notification.rc:
        * orbsvcs/orbsvcs/RT_Notification.bor:
        * orbsvcs/orbsvcs/Makefile.RT_Notification:
          Added RT_Notification specific files.

        * orbsvcs/tests/Notify/lib/Activation_Manager.cpp:
        * orbsvcs/tests/Notify/lib/Activation_Manager.h:
        * orbsvcs/tests/Notify/lib/Activation_Manager.idl:
          Manages start and shutdown of Periodic Supplier and consumers.

        * orbsvcs/tests/Notify/lib/Command.cpp:
        * orbsvcs/tests/Notify/lib/Command.h:
          Base class of Command objects in the test lib.

        * orbsvcs/tests/Notify/lib/Command_Builder.cpp:
        * orbsvcs/tests/Notify/lib/Command_Builder.h:
          A builder for creating command objects.

        * orbsvcs/tests/Notify/lib/Command_Factory.cpp:
        * orbsvcs/tests/Notify/lib/Command_Factory.h:
        * orbsvcs/tests/Notify/lib/Command_Factory_T.cpp:
        * orbsvcs/tests/Notify/lib/Command_Factory_T.h:
          Base classes for specifying Factory objects for command objects.

        * orbsvcs/tests/Notify/lib/Application_Command.cpp:
        * orbsvcs/tests/Notify/lib/Application_Command.h:
          Command object for specify Application specific commands.

        * orbsvcs/tests/Notify/lib/ConsumerAdmin_Command.cpp:
        * orbsvcs/tests/Notify/lib/ConsumerAdmin_Command.h:
          Command object for specify ConsumerAdmin specific commands.

        * orbsvcs/tests/Notify/lib/Driver_Base.h:
          A base interface for the driver that runs the owns the <main>
          entry point.

        * orbsvcs/tests/Notify/lib/Driver.cpp:
        * orbsvcs/tests/Notify/lib/Driver.h:
          A generic Driver implementation useful for most applications.

        * orbsvcs/tests/Notify/lib/EventChannel_Command.cpp:
        * orbsvcs/tests/Notify/lib/EventChannel_Command.h:
          Command object for specify ConsumerAdmin specific commands.

        * orbsvcs/tests/Notify/lib/Factories_Define.cpp:
        * orbsvcs/tests/Notify/lib/Factories_Define.h:
          Factory definitions are listed here.

        * orbsvcs/tests/Notify/lib/Filter_Command.cpp:
        * orbsvcs/tests/Notify/lib/Filter_Command.h:
          Command object for specify Filter specific commands.

        * orbsvcs/tests/Notify/lib/LookupManager.cpp:
        * orbsvcs/tests/Notify/lib/LookupManager.h:
          Objects of interest to command objects can be registered and
          resolved here.

        * orbsvcs/tests/Notify/lib/Makefile
        * orbsvcs/tests/Notify/RT_lib/Makefile
        * orbsvcs/tests/Notify/Test_Filter/Makefile
          Makefiles.

        * orbsvcs/tests/Notify/lib/Name.cpp:
        * orbsvcs/tests/Notify/lib/Name.h:
          Command names are listed here.

        * orbsvcs/tests/Notify/lib/Notify_StructuredPushConsumer.cpp:
        * orbsvcs/tests/Notify/lib/Notify_StructuredPushConsumer.h:
        * orbsvcs/tests/Notify/lib/Notify_StructuredPushSupplier.cpp:
        * orbsvcs/tests/Notify/lib/Notify_StructuredPushSupplier.h:
          Added a <connect> method that accepts a Proxy reference and its ID.

        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:
          Corrected return of nil interface pointers.

        * orbsvcs/tests/Notify/lib/Notify_lib.mpc:

        * orbsvcs/tests/Notify/lib/Options_Parser.cpp:
        * orbsvcs/tests/Notify/lib/Options_Parser.h:
          A Parser for parsing subscription and QoS options used by
          several command objects.

        * orbsvcs/tests/Notify/lib/Periodic_Consumer.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Consumer.h:
          A periodic consumer.

        * orbsvcs/tests/Notify/lib/Periodic_Consumer_Command.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Consumer_Command.h:
          Command object to specify Periodic Consumer specific commands.

        * orbsvcs/tests/Notify/lib/Periodic_Supplier.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Supplier.h:
          A periodic supplier.

        * orbsvcs/tests/Notify/lib/Periodic_Supplier_Command.cpp:
        * orbsvcs/tests/Notify/lib/Periodic_Supplier_Command.h:
          Command object to specify Periodic Supplier specific commands.

        * orbsvcs/tests/Notify/lib/Priority_Mapping.cpp:
        * orbsvcs/tests/Notify/lib/Priority_Mapping.h:
          Priority mapping that returns the same number.

        * orbsvcs/tests/Notify/lib/RT_Application_Command.cpp:
        * orbsvcs/tests/Notify/lib/RT_Application_Command.h:
          Command object to specify RT Application specific
          commands.

        * orbsvcs/tests/Notify/lib/RT_Factories_Define.cpp:
          List of RT specific command objects.

        * orbsvcs/tests/Notify/lib/RT_POA_Command.cpp:
        * orbsvcs/tests/Notify/lib/RT_POA_Command.h:
          Command object to specify RT POA specific commands.

        * orbsvcs/tests/Notify/lib/RT_Priority_Mapping.cpp:
        * orbsvcs/tests/Notify/lib/RT_Priority_Mapping.h:
          A priority mapper that delegates to RTCORBA.

        * orbsvcs/tests/Notify/lib/RT_Test_Filter.cpp:
        * orbsvcs/tests/Notify/lib/RT_Test_Filter.h:
          An implementation of Filter for verifying ThreadPools and lanes.

        * orbsvcs/tests/Notify/lib/RT_Test_FilterFactory.cpp:
        * orbsvcs/tests/Notify/lib/RT_Test_FilterFactory.h:
          An implementation of FilterFactory.

        * orbsvcs/tests/Notify/lib/StructuredEvent.cpp:
        * orbsvcs/tests/Notify/lib/StructuredEvent.h:
          A helper class for populating a Structured Event.

        * orbsvcs/tests/Notify/lib/SupplierAdmin_Command.cpp:
        * orbsvcs/tests/Notify/lib/SupplierAdmin_Command.h:
          A command object for SupplierAdmin specific commands.

        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests_Static.dsp:
        * orbsvcs/tests/Notify/lib/TAO_RT_NotifyTests.dsp:
        * orbsvcs/tests/Notify/lib/TAO_RT_NotifyTests_Filter.dsp:
        * orbsvcs/tests/Notify/lib/TAO_RT_NotifyTests_Filter_Static.dsp:
        * orbsvcs/tests/Notify/lib/TAO_RT_NotifyTests_Static.dsp:
          VC6 projects.

        * orbsvcs/tests/Notify/lib/Task_Callback.h:
          A callback that is invoked when a periodic supplier/consumer
          ends.

        * orbsvcs/tests/Notify/lib/Task_Stats.cpp:
        * orbsvcs/tests/Notify/lib/Task_Stats.h:
        * orbsvcs/tests/Notify/lib/Task_Stats.inl:
          A class for collecting performance numbers.

        * orbsvcs/tests/Notify/lib/rt_notify_test_export.h:
        * orbsvcs/tests/Notify/lib/rt_test_filter_export.h:
          Export files.

        * orbsvcs/tests/Notify/Driver/main.cpp:
        * orbsvcs/tests/Notify/Driver/Driver.mpc:
        * orbsvcs/tests/Notify/Driver/Driver.dsp:
        * orbsvcs/tests/Notify/Driver/Driver_Static.dsp:
          Driver program for the scripting based tests.

        * orbsvcs/tests/Notify/Driver/ThreadPool/README:
          README
        * orbsvcs/tests/Notify/Driver/ThreadPool/supplier.conf:
          Supplier configuration.
        * orbsvcs/tests/Notify/Driver/ThreadPool/consumer.conf:
          Consumer configuration.
        * orbsvcs/tests/Notify/Driver/ThreadPool/notify.conf:
          RT Notification conf.
        * orbsvcs/tests/Notify/Driver/ThreadPool/run_test.pl:
          perl script to run the test.

        * orbsvcs/tests/Notify/Driver/Lanes/README:
          README
        * orbsvcs/tests/Notify/Driver/Lanes/supplier.conf:
          Supplier configuration.
        * orbsvcs/tests/Notify/Driver/Lanes/consumer.conf:
          Consumer configuration.
        * orbsvcs/tests/Notify/Driver/Lanes/notify.conf:
          RT Notification conf.
        * orbsvcs/tests/Notify/Driver/Lanes/run_test.pl:
          perl script to run the test.

Thu Apr  3 13:32:10 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression/Reply_Handler.cpp: Cosmetic fix.

Thu Apr  3 13:13:24 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tao/Muxed_TMS.cpp (connection_closed): Fix for bug 1482. Please
          refer to

          http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1482

          for details. The patch does the following

          - Picks up the first element from the hash map and calls
            close_connection () on it.
          - Fetches the first node again to compare whether the one that
            was used to call closed_connection () is the same as the
            present begin node. If so, it is unbounded from the map and
            the process continues. If not, there is no need for unbinding
            and the iteration continues.

          Thanks to Carlos O'Ryan for this patch.

Thu Apr 03 12:41:20 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression/Bug_1482_regression.dsw:
        * tests/Bug_1482_Regression/server.dsp:
        * tests/Bug_1482_Regression/client.dsp: Win32 project files for the
          test.

Thu Apr  3 11:20:03 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression/Makefile.bor:
        * tests/Bug_1482_Regression/client.bor:
        * tests/Bug_1482_Regression/server.bor: Borland Makefiles for the
          new test.

        * tests/Makefile.bor:
        * tests/Makefile: Added the new file to our daily build.

Thu Apr  3 10:57:23 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Bug_1482_Regression: A regression test for bug

          http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1482

          Please see the bugzilla entry for details.

Thu Apr 03 08:13:32 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

        * tests/Collocation_Tests/Collocation.dsw:
        * tests/Collocation_Tests/Collocation_Test.dsp: Win32 project files
          for this test.

Wed Apr  2 23:05:26 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:
        * tao/Any_T.cpp:

          Fixed a build problem with Debian Linux.

Wed Apr  2 18:28:08 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:
        * tao/Any.h:
        * tao/Any_T.cpp:
        * tao/Any_T.h:
        * tao/Any_T.inl:
        * tao/NVList.cpp:
        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/DynamicInterface/Request.inl:

          Changes to fix runtime errors in the DII version of Param_Test.

        * tests/Param_Test/bd_string.cpp:

          Cosmetic changes.

Wed Apr  2 11:53:14 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security.mpc:

          TAO's Security library does not depend on SSL.  Removed that
          requirement.

Wed Apr  2 08:47:57 2003  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/orbsvcs/Security.mpc:

          Added requirements upon ssl, corba_messaging and interceptors for
          these projects.

Tue Apr  1 21:44:47 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/Param_Test/helper.cpp (gen_wstring): Fix the evaluation of
          the upper bound for wchar value assignment so that ending up
          with a limit of 0 isn't possible.

Tue Apr  1 07:20:15 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/CodeSets/simple/client.cpp (main): Put ACE_HAS_WCHAR guard
          around wide character test.

Tue Apr  1 13:55:04 CEST 2003  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

        * orbsvcs/orbsvcs/ESF/ESF_Proxy_List.{h,i}:

          Use ACE_Unbounded_Set_Ex instead of ACE_Unbounded_Set.
          This fixes Bugzilla entries 1460, 1465.

Tue Apr 01 12:13:33 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/CodeSets/libs/IBM1047_ISO8859/Makefile.bor: Added this
          missing BCB makefile to fix error on the scoreboard.

Tue Apr 01 08:03:03 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IOP_Codec.pidl:
        * tao/IOP_IOR.pidl:
          Fixed fuzz doxygen errors.

Mon Mar 31 19:27:19 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/DynamicAny/DynamicAnyC.cpp:

          Added missing conditional explicit template instantiations.
          Thanks to Phil Mesnier <mesnier_p@ociweb.com> for pointing
          out the problem.

Mon Mar 31 17:11:23 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * ChangeLog:
        * tao/Codeset_Manager.cpp:
        * tao/Codeset_Manager.h:
        * tao/Invocation.cpp:
        * tao/default_resource.cpp:
        * tests/CodeSets/simple/client.cpp:
        * tests/CodeSets/simple/server.cpp: Errant TAB elimination.

Mon Mar 31 15:09:32 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Codeset_Manager.cpp:
        * tao/Codeset_Manager.h:
        * tao/Codeset_Translator_Factory.h:
        * tao/Codeset_Translator_Factory_T.h:
        * tao/Invocation.cpp:
        * tao/Transport.h:
        * tao/default_resource.cpp: Address the conserns raised by
          Bala. These include adding Doxygen documentation and making some
          calls more efficient by using inline code to check conditions
          before making calls.

        * tests/CodeSets/simple/client.cpp:
        * tests/CodeSets/simple/cs_test.conf:
        * tests/CodeSets/simple/svc.conf:
        * tests/CodeSets/simple/server.cpp:
        * tests/CodeSets/simple/simple.idl: Add a wstring test to the
          simple interface.

        * tests/Param_Test/helper.cpp: Limit the generation of random
          wchar values to only those values that fit in the output cdr's
          wchar_maxbytes number of bytes.

        * tests/Param_Test/svc.conf: Use a 2 byte codeset for the native
          wchar type.

Mon Mar 31 14:05:12 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils_T.cpp (get_is_multiple):

          Added ACE_UNUSED_ARG macros for the arguments in a second template
          method, overlooked in

          Mon Mar 31 10:01:13 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

Mon Mar 31 13:20:41 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp: Fixed a
          typo. Thanks to Johnny for catching this.

Mon Mar 31 13:05:41 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:

          Fixed clashes between newly added generated code and existing
          code in AbstractBase, for interfaces that are abstract or
          inherit from both Object and AbstractBase.

Mon Mar 31 12:29:32 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tests/Makefile (DIRS): Updated  to include the new test.

        * tests/Collocation_Tests/Makefile.bor:
        * tests/Collocation_Tests/Collocated_Test.bor: Borland files.

Mon Mar 31 12:20:31 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tests/Collocation_Tests/Client_Task.cpp:
        * tests/Collocation_Tests/Client_Task.h:
        * tests/Collocation_Tests/Collocated_Test.cpp:
        * tests/Collocation_Tests/Hello.cpp:
        * tests/Collocation_Tests/Hello.h:
        * tests/Collocation_Tests/Makefile:
        * tests/Collocation_Tests/Server_Task.cpp:
        * tests/Collocation_Tests/Server_Task.h:
        * tests/Collocation_Tests/run_test.pl: Restructured the test to
          work under different values of -ORBCollocation and multiple
          ORB's. Thanks to Priyanka for helping me to trace the problem
          with the first version of this test.

        * tao/ORB_Core.cpp: Cosmetic fixes.


Mon Mar 31 12:03:51 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/IOP_IORC.{h,cpp,i}: Regenerated the files
        * tao/diffs/IOP_IOR.diff:
        * tao/diffs/IOP_Codec.diff: Added the diffs for future use.

Mon Mar 31 11:52:26 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/IOP_Codec.pidl: Fixed some comments
        * tao/IOP_CodecC.{h,cpp,i}: Regenerated the files since the one
          merged form the branch was apparently created from the IDL
          compiler when its internal state was busted.

Mon Mar 31 10:01:13 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils_T.cpp (set_is_multiple):

          Added ACE_UNUSED_ARG macros for the arguments, which are not used
          except in a specialization. BCB gives a warning if the arg names in
          the unspecialized version are just left out.

Mon Mar 31 14:18:23 2003  Simon McQueen  <sm@prismtechnologies.com>

        * orbsvcs/tests/Bug_1393_Regression/Bug_1393_Regression.mpc:
        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Regression.mpc:
          Added MPC files that should have been checked in originally.

        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Client.dsp:
        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Server.dsp:
          Hand patch correct path for release tao_idl.exe.

        * orbsvcs/tests/Security/MT_IIOP_SSL/server.dsp:
          Wrong release link library corrected.

        * performance-tests/Anyop/Anyop.dsp:
          Missing release custom build step added.

        * tests/CodeSets/simple/server.dsp:
        * tests/ORB_init/Portspan/portspan.dsp:
          Path in custom build depndecies fixed.

Mon Mar 31 06:57:16 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp: Fixed
          warning in BCB builds by generating the other version of
          CORBA::_stubobj (). Thanks to Johnny for reporting this.

Mon Mar 31 06:43:20 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/default_resource.h: Fixed a warning in our daily builds.

Sun Mar 30 21:44:17 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * performance-tests/Memory/IOR_Size/server.conf: Added the lazy
          strategy to the conf file.

Sun Mar 30 15:25:05 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * docs/tutorials/Quoter/Simple/Persistent/server.dsp: Added RTTI to
          some of he files in the above projects.

Sun Mar 30 15:21:18 2003  Balachandran Natarajan <bala@isis-server.isis.vanderbilt.edu>

        * examples/ior_corbaloc/ior_corbaloc_client.dsp:
        * examples/ior_corbaloc/ior_corbaloc_server.dsp:
        * examples/ior_corbaloc/ior_corbaname_client.dsp: Added RTTI to
          some of he files in the above projects.

Sun Mar 30 15:12:20 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Client.dsp:
        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Server.dsp: Fixed the
          link path in the project files.

Sun Mar 30 15:03:47 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tests/Param_Test/server.dsp: Enabled RTTI on a few files to
          prevent warnings.

Sun Mar 30 20:30:04 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Makefile.bor: Added new IOP_CodecC and IOP_IORC files.

Sun Mar 30 11:38:20 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp: Fixed compile
          errors that came up from the removal of _objectkey () from
          CORBA::Object.

Sun Mar 30 11:29:13 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/TAO.dsp: Enabled RTTI in a couple of files.

Sun Mar 30 10:39:24 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp: Fixed a compile
          error.

Sun Mar 30 09:57:49 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/TAO.dsp: Fixed the dsp file which got messed up from the
          merge.

Sun Mar 30 09:17:09 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * Merged from the branch. This has the following

          - A new strategy for lazily evaluating IOR's
          - Some removal of code duplication.

        Wed Mar 26 14:32:40 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp: Removed methods initialize_collocated_object
          () and create_collocated_object (). Added a new method
          is_collocation_enabled () which abstracts the common code in the
          above two methods.

        * tao/Object.cpp: Cosmetic fixes!

        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Object_Adapter.h: Added a new method
          get_collocated_servant (), which houses the common code in
          create_collocated_object () and initialize_collocated_object
          ().

        Tue Mar 25 18:16:05 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Profile.cpp: Missed a definition of a constructor during the
          merge.

        Tue Mar 25 17:14:22 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Domain/DomainS.cpp: Fixed compile errors.

        Tue Mar 25 16:11:39 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        Merged with main trunk!

        Mon Mar 24 13:57:09 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Object.h:
        * tao/Object.cpp (_is_local):
        * tao/Object.i: Cosmetic fixes like improved documentation, making
          most of the member variables private instead of protected
          etc. Changed the member initializations to suit the above
          cosmetic fix.

        * tao/PortableServer/Collocated_Object.cpp: Cosmetic fixes.

        Mon Mar 24 09:16:11 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Object.cpp: The return value from the call to
          initialize_object () is voided since not much can be done at
          that point if failures occur. We will do error checking later to
          throw the right exceptions.

        Fri Mar 21 17:07:11 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Adapter.h:
        * tao/Adapter.cpp: Added a method initialize_collocated_object ()
          in the TAO_Adapter_Factory and TAO_Adapter.

        * tao/ORB_Core.pp: Implemented the initialize_collocated_object ()
          which basically calls the
          TAO_Adapter_Registry::initialize_collocated_object ().

        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Object_Adapter.h: Added a new method
          initialize_collocated_object (). The implementation is pretty
          much similar to the create_collocated_object (), but instead of
          creating a new object, initializes an existing object.

        * tao/Object.h:
        * tao/Object.cpp:
        * tao/Object.i:

          Added the following methods

          - set_collocated_servant () which helps to initialize the
            CORBA::Object with TAO_Abstract_ServantBase

          - Accessors for orb_core () and IOP::IOR

          Added initialization of collocated objects in
          tao_initialize_object ().

          The above checkin has lots of duplicated code. Need to refactor
          them in the next round.

        Fri Mar 21 16:37:12 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp: Added a new argument to the
          constructor of stub objects. This change is made to make sure
          that stub objects have constructors similar to the
          CORBA::Object.

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp: Added a new
          constructor as required by the latest changes to the
          CORBA::Object.

        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp: Definition of
          the above constructor.

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp: In
          _unchecked_narrow () we create a interface pointer object if the
          IOR is lazily evaluated by giving it the IOP::IOR and the
          ORB_Core.

        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp: In the
          code generation for operation, initialize the object completely
          ie. evaluate the IOR completely and setup collocation if they
          have not been setup before (which is possible if the IOR's are
          evaluated lazily) proceeding with the operation.

        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_ci.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp: Retrofit the
          above changes for components too.

        Wed Mar 19 16:05:11 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_cs.cpp:Added a check
          for is_evaluated () before creating a new CORBA::Object () in
          _unchecked_narrow (). If the call is_evaluated fails, we just
          reinterpret cat the CORBA::Object to the right type of object.

        Wed Mar 19 15:35:16 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp: Added a check
          for is_evaluated () along with _is_local () before creating a
          new CORBA::Object () in _unchecked_narrow ().

        Wed Mar 19 14:30:43 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Connector_Registry.cpp: Removed preconnect () completely
          from the code.

        * tao/ORB_Core.cpp: Implemented the initialize_object () for
          non-local and non-collocated cases.

        * tao/Object.h:
        * tao/Object.cpp (Object):
        * tao/Object.i: Made the following changes

          - Changed the constructor that took a const IOP::IOR_var to take
            a pointer to IOP::IOR. The pointer would be owned by
            CORBA::Object class and released at the end of its
            lifetime. It may be possible for us to release the memory
            owned by IOR_var if needed after the complete evaluation is
            done. At this point of time it is future work.

          - Added a new method is_evaluated () which returns the status of
            the evaluation done on the IOR.

          - Added a non-const version of _stubobj ().

          - In the main constructor we set the ORB_Core if it is null
            before calling the resource factory to create the refcount
            lock.

          - In the method is_nil_i () we now use the ORB_Core to access
            new definitions instead of going through the stub object. This
            would prevent accidental evaluation of IOR while calling
            is_nil () from the stubs or skeletons.

          - Completed implementation of tao_object_initialize () for
            non-local and non-collocated objects.

          With this checkin the Hello test and IORsize test work fine.


        Fri Mar  7 13:29:43 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Object.cpp:
        * tao/IOP_CodecC.h:
        * tao/IOP_IORC.h:
        * tao/Makefile.tao:
        * tao/IOPC.h: Fixed compile errors with g++.

        Fri Mar 07 09:49:35 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be_visitor_operation/thru_poa_proxy_impl_ss.cpp: Changed
          the generated code to call object_key () on the stub object
          within the CORBA::Object instead of calling _object_key ().

        Mon Mar 03 14:07:10 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        This is just a temporary checkin to test it on another box.

        * tao/IOP_Codec.pidl:
        * tao/IOP_IOR.pidl: New files.

        * tao/IOP.pidl: Split the IOP.pidl into two pidl files.

        * tao/IOPC.cpp
        * tao/IOPC.h:
        * tao/IOPC.i: New generated files.

        * tao/Buffering_Constraint_Policy.cpp: Initialized the base
          classes properly.

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h: Incomplete changes to initialize the CORBA
          object.

        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Object.i: Added partial support for delayed creation of
          CORBA::Objects. This included adding a new static method
          tao_object_initialize (). The extraction operator will extract
          out to a IOP::IOR if lazy evaluation is used. Removing
          _object_key () since it serves very less purpose in this object
          but for just accessing the Stub to get the key. The lazy
          evaulation would be happy with this scenario!

        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h: Added the follwoing virtual methods
          - create_corba_object_lock (), which creates a SYNCH_MUTEX or a
            NULL_MUTEX as the case may be for CORBA::Object.
          - resource_usage_strategy (), a strategy for advising whether
            the resources are used actively or lazily within the ORB. This
            strategy is not useful through out the ORB right away. There
            is atleast one place where this might be used now and it is in
            CORBA::Object. The >> of a CORBA::Object from a TAO_InputCDR
            will use this strategy.

        * tao/default_resource.cpp:
        * tao/default_resource.h: Concrete implementations for the above
          pure virtual methods within the default factory.

        * tao/TAO.dsp: Added new files in to the project files.

        * tao/PortableServer/Collocated_Object.cpp:
        * tao/PortableServer/ImR_LocatorS.cpp:
        * tao/PortableServer/ImplRepoS.cpp:
        * tao/PortableServer/PolicyS.cpp:
        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp: Use the stub
          object on the CORBA::Object to access the ObjectKey instead of
          calling _object_key (). The  method _object_key () is going to
          be removed.

        Sat Feb 22 22:30:25 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * Merged with the main trunk.

        Thu Feb 20 12:48:16 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * ace/Connector.cpp: Added a const to regulate the size of the map
          that is being used inside this class. A size of 1024 seems too
          excessive for runtime memory.

        Thu Feb 20 12:29:17 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Profile.h:
        * tao/Profile.cpp:
        * tao/Profile.i: Moved the ObjectKey from the inherited classes
          to the base class. Added a new protected constructor which can
          be used by the inherited classes to initialize the ObjectKey
          properly. Also added a new method set_tagged_components () which
          is a helper method useful for creating Tagged_Components of an
          IOR from a CDR stream. Uninlined the constructor, destructor and
          the methods for refcounted memory management.

        * tao/IIOP_Profile.h:
        * tao/IIOP_Profile.cpp:
        * tao/Strategies/DIOP_Profile.h:
        * tao/Strategies/DIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.h:
        * tao/Strategies/UIOP_Profile.cpp:
        * tao/Strategies/SHMIOP_Profile.h:
        * tao/Strategies/SHMIOP_Profile.cpp: Removed the ObjectKey from
          the following classes since it has now been moved to the base
          class.

          Used the protected constructor in the base class while base
          member initializations.

          Call the set_tagged_componets () to place a list of
          IIOPEndpoints in the Tagged_Components contained in the profile.

        Thu Feb 20 12:10:13 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Tagged_Components.h:
        * tao/Tagged_Components.cpp:
        * tao/Tagged_Components.i (TAO_Tagged_Components): Reverted the
          change "Wed Feb 12 15:40:46 2003  Balachandran Natarajan
          <bala@isis-server.isis.vanderbilt.edu>" since it was counter
          productive.

        * tao/ClientRequestInfo_i.cpp: Reverted the changes made to
          accomodatethe above change.

        Thu Feb 13 17:53:44 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/IIOP_Endpoint.h (TAO_IIOP_Endpoint):
        * tao/IIOP_Profile.h:
        * tao/Strategies/DIOP_Endpoint.h:
        * tao/Strategies/SHMIOP_Endpoint.h: Cosmetic changes like removing
          ORB.h  inclusion etc.

        Wed Feb 12 18:15:24 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * Merged in changes from the main trunk.

        Wed Feb 12 15:40:46 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Tagged_Components.h:
        * tao/Tagged_Components.cpp:
        * tao/Tagged_Components.i (TAO_Tagged_Components): Create
          IOP::MultipleComponentProfile lazily, instead of creating
          actively on the stack and increase the runtime footprint. If we
          do this we only pay when TAO gets something that TAO doesnt
          understand. This changed forced us to change the signature of
          the components (). Instead of returning a reference we now
          return a pointer to the underlying
          IOP::MultipleComponentProfile.

        Thu Feb  6 17:51:06 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Tagged_Components.cpp: Removed some vague print statements.
        * tao/Strategies/SHMIOP_Connector.cpp: Fixed some debug
          statements.

        Thu Feb  6 16:37:32 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Stub.cpp (ior_info_):
        * tao/Invocation.cpp:
        * tao/ClientRequestInfo_i.cpp: Added error checks to the last
          checkins.

        Sun Jan 26 23:50:17 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Profile.cpp:
        * tao/Profile.h:
        * tao/Profile.i: Added a new method create_tagged_profile
          (). Infact, this method existed in the derived classes returning
          a reference to the underlying IOP::TaggedProfile. Since the
          method existed in all the derived classes and was doing similar
          things it has now been moved to the base class with a slight
          signature change. This now returns a pointer to the underlying
          IOP:TaggedProfile. The signatuer change has been needed because
          of the change mentioned below.

          We will henceforth hold a pointer to the IOP::TaggedProfile
          instead of an instance in the Profile classes. We will create an
          instance when needed, (heard of lazy evaluation?). This change
          is forced on us due to the runtime memory consumed by
          IOR's. Holding a pointer instead of the actual object instance
          gets us approximately 24 bytes per IOR on Linux on a 32 bit
          processor.

        * tao/IIOP_Profile.h:
        * tao/IIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.h:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/SHMIOP_Profile.h:
        * tao/Strategies/DIOP_Profile.cpp:
        * tao/Strategies/DIOP_Profile.h: Removed create_tagged_profile ()
          and the instance of IOP::TaggedProfile.

        * tao/Invocation.cpp:
        * tao/Stub.cpp:
        * tao/ClientRequestInfo_i.cpp: Changes forced on us due to the
          signature change above.

        Sun Jan 26 21:41:26 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * Mering with the main trunk and moving to a new branch.

        Sun Jan 26 21:16:14 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * docs/Options.html: documented the new option.

        Mon Jan 20 09:00:55 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        The aim of this checkin is to provide an option to configure the
        size of the dispatcher table in the Muxed_Transport_Strategy.

        * tao/Client_Strategy_Factory.cpp:
        * tao/Client_Strategy_Factory.h: Added a new virtual method to
          fetch the dispatcher table size

        * tao/default_client.cpp:
        * tao/default_client.h: Concrete implementation for the new
          virtual method. The default value for the dispatcher table size
          is set to TAO_RD_TABLE_SIZE which is defined in orbconf.h. The
          table size can also be changed at runtime using a -ORB option
          which is explained below.

          We now have an option called -ORBReplyDispatcherTableSize which
          will parse and set a user provided value as the dispatcher table
          size. This gives extra flexibility to the user.

        * tao/orbconf.h: Added TAO_RD_TABLE_SIZE and set the value to be
          16.

        * tao/Muxed_TMS.cpp:
        * tao/Muxed_TMS.h: All the above changes were motivated to reduce
          the size of the hash table that this class creates increasing
          the run-time footprint. The default value of 1024 was probably
          an over kill for this class.


Sun Mar 30 07:39:25 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * performance-tests/Cubit/TAO/IDL-Cubit/Makefile: Updated
          dependencies.

Sat Mar 29 21:59:06 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/orbconf.h: Commented out portions that were connected to
          TAO_HAS_AMI_POLLER == 1. The reason for this are multi-fold. For
          one, we dont support the polling model and this #define only
          helped to confuse things. Secondly, no one knows how to use it
          properly and if not used the right way created
          problems. Finally, we want to be moving away from guarding code
          using #define stuff.

        * tao/Messaging/Asynch_Reply_Dispatcher.cpp:
        * tao/Messaging/Asynch_Reply_Dispatcher.h:
        * tao/Messaging/Asynch_Timeout_Handler.cpp:
        * tao/Messaging/Asynch_Timeout_Handler.h:
        * tao/Messaging/Twoway_Asynch_Invocation.cpp:
        * tao/Messaging/Twoway_Asynch_Invocation.h:
        * tao/Messaging/Twoway_Asynch_Invocation.i: Removed the usage of
          TAO_HAS_AMI_POLLER == 1 from all these files. I dont think we
          understand well how the poller model works and whether it is
          possible to reuse these classes or not. Time for these to go
          away.

Sat Mar 29 20:04:20 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Client.dsp:
        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Server.dsp:
        * orbsvcs/tests/Bug_1395_Regression/Bug_1395_Regression.dsp: Fixed
          the release and debug configuratoins.

Sat Mar 29 17:24:13 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * orbsvcs/tests/Security/Big_Request/Makefile: Updated
          dependencies.

Sat Mar 29 17:16:48 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * utils/*/Makefile: Updated dependencies.

Sat Mar 29 17:10:44 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * docs/tutorials/Quoter/*/Makefile: Updated dependencies.

Sat Mar 29 16:48:45 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * orbsvcs/examples/*/Makefile:
        * orbsvcs/IFR_Service/Makefile: Updated dependencies.

Sat Mar 29 16:30:29 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Leader_Follower.cpp:
        * tao/Wait_On_Reactor.cpp:
        * tao/Wait_On_Read.cpp: Account for the time spent in the wait ()
          calls by placing the ACE_Countdown_Time at the right
          places. These changes were influenced by the bug report sent by
          Bertin Colpron <BColpron@interstarinc.com>.

Fri Mar 28 13:31:41 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Transport.h (TAO_Transport):
        * tao/Codeset_Manager.cpp:
        * tao/Codeset_Manager.h:
        * tao/Codeset_Translator_Factory.h:
        * tao/Codeset_Translator_Factory_T.h:
        * tao/Invocation.cpp:
        * tao/ORB_Core.cpp: Left //@@Phil comments for Phil Mesnier. The
          objective is to discuss and provide feedback on the translator
          stuff.

Fri Mar 28 12:16:01 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * docs/tutorials/Quoter/AMI/client.dsp:
        * docs/tutorials/Quoter/AMI/server.dsp:
        * docs/tutorials/Quoter/Event_Service/client.dsp:
        * docs/tutorials/Quoter/Event_Service/server.dsp:
        * docs/tutorials/Quoter/Naming_Service/client.dsp:
        * docs/tutorials/Quoter/Naming_Service/server.dsp:
        * docs/tutorials/Quoter/On_Demand_Activation/server.dsp:
        * docs/tutorials/Quoter/RT_Event_Service/client.dsp:
        * docs/tutorials/Quoter/RT_Event_Service/server.dsp:
        * docs/tutorials/Quoter/Simple/Client/client.dsp:
        * docs/tutorials/Quoter/Simple/Impl-Repo/server.dsp:
        * docs/tutorials/Quoter/Simple/ImprovedServer/improvedserver.dsp:
        * docs/tutorials/Quoter/Simple/Server/server.dsp:
        * examples/AMH/Sink_Server/client.dsp:
        * examples/AMH/Sink_Server/mt_server.dsp:
        * examples/AMH/Sink_Server/st_server.dsp:
        * examples/Buffered_AMI/client.dsp:
        * examples/Buffered_AMI/server.dsp:
        * examples/Logging/Logging_Service.dsp:
        * examples/Logging/Logging_Test.dsp:
        * examples/PluggableUDP/tests/Basic/client.dsp:
        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Performance/client.dsp:
        * examples/PluggableUDP/tests/Performance/server.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/client.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/server.dsp:
        * examples/RTCORBA/Activity/activity.dsp:
        * orbsvcs/tests/InterfaceRepo/InterfaceRepo.dsw:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_server.dsp:
        * orbsvcs/tests/Security/Callback/client.dsp:
        * orbsvcs/tests/Security/Callback/server.dsp:
        * orbsvcs/tests/Security/Crash_Test/Crash_Test.dsw:
        * orbsvcs/tests/Security/Crash_Test/Crash_Test_Client.dsp:
        * orbsvcs/tests/Security/Crash_Test/Crash_Test_Server.dsp:
        * orbsvcs/tests/Security/MT_IIOP_SSL/client.dsp:
        * orbsvcs/tests/Security/MT_IIOP_SSL/server.dsp:
        * tests/AMH_Exceptions/client.dsp:
        * tests/AMH_Exceptions/server.dsp:
        * tests/AMH_Oneway/client.dsp:
        * tests/AMH_Oneway/server.dsp:
        * tests/Connect_Strategy_Test/client.dsp:
        * tests/Connect_Strategy_Test/server.dsp:
        * tests/Connection_Timeout/client.dsp:
        * tests/InterOp-Naming/client.dsp:
        * tests/MProfile_Connection_Timeout/client.dsp:
        * tests/MProfile_Connection_Timeout/server.dsp:
        * tests/MT_BiDir/client.dsp:
        * tests/MT_BiDir/server.dsp:
        * tests/Muxed_GIOP_Versions/client.dsp:
        * tests/Muxed_GIOP_Versions/server.dsp:
        * tests/Nested_Upcall_Crash/client.dsp:
        * tests/Nested_Upcall_Crash/scavenger.dsp:
        * tests/Nested_Upcall_Crash/server.dsp:
        * tests/No_Server_MT_Connect_Test/client.dsp:
        * tests/No_Server_MT_Connect_Test/server.dsp:
        * tests/ORB_shutdown/server.dsp:
        * tests/Objref_Sequence_Test/client.dsp:
        * tests/Objref_Sequence_Test/server.dsp:
        * tests/Oneway_Buffering/admin.dsp:
        * tests/Oneway_Buffering/client.dsp:
        * tests/Oneway_Buffering/server.dsp:
        * tests/Policies/Manipulation.dsp:
        * tests/Portable_Interceptors/AMI/client.dsp:
        * tests/Portable_Interceptors/AMI/server.dsp:
        * tests/Portable_Interceptors/Benchmark/client.dsp:
        * tests/Portable_Interceptors/Benchmark/server.dsp:
        * tests/Portable_Interceptors/Dynamic/client.dsp:
        * tests/Portable_Interceptors/Dynamic/server.dsp:
        * tests/Portable_Interceptors/ForwardRequest/client.dsp:
        * tests/Portable_Interceptors/ForwardRequest/server.dsp:
        * tests/Portable_Interceptors/IORInterceptor/client.dsp:
        * tests/Portable_Interceptors/IORInterceptor/server.dsp:
        * tests/Portable_Interceptors/PICurrent/client.dsp:
        * tests/Portable_Interceptors/PICurrent/server.dsp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/client.dsp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/server.dsp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/client.dsp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/server.dsp:
        * tests/RTCORBA/Banded_Connections/client.dsp:
        * tests/RTCORBA/Banded_Connections/server.dsp:
        * tests/RTCORBA/Client_Propagated/client.dsp:
        * tests/RTCORBA/Client_Propagated/server.dsp:
        * tests/RTCORBA/Client_Protocol/client.dsp:
        * tests/RTCORBA/Client_Protocol/server.dsp:
        * tests/RTCORBA/Collocation/Collocation.dsp:
        * tests/RTCORBA/Explicit_Binding/client.dsp:
        * tests/RTCORBA/Explicit_Binding/server.dsp:
        * tests/RTCORBA/Linear_Priority/client.dsp:
        * tests/RTCORBA/Linear_Priority/server.dsp:
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.dsp:
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.dsp:
        * tests/RTCORBA/Persistent_IOR/client.dsp:
        * tests/RTCORBA/Persistent_IOR/server.dsp:
        * tests/RTCORBA/Policy_Combinations/client.dsp:
        * tests/RTCORBA/Policy_Combinations/server.dsp:
        * tests/RTCORBA/Private_Connection/client.dsp:
        * tests/RTCORBA/Private_Connection/server.dsp:
        * tests/RTCORBA/Profile_And_Endpoint_Selection/client.dsp:
        * tests/RTCORBA/Profile_And_Endpoint_Selection/server.dsp:
        * tests/RTCORBA/Server_Declared/client.dsp:
        * tests/RTCORBA/Server_Declared/server.dsp:
        * tests/RTCORBA/Server_Protocol/client.dsp:
        * tests/RTCORBA/Server_Protocol/server.dsp:
        * tests/RTCORBA/Thread_Pool/client.dsp:
        * tests/RTCORBA/Thread_Pool/server.dsp:
        * tests/Smart_Proxies/client.dsp:
        * tests/Smart_Proxies/server.dsp:
        * tests/Smart_Proxies/Benchmark/client.dsp:
        * tests/Smart_Proxies/Benchmark/server.dsp:
        * tests/Stack_Recursion/client.dsp:
        * tests/Stack_Recursion/server.dsp:
        * tests/Strategies/client.dsp:
        * tests/Strategies/server.dsp:
        * tests/Two_Objects/client.dsp:
        * tests/Two_Objects/server.dsp:

          Turned on RTTI for the stub source files in the above
          projects, and updated the settings in a couple of
          workspaces.

Fri Mar 28 11:34:31 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Object.h:
        * tao/Object.cpp: Added a new static call marshal () that takes in
          a object reference, and a CDR stream into which the reference
          should be marshalled. This call checks for null object
          references and then calls the virtual marshal () call on the
          Object.

        * TAO_IDL/ be/be_visitor_field/cdr_op_ci.cpp: The code for
          marshalling in object references is busted. We used to call
          CORBA::Object::marshal () (the virtual call) on the object
          reference. But if the reference passed in is null we
          crash. Please see the daily builds (esp. the Param_Test) for
          what I am talking about. The code has now been changed to call
          the static method on CORBA::Object ().

Fri Mar 28 10:04:22 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:

          Used ACE_NESTED_CLASS macro for base class constructor
          initialization for abstract interfaces. Also removed generation
          of 'to_object' template specialization helper for abstract
          interfaces. For these cases, we want to return failure (boolean
          0), which is what the unspecialized version does.

        * tests/Abstract_Interface/Abstract_Interface_Client.dsp:
        * tests/Abstract_Interface/Abstract_Interface_Server.dsp:

          Turned on RTTI for these projects.

Fri Mar 28 09:23:43 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService.bor:

          Fixed typo from previous checkin.

        * orbsvcs/orbsvcs/IFRService.dsp:

          Removed a resource .asp file that was added by mistake.

Fri Mar 28 14:24:11 2003  Simon McQueen  <sm@prismtechnologies.com>

        * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency Test.dsp:
          Renamed to Latency_Test.dsp. Autobuild doesn't seem to like
          spaces.

Fri Mar 28 12:35:51 2003  Simon McQueen  <sm@prismtechnologies.com>

        * tests/ORB_init/Portspan/portspan.dsp:
          Fixed duff relative path to tao_idl (release and debug).

        * tests/CodeSets/simple/client.dsp:
        * tests/CodeSets/simple/server.dsp: Fixed dependencies to prevent
          warnings. Added custom build step for Release configurations.

Fri Mar 28 11:27:12 2003  Simon McQueen  <sm@prismtechnologies.com>

        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.h:
        * orbsvcs/performance-tests/RTEvent/lib/Servant_var.h:
          Fix for compilation with MS Visual C++ 6.

Thu Mar 27 18:30:41 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:

          Added declarations in the header file for template specializations
          in the source file, and moved the necessary file include to the
          header file so the declarations will be recognized.

        * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.h:

          Removed these files that didn't get removed somehow when the
          dyn_corba branch was merged.

        * orbsvcs/orbsvcs/IFRService.bor:

          Updated the makefile, another thing that was overlooked when the
          branch was merged.


Thu Mar 27 14:25:31 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Added explicit cast of a literal 0xffffffff to CORBA::Long, to prevent
          BCB from trying to promote it to a float or double. Thanks to
          Johnny Willemsen <jwillemsen@rememdy.nl> for reporting the problem.

Thu Mar 27 09:28:09 2003  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp (create_object): Removed
          the stray ':' after the 'r' option.  Thanks to Sean Ogle
          <sean.ogle@syslog.at> for reporting this.

Thu Mar 27 12:13:21 2003  Edward Scott  <eas@prismtechnologies.com>

        * orbsvcs/tests/ior_corbaname/Makefile:
        * orbsvcs/tests/Trading/Makefile:
        * orbsvcs/tests/Simple_Naming/Makefile:
        * orbsvcs/tests/Security/SecurityLevel1/Makefile:
        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
        * orbsvcs/tests/Security/MT_SSLIOP/Makefile:
        * orbsvcs/tests/Security/MT_IIOP_SSL/Makefile:
        * orbsvcs/tests/Security/Crash_Test/Makefile:
        * orbsvcs/tests/AVStreams/Latency/Makefile:
        * orbsvcs/tests/AVStreams/Full_Profile/Makefile:
        * orbsvcs/tests/AVStreams/Component_Switching/Makefile:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/Makefile:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:

          Updated dependencies.

Wed Mar 26 16:40:58 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/IORManipulation/IORManipulation.cpp: Fixed a leak that
          arose when we tried to use CORBA::String_var::_retn () to
          ORB_Core::create_stub () call. Thanks to Sebastien Lalonde
          <SLalonde@interstarinc.com> for reporting this.

Wed Mar 26 18:14:21 2003  Edward Scott  <eas@prismtechnologies.com>

        * orbsvcs/PSS/Makefile.parser:
        * orbsvcs/PSS/Makefile.datastore:
        * orbsvcs/PSS/Makefile:
        * orbsvcs/tests/tests_svc_loader/Makefile:
        * orbsvcs/tests/Time/Makefile:
        * orbsvcs/tests/Security/Callback/Makefile:
        * orbsvcs/tests/Security/Big_Request/Makefile:
        * orbsvcs/tests/Sched_Conf/Makefile:
        * orbsvcs/tests/Sched/Makefile:
        * orbsvcs/tests/Property/Makefile:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
        * orbsvcs/tests/Notify/lib/Makefile:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile:
        * orbsvcs/tests/Notify/Ordering/Makefile:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile:
        * orbsvcs/tests/Notify/Discarding/Makefile:
        * orbsvcs/tests/Notify/Blocking/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/Miop/McastHello/Makefile:
        * orbsvcs/tests/Log/Basic_Log_Test/Makefile:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Makefile:
        * orbsvcs/tests/Interoperable_Naming/Makefile:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * orbsvcs/tests/ImplRepo/NameService/Makefile:
        * orbsvcs/tests/ImplRepo/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/Event/lib/Makefile:
        * orbsvcs/tests/Event/Performance/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/EC_Mcast/Makefile:
        * orbsvcs/tests/EC_MT_Mcast/Makefile:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile:
        * orbsvcs/tests/CosEvent/lib/Makefile:
        * orbsvcs/tests/CosEvent/Basic/Makefile:
        * orbsvcs/tests/Concurrency/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Pluggable/Makefile:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/Makefile:
        * orbsvcs/tests/AVStreams/Multicast/Makefile:

          Updated dependencies.

Wed Mar 26 14:40:55 2003  Simon McQueen  <sm@prismtechnologies.com>

        * utils/catior/catior.cpp (cat_codeset_info): Workaround for MS
          VC++ for loop scoping problem.

Tue Mar 25 20:55:15 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Codeset_Manager.cpp:
        * tao/Codeset_Manager.h:
        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/default_resource.cpp:
        * tao/default_resource.h:

          Moved ownership of the Codeset Translator Factories from the
          resource factory to the Codeset Manager. This eliminates a
          dependancy on the ORB Core from the critical path.

          Fixed the encoding of codeset service contexts so the byte order
          is included in the encapsulation.

          Modified the interaction with the CDR classes to enable the
          configuration of the maximum number of bytes to use when
          encoding wchar data. Thanks to Chen Jian <jchen@huawei.com> for
          identifying this need.

Tue Mar 25 16:28:17 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:

          Moved generation of Any template specializations
          to the inline file.

        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.i:
        * tao/Messaging/Messaging_No_ImplC.cpp:
        * tao/Messaging/Messaging_No_ImplC.i:
        * tao/Messaging/Messaging_RT_PolicyC.cpp:
        * tao/Messaging/Messaging_RT_PolicyC.i:
        * tao/Messaging/Messaging_SyncScope_PolicyC.cpp:
        * tao/Messaging/Messaging_SyncScope_PolicyC.i:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.h
        * tao/PortableServer/PortableServerC.i:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTCORBA/RTCORBAC.i:

          Fixed hand-crafted files corresponding to the changes
          to the IDL compiler above.

        * tao/PortableServer/TAO_PortableServer.dsp:

          Added missing files to project.

Tue Mar 25 14:06:58 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo.h (sync_scope):
        * tao/ClientRequestInfo.cpp (sync_scope):
        * tao/ClientRequestInfo_i.h (sync_scope):
        * tao/ClientRequestInfo_i.cpp (sync_scope):
        * tao/PortableServer/ServerRequestInfo.h (sync_scope):
        * tao/PortableServer/ServerRequestInfo.cpp (sync_scope):

          Do not protect this method with a "TAO_HAS_CORBA_MESSAGING"
          preprocessor block.  Doing is no longer necessary since it
          always possible to retrieve the SyncScope oneway setting.  This
          problem only occurred recently, i.e. after the
          PortableInterceptorC.* stub was regenerated.  Fixes builds where
          CORBA messaging support is disabled.

Tue Mar 25 10:54:57 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/IORManipulation/IORC.h:

          Added include of Any_T.h needed for builds with inlining
          enabled.

Mon Mar 24 18:15:51 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * tao/PortableServer/PortableServerC.cpp:

          Fixed code for generating CDR operator for a typedef'd
          sequence whose element is itself a typedef'd sequence.
          The IDL compiler source code that handles this case was
          inadvertently removed in an earlier checkin. Also fixed
          the CDR operator in PortableServer where the problem
          was noticed.

Mon Mar 24 17:36:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.i:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.i:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.i:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.i:
        * tao/IORManipulation/IORC.cpp:
        * tao/IORManipulation/IORC.i:
        * tao/Messaging/TAO_ExtC.cpp:
        * tao/Messaging/TAO_ExtC.i:
        * tao/PortableServer/Default_ORTC.i:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/ImR_LocatorC.i:
        * tao/PortableServer/ImplRepoC.i:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTCORBA/RTCORBAC.i:
        * tao/RTPortableServer/RTPortableServerC.cpp:
        * tao/RTPortableServer/RTPortableServerC.i:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactoryC.inl:

          Moved generation of Any template specializations for
          to_object, to_value, to_abstract_base, marshal_value,
          and demarshal_value to the inline file, to enable
          BCB to pick them up before they're used in the .cpp file.

        * tao/IFR_Client/IFR_BaseC.h:
        * tao/PortableServer/ImplRepoC.h:

          Added Any_T.h to the included files so the above
          changes can be recognized when aggressively inlining.

        * tao/PortableServer/POA.cpp:

          Added missing .in() to an ObjectReferenceTemplate_var
          argument. Thanks to Johnny Willemsen
          <jwillemsen@remedy.nl> for tracking this down.

        * tests/Smart_Proxies/Collocation/Coll_Test_Stubs.dsp:

          Turned on RTTI for the generated stub file.

Mon Mar 24 13:12:16 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/Connection_Handler.cpp (close_connection_eh): Call the
          state_changed () on the LF_CH_Event with the lock held. If not,
          we could potentially run into a race between two threads trying
          to change states from
          TAO_Connection_Handler::close_connection_eh () and
          TAO_Transport::close_connection_shared (). The lock within
          state_changed () is not sufficient to prevent the race. Thanks
          to Jia Wan <jiawan@huawei.com> for pointing this out.

Mon Mar 24 13:07:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any_T.cpp:

          Added ace/CORBA_macros.h to the list of included files, for
          the benfit of BCB.

Sun Mar 23 12:30:36 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Services.cpp:
        * tao/Services.h:
        * tao/Services.i:

          Removed these files from the respository, since they are
          replaced by the corresponding ServicesC.* file. Apparently
          during a recent branch merge the removal of the above files was
          overlooked or otherwise derailed.

        * tao/Makefile.bor:

          Updated the Borland makefile to reflect the change above. Thanks
          to Johnny Willemsen <jwillemsen@remedy.nl> for reporting the
          problem.

Sat Mar 22 19:52:58 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tests/Collocation_Tests: New test for Collocation. This test has
          the capability to test collocation in all possible
          collocation configurations. This checkin is just a dummy checkin
          since the test actually fails badly with TAO.

Sat Mar 22 16:47:39 2003  Nanbor Wang  <nanbor@cs.wustl.edu>

        * docs/ORBEndpoint.html: Updated obsolete SHMIOP endpoint
          information, and added more information when using shmiop with
          interoperable naming service.  Thanks to Andreas Koehler
          <Andreas.Koehler@sysde.eads.net> for reporting the problem.

Sat Mar 22 15:51:14 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/CurrentC.cpp:
        * tao/CurrentC.h:
        * tao/CurrentC.i:
        * tao/DomainC.cpp:
        * tao/DomainC.i:
        * tao/IOPC.cpp:
        * tao/IOPC.i:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.i:
        * tao/PolicyC.cpp:
        * tao/PolicyC.i:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.i:
        * tao/TAOC.cpp:
        * tao/TAOC.i:

          Moved Any template method specializations to
          the corresponding inline files, to avoid a
          compile problem with BCB.

Sat Mar 22 12:55:16 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:

          Changed loading of constant into the repository to be aware
          if the constant's type is a typedef.

Sat Mar 22 07:41:59 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * performance-tests/Cubit/TAO/Makefile: Add .NOTPARALLEL to the
          makefile to give the IDL build a chance to complete before its
          dependants try and fail to compile.

Fri Mar 21 15:43:32 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/Collocation/Makefile: Add .NOTPARALLEL to the makefile to
          prevent the IDL compiler from being run simultaneously and
          errantly trashing the DiamondS.cpp file.

Fri Mar 21 15:27:51 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/PortableServer/ImplRepoC.cpp:

          Added another missing explicit template instantiation.

Fri Mar 21 13:22:06 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Moved the template specializations to the top of the file. This
          eliminates a problem with BCB seeing the specializations whe
          compiling the Any operators later in the file. Thanks to
          Johnny Willemsen <jwillemsen@rememdy.nl> for suggesting the fix.

Fri Mar 21 11:41:10 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Policy_ForwardC.cpp:

          Added another missing explicit template instantiation.

        * tests/AMH_Exceptions/client.dsp:

          Added generated file to the project.

        * tests/Param_Test/anyop.cpp:

          Added missing .inout() to a _var reference.

Thu Mar 20 18:29:10 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/PortableServerC.cpp:

          Added more missing explicit template instantiations associated
          with Any operators for sequences. Thanks to Phil Mesnier
          <mesnier_p@ociweb.com> for pointing out the ones I missed.

Thu Mar 20 12:28:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Removed an unused specialization and explicti instantiation.

Thu Mar 20 10:28:06 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:
        * tao/DomainC.cpp:
        * tao/DynamicC.cpp:
        * tao/IIOPC.cpp:
        * tao/IOPC.cpp:
        * tao/Makefile.tao
        * tao/Messaging_PolicyValueC.cpp:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/OctetSeqC.cpp:
        * tao/Policy_ForwardC.cpp:
        * tao/StringSeqC.cpp:

          Added missing explicit instantiations associated
          with Any operators for sequences.

Wed Mar 19 21:19:27 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Fixed cut and paste error in the checkin below.

Wed Mar 19 18:04:26 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Added no-op specialization for
          Any_Dual_Impl_T<CORBA::Exception>::extract(). A working version is
          not needed, since the spec requires only insertion operators for
          CORBA::Exception, but the no-op specialization prevents an error
          in compilers that require explicit template instantiationm, since
          the unspecialized version calls the constructor, and
          CORBA::Exception is (and is required to be) an abstract class.

Wed Mar 19 12:52:22 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.cpp (operator<<=, operator>>=):

          Once again placed the definitions of these Any insertion and
          extraction operators in the CORBA namespace.  The fix was
          reverted in the latest Any implementation changes.  Fixes
          "unresolved symbol" link-time errors when using these
          operators.

Wed Mar 19 13:27:09 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/CodeSets/simple/Makefile: Fix the dependancies so that the
          idl compiler isn't run twice in parallel jobs, thus corrupting
          the generated Skeleton file.

Tue Mar 18 18:00:47 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/fe_declarator.cpp:

          Added a check for 0 prefix before doing a string compare.

Tue Mar 18 17:48:15 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * performace-tests/Latency/DSI/Roundtrip.cpp:

          Changed the signature of calls to the Any constructor.

Tue Mar 18 17:40:40 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.h:

          Removed declarations of two unused, unimplemented methods.

        * tao/Any_T.cpp:

          Added calls to assign_translator() in the extract() method,
          after the attempt at typed extraction fails, for some
          additional Any_*_Impl template types - types which could
          contain a (w)string or (w)char nested at some level.

Tue Mar 18 15:31:06 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/examples/ORT/ObjectReferenceFactory.idl:

          New file containing this example's concrete
          ObjectReferenceFactory valuetype.  The example incorrectly
          attempted to use an abstract valuetype.

        * orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h:

          Inherit from the new concrete ObjectReferenceFactory valuetype
          instead of the PortableInterceptor::ObjectReferenceFactory
          abstract valuetype.  Fixes compile-time errors related to
          instantiation of an abstract class.

          Removed all useless includes.

        * orbsvcs/examples/ORT/Server_IORInterceptor.cpp
          (establish_components):

          Removed code that needlessly added a tagged component object
          references.

          (components_established):

          Added missing emulated exception macro parameters.

        * orbsvcs/examples/ORT/Server_IORInterceptor.h:

          Made destructor protected since the class is reference counted.

        * orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp:
        * orbsvcs/examples/ORT/server.cpp:

          Removed useless includes.

        * orbsvcs/examples/ORT/Makefile (IDL_FILES):

          Added new ObjectReferenceFactory IDL source to this Makefile.

          (TAO_IDLFLAGS):

          Added "-Gv" TAO_IDL compiler option to enable support for
          valuetypes.

Tue Mar 18 16:54:50 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/TAOC.cpp:
        * tao/PortableServer/PortableServerC.cpp:

          Added 'template<>' to specializations in hand-crafted code
          that were overlooked in a previous checkin.

Tue Mar 18 15:45:19 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:
        * tao/Any.h:

          Added patches from Phil Mesnier <mesnier_p@ociweb.com>
          to treat the codeset translators in TAO::Unknown_IDL_Type
          as singletons attached to a CDR stream instead of being
          produced by a facory in the ORB core. This removeds the
          dependency of Anys on the ORB core and closes [BUGID 446].

Mon Mar 17 09:51:36 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_module.cpp (fe_add_module):

          Added a check for a 0 prefix (as opposed to one that is
          an empty string) before doing a string compare. As a result
          of the change in the entry below, it became possible for
          this to happen when checking for previous openings of a
          module, in order to pass along any prefix that may have
          been applied to the previous opening. If a prefix of 0
          is found, this now indicates that we are looking at the
          global scope, and can break out of the checking loop
          immediately.

Fri Mar 14 21:50:10 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/util/utl_global.cpp:

          Fixed improper clearing of a #pragma prefix directive,
          thanks to Gary Duzan <gduzan@bbn.com> and Craig Rodrigues
          <crodrigu@bbn.com> for sending in the example of included
          IDL files that uncovered the bug.

        * TAO_IDL/driver/drv_init.cpp:

          Removed an unused file that was overlooked in a previous
          checkin.

Fri Mar 14 16:55:00 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/PortableServerC.i:

          Added some missing TAO_HAS_MINIMUM_POA guards.

Fri Mar 14 14:48:53 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/examples/ORT/Gateway_i.cpp:

          Fixed Any constructor to have a CORBA compliant signature.

Fri Mar 14 14:08:08 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:

          Moved generation of TAO::Any_*_Impl_T<>::(de)marshal_value()
          for local IDL declarations so the methods will appear before the
          guarded explicit template instantiation. ANSI requires
          that template specializations appear before an explicit
          instantiation, so compilers that require the explicit
          instantiation were reporting errors. Thanks to Phil
          Mesnier <mesnier_p@ociweb.com> for reporting the bug.

        * tao/CurrentC.cpp:
        * tao/IOPC.cpp:
        * tao/PolicyC.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/TAOC.cpp:
        * tao/IORManipulation/IORC.cpp:
        * tao/Messaging/Messaging_No_ImplC.cpp:
        * tao/Messaging/Messaging_RT_PolicyC.cpp:
        * tao/Messaging/Messaging_SyncScope_PolicyC.cpp:
        * tao/Messaging/TAO_ExtC.cpp:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTCORBA/RTCORBAC.i:
        * tao/RTPortableServer/RTPortableServerC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:

          Edited hand-crafted files to conform to the changes above.

Fri Mar 14 08:46:46 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp (create_profile)
          (create_new_profile, create_shared_profile):

          Corrected ObjectKey parameter in these methods.  The
          "TAO_ObjectKey" type has been replaced by the "TAO::ObjectKey"
          type.

Thu Mar 13 19:20:30 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.cpp:

          Commented out unused args.

Thu Mar 13 17:12:21 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.h (TAO_SSLIOP_Profile):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp (TAO_SSLIOP_Profile):

          Corrected ObjectKey parameter in these constructors.  The
          "TAO_ObjectKey" type has been replaced by the "TAO::ObjectKey"
          type.

          (parse_string):

          Added missing ACE_CHECK.  Fixes potentially missed run-time
          errors in emulated exception builds.

Thu Mar 13 14:13:08 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:

          Adjusted another throw spec to match the declared one,
          overlooked in

          Thu Mar 13 09:05:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

Thu Mar 13 11:49:25 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Removed a duplicate explicit instantiation and added
          'template<>' before some specializations.

Thu Mar 13 10:45:05 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/RTCORBA/Linear_Priority_Mapping.cpp:
        * tao/RTCORBA/Thread_Pool.cpp:
        * tao/RTPortableServer/RT_POA.cpp:
        * tao/RTPortableServer/RT_Policy_Validator.cpp:

          Removed 'greater than' comparisons between a native policy value
          and RTCORBA::maxPriority. Since these quantities are both typed
          as CORBA::Short and RTCORBA::maxPriority is given the value
          32767 in RTCORBA.pidl, the comparison will always be false. This
          error started appearing because code generation was changed to
          assign constant values in the stub header file instead of in
          the stub source file as formerly, so now the compiler knows the
          value of the constant from just an include of the header file.

Thu Mar 13 10:14:42 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/TAO.dsp:

          Set the template source files to be excluded from the build.

Thu Mar 13 10:09:22 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:

          Removed unused arguments.

        * tao/DynamicAny/DynUnion_i.cpp:

          Commented out unused argument.

Thu Mar 13 09:05:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:

          Fixed the throw specs of several functions so the
          declaration matches the definition.

Thu Mar 13 000:14:10 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/Log/PersistStore.cpp (retrieve):

          Changed creation of Any to be compatible with the new
          implementation.

Wed Mar 12 22:25:46 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

          Added 'template<>' declaration for generated
          template specializations. This is required by
          ANSI, but still optional with many compilers.

        * tao/CurrentC.cpp:
        * tao/DomainC.cpp:
        * tao/Exception.cpp:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/PolicyC.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/tao/dsp
        * tao/TAOC.cpp:
        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IORManipulation/IORC.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/Messaging_No_ImplC.cpp:
        * tao/Messaging/Messaging_RT_PolicyC.cpp:
        * tao/Messaging/Messaging_SyncScope_PolicyC.cpp:
        * tao/Messaging/TAO_ExtC.cpp:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTPortableServer/RTPortableServerC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:

          Similar additions to hand-crafted files.

Wed Mar 12 17:19:45 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any_T.cpp:

          Fixed constructor Any_Dual_Impl_T<T> from T& to pass
          the Any destructor to the base class constructor.

Wed Mar 12 17:03:14 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/Makefile:
        * performance-tests/Cubit/TAO/MT_Cubit/Makefile:

          Added separators '\' that are somehow left out in just
          a few places by make depend.

Wed Mar 12 13:35:47 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * */Makefile*:

          Updated dependencies again.

Wed Mar 12 11:10:20 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils_T.h:

          Added missing "ace/post.h" include.

Wed Mar 12 12:19:58 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/ObjectIDListC.*:

          Removed these misspelled filenames from the repository.

Wed Mar 12 10:09:57 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Makefile.am:
        * tao/Makefile.bor:

          "ObjectIDList.*" -> "ObjectIdListC.*".  The former set of files
          have been replaced with the latter set of files.

Wed Mar 12 10:02:55 2003  Ossama Othman  <ossama@uci.edu>

        * tao/corba.h:
        * tao/ORB_Core.cpp:

          Corrected typo.  "ObjectIdListC.h" instead of "ObjectIDListC.h"

Wed Mar 12 11:43:50 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Makefile.tao:

          Fixed typo in a newly added file.

Wed Mar 12 09:25:34 2003  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be_include/be_codegen.h:

          Fixed a "comma at end of enumerator list" warning.

Wed Mar 12 09:11:48 2003  Ossama Othman  <ossama@uci.edu>

        * tao/RTCORBA/RT_ORBInitializer.cpp:

          Include "tao/debug.h" to pull in TAO_debug_level global
          variable declaration.

Wed Mar 12 09:49:00 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * Merge of the dyn_corba CVS branch. The new features included
        in this merge are:

        - Updates, including new files, to the Interface Repository
          to make it compliant with CORBA 3.0. Note that implementation
          class method bodies for most of the valuetype and CCM-related
          types are not yet filled in.

        - Change of operation dispatch in the IFR from Servant Locator
          to Default Servant.

        - Optimizations to the IFR to eliminate data copies and
          new/delete pairs.

        - A new latency/throughput test for the IFR.

        - A new template-based implementation of CORBA::Any. Thanks to
          Carlos O'Ryan <coryan@atdesk.com> for his inspiration with
          the design.

        - A new performance test for Any insertion and extraction.

        - An expanded anyop test in TAO/tests/Param_Test.

        - Removal of most of the context state enum values in the IDL
          compiler.

        - Extension of TypeCodeFactory to support valuetypes and CORBA
          component related types.

        - Support in TypeCodeFactory for recursive types. Thanks to
          Boris Kolpackov <boris@isis-server.isis.vanderbilt.edu> for
          his suggestions on the design of this feature.

        - Addition of support files (makefiles, MSVC project files, and
          Perl scripts) for the new codeset translator test added by
          Phil Mesnier <mesnier_p@ociweb.com>.

        * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentModuleDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentModuleDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EventPortDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EventPortDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExtAbstractInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExtAbstractInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExtAttributeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExtAttributeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExtInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExtInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExtLocalInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExtLocalInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExtValueDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExtValueDef_i.h:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils_T.h:
        * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.cpp:
        * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.h:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency Test.dsp:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.cpp:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.h:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/client.cpp:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/run_test.pl:
        * performance-tests/Anyop/Anyop.dsp:
        * performance-tests/Anyop/Makefile:
        * performance-tests/Anyop/Makefile.bor:
        * performance-tests/Anyop/anyop.cpp:
        * performance-tests/Anyop/test.idl:
        * tao/Any_T.cpp:
        * tao/Any_T.h:
        * tao/Any_T.inl:
        * ObjectIdList.pidl:
        * tao/ObjectIdListC.cpp:
        * tao/ObjectIdListC.h:
        * tao/ObjectIdListC.i:
        * tao/Services.pidl:
        * tao/ServicesC.cpp:
        * tao/ServicesC.h:
        * tao/ServicesC.i:
        * tests/CodeSets/CodeSets.dsw:
        * tests/CodeSets/Makefile:
        * tests/CodeSets/Makefile.bor:
        * tests/CodeSets/libs/Makefile:
        * tests/CodeSets/libs/Makefile.bor:
        * tests/CodeSets/libs/IBM1047_ISO8859/IBM1047_ISO8859.bor:
        * tests/CodeSets/simple/Makefile.bor:
        * tests/CodeSets/simple/client.bor:
        * tests/CodeSets/simple/client.dsp:
        * tests/CodeSets/simple/run_test.pl:
        * tests/CodeSets/simple/server.bor:
        * tests/CodeSets/simple/server.dsp:

          New files.

        * orbsvcs/orbsvcs/IFRService/Servant_Factory.cpp:
        * orbsvcs/orbsvcs/IFRService/Servant_Factory.h:
        * orbsvcs/orbsvcs/IFRService/Servant_Locator.cpp:
        * orbsvcs/orbsvcs/IFRService/Servant_Locator.h:
        * IFR_TypeCodes.cpp:
        * ObjectIDList.h:
        * ObjectIDList.i:
        * ObjectIDList.cpp:
        * Services.h:
        * Services.i:
        * Services.cpp:

          Removed files.

        * TAOACE.dsw:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_decl.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component_ih.cpp:
        * TAO_IDL/be/be_visitor_component/component_is.cpp:
        * TAO_IDL/be/be_visitor_component/component_sh.cpp:
        * TAO_IDL/be/be_visitor_component/component_si.cpp:
        * TAO_IDL/be/be_visitor_component/component_ss.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/component_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/enum_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_sh.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_si.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_ss.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/eventtype_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/exception.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_field/field_ci.cpp:
        * TAO_IDL/be/be_visitor_field/field_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_si.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/argument.cpp:
        * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/smart_proxy_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/tie_si.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/structure.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_cs.cpp:
        * TAO_IDL/be/be_visitor_union/union.cpp:
        * TAO_IDL/be/be_visitor_union/union_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_ci.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * examples/AMI/FL_Callback/AMI_Peer.dsp:
        * examples/AMI/FL_Callback/AMI_Progress.dsp:
        * examples/Buffered_Oneways/client.dsp:
        * examples/Buffered_Oneways/server.dsp:
        * examples/Callback_Quoter/Consumer.dsp:
        * examples/Callback_Quoter/Notifier.dsp:
        * examples/Callback_Quoter/Supplier.dsp:
        * examples/Content_Server/AMI_Iterator/client.dsp:
        * examples/Content_Server/AMI_Iterator/server.dsp:
        * examples/Content_Server/AMI_Observer/client.dsp:
        * examples/Content_Server/AMI_Observer/server.dsp:
        * examples/Content_Server/SMI_Iterator/client.dsp:
        * examples/Content_Server/SMI_Iterator/server.dsp:
        * examples/Event_Comm/Consumer.dsp:
        * examples/Event_Comm/Notifier.dsp:
        * examples/Event_Comm/Supplier.dsp:
        * examples/Load_Balancing/client.dsp:
        * examples/Load_Balancing/server.dsp:
        * examples/Load_Balancing/service.dsp:
        * examples/Load_Balancing_persistent/client.dsp:
        * examples/Load_Balancing_persistent/server.dsp:
        * examples/Load_Balancing_persistent/service.dsp:
        * examples/OBV/Typed_Events/client.dsp:
        * examples/OBV/Typed_Events/server.dsp:
        * examples/POA/DSI/Database_i.cpp:
        * examples/POA/DSI/client.dsp:
        * examples/POA/DSI/server.dsp:
        * examples/POA/Default_Servant/client.dsp:
        * examples/POA/Default_Servant/server.dsp:
        * examples/POA/Forwarding/client.dsp:
        * examples/POA/Forwarding/server.dsp:
        * examples/POA/Generic_Servant/client.dsp:
        * examples/POA/Generic_Servant/server.dsp:
        * examples/POA/TIE/client.dsp:
        * examples/POA/TIE/server.dsp:
        * examples/Persistent_Grid/Persistent_Grid_Client_Files.dsp:
        * examples/Persistent_Grid/Persistent_Grid_Second_Client_Files.dsp:
        * examples/Persistent_Grid/Persistent_Grid_Server_Files.dsp:
        * examples/Quoter/Factory_Finder.dsp:
        * examples/Quoter/Generic_Factory.dsp:
        * examples/Quoter/client.dsp:
        * examples/Quoter/server.dsp:
        * examples/Simple/bank/client.dsp:
        * examples/Simple/bank/server.dsp:
        * examples/Simple/chat/client.dsp:
        * examples/Simple/chat/server.dsp:
        * examples/Simple/echo/client.dsp:
        * examples/Simple/echo/server.dsp:
        * examples/Simple/grid/client.dsp:
        * examples/Simple/grid/server.dsp:
        * examples/Simple/time/client.dsp:
        * examples/Simple/time/server.dsp:
        * examples/Simple/time-date/Time_Date.dsp:
        * examples/Simple/time-date/client.dsp:
        * examples/Simulator/Event_Supplier/DualEC_Sup.dsp:
        * examples/Simulator/Event_Supplier/Event_Sup.dsp:
        * examples/Simulator/Event_Supplier/Logging_Sup.dsp:
        * examples/TypeCode_Creation/TypeCode_Creation.dsp:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/ImplRepo_Service/Forwarder.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * orbsvcs/examples/CosEC/Factory/FactoryClient.dsp:
        * orbsvcs/examples/CosEC/Factory/FactoryServer.dsp:
        * orbsvcs/examples/Security/Send_File/Send_File_Client.dsp:
        * orbsvcs/examples/Security/Send_File/Send_File_Server.dsp:
        * orbsvcs/orbsvcs/AV.dsp:
        * orbsvcs/orbsvcs/CosConcurrency.dsp:
        * orbsvcs/orbsvcs/CosEvent.dsp:
        * orbsvcs/orbsvcs/CosLifeCycle.dsp:
        * orbsvcs/orbsvcs/CosLoadBalancing.dsp:
        * orbsvcs/orbsvcs/CosNaming.dsp:
        * orbsvcs/orbsvcs/CosNotification.dsp:
        * orbsvcs/orbsvcs/CosProperty.dsp:
        * orbsvcs/orbsvcs/CosTime.dsp:
        * orbsvcs/orbsvcs/CosTrading.dsp:
        * orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
        * orbsvcs/orbsvcs/DsLogAdmin.dsp:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:
        * orbsvcs/orbsvcs/FT_ORB.dsp:
        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:
        * orbsvcs/orbsvcs/IFRService.dsp:
        * orbsvcs/orbsvcs/Makefile.iFRService:
        * orbsvcs/orbsvcs/PortableGroup.dsp:
        * orbsvcs/orbsvcs/RTEvent.dsp:
        * orbsvcs/orbsvcs/RTEventLog.dsp:
        * orbsvcs/orbsvcs/RTSched.dsp:
        * orbsvcs/orbsvcs/SSLIOP.dsp:
        * orbsvcs/orbsvcs/Security.dsp:
        * orbsvcs/orbsvcs/Svc_Utils.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
        * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AliasDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ArrayDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ArrayDef_i.h:
        * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AttributeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h:
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Contained_i.h:
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Container_i.h:
        * orbsvcs/orbsvcs/IFRService/EmitsDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EmitsDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EventDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EventDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FactoryDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FactoryDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FinderDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FinderDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FixedDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FixedDef_i.h:
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/IDLType_i.cpp:
        * orbsvcs/orbsvcs/IFRService/IDLType_i.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Loader.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.h:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ModuleDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ModuleDef_i.h:
        * orbsvcs/orbsvcs/IFRService/NativeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/NativeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.h:
        * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/PublishesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PublishesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Repository_i.h:
        * orbsvcs/orbsvcs/IFRService/SequenceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/SequenceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/StringDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/StringDef_i.h:
        * orbsvcs/orbsvcs/IFRService/StructDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/StructDef_i.h:
        * orbsvcs/orbsvcs/IFRService/TypedefDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/TypedefDef_i.h:
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.h:
        * orbsvcs/orbsvcs/IFRService/UsesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/UsesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.h:
        * orbsvcs/orbsvcs/IFRService/WstringDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/WstringDef_i.h:
        * orbsvcs/orbsvcs/IFRService/concrete_classes.h:
        * orbsvcs/orbsvcs/IFRService/tmplinst.cpp:
        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Service.h:
        * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
        * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:
        * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.i:
        * orbsvcs/orbsvcs/Property/CosPropertyService_i.cpp:
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.dsp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.dsp:
        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
        * orbsvcs/tests/tests.dsw:
        * orbsvcs/tests/EC_Custom_Marshal/ECCM_Consumer.dsp:
        * orbsvcs/tests/EC_Custom_Marshal/ECCM_Supplier.dsp:
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.dsp:
        * orbsvcs/tests/FaultTolerance/IOGR/server.dsp:
        * orbsvcs/tests/ImplRepo/airplane_client.dsp:
        * orbsvcs/tests/ImplRepo/airplane_server.dsp:
        * orbsvcs/tests/ImplRepo/nestea_client.dsp:
        * orbsvcs/tests/ImplRepo/nestea_server.dsp:
        * orbsvcs/tests/InterfaceRepo/InterfaceRepo.dsw:
        * orbsvcs/tests/InterfaceRepo/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/IFR_Test.dsp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/run_test.pl:
        * orbsvcs/tests/Interoperable_Naming/client.dsp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/client.dsp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.dsp:
        * orbsvcs/tests/Miop/McastHello/client.dsp:
        * orbsvcs/tests/Miop/McastHello/server.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Security/Big_Request/client.dsp:
        * orbsvcs/tests/Security/Big_Request/server.dsp:
        * orbsvcs/tests/Security/Callback/client.dsp:
        * orbsvcs/tests/Security/Callback/server.dsp:
        * orbsvcs/tests/Security/MT_SSLIOP/client.dsp:
        * orbsvcs/tests/Security/MT_SSLIOP/server.dsp:
        * orbsvcs/tests/Security/Secure_Invocation/client.dsp:
        * orbsvcs/tests/Security/Secure_Invocation/server.dsp:
        * orbsvcs/tests/Security/SecurityLevel1/client.dsp:
        * orbsvcs/tests/Security/SecurityLevel1/server.dsp:
        * orbsvcs/tests/Simple_Naming/client.dsp:
        * orbsvcs/tests/Trading/TradingLib.dsp:
        * performance-tests/Makefile:
        * performance-tests/Makefile.bor:
        * performance-tests/TAO_Perf_Tests.dsw:
        * performance-tests/Callback/client.dsp:
        * performance-tests/Callback/server.dsp:
        * performance-tests/Cubit/TAO/DII_Cubit/client.dsp:
        * performance-tests/Cubit/TAO/IDL_Cubit/client.dsp:
        * performance-tests/Cubit/TAO/IDL_Cubit/collocation_test.dsp:
        * performance-tests/Cubit/TAO/IDL_Cubit/server.dsp:
        * performance-tests/Cubit/TAO/MT_Cubit/client.dsp:
        * performance-tests/Cubit/TAO/MT_Cubit/server.dsp:
        * performance-tests/Latency/AMH/Single_Threaded/client.dsp:
        * performance-tests/Latency/AMH/Single_Threaded/server.dsp:
        * performance-tests/Latency/AMI/client.dsp:
        * performance-tests/Latency/AMI/server.dsp:
        * performance-tests/Latency/DII/client.dsp:
        * performance-tests/Latency/DII/server.dsp:
        * performance-tests/Latency/DSI/client.dsp:
        * performance-tests/Latency/DSI/server.dsp:
        * performance-tests/Latency/Deferred/client.dsp:
        * performance-tests/Latency/Deferred/server.dsp:
        * performance-tests/Latency/Single_Threaded/client.dsp:
        * performance-tests/Latency/Single_Threaded/server.dsp:
        * performance-tests/Latency/Thread_Per_Connection/client.dsp:
        * performance-tests/Latency/Thread_Per_Connection/server.dsp:
        * performance-tests/Latency/Thread_Pool/client.dsp:
        * performance-tests/Latency/Thread_Pool/server.dsp:
        * performance-tests/POA/Implicit_Activation/client.dsp:
        * performance-tests/POA/Implicit_Activation/collocated.dsp:
        * performance-tests/POA/Implicit_Activation/server.dsp:
        * performance-tests/POA/Object_Creation_And_Registration/registration.dsp:
        * performance-tests/Pluggable/client.dsp:
        * performance-tests/Pluggable/server.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/RTCORBA_Common.dsp:
        * performance-tests/RTCorba/Oneways/Reliable/client.dsp:
        * performance-tests/RTCorba/Oneways/Reliable/server.dsp:
        * performance-tests/RTCorba/Thread_Pool/client.dsp:
        * performance-tests/RTCorba/Thread_Pool/server.dsp:
        * performance-tests/Throughput/client.dsp:
        * performance-tests/Throughput/server.dsp:
        * tao/AbstractBase.cpp:
        * tao/AbstractBase.h:
        * tao/Abstract_Servant_Base.cpp:
        * tao/Abstract_Servant_Base.h:
        * tao/Acceptor_Filter.h:
        * tao/Adapter.cpp:
        * tao/Adapter.h:
        * tao/Any.cpp:
        * tao/Any.h:
        * tao/Any.i:
        * tao/Bounds.pidl:
        * tao/BoundsC.cpp:
        * tao/BoundsC.h:
        * tao/BoundsC.i:
        * tao/CDR_Encaps_Codec.cpp:
        * tao/CONV_FRAME.pidl:
        * tao/CONV_FRAMEC.cpp:
        * tao/CONV_FRAMEC.h:
        * tao/CONV_FRAMEC.i:
        * tao/Current.pidl:
        * tao/CurrentC.cpp:
        * tao/CurrentC.h:
        * tao/CurrentC.i:
        * tao/Domain.pidl:
        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/Dynamic.pidl:
        * tao/DynamicC.cpp:
        * tao/DynamicC.h:
        * DynamicC.i:
        * tao/Exception.cpp:
        * tao/GIOP.pidl:
        * tao/GIOPC.cpp:
        * tao/GIOPC.h:
        * tao/GIOPC.i:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Locate_Header.h:
        * tao/GIOP_Message_Locate_Header.i:
        * tao/IFR_Client_Adapter.h:
        * tao/IIOP.pidl:
        * tao/IIOPC.cpp:
        * tao/IIOPC.h:
        * tao/IIOPC.i:
        * tao/IIOP_Acceptor.cpp:
        * tao/IIOP_Acceptor.h:
        * tao/IIOP_Profile.cpp:
        * tao/IIOP_Profile.h:
        * tao/IIOP_Profile.i:
        * tao/IOP.pidl:
        * tao/IOPC.cpp:
        * tao/IOPC.h:
        * tao/IOPC.i:
        * tao/LocalObject.cpp:
        * tao/LocalObject.h:
        * tao/Makefile.am
        * tao/Makefile.bor:
        * tao/Makefile.tao
        * tao/Messaging_PolicyValue.pidl:
        * tao/Messaging_PolicyValueC.cpp:
        * tao/Messaging_PolicyValueC.h:
        * tao/Messaging_PolicyValueC.i:
        * tao/Messaging_SyncScope.pidl:
        * tao/Messaging_SyncScopeC.cpp:
        * tao/Messaging_SyncScopeC.h:
        * tao/Messaging_SyncScopeC.i:
        * tao/NVList.cpp:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Object.i:
        * tao/ObjectReferenceTemplate.pidl:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.i:
        * tao/Object_KeyC.cpp:
        * tao/Object_KeyC.h:
        * tao/Object_KeyC.i:
        * tao/Object_Proxy_Impl.cpp:
        * tao/Object_Proxy_Impl.h:
        * tao/OctetSeq.pidl:
        * tao/OctetSeqC.cpp:
        * tao/OctetSeqC.h:
        * tao/OctetSeqC.i:
        * tao/Policy.pidl:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/PolicyC.i:
        * tao/Policy_Forward.pidl:
        * tao/Policy_ForwardC.cpp:
        * tao/Policy_ForwardC.h:
        * tao/Policy_ForwardC.i:
        * tao/Pollable.pidl:
        * tao/PollableC.cpp:
        * tao/PollableC.h:
        * tao/PollableC.i:
        * tao/PortableInterceptor.pidl:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.i:
        * tao/Profile.cpp:
        * tao/Profile.h:
        * tao/Remote_Object_Proxy_Impl.cpp:
        * tao/RequestInfo_Util.cpp:
        * tao/Sequence_T.cpp:
        * tao/StringSeq.pidl:
        * tao/StringSeqC.cpp:
        * tao/StringSeqC.h:
        * tao/StringSeqC.i:
        * tao/Synch_Queued_Message.cpp:
        * tao/TAO.dsp:
        * tao/TAO.pidl:
        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/TAOC.i:
        * tao/TAO_Server_Request.cpp:
        * tao/TAO_Server_Request.h:
        * tao/TAO_Server_Request.i:
        * tao/Tagged_Profile.h:
        * tao/Tagged_Profile.i:
        * tao/Thread_Lane_Resources.h:
        * tao/TimeBase.pidl:
        * tao/TimeBaseC.cpp:
        * tao/TimeBaseC.h:
        * tao/TimeBaseC.i:
        * tao/Transport_Acceptor.h:
        * tao/TypeCodeFactory_Adapter.h:
        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/Typecode.i:
        * tao/Typecode_Constants.cpp:
        * tao/ValueBase.cpp:
        * tao/ValueBase.h:
        * tao/ValueBase.i:
        * tao/WrongTransaction.pidl:
        * tao/WrongTransactionC.cpp:
        * tao/WrongTransactionC.h:
        * tao/WrongTransactionC.i:
        * tao/append.cpp:
        * tao/corba.h:
        * tao/corbafwd.cpp:
        * tao/corbafwd.h:
        * tao/orb.idl:
        * tao/skip.cpp:
        * tao/target_specification.h:
        * tao/target_specification.i:
        * BiDir_GIOP/BiDirPolicy.pidl:
        * BiDir_GIOP/BiDirPolicyC.cpp:
        * BiDir_GIOP/BiDirPolicyC.h:
        * BiDir_GIOP/BiDirPolicyC.i:
        * BiDir_GIOP/TAO_BiDir_GIOP.dsp:
        * Domain/DomainS.cpp:
        * Domain/DomainS.h:
        * Domain/DomainS.i:
        * Domain/DomainS_T.cpp:
        * Domain/DomainS_T.h:
        * Domain/DomainS_T.i:
        * DynamicAny/DynAnyFactory.cpp:
        * DynamicAny/DynAny_i.cpp:
        * DynamicAny/DynAny_i.h:
        * DynamicAny/DynArray_i.cpp:
        * DynamicAny/DynCommon.cpp:
        * DynamicAny/DynEnum_i.cpp:
        * DynamicAny/DynSequence_i.cpp:
        * DynamicAny/DynStruct_i.cpp:
        * DynamicAny/DynUnion_i.cpp:
        * DynamicAny/DynUnion_i.h:
        * DynamicAny/DynamicAny.pidl:
        * DynamicAny/DynamicAnyC.cpp:
        * DynamicAny/DynamicAnyC.h:
        * DynamicAny/DynamicAnyC.i:
        * DynamicAny/TAO_DynamicAny.dsp:
        * DynamicInterface/Context.cpp:
        * DynamicInterface/Context.h:
        * DynamicInterface/DII_Invocation.cpp:
        * DynamicInterface/Dynamic_Implementation.cpp:
        * DynamicInterface/Dynamic_Implementation.h:
        * DynamicInterface/Request.cpp:
        * DynamicInterface/Request.inl:
        * DynamicInterface/Server_Request.cpp:
        * DynamicInterface/Unknown_User_Exception.cpp:
        * DynamicInterface/Unknown_User_Exception.h:
        * IFR_Client/IFR_Base.pidl:
        * IFR_Client/IFR_BaseC.cpp:
        * IFR_Client/IFR_BaseC.h:
        * IFR_Client/IFR_BaseC.i:
        * IFR_Client/IFR_Basic.pidl:
        * IFR_Client/IFR_BasicC.cpp:
        * IFR_Client/IFR_BasicC.h:
        * IFR_Client/IFR_BasicC.i:
        * IFR_Client/IFR_Client_Adapter_Impl.cpp:
        * IFR_Client/IFR_Components.pidl:
        * IFR_Client/IFR_ComponentsC.cpp:
        * IFR_Client/IFR_ComponentsC.h:
        * IFR_Client/IFR_ComponentsC.i:
        * IFR_Client/IFR_Extended.pidl:
        * IFR_Client/IFR_ExtendedC.cpp:
        * IFR_Client/IFR_ExtendedC.h:
        * IFR_Client/IFR_ExtendedC.i:
        * IFR_Client/TAO_IFR_Client.dsp:
        * IORManipulation/IOR.pidl:
        * IORManipulation/IORC.cpp:
        * IORManipulation/IORC.h:
        * IORManipulation/IORC.i:
        * IORManipulation/TAO_IORManip.dsp:
        * IORTable/IORTable.pidl:
        * IORTable/IORTableC.cpp:
        * IORTable/IORTableC.h:
        * IORTable/IORTableC.i:
        * IORTable/TAO_IORTable.dsp:
        * IORTable/Table_Adapter.cpp:
        * IORTable/Table_Adapter.h:
        * Messaging/Messaging.pidl:
        * Messaging/MessagingC.cpp:
        * Messaging/MessagingC.h:
        * Messaging/MessagingC.i:
        * Messaging/MessagingS.cpp:
        * Messaging/MessagingS.h:
        * Messaging/MessagingS.i:
        * Messaging/MessagingS_T.cpp:
        * Messaging/MessagingS_T.h:
        * Messaging/MessagingS_T.i:
        * Messaging/Messaging_No_Impl.pidl:
        * Messaging/Messaging_No_ImplC.cpp:
        * Messaging/Messaging_No_ImplC.h:
        * Messaging/Messaging_No_ImplC.i:
        * Messaging/Messaging_RT_Policy.pidl:
        * Messaging/Messaging_RT_PolicyC.cpp:
        * Messaging/Messaging_RT_PolicyC.h:
        * Messaging/Messaging_RT_PolicyC.i:
        * Messaging/Messaging_SyncScope_Policy.pidl:
        * Messaging/Messaging_SyncScope_PolicyC.cpp:
        * Messaging/Messaging_SyncScope_PolicyC.h:
        * Messaging/Messaging_SyncScope_PolicyC.i:
        * Messaging/TAO_Ext.pidl:
        * Messaging/TAO_ExtC.cpp:
        * Messaging/TAO_ExtC.h:
        * Messaging/TAO_ExtC.i:
        * Messaging/TAO_Messaging.dsp:
        * PortableServer/Default_Acceptor_Filter.cpp:
        * PortableServer/Default_Acceptor_Filter.h:
        * PortableServer/Default_ORT.pidl:
        * PortableServer/Default_ORTC.cpp:
        * PortableServer/Default_ORTC.h:
        * PortableServer/Default_ORTC.i:
        * PortableServer/Direct_Object_Proxy_Impl.cpp:
        * PortableServer/ImR_Locator.pidl:
        * PortableServer/ImR_LocatorC.cpp:
        * PortableServer/ImR_LocatorC.h:
        * PortableServer/ImR_LocatorC.i:
        * PortableServer/ImR_LocatorS.cpp:
        * PortableServer/ImR_LocatorS.h:
        * PortableServer/ImR_LocatorS.i:
        * PortableServer/ImR_LocatorS_T.cpp:
        * PortableServer/ImR_LocatorS_T.h:
        * PortableServer/ImR_LocatorS_T.i:
        * PortableServer/ImplRepoC.cpp:
        * PortableServer/ImplRepoC.h:
        * PortableServer/ImplRepoC.i:
        * PortableServer/ImplRepoS.cpp:
        * PortableServer/ImplRepoS.h:
        * PortableServer/ImplRepoS_T.cpp:
        * PortableServer/ImplRepoS_T.h:
        * PortableServer/ImplRepoS_T.i:
        * PortableServer/Object_Adapter.cpp:
        * PortableServer/Object_Adapter.h:
        * PortableServer/Object_Adapter.i:
        * PortableServer/POA.cpp:
        * PortableServer/POA.h:
        * PortableServer/PolicyS.cpp:
        * PortableServer/PolicyS.h:
        * PortableServer/PolicyS.i:
        * PortableServer/PolicyS_T.cpp:
        * PortableServer/PolicyS_T.h:
        * PortableServer/PolicyS_T.i:
        * PortableServer/PortableServer.pidl:
        * PortableServer/PortableServerC.cpp:
        * PortableServer/PortableServerC.h:
        * PortableServer/PortableServerC.i:
        * PortableServer/Servant_Base.cpp:
        * PortableServer/Servant_Base.h:
        * PortableServer/Servant_Base.i:
        * PortableServer/TAO_PortableServer.dsp:
        * PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
        * RTCORBA/RTCORBA.pidl:
        * RTCORBA/RTCORBAC.cpp:
        * RTCORBA/RTCORBAC.h:
        * RTCORBA/RTCORBAC.i:
        * RTCORBA/TAO_RTCORBA.dsp:
        * RTPortableServer/RTPortableServer.pidl:
        * RTPortableServer/RTPortableServerC.cpp:
        * RTPortableServer/RTPortableServerC.h:
        * RTPortableServer/RTPortableServerC.i:
        * RTPortableServer/RT_Acceptor_Filters.cpp:
        * RTPortableServer/RT_Acceptor_Filters.h:
        * RTPortableServer/RT_POA.cpp:
        * RTPortableServer/RT_POA.h:
        * RTPortableServer/TAO_RTPortableServer.dsp:
        * Strategies/DIOP_Acceptor.cpp:
        * Strategies/DIOP_Acceptor.h:
        * Strategies/DIOP_Profile.cpp:
        * Strategies/DIOP_Profile.h:
        * Strategies/DIOP_Profile.i:
        * Strategies/SHMIOP_Acceptor.cpp:
        * Strategies/SHMIOP_Acceptor.h:
        * Strategies/SHMIOP_Profile.cpp:
        * Strategies/SHMIOP_Profile.h:
        * Strategies/SHMIOP_Profile.i:
        * Strategies/UIOP_Acceptor.cpp:
        * Strategies/UIOP_Acceptor.h:
        * Strategies/UIOP_Profile.cpp:
        * Strategies/UIOP_Profile.h:
        * Strategies/UIOP_Profile.i:
        * TypeCodeFactory/TypeCodeFactory.dsp:
        * TypeCodeFactory/TypeCodeFactory.pidl:
        * TypeCodeFactory/TypeCodeFactoryC.cpp:
        * TypeCodeFactory/TypeCodeFactoryC.h:
        * TypeCodeFactory/TypeCodeFactoryC.inl:
        * TypeCodeFactory/TypeCodeFactory_Adapter_Impl.cpp:
        * TypeCodeFactory/TypeCodeFactory_Loader.h:
        * TypeCodeFactory/TypeCodeFactory_i.cpp:
        * TypeCodeFactory/TypeCodeFactory_i.h:
        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/TAO_Tests.dsw:
        * tests/AMI/AMI_Test_Client.dsp:
        * tests/AMI/AMI_Test_Server.dsp:
        * tests/AMI/AMI_Test_Simple_Client.dsp:
        * tests/AMI_Buffering/admin.dsp:
        * tests/AMI_Buffering/client.dsp:
        * tests/AMI_Buffering/server.dsp:
        * tests/AMI_Timeouts/client.dsp:
        * tests/AMI_Timeouts/server.dsp:
        * tests/BiDirectional/client.dsp:
        * tests/BiDirectional/server.dsp:
        * tests/BiDirectional_NestedUpcall/client.dsp:
        * tests/BiDirectional_NestedUpcall/server.dsp:
        * tests/Big_Oneways/client.dsp:
        * tests/Big_Oneways/server.dsp:
        * tests/Big_Reply/client.dsp:
        * tests/Big_Reply/server.dsp:
        * tests/Big_Request_Muxing/client.dsp:
        * tests/Big_Request_Muxing/server.dsp:
        * tests/Big_Twoways/client.dsp:
        * tests/Big_Twoways/server.dsp:
        * tests/Blocking_Sync_None/client.dsp:
        * tests/Blocking_Sync_None/server.dsp:
        * tests/Cache_Growth_Test/client.dsp:
        * tests/Cache_Growth_Test/server.dsp:
        * tests/Client_Leaks/child.dsp:
        * tests/Client_Leaks/client.dsp:
        * tests/Client_Leaks/server.dsp:
        * tests/CodeSets/libs/IBM1047_ISO8859/Char_IBM1047_ISO8859_Translator.cpp:
        * tests/CodeSets/libs/IBM1047_ISO8859/IBM1047_ISO8859.dsp:
        * tests/CodeSets/simple/README
        * tests/CodeSets/simple/client.cpp:
        * tests/CodeSets/simple/server.cpp:
        * tests/CodeSets/simple/simple.idl:
        * tests/Codec/client.dsp:
        * tests/Collocation/Collocation_Test_Stubs.dsp:
        * tests/Connection_Purging/client.dsp:
        * tests/Connection_Purging/server.dsp:
        * tests/Crash_On_Write/client.dsp:
        * tests/Crash_On_Write/server.dsp:
        * tests/Crashed_Callback/client.dsp:
        * tests/Crashed_Callback/server.dsp:
        * tests/DLL_ORB/Test_Client_Module.dsp:
        * tests/DLL_ORB/Test_Server_Module.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DynAny_Test/basic_test.dsp:
        * tests/DynAny_Test/data.cpp:
        * tests/DynAny_Test/test_dynany.cpp:
        * tests/DynAny_Test/test_dynstruct.cpp:
        * tests/DynAny_Test/test_dynunion.cpp:
        * tests/Explicit_Event_Loop/client.dsp:
        * tests/Explicit_Event_Loop/server.dsp:
        * tests/Exposed_Policies/Client.dsp:
        * tests/Exposed_Policies/Server.dsp:
        * tests/Faults/client.dsp:
        * tests/Faults/middle.dsp:
        * tests/Faults/ping.dsp:
        * tests/Faults/pong.dsp:
        * tests/Faults/server.dsp:
        * tests/Forwarding/client.dsp:
        * tests/Forwarding/server.dsp:
        * tests/Hello/client.dsp:
        * tests/Hello/server.dsp:
        * tests/IDL_Test/idl_test.dsp:
        * tests/InterOp-Naming/server.dsp:
        * tests/Leader_Followers/client.dsp:
        * tests/Leader_Followers/server.dsp:
        * tests/LongUpcalls/ami_client.dsp:
        * tests/LongUpcalls/ami_server.dsp:
        * tests/LongUpcalls/blocking_client.dsp:
        * tests/LongUpcalls/blocking_server.dsp:
        * tests/MProfile/client.dsp:
        * tests/MProfile/server.dsp:
        * tests/MT_Client/client.dsp:
        * tests/MT_Client/orb_creation.dsp:
        * tests/MT_Client/server.dsp:
        * tests/MT_Server/client.dsp:
        * tests/MT_Server/server.dsp:
        * tests/MT_Timeout/MT_Timeout_Client.dsp:
        * tests/MT_Timeout/MT_Timeout_Server.dsp:
        * tests/Multiple/Client.dsp:
        * tests/Multiple/Server.dsp:
        * tests/Multiple_Inheritance/client.dsp:
        * tests/Multiple_Inheritance/server.dsp:
        * tests/Muxing/client.dsp:
        * tests/Muxing/server.dsp:
        * tests/Native_Exceptions/client.dsp:
        * tests/Native_Exceptions/server.dsp:
        * tests/NestedUpcall/MT_Client_Test/client.dsp:
        * tests/NestedUpcall/MT_Client_Test/server.dsp:
        * tests/NestedUpcall/Simple/client.dsp:
        * tests/NestedUpcall/Simple/server.dsp:
        * tests/NestedUpcall/Triangle_Test/initiator.dsp:
        * tests/NestedUpcall/Triangle_Test/server_A.dsp:
        * tests/NestedUpcall/Triangle_Test/server_B.dsp:
        * tests/Nested_Event_Loop/client.dsp:
        * tests/Nested_Event_Loop/server.dsp:
        * tests/OBV/Any/client.dsp:
        * tests/OBV/Any/server.dsp:
        * tests/OBV/Factory/client.dsp:
        * tests/OBV/Factory/server.dsp:
        * tests/OBV/Forward/client.dsp:
        * tests/OBV/Forward/server.dsp:
        * tests/OBV/TC_Alignment/client.dsp:
        * tests/OBV/TC_Alignment/server.dsp:
        * tests/ORB_init/Portspan/portspan.dsp:
        * tests/ORT/client.dsp:
        * tests/ORT/server.dsp:
        * tests/Object_Loader/Test_DLL.dsp:
        * tests/Object_Loader/driver.dsp:
        * tests/OctetSeq/OctetSeq.dsp:
        * tests/OctetSeq/client.dsp:
        * tests/OctetSeq/server.dsp:
        * tests/Oneways_Invoking_Twoways/client.dsp:
        * tests/Oneways_Invoking_Twoways/server.dsp:
        * tests/POA/Default_Servant/Default_Servant.dsp:
        * tests/POA/Etherealization/Etherealization.dsp:
        * tests/POA/Excessive_Object_Deactivations/Excessive_Object_Deactivations.dsp:
        * tests/POA/Identity/Identity.dsp:
        * tests/POA/MT_Servant_Locator/MT_Servant_Locator.dsp:
        * tests/POA/Non_Servant_Upcalls/Non_Servant_Upcalls.dsp:
        * tests/POA/Object_Reactivation/Object_Reactivation.dsp:
        * tests/POA/POA_Destruction/POA_Destruction.dsp:
        * tests/POA/Persistent_ID/client.dsp:
        * tests/POA/Persistent_ID/server.dsp:
        * tests/POA/Single_Threaded_POA/Single_Threaded_POA.dsp:
        * tests/POA/wait_for_completion/wait_for_completion.dsp:
        * tests/Param_Test/any.cpp:
        * tests/Param_Test/anyop.cpp:
        * tests/Param_Test/anyop.dsp:
        * tests/Param_Test/client.dsp:
        * tests/Param_Test/complex_any.cpp:
        * tests/Param_Test/recursive_union.cpp:
        * tests/Param_Test/server.dsp:
        * tests/Queued_Message_Test/Queued_Message_Test.cpp:
        * tests/Reliable_Oneways/client.dsp:
        * tests/Reliable_Oneways/server.dsp:
        * tests/Server_Leaks/client.dsp:
        * tests/Server_Leaks/server.dsp:
        * tests/Single_Read/client.dsp:
        * tests/Single_Read/server.dsp:
        * tests/Timed_Buffered_Oneways/client.dsp:
        * tests/Timed_Buffered_Oneways/server.dsp:
        * tests/Timeout/client.dsp:
        * tests/Timeout/server.dsp:

          Modified files.

        * */Makefile.*:

          Updated dependencies on most makefiles in ACE_wrappers/TAO.

        Branch ChangeLog entries:

        Tue Mar  4 09:42:18 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tests/Param_Test/client.dsp:

                  Turned on RTTI for param_testC.cpp.

                * tests/Param_Test/anyop.dsp:

                  Same as above and removed link to Messaging library.

                * tests/Param_Test/anyop.cpp:

                  Re-added the var_array test, which now works, and added
                  tests of several other IDL types, testing for both
                  copying and non-copying insertion where applicable.

        Mon Mar  3 22:01:48 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.cpp:
                * tao/Any.h:
                * tao/Any.i:
                * tao/Any_T.cpp:
                * tao/Any_T.h:
                * tao/Any_T.inl:
                * tao/CurrentC.cpp:
                * tao/DomainC.cpp:
                * tao/IOPC.cpp:
                * tao/ObjectReferenceTemplateC.cpp:
                * tao/PolicyC.cpp:
                * tao/PortableInterceptorC.cpp:
                * tao/TAOC.cpp:
                * tao/IFR_Client/IFR_BaseC.cpp:
                * tao/IFR_Client/IFR_BasicC.cpp:
                * tao/IFR_Client/IFR_ComponentsC.cpp:
                * tao/IFR_Client/IFR_ExtendedC.cpp:
                * tao/IORManipulation/IORC.cpp:
                * tao/Messaging/MessagingC.cpp:
                * tao/Messaging/Messaging_No_ImplC.cpp:
                * tao/Messaging/Messaging_SyncScope_PolicyC.cpp:
                * tao/Messaging/TAO_ExtC.cpp:
                * tao/PortableServer/Default_ORTC.cpp:
                * tao/PortableServer/ImR_LocatorC.cpp:
                * tao/PortableServer/ImplRepoC.cpp:
                * tao/PortableServer/PortableServerC.cpp:
                * tao/RTCORBA/RTCORBAC.cpp:
                * tao/RTPortableServer/RTPortableServerC.cpp:
                * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:

                * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

                  Changed implementation of extraction operators
                  using to_object, to_value and to_abstract_base
                  New design includes a method in generated code.

                * TAO_IDL/be/be_codegen.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:

                  Added a patch from Bala that changes the fetching of
                  the object key to call the stub object, instead
                  of the CORBA::Object method, which will soon be
                  eliminated.

                * tao/ValueBase.h:
                * tao/ValueBase.i:

                  Added the _ptr_type and _var_type typedefs to
                  to ValueBase_var, as well as the static methods
                  that are generated for other interface and
                  valuetype _var classes in TAO.

        Thu Feb 27 09:36:05 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * performance-tests/Anyop/Anyop.dsp:
                * performance-tests/Anyop/Makefile:
                * performance-tests/Anyop/Makefile.bor:
                * performance-tests/Anyop/anyop.cpp:
                * performance-tests/Anyop/test.idl:

                  New test for benchmarking Any insertion and extraction
                  operators.

                * performance-tests/Makefile:
                * performance-tests/Makefile.bor:
                * performance-tests/TAO_Perf_Tests.dsw:

                  Added new test to makefiles and MSVC workspace.

        Mon Feb 24 16:49:34 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:

                  New files for template classes containing utility methods
                  used by several IFR implementation classes.

                * orbsvcs/orbsvcs/IFRService/tmplinst.cpp:

                  Added additional explicit template instantiations corresponding
                  to actual uses of the template classes in the above files.


        Mon Feb 24 000:27:32 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.h:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:

                  Changed template functions in a non-template utility
                  class to non-template functions in a template class,
                  to avoid internal compiler errors with VC6.

                * tests/Param_Test/any.cpp:
                * orbsvcs/ImplRepo_Service/Forwarder.cpp:
                * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
                * orbsvcs/orbsvcs/Notify/Service.h:
                * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
                * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
                * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:
                * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
                * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.cpp:
                * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.h:
                * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.h:
                * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.i:
                * orbsvcs/orbsvcs/Property/CosPropertyService_i.cpp:
                * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
                * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
                * examples/POA/DSI/Database_i.cpp:
                * tests/DynAny_Test/data.cpp:
                * tests/DynAny_Test/test_dynany.cpp:
                * tests/DynAny_Test/test_dynarray.cpp:
                * tests/DynAny_Test/test_dynenum.cpp:
                * tests/DynAny_Test/test_dynsequence.cpp:
                * tests/DynAny_Test/test_dynstruct.cpp:
                * tests/DynAny_Test/test_dynunion.cpp:
                * tests/Param_Test/complex_any.cpp:
                * tests/Param_Test/recursive_union.cpp:
                * tests/Queued_Message_Test/Queued_Message_Test.cpp:

                  Replaced instances of TAO_Object_Key with TAO::Object_Key.

                * tao/Any_T.cpp:

                  In cases where typed extraction fails and interpretive
                  extraction must be performed, the constructor of the
                  temporary CDR stream was changed to one that does not
                  own the underlying message block, thus eliminating a
                ` duplicate/release pair.

                * orbsvcs/tests/tests.dsw:

                  Removed some projects that no longer exist.

                * examples/AMI/FL_Callback/AMI_Peer.dsp:
                * examples/AMI/FL_Callback/AMI_Progress.dsp:
                * examples/Buffered_Oneways/client.dsp:
                * examples/Buffered_Oneways/server.dsp:
                * examples/Callback_Quoter/Consumer.dsp:
                * examples/Callback_Quoter/Notifier.dsp:
                * examples/Callback_Quoter/Supplier.dsp:
                * examples/Content_Server/AMI_Iterator/client.dsp:
                * examples/Content_Server/AMI_Iterator/server.dsp:
                * examples/Content_Server/AMI_Observer/client.dsp:
                * examples/Content_Server/AMI_Observer/server.dsp:
                * examples/Content_Server/SMI_Iterator/client.dsp:
                * examples/Content_Server/SMI_Iterator/server.dsp:
                * examples/Event_Comm/Consumer.dsp:
                * examples/Event_Comm/Notifier.dsp:
                * examples/Event_Comm/Supplier.dsp:
                * examples/Load_Balancing/client.dsp:
                * examples/Load_Balancing/server.dsp:
                * examples/Load_Balancing/service.dsp:
                * examples/Load_Balancing_persistent/client.dsp:
                * examples/Load_Balancing_persistent/server.dsp:
                * examples/Load_Balancing_persistent/service.dsp:
                * examples/OBV/Typed_Events/client.dsp:
                * examples/OBV/Typed_Events/server.dsp:
                * examples/POA/DSI/client.dsp:
                * examples/POA/DSI/server.dsp:
                * examples/POA/Default_Servant/client.dsp:
                * examples/POA/Default_Servant/server.dsp:
                * examples/POA/Forwarding/client.dsp:
                * examples/POA/Forwarding/server.dsp:
                * examples/POA/Generic_Servant/client.dsp:
                * examples/POA/Generic_Servant/server.dsp:
                * examples/POA/TIE/client.dsp:
                * examples/POA/TIE/server.dsp:
                * examples/Persistent_Grid/Persistent_Grid_Client_Files.dsp:
                * examples/Persistent_Grid/Persistent_Grid_Second_Client_Files.dsp:
                * examples/Persistent_Grid/Persistent_Grid_Server_Files.dsp:
                * examples/Quoter/Factory_Finder.dsp:
                * examples/Quoter/Generic_Factory.dsp:
                * examples/Quoter/client.dsp:
                * examples/Quoter/server.dsp:
                * examples/Simple/bank/client.dsp:
                * examples/Simple/bank/server.dsp:
                * examples/Simple/chat/client.dsp:
                * examples/Simple/chat/server.dsp:
                * examples/Simple/echo/client.dsp:
                * examples/Simple/echo/server.dsp:
                * examples/Simple/grid/client.dsp:
                * examples/Simple/grid/server.dsp:
                * examples/Simple/time/client.dsp:
                * examples/Simple/time/server.dsp:
                * examples/Simple/time-date/Time_Date.dsp:
                * examples/Simple/time-date/client.dsp:
                * examples/Simulator/Event_Supplier/DualEC_Sup.dsp:
                * examples/Simulator/Event_Supplier/Event_Sup.dsp:
                * examples/Simulator/Event_Supplier/Logging_Sup.dsp:
                * examples/TypeCode_Creation/TypeCode_Creation.dsp:
                * orbsvcs/examples/CosEC/Factory/FactoryClient.dsp:
                * orbsvcs/examples/CosEC/Factory/FactoryServer.dsp:
                * orbsvcs/examples/Security/Send_File/Send_File_Client.dsp:
                * orbsvcs/examples/Security/Send_File/Send_File_Server.dsp:
                * orbsvcs/orbsvcs/AV.dsp:
                * orbsvcs/orbsvcs/CosConcurrency.dsp:
                * orbsvcs/orbsvcs/CosEvent.dsp:
                * orbsvcs/orbsvcs/CosLifeCycle.dsp:
                * orbsvcs/orbsvcs/CosLoadBalancing.dsp:
                * orbsvcs/orbsvcs/CosNaming.dsp:
                * orbsvcs/orbsvcs/CosNotification.dsp:
                * orbsvcs/orbsvcs/CosProperty.dsp:
                * orbsvcs/orbsvcs/CosTime.dsp:
                * orbsvcs/orbsvcs/CosTrading.dsp:
                * orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
                * orbsvcs/orbsvcs/DsLogAdmin.dsp:
                * orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:
                * orbsvcs/orbsvcs/FT_ORB.dsp:
                * orbsvcs/orbsvcs/Fault_Tolerance.dsp:
                * orbsvcs/orbsvcs/PortableGroup.dsp:
                * orbsvcs/orbsvcs/RTEvent.dsp:
                * orbsvcs/orbsvcs/RTEventLog.dsp:
                * orbsvcs/orbsvcs/RTSched.dsp:
                * orbsvcs/orbsvcs/SSLIOP.dsp:
                * orbsvcs/orbsvcs/Security.dsp:
                * orbsvcs/orbsvcs/Svc_Utils.dsp:
                * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.dsp:
                * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.dsp:
                * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
                * orbsvcs/tests/EC_Custom_Marshal/ECCM_Consumer.dsp:
                * orbsvcs/tests/EC_Custom_Marshal/ECCM_Supplier.dsp:
                * orbsvcs/tests/FaultTolerance/IOGR/Manager.dsp:
                * orbsvcs/tests/FaultTolerance/IOGR/server.dsp:
                * orbsvcs/tests/ImplRepo/airplane_client.dsp:
                * orbsvcs/tests/ImplRepo/airplane_server.dsp:
                * orbsvcs/tests/ImplRepo/nestea_client.dsp:
                * orbsvcs/tests/ImplRepo/nestea_server.dsp:
                * orbsvcs/tests/InterfaceRepo/IFR_Test/IFR_Test.dsp:
                * orbsvcs/tests/Interoperable_Naming/client.dsp:
                * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/client.dsp:
                * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.dsp:
                * orbsvcs/tests/Miop/McastHello/client.dsp:
                * orbsvcs/tests/Miop/McastHello/server.dsp:
                * orbsvcs/tests/Notify/Blocking/Structured_Consumer.dsp:
                * orbsvcs/tests/Notify/Blocking/Structured_Supplier.dsp:
                * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.dsp:
                * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.dsp:
                * orbsvcs/tests/Notify/Discarding/Structured_Consumer.dsp:
                * orbsvcs/tests/Notify/Discarding/Structured_Supplier.dsp:
                * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.dsp:
                * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.dsp:
                * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.dsp:
                * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.dsp:
                * orbsvcs/tests/Notify/Ordering/Structured_Consumer.dsp:
                * orbsvcs/tests/Notify/Ordering/Structured_Supplier.dsp:
                * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp:
                * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp:
                * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.dsp:
                * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.dsp:
                * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
                * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
                * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
                * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:
                * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.dsp:
                * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.dsp:
                * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.dsp:
                * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.dsp:
                * orbsvcs/tests/Security/Big_Request/client.dsp:
                * orbsvcs/tests/Security/Big_Request/server.dsp:
                * orbsvcs/tests/Security/Callback/client.dsp:
                * orbsvcs/tests/Security/Callback/server.dsp:
                * orbsvcs/tests/Security/MT_SSLIOP/client.dsp:
                * orbsvcs/tests/Security/MT_SSLIOP/server.dsp:
                * orbsvcs/tests/Security/Secure_Invocation/client.dsp:
                * orbsvcs/tests/Security/Secure_Invocation/server.dsp:
                * orbsvcs/tests/Security/SecurityLevel1/client.dsp:
                * orbsvcs/tests/Security/SecurityLevel1/server.dsp:
                * orbsvcs/tests/Simple_Naming/client.dsp:
                * orbsvcs/tests/Trading/TradingLib.dsp:
                * performance-tests/Callback/client.dsp:
                * performance-tests/Callback/server.dsp:
                * performance-tests/Cubit/TAO/DII_Cubit/client.dsp:
                * performance-tests/Cubit/TAO/IDL_Cubit/client.dsp:
                * performance-tests/Cubit/TAO/IDL_Cubit/collocation_test.dsp:
                * performance-tests/Cubit/TAO/IDL_Cubit/server.dsp:
                * performance-tests/Cubit/TAO/MT_Cubit/client.dsp:
                * performance-tests/Cubit/TAO/MT_Cubit/server.dsp:
                * performance-tests/Latency/AMH/Single_Threaded/client.dsp:
                * performance-tests/Latency/AMH/Single_Threaded/server.dsp:
                * performance-tests/Latency/AMI/client.dsp:
                * performance-tests/Latency/AMI/server.dsp:
                * performance-tests/Latency/DII/client.dsp:
                * performance-tests/Latency/DII/server.dsp:
                * performance-tests/Latency/DSI/client.dsp:
                * performance-tests/Latency/DSI/server.dsp:
                * performance-tests/Latency/Deferred/client.dsp:
                * performance-tests/Latency/Deferred/server.dsp:
                * performance-tests/Latency/Single_Threaded/client.dsp:
                * performance-tests/Latency/Single_Threaded/server.dsp:
                * performance-tests/Latency/Thread_Per_Connection/client.dsp:
                * performance-tests/Latency/Thread_Per_Connection/server.dsp:
                * performance-tests/Latency/Thread_Pool/client.dsp:
                * performance-tests/Latency/Thread_Pool/server.dsp:
                * performance-tests/POA/Implicit_Activation/client.dsp:
                * performance-tests/POA/Implicit_Activation/collocated.dsp:
                * performance-tests/POA/Implicit_Activation/server.dsp:
                * performance-tests/POA/Object_Creation_And_Registration/registration.dsp:
                * performance-tests/Pluggable/client.dsp:
                * performance-tests/Pluggable/server.dsp:
                * performance-tests/RTCorba/Multiple_Endpoints/Common/RTCORBA_Common.dsp:
                * performance-tests/RTCorba/Oneways/Reliable/client.dsp:
                * performance-tests/RTCorba/Oneways/Reliable/server.dsp:
                * performance-tests/RTCorba/Thread_Pool/client.dsp:
                * performance-tests/RTCorba/Thread_Pool/server.dsp:
                * performance-tests/Throughput/client.dsp:
                * performance-tests/Throughput/server.dsp:
                * tao/TAO.dsp:
                * tao/BiDir_GIOP/TAO_BiDir_GIOP.dsp:
                * tao/DynamicAny/TAO_DynamicAny.dsp:
                * tao/IFR_Client/TAO_IFR_Client.dsp:
                * tao/IORManipulation/TAO_IORManip.dsp:
                * tao/IORTable/TAO_IORTable.dsp:
                * tao/Messaging/TAO_Messaging.dsp:
                * tao/PortableServer/TAO_PortableServer.dsp:
                * tao/RTCORBA/TAO_RTCORBA.dsp:
                * tao/RTPortableServer/TAO_RTPortableServer.dsp:
                * tao/Strategies/SHMIOP_Profile.i:
                * tao/TypeCodeFactory/TypeCodeFactory.dsp:
                * tests/AMI/AMI_Test_Client.dsp:
                * tests/AMI/AMI_Test_Simple_Client.dsp:
                * tests/AMI_Buffering/admin.dsp:
                * tests/AMI_Buffering/client.dsp:
                * tests/AMI_Buffering/server.dsp:
                * tests/AMI_Timeouts/client.dsp:
                * tests/AMI_Timeouts/server.dsp:
                * tests/BiDirectional/client.dsp:
                * tests/BiDirectional/server.dsp:
                * tests/BiDirectional_NestedUpcall/client.dsp:
                * tests/BiDirectional_NestedUpcall/server.dsp:
                * tests/Big_Oneways/client.dsp:
                * tests/Big_Oneways/server.dsp:
                * tests/Big_Reply/client.dsp:
                * tests/Big_Reply/server.dsp:
                * tests/Big_Request_Muxing/client.dsp:
                * tests/Big_Request_Muxing/server.dsp:
                * tests/Big_Twoways/client.dsp:
                * tests/Big_Twoways/server.dsp:
                * tests/Blocking_Sync_None/client.dsp:
                * tests/Blocking_Sync_None/server.dsp:
                * tests/Cache_Growth_Test/client.dsp:
                * tests/Cache_Growth_Test/server.dsp:
                * tests/Client_Leaks/child.dsp:
                * tests/Client_Leaks/client.dsp:
                * tests/Client_Leaks/server.dsp:
                * tests/Codec/client.dsp:
                * tests/Collocation/Collocation_Test_Stubs.dsp:
                * tests/Connection_Purging/client.dsp:
                * tests/Connection_Purging/server.dsp:
                * tests/Crash_On_Write/client.dsp:
                * tests/Crash_On_Write/server.dsp:
                * tests/Crashed_Callback/client.dsp:
                * tests/Crashed_Callback/server.dsp:
                * tests/DLL_ORB/Test_Client_Module.dsp:
                * tests/DLL_ORB/Test_Server_Module.dsp:
                * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
                * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
                * tests/DynAny_Test/basic_test.dsp:
                * tests/Explicit_Event_Loop/client.dsp:
                * tests/Explicit_Event_Loop/server.dsp:
                * tests/Exposed_Policies/Client.dsp:
                * tests/Exposed_Policies/Server.dsp:
                * tests/Faults/client.dsp:
                * tests/Faults/middle.dsp:
                * tests/Faults/ping.dsp:
                * tests/Faults/pong.dsp:
                * tests/Faults/server.dsp:
                * tests/Forwarding/client.dsp:
                * tests/Forwarding/server.dsp:
                * tests/Hello/client.dsp:
                * tests/Hello/server.dsp:
                * tests/IDL_Test/idl_test.dsp:
                * tests/InterOp-Naming/server.dsp:
                * tests/Leader_Followers/client.dsp:
                * tests/Leader_Followers/server.dsp:
                * tests/LongUpcalls/ami_client.dsp:
                * tests/LongUpcalls/ami_server.dsp:
                * tests/LongUpcalls/blocking_client.dsp:
                * tests/LongUpcalls/blocking_server.dsp:
                * tests/MProfile/client.dsp:
                * tests/MProfile/server.dsp:
                * tests/MT_Client/client.dsp:
                * tests/MT_Client/orb_creation.dsp:
                * tests/MT_Client/server.dsp:
                * tests/MT_Server/client.dsp:
                * tests/MT_Server/server.dsp:
                * tests/MT_Timeout/MT_Timeout_Client.dsp:
                * tests/MT_Timeout/MT_Timeout_Server.dsp:
                * tests/Multiple/Client.dsp:
                * tests/Multiple/Server.dsp:
                * tests/Multiple_Inheritance/client.dsp:
                * tests/Multiple_Inheritance/server.dsp:
                * tests/Muxing/client.dsp:
                * tests/Muxing/server.dsp:
                * tests/Native_Exceptions/client.dsp:
                * tests/Native_Exceptions/server.dsp:
                * tests/NestedUpcall/MT_Client_Test/client.dsp:
                * tests/NestedUpcall/MT_Client_Test/server.dsp:
                * tests/NestedUpcall/Simple/client.dsp:
                * tests/NestedUpcall/Simple/server.dsp:
                * tests/NestedUpcall/Triangle_Test/initiator.dsp:
                * tests/NestedUpcall/Triangle_Test/server_A.dsp:
                * tests/NestedUpcall/Triangle_Test/server_B.dsp:
                * tests/Nested_Event_Loop/client.dsp:
                * tests/Nested_Event_Loop/server.dsp:
                * tests/ORB_init/Portspan/portspan.dsp:
                * tests/ORT/client.dsp:
                * tests/ORT/server.dsp:
                * tests/Object_Loader/Test_DLL.dsp:
                * tests/Object_Loader/driver.dsp:
                * tests/OctetSeq/OctetSeq.dsp:
                * tests/OctetSeq/client.dsp:
                * tests/OctetSeq/server.dsp:
                * tests/Oneways_Invoking_Twoways/client.dsp:
                * tests/Oneways_Invoking_Twoways/server.dsp:
                * tests/POA/Default_Servant/Default_Servant.dsp:
                * tests/POA/Etherealization/Etherealization.dsp:
                * tests/POA/Excessive_Object_Deactivations/Excessive_Object_Deactivations.dsp:
                * tests/POA/Identity/Identity.dsp:
                * tests/POA/MT_Servant_Locator/MT_Servant_Locator.dsp:
                * tests/POA/Non_Servant_Upcalls/Non_Servant_Upcalls.dsp:
                * tests/POA/Object_Reactivation/Object_Reactivation.dsp:
                * tests/POA/POA_Destruction/POA_Destruction.dsp:
                * tests/POA/Persistent_ID/client.dsp:
                * tests/POA/Persistent_ID/server.dsp:
                * tests/POA/Single_Threaded_POA/Single_Threaded_POA.dsp:
                * tests/POA/wait_for_completion/wait_for_completion.dsp:
                * tests/Param_Test/client.dsp:
                * tests/Param_Test/server.dsp:
                * tests/Reliable_Oneways/client.dsp:
                * tests/Reliable_Oneways/server.dsp:
                * tests/Server_Leaks/client.dsp:
                * tests/Server_Leaks/server.dsp:
                * tests/Single_Read/client.dsp:
                * tests/Single_Read/server.dsp:
                * tests/Timed_Buffered_Oneways/client.dsp:
                * tests/Timed_Buffered_Oneways/server.dsp:
                * tests/Timeout/client.dsp:
                * tests/Timeout/server.dsp:
                * tests/ior_corbaloc/ior_corbaloc_client.dsp:
                * tests/ior_corbaloc/ior_corbaloc_server.dsp:
                * tests/ior_corbaloc/ior_corbaname_client.dsp:

                  Turned on RTTI for all generated stub source files (since Any_T.cpp
                  is included through Any_T.h via corba.h) and also for a few
                  other files that use Anys.

        Fri Feb 21 19:38:19 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
                * tao/Any_T.cpp:
                * tao/Any.cpp:

                  Fixed bugs turned up from running IFR_Test.

                * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:

                  Changed test checks because AttributeDef creation no longer
                  automatically creates corresponding OperationDef(s).

                * tao/Asynch_Queued_Message.cpp:
                * tao/Sequence.h:
                * tao/Synch_Queued_Message.cpp:
                * tao/Thread_Lane_Resources.h:

                  Added an include file to each of these to get rid of
                  build errors.

        Thu Feb 20 15:48:19 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService.dsp:
                * orbsvcs/orbsvcs/Makefile.IFRService
                * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ArrayDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Contained_i.h:
                * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.h:
                * orbsvcs/orbsvcs/IFRService/EmitsDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EmitsDef_i.h:
                * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EventPortDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EventPortDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtAbstractInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtAbstractInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtAttributeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtAttributeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtLocalInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtLocalInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.h:
                * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.h:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PublishesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PublishesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/SequenceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/StructDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueDef_i.h:

                  A start on completing the implementation of the CCM-related
                  additions to the IFR spec.

                * tests/AMI/AMI_Test_Server.dsp:
                * tests/AMI_Buffering/admin.dsp:
                * tests/AMI_Buffering/client.dsp:
                * tests/AMI_Buffering/server.dsp:
                * tests/AMI_Timeouts/client.dsp:
                * tests/AMI_Timeouts/server.dsp:
                * tests/IDL_Test/idl_test.dsp:
                * tests/OBV/Any/client.dsp:
                * tests/OBV/Any/server.dsp:
                * tests/OBV/Factory/client.dsp:
                * tests/OBV/Factory/server.dsp:
                * tests/OBV/Forward/client.dsp:
                * tests/OBV/Forward/server.dsp:
                * tests/OBV/TC_Alignment/client.dsp:
                * tests/OBV/TC_Alignment/server.dsp:
                * tests/Param_Test/anyop.cpp:
                * tests/Param_Test/anyop.dsp:
                * tests/Param_Test/client.dsp:
                * tests/Param_Test/server.dsp:

                  Tests in which RTTI had to be turned on in the MSVC
                  project to build without warnings, due to the new
                  Any implementation. This is not a complete list, just
                  the ones I have had occasion to run so far.

        Sun Feb  9 21:53:11 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentModuleDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentModuleDef_i.h:
                * orbsvcs/orbsvcs/IFRService/EventPortDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EventPortDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtAbstractInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtAbstractInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtAttributeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtAttributeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtLocalInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtLocalInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExtValueDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExtValueDef_i.h:
                * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceAttrExtension_i.h:

                  New files add to Interface Repository implementing the
                  changes to the ONG specification that allows a
                  component-aware IFR to interoperate with one implemented
                  before the CCM-related IDL changes.

                * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.h:

                  Files removed because the class they implement has been
                  removed from the specification.

                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h:
                * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.h:
                * orbsvcs/orbsvcs/IFRService/EmitsDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EmitsDef_i.h:
                * orbsvcs/orbsvcs/IFRService/EventDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EventDef_i.h:
                * orbsvcs/orbsvcs/IFRService/FactoryDef_i.h:
                * orbsvcs/orbsvcs/IFRService/FinderDef_i.h:
                * orbsvcs/orbsvcs/IFRService/HomeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/HomeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/PublishesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PublishesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/UsesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/UsesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/concrete_classes.h:
                * orbsvcs/orbsvcs/IFRService/tmplinst.cpp:

                  Interface Repository Service implementation files
                  modified to comply with the latest OMG
                  specification (CORBA 3.0). All skeleton files have
                  been regenerated.

                * tao/IFR_Client/IFR_Base.pidl:
                * tao/IFR_Client/IFR_BaseC.cpp:
                * tao/IFR_Client/IFR_BaseC.h:
                * tao/IFR_Client/IFR_BaseC.i:
                * tao/IFR_Client/IFR_Basic.pidl:
                * tao/IFR_Client/IFR_BasicC.cpp:
                * tao/IFR_Client/IFR_BasicC.h:
                * tao/IFR_Client/IFR_BasicC.i:
                * tao/IFR_Client/IFR_Components.pidl:
                * tao/IFR_Client/IFR_ComponentsC.cpp:
                * tao/IFR_Client/IFR_ComponentsC.h:
                * tao/IFR_Client/IFR_ComponentsC.i:
                * tao/IFR_Client/IFR_Extended.pidl:
                * tao/IFR_Client/IFR_ExtendedC.cpp:
                * tao/IFR_Client/IFR_ExtendedC.h:
                * tao/IFR_Client/IFR_ExtendedC.i:

                  Interface Repository Client files modified for the same
                  reason as above. All .pidl files have been mdofied and
                  stub files regenerated.

        Sat Feb  8 17:13:54 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:

                  Changed some generated CORBA_Anys to CORBA::Any.

                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:

                  When marshaling an interface union member, replaced a
                  generated call to the virtual marshal() method with a
                  call to the global <flat_name>_marshal() method, if
                  the interface is not yet defined when it is referenced.

        Sat Feb  8 13:15:10 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_visitor_structure/structure.cpp:

                  Added some switch cases that are now necessary because of
                  the recent removal of context states.. Error was discovered
                  generating code for TAO/tests/IDL_Test/union.idl.

        Wed Feb  5 13:11:42 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp (valid_content_type):

                  Fixed a bug in the unaliasing loop.

        Mon Feb  3 16:14:27 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

                  Added comments and cosmetic changes to create_recursive_tc().
                  Also changed update_map() to use the CDR stream's total
                  length to get the unaligned offset. Thanks to Matej
                  Sekoranja <matej.sekoranza@ijs.si> for suggesting this
                  last change.

        Mon Feb  3 11:30:31 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp (create_recursive_tc):

                  Changed ACE_ENV_ARG_DECL_NOT_USED to ACE_ENV_ARG_DECL.

        Wed Jan 29 20:47:39 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_visitor_context.cpp:
                * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
                * TAO_IDL/be/be_visitor_component/component_ch.cpp:
                * TAO_IDL/be/be_visitor_component/component_cs.cpp:
                * TAO_IDL/be/be_visitor_component/component_sh.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/argument.cpp:
                * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/operation.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
                * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/smart_proxy_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/smart_proxy_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/tie_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/tie_si.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union/union.cpp:
                * TAO_IDL/be/be_visitor_union/union_ch.cpp:
                * TAO_IDL/be/be_visitor_union/union_ci.cpp:
                * TAO_IDL/be/be_visitor_union/union_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be_include/be_codegen.h:

                  More removal of context state enum values.

                * TAO_IDL/fe/idl.ll:
                * TAO_IDL/fe/lex.yy.cpp:

                  Cosmetic changes.

        Wed Jan 29 01:04:07 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_visitor_decl.cpp:
                * TAO_IDL/be/be_visitor_array/array_ch.cpp:
                * TAO_IDL/be/be_visitor_array/array_ci.cpp:
                * TAO_IDL/be/be_visitor_array/array_cs.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
                * TAO_IDL/be/be_visitor_component/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_component/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_component/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_component/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_component/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_component/component.cpp:
                * TAO_IDL/be/be_visitor_component/component_ih.cpp:
                * TAO_IDL/be/be_visitor_component/component_is.cpp:
                * TAO_IDL/be/be_visitor_component/component_si.cpp:
                * TAO_IDL/be/be_visitor_component/component_ss.cpp:
                * TAO_IDL/be/be_visitor_component_fwd/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_component_fwd/component_fwd_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_field/field_ci.cpp:
                * TAO_IDL/be/be_visitor_field/field_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/tie_si.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_root/root_sth.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/structure.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
                * TAO_IDL/be/be_visitor_union/union.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be_include/be_codegen.h:

                  Removed more of the context state enum values.

                * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:

                  Changed generated code to use CORBA::OctetSeq in TAO
                  instead of Messaging::ExceptionHolder::_tao_octet_seq,
                  which no longer exists.

        Mon Jan 27 000:31:33 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_interface_strategy.cpp:
                * TAO_IDL/be/be_visitor_array/array_ch.cpp:
                * TAO_IDL/be/be_visitor_array/array_cs.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_component/component.cpp:
                * TAO_IDL/be/be_visitor_eventtype/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_eventtype/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_eventtype/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_eventtype/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_eventtype/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_ch.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_ci.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_cs.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_ch.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_ci.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_cs.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_sh.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_si.cpp:
                * TAO_IDL/be/be_visitor_eventtype/eventtype_ss.cpp:
                * TAO_IDL/be/be_visitor_eventtype_fwd/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_eventtype_fwd/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_eventtype_fwd/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_eventtype_fwd/eventtype_fwd_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_field/field_ci.cpp:
                * TAO_IDL/be/be_visitor_field/field_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_structure/structure.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
                * TAO_IDL/be_include/be_codegen.h:

                  Removed some of the context state enum values. This is
                  just a start - most of these can be removed and replaced
                  with the corresponding TAO_ROOT_* value. Also a change
                  to the creation of union typecodes (specifically the
                  insertion of label values into the typecode) required
                  by the new Any implementation.

                * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:

                  Minor changes related to the new Any implementation.

                * tao/Typecode.cpp:
                * tao/Typecode.h:
                * tao/Typecode.i:
                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.h:

                  Added recursive typecode support to TypeCodeFactory.
                  This involved fixing the TAO Typecode class to
                  handle recursive valuetype typecodes.

        Sun Jan 12 02:08:58 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/CosEvent.dsp:
                * orbsvcs/orbsvcs/CosNaming.dsp:
                * orbsvcs/orbsvcs/CosNotification.dsp:
                * orbsvcs/orbsvcs/CosTrading.dsp:
                * orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
                * orbsvcs/orbsvcs/DsLogAdmin.dsp:
                * orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:

                  Turned on RTTI in these projects, since they use the new
                  Any operators.

                * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
                * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
                * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
                * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp:

                  Fixed old-style Any internal calls in these files.

        Sun Jan 12 02:01:05 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/NVList.cpp:
                * tao/BiDir_GIOP/BiDirPolicy.pidl:
                * tao/BiDir_GIOP/BiDirPolicyC.cpp:
                * tao/BiDir_GIOP/BiDirPolicyC.h:
                * tao/BiDir_GIOP/BiDirPolicyC.i:
                * tao/Domain/DomainS.cpp:
                * tao/Domain/DomainS.h:
                * tao/Domain/DomainS.i:
                * tao/Domain/DomainS_T.cpp:
                * tao/Domain/DomainS_T.h:
                * tao/Domain/DomainS_T.i:
                * tao/DynamicAny/DynAnyFactory.cpp:
                * tao/DynamicAny/DynAnyFactory.h:
                * tao/DynamicAny/DynAny_i.cpp:
                * tao/DynamicAny/DynAny_i.h:
                * tao/DynamicAny/DynArray_i.cpp:
                * tao/DynamicAny/DynArray_i.h:
                * tao/DynamicAny/DynCommon.cpp:
                * tao/DynamicAny/DynCommon.h:
                * tao/DynamicAny/DynEnum_i.cpp:
                * tao/DynamicAny/DynEnum_i.h:
                * tao/DynamicAny/DynSequence_i.cpp:
                * tao/DynamicAny/DynSequence_i.h:
                * tao/DynamicAny/DynStruct_i.cpp:
                * tao/DynamicAny/DynStruct_i.h:
                * tao/DynamicAny/DynUnion_i.cpp:
                * tao/DynamicAny/DynUnion_i.h:
                * tao/DynamicAny/DynamicAny.pidl:
                * tao/DynamicAny/DynamicAnyC.cpp:
                * tao/DynamicAny/DynamicAnyC.h:
                * tao/DynamicAny/DynamicAnyC.i:
                * tao/DynamicInterface/Context.cpp:
                * tao/DynamicInterface/Context.h:
                * tao/DynamicInterface/DII_Invocation.cpp:
                * tao/DynamicInterface/Dynamic_Implementation.cpp:
                * tao/DynamicInterface/Dynamic_Implementation.h:
                * tao/DynamicInterface/Request.cpp:
                * tao/DynamicInterface/Request.h:
                * tao/DynamicInterface/Request.i:nl
                * tao/DynamicInterface/Server_Request.cpp:
                * tao/DynamicInterface/Unknown_User_Exception.cpp:
                * tao/DynamicInterface/Unknown_User_Exception.h:
                * tao/IORManipulation/IOR.pidl:
                * tao/IORManipulation/IORC.cpp:
                * tao/IORManipulation/IORC.h:
                * tao/IORManipulation/IORC.i:
                * tao/IORManipulation/TAO_IORManip.dsp:
                * tao/IORTable/IORTable.pidl:
                * tao/IORTable/IORTableC.cpp:
                * tao/IORTable/IORTableC.h:
                * tao/IORTable/IORTableC.i:
                * tao/Messaging/Messaging.pidl:
                * tao/Messaging/MessagingC.cpp:
                * tao/Messaging/MessagingC.h:
                * tao/Messaging/MessagingC.i:
                * tao/Messaging/MessagingS.cpp:
                * tao/Messaging/MessagingS.h:
                * tao/Messaging/MessagingS.i:
                * tao/Messaging/MessagingS_T.cpp:
                * tao/Messaging/MessagingS_T.h:
                * tao/Messaging/MessagingS_T.i:
                * tao/Messaging/Messaging_No_Impl.pidl:
                * tao/Messaging/Messaging_No_ImplC.cpp:
                * tao/Messaging/Messaging_No_ImplC.h:
                * tao/Messaging/Messaging_No_ImplC.i:
                * tao/Messaging/Messaging_RT_Policy.pidl:
                * tao/Messaging/Messaging_RT_PolicyC.cpp:
                * tao/Messaging/Messaging_RT_PolicyC.h:
                * tao/Messaging/Messaging_RT_PolicyC.i:
                * tao/Messaging/Messaging_SyncScope_Policy.pidl:
                * tao/Messaging/Messaging_SyncScope_PolicyC.cpp:
                * tao/Messaging/Messaging_SyncScope_PolicyC.h:
                * tao/Messaging/Messaging_SyncScope_PolicyC.i:
                * tao/Messaging/TAO_Ext.pidl:
                * tao/Messaging/TAO_ExtC.cpp:
                * tao/Messaging/TAO_ExtC.h:
                * tao/Messaging/TAO_ExtC.i:
                * tao/Messaging/TAO_Messaging.dsp:
                * tao/RTCORBA/RTCORBA.pidl:
                * tao/RTCORBA/RTCORBAC.cpp:
                * tao/RTCORBA/RTCORBAC.h:
                * tao/RTCORBA/RTCORBAC.i:
                * tao/RTCORBA/TAO_RTCORBA.dsp:
                * tao/RTPortableServer/RTPortableServer.pidl:
                * tao/RTPortableServer/RTPortableServerC.cpp:
                * tao/RTPortableServer/RTPortableServerC.h:
                * tao/RTPortableServer/RTPortableServerC.i:
                * tao/RTPortableServer/TAO_RTPortableServer.dsp:

                  Regenerated hand-crafted files in all TAO satellite libraries,
                  modified PIDL files and MSVC project files as needed, and
                  fixed a few mistakes in TAO, all relating to the new Any
                  implementation.

        Sat Jan 11 14:58:39 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/PortableServer/Default_ORT.pidl:
                * tao/PortableServer/Default_ORTC.cpp:
                * tao/PortableServer/Default_ORTC.h:
                * tao/PortableServer/Default_ORTC.i:
                * tao/PortableServer/ImR_Locator.pidl:
                * tao/PortableServer/ImR_LocatorC.cpp:
                * tao/PortableServer/ImR_LocatorC.h:
                * tao/PortableServer/ImR_LocatorC.i:
                * tao/PortableServer/ImR_LocatorS.cpp:
                * tao/PortableServer/ImR_LocatorS.h:
                * tao/PortableServer/ImR_LocatorS.i:
                * tao/PortableServer/ImR_LocatorS_T.cpp:
                * tao/PortableServer/ImR_LocatorS_T.h:
                * tao/PortableServer/ImR_LocatorS_T.i:
                * tao/PortableServer/ImplRepoC.cpp:
                * tao/PortableServer/ImplRepoC.h:
                * tao/PortableServer/ImplRepoC.i:
                * tao/PortableServer/ImplRepoS.cpp:
                * tao/PortableServer/ImplRepoS.h:
                * tao/PortableServer/ImplRepoS.i:
                * tao/PortableServer/ImplRepoS_T.cpp:
                * tao/PortableServer/ImplRepoS_T.h:
                * tao/PortableServer/ImplRepoS_T.i:
                * tao/PortableServer/Object_Adapter.cpp:
                * tao/PortableServer/Object_Adapter.i:
                * tao/PortableServer/POA.cpp:
                * tao/PortableServer/POA.h:
                * tao/PortableServer/PolicyS.cpp:
                * tao/PortableServer/PolicyS.h:
                * tao/PortableServer/PolicyS.i:
                * tao/PortableServer/PolicyS_T.cpp:
                * tao/PortableServer/PolicyS_T.h:
                * tao/PortableServer/PolicyS_T.i:
                * tao/PortableServer/PortableServer.pidl:
                * tao/PortableServer/PortableServerC.cpp:
                * tao/PortableServer/PortableServerC.h:
                * tao/PortableServer/PortableServerC.i:
                * tao/PortableServer/TAO_PortableServer.dsp:

                  Regeneration of .pidl files and other changes in the
                  PortableServer library.

        Sat Jan 11 000:18:33 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.cpp:
                * tao/Any.h:
                * tao/Any_T.h:
                * tao/NVList.cpp:
                * tao/Typecode_Constants.cpp:
                * tao/append.cpp:

                  More cleanup of internal incompatibilities with the new
                  Any implementation.

        Fri Jan 10 18:57:58 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.cpp:
                * tao/Any.h:
                * tao/CDR_Encaps_Codec.cpp:
                * tao/NVList.cpp:
                * tao/RequestInfo_Util.cpp:
                * tao/append.cpp:
                * tao/skip.cpp:

                  Some cleanup of internal incompatibilities with the new
                  Any implementation.

        Fri Jan 10 11:30:08 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any_T.inl:

                  Removed unnecessary forward declaration.

                * tao/Exception.cpp:
                * tao/Exception.h:

                  Added missing stuff related to new Any implementation.

                * tao/GIOPC.cpp:

                  Removed bodies of TAO::ObjectKey CDR operators. They are
                  now in Object_KeyC.cpp.

                * tao/Object_KeyC.cpp:
                * tao/Object_KeyC.i:
                * tao/PortableInterceptorC.cpp:
                * tao/PortableInterceptorC.h:

                  Fixed hand-crafting oversights.

                * tao/Typecode_Constants.cpp:

                  Removed ObjectId typecode, since it is now in ObjectIdListC.cpp.

        Fri Jan 10 09:53:45 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/ORB.cpp:
                * tao/ORB.h:
                * tao/ORB_Core.cpp:
                * tao/ORB_Core.h:
                * tao/corbafwd.h:

                  Removed typedef of ObjectIdList * to ObjectIdList_ptr.
                  Only interfaces and some well-known pseudo-objects
                  should have the _ptr typedef.

        Fri Jan 10 09:30:51 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/ObjectIDList.cpp:
                * tao/ObjectIDList.h:
                * tao/ObjectIDList.i:
                * tao/Services.cpp:
                * tao/Services.h:
                * tao/Services.i:

                  Removed these files containing hand-crafted generated
                  code.

                * tao/ObjectIdListC.cpp:
                * tao/ObjectIdListC.h:
                * tao/ObjectIdListC.i:
                * tao/Services.pidl:
                * tao/ServicesC.cpp:
                * tao/ServicesC.h:
                * tao/ServicesC.i:

                  Replaced the removed files with those above, and added
                  a .pidl file to generate the ServicesC.* files.

                * tao/ORB.h:
                * tao/ORB_Core.cpp:
                * tao/StringSeq.pidl:
                * tao/TAO.dsp:
                * tao/TAO_Server_Request.h:
                * tao/Typecode_Constants.cpp:
                * tao/corba.h:
                * tao/corbafwd.cpp:
                * tao/corbafwd.h:
                * tao/orb.idl:

                  Changes related to the new files listed above.

        Thu Jan  9 18:51:43 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Acceptor_Filter.h:
                * tao/Adapter.cpp:
                * tao/Adapter.h:
                * tao/Any.h:
                * tao/Bounds.pidl:
                * tao/BoundsC.cpp:
                * tao/BoundsC.h:
                * tao/BoundsC.i:
                * tao/CONV_FRAME.pidl:
                * tao/CONV_FRAMEC.cpp:
                * tao/CONV_FRAMEC.h:
                * tao/CONV_FRAMEC.i:
                * tao/Current.pidl:
                * tao/CurrentC.cpp:
                * tao/CurrentC.h:
                * tao/CurrentC.i:
                * tao/Domain.pidl:
                * tao/DomainC.cpp:
                * tao/DomainC.h:
                * tao/DomainC.i:
                * tao/Dynamic.pidl:
                * tao/DynamicC.cpp:
                * tao/DynamicC.h:
                * tao/DynamicC.i:
                * tao/Exception.cpp:
                * tao/GIOP.pidl:
                * tao/GIOPC.cpp:
                * tao/GIOPC.h:
                * tao/GIOPC.i:
                * tao/GIOP_Message_Base.cpp:
                * tao/GIOP_Message_Generator_Parser_10.cpp:
                * tao/GIOP_Message_Generator_Parser_12.cpp:
                * tao/GIOP_Message_Lite.cpp:
                * tao/GIOP_Message_Locate_Header.h:
                * tao/GIOP_Message_Locate_Header.i:
                * tao/IIOP.pidl:
                * tao/IIOPC.cpp:
                * tao/IIOPC.h:
                * tao/IIOPC.i:
                * tao/IIOP_Acceptor.cpp:
                * tao/IIOP_Acceptor.h:
                * tao/IIOP_Profile.cpp:
                * tao/IIOP_Profile.h:
                * tao/IIOP_Profile.i:
                * tao/IOP.pidl:
                * tao/IOPS.cpp:
                * tao/IOPS.h:
                * tao/IOPS.i:
                * tao/IOPS_T.cpp:
                * tao/IOPS_T.h:
                * tao/IOPS_T.i:
                * tao/LocalObject.cpp:
                * tao/LocalObject.h:
                * tao/Messaging_PolicyValue.pidl:
                * tao/Messaging_PolicyValueC.cpp:
                * tao/Messaging_PolicyValueC.h:
                * tao/Messaging_PolicyValueC.i:
                * tao/Messaging_SyncScope.pidl:
                * tao/Messaging_SyncScopeC.cpp:
                * tao/Messaging_SyncScopeC.h:
                * tao/Messaging_SyncScopeC.i:
                * tao/Object.cpp:
                * tao/Object.h:
                * tao/ObjectReferenceTemplate.pidl:
                * tao/ObjectReferenceTemplateC.cpp:
                * tao/ObjectReferenceTemplateC.h:
                * tao/ObjectReferenceTemplateC.i:
                * tao/Object_KeyC.cpp:
                * tao/Object_KeyC.h:
                * tao/Object_KeyC.i:
                * tao/OctetSeq.pidl:
                * tao/OctetSeqC.cpp:
                * tao/OctetSeqC.h:
                * tao/OctetSeqC.i:
                * tao/Policy.pidl:
                * tao/Policy_Forward.pidl:
                * tao/Policy_ForwardC.cpp:
                * tao/Policy_ForwardC.h:
                * tao/Policy_ForwardC.i:
                * tao/Pollable.pidl:
                * tao/PollableC.cpp:
                * tao/PollableC.h:
                * tao/PollableC.i:
                * tao/PortableInterceptor.pidl:
                * tao/PortableInterceptorC.cpp:
                * tao/PortableInterceptorC.h:
                * tao/PortableInterceptorC.i:
                * tao/Profile.cpp:
                * tao/Profile.h:
                * tao/StringSeq.pidl:
                * tao/StringSeqC.cpp:
                * tao/StringSeqC.h:
                * tao/StringSeqC.i:
                * tao/TAO.pidl:
                * tao/TAO_Server_Request.cpp:
                * tao/TAO_Server_Request.h:
                * tao/TAO_Server_Request.i:
                * tao/Tagged_Profile.h:
                * tao/Tagged_Profile.i:
                * tao/TimeBase.pidl:
                * tao/TimeBaseC.cpp:
                * tao/TimeBaseC.h:
                * tao/TimeBaseC.i:
                * tao/Transport_Acceptor.h:
                * tao/WrongTransaction.pidl:
                * tao/WrongTransactionC.cpp:
                * tao/WrongTransactionC.h:
                * tao/WrongTransactionC.i:
                * tao/corbafwd.h:
                * tao/target_specification.h:
                * tao/target_specification.i:
                * tao/IORTable/Table_Adapter.cpp:
                * tao/IORTable/Table_Adapter.h:
                * tao/PortableServer/Default_Acceptor_Filter.cpp:
                * tao/PortableServer/Default_Acceptor_Filter.h:
                * tao/PortableServer/Object_Adapter.cpp:
                * tao/PortableServer/Object_Adapter.h:
                * tao/PortableServer/POA.cpp:
                * tao/PortableServer/Servant_Base.i:
                * tao/RTPortableServer/RT_Acceptor_Filters.cpp:
                * tao/RTPortableServer/RT_Acceptor_Filters.h:
                * tao/RTPortableServer/RT_POA.cpp:
                * tao/RTPortableServer/RT_POA.h:
                * tao/Strategies/DIOP_Acceptor.cpp:
                * tao/Strategies/DIOP_Acceptor.h:
                * tao/Strategies/DIOP_Profile.cpp:
                * tao/Strategies/DIOP_Profile.h:
                * tao/Strategies/DIOP_Profile.i:
                * tao/Strategies/SHMIOP_Acceptor.cpp:
                * tao/Strategies/SHMIOP_Acceptor.h:
                * tao/Strategies/SHMIOP_Profile.cpp:
                * tao/Strategies/SHMIOP_Profile.h:
                * tao/Strategies/SHMIOP_Profile.i:
                * tao/Strategies/UIOP_Acceptor.cpp:
                * tao/Strategies/UIOP_Acceptor.h:
                * tao/Strategies/UIOP_Profile.cpp:
                * tao/Strategies/UIOP_Profile.h:
                * tao/Strategies/UIOP_Profile.i:

                  Regenerated hand-crafted files, and replaced flat
                  names with scoped names for some identifiers.

                * ObjectIdList.pidl:

                  New file, empty as of now, which will contain
                  typedefs for CORBA::ORB::ObjectId and
                  CORBA::ORB::ObjectIdList. The file will be
                  included in orb.idl.

        Wed Jan  8 22:43:39 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.h:
                * tao/IOPC.cpp:
                * tao/IOPC.h:
                * tao/IOPC.i:
                * tao/PolicyC.cpp:
                * tao/PolicyC.h:
                * tao/PolicyC.i:
                * tao/TAOC.cpp:
                * tao/TAOC.h:
                * tao/TAOC.i:

                  Regenerated files from IOP.pidl, Policy.pidl and TAO.pidl,
                  and removed items from Any.h that the old versions of these
                  generated files depended on.

        Wed Jan  8 17:44:48 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Typecode.h:
                * tao/Typecode.cpp:

                  Completed addition of eventtype typecode support,
                  also cosmetic changes.

                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.h:

                  Additional factoring out of common code.

        Wed Jan  8 11:40:58 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.h:

                  Fixed typos.

        Wed Jan  8 11:03:23 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.cpp:

                  Added explicit template instantiations used in the
                  insertion/extraction operators.

                * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

                  Added code generation for explicit template instantiation
                  of template classes used in the Any operators.

        Wed Jan  8 10:53:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Typecode.cpp:
                * tao/Typecode.h:

                  Added valuetype case to private_member_name, added
                  eventtype, component and home cases to other methods,
                  and updated comments in the header file.

                * tao/TypeCodeFactory/TypeCodeFactory.pidl:
                * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
                * tao/TypeCodeFactory/TypeCodeFactoryC.h:
                * tao/TypeCodeFactory/TypeCodeFactoryC.inl:

                  Added 'create_event_tc' to the TypeCodeFactory interface and
                  regenerated the code.

                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.h:

                  Filled in 'create_value_tc' method, added 'create_event_tc'
                  method, and factored out some common code.

        Tue Dec 17 15:36:19 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any_T.inl(demarshal_value):

                  Replaced forany temporary with a local variable instantiation.
                  Many compilers don't like the temporary.

                * tao/Messaging/MessagingS.cpp:

                  Replaced an occurrence of CORBA_InterfaceDef with
                  CORBA::InterfaceDef.

        Tue Dec 17 13:06:06 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:

                  Fixed an error in the logic that caused a problem with
                  an array of array.

        Sat Dec 14 22:30:22 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp (update_key):

                  A few more tweaks for hopefully better performance.

        Sat Dec 14 19:56:13 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
                * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ArrayDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.h:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/SequenceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/StructDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:
                * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
                * orbsvcs/tests/InterfaceRepo/IFR_Test/run_test.pl:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.cpp:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.h:
                * tao/Any.cpp:
                * tao/Any.h:
                * tao/Any_T.cpp:
                * tao/Any_T.h:
                * tao/Any_T.inl:
                * tao/Typecode.cpp:
                * tao/Typecode.i:
                * tao/IFR_Client/IFR_BaseC.cpp:
                * tao/IFR_Client/IFR_BasicC.cpp:
                * tao/IFR_Client/IFR_ComponentsC.cpp:
                * tao/IFR_Client/IFR_ExtendedC.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.h:

                  Debugging the interaction of the optimized IFR and the new
                  Any implementation.

        Fri Dec 13 14:30:19 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/tests/InterfaceRepo/InterfaceRepo.dsw:
                * orbsvcs/tests/InterfaceRepo/Makefile:

                  Added project below to workspace, and directory to Makefile.

                * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency Test.dsp:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.cpp:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.h:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/Makefile:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/client.cpp:
                * orbsvcs/tests/InterfaceRepo/Latency_Test/run_test.pl:

                  New files for a simple latency/throughput test on the Interface
                  Repository.

        Fri Dec 13 13:14:19 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/IFR_Service/Makefile.BE:
                * orbsvcs/IFR_Service/Makefile.EX:
                * orbsvcs/IFR_Service/Makefile.IFR_Service:
                * orbsvcs/orbsvcs/Makefile.IFRService:

                  Updated dependencies.

        Fri Dec 13 11:48:24 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
                * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Repository_i.h:
                * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:

                  Fixed various minor errors - preprocessor directive syntax,
                  throw spec agreement, and unused variables.

        Thu Dec 12 23:45:14 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.cpp:
                * tao/Any_T.cpp:
                * tao/Any_T.h:

                  More changes related to the 'const' qualifier, to get more
                  compilers happy with the template code.

                * tao/TypeCodeFactory/TypeCodeFactory.dsp:

                  Turned on RTTI in this project.

        Thu Dec 12 17:24:41 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Typecode.h:

                  Fixed wrong signature of _tao_any_destructor typedef.

        Thu Dec 12 16:22:17 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any.h:
                * tao/Any_T.cpp:
                * tao/Any_T.h:

                  Minor fixes for things caught by gcc 3.2.

        Wed Dec 11 22:26:56 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

                * tao/Any_T.cpp:
                * tao/Any_T.h:
                * tao/Any_T.inl:

                  New files added to TAO for the template classes of the
                  revamped Any implementation. The original Any class contains
                  few spec-required methods but is mostly a container for
                  these template classes. Thanks to Carlos O'Ryan
                  <coryan@atdesk.com> for guidance with the design.

                * orbsvcs/orbsvcs/IFRService/Servant_Factory.cpp:
                * orbsvcs/orbsvcs/IFRService/Servant_Factory.h:
                * orbsvcs/orbsvcs/IFRService/Servant_Locator.cpp:
                * orbsvcs/orbsvcs/IFRService/Servant_Locator.h:
                * tao/IFR_TypeCodes.cpp:

                  Files removed from TAO and the Interface Repository.

                * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
                * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:

                  Changes to the IDL compiler to support the changes to
                  the TAO Any implementation. Also changes to support the
                  runtime detection of an attempt to marshal an IDL type
                  which contains (at any nested level) a local interface.
                  Now the cases where a local interface is passed as a
                  non-local base class, and where a union may have a
                  local interface as its active member (or may not) are
                  discovered at runtime. Zero is returned from the
                  attempt to marshal at some level, and the stub operation
                  will therefore throw CORBA::MARSHAL, as required.

                * orbsvcs/IFR_Service/be_global.cpp:
                * orbsvcs/IFR_Service/be_global.h:
                * orbsvcs/IFR_Service/be_produce.cpp:
                * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
                * orbsvcs/IFR_Service/ifr_adding_visitor.h:
                * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
                * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
                * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
                * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
                * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
                * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
                * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
                * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
                * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:

                  Changes to tao_ifr to reflect the removal of all
                  CORBA_* global classes for Interface Repository objects.
                  All references to these classes must now use the scoped
                  name.

                * orbsvcs/IFR_Service/IFR_Service.cpp:
                * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AliasDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ArrayDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ArrayDef_i.h:
                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/AttributeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h:
                * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ConstantDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Contained_i.h:
                * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Container_i.h:
                * orbsvcs/orbsvcs/IFRService/EmitsDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EmitsDef_i.h:
                * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EnumDef_i.h:
                * orbsvcs/orbsvcs/IFRService/EventDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/EventDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.h:
                * orbsvcs/orbsvcs/IFRService/FactoryDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/FactoryDef_i.h:
                * orbsvcs/orbsvcs/IFRService/FinderDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/FinderDef_i.h:
                * orbsvcs/orbsvcs/IFRService/FixedDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/FixedDef_i.h:
                * orbsvcs/orbsvcs/IFRService/HomeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/HomeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/IDLType_i.cpp:
                * orbsvcs/orbsvcs/IFRService/IDLType_i.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.i:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.h:
                * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.i:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Loader.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
                * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
                * orbsvcs/orbsvcs/IFRService/IRObject_i.h:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ModuleDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ModuleDef_i.h:
                * orbsvcs/orbsvcs/IFRService/NativeDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/NativeDef_i.h:
                * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/OperationDef_i.h:
                * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.h:
                * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/PublishesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/PublishesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
                * orbsvcs/orbsvcs/IFRService/Repository_i.h:
                * orbsvcs/orbsvcs/IFRService/SequenceDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/SequenceDef_i.h:
                * orbsvcs/orbsvcs/IFRService/StringDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/StringDef_i.h:
                * orbsvcs/orbsvcs/IFRService/StructDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/StructDef_i.h:
                * orbsvcs/orbsvcs/IFRService/TypedefDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/TypedefDef_i.h:
                * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/UnionDef_i.h:
                * orbsvcs/orbsvcs/IFRService/UsesDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/UsesDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueDef_i.h:
                * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.h:
                * orbsvcs/orbsvcs/IFRService/WstringDef_i.cpp:
                * orbsvcs/orbsvcs/IFRService/WstringDef_i.h:
                * orbsvcs/orbsvcs/IFRService/concrete_classes.h:
                * orbsvcs/orbsvcs/IFRService/tmplinst.cpp:

                  The mechanism of method dispatch has been changed in the
                  Interface Repository to use default servants instead of
                  Servant Locator. A servant for each IR Object type, and a
                  POA for each, are created at startup. The object key of
                  POACurrent is parsed to reconstruct the database key, which
                  is then plugged into the servant just before the C++ call.
                  Also, the skeleton files were regenerated. Now only one
                  line in each *S.h file needs to be patched.

                * tao/AbstractBase.cpp:
                * tao/AbstractBase.h:
                * tao/Abstract_Servant_Base.cpp:
                * tao/Abstract_Servant_Base.h:
                * tao/Any.cpp:
                * tao/Any.h:
                * tao/Any.i:
                * tao/Exception.h:
                * tao/IFR_Client_Adapter.h:
                * tao/LocalObject.cpp:
                * tao/LocalObject.h:
                * tao/Marshal.h:
                * tao/NVList.cpp:
                * tao/ORB.cpp:
                * tao/ORB.h:
                * tao/Object.cpp:
                * tao/Object.h:
                * tao/Object.i:
                * tao/Object_Proxy_Impl.cpp:
                * tao/Object_Proxy_Impl.h:
                * tao/Remote_Object_Proxy_Impl.cpp:
                * tao/Remote_Object_Proxy_Impl.h:
                * tao/Sequence_T.cpp:
                * tao/TypeCodeFactory_Adapter.h:
                * tao/Typecode.cpp:
                * tao/Typecode.h:
                * tao/ValueBase.cpp:
                * tao/ValueBase.h:
                * tao/corba.h:
                * tao/corbafwd.h:

                  Changes to TAO files required by the changes in the Any
                  implementation and in the IR Object class names. Also,
                  a virtual marshal() method was added to CORBA::Object to
                  help detect an attempt to marshal a local interface. Finally,
                  a TAO-specific method was added to class TypeCode, which
                  returns the content type without making a duplicate.
                  Similar versions of other TypeCode methods that return
                ` typecodes will be made in the future, for internal ORB use.

                * tao/IFR_Client/IFR_BaseC.cpp:
                * tao/IFR_Client/IFR_BaseC.h:
                * tao/IFR_Client/IFR_BaseC.i:
                * tao/IFR_Client/IFR_BasicC.cpp:
                * tao/IFR_Client/IFR_BasicC.h:
                * tao/IFR_Client/IFR_BasicC.i:
                * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp:
                * tao/IFR_Client/IFR_Client_Adapter_Impl.h:
                * tao/IFR_Client/IFR_ComponentsC.cpp:
                * tao/IFR_Client/IFR_ComponentsC.h:
                * tao/IFR_Client/IFR_ComponentsC.i:
                * tao/IFR_Client/IFR_ExtendedC.cpp:
                * tao/IFR_Client/IFR_ExtendedC.h:
                * tao/IFR_Client/IFR_ExtendedC.i:

                  The stub files were regenerated. They now need no patching.

                * tao/PortableServer/Direct_Object_Proxy_Impl.cpp:
                * tao/PortableServer/Direct_Object_Proxy_Impl.h:
                * tao/PortableServer/ImR_LocatorS.cpp:
                * tao/PortableServer/ImplRepoS.cpp:
                * tao/PortableServer/POA.cpp:
                * tao/PortableServer/POA.h:
                * tao/PortableServer/PolicyS.cpp:
                * tao/PortableServer/Servant_Base.cpp:
                * tao/PortableServer/Servant_Base.h:
                * tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
                * tao/PortableServer/ThruPOA_Object_Proxy_Impl.h:

                  POA files modified to support the other changes. A public
                  static method was added to class TAO_POA, to allow access
                  to a protected static method, which the IFR uses to parse
                  object keys without requiring new/delete pairs.

                * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
                * tao/TypeCodeFactory/TypeCodeFactoryC.inl:
                * tao/TypeCodeFactory/TypeCodeFactoryC.h:
                * tao/TypeCodeFactory/TypeCodeFactory_Adapter_Impl.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_Adapter_Impl.h:
                * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
                * tao/TypeCodeFactory/TypeCodeFactory_i.h:

                  Changes to reflect the removal of global flat names for
                  the IR Object classes. Also, the stub files were
                  regenerated, and now need no patching.

                * tao/orb.idl:
                * tao/IFR_Client/IFR_Basic.pidl:
                * tao/IFR_Client/IFR_Components.pidl:
                * tao/IFR_Client/IFR_Base.pidl:
                * tao/IFR_Client/IFR_Extended.pidl:
                * tao/TypeCodeFactory/TypeCodeFactory.pidl:

                  Changes to (p)idl files. Small pieces of IFR_Base.pidl
                  and TypeCodeFactory.pidl that are used by the ORB
                  were moved to orb.idl, which is now included in these
                  two files. Code generation is now executed without first
                  patching the pidl files to remove the CORBA module. The
                  result of these two changes is the elimination of almost
                  all the patching to generated files which used to be
                  necessary.

                * TAOACE.dsw:
                * ta0/Makefile:
                * tao/Makefile.bor:
                * tao/Makefile.am:
                * tao/TAO.dsp:
                * tao/IFR_Client/TAO_IFR_Client.dsp:
                * orbsvcs/orbsvcs/Svc_Utils.dsp:
                * orbsvcs/orbsvcs/IFRService.dsp:

                  Changes to makefiles, projects and workspaces.

                Changes to NVList, TAO_Marshal_* and the dynamic any classes to
                support the changes to Anys and TypeCodes have yet to be made.
                Also, dynamic_cast is now required in Any extraction, whcih may
                cause a problem on some platforms that don't support RTTI.


Wed Mar 12 09:48:32 2003  Chad Elliott  <elliott_c@ociweb.com>

        Committing Paul Calabrese's <calabrese_p@ociweb.com> MPC related
        changes.

        * orbsvcs/orbsvcs/AV.mpc:

          Add a dependency on the ACE_QoS library.

        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosTime.mpc:
        * orbsvcs/orbsvcs/RTSched.mpc:

          Update these files so we can build the services with MPC
          on Windows.

        * orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:

          Add missing mpc file for logging service.

        * orbsvcs/orbsvcs/AV/media-timer.h:
        * orbsvcs/orbsvcs/AV/media-timer.cpp:

          Removed these files.  They were not removed after the rename.

Tue Mar 11 18:00:12 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/tests/Security/MT_IIOP_SSL/Makefile: Added
          PLATFORM_SSL_* variables to the CPPFLAGS and LDFLAGS "make"
          variables in the manner Ossama used to modify the
          Secure_Invocation and SecurityLevel1 tests makefiles.

Tue Mar 11 11:58:12 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
        * orbsvcs/tests/Security/SecurityLevel1/Makefile:

          Add PLATFORM_SSL_* variables to their corresponding CPPFLAGS and
          LDFLAGS "make" variables.  This fixes problems on platforms
          where OpenSSL is installed in a location unknown to the compiler
          and linker.  Thanks to Phil Mesnier <mesnier_p@ociweb.com> for
          detecting the problem.

Tue Mar 11 10:46:29 2003  Ossama Othman  <ossama@uci.edu>

        * tao/corbafwd.h:

          Removed CORBA::{add,remove}_ref() static function declarations.
          They conflicted with the ones defined in `ValueBase.h'.

        * tao/ValueBase.h:

          Corrected CORBA::{add,remove}_ref() static function declarations
          so that "inconsistent DLL linkage" warnings no longer occur in
          MS Windows TAO builds.

          Include "ace/Basic_Types.h" instead of "ace/OS.h".  The former
          is all that is needed for the "ptr_arith_t" typedef.  Inclusion
          of "ace/OS.h" is overkill.

Mon Mar 10 20:24:17 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp: Make the SSLIOP
          connector get the codeset context assigned by the Codeset Manager.

Mon Mar 10 11:03:14 2003  Ossama Othman  <ossama@uci.edu>

        * tao/DynamicInterface/DII_ClientRequestInfo.h (request_):

          Changed the type of this class member from CORBA::Request_var to
          CORBA::Request_ptr.  There is no need to use "_var" type in this
          case.

        * tao/DynamicInterface/DII_ClientRequestInfo.cpp
          (TAO_DII_ClientRequestInfo):

          No need to increase the reference count since the "request_"
          member is no longer a "_var" type, and since the
          TAO_DII_ClientRequestInfo instance used in the
          CORBA::Request::invoke() methd is local to that method.  This is
          a lighter weight solution to the problem that Phil Mesnier
          detected and fixed since no CORBA::Request reference count locks
          are used.

        * examples/Callback_Quoter/Supplier_i.cpp (run):

          Fixed unused value warning.

Mon Mar 10 08:10:02 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp (setup_multicast):

          Fixed unused argument warning on platforms where
          ACE_HAS_IP_MULTICAST is not defined.

        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp
          (TAO_Log_Constraint_Visitor):

          Added missing semi-colon for the ACE_LACKS_LONGLONG_T case.
          Fixes a syntax error.

        * orbsvcs/orbsvcs/Log/Log_i.cpp (copy_attributes):

          Return value of get_max_size() should be assigned to a
          CORBA::ULongLong, not CORBA::ULong.

          (remove_old_records):
          (check_capacity_alarm_threshold)
          (reset_capacity_alarm_threshold):

          Corrected CORBA::LongLong/ULongLong mismatches.

          Use the ACE_UINT64_DBLCAST_ADAPTER macro when casting a
          CORBA::ULongLong to a double to work around problems when
          CORBA::ULongLong is an emulated type.

        * orbsvcs/orbsvcs/Log/LogRecordStore.cpp (purge_old_records):

          Do not explicitly cast integers to a CORBA::ULongLong.  That
          breaks on platforms where 64 bit integers are emulated.

          Changed loop variable type to match the type used in the
          comparison that dictates when the loop should stop,
          i.e. "CORBA::ULong" -> "CORBA::ULongLong".

        * orbsvcs/orbsvcs/Log/Log_i.cpp (retrieve):

          Corrected format specifier for platforms that lack 64 bit
          integer support.

        * orbsvcs/orbsvcs/Log/PersistStore.cpp (get_percentage_full):

          Explicitly mark the integer literal used in a multiplication
          with a CORBA::ULongLong variable as unsigned since there is no
          operator that multiplies a signed integer with a
          CORBA::ULongLong on platforms where the latter is emulated,
          i.e. no native 64 bit unsigned integer exists.

        * tao/orbconf.h:

          Removed redefinition of ACE_NESTED_CLASS macro, and include
          "ace/Global_Macros.h" instead.  It is already defined in that
          header.

        * tests/Nested_Upcall_Crash/server.cpp (main):

          Cast the return value of ACE_OS::gethrtime() to ACE_RANDR_TYPE
          to fix an error on VxWorks builds.

Mon Mar 10 08:22:01 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/FaultTolerance/IOGR/Manager.bor: Fixed this BCB
          makefile for the BCB5 Static build.

Mon Mar 10 07:56:12 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * utils/nslist/Makefile.bor: Adding missing libraries to link with
          to fix BCB5 Static Link Errors. Also build the nsadd and nsdel
          executables.

Sun Mar  9 16:04:27 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/DynamicInterface/DII_ClientRequestInfo.cpp: The ctor takes
          a pointer to a Request, but assigns this to a Request_var
          without incrementing the reference count. Now, the assignment to
          the Request_var first increments the reference count. This
          quiets the DII Param Test errors.

        * tao/Codeset_Manager.cpp:
        * tao/default_resource.cpp: Cleaned up debug output to be more
          standard compliant.

Sun Mar  9 10:06:59 2003  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * docs/compiler.html: Updated the discussion on what files are
          generated by the TAO IDL compiler.  Thanks to Rob Eger
          <reger@txcorp.com> and Carlos O'Ryan for helping with this.

Sat Mar 08 15:27:14 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tao/orbconf.h: The #define for ACE_NESTED_CLASS was busted. The
          workaround should be applied on platforms where
          ACE_HAS_BROKEN_NAMESPACES is defined instead of just
          Win32. Thanks to Johnny Willemsen fo rcatching this.

Fri Mar  7 17:20:24 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp
          (lookup_interface_def): Replaced several ACE_CHECK; macros with
          ACE_CHECK_RETURN (-1); so that the non-exception builds don't
          complain about not returning a value.

Fri Mar  7 14:17:10 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/Param_Test/svc.conf.xml: I neglected add the change for
          setting the native wchar codeset id to the xml form of the
          service config. This should address the errors with the wstring
          data.

Fri Mar  7 10:58:32 2003  Ossama Othman  <ossama@uci.edu>

        * tests/Codec/test.idl (Foo::Bar::C):

          Changed type of this attribute from "long long" to "unsigned
          long long".  It is better supported/emulated by ACE and TAO on
          platforms that lack 64 bit integer support (e.g. VxWorks).

        * tests/Codec/client.cpp:

          Updated to take into account the above change.  The
          "Foo::Bar::C" attribute is now initialized with a value wrapped
          by the ACE_UINT64_LITERAL macro to allow for successful builds
          on platforms that lack 64 bit integer support.  Fixes
          compile-time errors on VxWorks builds.

Fri Mar  7 10:43:57 2003  Ossama Othman  <ossama@uci.edu>

        * tao/DynamicInterface/Request.h:

          Explicitly qualify the TAO_Dynamic_Adapter_Impl friend
          declaration with a global scope qualifier in an attempt to work
          around a problem where some compilers assume that the friend
          declaration refers to a class in the local scope or current
          namespace.

          Moved the CORBA_ORB_RequestSeq class into the CORBA namespace.

        * tao/ORB.h:
        * tao/ObjectIDList.h:
        * tao/ObjectIDList.i:
        * tao/ObjectIDList.cpp:
        * tao/DynamicInterface/Request.cpp:

          Neglected to put the CORBA_ORB_ObjectIdList and
          CORBA_ORB_RequestSeq types into the CORBA namespace, as was
          done with all of the other types in the CORBA namespace.

Fri Mar  7 09:34:06 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp: The check for
          codeset errors were calling the inputCDR's exception generator when
          the OutputCDR was used.

        * tao/Codeset_Translator_Factory_T.h: Removed the TAO_Export
          modifier from the template declaration. Some of the MSCV builds
          were complaining about it, and it looks like the other templates
          in TAO don't export when their base classes do. I referred to
          the Sequence_T source for comparison.

Fri Mar  7 07:17:02 2003  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:

          Updated this mpc file to reflect the current state.

        * orbsvcs/orbsvcs/DsLogAdmin.mpc:

          Added libraries that this library needs.

        * orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
        * orbsvcs/orbsvcs/RTEventLogAdmin.mpc:

          Added these mpc files.

Fri Mar  7 06:08:16 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/Param_Test/svc.conf: Added native wchar codeset id to
          allow transmission of wchar data.

Thu Mar  6 11:35:10 2003  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/IFR_ExtendedC.h:
        * tao/IFR_Client/IFR_ExtendedC.cpp:

          Removed duplicate declarations and definitions of the
          CORBA::_tc_{Visibility,ValueModifier} TypeCodes.  They are
          already declared in tao/corbafwd.h, and set in
          tao/IFR_Client/IFR_Client_Adapter_Impl.cpp.  Fixes "multiple
          definition" errors in static builds.

        * tao/TypeCodeFactory/TypeCodeFactoryC.h:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:

          Removed duplicate declarations and definitions of the
          CORBA::_tc_{Identifier,RepositoryId,ValueModifier} TypeCodes.
          They are already declared and defined in
          tao/IFR_Client/IFR_BaseC.*. Fixes "multiple definition" errors
          in static builds.

Thu Mar 06 12:26:36 2003  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/Notify/Default_Factory.cpp:
          Added missing ACE_TYPENAME on line 34.

Thu Mar  6 11:03:02 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO_IDL/be/be_visitor_operation/operation.cpp: Fix the generation
          of environment checking code following the call to
          TAO_[In|Out]putCDR::throw_stub_exception() so it doesn't break
          on non-native exception builds.

Wed Mar  5 16:09:19 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Codeset_Manager.h:
        * tao/Codeset_Translaotr_Factory.h:
        * tao/Codeset_Translator_Factory_T.h:
        * tests/CodeSets/simple/server.cpp: Fix fuzz errors

Wed Mar  5 12:53:22 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/tao-dll.icc:
        * tao/tao-lib.icc: Added Codeset_manager and
          Codeset_Translator_Factory source to  makefiles.

Wed Mar  5 11:00:51 2003  Chad Elliott  <elliott_c@ociweb.com>

        * tao/IIOP_Acceptor.cpp:

          Fixed the portspan overflow problem.  The port is restricted to
          unsigned short but the port span plus the port could easily
          overflow.  So, it's now silently restricted to
          ACE_MAX_DEFAULT_PORT.  Thanks to Duane Binder
          <duane.binder@veritas.com> for providing this fix.

Wed Mar  5 10:21:54 2003  Chad Elliott  <elliott_c@ociweb.com>

        * tao/GIOP_Message_Lite.cpp (parse_incoming_messages):

          When copying out the the message size, transfer the bytes into
          a stack allocated character buffer to avoid bus errors on sparc
          hardware.

Wed Mar  5 09:41:55 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Makefile.bor (OBJFILES): Fixed typo in file list.

Wed Mar  5 09:07:02 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Transport.cpp (assign_translators): Removed the ACE_INLINE
          from the function

Wed Mar  5 08:54:53 CST 2003 Pradeep Gore <pradeep@oomworks.com>

        * orbsvcs/Notify_Service/NT_Notify_Service.cpp:
          Corrected the changed service driver name.

Wed Mar  5 06:14:34 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Makefile.bor (OBJFILES): Added Codeset related files to makefile.

Wed Mar  5 00:01:09 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO_IDL/util/utl_global.cpp (validate_included_idl_files):
          Swapped the order of parameters to passed to realpath, which is
          the non-windows function used for canonizing a path.

Tue Mar  4 13:44:06 2003  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO/TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp: Wrap the
          marshal / unmarshal code to check for errors and call the
          appropriate static function to raise the related exception.

        * TAO/tao/Any.cpp:
        * TAO/tao/Any.h:
        * TAO/tao/CDR.cpp:
        * TAO/tao/CDR.h:
        * TAO/tao/CDR.i:
        * TAO/tao/GIOP_Message_Base.cpp:
        * TAO/tao/GIOP_Message_Generator_Parser_10.cpp:
        * TAO/tao/GIOP_Message_Generator_Parser_12.cpp:
        * TAO/tao/GIOP_Message_Lite.cpp:
        * TAO/tao/IIOP_Acceptor.cpp:
        * TAO/tao/IIOP_Profile.cpp:
        * TAO/tao/IIOP_Transport.cpp:
        * TAO/tao/Invocation.cpp:
        * TAO/tao/Invocation.h:
        * TAO/tao/Invocation.i:
        * TAO/tao/Makefile.tao:
        * TAO/tao/ORB.cpp:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
        * tao/TAO_Server_Request.cpp:
        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/default_resource.cpp:
        * tao/default_resource.h:
        * tao/Strategies/DIOP_Acceptor.cpp:
        * tao/Strategies/DIOP_Profile.cpp:
        * tao/Strategies/DIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Acceptor.cpp:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Acceptor.cpp:
        * tao/Strategies/UIOP_Profile.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * utils/catior/catior.cpp: These files modified to support the
          codeset negotiation feature. This feature replaces the
          ACE_Char_Codeset_Translators owned by the ORB with A codset
          manager framework and dynamically loadable translators.

          The functionality conforms with CORBA 3.0 section 13.10.

        * TAO/tao/Codeset_Manager.cpp:
        * TAO/tao/Codeset_Manager.h:
        * TAO/tao/Codeset_Translator_Factory.cpp:
        * TAO/tao/Codeset_Translator_Factory.h:
        * TAO/tao/Codeset_Translator_Factory_T.cpp:
        * TAO/tao/Codeset_Translator_Factory_T.h: New files added to to
          support the codeset framework

        * TAO/tests/CodeSets: A new test, including a sample translator
          library.

Tue Mar  4 08:57:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/util/utl_global.cpp:
          Misunderstood the error message that led to the checkin
          below, actually had to retain the 'const' qualifier.


Mon Mar  3 22:38:03 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/util/utl_global.cpp:

          Changed char* arg argument to retain the const qualifier.

Mon Mar  3 17:23:55 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Bug_1395_Regression/Test_i.cpp:

          Fixed existing and added missing emulated exception support.

Mon Mar  3 14:36:53 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.h:
        * tao/Exception.cpp:

          Uninlined SystemException subclass constructors.  There was no
          real advantage to inlining them.  Inlining them only served to
          increase footprint.

          (operator<<=, operator>>=):

          Placed the definitions of these Any insertion and extraction
          operators in the CORBA namespace.  Fixes "unresolved symbol"
          link-time errors when using these operators.

          (_info, _tao_get_omg_exception_description):

          Improved const-correctness.  Variables that are really constants
          are now marked as such.

          (make_standard_typecode):

          Improved exception-safety.  Manage memory using a
          CORBA::String_var instead of the raw
          CORBA::string_{alloc,release} functions.

Mon Mar  3 15:42:35 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/DynamicAny/DynStruct_i.cpp (get_members):

          Stripped alias (if any) from the type code that is used
          to iterate over the member names. Calling member_name (i)
          on an aliased type code will throw CORBA::BAD_TYPECODE.
          Thanks to Chen Jian <jchen@huawei.com> for reporting the bug.

Mon Mar  3 15:12:32 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/driver/drv_args.cpp:
        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/fe/fe_tmplinst.cpp:
        * TAO_IDL/include/drv_extern.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Modified scheme for validating included files. This change
          was motivated by errors in include file generation when
          files whose path names are substrings of each other are
          on opposite sides of a conditional include.

Mon Mar  3 11:43:01 2003  Ossama Othman  <ossama@uci.edu>

        * tao/DynamicAny/DynStruct_i.cpp (current_member_kind):

          Corrected return value in emulated exception case.
          "CORBA::tk_null", not "0".  Fixes build problems related to
          invalid conversions from "int" to "CORBA::TCKind".

Mon Mar  3 13:27:01 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_array/array.cpp:

          Fixed generation of array typedef to append "_var" to
          the element name if it is a typedef of CORBA::Object
          or of CORBA::Typecode. Thanks to Simon McQueen
          <sm@prismtechnologies.com> for reporting the problem. This
          closes [BUGID:1458].

Mon Mar  3 13:02:16 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:

          Fixed the lhs of a constant assignment for octets and
          enums to use the typedef name, if there is one. Thanks
          to George Varsamis <gv@prismtechnologies.com> for
          reporting the problem.

Sun  Mar 2 15:10:02 3003 Pradeep Gore <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/Notify/Admin.h:
          Removed extra ";" on line 85 that is foxing the BCB compiler.
          Thanks to Johnny Willemsen <jwillemsen@remedy.nl> for spotting this.

Sun Mar  2 10:04:54 2003  Ossama Othman  <ossama@uci.edu>

        * tao/DynamicAny/DynStruct_i.cpp (current_member_kind):
          (get_members_as_dyn_any):

          Fixed emulated exception macro usage.  "ACE_CHECK_RETURN", not
          "ACE_CHECK".

        * tests/DynAny_Test/test_dynstruct.cpp (run_test):
        * tests/DynAny_Test/test_dynunion.cpp (run_test):

          Fixed emulated exception macro usage.  "ACE_TRY_{CHECK_}EX", not
          "ACE_TRY{_CHECK}".

          Added missing "ACE_TRY_CHECK" after inner ACE_TRY_EX block's
          ACE_ENDTRY.

Sun Mar  2 09:23:18 2003  Ossama Othman  <ossama@uci.edu>

        * tests/DynAny_Test/test_dynstruct.cpp (run_test):
        * tests/DynAny_Test/test_dynunion.cpp (run_test):

          "CORBA_" -> "CORBA::".

Sat Mar  1 13:47:14 CST 2003 Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/Notify/Builder.cpp:
          Commented out unused parameter.

        * orbsvcs/orbsvcs/Notify/Container_T.inl:
        * orbsvcs/orbsvcs/Notify/Seq_Worker_T.cpp:
          Added missing ACE_TYPENAME keyword.

        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:
          Replaced Service name to "TAO_Notify_Service"

Sat Mar  1 10:27:55 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h
          (ifr_adding_visitor_exception):

          Fixed typo.  "CORBAL" -> "CORBA".

Sat Mar  1 09:30:47 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/MT_IIOP_SSL/Server_Worker.h:
        * orbsvcs/tests/Security/MT_SSLIOP/Server_Worker.h:

          "CORBA_" -> "CORBA::".

Sat Mar  1 04:15:39 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor_macro.h:
        * orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h:

          "CORBA_" -> "CORBA::".

        * tests/RTCORBA/Server_Protocol/server.cpp
          (check_default_server_protocol):

          Added missing CORBA::Environment argument.  Fixes a compile-time
          error.

Sat Mar  1 03:41:30 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AliasDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ArrayDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ArrayDef_i.h:
        * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AttributeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h:
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Contained_i.h:
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Container_i.h:
        * orbsvcs/orbsvcs/IFRService/EmitsDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EmitsDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EventDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EventDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FactoryDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FactoryDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FinderDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FinderDef_i.h:
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:
        * orbsvcs/orbsvcs/IFRService/IFR_macro.h:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.h:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ModuleDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ModuleDef_i.h:
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.h:
        * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/PublishesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PublishesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Repository_i.h:
        * orbsvcs/orbsvcs/IFRService/SequenceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/SequenceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Servant_Factory.cpp:
        * orbsvcs/orbsvcs/IFRService/StructDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/StructDef_i.h:
        * orbsvcs/orbsvcs/IFRService/TypedefDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/TypedefDef_i.h:
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.h:
        * orbsvcs/orbsvcs/IFRService/UsesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/UsesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.h:

          "CORBA_" -> "CORBA::".

Fri Feb 28 18:17:28 CST 2003 <pradeep@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Makefile.CosNotification:
        * orbsvcs/orbsvcs/Notify/Makefile:
          Updated.

Fri Feb 28 14:20:57 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Environment.h:

          Removed another TAO_ORB_Core friend declaration that may be
          responsible for namespace related build problems on Solaris.

Thu  Feb 27, 2003  15:14:58  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/orbsvcs/CosNotification_Static.dsp:
          Updated.

Thu Feb 27 11:27:24 2003  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/tao_idl.mpc:

          Add a dependency upon the gperf executable.

Thu Feb 27 07:25:21 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ORBInitInfo.h:
        * tao/ORBInitInfo.inl:
        * tao/ORBInitInfo.cpp:
        * tao/PICurrent.h:
        * tao/PICurrent.inl:
        * tao/PICurrent.cpp:
        * tao/PICurrent_ORBInitializer.cpp:

          Fixed problem where the ORBInitInfo object was not invalidated
          after post_init() was called on ORBInitializers, as required by
          the CORBA spec.

          This also fixes some build problems that were inadvertently
          introduced by a partial fix found in ORB.cpp.

Thu Feb 27 09:09:44 2003  Pradeep Gore  <pradeep@oomworks.com>

        Summary of changes due to code review:
        1. Removed dependency on Types.h and Destroy_Callback.h
        2. Simplify the TAO_NS_Object class by moving functionality from Object_T and Container_T classes.
        3. Made the Filter and FilterFactory interface methods thread safe.

        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
          Removed old file.

        * orbsvcs/orbsvcs/Notify/Consumer_Map.h:
        * orbsvcs/orbsvcs/Notify/Supplier_Map.h:
          Moved the Consumer and Supplier Map definitions to seperate files.

        * orbsvcs/orbsvcs/Notify/Notify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Service.h:
        * orbsvcs/orbsvcs/Notify/Notify_Service.inl:
        * orbsvcs/orbsvcs/Notify/CosNotify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/CosNotify_Service.h:
        * orbsvcs/orbsvcs/Notify/CosNotify_Service.inl:
          Renamed the confusing file name - Notify_Service to CosNotify_Service.

        * orbsvcs/orbsvcs/Notify/Factory.h:
          Converted this into an abstract service object interface.

        * orbsvcs/orbsvcs/Notify/Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Factory.inl:
        * orbsvcs/orbsvcs/Notify/Default_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Default_Factory.h:
        * orbsvcs/orbsvcs/Notify/Default_Factory.inl:
          + Moved old Factory.* to the Default_* files.
          + Introduced a factory template to simplify creation of the various Collections.

        * orbsvcs/orbsvcs/Notify/Find_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Find_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Find_Worker_T.inl:
          An iterator that finds the object given its ID in a collection.

        * orbsvcs/orbsvcs/Notify/Seq_Worker_T.cpp:
        * orbsvcs/orbsvcs/Notify/Seq_Worker_T.h:
        * orbsvcs/orbsvcs/Notify/Seq_Worker_T.inl:
          A Helper class that creates a sequence id ID's given the colleciton.

        * orbsvcs/orbsvcs/Notify/Destroy_Callback.h:
        * orbsvcs/orbsvcs/Notify/Refcountable.cpp:
        * orbsvcs/orbsvcs/Notify/Refcountable.h:
          Removed the Destroy_Callback interface. We instead simplify the mechanism by calling the <release>
          method when the reference count falls to 0.

        * orbsvcs/orbsvcs/Notify/Container.cpp:
        * orbsvcs/orbsvcs/Notify/Container.h:
        * orbsvcs/orbsvcs/Notify/Container.inl:
        * orbsvcs/orbsvcs/Notify/Object_T.cpp:
        * orbsvcs/orbsvcs/Notify/Object_T.h:
        * orbsvcs/orbsvcs/Notify/Object_T.inl:
          Removed these files to simplify the base classes for Notify Objects.

        * orbsvcs/orbsvcs/Notify/Object.cpp:
        * orbsvcs/orbsvcs/Notify/Object.h:
        * orbsvcs/orbsvcs/Notify/Object.inl:
          Moved all Container functionality to the Object class.

        * orbsvcs/orbsvcs/Notify/Container_T.cpp:
        * orbsvcs/orbsvcs/Notify/Container_T.h:
        * orbsvcs/orbsvcs/Notify/Container_T.inl:
          The Container_T template is a wrapper on the Collection class.

        * orbsvcs/orbsvcs/Notify/Admin.cpp:
        * orbsvcs/orbsvcs/Notify/Admin.h:
        * orbsvcs/orbsvcs/Notify/Admin.inl:
          Changes to adapt to new base class. removed the enum to distinguish the type of Admin.

        * orbsvcs/orbsvcs/Notify/Types.h:
        * orbsvcs/orbsvcs/Notify/Types.cpp:
        * orbsvcs/orbsvcs/Notify/Types.inl:
          Removed the global type defines file.

        * orbsvcs/orbsvcs/Notify/AdminProperties.h:
          Removed dependency on Types.h

        * orbsvcs/orbsvcs/Notify/Builder.cpp:
        * orbsvcs/orbsvcs/Notify/Builder.h:
          Simplified the implementation by moving most of the Object initalization
          into the TAO_NS_Object::init method.
          Implemented a TAO_NS_Proxy_Builder_T template class.

        * orbsvcs/orbsvcs/Notify/Consumer.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.h:
          Removed unnecessary file dependencies.

        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
          Removed unnecessary file dependencies. Uses the Seq_Worker and Find_Worker templates.

        * orbsvcs/orbsvcs/Notify/ETCL_Filter.cpp:
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.h:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/FilterAdmin.h:
          Serialize interface implementation methods to make them thread-safe.

        * orbsvcs/orbsvcs/Notify/FilterFactory.h:
        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.cpp:
        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.h:
          The POA in which the Filters are created is supplied in the <create> method.

        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.h:
          The ConsumerAdmin and SupplierAdmin are maintained in seperate Containers.
          Added additional <remove> methods. Implemented <init> method.

        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
          Changes to <init> method - Initializes data members.

        * orbsvcs/orbsvcs/Notify/Event_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Event_Map_Entry_T.h:
        * orbsvcs/orbsvcs/Notify/Event_Map_T.h:
          Removed dependency on Types.h

        * orbsvcs/orbsvcs/Notify/ID_Factory.h:
        * orbsvcs/orbsvcs/Notify/ID_Factory.inl:
          Use TAO_NS_Object::ID as the ID type.

        * orbsvcs/orbsvcs/Notify/Method_Request.h:
          Removed dependency on Types.h and Refcountable.h

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h:
          Modified call to <check_filters>.

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_No_Filtering.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_No_Filtering.h:
          Removed unnecessary file dependencies.

        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.h:
          Modified call to <check_filters>.

        * orbsvcs/orbsvcs/Notify/Method_Request_Updates.h:
          Removed dependency on Types.h.

        * orbsvcs/orbsvcs/Notify/Peer.cpp:
        * orbsvcs/orbsvcs/Notify/Peer.h:
          Removed unnecessary file dependencies.

        * orbsvcs/orbsvcs/Notify/Proxy.cpp:
        * orbsvcs/orbsvcs/Notify/Proxy.h:
          Modified <check_filters> signature.

        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.inl:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer_T.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.inl:
        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.cpp:
          Removed unnecessary file dependencies.

        * orbsvcs/orbsvcs/Notify/Proxy_T.cpp:
          Seralizw access to public interface method implementation.

        * orbsvcs/orbsvcs/Notify/QoSProperties.cpp:
        * orbsvcs/orbsvcs/Notify/QoSProperties.h:
          Added error checks to the <copy> and <transfer> methods.

        * orbsvcs/orbsvcs/Notify/Reactive_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.h:
          Removed dependency on <destroy_callback>.

        * orbsvcs/orbsvcs/Notify/Service.h:
          Added definitions of the generic Service Object and the specific Cos and RT Notification Service names.

        * orbsvcs/orbsvcs/Notify/Supplier.cpp:
          Removed unnecessary file dependencies.

        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
          Changed implementation to use the new TAO_NS_Object , Builder and Find_Worker_T.

        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.h:
        * orbsvcs/orbsvcs/Notify/Timer_Queue.cpp:
        * orbsvcs/orbsvcs/Notify/Timer_Queue.h:
        * orbsvcs/orbsvcs/Notify/Timer_Reactor.cpp:
        * orbsvcs/orbsvcs/Notify/Timer_Reactor.h:
          Removed dependency on Destroy_Callback interface.

        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.h:
          Removed dependency on Destroy_Callback interface.

        * orbsvcs/Notify_Service/Notify_Service.h:
        * orbsvcs/Notify_Service/Notify_Server.cpp:
          Renamed local TAO_Notify_Service class to TAO_Notify_Service_Driver class to void clash with the
          Service name.
          Forward declare TAO_Notify_Service.

        * orbsvcs/Notify_Service/Notify_Service.cpp:
          Look for the generic Notify Service. If that is not found then look for the default
          service object "Notify_Default_Event_Manager_Objects_Factory".

        * orbsvcs/orbsvcs/CosNotification.dsp:
        * orbsvcs/orbsvcs/CosNotification.bor:
        * orbsvcs/orbsvcs/Makefile.CosNotification:
          Updated.

Wed Feb 26 10:28:28 2003  Ossama Othman  <ossama@uci.edu>

        * tao/RTCORBA/RTCORBAC.cpp:

          Wrapped remaining CORBA::UserException base class method calls
          with the ACE_NESTED_CLASS macro.  Addresses remaining problems
          in Borland C++ builds.

        * tao/TypeCodeFactory/TypeCodeFactoryC.h:

          Removed extraneous "ace/pre.h" include.  Fixes some warnings in
          Borland C++ builds.

Wed Feb 26 10:03:10 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.h (ORB):

          Removed TAO_ORB_Core friend declaration.  It caused some
          compilers assume that the TAO_ORB_Core forward declaration
          actually resided in the CORBA namespace, which conflicted with
          the global TAO_ORB_Core class.

          (_tao_make_ORB):
        * tao/ORB.cpp (_tao_make_ORB):

          New static factory method that creates an ORB.  The idea is to
          prevent "new CORBA::ORB()" from being performed by the user
          since only CORBA::ORB_init() is meant to create ORBs.  It is now
          needed since the CORBA::ORB class no longer has any friends.

        * tao/ORB_Core.cpp (init):

          Replaced call to "new CORBA::ORB()" with
          CORBA::ORB::_tao_make_ORB(), i.e. the new static factory method
          described above is used.

Wed Feb 26 09:16:38 2003  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/RTOLDEvent.mpc:

          The RTOLDEvent resource file does not match the name of the
          project, so we explicitly add it to the mpc file.

Tue Feb 25 11:17:47 2003  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BaseC.i:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_BasicC.i:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.h:
        * tao/IFR_Client/IFR_ComponentsC.i:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.h:
        * tao/IFR_Client/IFR_ExtendedC.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS_T.i:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactoryC.h:
        * tao/TypeCodeFactory/TypeCodeFactoryC.inl:

          Regenerated these stubs to pull in the latest CORBA namespace
          fixes.

        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp:
        * tao/IFR_Client/IFR_Client_Adapter_Impl.h:
        * tao/TypeCodeFactory/TypeCodeFactory_Adapter_Impl.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_Adapter_Impl.h:
        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_i.h:

          "CORBA_" -> "CORBA::".

Tue Feb 25 08:02:36 2003  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/EC_Mcast/EC_Mcast.mpc:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.mpc:

          Named the project instead of allowing it to default.

Mon Feb 24 09:15:04 2003  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/POA.cpp (TAO_POA):

          Fixed "better conversion" warning.

          Fixed incorrect emulated exception macro usage.
          "ACE_TRY_CHECK", not "ACE_CHECK" should have been used.

          Added missing ACE_CHECK after ACE_ENDTRY.  Without it, the
          re-thrown emulated exception in the ACE_CATCHANY block will be
          ignored, incorrectly allowing code after that block to be
          executed.

Mon Feb 24 08:44:39 2003  Ossama Othman  <ossama@uci.edu>

        * tao/DynamicInterface/DII_ClientRequestInfo.h:

          Fixed problem where "ace/post.h" was not included in
          interceptor disabled builds.

          Fixed problem that prevented the TAO_DII_ClientRequestInfo class
          from ever being visible.  A preprocessor check for
          "TAO_HAS_INTERCEPTORS == 1" was being performed before any
          headers that defined "TAO_HAS_INTERCEPTORS" were included
          meaning that condition always evaluated to false.  This also
          fixes "unresolved symbol" errors that have appeared in some
          builds.

        * tao/DynamicInterface/DII_ClientRequestInfo.cpp:

          Fixed syntax errors that were exposed by the code actually being
          made visible.

Mon Feb 24 15:35:23 2003  Edward Scott  <eas@prismtechnologies.com>

        * tao/DynamicAny/DynUnion_i.h:
        * tao/DynamicAny/DynStruct_i.h:

          Fixed incorrect environment macro usage. Thanks to
          vince@mounts.cc for reporting the problem.

Sat Feb 22 09:50:31 2003  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/Collocated_Object.cpp (_get_component):
          (_is_equivalent, _tao_QueryInterface):

          Wrapped remaining CORBA::Object base class method calls with the
          ACE_NESTED_CLASS macro.  Addresses remaining problems in Borland
          C++ builds.

Sat Feb 22 09:37:29 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.h (ORB):

          Qualify the TAO_ORB_Core friend declaration with the global
          scope ("::") qualifier.  Addresses a problem where some
          compilers assume that the TAO_ORB_Core declaration actually
          resides in the CORBA namespace.

        * tao/DynamicInterface/Makefile.bor (OBJFILES):

          Fixed syntax error.

Sat Feb 22 09:06:45 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ValueFactory.h (TAO_OBV_CREATE_RETURN_TYPE):
          (TAO_OBV_REGISTER_FACTORY):

          Removed space in macro definition that was incorrectly
          introduced, and caused syntax errors in some builds.

Sat Feb 22 08:52:13 2003  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Include "tao/Wait_Strategy.h".  Necessitated by inter-header
          dependency reductions.

Sat Feb 22 08:44:46 2003  Ossama Othman  <ossama@uci.edu>

        * tests/Queued_Message_Test/Queued_Message_Test.cpp:

          Include "ace/Message_Block.h".  Necessitated by inter-header
          dependency reductions.

Sat Feb 22 08:40:11 2003  Ossama Othman  <ossama@uci.edu>

        * tests/OBV/Factory/FactoryC_impl.h:

          "CORBA_" -> "CORBA::".

Fri Feb 21 13:40:41 2003  Ossama Othman  <ossama@uci.edu>

        * tao/IOPC.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/IORManipulation/IORC.cpp:
        * tao/IORTable/IORTableC.cpp:
        * tao/Messaging/MessagingC.i:
        * tao/Messaging/MessagingC.cpp:
        * tao/PortableServer/Collocated_Object.i:
        * tao/PortableServer/Collocated_Object.cpp:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImR_LocatorC.i:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/PortableServerC.cpp:

          Wrap some base class initializations and method calls with the
          ACE_NESTED_CLASS macro to work around MSVC++ 6 namespace brain
          damage.  This should also address problems exhibited in the
          Borland C++ 6 build due to a missing class scope.

Fri Feb 21 13:07:33 2003  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_interface.cpp (gen_stub_ctor):
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp (visit_exception):
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp (visit_interface):

          Generate code that uses the ACE_NESTED_CLASS macro to work
          around MSVC++ 6 lack of fully functional C++ namespace sport.
          This should also address problems exhibited in the Borland C++ 6
          build due to a missing class scope.

Fri Feb 21 12:54:07 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ValueBase.h (add_ref, remove_ref):

          Made these function prototypes match those in
          `corbafwd.h'. Should fix a problem revealed in "Release"
          configuration Windows builds.

        * tao/corba.h:
        * tao/orbconf.h:

          Moved ACE_NESTED_CLASS macro out of corba.h and into orbconf.h.
          That macro is needed within TAO's ORB core, as well.

Fri Feb 21 17:49:54 2003  Edward Scott  <eas@prismtechnologies.com>

        * tao/DynamicAny/DynUnion_i.h:
        * tao/DynamicAny/DynUnion_i.cpp:
          Fixes for bug 1455 for creating Dynamic Anys from Anys initialised
          with _default().

        * tao/DynamicAny/DynStruct_i.cpp (from_any):
        * tao/DynamicAny/DynStruct_i.h (TAO_Local_RefCounted_Object):
        * tao/DynamicAny/DynUnion_i.cpp (TAO_DynUnion_i):
          Fixes for Dynamic Any with aliases typecodes. Fixes bug 1449.

        * tests/DynAny_Test/test_dynunion.cpp:
        * tests/DynAny_Test/test_dynstruct.cpp:
        * tests/DynAny_Test/da_tests.idl:
          Test update for bugs 1449 and 1455.

        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/tao_idl.cpp:
          Correct IFR Service handling IDL with C++ keyword identifiers.
          Fixes bug 1393.

        * TAO/orbsvcs/tests/Bug_1393_Regression/Bug_1393_Client.dsp:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Bug_1393_Client_Static.dsp:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Bug_1393_Regression.dsw:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Bug_1393_Regression.mpc:
        * TAO/orbsvcs/tests/Bug_1393_Regression/client.cpp:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Makefile:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Makefile.bor:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Makefile.Bug_1393_Client:
        * TAO/orbsvcs/tests/Bug_1393_Regression/Makefile.Bug_1393_Client.bor:
        * TAO/orbsvcs/tests/Bug_1393_Regression/README:
        * TAO/orbsvcs/tests/Bug_1393_Regression/run_test.pl:
          Regression test for 1393.

        * tao/PortableServer/POA.cpp (TAO_POA):
          Recover from failure to contact IMR in create_POA with
          persistent policy. Fixes bug 1395.

        * TAO/orbsvcs/tests/Bug_1395_Regression/Bug_1395_Client.dsp:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Bug_1395_Regression.dsw:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Bug_1395_Regression.mpc:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Bug_1395_Server.dsp:
        * TAO/orbsvcs/tests/Bug_1395_Regression/client.cpp:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Makefile:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Makefile.Bug_1395_Client:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Makefile.Bug_1395_Server:
        * TAO/orbsvcs/tests/Bug_1395_Regression/README:
        * TAO/orbsvcs/tests/Bug_1395_Regression/run_test.pl:
        * TAO/orbsvcs/tests/Bug_1395_Regression/server.cpp:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Test_i.cpp:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Test.idl:
        * TAO/orbsvcs/tests/Bug_1395_Regression/Test_i.h:
          Regression test for 1395.

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (parse_args):
          Fixed usage message (Bug 1438).

        * TAO/orbsvcs/tests/Bug_1436_Regression/README:
        * TAO/orbsvcs/tests/Bug_1436_Regression/run_test.pl:
        * TAO/orbsvcs/tests/Bug_1436_Regression/test.idl:
          Regression test for 1436.

        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
          Prevent registration of server with empty server name in the
          ImplRepo service. Fixes bug 1437.

        * TAO/orbsvcs/tests/Bug_1437_Regression/README:
        * TAO/orbsvcs/tests/Bug_1437_Regression/run_test.pl:
          Regression test for 1437.

Fri Feb 21 06:54:45 2003  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp
          (gen_marshal_and_invoke):

          Moved an ending "if" brace to within a TAO_HAS_INTERCEPTORS
          block.  Fixes builds with interceptors disabled.

Fri Feb 21 06:22:36 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ORBInitializer_Registry.cpp:

          Changed ACE_Array_Base explicit template instantiation argument
          from PortableInterceptor::ORBInitializer_ptr to
          PortableInterceptor::ORBInitializer_var.  Fixes unresolved
          symbol link-time errors in explicit template instantiation
          builds.

Thu Feb 20 17:31:58 2003  Ossama Othman  <ossama@uci.edu>

        * examples/Load_Balancing/Load_Balancer_i.cpp:
        * examples/Load_Balancing_persistent/Identity_Client.cpp:
        * examples/Load_Balancing_persistent/Load_Balancer_i.cpp:
        * examples/POA/DSI/Database_i.cpp:
        * orbsvcs/ImplRepo_Service/Forwarder.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * orbsvcs/PSS/PSDL_Interface_Visitor.cpp:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Supplier.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.cpp:
        * orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Event_Manager.cpp:
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.cpp:
        * orbsvcs/tests/EC_MT_Mcast/MCast.cpp:
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.cpp:
        * tests/DynAny_Test/test_dynany.cpp:
        * tests/DynAny_Test/test_dynarray.cpp:
        * tests/DynAny_Test/test_dynenum.cpp:
        * tests/DynAny_Test/test_dynsequence.cpp:
        * tests/DynAny_Test/test_dynstruct.cpp:
        * tests/DynAny_Test/test_dynunion.cpp:
        * tests/MProfile/client.cpp:
        * tests/MProfile_Connection_Timeout/client.cpp:
        * tests/MProfile_Forwarding/Manager.cpp:
        * tests/OBV/Factory/FactoryC_impl.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_ORBInitializer.cpp:
        * utils/catior/catior.cpp:


          "CORBA_" -> "CORBA::".

Thu Feb 20 19:59:36 2003  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * ChangeLogs/ChangeLog-02c:
        * ChangeLogs/ChangeLog-03a: New files.

        * ChangeLog: Moved some of the contents out to the new files
          above.

Thu Feb 20 15:02:27 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core_Auto_Ptr.h:

          Fixed filename mismatch in Doxygen documenation.  Fixes a "fuzz"
          error.

Thu Feb 20 14:04:13 2003  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:

          Zapped remaining uses of "CORBA_Any", and replaced them with
          the correct "CORBA::Any".

Thu Feb 20 13:57:36 2003  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:

          Zapped remaining uses of "CORBA_Object", and replaced them with
          the correct "CORBA::Object".

Thu Feb 20 13:25:37 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS.h:

          "CORBA_" -> "CORBA::".

Thu Feb 20 13:05:36 2003  Ossama Othman  <ossama@uci.edu>

        * tao/DynamicInterface/Context.cpp:4
        * tao/DynamicInterface/Context.h:
        * tao/DynamicInterface/Context.inl:
        * tao/DynamicInterface/DII_ClientRequestInfo.cpp:
        * tao/DynamicInterface/DII_ClientRequestInfo.h:
        * tao/DynamicInterface/DII_Invocation.cpp:
        * tao/DynamicInterface/Dynamic_Adapter_Impl.cpp:
        * tao/DynamicInterface/Dynamic_Implementation.cpp:
        * tao/DynamicInterface/Dynamic_Implementation.h:
        * tao/DynamicInterface/ExceptionList.cpp:
        * tao/DynamicInterface/ExceptionList.h:
        * tao/DynamicInterface/ExceptionList.inl:
        * tao/DynamicInterface/Makefile:
        * tao/DynamicInterface/Makefile.bor:
        * tao/DynamicInterface/Request.cpp:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Request.inl:
        * tao/DynamicInterface/Server_Request.cpp:
        * tao/DynamicInterface/Server_Request.h:
        * tao/DynamicInterface/Server_Request.inl:
        * tao/DynamicInterface/Unknown_User_Exception.cpp:
        * tao/DynamicInterface/Unknown_User_Exception.h:


          "CORBA_" -> "CORBA::"

          Classes that should be in the C++ CORBA namespace are now in
          that namespace.

          Removed some unnecessary includes.

          Added preliminary DII interceptor support.

Thu Feb 20 12:05:42 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Makefile.tao (MAKEFILE):

          Corrected the filename.  It should have been "Makefile.tao".
          Not "Makefile."  Fixes a problem where the generated
          dependencies would end up in the wrong Makefile.  Thanks to Don
          Hinton <dhinton@ieee.org> for supplying this fix.

Thu Feb 20 11:44:53 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Object.i (Object):

          Explicitly initialize the TAO_Base_var private base class in
          this copy constructor.  Fixes a warning exhibited by g++.

Thu Feb 20 11:34:00 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Makefile.bor (OBJFILES):
        * tao/tao.mpc (ORB_Core):

          Added new ORB_Core_Auto_Ptr files to these file lists.

Thu Feb 20 11:27:58 2003  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/Collocated_Object.h:

          A forward declaration of TAO_ServantBase is not enough.
          Including "Servant_Base.h" is necessary to establish the
          inheritance of TAO_ServantBase from TAO_Abstract_ServantBase.
          TAO_Collocated_Object's constructor passes a TAO_ServantBase
          pointer to the CORBA::Object constructor, but that constructor
          expects a TAO_Abstract_ServantBase pointer, hence the need to
          establish the inheritance hierarchy.

        * tao/PortableServer/Direct_Object_Proxy_Impl.cpp (_non_existent):

          Corrected emulated exception macro usage.

        * tao/PortableServer/PortableServerC.cpp:

          Fixed lingering "CORBA_" -> "CORBA::" problem for the
          !TAO_USE_SEQUENCE_TEMPLATES case.

Thu Feb 20 11:07:01 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Thread_Lane_Resources.h:
        * tao/Thread_Lane_Resources_Manager.h:

          "corbafwd.h" is unfortunately needed for the emulated exception
          case.

Thu Feb 20 10:56:59 2003  Ossama Othman  <ossama@uci.edu>

        * tao/ORBInitializer_Registry.h (TAO_ORBInitializer_Registry):

          Removed default value in second argument of
          PortableInterceptor::register_orb_initializer() friend
          declaration since it is already defined in actual function
          declaration in PortableInterceptorC.h.  Fixes a compile-time
          problem.

        * tao/Remote_Object_Proxy_Impl.cpp (_get_component):

          Corrected emulated exception macro usage.

        * tao/Typecode.cpp (private_member_label):

          Added missing emulated exception macro parameter to the call to
          TypeCode::private_default_index_i().  Fixes a compile-time
          error in emulated exception builds.  This also removes a TSS
          access, and fixes a potentially missed exception in emulated
          exception builds.

Thu Feb 20 10:20:51 2003  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.h (TAO_SYSTEM_EXCEPTION):
        * tao/Exception.cpp (TAO_SYSTEM_EXCEPTION):

          Removed "##" preprocessor concatenation token for the
          "CORBA::name" case.  It isn't needed in this case.  Fixes a g++
          warning regarding invalid token pasting.

        * tao/Services.i:

          Fixed variables containing "CORBA_" in the middle of their names
          that were inadvertently changed to "CORBA::".  Fixes syntax
          errors.

Thu Feb 20 09:07:56 2003  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_interface.cpp (gen_stub_ctor):

          Generate code that correctly uses "CORBA::Object" instead of
          "CORBA_Object".

          (gen_var_defn):

          Made generated "_var" classes inherit privately from
          TAO_Base_var instead of publically.  Specifically, private
          inheritance from TAO_Base_var is done to emphasize that
          a given "_var" does not satisfy the IS-A relationship with
          TAO_Base_var.  "_var" classes are merely IMPLEMENTED-IN-TERMS-OF
          TAO_Base_var.  This also correctly invalidates assignments like:
                Foo_var v;
                TAO_Base_var * t = &v;

        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp
          (visit_exception):

          Generate code that correctly uses "CORBA::UserException" instead
          of "CORBA_UserException".

        * TAO_IDL/be/be_visitor_interface/amh_ch.cpp
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:

          Generate code that correctly uses "CORBA::Object" instead of
          "CORBA_Object".

        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:

          Improved "const correctness" of generated interceptor related
          code.  One of the return values is really a constant.

        * TAO_IDL/be/be_visitor_operation/operation.cpp:

          Fixed generated transport retry code/loop.  The exception macros
          prevent statements like "continue" and "break" from being used
          as expected.  Worked around that deficiency by using if/else
          blocks instead.

          Improved "const correctness" of generated interceptor related
          code.  One of the return values is really a constant.

        * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:

          Generate code that correctly uses "CORBA::ValueBase" instead of
          "CORBA_ValueBase".

        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:

          Generate code that correctly uses "CORBA::ValueFactoryBase"
          instead of "CORBA_ValueFactoryBase".

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:

          Generate code that correctly uses
          "CORBA::DefaultValueRefCountBase" instead of
          "CORBA_DefaultValueRefCountBase".

        * orbsvcs/orbsvcs/PortableGroup.idl:

          Use the "typeprefix" keyword instead of "#pragma prefix".  The
          former is more modern.

        * orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp:

          Corrected comment.

        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.inl:

          Fixed race conditions in the TAO_LB_LoadAlert class.

        * orbsvcs/orbsvcs/Notify/Service.h:

          Include "ace/Service_Object.h" to pull in ACE_Service_Object
          class declaration.  Necessitated by inter-header dependency
          reductions.

        * orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
          (populate_object_group):

          No need to pass an integral type "const" by value.  Remove the
          "const" qualifier.

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:

          No need to include "tao/corbafwd.h".

        * orbsvcs/orbsvcs/FaultTolerance/FT_Invocation_Endpoint_Selectors.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp:
        * orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp:
        * tao/CDR_Encaps_Codec.cpp:
        * tao/CORBALOC_Parser.cpp:
        * tao/CodecFactory.cpp:
        * tao/Connector_Registry.cpp:
        * tao/DLL_Parser.cpp:
        * tao/IIOP_Profile.cpp:
        * tao/Interceptor_List.cpp:
        * tao/Invocation.cpp:
        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/ORBInitInfo.cpp:
        * tao/PICurrent.cpp:
        * tao/PolicyFactory_Registry.cpp:
        * tao/Profile.cpp:
        * tao/Service_Callbacks.cpp:
        * tao/Transport_Connector.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.cpp:
        * tao/BiDir_GIOP/BiDir_PolicyFactory.cpp:
        * tao/Messaging/Asynch_Reply_Dispatcher.cpp:
        * tao/Messaging/Messaging.cpp:
        * tao/Messaging/Messaging_Policy_i.cpp:
        * tao/PortableServer/ObjectReferenceTemplate.cpp:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/ServerRequestInfo.cpp:
        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.cpp:
        * tao/RTCORBA/RT_PolicyFactory.cpp:
        * tao/RTCORBA/Thread_Pool.cpp:
        * tao/Strategies/DIOP_Profile.cpp:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.cpp:
        * tests/ORT/ORT_test_IORInterceptor.cpp:

          Use CORBA::SystemException instead of CORBA_SystemException.
          The latter was an implementation detail, and part of a
          workaround for C++ compilers that didn't support namespaces.

        * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
        * tao/GIOP_Message_Generator_Parser.h:
        * tao/GIOP_Message_Lite.h:
        * tao/PICurrent.h:
        * tao/Request_Dispatcher.h:

          Forward declare TAO_ServerRequest.  Necessitated by inter-header
          dependency reductions.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:

          Removed obsolete comment.

        * tao/AbstractBase.cpp:
        * tao/AbstractBase.h:
        * tao/AbstractBase.inl:
        * tao/CORBA_String.cpp:
        * tao/CORBA_String.h:
        * tao/CORBA_String.inl:
        * tao/CurrentC.cpp:
        * tao/CurrentC.h:
        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/Environment.cpp:
        * tao/Environment.h:
        * tao/Environment.i:
        * tao/Exception.cpp:
        * tao/Exception.h:
        * tao/Exception.i:
        * tao/LocalObject.cpp:
        * tao/LocalObject.h:
        * tao/LocalObject.i:
        * tao/NVList.cpp:
        * tao/NVList.h:
        * tao/NVList.i:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORB.i:
        * tao/OctetSeqC.cpp:
        * tao/OctetSeqC.h:
        * tao/OctetSeqC.i:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/PolicyC.i:
        * tao/Principal.cpp:
        * tao/Principal.h:
        * tao/Principal.i:
        * tao/Services.cpp:
        * tao/Services.h:
        * tao/Services.i:
        * tao/StringSeqC.cpp:
        * tao/StringSeqC.h:
        * tao/StringSeqC.i:
        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/Typecode.i:
        * tao/Typecode_Constants.cpp:
        * tao/ValueBase.cpp:
        * tao/ValueBase.h:
        * tao/ValueBase.i:
        * tao/ValueFactory.cpp:
        * tao/ValueFactory.h:
        * tao/ValueFactory.i:

          Moved all "CORBA_" classes into a true CORBA namespace, and
          dropped the "CORBA_" workaround for compilers that lacked
          C++ namespace support.

        * tao/Abstract_Servant_Base.h:

          Moved "TAO_Skeleton" function typedef to this file.  This change
          is part of set of inter-header dependency reductions.

        * tao/Acceptor_Filter.h:
        * tao/Adapter.h:

          Forward declare TAO_ObjectKey.  Necessitated by inter-header
          dependency reductions.

        * tao/Acceptor_Impl.cpp:

          Include "tao/Transport.h".  Necessitated by inter-header
          dependency reductions.

        * tao/Acceptor_Impl.h:
        * tao/CDR.h:

          Fixed doxygen documentation.

        * tao/Asynch_Invocation.h:

          No need to include "tao/Asynch_Reply_Dispatcher_Base.h".
          Forward declaring "TAO_Asynch_Reply_Dispatcher_Base" is enough.

        * tao/Asynch_Queued_Message.cpp:

          Include "ace/Message_Block.h".  Necessitated by inter-header
          dependency reductions.

        * tao/Asynch_Reply_Dispatcher_Base.h:

          No need to include "tao/orbconf.h"  Including "tao/TAO_Export.h"
          is enough.

        * tao/BoundsC.cpp:
        * tao/IOPC.cpp:
        * tao/PollableC.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/WrongTransactionC.cpp:
        * tao/DynamicAny/DynamicAnyC.cpp
        * tao/IORTable/IORTableC.cpp:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/RTCORBA/RTCORBAC.cpp:

          Use CORBA::UserException instead of CORBA_UserException.
          The latter was an implementation detail, and part of a
          workaround for C++ compilers that didn't support namespaces.

        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp:
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.cpp:
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.h:
        * tao/CDR.cpp:
        * tao/Current.pidl:
        * tao/Policy_ForwardC.cpp:
        * tao/Policy_ForwardC.h:
        * tao/ORB_Core.cpp:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/ObjectReferenceTemplateC.h:
        * tao/PollableC.h:
        * tao/PortableInterceptorC.h:
        * tao/Sequence.cpp:
        * tao/Sequence_T.cpp:
        * tao/Sequence_T.h:
        * tao/TAO_Server_Request.h:
        * tao/TAO_Server_Request.i:
        * tao/TypeCodeFactory_Adapter.h:
        * tao/objectid.h:
        * tao/DynamicAny/DynAnyFactory.cpp:
        * tao/DynamicAny/DynAnyFactory.h:
        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynAny_i.h:
        * tao/DynamicAny/DynArray_i.cpp:
        * tao/DynamicAny/DynArray_i.h:
        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:
        * tao/DynamicAny/DynEnum_i.cpp:
        * tao/DynamicAny/DynEnum_i.h:
        * tao/DynamicAny/DynSequence_i.cpp:
        * tao/DynamicAny/DynSequence_i.h:
        * tao/DynamicAny/DynStruct_i.cpp:
        * tao/DynamicAny/DynStruct_i.h:
        * tao/DynamicAny/DynUnion_i.cpp:
        * tao/DynamicAny/DynUnion_i.h:
        * tao/DynamicAny/DynamicAnyC.h:
        * tao/IORManipulation/IORC.cpp:
        * tao/IORManipulation/IORC.h:
        * tao/IORTable/IORTableC.h:
        * tao/IORTable/Table_Adapter.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/Messaging/MessagingC.i:
        * tao/Messaging/MessagingS.cpp:
        * tao/PortableServer/Collocated_Object.cpp:
        * tao/PortableServer/Collocated_Object.i:
        * tao/PortableServer/Default_ORTC.cpp:
        * tao/PortableServer/Default_ORTC.h:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/ImR_LocatorC.h:
        * tao/PortableServer/ImR_LocatorC.i:
        * tao/PortableServer/ImR_LocatorS.cpp:
        * tao/PortableServer/ImR_LocatorS.h:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoS.cpp:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ORB_Manager.cpp:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/PolicyS.cpp:
        * tao/PortableServer/PolicyS.h:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/Servant_Base.cpp:
        * tao/PortableServer/Servant_Base.h:
        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.h:
        * tao/RTCORBA/RTCORBAC.h:

          "CORBA_" -> "CORBA::".

        * tao/ClientInterceptorAdapter.cpp (receive_reply):
          (receive_exception, receive_other):
        * tao/ClientRequestInfo_i.cpp:

          Improved "const-correctness" of code.

        * tao/ClientRequestInfo_i.h:

          No need to include "Service_Context.h".  Forward declaring
          "TAO_Service_Context" is enough.

        * tao/Collocation_Resolver.h:
        * tao/Connector_Registry.h:
        * tao/Endpoint_Selector_Factory.h:
        * tao/Invocation_Endpoint_Selectors.h:
        * tao/Object_Ref_Table.h:
        * tao/Transport_Connector.h:

          Include "ace/CORBA_macros.h" to pull in emulated exception
          preprocessor macros.  Necessitated by inter-header dependency
          reductions.

        * tao/Connection_Handler.h (~TAO_Connection_Handler):
        * tao/IIOP_Transport.h (~TAO_IIOP_Transport):

          Made this destructor protected to enforce proper memory
          management through the reference counting mechanism.

        * tao/Default_Thread_Lane_Resources_Manager.h:
        * tao/Dynamic_Adapter.h:
        * tao/Policy_Set.h:
        * tao/DynamicInterface/Dynamic_Adapter_Impl.h:
        * tao/RTCORBA/RT_Thread_Lane_Resources_Manager.h:

          Do not supply default environment parameter.  It isn't needed in
          these cases.

        * tao/Endpoint.h:

          Improved doxygen documentation.

          (addr_lookup_lock_)

          Improved "const-correctness" by making this member mutable.
          This allows concrete implementations of the
          TAO_Endpoint::object_addr() method to avoid using a hack where
          the constness is casted away.

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:

          "CORBA_Exception" -> "CORBA::Exception".

        * tao/GIOP_Message_Generator_Parser_10.cpp:

          "CORBA_OctetSeq" -> "CORBA::OctetSeq".

        * tao/IFR_Client_Adapter.h:

          "CORBA_Interface" -> "CORBA::Interface".

        * tao/IIOP_Connection_Handler.cpp:

          Include "tao/Wait_Strategy.h".  Necessitated by inter-header
          dependency reductions.

        * tao/IIOP_Connection_Handler.h:

          No need to include "ace/Acceptor.h", "tao/Wait_Strategy.h",
          "tao/IIOP_Transport.h".

          Include "ace/SOCK_Stream.h" and "ace/Svc_Handler.h" to allow
          IIOP-specific Svc_Handler typedef to be made in this header.

        * tao/IIOP_Connector.cpp:

          Include "Transport.h" and "Wait_Strategy.h".  Necessitated by
          inter-header dependency reductions.

        * tao/IIOP_Endpoint.h (object_addr_, object_addr_set_):

          Improved "const-correctness" by making these members mutable.
          This allows the TAO_IIOP_Endpoint::object_addr() method to avoid
          using a hack where the constness is casted away.

        * tao/IIOP_Endpoint.i (object_addr):

          No longer any need to use the hack where the constness is casted
          away since the appropriate class members are now mutable.

        * tao/IIOP_Transport.cpp:

          Cosmetic changes.

        * tao/IOPC.h (Codec, CodecFactory):

          Inherit from "CORBA::Object" instead of "CORBA_Object".

        * tao/LF_Event_Loop_Thread_Helper.h:

          No need to include "tao/orbconf.h"

        * tao/LF_Event_Loop_Thread_Helper.inl:

          Added Emacs C++ mode comment.

        * tao/Leader_Follower.h:

          No need to forward declare "TAO_New_Leader_Generator".

        * tao/MCAST_Parser.cpp:

          No need to include "ORB.h".

        * tao/MCAST_Parser.h:

          No need to include "ORB_Core.h".

          Instead include "CORBA_String.h".   Necessitated by inter-header
          dependency reductions.

        * tao/Marshal.h:

          No need to include "tao/Principal.h", "tao/Any.h", "tao/ORB.h".

        * tao/ORBInitInfo.h:

          "CORBA_Environment" -> "CORBA::Environment".

        * tao/ORBInitializer_Registry.h:

          Changed underlying template array parameter from
          "ORBInitializer_ptr" to "ORBInitializer_var" to improve memory
          management of registered ORBInitializers.

          (~TAO_ORBInitializer_Registry):
        * tao/ORBInitializer_Registry.cpp (~TAO_ORBInitializer_Registry):

          Removed declaration for this destructor.  It is no longer
          necessary with the above change in place.

          (register_orb_initializer, pre_init, post_init):

          Improved const-correctness.

        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/ORB_Core_Auto_Ptr.h:
        * tao/ORB_Core_Auto_Ptr.inl:
        * tao/ORB_Core_Auto_Ptr.cpp:

          Moved TAO_ORB_Core_Auto_Ptr class from ORB_Core.* to the new
          ORB_Core_Auto_Ptr.* files.

        * tao/Object.h:

          Forward declare TAO_ObjectKey.  Necessitated by inter-header
          dependency reductions.

          "CORBA_Object" -> "CORBA::Object".

          Made CORBA::Object_var inherit privately from TAO_Base_var, and
          added appropriate private copy constructor and assignment
          operator to prevent invalid widening.

        * tao/Object.i:
        * tao/Object.cpp:

          "CORBA_Object" -> "CORBA::Object".

        * tao/Object_KeyC.h:

          Forward declare TAO_Object_Key_var.  Necessitated by the
          "tao/corbafwd.h" cleanup.

        * tao/Object_Proxy_Broker.h (TAO_Object_Proxy_Broker):
        * tao/Object_Proxy_Broker.cpp (TAO_Object_Proxy_Broker):
        * tao/Object_Proxy_Impl.cpp (TAO_Object_Proxy_Impl):

          Removed useless constructor.

        * tao/Object_Proxy_Impl.h:

          Removed useless constructor.

          Added missing "#pragma once".

          "const CORBA::Char *" -> "const char *".

          "CORBA_" -> "CORBA::".

        * tao/Profile.i:

          Corrected some comments.

        * tao/Protocols_Hooks.h:

          Forward declare TAO_Stub.  Necessitated by inter-header
          dependency reductions.

        * tao/Remote_Object_Proxy_Broker.cpp:
        * tao/Remote_Object_Proxy_Broker.h:

          Removed useless constructor and destructor.

        * tao/Remote_Object_Proxy_Impl.cpp:

          Removed useless constructor and destructor.

          Avoided inclusion of "tao/Any.h" by directly using the
          TAO_InputCDR::to_boolean() method instead of
          CORBA::Any::to_boolean().

          "CORBA_" -> "CORBA::".

          Fixed some emulated exception macro usage.

          (_get_component):

          Updated to better match current TAO_IDL generated stub code.

        * tao/Remote_Object_Proxy_Impl.h:

          "CORBA::Char *" -> "char *".

          "CORBA_" -> "CORBA::".

        * tao/Sequence.h:

          Include "ace/CORBA_macros.h" and "ace/Message_Block.h".
          Necessitated by inter-header dependency reduction.

          Removed now obsolete "CORBA_Object" and "CORBA_Environment"
          forward declarations.

          "CORBA_" -> "CORBA::".

        * tao/Service_Callbacks.h:

          Corrected TAO_ServerRequest forward declaration,
           i.e. "TAO_Server_Request" to "TAO_ServerRequest".

        * tao/Stub.h:

          Include new "ORB_Core_Auto_Ptr.h" header to pull in
          TAO_ORB_Core_Auto_Ptr declaration.

        * tao/Stub_Factory.h:

          Forward declare TAO_Stub and include "ace/CORBA_macros.h".
          Necessitated by inter-header dependency reductions.

        * tao/Synch_Queued_Message.cpp:

          Included "ace/Message_Block.h".  Necessitated by inter-header
          dependency reductions.

        * tao/TAO.dsp:

          Added new ORB_Core_Auto_Ptr.* files to this project.

        * tao/TAO_Internal.cpp:

          Include "tao/Adapter.h", "tao/ORB_Core.h" and
          "Dynamic_Service.h".  Necessitated by inter-header dependency
          reductions.

        * tao/Tagged_Components.cpp:

          Cosmetic changes.

        * tao/Thread_Lane_Resources.h:
        * tao/Thread_Lane_Resources_Manager.h:

          No need to include "tao/corbafwd.h".

          Include "tao/TAO_Export.h" and "ace/CORBA_macros.h".
          Necessitated by inter-header dependency reductions.

        * tao/Transport.cpp:

          Cosmetic changes.

        * tao/Transport.h:

          No need to include "Transport_Descriptor_Interface.h".  A
          forward declaration is enough.

          (~TAO_Transport):

          Made destructor protected in order to enforce proper memory
          management through the reference counting mechanism.

        * tao/ValueFactory_Map.cpp:

          Initialize the underlying map with the new
          "TAO_DEFAULT_VALUE_FACTORY_TABLE_SIZE" constant.

          "CORBA_" -> "CORBA::".

        * tao/ValueFactory_Map.h:

          Include "Hash_Map_Manager_T.h" instead of "Hash_Map_Manager.h".
          The latter includes the former, and the former is the only one
          that is needed.

          "CORBA_" -> "CORBA::".

        * tao/corba.h:

          Include "tao/varbase.h".  The TAO_IDL compiler no longer
          generates an include directive for that header in the stub
          headers.

        * tao/corbafwd.cpp:

          Converted global constants in the CORBA namespace to be declared
          using straight C++ instead of the namespace macro workarounds.

        * tao/corbafwd.h:

          No need to include "ace/CORBA_macros.h" and "tao/varbase.h".

          Removed workaround used for compilers that didn't support C++
          namespaces.  All classes and types that are in the CORBA IDL
          namespace are now in a true CORBA C++ namespace.

          Removed all "CORBA_" based typedefs.  They are no longer
          needed.

          Moved all non-CORBA namespace related typedefs and constants out
          this of file.  They don't belong there.

          The above changes greatly reduce the size of this file, which
          has been a bottleneck for compiles.

        * tao/corbafwd.i (default_environment):

          Updated to conform to ACE/TAO coding conventions.

        * tao/iiop_endpoints.h:

          No need to include "tao/Any.h".  Include "tao/CDR.h" instead.

        * tao/orbconf.h:

          Added "TAO_DEFAULT_VALUE_FACTORY_TABLE_SIZE" global constant to
          be used as the default size of the ValueFactory map.
          Previously, the default table size was used which is too large
          (i.e. 1024).

        * tao/varbase.h (TAO_Base_var):

          Added private copy constructor and assignment operator to
          improve prevention of invalid widening.

        * tao/PortableServer/Collocated_Object.h:

          No need to include "tao/Servant_Base.h".

          "CORBA_" -> "CORBA::".

        * tao/PortableServer/Direct_Object_Proxy_Impl.cpp
          (TAO_Direct_Object_Proxy_Impl):

          Removed useless constructor.

          (_get_interface, _getcomponent):

          Fixed emulated exception support.

        * tao/PortableServer/Direct_Object_Proxy_Impl.h:
          (TAO_Direct_Object_Proxy_Impl):

          Removed useless constructor.

        * tao/PortableServer/Object_Adapter.h:

          No need to include "Key_Adapters.h" and "Servant_Base.h".

        * tao/PortableServer/Operation_Table.h:

          Include "tao/Abstract_Servant_Base.h".  Necessitated by
          inter-header dependency reductions.

        * tao/PortableServer/POA.h:

          Include "tao/PortableInterceptorC.h".  Necessitated by
          inter-header dependency reductions.

          Changed map of POA children from ACE_Hash_Map_Manager to
          ACE_Hash_Map_Manager_Ex.  That save us three template
          instantiations.

        * tao/PortableServer/ServerInterceptorAdapter.cpp (send_reply):
          (send_exception, send_other):

          Improved const-correctness.

        * tao/RTCORBA/RT_ORB_Loader.cpp:

          No need to include "tao/ORB_Core.h" and
          "tao/ORBInitializer_Registry.h".

          "CORBA_" -> "CORBA::".
