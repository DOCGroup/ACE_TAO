Wed Nov 27 16:35:03 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/Log/NotifyLogConsumer.h: 
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.h: 
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.h: 

	Removed includes to deprecated files.
	

Wed Nov 27 13:54:55 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/tests/Log/Basic_Log_Test/client.cpp:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.h:
	* orbsvcs/tests/Log/Basic_Log_Test/Makefile:

	Documentation changes to files.
	

Wed Nov 27 13:48:19 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.h:
	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.h:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Server.cpp:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.cpp:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.cpp:

	Documentation changes to files.
	

Wed Nov 27 13:36:11 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/examples/Log/Basic/main.cpp: 
	* orbsvcs/examples/Log/Basic/TLS_Client.cpp:
	* orbsvcs/examples/Log/Basic/TLS_Client.h:
	* orbsvcs/examples/Log/Event/Event_Consumer.cpp:
	* orbsvcs/examples/Log/Event/Event_Consumer.h:
	* orbsvcs/examples/Log/Event/Event_Supplier.cpp:
	* orbsvcs/examples/Log/Event/Event_Supplier.h:
	* orbsvcs/examples/Log/Notify/Notify_Consumer.cpp:
	* orbsvcs/examples/Log/Notify/Notify_Consumer.h:
	* orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:
	* orbsvcs/examples/Log/Notify/Notify_Supplier.h:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.cpp:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.h:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.h:

	Documenation changes to files.

Wed Nov 27 07:18:54 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1361_Regression/Server_Thread_Pool.h:
	* tests/Bug_1361_Regression/Server_Thread_Pool.cpp: Fixed compile
	  errors in single threaded builds.

Wed Nov 27 13:19:19 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/Makefile.DsEventLogAdmin:
	* orbsvcs/orbsvcs/Makefile.DsNotifyLogAdmin:
	* orbsvcs/orbsvcs/Makefile.RTEventLogAdmin:

	  Files amended for new *LogConsumer files.
	
Wed Nov 27 13:12:54 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/BasicLog_i.cpp:
	* orbsvcs/orbsvcs/Log/BasicLog_i.h:
	* orbsvcs/orbsvcs/Log/EventLogConsumer.cpp:
	* orbsvcs/orbsvcs/Log/EventLogConsumer.h:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/EventLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/EventLogNotification.h:
	* orbsvcs/orbsvcs/Log/EventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLog_i.h:
	* orbsvcs/orbsvcs/Log/Iterator_i.cpp:
	* orbsvcs/orbsvcs/Log/Iterator_i.h:
	* orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
	* orbsvcs/orbsvcs/Log/LogMgr_i.h:
	* orbsvcs/orbsvcs/Log/LogNotification.cpp:
	* orbsvcs/orbsvcs/Log/LogNotification.h:
	* orbsvcs/orbsvcs/Log/LogRecordStore.cpp:
	* orbsvcs/orbsvcs/Log/LogRecordStore.h:
	* orbsvcs/orbsvcs/Log/LogRecordStore_persist.cpp:
	* orbsvcs/orbsvcs/Log/LogRecordStore_persist.h:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.cpp:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Log/Log_i.cpp:
	* orbsvcs/orbsvcs/Log/Log_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLogConsumer.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogConsumer.h:
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.h:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.h:
	* orbsvcs/orbsvcs/Log/PersistStore.cpp:
	* orbsvcs/orbsvcs/Log/PersistStore.h:
	* orbsvcs/orbsvcs/Log/RTEventLogConsumer.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogConsumer.h:
	* orbsvcs/orbsvcs/Log/RTEventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/RTEventLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogNotification.h:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.h:

	  Documentation changes to files.

Wed Nov 27 10:14:26 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/RTEventLog.dsp: 
	* orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:
          
	  Updated to reflect additional files...
	  orbsvcs/orbsvcs/Log/EventLogConsumer.h
	  orbsvcs/orbsvcs/Log/EventLogConsumer.cpp
	  orbsvcs/orbsvcs/Log/NotifyLogConsumer.h
	  orbsvcs/orbsvcs/Log/NotifyLogConsumer.cpp
	  orbsvcs/orbsvcs/Log/RTEventLogConsumer.h
	  orbsvcs/orbsvcs/Log/RTEventLogConsumer.h

Wed Nov 27 09:23:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1361_Regression/Test.idl:
          Fixed fuzz error

        * tests/Bug_1361_Regression/server.bor:
          Removed not existing file and corrected TAO_IDL flags

        * tests/Bug_1361_Regression/client.bor:
          Corrected TAO_IDL flags

        * tests/Bug_1361_Regression/Makefile.bor:
          Added shutdown.bor

Tue Nov 26 23:09:41 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Makefile:
	* tests/Makefile.bor: Added the new test to the daily builds.

	* tests/Bug_1361_Regression/server.bor:
	* tests/Bug_1361_Regression/client.bor:
	* tests/Bug_1361_Regression/shutdown.bor:
	* tests/Bug_1361_Regression/Makefile.bor: The Borland Makefiles.

Tue Nov 26 22:32:06 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1361_Regression/*: A new regression for BUG
	  1361.

	* tests/Bug_1361_Regression/client.cpp:
	* tests/Bug_1361_Regression/Echo_Caller.cpp:
	* tests/Bug_1361_Regression/Echo_Caller.h:
	* tests/Bug_1361_Regression/Echo.cpp:
	* tests/Bug_1361_Regression/Echo.h
	* tests/Bug_1361_Regression/Makefile
	* tests/Bug_1361_Regression/ORB_Task.cpp:
	* tests/Bug_1361_Regression/ORB_Task.h:
	* tests/Bug_1361_Regression/run_test.pl*
	* tests/Bug_1361_Regression/server.cpp
	* tests/Bug_1361_Regression/Server_Thread_Pool.cpp
	* tests/Bug_1361_Regression/Server_Thread_Pool.h
	* tests/Bug_1361_Regression/Server_Timer.cpp
	* tests/Bug_1361_Regression/Server_Timer.h
	* tests/Bug_1361_Regression/shutdown.cpp
	* tests/Bug_1361_Regression/Test.idl:

	  Thanks to Duane Binder <duane.binder@veritas.com> for donating
	  this test case.

Tue Nov 26 16:03:52 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1020_Basic_Regression/run_test.pl:
	* tests/Bug_1020_Regression/run_test.pl: Fixed these scripts to
	  work for 5 minutes instead of 7. They tend to get timedout
	  creating noise in the builds.

Tue Nov 26 15:01:40 2002  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/AbstractBase.cpp:
        * tao/AbstractBase.h:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ValueBase.cpp:
        * tao/ValueBase.h:
        * tao/ValueFactory.cpp:
        * tao/ValueFactory.h:
        * tao/ValueFactory_Map.cpp:
        * tao/ValueFactory_Map.h:
        * tao/corbafwd.h:
        * tao/orbconf.h:
        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:

          Removed TAO_HAS_VALUETYPE flag. None of the tests or examples that
          use valuetypes have ever used this flag.

Tue Nov 26 14:21:20 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.h:
	* docs/tutorials/Quoter/On_Demand_Activation/Handler_i.cpp:
	  Fixed compile errors by adding dummy implementations for the
	  base interface methods in interface Stock{}; This should fix
	  compile errors on many platforms.

Tue Nov 26 13:41:21 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
	  Prefixed "Notify_" to original filesnames to disambiguate from
	  simile in Trader. Thanks to Jaroslaw Nozderko
	  <jaroslaw.nozderko@polkomtel.com.pl> for reporting this problem
	  and Bala for providing the fix.

	* orbsvcs/orbsvcs/Notify/ETCL_Filter.h:
	* orbsvcs/orbsvcs/Notify/ETCL_Filter.cpp:
	* orbsvcs/orbsvcs/Makefile.CosNotification:
	* orbsvcs/orbsvcs/CosNotification.dsp:
	* orbsvcs/orbsvcs/CosNotification.bor:
	  Modified to point to renamed files.

Tue Nov 26 09:09:48 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/PortableGroup.bor:

          Matched changes to corresponding makefile and project files. Thanks to
          Johnny Willemsen <jwillemsen@rememdy.nl> for pointing this out.

Tue Nov 26 00:01:07 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/ORB.cpp: Fix for BUG [1373]. The marshalling and
	  demarshalling operators for TAO_opaque objects were
	  wrong. Thanks to Carlos O'Ryan for reporting this problem and
	  providing a patch.

Mon Nov 25 14:39:00 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:

          Added implied IDL generation for imported (included from another
          IDL file) interfaces. No C++ code is generated for these or any
          other imported nodes in the AST.

        * orbsvcs/orbsvcs/PortableGroup.dsp:
        * orbsvcs/orbsvcs/PortableGroup_Static.dsp:
        * orbsvcs/orbsvcs/Makefile.PortableGroup:

          Added IDL compiler command line option to generated AMI code. Also
          added link to TAO Messaging library. These were necessary because some
          of the interfaces in CosLoadBalancing.idl, which already uses AMI,
          inherit from interfaces in PortableGroup.idl, so there must be
          associated reply handlers to inherit as well.

        * TAOACE_Static.dsw:

          Removed some project dependencies that were causing 'already defined'
          link errors.

Mon Nov 25 15:09:50 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* docs/tutorials/Quoter/AMI/Handler_i.cpp:
	* docs/tutorials/Quoter/AMI/Handler_i.h: Fixed compile errors by
	  adding dummy implementations for the base interface methods in
	  interface Stock{}; This should fix compile errors on many
	  platforms.

Mon Nov 25 12:25:47 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Event_Forwarder.idl:
	  Moved up from subdirectory Notify. Dependencies could not be
	  updated correctly due to the idl file in a subdirectory. Thanks
	  to Jaroslaw Nozderko <jaroslaw.nozderko@polkomtel.com.pl> for
	  prompting this correction.

	* orbsvcs/orbsvcs/Makefile:
	* orbsvcs/orbsvcs/CosNotification.dsp:
	* orbsvcs/orbsvcs/CosNotification.bor:
	  Modified to point currectly to Event_Forwarder.idl.

	* Modified the following changelog entries to thank bug reporters:
	  Sun Oct 27 01:04:09 2002  Pradeep Gore  <pradeep@oomworks.com> and
	  Thu Nov 21 18:45:23 2002  Pradeep Gore  <pradeep@oomworks.com>

Mon Nov 25 11:38:37 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/examples/CosEC/RtEC_Based/lib/Makefile: The Makefile was
	  by default generating a static library even in dynamic
	  builds. Fixed the Makefile to work fine.

Sun Nov 24 12:27:27 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:

	  Added check for null result of scoped name lookups in creation of
	  inheritance list for reply handlers. Also added a check for each
	  possible reply handler parent to determine if it is from an included
	  IDL file or not, since the AMI preprocessing visitor does not creeate
	  implied IDL for imported nodes. This check may make the first one
	  redundant, but it is there anyway for added safety. Thanks to Johnny Willemsen
	  <jwillemsen@rememdy.nl> and Craig Rodrigues <crodrigu@bbn.com> for
	  reporting the bug.

Sun Nov 24 00:21:43 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Makefile*: Made another try in updating
	  dependencies again. Thanks to Russ Carter and  Dirk Moermans
	  <dirk.moermans@brutele.be> for pointing out the problem.

Sat Nov 23 10:52:28 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/IIOP_Transport.cpp: Cosmetic fixes to the debugging
	  statements.

Fri Nov 22 15:30:28 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ami_pre_proc.h:

          Fixed the creation of the inheritance list for the implied
          AMI reply handler interface. It now inherits from the
          reply handler of each of the original interface's parents. Thanks
          to Carlos O'Ryan <coryan@atdesk> for pointing out the bug. This closes
          [BUGID:1371].

Fri Nov 22 12:27:27 2002  Craig Rodrigues <crodrigu@bbn.com>

	* orbsvcs/examples/CosEC/RtEC_Based/lib/Makefile:
          Fix extraneous spaces in GNU make findstring commands.

Fri Nov 22 04:53:12 2002  Bala  <bala@cs.wustl.edu>

        * TAO version 1.2.6 released.

Thu Nov 21 18:45:23 2002  Pradeep Gore  <pradeep@oomworks.com>

	* docs/releasenotes/index.html: Updates the section on
	  Notification Service.
	* docs/releasenotes/notify.html: Added a detailed feature matrix
	  of the Cos Notification Service. Thanks to Sharon Caspi
	  <sharonc@scopus.net> for suggesting this.


Thu Nov 21 13:26:27 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.cpp: Avoid checks for reactor consistency
	  if the handler is not registered with the reactor. This should
	  fix most of the runtime problems that we are seeing. This place
	  needs to be reexamined after the beta. The intersection of
	  RTCORBA and nonRT cases simply makes this place too
	  complicated. 

Wed Nov 20 18:04:00 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Muxing/run_test.pl: Checked in a version of the script
	  that I use locally by mistake. Reverted the change to the
	  original form.

Wed Nov 20 18:01:38 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.cpp (close_connection_eh): Did cosmetic
	  changes to the assertive checks.

Wed Nov 20 15:23:40 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/be/be_visitor_operation/ami_cs.cpp
	  (gen_marshal_and_invoke):

	  Initialize the invocation status variable in the generated stub
	  code.  Previously, that variable was uninitialized, which caused
	  some invalid code execution paths to occur.  Fixes some problems
	  exhibited by TAO's basic AMI regression test.

Wed Nov 20 15:15:02 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ClientRequestInfo_i.h (setup_picurrent):

	  New method that sets up the thread scope and request scope
	  PICurrent objects on the client side.

	* tao/ClientRequestInfo_i.cpp (TAO_ClientRequestInfo_i):
	  (setup_current):

	  Refactored duplicate code in both TAO_ClientRequestInfo_i
	  constructors to the new setup_picurrent() method.

	  Only set the TSC's peer if a copy was actually performed.  Fixes
	  a seg fault after calling
	  PortableInterceptor::Current::set_slot() after a client
	  invocation was performed.  Thanks to Philipp Leibfried
	  <pleibfried@speech-design.de> for providing a test case that
	  reproduced this problem.

Wed Nov 20 15:54:10 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:

          Changed an internal variable name in generated code for the
          _downcast() method that was short and ran a high risk of name
          clash with the exception typename.

Wed Nov 20 15:23:13 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.cpp (close_connection_eh): Do not do
	  comparisions checks for reactor pointers in TAO_Transport,
	  TAO_ORB_Core and ACE_Event_handler when the ORB has already
	  shutdown. The comparisons could be wrong since the thread that
	  is closing it may not have the right access to all the resources
	  opened up by other threads (read RTCORBA threads).
	  
Wed Nov 20 16:14:31 2002  Irfan Pyarali  <irfan@oomworks.com>

	* orbsvcs/Notify_Service/Notify_Service.cpp: Added
	  ../orbsvcs/Notify/Notify_Service.h so that the static
	  initializer can run and add the service objects to the service
	  repository.  Thanks to Bala for helping with this.

Wed Nov 20 12:48:35 2002  Irfan Pyarali  <irfan@oomworks.com>

	* orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile.bor:

	  Fixed test name from RedGreen to RedGreen_Test.

	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp

	  Fixed release executable name.
	
Wed Nov 20 10:26:58 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/CosNotification_Static.dsp: Fixed path to some
	  idl files in the project.

Tue Nov 19 22:32:30 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Acceptor_Registry.cpp (is_collocated):

	  Fixed problem where only the first endpoint in an endpoint chain
	  was used when determining if an acceptor is collocated despite
	  the fact the endpoint chain was "walked" when making this
	  determination.

Tue Nov 19 15:16:56 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Filter_Consumer.bor:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Filter_Supplier.bor:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.bor:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.bor:
	  Updated executable file names.

	* orbsvcs/tests/Notify/Basic/run_test.pl:
	  Modified to accept conf files are parameters.

	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
	  Fixed problems with the test not exiting gracefully.
	
	* orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
  	  Modified the <create> method to add missing initialization of	
	  TAO_NS_Notify_Service. Thanks to Steve Totten<totten_s@ociweb.com>
	  for providing the OCI test example and Irfan for showing how to
	  use <_tao_poa_downcast>.
	
	* orbsvcs/Notify_Service/Notify_Service.dsp: Release executable
	  should go in the Release directory.
	
Tue Nov 19 15:16:56 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Filter_Consumer.bor:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Filter_Supplier.bor:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.bor:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.bor:
	  Updated executable file names.

	* orbsvcs/tests/Notify/Basic/run_test.pl:
	  Modified to accept conf files are parameters. 

	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
	  Fixed problems with the test not exiting gracefully.
	
	* orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
 	  Modified the <create> method to add missing initialization of	
	  TAO_NS_Notify_Service. Thanks to Steve Totten<totten_s@ociweb.com>
	  for providing the OCI test example and Irfan for showing how to
	  use <_tao_poa_downcast>. 
	
	* orbsvcs\Notify_Service\Notify_Service.dsp: Release executable
	  should go in the Release directory.

Tue Nov 19 11:02:00 2002  Pradeep Gore  <pradeep@oomworks.com>

	* Added explaination for each class in 
	  ChangeLogTag: Sun Oct 27 01:04:09 2002  Pradeep Gore
	  <pradeep@oomworks.com> 
 
Mon Nov 18 20:45:12 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Blocking/notify.conf:
	  As per Bala's suggestion, applied "-ORBClientConnectionHandler
	  RW" hoping to make the blocking work.  Alas, the buffering
	  design needs a facelift. 
	
 	* orbsvcs/tests/Notify/Ordering/run_test.pl
	  - Increased allowable period for consumers to run so that test
	    doesn't timeout before hand.
	  - Commented out priority policy temporarily till the sequences
	    implementation of priority ordering is completed.
	
 	* orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.cpp:
	  Removed the MaxEventsPerConsumer policy applied to the
	  proxy. That isn't what the test was supposed to excercise.
	
 	* orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.cpp
	  Changed OR_OP to AND_OP otherwise the Consumer Admin filter will
	  always be true and no events would be rejected.	

Mon Nov 18 17:54:41 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Transport.cpp: Cosmetic changes.

Mon Nov 18 14:50:31 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be/be_global.cpp:

          Added storage and accessors for the AST node
          Components::CCMObject, which is looked up and stored
          if there is at least one component in the IDL file.

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:

          Added the operations of Components::CCMObject to the operation
          table and *_skel method generation for component equivalent 
          interfaces. Thanks to Nanbor <nanbor@cse.wustl.edu> for uncovering
          this bug.

        * TAO_IDL/be/be_visitor_component/component_sh.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_sh.h:

          Added conditional generation of AMH classes for component 
          equivalent interfaces.

        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:

          Added base component equivalent interface (if any) to the generated
          inheritance list for component equivalent interfaces.

Mon Nov 18 12:11:53 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/CosNotification_Static.dsp:
         
          Fixed settings for the IDL files in this project.

Mon Nov 18 13:01:42 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
	Commented decrement of <queue_length_> in the svc method.
	This needs to be corrected but at this point all the tests crash
	because of this, so its being taken out temporarily.
	
Mon Nov 18 11:04:35 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/performance-tests/RedGreen/run_test.pl:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:
	Appended Structured_ suffix to executable name. 
	* orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
	Reverted thread creation flags.
	
Mon Nov 18 07:32:10 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Notify/Event.h: Work around for a weird BCB6
	  compiler bug. Thanks to Chris Kohlhoff for helping me with this.

Mon Nov 18 07:28:16 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Portable_Interceptors/AMI/Makefile: Prevent the contents
	  from being compiled when AMI is disabled.

Sun Nov 17 17:32:47 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/CosNotification_Static.dsp: Updated dsp file.

Sun Nov 17 12:57:10 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/CosNotification_Static.dsp:
	  Updated.
	* orbsvcs/orbsvcs/Notify/Structured/RTCORBA_*:
	  Removed extraneous files.

Sun Nov 17 12:05:20 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Portable_Interceptors/Makefile.bor: Added AMI test to the
	  list of tests that needs compilation. Thanks to Johnny for
	  pointing this out.

Sun Nov 17 09:37:08 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Makefile*: Updated dependencies again.

Sat Nov 16 21:09:32 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Portable_Interceptors/Makefile: Added AMI test to the list
	  of tests that needs compilation.

Sat Nov 16 20:43:21 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* */Makefile: Updated dependency.

Sat Nov 16 20:11:13 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
	  - Modified threadpool creation flags to ACE_Task::activate. 
	  - Corrected decrement of <queue_length_>. 

Fri Nov 15 15:29:24 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Basic/run_test.pl:
	  Modified to run the basic tests with a reactive and
	  multithreaded Notification.
	
	* orbsvcs/tests/Notify/Basic/notify.mt.conf:
	  Added MT conf for the Basic test.
	
	* orbsvcs/tests/Notify/Basic/notify.reactive.conf:	
	  Added reactive conf for the Basic test.

	* orbsvcs/tests/Notify/Blocking/notify.conf:
	* orbsvcs/tests/Notify/Discarding/notify.conf:
	* orbsvcs/tests/Notify/MT_Dispatching/notify_mtdispatching.conf:
	* orbsvcs/tests/Notify/Ordering/notify.conf:
	* orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/notify.conf:
	* orbsvcs/tests/Notify/Sequence_Multi_Filter/notify.conf
	* orbsvcs/tests/Notify/performance-tests/Filter/notify.conf
	* orbsvcs/tests/Notify/performance-tests/RedGreen/listener.conf
	* orbsvcs/tests/Notify/performance-tests/RedGreen/lookup.conf
	* orbsvcs/tests/Notify/performance-tests/RedGreen/reactive.conf
	* orbsvcs/logging_service/notify_logging_service/svc.conf:
	* orbsvcs/Notify_Service/svc.conf: Reverted factory back to
	  Notify_Default_Event_Manager_Objects_Factory. I have decided not
	  to introduce any changes for Notify Options in TAO 1.3. Better
	  replacements will be introduced gradually in subsequent
	  releases.

	* orbsvcs/Notify_Service/Notify_Server.cpp:
 	  Not handling signals. The shutdown code and event handler is
	  maintained in case we want to address this in the future. 

	* orbsvcs/tests/Notify/performance-tests/RedGreen/run_test.pl:
	  - Modified to run all 3 test cases described in the README.   	    
	* orbsvcs/tests/Notify/Discarding/Notify_Structured_Push_Consumer.cpp:
	  Changed hardcoded "10" to the expected number of events that can 
	  be specified on the command line.
	
	* orbsvcs/tests/Notify/Discarding/Sequence_Consumer.cpp:	  
	  - Changed low=2 and high=20. Here is the explanation:
	  The Supplier sends 96 events as 6 batches of 16 events.
	  The Notification is run with 1 dispatching thread. The Discarding
	  Policy is set and the MaxEventsPerConsumer is set to 2 (Event
	  Batches).The Batch size is 5 so the maximum batches that can be
	  received is 20 (19 batches with 5 events each and 1 batch with 1
	  event).if we receive 20 batches then the channel
	  hasn't discarded anything. so high = 20. In the worst case the
	  consumer starts *after* the supplier has send all the events to
	  the Notification. This means that only 2 batches are queued and
	  all others are discarded. Hence low = 2.
	
	  - Changed the sleep time that the consumer was polling fior
	  excess events, from 3 to 1 sec. otherwise the perl script was
	  timing out.

	* orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.h:
	* orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.cpp:
	* orbsvcs/tests/Notify/Ordering/Sequence_Consumer.cpp:	    
	  Removed high-low logic. There is *no* discarding policy set so
	  the Sequence Consumer should received the expected number of 96 events.

	* orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.cpp:
	  - Changed ConsumerAdmin interfilter operator to AND_OP. With an
	  OR_OP, all the filters would return true! this is because the
	  filters of the Admin and Proxy, both are combined to determine event
	  eligibility. Note that this test success/failure has to be
	  determined visually.

	* orbsvcs/tests/Notify/listener.conf:
 	* orbsvcs/tests/Notify/lookup.conf:
 	* orbsvcs/tests/Notify/reactive.conf:
	  Reverted to Notify_Default_Event_Manager_Objects_Factory for
	  backward compatibility.
	
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Multi_Filter_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Multi_Filter_Supplier.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/run_test.pl:
	  Reverted executable name to Structured_* prefix.

	* orbsvcs/orbsvcs/Notify/Buffering_Strategy.cpp:
	  Discarding condition should be executed when buffering limit has
	  reached. Current logic was enqueing 1 extra event.
	
	* orbsvcs/orbsvcs/Notify/Builder.cpp:
	  Added call to set default startup QoS options on the Proxys and Admins.  
	
	* orbsvcs/orbsvcs/Notify/Notify_Service.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Service.h:
	  - Added support for configuring startup threads at the proxy and
	    Admin level while maintaining backward compatibility.
	  - Modified updates logic - Updates are send synchronously by
	  default. If the -AsynchUpdates option is set, updates are queued along
	  with the regular events in the Proxy objects worker task.
	
	* orbsvcs/orbsvcs/Notify/Properties.h:
	* orbsvcs/orbsvcs/Notify/Properties.inl:
	  Added get/set methods for Proxy and Admin level default QoS.
	  Changed <updates> to <asynch_updates> flag.		
	
	* orbsvcs/orbsvcs/Notify/Property_T.h:
	* orbsvcs/orbsvcs/Notify/Property_T.inl:
	- Added assignment operator to TAO_NS_Property_T.
	- Added an <invalidate> method to TAO_NS_PropertyBase_T
	
	* orbsvcs/orbsvcs/Notify/Proxy.cpp:
	- Send updates synchronously unless default properties mandate
	  asynchrony. In that case the event is executed in the current
	  thread context. 
	
	* orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
	* orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
	  Added dummy methods and ACE_ASSERT in them if called.
	
	* orbsvcs/orbsvcs/Notify/Sequence/EventBatch.h:
	* orbsvcs/orbsvcs/Notify/Sequence/EventBatch.inl:
	  Added an accessor for the current size of the EventBatch.
	  Note that this size can be greater than the batchsize.		 
	
	* orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:
	* orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
	  Overloaded ProxyPushSupplier::push method.
	  The overloaded implementation executes the filtering and
	  dispatch in the current thread context. Now, this dispatch
	  doesn't immediately go remote but is stored in an event batch
	  waiting for the pacing interval to expire after which the
	  batchsize events are queued in the SequenceProxy's worker thread
	  to be finally dispatched to the remote consumer.

	* orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
	  Removed <dispatch_immediate> and <cancel_timer> methods.
	  There was no need for these seperate methods.
	
	* orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
	  Modified the implementation so that the Pacing Timer is deployed
	  only if there is atleast 1 event queued to send, otherwise the
	  existing timer is removed. This will avoid needless timeouts. 

Sat Nov 16 08:22:38 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
	* orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h: Fixed typos that
	  lead to link errors.

	* tao/Asynch_Queued_Message.cpp: Fixed a warning in the daily
	  builds.  
	
Sat Nov 16 12:43:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.bor:
          Fixes error in this BCB makefile.

Fri Nov 15 18:29:28 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.cpp (next_member):
	  (_tao_next_member):

	  Refactored random member selection code into a TAO-specific
	  static method.  This is possible since this random load
	  balancing strategy implementation is stateless.  This allows
	  other strategies to reuse the random member selection code
	  without instantiating the TAO_LB_Random class.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp (next_member):

          No loads have been reported for any of the locations the object
	  group members reside at.  If no loads have been reported to the
	  LoadManager, adaptive load balancing decisions cannot be made.
	  Fall back on a non-adaptive strategy, such as the Random load
	  balancing strategy, instead.  The Random load balancing strategy
	  is used since it is very lightweight and stateless.

Fri Nov 15 15:26:29 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Basic.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/client.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.cpp:

	  Corrected ACE_RCSID macros.  They listed the wrong directory.

Fri Nov 15 15:13:20 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Signal_Handler.cpp (activate):

	  sigwait() is not supported on MS Windows, meaning that signals
	  cannot be handled synchronously with the current implementation
	  of this signal handler.  Handle signals asynchronously through
	  the ORB's reactor instead.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp (init):

	  Fixed buffer overrun problem that was causing an unhandled
	  exception to be thrown on MS Windows.  The hexidecimal
	  representation of the time in milliseconds was supposed to be
	  embedded in a string buffer of 8 characters.  The decimal
	  representation, which is greater than 8 characters long, was
	  being embedded into the string instead.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.cpp:

	  Cosmetic and spelling fixes/updates.

	* orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.h:

	  CORBA::SystemException, not CORBA_SystemException.

Fri Nov 15 16:59:49 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
	* orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h: Fixed warnings
	  in Borland build.

Fri Nov 15 15:22:54 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:

          Added check to skip implied IDL generation for imported nodes.
          Thanks once again to Nanbor <nanbor@cse.wustl.edu> for his
          testing of the new CCM-related IDL features.

Fri Nov 15 14:51:31 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Asynch_Queued_Message.cpp:
	* tao/Asynch_Queued_Message.h:
	* tao/Synch_Queued_Message.cpp:
	* tao/Synch_Queued_Message.h:
	* tao/Queued_Message.cpp:
	* tao/Queued_Message.h: Added an extra default argument to the
	  constructor that indicates whether the class is heap allocated
	  or not.

	* tao/Transport.cpp: Changed the places where the
	  Asynch_Queued_Message was allocated on the heap to pass the
	  right value for the flag that indicates the status of creation
	  of the class.

	  Thanks to Chad Elliott for pinting out that if the
	  Asynch_Queued_Message was allocated on the heap, it may not get
	  destroyed if TAO_Asynch_Queued_Message::destroy () was
	  called.

Fri Nov 15 20:52:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/Event_Map_T.h:
          Added missing include to fix BCB compile error.

        * tests/Bug_1020_Basic_Regression/*.bor:
        * tests/Bug_1020_Regression/*.bor:
        * tests/Bug_1269_Regression/*.bor:
        * tests/Bug_1270_Regression/*.bor:
          Added new BCB makefiles to build these tests

        * tests/Makefile.bor:
          Added new tests for which there are now BCB makefiles.

Fri Nov 15 11:06:07 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing_Static.dsp:

	  Added LB_Client_{Component,ORBInitalizer}.{h,cpp} files to these
	  project files.

Fri Nov 15 10:51:04 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_cs.cpp:

          Changed the signature of the global <flat name>_upcast() method for
          components, used by sequences containing forward declared
          components. Thanks again to Nanbor <nanbor@cse.wustl.edu> for
          confirming my suspicion.

Fri Nov 15 09:29:31 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:

          Fixed up some omissions and signatures in generated code. Thanks to
          Nanbor <nanbor@cse.wustl.edu> for uncovering them.

Thu Nov 14 19:45:18 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/DsLogAdmin.dsp: Added required paths to the
	  libraries.

Thu Nov 14 16:40:06 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadMonitor.cpp (usage):
	* orbsvcs/LoadBalancer/LoadManager.cpp (usage):

	  Clarified usage message.

	  (parse_args):

	  If the "-h" command line option was supplied, print the usage
	  message and exit immediately.  Previously, the usage message was
	  printed but the executable never exited.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ClientComponent.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_ClientComponent.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_ClientORBInitializer.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_ClientORBInitializer.cpp:

	  New sources that transparently add adaptive load balancing
	  support to a client.  They are used to transparently register
	  the existing LB_ClientRequestInterceptor.  This part of a set of
	  changes that enable the adaptive load balancing support in
	  Cygnus, i.e. TAO's new load balancer.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp (get_location):

	  Fixed problem where CosLoadBalancing::LocationNotFound exception
	  was propagated to the client, and interpreted as a
	  CORBA::UNKNOWN exception.  If loads at the supplied location
	  are not available continue the loop and attempt to retrieve
	  loads from the next location.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp
	  (built_in_strategy):

	  Corrected debugging statement.

Thu Nov 14 16:35:45 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Makefile: Added new tests to the daily builds.

Thu Nov 14 16:28:13 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1269_Regression/run_test.pl:
	* tests/Bug_1270_Regression/run_test.pl: Reduced the runtime
	  further to 4 minutes. 7 minutes is too high to blow away the
	  stack on machines like charanga!

Thu Nov 14 16:21:58 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1270_Regression/run_test.pl: Reduced the runtime from
	  70 minutes to 7 minutes. This will make them usable in the daily
	  builds.

Thu Nov 14 13:47:10 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/be/be_visitor_operation/ami_cs.cpp
	  (gen_marshal_and_invoke):

	  Fixed "empty controlled statment" warning that occurred due to
	  an ACE_ASSERT disappearing when NDEBUG is defined.  That
	  ACE_ASSERT is to be executed when a oneway operation check
	  evaluates to true.  When NDEBUG is defined, there is nothing to
	  execute if that condition is true.  Moved the condition check
	  inside the ACE_ASSERT.  This is safe since no other code is
	  meant to be run if the oneway operation check/condition is
	  true, i.e. there are no side-effects.

Thu Nov 14 14:33:21 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Transport.h:
	* tao/Transport.cpp: Changed the semantics of one of the arguments
	  in the call close_connection_shared (). The argument was called
	  "disable_purge" and was used in exactly the opposite manner. The
	  condition that was used to purge the entry from the cache was
	  also topsy-turvy.

	  This was fixed the following way

	    - the argument is now called "purge".
	    - a value of 1 will purge the entry from the cache manager and
	      a value of 0 otherwise.

	  This should fix the failure of the Crash_On_Write test in our
	  daily builds.

Thu Nov 14 14:04:27 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/AV.dsp:

          Added missing dependency to project.

        * orbsvcs/orbsvcs/DsLogAdmin.dsp:

          Added missing link paths to release version.

Thu Nov 14 10:55:01 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/AMI/Server_Interceptor.cpp
	  (send_reply, send_exception):

	  Fixed unused argument warning in emulated exceptions case.

Thu Nov 14 10:04:52 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/AMI/client.cpp (test_ami):
	  (test_ami_errors):

	  Use a PortableServer::ServantBase_var instead of a
	  TAO::Utils::Servant_var.  MSVC++ 6 can't handle the member
	  templates in the latter.

Thu Nov 14 11:48:31 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/CosNotification.bor: Added a wild card character
	  to the list of files to be compiled.

Thu Nov 14 09:43:40 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/AMI/server.dsp:

	  Corrected library path for the TAO_Messaging library.

Wed Nov 13 17:18:35 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.cpp: Release the OS resources only when
	  the reference count reaches zero. There may be lot of
	  furore over this decision. But doing this would help to
	  circumvent BUG 1294 and BUG 1361. The solution in BUG 1294, is
	  not scalable to situations explained in BUG 1361 which leads to
	  crashes. The only way to circumvent that is to release the OS
	  resources at the end of the lifetime of the handler.

	  Not exactly sure how I missed this yesterday.

Wed Nov 13 14:15:33 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Accept_Strategy.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Accept_Strategy.cpp:

	  New TAO_SSLIOP-specific TAO_Accept_Strategy implementation.
	  This accept strategy builds on on the TAO_Accept_Strategy
	  implementation.  It sub-classes that class, and overrides the
	  accept_svc_handler() method so that a timeout value may be
	  passed to the underlying peer acceptor.  This is necessary to
	  defend against a simple Denial-of-Service attack.  See the
	  comments in the header for details.  [Bug 1348]

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

	  Added new "-SSLAcceptTimeout" option.  This option allows
	  applications to override the default 10 second TAO_SSLIOP
	  accept() timeout.

	  (make_acceptor):

	  Pass the timeout value to the SSLIOP_Acceptor's constructor.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.h:

	  Updated use the new TAO_SSLIOP_Accept_Strategy implementation
	  instead of the generic one supplied by TAO.  [Bug 1348]

	  Cache the accept timeout value in a member variable.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp
	  (TAO_SSLIOP_Acceptor):

	  Initialize the accept timeout member from the value passed to
	  this constructor from the SSLIOP_Factory.

	  (ssliop_open_i):

	  Pass the accept timeout value to the
	  TAO_SSLIOP_Accept_Strategy's constructor.  [Bug 1348]

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

	  Only register the connection handler with the reactor when
	  creating a new connection.  Previously, the connection handler
	  was registered each time an invocation was made even if a
	  connection was previously established.

	* orbsvcs/tests/Security/Secure_Invocation/client.bor (TAO_IDL):
	* orbsvcs/tests/Security/Secure_Invocation/server.bor (TAO_IDL):

	  Removed "-GC" option from the TAO_IDL flags.  This test does not
	  require AMI callbacks.

Wed Nov 13 14:30:44 2002  Pradeep Gore  <pradeep@oomworks.com>

	* Repeated ChangeLogTag: Tue Nov 12 12:37:18 2002  Pradeep Gore
	  <pradeep@oomworks.com> 
	* orbsvcs/orbsvcs/CosNotification.dsp:
	  Updated.
	* Repeated only the removal of files as per ChangeLogTag: Mon Nov
	  11 20:11:56 2002  Pradeep Gore  <pradeep@oomworks.com> 

	* orbsvcs/orbsvcs/Notify/Object.h:
	* orbsvcs/orbsvcs/Notify/Object.cpp:
	  Added missing call to update_qos_properties
	* orbsvcs/orbsvcs/Notify/Proxy.h:
	* orbsvcs/orbsvcs/Notify/Proxy.cpp:
	* orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp
	* orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h
	  Changed signature of <qos_changed> method to accept
	  QoSProperties.
	* orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
 	* orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
	  Rearranged code to avoid deadlock in <connect> methods.

Wed Nov 13 10:41:50 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/Log/NotifyLogNotification.h:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.h:

	  Checked in these files again after yesterday's update loss.

Wed Nov 13 06:27:48 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp: Fixed a compile
	  error.

Tue Nov 12 14:34:37 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/IIOP_Connector.cpp:
	* tao/Strategies/UIOP_Connector.cpp:
	* tao/Strategies/SHMIOP_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp: Fixed unused
	  variable warnings in builds compiled with ACE_NDEBUG option
	  turned on. This makes the ACE_ASSERT dissappear.

Tue Nov 12 13:25:00 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/LF_CH_Event.cpp: Fixed compile error in no inline builds.

Tue Nov 12 13:13:05 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp: Added the new files.

Tue Nov 12 12:54:39 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/LF_Invocation_Event.inl: Fixed a typo.

Tue Nov 12 12:47:31 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	Fix for [BUG 1020]. Please see details of the bug at

	http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1020

        Please see the discussions in the above URL for details on
        the motivations for these changes. A very brief summary of the
        changes alone are mentioned.

	* tao/Transport.cpp(close_connection_shared): Wait on the
          leader follower if the handle is registered with the
          reactor.

        * tao/LF_Event.h:
        * tao/LF_Event.cpp:
        * tao/LF_Event.inl: Made the class TAO_LF_Event as an abstract
          base class. This helps us to strategize the type of
          behaviour required in different concrete classes which can
          in turn be used by other portions of the ORB to wait on LF.

	* tao/LF_Invocation_Event.h:
	* tao/LF_Invocation_Event.cpp:
	* tao/LF_Invocation_Event.inl: Concrete implementation of a
	  LF_Event class, where the state transitions along the invocation
	  path are consolidated.

	* tao/LF_CH_Event.h:
	* tao/LF_CH_Event.cpp: Concrete implementation of a LF_Event
	  class, where the state transitions of the connection handler are
	  consolidated.

	* tao/Queued_Message.h:
	* tao/Synch_Reply_Dispatcher.h: They now inherit from
	  TAO_LF_Invocation_Event class.

	* tao/Connection_Handler.h: This class inherits now from the
	  TAO_LF_CH_Event class.

	* tao/Makefile.bor:
	* tao/Makefile.tao: Added the new files to the list of compilable
	  files.

Tue Nov 12 12:37:18 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile:
	* orbsvcs/examples/Log/Notify/Makefile:
	  Updated dependencies.

	* orbsvcs/examples/Log/Notify/Notify_Consumer.h:
	  Removed the include of
	  orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h, which no longer exists.

Tue Nov 12 11:15:50 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/IIOP_Connector.cpp:
	* tao/Strategies/UIOP_Connector.cpp:
	* tao/Strategies/SHMIOP_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp: Added an assert
	  statement after decrementing the reference count. Point taken
	  from "Pragmatic Programmer".

Tue Nov 12 11:08:32 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.h: Commented out the following calls
	  incr_pending_upcalls (), decr_pending_upcalls () and
	  pending_upcalls (), since there was no implementation and they
	  were not at all used.

	* tao/Connection_Handler.cpp: Cosmetic changes.

Tue Nov 12 10:17:05 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/Log/NotifyLogNotification.h:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.h:

	  Removed the include of
	  orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h, which no longer exists.

Tue Nov 12 13:31:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
          Made the argument of addressing_mode() same as in header file so that
          doxygen documentation is generated for this method.

Mon Nov 11 23:04:34 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Application_Controlled.dsw:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/client.dsp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.dsp:

	  New MSVC++ 6 project files for this test.

Mon Nov 11 22:33:37 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Makefile (TAO_LB_LIBS):

	  Corrected order of libraries linked to the server binary.

	  (client):

	  Do not link server-side libraries.  They are completely
	  unnecessary for this client binary.

	* orbsvcs/tests/Makefile.bor (DIRS):

	  Added "LoadBalancing" directory to the list of directories to
	  recurse into.

	* orbsvcs/tests/LoadBalancing/Makefile.bor:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Makefile.bor:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Makefile.bor:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/client.bor:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.bor:

	  New Borland C++ Makefiles for this test.

Mon Nov 11 20:31:18 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager.cpp (TAO_LB_run_load_manager):
	* orbsvcs/LoadBalancer/LoadMonitor.cpp (TAO_LB_run_load_monitor):

	  New global function that is run when the Load{Manager,Monitor}'s
	  ORB thread is run.  It is only used on Linux when multi-thread
	  support is enabled.  This is part of a work-around for the
	  problem where signals can only be handled in the main() thread
	  on Linux.

	  (ACE_TMAIN):

	  Spawn a new thread to run the LoadManager's ORB, and handle
	  signals in this (main()) thread.  This is the second part of a
	  work-around for the problem where signals can only be handled in
	  the main() thread on Linux.

	  Moved signal handler activation to just before the point where
	  the ORB is run.  There is no need to activate the signal handler
	  earlier than there.

Mon Nov 11 19:22:05 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.h:

	  Explicitly include "ace/Hash_Map_Manager_T.h" to pull in
	  ACE_Hash_Map_Manager_Ex template.

Mon Nov 11 19:15:42 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/AMI/AMI.dsw:
	* tests/Portable_Interceptors/AMI/client.dsp:
	* tests/Portable_Interceptors/AMI/server.dsp:

	  New MSVC++ project files for this test.

Mon Nov 11 18:03:37 2002  Ossama Othman  <ossama@uci.edu>

	* docs/interceptors.html:

	  Updated release notes about AMI interceptor support.

	  Updated CORBA spec URL to the 3.0.1 spec's URL.

	* tao/Messaging/Makefile.bor:
	* tao/Messaging/TAO_Messaging.dsp:
	* tao/Messaging/TAO_Messaging_Static.dsp:

	  Added AMI_ClientRequestInfo_i.{h,cpp} to these Make/project
	  files.

Mon Nov 11 17:27:22 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/Messaging/AMI_ClientRequestInfo_i.h:
	* tao/Messaging/AMI_ClientRequestInfo_i.cpp:
	* tao/Messaging/Makefile:
	  Add implementation class for AMI ClientRequestInfos.  [Bug 286]

	* TAO_IDL/be/be_codegen.cpp:
	  Move some #includes to the .cpp file, include
	  AMI_ClientRequestInfo_i.h when compiling with interceptors and
	  AMI.    [Bug 286]

	* TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
	  Generate interceptor code for sendc_*** operations.  [Bug 286]

	* tests/Portable_Interceptors/Makefile:
	* tests/Portable_Interceptors/AMI/Makefile:
	* tests/Portable_Interceptors/AMI/run_test.pl:
	* tests/Portable_Interceptors/AMI/.cvsignore:
	* tests/Portable_Interceptors/AMI/Client_Interceptor.h:
	* tests/Portable_Interceptors/AMI/Client_Interceptor.cpp:
	* tests/Portable_Interceptors/AMI/Client_ORBInitializer.h:
	* tests/Portable_Interceptors/AMI/Client_ORBInitializer.cpp:
	* tests/Portable_Interceptors/AMI/Echo.h:
	* tests/Portable_Interceptors/AMI/Echo.cpp:
	* tests/Portable_Interceptors/AMI/Echo_Handler.h:
	* tests/Portable_Interceptors/AMI/Echo_Handler.cpp:
	* tests/Portable_Interceptors/AMI/Server_Interceptor.h:
	* tests/Portable_Interceptors/AMI/Server_Interceptor.cpp:
	* tests/Portable_Interceptors/AMI/Server_ORBInitializer.h:
	* tests/Portable_Interceptors/AMI/Server_ORBInitializer.cpp:
	* tests/Portable_Interceptors/AMI/Shared_Interceptor.h:
	* tests/Portable_Interceptors/AMI/Test.idl:
	* tests/Portable_Interceptors/AMI/client.cpp:
	* tests/Portable_Interceptors/AMI/server.cpp:
	  New regression test for the AMI interceptors.

Mon Nov 11 20:11:56 2002  Pradeep Gore  <pradeep@oomworks.com>

	Removed these files as they are no longer needed. All features and
	bug fixes have been absorbed in the new implementation as per
	ChangeLogTag: Sun Oct 27 01:04:09 2002  Pradeep Gore  <pradeep@oomworks.com>
	* orbsvcs/orbsvcs/Notify/Notify_AdminProperties.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_AdminProperties.h:
	* orbsvcs/orbsvcs/Notify/Notify_AdminProperties.i:
	* orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
	* orbsvcs/orbsvcs/Notify/Notify_Channel_Objects_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Collection.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Collection.h:
	* orbsvcs/orbsvcs/Notify/Notify_Collection_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Command.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Command.i:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event.i:
	* orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Dispatch_Command.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Dispatch_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Manager.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Manager.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Manager.i:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Manager_Objects_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Map.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Map.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Map.i:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Processor.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Processor.h:
	* orbsvcs/orbsvcs/Notify/Notify_Factory.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_FilterFactory_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_FilterFactory_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.i:
	* orbsvcs/orbsvcs/Notify/Notify_Listener_Filter_Eval_Command.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Listener_Filter_Eval_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Listeners.h:
	* orbsvcs/orbsvcs/Notify/Notify_Lookup_Command.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Lookup_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.h:
	* orbsvcs/orbsvcs/Notify/Notify_POA_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyPushConsumer_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyPushSupplier_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyPushSupplier_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_Proxy_T.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Proxy_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.inl:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Source_Filter_Eval_Command.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Source_Filter_Eval_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.h:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredProxyPushConsumer_i.cpp:
	  Removed.

	* orbsvcs/orbsvcs/Notify/Dispatch_Observer_T.cpp:
 	* orbsvcs/orbsvcs/Notify/Dispatch_Observer_T.h:
 	* orbsvcs/orbsvcs/Notify/Dispatch_Observer_T.inl:
	  Removed Dispatch Observer as error handling has moved to TAO_NS_Peer.

	* orbsvcs/orbsvcs/Notify/Event_Map_Observer.h:
 	* orbsvcs/orbsvcs/Notify/Event_Map_Observer_T.cpp:
 	* orbsvcs/orbsvcs/Notify/Event_Map_Observer_T.h:
 	* orbsvcs/orbsvcs/Notify/Event_Map_Observer_T.inl:
	  Removed Event_Map_Observer as Map changes are conveyed via
	  return values in Event_Map_T <insert> and <remove> methods.

	* orbsvcs/orbsvcs/Notify/Pending_Worker_T.cpp:
 	* orbsvcs/orbsvcs/Notify/Pending_Worker_T.h:
 	* orbsvcs/orbsvcs/Notify/Pending_Worker_T.inl:
	  Removed Pending_Worker as we have decided not to implement
	  retries for now.

	* orbsvcs/orbsvcs/Notify/Builder.cpp:
	  Removed code depending on Dispatch_Observer.

	* orbsvcs/orbsvcs/Notify/Consumer.h:
 	* orbsvcs/orbsvcs/Notify/Consumer.cpp:
	* orbsvcs/orbsvcs/Notify/Consumer.inl:
	  Added <dispatch_updates_i> method that invokes offer_change.
	  Modified <push> implementation to catch exceptions and inform
	  the base Peer class to handle exceptions while dispatching.
	  Removed code that depended the Dispatch_Observer.

	* orbsvcs/orbsvcs/Notify/EventType.h:
	* orbsvcs/orbsvcs/Notify/EventType.cpp: 
	  Added a <dump> debugging helper method that prints the contents
	  of the event type. 

	* orbsvcs/orbsvcs/Notify/EventTypeSeq.h:
	* orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
	  - Added a <dump> debugging helper method that prints the contents
	  of the event sequence.
	  - Added a <populate_no_special> method that populates a
	  CosNotification::EventTypeSeq but excludes the special event
	  type.
	  - Added an <intersection> method that calculates the common
	  elements of two sequences.
	  - Modified the <init> method to correctly handle cases with
	  duplicates in the added and/or removed list.

	* orbsvcs/orbsvcs/Notify/Event_Manager.h:
	* orbsvcs/orbsvcs/Notify/Event_Manager.cpp:
	* orbsvcs/orbsvcs/Notify/Event_Manager.inl:
	  - Removed code related to : Event_Map_Observer,
	  Dispatch_Observer, Pending_Worker, Update_Removed_Worker and
	  Update_Added_Worker.
	  - Modified the <un_/publish>, <un_/subscribe> methods to return
	  the list of eventypes that are being seen for the first or last
	  time.
	  - Added <offer_change> and <subscription_change> methods to
	  handle update changes.
	  - Added <offered_types> and <subscription_types> that return the
	  current available types from the Consumer and Supplier Maps.
	  - Added worker classes TAO_NS_ProxyConsumer_Update_Worker and
	  TAO_NS_ProxySupplier_Update_Worker classes that inform proxys
	  regarding update changes.
	- Added <connect> and <disconnect> methods that we delegate to the
	  appropriate Event_Map and inform the newly connected Proxy of
	  types that are avialable in the channel.

	* orbsvcs/orbsvcs/Notify/Event_Map_T.cpp:
	* orbsvcs/orbsvcs/Notify/Event_Map_T.h:
	* orbsvcs/orbsvcs/Notify/Event_Map_T.inl:
	  - Added <connect> and <disconnect> methods that add  the proxy
	  to an updates list. This list is used to disseminate the
	  subscription/offer update changes.
	  - Added accessor method for the updates list and count of proxys
	  connected to this map.
	 - Removed code relating to Event_Map_Observer.
	 - The <insert> and <remove> methods now return 1 if the type
	  being inserted or removed is the first time/ last time.

	* orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp:
	  - Added checks for nil pointers and modified exception handling
	  code to be simpler.

	* orbsvcs/orbsvcs/Notify/Peer.cpp:
	* orbsvcs/orbsvcs/Notify/Peer.h:
	* orbsvcs/orbsvcs/Notify/Peer.inl:
	  - Added a <dispatch_updates> method that formats the event types
	  for final dispatch.
	  - Added a <handle_dispatch_exception> method that simply
	  destroys the offending Peer.
	  - Modified <dispatch_updates_i> to accept
	  CosNotification::EventTypeSeq's.
	- Removed <updates_dispatch_observer_> data member and code
	  related to it.
	- Removed <retry_count_> data member and retry related code.

	* orbsvcs/orbsvcs/Notify/Proxy.cpp:
	* orbsvcs/orbsvcs/Notify/Proxy.h:
	  - Removed added_, removed_ data members, <type_added> and
	  <type_removed> code because subscription/offer_change handling
	  logic has been simplified.
	  - Added <types_changed> method that enqueues a
	  TAO_NS_Method_Request_Updates object in the Proxys worker task queue.
	  - Renamed the <admin_subscription> to
	  <admin_types_changed>. This seems more appropriate.

	* orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
	* orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
	   - Added calls to <connect>, <disconnect> and <offer_change>
	  instead of calling <publish> and <un_publish>

	* orbsvcs/orbsvcs/Notify/ProxyConsumer.ProxyConsumer_T.cpp:
	* orbsvcs/orbsvcs/Notify/ProxyConsumer.ProxyConsumer_T.h:
	  - Renaming to <admin_types_changed>
	  - Call <offer_change> instead of calling <publish> and <un_publish>

	* orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
	  - Calling <subscription_change> instead of <subscribe> and
	  <un_subscribe>.
	  - Added calls to <connect> and <disconnect>

	* orbsvcs/orbsvcs/Notify/ProxySupplier_T.cpp:
	* orbsvcs/orbsvcs/Notify/ProxySupplier_T.h:
	- Calling <subscription_change> instead of <subscribe> and
	  <un_subscribe>.
	- Renamed <admin_subscription> to <admin_types_changed>

	* orbsvcs/orbsvcs/Notify/Refcountable.cpp:
	- Print messages at debug level 1.

	* orbsvcs/orbsvcs/Notify/Subscription_Change_Worker.inl:
	- Renamed <admin_subscription> to <admin_types_changed>

 	* orbsvcs/orbsvcs/Notify/Supplier.cpp:
 	* orbsvcs/orbsvcs/Notify/Supplier.h:
	- Modified <dispatch_updates_i> signature.

	* orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
	  Moved shutdown code fix from Notify_MT_Worker.cpp.

	* orbsvcs/orbsvcs/Notify/Types.h:
	  - Removed forward declaration for Event_Map_Observer,
	  Dispatch_Observer, Pending_Worker types that are no longer used.

 	* orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
	* orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
	  - Added missing virtual keyword to <push>

 	* orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp
	  - Changed the exception handling code to delegate to the Peer's
	  <handle_dispatch_exception> method.

	* orbsvcs/orbsvcs/Notify/Method_Request_Updates.cpp:
 	* orbsvcs/orbsvcs/Notify/Method_Request_Updates.h:
 	* orbsvcs/orbsvcs/Notify/Method_Request_Updates.inl:
	  Added a Method Request type that sends dispatch_updates to Peer
	  objects. Updates are also treated as events and
	  enqueued/dequeued in a queue(if any) of the Worker Task.
	  This replaces the earlier logic of using Pending_Worker.

	* orbsvcs/tests/Notify/Events.cpp:
	* orbsvcs/tests/Notify/Events.h:
	  - Added a -use_default_admin option that results in the test
	  obtaining a Consumer/SupplierAdmin interface via the
	  default_consumer/supplier_admin method.

	* orbsvcs/tests/Notify/Filter.cpp:
	* orbsvcs/tests/Notify/Filter.h:
	  - Added this test for Filter operations.
	  This test excercises the FilterAdmin code for a Consumer Admin.

	* orbsvcs/tests/Notify/MultiTypes.cpp:
	* orbsvcs/tests/Notify/MultiTypes.h:
	- Added this test to check the following -
	  + Consumers of different types should receive events
	  that are send by any kind of supplier.
	  + A nested upcall to the Notification Service via a
	  disconnect_XXX from within a push should succeed.

	* orbsvcs/tests/Notify/Updates.cpp:
	* orbsvcs/tests/Notify/Updates.h:
	  Completely revamped this test. This test tests subscription and
	  offer change calls and makes sure that the expected updates are
	  indeed received.

	* orbsvcs/tests/Notify/Basic/run_test.pl:
	  Added the new Filter and MultiTypes tests.

	* orbsvcs/tests/Notify/Basic/Makefile
	* orbsvcs/tests/Notify/Basic/Makefile.bor
	* orbsvcs/tests/Notify/Notify_Tests.dsw
	* orbsvcs/tests/Notify/Basic/Basic.dsw
	  Modified to include the new Filter and MultiTypes tests and
	  updated dependencies.

	* orbsvcs/orbsvcs/Makefile.CosNotification:
	* orbsvcs/orbsvcs/CosNotification.dsp:
	* orbsvcs/orbsvcs/CosNotification.bor:
	  Removed old Notify files, added Method_Request_Updates file and
	  updated dependencies.

	* orbsvcs/Notify_Service/Makefile:
	  Updated dependencies.

Mon Nov 11 14:28:39 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/GIOP_Message_Base.cpp (consolidate_fragments): When growing
	  the message block to increase the allocated memory, we now use
	  the length () of the available message block as the basis for
	  growing instead of the size (). Simon McQueen of PrismTech ran
	  several experiments while investigating problems related to
	  [BUGID 1356] and is convinced this is the right way to go, since
	  this uses less memory. Since I dont foresee problems, his patch
	  is being accepted for the release. Thanks to Simon for putting
	  in lot of effort to narrow down the problem to this area.

Mon Nov 11 10:43:59 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.dsp:
	  Added TAO_CosEvent.lib to the list of libraries for Release
	  build only to fix a link problem on MSVC.

	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp
	  (write_records): Initialize the local variable <l> to 0 to fix a
	  build warning.

Mon Nov 11 09:28:43 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
	  Get the whole hostname name including the domain instead
	  of just the hostname.
	  Thanks to Kobi Cohen-Arazi <kobi@mivzak.com> for pointing
	  out a exception thats raised.

	* orbsvcs/tests/ImplRepo/run_test.pl:
	  cosmetic changes.

Sun Nov 10 20:24:59 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:

	  Changed handling of reopened modules. In the case where a
	  module and its member have both been seen before, tao_ifr
	  now assumes that it is re-processing the IDL file in which
	  the module and member were first seen, and ignores the member.
	  It is possible that there is actually an illegal name clash, but
	  it is not possible to tell the difference in every case, so we
	  choose the behavior assuming that the common case will be the
	  re-processing of an already-loaded IDL file. Thanks to Nick
	  Cross <nick.cross@prismtechnologies.com> for reporting the
	  problem when loading CosNaming.idl twice and then trying to
	  look at the IFR contents.

        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:

	  Cosmetic changes.

Sun Nov 10 18:02:51 UTC 2002  Don Hinton  <dhinton@ieee.org>

	* TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp: Fixed a problem
	  with previous patch, Wed Oct 16 17:16:38 2002  Jeff Parsons
	  <parsons@isis-server.isis.vanderbilt.edu>, where the logic was
	  reversed.  Thanks to Jon Franklin for noticing the problem and
	  providing the patch.

Sun Nov 10 08:19:21 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/IIOP_Connector.cpp:
	* tao/Connection_Handler.cpp:
	* tao/IIOP_Connection_Handler.cpp: Some debugging statements were
	  either out of format or totally useless for any debugging
	  purposes. Fixed some of them that I saw in the path that
	  actually hinders my debugging.

Sat Nov 09 09:47:37 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/orbsvcs/RTEventLog.dsp: The release build was not
	  generating a different name from the debug build without
	  following our naming convention.

Fri Nov 08 19:18:58 2002  Irfan Pyarali  <irfan@oomworks.com>

	* orbsvcs/tests/Notify/Basic:

	  - Renamed the following file to make consistent:

	    - AdminProperties_Test.* to AdminProperties.*
	    - Events_Test.* to Events.*
	    - LifeCycleTest.* to LifeCycle.*

	  - Updated the following files to reflect the above described
	    name changes:

	    - Basic/Basic.dsw
	    - Basic/Basic.mpc
	    - Makefile
	    - Makefile.bor
	    - README

	  - Added run_test.pl so that these tests can be run in the
	    nightly built.

	* orbsvcs/tests/Notify/performance-tests/RedGreen: Added
	  run_test.pl so that these tests can be run in the nightly built.

	* orbsvcs/tests/Notify:

	  Updated the following project files so that they can be included
	  in the mega Notify test workspace:

	  orbsvcs/tests/Notify/Notify_Tests.dsw

	  - Basic/ConnectDisconnect.dsp
	  - Basic/IdAssignment.dsp
	  - Basic/Simple.dsp
	  - Basic/Updates.dsp
	  - Blocking/Structured_Consumer.dsp
	  - Blocking/Structured_Supplier.dsp
	  - Discarding/Sequence_Consumer.dsp
	  - Discarding/Sequence_Supplier.dsp
	  - Discarding/Structured_Consumer.dsp
	  - Discarding/Structured_Supplier.dsp
	  - MT_Dispatching/Structured_Consumer.dsp
	  - MT_Dispatching/Structured_Supplier.dsp
	  - Ordering/Sequence_Consumer.dsp
	  - Ordering/Sequence_Supplier.dsp
	  - Ordering/Structured_Consumer.dsp
	  - Ordering/Structured_Supplier.dsp
	  - Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp
	  - Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp
	  - Sequence_Multi_Filter/Sequence_Consumer.dsp
          - Sequence_Multi_Filter/Sequence_Supplier.dsp
	  - Structured_Filter/Structured_Filter_Consumer.dsp
	  - Structured_Filter/Structured_Filter_Supplier.dsp
	  - Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp
	  - Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp
	  - performance-tests/Filter/Sequence_Consumer.dsp
	  - performance-tests/Filter/Sequence_Supplier.dsp
	  - performance-tests/Filter/Structured_Consumer.dsp
	  - performance-tests/Filter/Structured_Supplier.dsp
	  - performance-tests/RedGreen/RedGreen.dsp
	  - performance-tests/Throughput/Throughput.dsp

	* orbsvcs/tests/Notify/Notify_Tests.dsw: Add projects, updated
	  names, and updated dependencies.

	* orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter: Renamed file to
	  fix missing "e":

	  Added   Sequence_Multi_ETCL_Filter.mpc
	  Removed Sequenc_Multi_ETCL_Filter.mpc

	* orbsvcs/tests/Notify/Basic/IdAssignment.h: Fixed filename in
	  comments.

	* orbsvcs/tests/Notify/Basic/Simple.cpp:
	* orbsvcs/tests/Notify/Basic/IdAssignment.cpp:
	* orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:

	  Reduce debugging statements.

	* $ACE_ROOT/bin/auto_run_tests.lst: Updated to run Notify test
	  nightly.

Fri Nov  8 13:19:46 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.cpp (svc_i): Cosmetic fixes.

Fri Nov 08 10:47:41 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tests/Abstract_Interface/Abstract_Interface_Server.dsp: Fixed
	  the broken release configuration.

Fri Nov 08 10:03:22 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/orbsvcs/RTEventLog.dsp: Fixed the broken release build
	  configuration.

Thu Nov 07 12:21:21 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* TAOACE.dsw:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.dsw:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Logging_Service.dsp:
	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.dsp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.dsp:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.dsp:
	* orbsvcs/examples/Log/Basic/Client.dsp:
	* orbsvcs/examples/Log/Event/Log_CEC_Simple_Consumer.dsp:
	* orbsvcs/examples/Log/Event/Log_CEC_Simple_Supplier.dsp:
	* orbsvcs/examples/Log/Notify/Log_Notify_Simple_Consumer.dsp:
	* orbsvcs/examples/Log/Notify/Log_Notify_Simple_Supplier.dsp:
	* orbsvcs/examples/Log/RTEvent/Log_RTEvent_Simple_Consumer.dsp:
	* orbsvcs/examples/Log/RTEvent/Log_RTEvent_Simple_Supplier.dsp:
	* orbsvcs/orbsvcs/RTEventLog.dsp:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.dsp:
	* tests/IDL_Test/idl_test.dsp: Fixed broken workspaces and projects.

Thu Nov  7 12:03:18 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Incoming_Mesage_Queue.cpp (duplicate): In duplicate () the
	  copy constructor should be called instead of the plain
	  constructor. Thanks to Simon McQueen <sm@prismtechnologies.com>
	  for pointing this out.

Thu Nov  7 09:17:04 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* utils/nslist/nsadd.cpp: Fixed a compile error caused undeclared
	  variables.

Wed Nov  6 20:09:14 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* utils/nslist/nsadd.cpp: Enhanced the utilty so that it can add
	  arbitrary paths to Naming Service entries.  Thanks to Paul
	  Caffrey <denginere@hotmail.com> for this fix.

Thu Nov  7 06:44:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Makefile.bor:
          Added Security directory

        * orbsvcs/tests/Security/Makefile.bor:
          Added new BCB makefle to build subdirectories

        * orbsvcs/tests/Security/Secure_Invocation/Makefile.bor:
        * orbsvcs/tests/Security/Secure_Invocation/client.bor:
        * orbsvcs/tests/Security/Secure_Invocation/server.bor:
          Added these new BCB makefiles. Thanks to Oleg Kraynov
	  <mustafa@gema.ru> for creating these.

Wed Nov  6 11:43:01 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/examples/CosEC/RtEC_Based/lib/Makefile: Fixed an error
	  which occurs when the right libraries havent been built. Thanks
	  to Gautam Thaker for pointing this out.

Wed Nov  6 11:35:01 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1020_Basic_Regression/Server_Task.h: Fixed fuzz
	  errors.

Wed Nov  6 11:32:58 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

        * tests/Bug_1020_Regression/Echo.cpp:
	* tests/Bug_1020_Regression/Echo.h:
	* tests/Bug_1020_Regression/Echo_Callback.cpp:
	* tests/Bug_1020_Regression/Echo_Callback.h:
	* tests/Bug_1020_Regression/ORB_Task.cpp:
	* tests/Bug_1020_Regression/ORB_Task.h:
	* tests/Bug_1020_Regression/Server_Task.cpp:
	* tests/Bug_1020_Regression/Test.idl: Fixed fuzz errors.

Tue Nov 05 17:32:22 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:
	* orbsvcs/orbsvcs/Notify/EventChannel.cpp:
	* orbsvcs/orbsvcs/Notify/FilterAdmin.cpp:
	* orbsvcs/orbsvcs/Notify/Proxy_T.cpp:
	* orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:

	  Corrected the way IDSequences are populated. Thanks to Yamuna
	  for helping to debug this.

Tue Nov 05 12:01:25 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Any/PushSupplier.cpp:
	  ENV variable was being used in <init>, changed it back to
	  ACE_ENV_ARG_DECL. 

Tue Nov  5 08:28:23 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* TAO_IDL/be/be_visitor_valuetype/field_cs.cpp (visit_enum): Changed
	  "val)/" to "val)" to avoid a bug.  Thanks to Jian Chen for
 	  reporting the fix and to Marc Alter
 	  <marc.alter@fr.thalesgroup.com> for the original bug report.

Mon Nov  4 19:03:12 CST 2002 Pradeep Gore  <pradeep@oomworks.com>

	* (Removed previous bogus ChangeLog entry).
	* orbsvcs/orbsvcs/CosNotification.bor:
          Thanks to Christopher Kohlhoff <chris@kohlhoff.com>, Johnny
          Willemsen <jwillemsen@remedy.nl>, Irfan, Nanbor and Bala for help in
          correcting the .bor file.

        * tao/Messaging/Makefile.bor:
          Applied change in INCLUDE provided by Christopher Kohlhoff
          <chris@kohlhoff.com>.

        * orbsvcs/orbsvcs/Notify/Builder.cpp:
          In method <build_filter_factory> create a filter factory if we
          could not obtain one as a dynamic service.

        * orbsvcs/orbsvcs/Notify/Event_Map_Observer_T.cpp:
          TAO_NS_Update_Added_Worker<PROXY>::work, moved call to
          type_added inside the "if" statement.

          Following files were modified for backward compatibility as some
          application might be calling their <init_svc> method.
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.h:

        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.h:
          static <create> method maintained for backward compatibility.

        * orbsvcs/orbsvcs/Notify/Notify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Service.h:
          In method TAO_NS_Notify_Service::init - added old options for
          backward compatibility.
          Revived Service Object
          Notify_Default_Event_Manager_Objects_Factory.

        * orbsvcs/orbsvcs/Notify/Properties.cpp:
        * orbsvcs/orbsvcs/Notify/Properties.h:
          Defined TAO_NS_DEFAULT_UPDATES_PERIOD instead of using a magic
          number for the subscription/publication change update
          notification interval.

        * orbsvcs/orbsvcs/Notify/Proxy.cpp:
          Added missing initialization of updates_off_ data member.

        * orbsvcs/orbsvcs/Notify/Service.h:
          Defined the string name for the
	  Notify_Default_Event_Manager_Objects_Factory. 

        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.cpp:
          Check if narrow fails because CosEventComm client was connecting
          and does not support NotifySubscribe.

        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.cpp:
          Replaced unnecessary calls to _narrow with _duplicate. Thanks to
          Irfan for pointing this out.

        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
          Remove explicit instantiation of Dynamic_Service<TAO_NS_Service>
          as its now defined in Notify_EventChannelFactory_i.cpp.

Mon Nov  4 14:21:18 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1020_Regression: Another test that has the capability
	  of stressing things a bit more for this bug to show up. This
	  test is structured in such a manner that multipel Multi-threaded
	  clients can connect to a server. The clients crash at periodic
	  intervals. This is a slightly improvised form of the basic
	  test. Thanks to Carlos O'Ryan for donating this test.

	* tests/Bug_1020_Regression/client.cpp:
	* tests/Bug_1020_Regression/Echo_Callback.cpp:
	* tests/Bug_1020_Regression/Echo_Callback.h:
	* tests/Bug_1020_Regression/Echo.cpp:
	* tests/Bug_1020_Regression/Echo.h:
	* tests/Bug_1020_Regression/Makefile:
	* tests/Bug_1020_Regression/ORB_Task.cpp:
	* tests/Bug_1020_Regression/ORB_Task.h:
	* tests/Bug_1020_Regression/run_test.pl:
	* tests/Bug_1020_Regression/server.cpp:
	* tests/Bug_1020_Regression/Server.cpp:
	* tests/Bug_1020_Regression/Server.h:
	* tests/Bug_1020_Regression/Server_Task.cpp:
	* tests/Bug_1020_Regression/Server_Task.h:
	* tests/Bug_1020_Regression/Test.idl: Files for this test.


Mon Nov  4 14:18:15 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1020_Basic_Regression/README: Added information about
	  the motivation and purpose of this test.

Mon Nov  4 13:44:48 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1020_Basic_Regression: A new regression test for BUG
	  1020. This is a simple test which was failing with 1.2.1. The
	  test has Multi-threaded client communicating with a
	  Multi-threaded server. The client is crashed to see whether the
	  server crashes.

	* tests/Bug_1020_Basic_Regression/client.cpp:
	* tests/Bug_1020_Basic_Regression/Client_Task.cpp:
	* tests/Bug_1020_Basic_Regression/Client_Task.h:
	* tests/Bug_1020_Basic_Regression/Echo_Caller.cpp:
	* tests/Bug_1020_Basic_Regression/Echo_Caller.h:
	* tests/Bug_1020_Basic_Regression/Echo.cpp:
	* tests/Bug_1020_Basic_Regression/Echo.h:
	* tests/Bug_1020_Basic_Regression/Makefile:
        * tests/Bug_1020_Basic_Regression/server.cpp:
	* tests/Bug_1020_Basic_Regression/Server_Task.cpp:
	* tests/Bug_1020_Basic_Regression/Server_Task.h:
	* tests/Bug_1020_Basic_Regression/Test.idl: New files added for
	  this test.

Mon Nov  4 12:24:51 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h: Added a
	  missing exception specification from the definition to the
	  declaration of create_member (). This should fix  compile errors
	  on Linux builds.

Mon Nov 04 11:10:14 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Notify_Service.cpp:
	  in method <init_main_thread> change argument to
	  ACE_ENV_ARG_DECL_NOT_USED.

	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
	  Added code for explicit template instantiation.

Mon Nov 04 10:47:41 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.cpp:
	  In <create_filter> method : Added check to include EXTENDED_TCL
	  string as a valid constraint grammar.

Sun Nov  3 19:13:49 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.h
	  (member_count):

	  Corrected exception specification so that it matches the method
	  definition's exception specification.

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (member_count):

	  Removed extra line (cosmetic change).

Sun Nov  3 16:02:55 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile.PortableGroup:
	* orbsvcs/orbsvcs/PortableGroup.bor:
	* orbsvcs/orbsvcs/PortableGroup.dsp:
	* orbsvcs/orbsvcs/PortableGroup_Static.dsp:

	  Removed PG_Group_Guard.{h,cpp} from these Makefiles and project
	  files.  Those files no longer exist.

Sun Nov  3 15:59:59 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LB_ORT.idl:

	  Updated to CORBA 3.0 conventions.  Use the CORBA 3.0
	  "typeprefix" keyword instead of "#pragma prefix".

Sun Nov  3 15:59:57 2002  Ossama Othman  <ossama@uci.edu>

	The following fix some problems with the infrastructure-controlled
	membership support in TAO's PortableGroup library:

	* orbsvcs/orbsvcs/PortableGroup/PG_Factory_Set.h
	  (TAO_PG_Factory_Node):

	  Replaced GenericFactory object reference attribute with a
	  FactoryInfo attribute.  The latter is necessary to correctly
	  implement infrastructure-controlled membership

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
	  (delete_member):

	  New method used to implement the
	  ObjectGroupManager::remove_member() method when the object group
	  in question is under infrastructure control.  The
	  ObjectGroupManager will call back on the GenericFactory.

	  (check_minimum_number_members):

	  New method that creates new members if the object group in
	  question is under infrastructure control.  Enough new members
	  will be created to satisfy the MinimumNumberMembers property of
	  the object group (assuming there are enough unused
	  application-supplied GenericFactorys).

	  (create_member):

	  New method used to create a single member via the
	  infrastructure.  This method is only used internally by the
	  infrastructure.  It should not be confused with the
	  ObjectGroupManager::create_member() method.

	  (populate_object_group):

	  Removed FactoryCreationId and ObjectId parameters.  They are no
	  longer used by this method.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp:

	  No need to include `PG_Group_Guard.h'.  That file has been
	  removed.

	  (TAO_PG_GenericFactory):

	  Pass the "this" pointer to the ObjectGroupManager
	  implementation.  The ObjectGroupManager will potentially call
	  back on the GenericFactory in the infrastructure-controlled
	  membership case.

	  (create_object):

	  Reorganized this method so that the TAO_PG_Group_Guard class is
	  no longer needed.  In particular, the FactoryCreationId is

	  The object group's factory set is now bound to the factory map
	  in this method instead of the populate_object_group() method.
	  This allowed the latter method to be cleaned up.

	  (delete_object_i):

	  Updated to access FactoryInfo field in the TAO_PG_Factory_Node
	  structure that replaced the old GenericFactory object reference
	  field.

	  (populate_object_group):

	  Fixed problem where only the number of factories equal to the
	  initial number of members were bound to the factory map.  All
	  factories should be bound to the map, but only
	  InitialNumberMembers factories should be invoked.

	  Refactored member creation code to the new create_member()
	  method since the same code is also used by the new
	  check_minimum_number_members() method.

	* orbsvcs/orbsvcs/PortableGroup/PG_Group_Guard.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Group_Guard.cpp:

	  Remove these files.  The "guard" implementation contained in
	  these files is no longer necessary due to improvements in the
	  TAO_PG_GenericFactory::create_object() method.

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (_tao_add_member):

	  TAO-specific object group member addition method intended for
	  use by TAO's GenericFactory implementation.  It merely calls the
	  new protected add_member_i() method in a way that prevents that
	  method from performing remote member type checking via the
	  CORBA::Object::_is_a() call.  TAO's GenericFactory
	  implementation already performs member type checking in the
	  infrastructure-controlled case.  This is an optimization to
	  prevent redundant remote type checks.

	  (add_member):

	  Refactored object group member addition code to the new
	  protected add_member_i() method.  It calls the add_member_i()
	  method in a way that allows member type checking to occur.

	  (add_member_i):

	  New protected underlying and non-locking implementation of the
	  add_member() and _tao_add_member() methods.

	  (member_count):

	  New accessor method that returns the number of members currently
	  in a given object group.  Used by the new
	  TAO_PG_GenericFactory::check_minimum_number_members() method.

	  (generic_factory):

	  Mutator method used to set the cached pointer to the
	  TAO_PG_GenericFactory object which the TAO_PG_ObjectGroupManager
	  will call back on.

Sun Nov  3 11:04:27 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Event/EC_Gateway_UDP.h: Fixed a compile errors
	  in single threaded builds.

Sun Nov  3 10:18:15 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Notify/Notify_Service.cpp: Fixed a compile error
	  with minimum builds. Rearranged includes to have local includes
	  first.

Sun Nov 03 11:00:27 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/CosNotification.bor:
	  Added missing .obj extension to targets. Thanks to Johnny
	  Willemsen <jwillemsen@remedy.nl> for pointing this out.

	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Server.cpp:
	  Removed calls to initalize old Notification factories. This is
	  not needed now.

Sat Nov  2 19:58:51 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Bug_1269_Regression/ORB_Task.cpp:
	* tests/Bug_1269_Regression/Server_Timer.cpp:
	* tests/Bug_1269_Regression/client.cpp:
	* tests/Bug_1269_Regression/shutdown.cpp:
	* tests/Bug_1270_Regression/ORB_Task.cpp:
	* tests/Bug_1270_Regression/Server_Timer.cpp:
	* tests/Bug_1270_Regression/client.cpp:
	* tests/Bug_1270_Regression/shutdown.cpp: Fixed compile errors on
	  platforms where exceptions have been disabled.

	* tests/Bug_1270_Regression/run_test.pl:
	* tests/Bug_1269_Regression/run_test.pl: Changed the cutoff times
	  so that the tests would run without displaying errors on my
	  box. I would love these tests to run in our daily builds. But we
	  cannot run these, since they run for more than 75 mins on my two
	  processor box!

Sat Nov 02 20:46:08 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/CosNotification.bor:
	  Modified to add new Notification files.

Sat Nov  2 19:56:31 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Synch_Refcountable.cpp: Cosmetic fix.

Sat Nov 02 18:10:44 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
	  Inserted missing , in constructor.

	* orbscvs/orbsvcs/Notify/Notify_Service.cpp:
	  Removed ACE_DEFAULT_THREAD_PRIORITY to threadpool task. Thanks
	  to Bala for suggesting a fix.

	* orbscvs/orbsvcs/Notify/Thread_Pool_Task.cpp:
	  Modified call to <activate> to use ACE_DEFAULT_THREAD_PRIORITY.

	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
	  Changed code to obtain the notify service.

	* orbsvcs/Logging_Service/Notify_Logging_Service/svc.conf:
          Modified the .conf file to use the revised Notify Service
	  directive.

Sat Nov  2 10:48:46 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Utils/Servant_Var.h:
	* tao/Utils/Servant_Var.inl: Fixed errors in non-native exceptions
	  build.

Fri Nov  1 20:12:09 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (connect):
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h: Added the overloaded
	  connect () method without the timeout. The implementation just
	  calls the method with timeout value. It shouldnt be necessary,
	  but one build in the borland compiler warns about one of the
	  connect () methods hiding the other one. Hopefully, this should
	  resolve the warning.

Fri Nov 01 20:09:44 2002  Pradeep Gore  <pradeep@oomworks.com>

        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:

          Modified project files to correct .pdb target.

        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:

          In method <run_test> removed duplicate call to Sequence Consumer.

        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
          Changed code to obtain the notify service for colocation.

	* orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
	  Changed the default values used when the test is run without any
	  parameters.

        * orbsvcs/tests/Notify/Blocking/notify.conf:
        * orbsvcs/tests/Notify/Discarding/notify.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtdispatching.conf:
        * orbsvcs/tests/Notify/Ordering/notify.conf:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/notify.conf:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/Filter/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/listener.conf:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/lookup.conf:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/reactive.conf:

          Modified the .conf files to use the revised Notify Service directive.

        * orbsvcs/tests/Notify/Structured_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:

          Added missing definition for $notify_conf

        * orbsvcs/tests/Notify/Structured_Filter/notify.conf:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/notify.conf:

          Added missing notify.conf file.

Fri Nov  1 19:12:49 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Makefile.dirs: Added tao/Utils directory to the list of
	  directories. Need to add this directory for Win32 and
	  Borland. Need to make sure that they are fine on one before
	  propagating things to others.

Fri Nov  1 19:06:45 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Utils/Auto_Functor.cpp:
	* tao/Utils/Auto_Functor.h:
	* tao/Utils/Auto_Functor.inl:
	* tao/Utils/Implicit_Deactivator.cpp:
	* tao/Utils/Implicit_Deactivator.h:
	* tao/Utils/ORB_Destroyer.cpp:
	* tao/Utils/ORB_Destroyer.h:
	* tao/Utils/PolicyList_Destroyer.cpp:
	* tao/Utils/PolicyList_Destroyer.h:
	* tao/Utils/PolicyList_Destroyer.inl:
	* tao/Utils/RIR_Narrow.cpp:
	* tao/Utils/RIR_Narrow.h:
	* tao/Utils/Servant_Var.cpp:
	* tao/Utils/Servant_Var.h: ACE'ified code. Made them exception
	  safe even if native exceptions have been turned off.

Fri Nov 01 14:38:15 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/Logging_Service/Logging_Service.dsw:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.dsw:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.dsp:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Logging_Service.dsp:
	  Renamed Basic_Logging_Service.dsp to Logging_Service.dsp.  This
	  may fix the unknown project error in the nightly build.

Fri Nov 01 11:09:29 2002  Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.cpp:
	  Changed <execute> method parameter to
	  ACE_ENV_SINGLE_ARG_DECL_NOT_USED

        * orbsvcs/orbsvcs/Notify/Service.h:
          Corrected the comment above the <init> method.

        * orbsvcs/orbsvcs/Notify/Service.h:
          Added a #define to define the string used to load the Cos
          Notification Service.

        * orbsvcs/orbsvcs/Notify/Notify_Service.h:
        * orbsvcs/orbsvcs/Notify/Notify_Service.cpp:
          Added class TAO_NS_CosNotification_Service_Initializer.
          This is a helper to load the Cos Notification service into the service conf. for static links.

        * orbsvcs/Notify_Service/svc.conf:
          Changed the conf file to load the Cos Notification wih the static command.

        * orbsvcs/Notify_Service/Notify_Service.cpp:
          Changed the string to obtain the Cos Notification Service via
	  the Service Configurator.

Fri Nov  1 09:44:43 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:

          Fixed a project setting I overlooked in

          Thu Oct 31 16:46:11 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

Fri Nov  1 07:25:36 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/MProfile_Connection_Timeout/README:
	* tests/MProfile_Connection_Timeout/run_test.pl: Added these files
	  to the test.

	* tests/MProfile_Connection_Timeout/client.cpp:
	* tests/MProfile_Connection_Timeout/server.cpp:
	* tests/MProfile_Connection_Timeout/test.idl:
	* tests/MProfile_Connection_Timeout/test_i.cpp:
	* tests/MProfile_Connection_Timeout/test_i.h: Improved error
	  checking so that any problems will be signalled as errors in our
	  daily builds.

Fri Nov  1 00:44:22 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Event_Map_T.h:

	  Fixed compile errors in debian build.

Thu Oct 31 22:33:04 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* TAOACE.dsw: Added ProtableServer library as a dependency for
	  Messaging library.

	* tests/MProfile_Connection_Timeout/client.bor:
	* tests/MProfile_Connection_Timeout/server.bor:
	* tests/MProfile_Connection_Timeout/Makefile.bor: Added the
	  borland Makefiles.

	* tests/MProfile_Connection_Timeout/client.dsp:
	* tests/MProfile_Connection_Timeout/server.dsp:
	* tests/MProfile_Connection_Timeout/MProfile_Connection_Timeout.dsw:
          Workspace and project files for Win32 builds

	* tests/MProfile_Connection_Timeout/MProfile_Connection_Timeout.mpc:
	  MakefileProject creator.

Thu Oct 31 17:56:55 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/MProfile_Connection_Timeout/client.cpp (run_test):
	  Cosmetic fixes.

	* tests/MProfile_Connection_Timeout/Makefile: Added the Makefile
	  for the test.

Thu Oct 31 17:33:55 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Dispatch_Observer_T.inl:
	* orbsvcs/orbsvcs/Notify/Event_Map_Entry_T.inl:
	* orbsvcs/orbsvcs/Notify/Event_Map_T.h:
	* orbsvcs/orbsvcs/Notify/Event_Map_T.inl:
	* orbsvcs/orbsvcs/Notify/Container_T.inl:

	  Added ACE_TYPENAME for type names qualified by template
	  parameters.

Thu Oct 31 17:09:50 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/MProfile_Connection_Timeout:
	* tests/MProfile_Connection_Timeout/client.cpp:
	* tests/MProfile_Connection_Timeout/server.cpp:
	* tests/MProfile_Connection_Timeout/test.idl:
	* tests/MProfile_Connection_Timeout/test_i.cpp:
	* tests/MProfile_Connection_Timeout/test_i.h: New test for BUG ID
	  1284. This is just a preliminary checkin. Other parts of the
	  test are coming in shortly.

Thu Oct 31 16:46:11 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/CosNotification.dsp:

          Added link path to ETCL library.

        * orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
        * orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:

          Added setting for release version, and fixed export settings for debug
          and release versions.

        * orbsvcs/orbsvcs/Notify/Notify_Service.cpp:

          Cosmetic changes.

        * orbsvcs/orbsvcs/Notify/Service.h:

          Added missing 'virtual' to a pure virtual function declaration.

Thu Oct 31 15:42:04 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h:
	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h: Replicated the
	  changes from "Thu Oct 31 14:48:39 2002  Balachandran Natarajan
	  <bala@isis-server.isis.vanderbilt.edu>" for the remaining
	  protocols.

Thu Oct 31 15:40:31 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp (handle_timeout): Fixed
	  a stupid typo :(

Thu Oct 31 14:48:39 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	This is a fix for BUGID 1284. Please see

	http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1284 for more
	details. This fix does the following

	- The invocation class selects a timeout from the two options that
	  it has access to, viz. a user defined timeouts for connection
	  establishment or the roundtrip timeout defined by the user.

	- If the user defined connection timeout policy is used and if the
	  call to TAO_Transport::connect () returns an errno of ETIME, the
	  invocation class tries the next endpoint in the profile.

	- If the roundtrip timeout is used, we raise a CORBA::TIMEOUT
	  exception.

	The connection timeout policy if set, overrides the roundtrip
	timeout policy value. To get the semantics right, the following
	changes were performed:

	* tao/Transport_Connector.cpp:
	* tao/Transport_Connector.h: Added another connect () method with
	  a timeout value. Made the connect () methods non-pure-virtual,
	  such that we could share some code and maintain backward
	  compatibility. Further, the pure-virtual method make_connection
	  () passes a timeout value. This shouldnt break backward
	  compatibility either.

	* tao/IIOP_Connector.cpp:
	* tao/IIOP_Connector.h: Added a timeout argument to the
	  make_connection () method. This method gets called from
	  TAO_Connector::connect () method which has a timeout. The
	  implementation of the make_connection () method is now changed
	  to just use the timeout value that is passed instead of
	  selecting a timeout value.

	* tao/Invocation.cpp: Selects a timeout from the two possible
	  alternatives and passes one of the values to the connect ()
	  call. Based on the timeout value used and the return value
	  handles errors as explained above.

	* tao/Strategies/DIOP_Connector.cpp:
	* tao/Strategies/DIOP_Connector.h:
	* tao/Strategies/SHMIOP_Connector.cpp:
	* tao/Strategies/SHMIOP_Connector.h:
	* tao/Strategies/UIOP_Connector.cpp:
	* tao/Strategies/UIOP_Connector.h: Changes to the protocols within
	  TAO. Changes to other protocols will follow.

Thu Oct 31 13:59:50 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/GIOP_Message_Base.cpp: Fixed a typo in the comments.

Thu Oct 31 13:08:23 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp (handle_timeout): Fixed
	  compile errors in single threaded builds.

Thu Oct 31 12:07:51 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Notify_Service.cpp:
	* orbsvcs/orbsvcs/Notify/Sequence/EventBatch.cpp:

	  Fixed debian build compile warnings.

Thu Oct 31 11:58:24 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/tests/EC_MT_Mcast/MCast.cpp: Fixed compile error in
	  builds where exceptions have been turned off.

Thu Oct 31 10:51:12 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* docs/Smart_Proxies.html: Fixed a few typos.

Thu Oct 31 10:52:50 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:

          Added checks for successful opening of an ACE_Configuration
          section so that subsequent iteration of values or subsections
          (which will fail) can be skipped. Thanks to Nick Cross
          <nick.cross@prismtechnologies.com> for reporting the bug.

Thu Oct 31 10:50:16 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tao/ValueBase.h:
        * tao/ValueBase.i:

          Restored const version of ValueBase_var operator that casts to
          ValueBase*.

Thu Oct 31 00:46:22 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/tests/Notify/Makefile:

	  Removed the old Throughput test.

Wed Oct 30 19:06:59 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Event_Manager.cpp:
	* orbsvcs/orbsvcs/Notify/Event.cpp:
	* orbsvcs/orbsvcs/Notify/Types.cpp:
	* orbsvcs/orbsvcs/Notify/Factory.cpp:

	  Added template instantiations to fix link errors.


Wed Oct 30 19:38:20 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/UDP.cpp (TAO_AV_UDP_Object::handle_input):
	  Improve debugging message.

Wed Oct 30 12:49:32 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tao/PortableServer/PortableServer_ORBInitializer.cpp
	  (register_poa_current): Moved registration of POA Current from
	  post_init() to pre_init().  Thanks to Ossama for pointing this
	  out.

Wed Oct 30 09:01:12 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/PortableServer_ORBInitializer.cpp
	  (register_poa_current):

	  Removed obsolete/incorrect comment regarding the lack of
	  reference counting in the TAO_ORBInitInfo object.
	  TAO_ORBInitInfo is now properly reference counted.

Wed Oct 30 11:38:36 2002  Irfan Pyarali  <irfan@oomworks.com>

	* Following are fixes for bug 1344.  Thanks to Ossama for pointing
	  this out.

	* tao/PortableServer/Object_Adapter.cpp (create): Moved the
	  registration of the POA Current to the
	  PortableServer_ORBInitializer.  If POA Current is resolved
	  before RootPOA, this code executes does not execute in time.

	* tao/PortableServer/PortableServer_ORBInitializer.cpp
	  (register_poa_current): POA Current is now registered in
	  TAO_PortableServer_ORBInitializer::post_init().

	* tao/ORB_Core.i (poa_current): Simply return <poa_current>.  It
	  should have been correctly initialized.

	* tests/POA/Current: Added new test to ensure that accessing the
	  POA current before the RootPOA does not cause any problems.

	  The following files were added:

	  - tests/POA/Current/Current.cpp
	  - tests/POA/Current/Current.dsp
	  - tests/POA/Current/Current.dsw
	  - tests/POA/Current/Current.mpc
	  - tests/POA/Current/Makefile
	  - tests/POA/Current/makefile.bor
	  - tests/POA/Current/run_test.pl

	  The following files were modified:

	  - $ACE_ROOT/bin/auto_run_tests.lst
	  - tests/TAO_Tests.dsw
	  - tests/POA/Makefile
	  - tests/POA/Makefile.bor
	  - tests/POA/README

Wed Oct 30 13:15:01 CET 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* orbsvcs/tests/EC_MT_Mcast/MCast.cpp (run_orb_within_thread):

	  Added missing ACE_DECLARE_NEW_CORBA_ENV.

Tue Oct 29 17:50:59 2002  Ossama Othman  <ossama@uci.edu>

	* tao/TAO_Singleton_Manager.cpp (fini, _set_unexpected):

	  Call set_unexpected() in the global namespace when using
	  MSVC++.  MSVC++ doesn't place set_unexpected() in the "std"
	  namespace.  Thanks to Irfan for pointing the build problem.

Tue Oct 29 19:20:29 2002  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

	* orbsvcs/orbsvcs/Notify/Service.h:

	  Make the init (int,char**) method abstract.

Tue Oct 29 11:37:37 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/orbsvcs/Makefile.CosNotification:

	  Generated dependencies. Added the cleanup of the tao_idl
	  generated files for Notify/Event_Forwarder.idl.

Tue Oct 29 09:34:59 CET 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

	* orbsvcs/tests/EC_MT_Mcast/MCast.cpp: Use ACE_OS::sleep() instead
	  of sleep(). Thanks to Johnny.

Tue Oct 29 00:33:27 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile.CosNotification (realclean):

	  Fixed typo where the command to be executed for this target was
	  placed in the target's dependency list.  Addresses several build
	  errors.

Tue Oct 29 07:38:44 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/EC_MT_Mcast/Makefile.bor:
          Added new BCB makefile for this test.

Mon Oct 28 22:11:12 2002  Ossama Othman  <ossama@uci.edu>

	* tao/TAO_Singleton_Manager.cpp:

	  Do not pull the std::unexpected() function into the global
	  namespace through a "using" clause to avoid a conflict with some
	  STL implementations (e.g. STLPort) that already do that.

	  (init, _set_unexpected):

	  If the compiler's C++ library defines the "std" namespace,
	  explicitly call std::set_unexpected.  This fix was motivated by
	  Kobi Cohen Arazi <kobi@mivzak.com>.

Mon Oct 28 19:18:25 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* orbsvcs/orbsvcs/Makefile.CosNotification:

	* orbsvcs/orbsvcs/Notify/Service.h:
	* orbsvcs/orbsvcs/Notify/Pending_Worker_T.h:
	* orbsvcs/orbsvcs/Notify/Pending_Worker_T.cpp:
	* orbsvcs/orbsvcs/Notify/ThreadPool_Task.h:
	* orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:

	  Added init methods with base class signatures to avoid compile
	  warnings

	* orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
	* orbsvcs/orbsvcs/Notify/Admin.h:
	* orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp:

	  Made the TAO_NS_Object_Id_Seq definition public so it can be
	  accessed from other classes.

	* orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:

	  Put the pacing_interval_.value () into an ACE_Time_Value before
	  checking with ACE_Time_Value::zero.

	* orbsvcs/orbsvcs/Notify/Factory.cpp:

	  Removed duplicate template instantitaion of TAO_NS_EventType.

Mon Oct 28 17:19:58 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/POA/MT_Servant_Locator/MT_Servant_Locator.cpp: Fixed
	  ACE_ENV warnings.

Mon Oct 28 16:55:11 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/POA/MT_Servant_Locator/Makefile: Fixed and updated
	  dependencies.

Mon Oct 28 16:48:23 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/POA/MT_Servant_Locator/MT_Servant_Locator.cpp: <Task::event_>
	  was being used in both preinvoke() and postinvoke().  This led
	  to a deadlock if the second signal() was missed since the event
	  was already signaled. Solution was to give both preinvoke() and
	  postinvoke() their own event variables.

Mon Oct 28 14:20:32 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tao/PortableServer/POA.cpp (locate_servant_i): We no longer
	  need to use the non-servant upcall idiom for calling
	  ServantLocator::preinvoke() since we are now let of the lock
	  altogether before calling the servant locator.
	  ServantLocator::postinvoke() is also handled in a similar
	  manner.

          Note that it is possible for some other thread to reset the
	  servant locator once the lock is released.  However, this
	  possiblility also exists for postinvoke() which is also called
	  outside the lock.

	  Thanks to Ashok Sadasivan <ashok_sadasivan@hotmail.com> for
	  pointing this out.

	* tao/PortableServer/Object_Adapter.cpp (prepare_for_upcall):
	  Check the state before releasing the lock since it may already
	  have been released for Servant Locators.

	* tao/PortableServer/Object_Adapter: Moved State enumeration from
	  protected to public section.  Also added accessor and set method
	  of the state.

	* tests/POA/MT_Servant_Locator: Added new test to ensure that the
	  POA allows multiple simultaneous calls to Servant Locators.

	  The following files were added:

	  - tests/POA/MT_Servant_Locator/MT_Servant_Locator.cpp
	  - tests/POA/MT_Servant_Locator/MT_Servant_Locator.dsp
	  - tests/POA/MT_Servant_Locator/MT_Servant_Locator.dsw
	  - tests/POA/MT_Servant_Locator/MT_Servant_Locator.mpc
	  - tests/POA/MT_Servant_Locator/Makefile
	  - tests/POA/MT_Servant_Locator/makefile.bor
	  - tests/POA/MT_Servant_Locator/run_test.pl
	  - tests/POA/MT_Servant_Locator/test.idl

	  The following files were modified:

	  - $ACE_ROOT/bin/auto_run_tests.lst
	  - tests/TAO_Tests.dsw
	  - tests/POA/Makefile
	  - tests/POA/Makefile.bor
	  - tests/POA/README

Mon Oct 28 14:20:32 2002  Irfan Pyarali  <irfan@oomworks.com>

	* Following are fixes for bug 1317.  Thanks to Ossama for pointing
	  this out.

	* tao/TAO_Internal.cpp (open_services_i): If available, allow the
	  Adapter Factory to setup by calling init().  This is similar to
	  what we do for RT-CORBA.

	* tao/ORB_Core.cpp (poa_factory_name): Added accessor.

	* tao/RTPortableServer/RT_Object_Adapter_Factory.h: Changed
	  inheritance from TAO_Adapter_Factory to
	  TAO_Object_Adapter_Factory to get the base class' init()
	  functionality.

Mon Oct 28 18:38:35 CET 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* orbsvcs/tests/Makefile:
	* orbsvcs/tests/Makefile.am:
	* orbsvcs/tests/Makefile.bor:
	* orbsvcs/tests/EC_MT_Mcast/AddrServer.cpp:
	* orbsvcs/tests/EC_MT_Mcast/AddrServer.h:
	* orbsvcs/tests/EC_MT_Mcast/Consumer.cpp:
	* orbsvcs/tests/EC_MT_Mcast/Consumer.h:
	* orbsvcs/tests/EC_MT_Mcast/MCast.cpp:
	* orbsvcs/tests/EC_MT_Mcast/MCast.dsp:
	* orbsvcs/tests/EC_MT_Mcast/MCast.dsw:
	* orbsvcs/tests/EC_MT_Mcast/Makefile:
	* orbsvcs/tests/EC_MT_Mcast/README:
	* orbsvcs/tests/EC_MT_Mcast/Supplier.cpp:
	* orbsvcs/tests/EC_MT_Mcast/Supplier.h:
	* orbsvcs/tests/EC_MT_Mcast/svc.conf:
	* orbsvcs/tests/EC_MT_Mcast/run_test.pl:
	  Added a regression test for the multithreading problem in class
	  TAO_ECG_UDP_Receiver.

Mon Oct 28 18:21:18 CET 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* orbsvcs/orbsvcs/Event/EC_Gateway_UDP.{h,cpp}:
	  TAO_ECG_UDP_Receiver member request_map_ may be accessed
	  concurrently. Added a mutex, request_map_protector_.
	  Thanks to Andreas Koehler <andreas.koehler@sysde.eads.net>
	  for tracking down the bug and providing the fix.

Sun Oct 27 09:04:33 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/Event_Forwarder.idl:
          Fixed fuzz build errors.

Sun Oct 27 09:04:33 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Property.h:
        * orbsvcs/orbsvcs/Notify/POA_Helper.h:
        * orbsvcs/orbsvcs/Notify/Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Notify/Constraint_Interpreter.h:
          Fixed fuzz build errors.

Sun Oct 27 01:04:09 2002  Pradeep Gore  <pradeep@oomworks.com>

        Updated framework for TAO's Notification Service:
        - Fixes bugs related to Notification Object Lifecycle,
	  Thanks to David R Robison <drrobison@openroadsconsulting.com>,
	  Thomas Natterer <Thomas.Natterer@de.thalesatm.com>,
	  Wilbur Lang <wilbur@szonline.net> and
	  Jian Chen <jchen@huawei.com> for reporting various bugs resulting
	  due to this.
	
        - Fixes bugs related to incorrect ID assignments,
	  Thanks to Rick Marlborough <RMarlborough@LIO.AACISD.com>,
	  David-A O-Brien <david-a.o-brien@db.com> and 
	  Shelton Tang <stang@altigen.com>  for reporting various bugs resulting
	  due to this.

        - Fixes implementation of SequenceProxys and Event Batch.
	  Thanks to Frederic Langlet <Frederic.Langlet@alcatel.com> for
	  reporting this problem.

        - Contains base framework for adding RT-CORBA extensions.

        Added Files:
        * orbsvcs/orbsvcs/NotifyExt.idl:
	  Defines extensions to The Notification Service to support
	  threadpools. The threadpool parameters are passed to the set_qos
	  method as QoS name-value pair. For the Cos Notify, a threadpool
	  is created as an ACE_Task object. 

	* orbsvcs/orbsvcs/Notify_Forwarder.idl:
	  An internal interface to context switch the event propagation
	  from the proxyconsumer to proxysupplier. This is achieved by the
	  caller thread invoking the <forward> method of this
	  interface. Colocation ensures that this call is invoked in the
	  context of the thread associated with the target object. 
	  The Event_Forwarder extends the  
	  CosNotifyChannelAdmin::StructuredProxyPushSupplier interface.
	
        * orbsvcs/orbsvcs/Notify/Admin.cpp :
        * orbsvcs/orbsvcs/Notify/Admin.h :
        * orbsvcs/orbsvcs/Notify/Admin.inl:
	  Base class implementation for the Notify Admin Interfaces.
  	
        * orbsvcs/orbsvcs/Notify/AdminProperties.cpp:
        * orbsvcs/orbsvcs/Notify/AdminProperties.h :
        * orbsvcs/orbsvcs/Notify/AdminProperties.inl:
          Maintains the AdminProperties that can be applied per
          eventchannel.
 
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.inl :
          Buffering Strategy for queue and discrading policies.

        * orbsvcs/orbsvcs/Notify/Builder.cpp:
        * orbsvcs/orbsvcs/Notify/Builder.h:
        * orbsvcs/orbsvcs/Notify/Builder.inl :
	  Builder for the EventChannelFactory, EventChannel, Admin and
	  proxy objects. 
    
        * orbsvcs/orbsvcs/Notify/Constraint_Interpreter.cpp :
        * orbsvcs/orbsvcs/Notify/Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Notify/Constraint_Visitors.cpp :
        * orbsvcs/orbsvcs/Notify/Constraint_Visitors.h:
          Implementation of interfaces to the ETCL Filtering code.
  
        * orbsvcs/orbsvcs/Notify/Consumer.cpp :
        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/Consumer.inl:
	  Wrapper for the Consumer that connects to a proxy object.

        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.cpp :
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/ConsumerAdmin.inl :
	  Consumer Admin Implementation.

        * orbsvcs/orbsvcs/Notify/Container.cpp:
        * orbsvcs/orbsvcs/Notify/Container.h:
        * orbsvcs/orbsvcs/Notify/Container.inl :
        * orbsvcs/orbsvcs/Notify/Container_T.cpp:
        * orbsvcs/orbsvcs/Notify/Container_T.h :
        * orbsvcs/orbsvcs/Notify/Container_T.inl:
	  Base class for the Factory-Container objects in Notify
	  viz. Factory, Channel and Admin objects. This class manages the
	  lifetimes of the POA's for activating the EC objects as well as
	  the POA for activating the Proxys. 
	
        * orbsvcs/orbsvcs/Notify/Destroy_Callback.h :
          Callback for each Notify Object that supports the <release>
          method which is invoked when the objects reference count
          falls to 0.
  
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.cpp :
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.h:
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.inl :
          Implements to CosNotifyFilter interface.

        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.cpp:
        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.h :
        * orbsvcs/orbsvcs/Notify/ETCL_FilterFactory.inl:
          Implements to CosNotifyFilterFactory interface.

        * orbsvcs/orbsvcs/Notify/Event.cpp:
        * orbsvcs/orbsvcs/Notify/Event.h :
        * orbsvcs/orbsvcs/Notify/Event.inl:
	  Abstract base class for all types of Notify Events.

        * orbsvcs/orbsvcs/Notify/EventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/EventChannel.h :
        * orbsvcs/orbsvcs/Notify/EventChannel.inl:
	  EventChannel interface implementation.

        * orbsvcs/orbsvcs/Notify/EventChannelFactory.cpp :
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.h:
        * orbsvcs/orbsvcs/Notify/EventChannelFactory.inl :
	  EventChannel Factory Interface implementation.

        * orbsvcs/orbsvcs/Notify/EventType.cpp:
        * orbsvcs/orbsvcs/Notify/EventType.h:
        * orbsvcs/orbsvcs/Notify/EventType.inl:
	  Abstraction for the Notify EventType.

        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.h :
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.inl:
	  Helper class to manage a sequence of EventTypes.

        * orbsvcs/orbsvcs/Notify/Event_Manager.cpp :
        * orbsvcs/orbsvcs/Notify/Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Event_Manager.inl:
          An event manager that contains the supplier and consumer event
	  maps.Consumers and Supppliers connect to the EventManager and
	  inform it of any subscription/offer changes.

        * orbsvcs/orbsvcs/Notify/Event_Map_Entry_T.cpp:
        * orbsvcs/orbsvcs/Notify/Event_Map_Entry_T.h :
        * orbsvcs/orbsvcs/Notify/Event_Map_Entry_T.inl:
          An event map entry is maintained per eventtype.
          The entry contains a collection of proxys that are assigned
          to the same eventtype.

        * orbsvcs/orbsvcs/Notify/Event_Map_T.cpp :
        * orbsvcs/orbsvcs/Notify/Event_Map_T.h:
        * orbsvcs/orbsvcs/Notify/Event_Map_T.inl:
  	  Template definition of the lookup data structure that maps
	  EventTypes to recipient lists.

        * orbsvcs/orbsvcs/Notify/Factory.cpp :
        * orbsvcs/orbsvcs/Notify/Factory.h:
        * orbsvcs/orbsvcs/Notify/Factory.inl:
          An default factory that creates Notify objects.

        * orbsvcs/orbsvcs/Notify/FilterAdmin.cpp :
        * orbsvcs/orbsvcs/Notify/FilterAdmin.h:
          Implementation of the filter admin interface.

        * orbsvcs/orbsvcs/Notify/FilterFactory.h :
          Interface for FilterFactories. This allows us to plug
          different filterfactories if required.
  
        * orbsvcs/orbsvcs/Notify/ID_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/ID_Factory.h :
        * orbsvcs/orbsvcs/Notify/ID_Factory.inl:
	  A Factory class for generating the ID's associated with the
	  Notify Objects.Note that each TAO_NS_POA used one of these. 
	  Note that the previous implementation of Notification created
	  unique id's for *each* category of Objects. so
	  e.g. ConsumerAdmins went from 0,1,2... and ProxySuppliers went
	  from 0,1,2... Now ConsumerAdmins and ProxySuppliers would share
	  Id's 0,1,2... 3,4,5. The spec. requires Ids to be unique, It
	  does not require each category to be unique. moreover
	  CORBA::ULongs are wide enough so that we don't get into any
	  recycling of Ids. This simplification fixes many nagging bugs in
	  Notification.
	
        * orbsvcs/orbsvcs/Notify/Method_Request.cpp :
        * orbsvcs/orbsvcs/Notify/Method_Request.h:
        * orbsvcs/orbsvcs/Notify/Method_Request.inl :
	  Base class for command objects in the activation queue.
	
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.cpp :
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.h :
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch.inl :
          Method request for Event dispatching. Contains the event to
          be dispatched and also evaluates the proxy supplier and
          consumer admin filters.  

        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_No_Filtering.cpp :
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_No_Filtering.h :
        * orbsvcs/orbsvcs/Notify/Method_Request_Dispatch_No_Filtering.inl :
          Dispatch method request to push the event to the target
	  consumer without any filtering. This is used when sending
          queued events (e.g. via suspend) that don't have to pass a
          filter because they have already been through it. 

	* orbsvcs/orbsvcs/Notify/Method_Request_Lookup.cpp:
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.h :
        * orbsvcs/orbsvcs/Notify/Method_Request_Lookup.inl :
	  Command object to lookup the consumer list in the Event_Map.
	  Also evaluates the ProxyConsumer and ConsumerAdmin filters.
	
        * orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.cpp :
        * orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.h :
        * orbsvcs/orbsvcs/Notify/Method_Request_Shutdown.inl:
	  Command Object to signal shutdown of the activation queue.

        * orbsvcs/orbsvcs/Notify/Notify_Service.cpp :
        * orbsvcs/orbsvcs/Notify/Notify_Service.h:
        * orbsvcs/orbsvcs/Notify/Notify_Service.inl :
	  Service Object that allows clients to create and manage Cos Notify
	  Factory.
	
        * orbsvcs/orbsvcs/Notify/Object.cpp:
        * orbsvcs/orbsvcs/Notify/Object.h:
        * orbsvcs/orbsvcs/Notify/Object.inl :
        * orbsvcs/orbsvcs/Notify/Object_T.cpp:
        * orbsvcs/orbsvcs/Notify/Object_T.h:
        * orbsvcs/orbsvcs/Notify/Object_T.inl :
	  Defines the base Notifiy Object that is used to implement the
	  basic behavior of Notify Classes.

        * orbsvcs/orbsvcs/Notify/POA_Helper.cpp:
        * orbsvcs/orbsvcs/Notify/POA_Helper.h :
        * orbsvcs/orbsvcs/Notify/POA_Helper.inl:
          A helper class that manages the lifetime of POA objects.
	
        * orbsvcs/orbsvcs/Notify/Peer.cpp:
        * orbsvcs/orbsvcs/Notify/Peer.h :
        * orbsvcs/orbsvcs/Notify/Peer.inl:
          Base class for Consuemrs and Suppliers that connect to the
          proxys.

        * orbsvcs/orbsvcs/Notify/Properties.cpp:
        * orbsvcs/orbsvcs/Notify/Properties.h :
        * orbsvcs/orbsvcs/Notify/Properties.inl:
          Holds the properties accessible globally.

        * orbsvcs/orbsvcs/Notify/Property.h:
          Forward declaration of the QoS/Admin properties supported by
          Notify.

        * orbsvcs/orbsvcs/Notify/PropertySeq.cpp:
        * orbsvcs/orbsvcs/Notify/PropertySeq.h:
        * orbsvcs/orbsvcs/Notify/PropertySeq.inl:
          A helper class to manage Property Sequences.

        * orbsvcs/orbsvcs/Notify/Property_Boolean.cpp:
        * orbsvcs/orbsvcs/Notify/Property_Boolean.h :
        * orbsvcs/orbsvcs/Notify/Property_Boolean.inl:
          Implementation of a oolean property type.

        * orbsvcs/orbsvcs/Notify/Property_T.cpp :
        * orbsvcs/orbsvcs/Notify/Property_T.h:
        * orbsvcs/orbsvcs/Notify/Property_T.inl:
          Template type for encapsulating Notify Property types.

        * orbsvcs/orbsvcs/Notify/Proxy.cpp :
        * orbsvcs/orbsvcs/Notify/Proxy.h:
        * orbsvcs/orbsvcs/Notify/Proxy.inl:
          Base Proxy type.

        * orbsvcs/orbsvcs/Notify/ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.h:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer.inl:
          Base class for all ProxyConsumers.

        * orbsvcs/orbsvcs/Notify/ProxyConsumer_T.cpp:
        * orbsvcs/orbsvcs/Notify/ProxyConsumer_T.h :
        * orbsvcs/orbsvcs/Notify/ProxyConsumer_T.inl:
          Template class that implements ProxyConsumer interface methods.       
 
        * orbsvcs/orbsvcs/Notify/ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.h:
        * orbsvcs/orbsvcs/Notify/ProxySupplier.inl:
          Base class for all ProxySuppliers.

        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.h :
        * orbsvcs/orbsvcs/Notify/ProxySupplier_T.inl:
          Template class that implements ProxySupplier interface methods.       

        * orbsvcs/orbsvcs/Notify/Proxy_T.cpp
        * orbsvcs/orbsvcs/Notify/Proxy_T.h :
        * orbsvcs/orbsvcs/Notify/Proxy_T.inl:
          Template class that implements Proxy interface
          methods.       

        * orbsvcs/orbsvcs/Notify/QoSProperties.cpp:
        * orbsvcs/orbsvcs/Notify/QoSProperties.h:
        * orbsvcs/orbsvcs/Notify/QoSProperties.inl:
          Container of the common QoS properties supported by the
          Notification.

        * orbsvcs/orbsvcs/Notify/Reactive_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.h:
        * orbsvcs/orbsvcs/Notify/Reactive_Task.inl:
          A worker task that executes the command object in the context
          of the caller thread. 

        * orbsvcs/orbsvcs/Notify/Refcountable.cpp:
        * orbsvcs/orbsvcs/Notify/Refcountable.h:
        * orbsvcs/orbsvcs/Notify/Refcountable.inl:
          A base class for Notify Objects that wish to be refcounted. 
          If a destroy_callback is supplied, it is invoked when the
          ref. count falls to 0.

        * orbsvcs/orbsvcs/Notify/Service.h :
	  Interface that defines a ACE_Service_Object for clients to
	  create Notify Factories. Using this clients can obtain various
	  types of the Notify Factory implementations. (CosNotify and
	  Real-Time Notify).  
	
        * orbsvcs/orbsvcs/Notify/Subscription_Change_Worker.cpp:
        * orbsvcs/orbsvcs/Notify/Subscription_Change_Worker.h:
        * orbsvcs/orbsvcs/Notify/Subscription_Change_Worker.inl:
	  Helper class for propagating Admin level subscription changes
          to proxys.

        * orbsvcs/orbsvcs/Notify/Supplier.cpp:
        * orbsvcs/orbsvcs/Notify/Supplier.h:
        * orbsvcs/orbsvcs/Notify/Supplier.inl:
          A base wrapper class for encapsulation the remote supplier
          that has connect to a proxy.  

        * orbsvcs/orbsvcs/Notify/SupplierAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.h:
        * orbsvcs/orbsvcs/Notify/SupplierAdmin.inl:
          Supplier Admin implementation.

        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.cpp:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.h:
        * orbsvcs/orbsvcs/Notify/ThreadPool_Task.inl:
          A worker task that creates a thread pool and executes the 
          enqueued Method_Request command objects in the worker thread 
          context.

        * orbsvcs/orbsvcs/Notify/Types.cpp
        * orbsvcs/orbsvcs/Notify/Types.h:
        * orbsvcs/orbsvcs/Notify/Types.inl:
          Class that defines the commonly used Types in Notification.

        * orbsvcs/orbsvcs/Notify/Worker_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Worker_Task.inl:
        Base abstract worker task that is used by Notification objects
        to execute a command object.

        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.h:
        * orbsvcs/orbsvcs/Notify/Any/AnyEvent.inl:
        Abstraction of the Any event received by a CosEvent Channel
        style proxy consumer.

        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.inl:
        Implementation of the CosEC ProxyPushConsumer

        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.cpp :
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h :
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.inl :
        Implementation of the CosEC ProxyPushSupplier.

        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.inl:
        Implementation of the Notification ProxyPushConsumer.

        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.inl:
        Implementation of the Notification ProxyPushSupplier.

        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.cpp :
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/PushConsumer.inl :
        Impkementation of the PushConsumer that connects to the Any
        style Proxy Supplier. 

        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.h :
        * orbsvcs/orbsvcs/Notify/Any/PushSupplier.inl:
        Implementation of the PushSupplier that connects to the Any
        style Proxy Consumer. 

        * orbsvcs/orbsvcs/Notify/Sequence/EventBatch.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/EventBatch.h:
        * orbsvcs/orbsvcs/Notify/Sequence/EventBatch.inl:
        Helper class that manages the Sequence proxy's EventBatch.

        * orbsvcs/orbsvcs/Notify/Sequence/Method_Request_Dispatch_EventBatch.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/Method_Request_Dispatch_EventBatch.h:
        * orbsvcs/orbsvcs/Notify/Sequence/Method_Request_Dispatch_EventBatch.inl:
        A command object that stores an event batch destined for
        dispatch to a sequence consumer.           

        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.inl:
        Implementation of the Notify SequenceProxyPushConsumer interface.

        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.inl:
        Implementation of the Notify SequenceProxyPushSupplier
        interface.

        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushConsumer.inl:
        Wrapper to manage the SequenceConsumer that connects to the
        Sequence Proxy.
 
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequencePushSupplier.inl:
        Wrapper to manage the SequenceSupplier that connects to the
        Sequence Proxy.
        
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredEvent.inl:
        Notify's StructuredEvent's internal representation in the
        Notification.

        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.inl:
        Implementation of the Notification StructuredProxyPushConsumer.

        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.inl:
        Implementation of the Notification StructuredProxyPushSupplier.

        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushConsumer.inl:
        Wrapper to manage the StructuredConsumer that connects to the
        Structured Supplier Proxy.
        
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredPushSupplier.inl:
          Wrapper to manage the StructuredSupplier that connects to the
          Structured Consumer Proxy.

        * orbsvcs/Notify_Service/Notify_Server.cpp:
        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.h:
        * orbsvcs/Notify_Service/svc.conf:

          Changes to obtain the Notification Factory via Service Object.

        * orbsvcs/orbsvcs/CosNotification.dsp:
        * orbsvcs/orbsvcs/Makefile.CosNotification:

          New source and idl files added.

Sat Oct 26 14:44:33 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/ORT/server.bor:
          Fixed this BCB makefile.

Sat Oct 26 14:03:59 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV/pluggable_av_log:
          Removed this file from the repo.

Sat Oct 26 13:59:33 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV/media_timer.cpp:
          Fixed incorrect include because of file rename.

Sat Oct 26 12:28:12  UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV/media-timer.{h,cpp}:
        * orbsvcs/orbsvcs/AV/media_timer.{h,cpp}:
          Renamed media-timer to media_timer because the BCB5 Static linker
          has problems with the - in the filename.

        * orbsvcs/orbsvcs/AV/RTCP.cpp:
        * orbsvcs/orbsvcs/AV.bor:
        * orbsvcs/orbsvcs/AV.dsp:
        * orbsvcs/orbsvcs/AV_Static.dsp:
        * orbsvcs/orbsvcs/Makefile.av:
          Updated these files because of the file rename

        * tests/ORT/ServerRequestInterceptor.h:
          Fixed fuzz error

Fri Oct 25 21:48:30 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/POA.cpp (adapter_name_i):

	  Fixed problem where the RootPOA's adapter name was not included
	  in the returned adapter name sequence.  CORBA 3.0 requires it to
	  be included.

	  Fixed incorrect nil POA reference check.  Use
	  "CORBA::is_nil(poa)" instead of
	  "poa == PortableServer::POA::_nil()".

	  Slightly optimized and cleaned up this method.

	* tests/ORT/ObjectReferenceFactory.idl:
	* tests/ORT/ObjectReferenceFactory.h:
	* tests/ORT/ObjectReferenceFactory.cpp:

	  New PortableInterceptor::ObjectReferenceFactory implementation
	  designed to excerise the
	  PortableInterceptor::IORInfo::current_factory() attributed, the
	  POA's ObjectReferenceFactory support.

	* tests/ORT/ServerORBInitializer.h:
	* tests/ORT/ServerORBInitializer.cpp:

	  New server side ORBInitializer that registers the new server
	  request interceptor and the existing IOR interceptor.

	* tests/ORT/ServerRequestInterceptor.h:
	* tests/ORT/ServerRequestInterceptor.cpp:

	  New server request interceptor thats tests some of the
	  ORT-specific methods in the ServerRequestInfo object passed to
	  the server request interception points.

	* tests/ORT/ORT_test_IORInterceptor.cpp (components_established):

	  Swap out the current ObjectReferenceFactory with the customized
	  ObjectReferenceFactory implemented by this test.  The goal is
	  test the PortableInterceptor::IORInfo::current_factory attribute
	  internals, in addition to the POA's
	  PortableInterceptor::ObjectReferenceFactory support.

	* tests/ORT/server.cpp (main):

	  Use a child POA when activating the servant and obtaining an
	  object reference for it.  This forces a POA hierarchy to be
	  reflected in the AdapterName sequence returned from
	  PortableInterceptor::ServerRequestInfo::adapter_name() instead
	  of a single (root) POA.

	  Removed TAO-specific calls on the TAO_ORB_Core.  The
	  equivalent portable calls in the
	  PortableInterceptor::ServerRequestInfo object will be invoked
	  via the new ServerRequestInterceptor instead.

	* tests/ORT/ORT_test_IORInterceptor_ORBInitializer.h:
	* tests/ORT/ORT_test_IORInterceptor_ORBInitializer.cpp:

	  Removed this ORBInitializer in favor of the new one described
	  above.

	* tests/ORT/ORT_test_IORInterceptor.h:
	* tests/ORT/ORT_test.idl:
	* tests/ORT/ORT_test_i.h:
	* tests/ORT/ORT_test_i.cpp:

	  Cosmetic updates.

	* tests/ORT/Makefile:
	* tests/ORT/server.bor:
	* tests/ORT/server.dsp:

	  Added new files and removed deprecated ones.

Fri Oct 25 09:56:51 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tao/ValueBase.h:
        * tao/ValueBase.i:
        * TAO_IDL/be/be_valuetype.cpp:

          Restored the const cast to pointer operator for valuetype _var
	  classes.

Fri Oct 25 09:49:31 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * examples/OBV/Typed_Events/Event_Types_impl.cpp:

          Added missing .in() in an assignment of _var class contents to a
	  pointer,  and 'this->' in several places where a member variable
	  is referenced. 

Thu Oct 24 19:48:21 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* Re-did this after the great reversion "Wed Oct 23 16:32:36 2002
	  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>"

Thu Oct 24 19:44:38 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp: Fixed Release
	  configurations.  Include paths, library paths, and library lists
	  have been added.

Thu Oct 24 19:32:08 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* Reverted the changes made in the following entries:
	Thu Oct 24 10:59:20 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Thu Oct 24 10:39:10 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Thu Oct 24 09:29:59 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Thu Oct 24 000:33:17 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Wed Oct 23 23:51:51 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Wed Oct 23 23:37:32 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Wed Oct 23 22:48:09 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>
	Wed Oct 23 16:32:36 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>
	Wed Oct 23 13:38:59 2002  Nanbor Wang  <nanbor@cs.wustl.edu>
	Wed Oct 23 10:26:59 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>.
	  Basically the changes made were not right. Hence the need for
	  reversion to yesterday mornings status.

Thu Oct 24 10:59:20 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * examples/Load_Balancing/Identity_Server.cpp:
        * examples/Load_Balancing_persistent/Identity_Server.cpp:
        * examples/POA/DSI/client.cpp:
          More replacement of char* with typedef name.

Thu Oct 24 10:39:10 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/LifeCycle_Service/Factory_Trader.cpp:
        * orbsvcs/examples/Log/Basic/TLS_Client.cpp:
        * orbsvcs/examples/Log/Event/Event_Supplier.cpp:
        * orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:
        * orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/orbsvcs/AV/Flows_T.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Connection_Manager.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.cpp:
        * orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
        * orbsvcs/tests/Property/client.cpp:
        * orbsvcs/tests/Property/server.cpp:

          More replacement of char* with typedef name.

Thu Oct 24 09:29:59 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          String literal conversions to typedef name that were overlooked in

          Wed Oct 23 23:37:32 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>.

Thu Oct 24 000:33:17 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * examples/POA/DSI/Database_i.cpp:
        * examples/POA/DSI/Database_i.h:
        * examples/RTCORBA/Activity/Activity.cpp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
	* orbsvcs/Notify_Service/Notify_Service.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.cpp:

	  Replaced char * arguments with corresponding typedefs in cases where
	  the IDL compiler now generates the typedef name.

Wed Oct 23 23:51:51 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tests/Makefile:
	* tests/Makefile.bor:
	* tests/TAO_Tests.dsw:

	  Added the new abstract interface test to the suite.

Wed Oct 23 23:37:32 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

	  Converted many occurrences of a string literal arg to the typedef name
	  'const cosPropertyService::PropertyName' since this is now what the
	  IDL compiler generates in the method signature.

	* orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:

	  Same as above for two overlooked occurrences of a string literal where
	  'const CosTrading::LinkName' is generated.

Wed Oct 23 22:48:09 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/examples/Log/Basic/Client.dsp:
        * orbsvcs/examples/Log/Event/Log_CEC_Simple_Consumer.dsp:
        * orbsvcs/examples/Log/Event/Log_CEC_Simple_Supplier.dsp:
        * orbsvcs/examples/Log/Notify/Log_Notify_Simple_Consumer.dsp:
        * orbsvcs/examples/Log/Notify/Log_Notify_Simple_Supplier.dsp:
        * orbsvcs/examples/Log/RTEvent/Log_RTEvent_Simple_Consumer.dsp:
        * orbsvcs/examples/Log/RTEvent/Log_RTEvent_Simple_Supplier.dsp:

	  Added all include and link paths - they somehow got wiped out.

Wed Oct 23 16:32:36 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/examples/CosEC/RtEC_Based/lib/Makefile: Added a check to
	  ensure that the contents are not compiled if the dependant
	  libraries are not available. Thanks to Sandeep Neema
	  <neemask@corvette.vuse.vanderbilt.edu> for reporting this.

Wed Oct 23 13:38:59 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp: Fixed Release
	  configurations.  Include paths, library paths, and library lists
	  were missing somwhow.

Wed Oct 23 11:21:50 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tests/Abstract_Interface/Abstract_Interface_Client.dsp:
	* tests/Abstract_Interface/Abstract_Interface_Server.dsp: Renamed
	  projects.

	* tests/Abstract_Interface/Abstract_Interface.dsw: Fixed project
	  paths.

Wed Oct 23 10:26:59 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_argument/arglist.cpp
        * TAO_IDL/be/be_visitor_argument/argument.cpp
        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp
        * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp
        * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp
        * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp
        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp
        * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp
        * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp
        * TAO_IDL/be/be_visitor_operation/rettype.cpp
        * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp
        * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp

	  Modified code generation to generate the typedef name for
	  typedef'd strings, along with the typedef name for the
	  corresponding _var and _out classes, when used in operation
	  parameters and inside generated function bodies. Generated
	  constructors for exceptions with typedef'd string members
	  were not changed - there seems to be no way to make happy
	  all the compilers we support. Thanks to Goran Stojsic
	  <goran.stojsic@etk.ericsson.se> for pointing out that
	  generating char* for typedef'd strings in operations
 	  parameters will prevent the application from using the
	  typedef name, since the compiler will report that a pure
	  virtual skeleton method was not overridden in such a case.
	  This fix will probably cause numerous headaches, but it is
	  the Right Thing (TM) to do, so the problems will be dealt
	  with as they appear.

        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp
        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h
        * orbsvcs/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.cpp
        * orbsvcs/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.h
        * orbsvcs/orbsvcs/Log/Log_i.cpp
        * orbsvcs/orbsvcs/Log/Log_i.h
        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.cpp
        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.h
        * orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
        * orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
        * orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
        * orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.h
        * orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp
        * orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.h
        * orbsvcs/orbsvcs/Property/CosPropertyService_i.cpp
        * orbsvcs/orbsvcs/Property/CosPropertyService_i.h
        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator.cpp
        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator.h
        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.cpp
        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.h
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.h
        * orbsvcs/orbsvcs/Trader/Trader.cpp
        * orbsvcs/orbsvcs/Trader/Trader.h
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.h
        * orbsvcs/orbsvcs/Trader/Trader_Utils.cpp
        * orbsvcs/orbsvcs/Trader/Trader_Utils.h
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp
        * Examples/Load_Balancing/Identity_Client.cpp
        * Examples/Load_Balancing/Load_Balancer_i.cpp
        * Examples/Load_Balancing/Load_Balancer_i.h
        * Examples/Load_Balancing_persistent/Identity_Client.cpp
        * Examples/Load_Balancing_persistent/Load_Balancer_i.cpp
        * Examples/Load_Balancing_persistent/Load_Balancer_i.h
        * Examples/OBV/Typed_Events/Event_Types_impl.cpp
        * tests/Param_Test/param_test_i.cpp
        * tests/Param_Test/param_test_i.h
        * orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp
        * orbsvcs/tests/Property/client.cpp
        * orbsvcs/tests/Trading/Offer_Exporter.cpp
        * orbsvcs/tests/Trading/Offer_Importer.cpp
        * orbsvcs/tests/Trading/Service_Type_Exporter.cpp
        * orbsvcs/tests/Trading/Simple_Dynamic.cpp
        * orbsvcs/tests/Trading/Simple_Dynamic.h

	  Application files modified to use string typedef names
	  instead of char*.

Tue Oct 22 23:31:45 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/DsLogAdmin.dsp: Added proper include paths for
	  the release builds.

Tue Oct 22 18:22:24 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/Logging_Service/*/*.dsp: Fixed the project files. There
	  are still some problems that needs ironing out.

Tue Oct 22 18:17:59 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/Notify/Notify_FilterFactory_i.cpp:
        * tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
        * tests/Notify/MT_Dispatching/Structured_Supplier.cpp:
        * tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.cpp:
        * tests/Notify/Structured_Filter/Structured_Consumer.cpp:
        * tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:

          Changed the string selecting the Extended Trader Constraint Language
          grammar from "ETCL" to EXTENDED_TCL" as required by the spec. Thanks
          to Dmitry Khrapov <yavannadil@yahoo.com> for reporting the oversight.

Tue Oct 22 17:53:58 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

	  Added a generated newline after the (optional) precompiled header
	  include. Thanks to Victor Kirk <vkirk@technology.serco.com> for
	  reporting the bug and submitting a patch.

Tue Oct 22 17:18:34 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/util/utl_identifier.cpp:
	* TAO_IDL/util/utl_scope.cpp:

	  Fixed a bug in handling the 'Object' keyword when it is
	  escaped. Thanks to Ole Husgaard <osh@sparre.dk> for reporting
	  the bug. This closes [BUGID:1324].

Tue Oct 22 15:11:09 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/orbsvcs/AV.dsp:
	* orbsvcs/orbsvcs/CosConcurrency.dsp:
	* orbsvcs/orbsvcs/CosEvent.dsp:
	* orbsvcs/orbsvcs/CosLifeCycle.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:
	* orbsvcs/orbsvcs/CosNaming.dsp:
	* orbsvcs/orbsvcs/CosNotification.dsp:
	* orbsvcs/orbsvcs/CosTime.dsp:
	* orbsvcs/orbsvcs/CosTrading.dsp:
	* orbsvcs/orbsvcs/DsLogAdmin.dsp:
	* orbsvcs/orbsvcs/FT_ORB.dsp:
	* orbsvcs/orbsvcs/Fault_Tolerance.dsp:
	* orbsvcs/orbsvcs/PortableGroup.dsp:
	* orbsvcs/orbsvcs/Svc_Utils.dsp: Went over all project files in
	  TAOACE.dsw and fixed the Custom Build settings for all IDL
	  files.  Some of the settings were missing for some reason.
	  Thanks to John Morey <jmorey@mmintl.com> for reporting the
	  problem.

Tue Oct 22 10:15:36 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Connection_Handler.cpp: Fixed a unused variable warning.

Mon Oct 21 23:17:32 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.dsp (RSC): Fixed
	  the project file to prevent compile errors on Win32.

Mon Oct 21 22:45:02 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	Bug fix for [BUGID 1269,1270]. Thanks to Carlos O'Ryan for
        donating this patch.

	* tao/Connection_Handler.cpp:
	* tao/Connection_Handler.h:
	* tao/Connection_Handler.inl:
	* tao/Connector_Impl.cpp:
	* tao/IIOP_Connection_Handler.cpp:
	* tao/IIOP_Connection_Handler.h:
	* tao/Invocation.cpp:
	* tao/LF_Connect_Strategy.cpp:
	* tao/Muxed_TMS.cpp:
	* tao/Notify_Handler.cpp:
	* tao/Synch_Refcountable.cpp:
	* tao/TAO_Server_Request.cpp:
	* tao/IIOP_Connector.cpp:
	* tao/IIOP_Transport.cpp:
	* tao/IIOP_Transport.h:
	* tao/Transport.cpp:
	* tao/Transport.h: Changes to the ORB Core. The details are as
	  follows

	  - It eliminates the two refcounts in the connection handler and
	    combines as one refcount.

	  - The transport_ field in the Connection_Handler class is
 	    atomically modified.

	  - Closing connections are also atomic.

	  - When the connection is closed all the activations in the
	    reactor are removed.

	  For all the other gory details like the motivation for these
	  changes, it is advised you refer to BUGID's 1202, 1269 and
	  1270.

	* tao/Strategies/DIOP_Connection_Handler.cpp:
	* tao/Strategies/DIOP_Connection_Handler.h:
	* tao/Strategies/DIOP_Transport.cpp:
	* tao/Strategies/DIOP_Transport.h:
	* tao/Strategies/SHMIOP_Connection_Handler.cpp:
	* tao/Strategies/SHMIOP_Connection_Handler.h:
	* tao/Strategies/SHMIOP_Transport.cpp:
	* tao/Strategies/SHMIOP_Transport.h:
	* tao/Strategies/UIOP_Connection_Handler.cpp:
	* tao/Strategies/UIOP_Connection_Handler.h:
	* tao/Strategies/UIOP_Transport.cpp:
	* tao/Strategies/UIOP_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:

	  Changes to the pluggable protocols to reflect the changes in the
	  ORB Core.


Mon Oct 21 21:51:07 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/DLL_ORB/Makefile.Tests_Client_Module: Added TAO_ROOT
	  definition to fix the compileation problems.

Mon Oct 21 18:17:06 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* rules.tao.GNU: Used awk for library versioning instead of
	  perl. Thanks to Craig Rodrigues for providing this patch.

Mon Oct 21 14:29:54 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* examples/AMH/Sink_Server/run_test.pl:
	* examples/Simple/time-date/run_test.pl:
	* orbsvcs/examples/RtEC/Simple/run_test.pl:
	* orbsvcs/examples/Security/Send_File/run_test.pl:
	* orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:
	* orbsvcs/tests/AVStreams/Multicast/run_test.pl:
	* orbsvcs/tests/CosEvent/Basic/run_test.pl:
	* orbsvcs/tests/EC_Mcast/run_test.pl:
	* orbsvcs/tests/EC_Throughput/run_test.pl:
	* orbsvcs/tests/Event/Basic/exhaustive_test.pl:
	* orbsvcs/tests/Event/Basic/run_test.pl:
	* orbsvcs/tests/Event/Performance/run_test.pl:
	* orbsvcs/tests/Miop/McastHello/run_test.pl:
	* orbsvcs/tests/Notify/Blocking/run_test.pl:
	* orbsvcs/tests/Notify/Discarding/run_test.pl:
	* orbsvcs/tests/Notify/MT_Dispatching/run_test.pl:
	* orbsvcs/tests/Notify/Ordering/run_test.pl:
	* orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/run_test.pl:
	* orbsvcs/tests/Notify/Sequence_Multi_Filter/run_test.pl:
	* orbsvcs/tests/Notify/performance-tests/Filter/run_test.pl:
	* orbsvcs/tests/Security/Big_Request/run_test.pl:
	* orbsvcs/tests/Security/Callback/run_test.pl:
	* orbsvcs/tests/Security/MT_SSLIOP/run_test.pl:
	* orbsvcs/tests/Security/Secure_Invocation/run_test.pl:
	* orbsvcs/tests/Security/SecurityLevel1/run_test.pl:
	* performance-tests/Cubit/TAO/IDL_Cubit/run_test.pl:
	* performance-tests/Cubit/TAO/IDL_Cubit/run_test_lite.pl:
	* performance-tests/Latency/Single_Threaded/default_configuration.pl:
	* performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/run-test.pl:
	* performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/run-test.pl:
	* performance-tests/RTCorba/Thread_Pool/native-svc.conf:
	* performance-tests/RTCorba/Thread_Pool/native-svc.conf.xml:
	* performance-tests/RTCorba/Thread_Pool/run_test.pl:
	* performance-tests/RTCorba/Thread_Pool/svc.conf-native:
	* performance-tests/Throughput/run_test.pl:
	* tests/AMI/run_test.pl:
	* tests/Connect_Strategy_Test/run_test.pl:
	* tests/Connection_Purging/run_test.pl:
	* tests/LongUpcalls/run_test.pl:
	* tests/MT_BiDir/run_test.pl:
	* tests/MT_Client/run_test.pl:
	* tests/MT_Server/run_test.pl:
	* tests/No_Server_MT_Connect_Test/run_test.pl:
	* tests/OctetSeq/run_test1.pl:
	* tests/OctetSeq/run_test2.pl:
	* tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl:
	* tests/RTCORBA/Server_Protocol/run_test.pl:
	* tests/Strategies/run_test.pl: Changed to use the svcconf file
	  extension ($PerlACE::svcconf_ext) defined in PerlACE::Run_Test
	  to switch between conventional svc.conf files and XML-based
	  svc.conf files.  The default file extension is ".conf".  To use
	  XML-based format, you need to define an environment variable
	  ACE_RUNTEST_SVCCONF_EXT as ".conf.xml".

Mon Oct 21 14:27:44 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/DLL_ORB/Makefile.Test_Client_Module:
	* tests/DLL_ORB/Makefile.Test_Server_Module: Fix for the makefile
	  problem that lead to a link being created for a library that
	  didnt exist. Thaks to Craig Rodrigues <crodrigu@bbn.com> for
	  providing the patch.

Mon Oct 21 06:38:41 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/DsLogAdmin.dsp: Fixed link errors in Win32
	  builds.

Mon Oct 21 11:03:06 UTC 2002  Don Hinton  <dhinton@ieee.org>

	* docs/compiler.html: Updated tao_idl compiler option documentation
	  for the "-t", temporary directory, options.

Sun Oct 20 08:18:28 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/ImplRepo_Service/Makefile: Fixed a typo that broke the minimum builds.

Sun Oct 20 00:23:03 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.cpp:
	  Renamed the variables loc1 and loc2 as location1 and
	  location2. The variables loc1 and loc2 is a legacy left over in
	  UNIX, which denotes pointers to characters matched by regular
	  expressions. This should fix compile errors in SunCC builds.

Sun Oct 20 00:10:14 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/ImplRepo_Service/Makefile: Fixed the problems with this
	  change "Fri Oct 18 15:52:11 2002 Priyanka Gontla
	  <pgontla@ociweb.com>".

Sat Oct 19 09:47:43 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Makefile: Prevent ImplRepo from being compiled
	  in minimum_corba setting. The fix "Fri Oct 18 15:52:11 2002
	  Priyanka Gontla  <pgontla@ociweb.com>" seems goofy. Need to get
	  Craig and Priyanka to take a look.

Sat Oct 19 08:40:46 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Log/EventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLog_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.h:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.h: Renamed the class
	  LogConsumer declared by the same name in all the translation
	  units as TAO_Rtec_LogConsumer, TAO_Notify_LogConsumer and
	  TAO_Event_LogConsumer. This should fix link time warnings in
	  SUNCC builds.

Fri Oct 18 23:32:11 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/AMH/Sink_Server/Timer_Handler.cpp (handle_timeout):

	  Changed the ResponseHandler to a _var instead of a _ptr. This
 	  not only takes care of deleting the pointer in exceptional
 	  circumstances but the code is also much cleaner.  Thanks to
 	  Ossama Othman <ossama.ece.uci.edu> for the tip and code-review.

Fri Oct 18 22:23:53 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:

          Fixed a problem with the SunCC preprocessor. When processing a
          non-quoted scoped name, as may occur in #pragma version, typeid,
          or typeprefix, this preprocessor regards the double colons as
          separate tokens and bookends them with spaces. Had to add code to
          check for this and strip out the spaces.

Fri Oct 18 16:49:04 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/run_test.pl:
	  Added the file to the new directory created for the test.

Fri Oct 18 16:11:23 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Log/Log_i.cpp (Log_i): Patch to prevent compile
	  errors on OpenBSD. Thanks to Frank Hunleth <frank@hunleth.com>
	  for the patch. The problem is because of a type conversion from
	  unsigned long to time_t. Looks like time_t is an int on
	  OpenBSD.

	* orbsvcs/orbsvcs/Log/Log_i.h: Some cosmetic fixes.

Fri Oct 18 16:09:37 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/README.txt:
	* orbsvcs/ImplRepo_Service/README:
	  Removed README and added README.txt instead as doxygen
	  is looking for only txt files besides the normal implementation,
	  header and inline files.

	  Thanks to Bala for pointing the reason why the index.html is not
	  getting generated via doxygen.

Fri Oct 18 15:52:11 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/tests/ImplRepo/Makefile:
	* orbsvcs/tests/ImplRepo/NameService/Makefile:
	* orbsvcs/ImplRepo_Service/Makefile:
	* orbsvcs/orbsvcs/Makefile:
	  Applied the patches provided by Craig Rodrigues so that
	  Implementation Repostory and related tests will be compiled
	  only when ImplRepo is added to the list of TAO_ORBSVCS
	  in platform_macros.

	  Thanks to Craig Rodrigues for pointing this out and for
	  the patches.

Fri Oct 18 15:59:58 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* examples/AMH/Sink_Server/mt_server.cpp:
	* examples/AMH/Sink_Server/st_server.cpp: Removed strange inl file
	  inclusions in the above files.

Fri Oct 18 15:56:04 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* examples/AMH/Sink_Server/Base_Server.h: Included the inline
	  file in the header file.

Fri Oct 18 15:46:29 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing: Removed the check for
	  'ami' and 'interceptors' from this file. Most of the Makefiles
	  in the orbsvcs adds the check in the top level Makefile, with a
	  reason.

	* orbsvcs/orbsvcs/Makefile: Moved the check here. The main reason
	  for having the check here is that, once the list of Makefiles
	  that needs to be run is built, it writes out the
	  ORBSVCS_COMPONENTS.list file,  even if the actual Makefile for the
	  said service is not executed. This creates problems for the
	  tests and examples that depends on the contents within the
	  ORBSVCS_COMPONENTS.list file.

Fri Oct 18 15:40:11 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/ImR_Activator.bor:
	  Corrected the NAME of the executable.
	  Thanks to Christian Barheine <cbarheine@sympatec.com>
	  for finding the problem and also for the patch.

Fri Oct 18 10:30:20 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* examples/AMH/Sink_Server/Base_Server.cpp: Fixed a warning in
	  g++ builds.

Thu Oct 17 18:35:29 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/AMH/Sink_Server/Base_Server.inl:
	* examples/AMH/Sink_Server/Client_Task.cpp:
	* examples/AMH/Sink_Server/Client_Task.h:
	* examples/AMH/Sink_Server/MT_AMH_Server.cpp:
	* examples/AMH/Sink_Server/MT_AMH_Server.h:
	* examples/AMH/Sink_Server/Timer_Handler.h:
	* examples/AMH/Sink_Server/AMH_Servant.cpp:
	* examples/AMH/Sink_Server/AMH_Servant.h:
	* examples/AMH/Sink_Server/Base_Server.cpp:
	* examples/AMH/Sink_Server/Base_Server.h:
	* examples/AMH/Sink_Server/Makefile:
	* examples/AMH/Sink_Server/README:
	* examples/AMH/Sink_Server/Sink_Server.mpc:
	* examples/AMH/Sink_Server/Timer_Handler.cpp:
	* examples/AMH/Sink_Server/client.bor:
	* examples/AMH/Sink_Server/client.cpp:
	* examples/AMH/Sink_Server/mt_server.bor:
	* examples/AMH/Sink_Server/mt_server.cpp:

	  Addressed number of @@ comments left by Ossama on previous
	  code-review. Fleshed out classes into .h and .cpp and .inl
	  files, added more error-handling, compliance to ACE/TAO
	  coding-rules, passing by references instead of pointers/value,
	  and tons of other fixes.  Thanks Ossama!

Thu Oct 17 14:45:08 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/PortableServer/AMH_Response_Handler.cpp:

	  Changed all the 'transport->send_message ()' from the default
	  parameter for 'message_semantics' (TAO_Transport::Two_Way) to
	  TAO_Transport::TAO_Reply.  Doing this blocks the sender until
	  the reply is sent. This change suggested by Balachandran
	  Natarajan <bala@isis-server.isis.vanderbilt.edu> fixes a bug
	  reported by Martin Johnson <mjhn@bigpond.net.au> where an AMH
	  server crashed when it was sending back huge payload (>16K) to a
	  multithreaded (>50) client.

Thu Oct 17 14:47:50 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (populate_object_group, process_criteria):

	  Explicitly cast an unsigned short value to unsigned long.
	  Borland C++ apparently gets confused and assumes that the
	  unsigned short value is signed.  Silences a warning.

Thu Oct 17 21:04:49 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/Log/Log_i.cpp: Add missing template instantiation
	  TAO_Unbounded_Sequence<DsLogAdmin::TimeInterval>.

Thu Oct 17 12:19:32 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Makefile:

	  Added the Messaging and Naming library to the link line.

Thu Oct 17 11:58:49 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_valuetype.cpp:

	  Fixed a bug in code generation of the inheritance list for
	  valuetypes that support abstract interfaces.

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

	  Fixed a mistake in the changes made in

	  Wed Oct 16 17:16:38 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

	  and made the same changes to code generation for abstract
	  interfaces.

        * tao/ObjectReferenceTemplateC.cpp:
        * tao/ObjectReferenceTemplateC.h:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/PortableServer/Default_ORTC.cpp:
        * tao/PortableServer/Default_ORTC.h:

	  Modified hand-crafted code to correspond to the changes above.

Thu Oct 17 10:47:32 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Makefile:

	  Check whether the CosLoadBalancing library was built. This
	  check was there already but at the wrong place.

Wed Oct 16 17:16:38 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

          Fixed a problem with MSVC not being able to invoke fully
          qualified member methods (except in the initializer), which
          appeared when the _tao_obv_narrow() method calls the
          corresponding method of a base class. If the base class has
          the same local name, the ACE_NESTED_CLASS macro breaks and
          the call goes into an endless loop. For MSVC, identical
          methods using the flat name are generated for each class,
          and called by derived classes. Thanks to Don Hinton
          <dhinton@ieee.org> for reporting the bug and Jon Franklin
	  <jfranklin@dctd.saic.com> for providing a patch.

Wed Oct 16 12:37:07 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Makefile:
	  Added the new Makefile to compile "directories" under this
	  directory.

Wed Oct 16 12:23:29 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu

	* orbsvcs/tests/LoadBalancing/GenericFactory:
	  Added a new directory "Application_Controlled".
	  This directory contains all the files required for testing
	  the object group creation and deletion with
	  application-controlled membership.

Wed Oct 16 11:49:21 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/fe/idl.ll:
	* TAO_IDL/fe/lex.yy.cpp:
	* TAO_IDL/ast/ast_decl.cpp:
	* TAO_IDL/util/utl_scope.cpp:
	* TAO_IDL/include/ast_decl.h:
	* TAO_IDL/include/utl_scope.h:

	  Fixed a bug in typeprefix propagation by moving a class member
	  and accessors from UTL_Scope to AST_Decl, and changing code
	  where the accessors are called.

Tue Oct 15 20:05:48 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/run_test.pl:

	  Use TerminateWaitKill() instead of WaitKill() when terminating
	  the LoadManager binary.  The LoadManager handles the SIGTERM and
	  SIGINT signals to allow for graceful shutdown in order to clean
	  up remote resources.  TerminateWaitKill() sends a SIGTERM signal
	  (as opposed to SIGKILL) to the process in question, thus
	  giving the LoadManager the chance to shutdown gracefully.  This
	  addresses a bogus exit status from the LoadManager binary.

Tue Oct 15 19:49:53 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_Group_Guard.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Group_Guard.cpp:

	  New guard implementation designed to improve exception safety
	  when creating object groups.  It is used internally by the
	  TAO_PG_GenericFactory class.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
	  (delete_object_i):

	  Made this method public so that the new TAO_PG_Group_Guard class
	  may invoke it.

	  (populate_object_group):

	  Made factory creation ID argument "const" to prevent subtle bugs
	  from being potentially introduced in the future.

	  This method now accepts a reference to the factory set
	  associated with a given factory creation ID.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (create_object):

	  The factory set is now instantiated in this method and passed to
	  the populate_object_group() method.  This change was necessary
	  to improve exception safety when cleaning up resources created
	  during a failed attempt at creating an object group.

	  Use a TAO_PG_Group_Guard to improve exception safety in the
	  presence of a failed object group creation attempt.

	  (delete_object):

	  Upon successful destruction of remote object group members
	  through their corresponding factories, unbind the factory set
	  that contained those factories from the internal factory map.
	  Closes a resource leak.

	  (process_criteria):

	  If the desired minimum number of members is less than the number
	  of supplied GenericFactorys, add a new element containing the
	  name and value of the MinimumNumberMembers property to the unmet
	  criteria sequence that is the attribute of the
	  PortableGroup::CannotMeetCriteria exception to be thrown.

Tue Oct 15 17:34:07 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp:
	  Made a change in the delete_object () function.
	  There is a check to see if the factory set is bound
	  to the factory map or not. If we do not find an entry
	  in the map, a exception was thrown.
	  In the case of application-controlled membership, we do
	  not have a factory set bound to the factory map at all.
	  So the else case can be removed.
	  Thanks to Ossama Othman <ossama@uci.edu> for helping
	  me track down this problem.

Tue Oct 15 17:25:04 2002  Krishnakumar B  <kitty@cse.wustl.edu>

        * orbsvcs/ImplRepo_Service/Makefile: Updated dependencies.

Tue Oct 15 17:03:01 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tests/Abstract_Interface/server.cpp:
	* tests/Abstract_Interface/client.cpp: TAO_ENV* macros were
	  used. Changed those to use ACE_ENV* macros. This shodl also fix
	  a fuzz error with this test.

Tue Oct 15 12:55:00 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile.SSLIOP (CPPFLAGS, LDFLAGS, LIBS):

	  Append PLATFORM_SSL_{CPPFLAGS,LDFLAGS,LIBS} to each of these
	  variables, respectively.  Addresses build issues on platforms
	  where OpenSSL is not installed in a location known to the
	  compiler and linker.  Thanks to Werner Buchert <medat.de> for
	  pointing out the problem.

Tue Oct 15 14:31:49 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:

          Changed the type of a local variable to match the signature of the
          method call it is passed to. Thanks to Werner Buchert
          <w.buchert@medat.de> for reporting the bug.

Tue Oct 15 14:10:29 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tests/IDL_Test/Makefile:

          Updated dependencies.

Tue Oct 15 13:34:15 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/fe/lex.yy.cpp:
	* TAO_IDL/fe/idl.ll:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_idlist.cpp:
        * TAO_IDL/util/utl_scope.cpp:

	  Changes to make a typeprefix directive in an inner scope override
	  one in an outer scope, even if the outer scope directive comes later
	  in the IDL file. These changes were documented in, but mistakenly
	  left out of

	  Mon Oct 14 15:44:05 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

Tue Oct 15 11:43:40 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tests/Abstract_Interface/test_i.cpp:

          Fixed an incorrect environment macro.

        * tests/Abstract_Interface/Makefile:

          Updated dependencies.

Tue Oct 15 11:16:37 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:

          Refinement of earlier fix to avoid incorrect generated code in the
          interceptor class of an operation that returns a string.

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Fixec a bug in code generation for abstract interfaces.

Tue Oct 15 10:48:46 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/CDR_Encaps_Codec.cpp: Cosmetic fix.

Tue Oct 15 10:05:01 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/PortableServer/Default_ORTC.cpp:
        * tao/PortableServer/Default_ORTC.h:

          Fixed some things I overlooked before get these files to match up
          with generated code.

Mon Oct 14 18:52:06 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_Default_Property_Validator.cpp
	  (validate_criteria):

	  Reduce the length of the invalid criteria sequence in an effort
	  to optimize the copying that will occur when the
	  PortableGroup::InvalidCriteria exception is thrown.  Reducing
	  the length is fast since no deallocations should occur.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
	  (populate_object_group):

	  Accept an "initial number of members" value.  It will be used
	  when creating the initial object group members via the
	  infrastructure.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (create_object, process_criteria):

	  Moved criteria validation code to the process_criteria() method.

	  Verify that the InitialNumberMembers property is larger than the
	  MinimumNumberMembers property.  It doesn't make sense to create
	  members numbering less than the minimum.  Throw a
	  PortableGroup::CannotMeetCriteria exception in that case.

	  Populate the "unmet_criteria" attribute of the
	  PortableGroup::CannotMeetCriteria exception before throwing that
	  exception.  Previously, a default constructed exception was
	  thrown.

	  (populate_object_group):

	  In the infrastructure controlled membership case, initially
	  create the number of members specified in the
	  InitialNumberMember property.  Previously, the number of initial
	  members was the same as the number of FactoryInfos, which is
	  undesirable since members were always automatically created.

	* orbsvcs/orbsvcs/PortableGroup/PG_conf.h
	  (TAO_PG_MINIMUM_NUMBER_MEMBERS):

	  The default minimum number of members value should always be
	  equal to (or greater) the default initial number of members
	  value (TAO_PG_INITIAL_NUMBER_MEMBERS).  This is a precautionary
	  measure to meant avoid errors introduced by only changing one of
	  the default values.

Mon Oct 14 19:21:19 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/examples/Log/RTEvent/Makefile: Added a missing library.

Mon Oct 14 17:50:12 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tests/Abstract_Interface/Abstract Interface Client.dsp:
        * tests/Abstract_Interface/Abstract Interface Server.dsp:
        * tests/Abstract_Interface/Abstract_Interface.dsw:
        * tests/Abstract_Interface/Makefile:
        * tests/Abstract_Interface/Makefile.bor:
        * tests/Abstract_Interface/README:
        * tests/Abstract_Interface/client.bor:
        * tests/Abstract_Interface/client.cpp:
        * tests/Abstract_Interface/run_test.pl:
        * tests/Abstract_Interface/server.bor:
        * tests/Abstract_Interface/server.cpp:
        * tests/Abstract_Interface/test.idl:
        * tests/Abstract_Interface/test_i.cpp:
        * tests/Abstract_Interface/test_i.h:

	  New test for abstract interfaces.

Mon Oct 14 17:35:56 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tao/PortableServer/Default_ORTC.cpp:
        * tao/PortableServer/Default_ORTC.h:

          Modified these files to correspond with changes to generated code in

          Mon Oct 14 15:44:05 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

Mon Oct 14 17:15:23 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

	* tests/IDL_Test/repo_id_mod.idl:

	  New file added to test 'typeprefix', 'typeid' and #pragma version.

        * tests/IDL_Test/Makefile:
	* tests/IDL_Test/Makefile.bor:
	* tests/IDL_Test/idl_test.dsp:
	* tests/IDL_Test/main.cpp:

	  Files modified with addition of new test to the suite.

Mon Oct 14 15:44:05 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:

	  Fixed mistakes in code generation for sequences of valuetypes.
	  Thanks to Sean M. Paus <spaus@cdtd.saic.com> for pointing out
	  the problem.

        * TAO_IDL/be/be_visitor_root/root.cpp:

	  Fixed cut and paste error in visitor instantiation for generation
	  of Any operators for forward declared interfaces. Thanks to
	  Antonio Saraiva <Antonio_Saraiva@csgsystems.com> for reporting the
	  bug.

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/util/utl_idlist.cpp:

	  Changed behavior of typeprefix so that an inner scope directive
	  overrides an outer one. This behavior is not explicitly required
	  by the CORBA specification, but it is assumed that this is the
	  intention. This point will be submitted as an OMG issue shortly.
	  Thanks to Jonathan Biggar <jon@floorboard.com> for his advice on
	  this matter

        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:

	  Fixed a problem with interceptors where there is a name clash
	  if an operation has a return type called 'result'. Thanks to
	  Ossama <ossama@doc.ece.uci.edu> for suggesting the fix.

        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

	  Fixed another name clash with the 'result' identifier, this
	  time in the body of the Any extraction operator.

        * tao/ValueBase.h:
        * tao/ValueBase.i:
        * tao/ValueFactory.h:
        * tao/ValueFactory.i:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

	  Removed both cast operators from class ValueFactoryBase_var,
	  since they do not appear in the C++ mapping, and removed the
	  const cast operator from ValueBase_var, since it was causing a
	  problem with the HP-UX 11.11 compiler, and valuetypes do not
	  support const operations anyway. Thanks to Torsten Kuepper
	  <Torsten.Kuepper@nokia.com> for the bug report and the valuetype
	  expertise.

        * tao/corbafwd.h:

	  Added dk_Event to enum DefinitionKind.

Mon Oct 14 11:32:16 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* docs/releasenotes/index.html:

	  Amended entry to show new status of Telecom Log Service.
	  Changed point of contact to D A Hanvey.

Sun Oct 13 22:14:23 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile: Added
	  a missing library  to the Makefile.

Sun Oct 13 13:47:21 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/server.cpp:
	  Changed the name of the Class LB_Basic_Test to LB_server to
	  be in sync with the name of the file.
	  Also changed the semantics of the destroy () method to
	  resolve the compiler errors.

Sat Oct 12 22:59:15 2002  Krishnakumar B  <kitty@cse.wustl.edu>

        * orbsvcs/ImplRepo_Service/XML_ContentHandler.h:
        * orbsvcs/ImplRepo_Service/XML_ContentHandler.cpp:
        * orbsvcs/ImplRepo_Service/Server_Repository.cpp:

          Changed to support the native exception in ACEXML.

Fri Oct 11 12:18:11 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Makefile:

	  Added `LoadBalancing' test directory to the directory list.

	* orbsvcs/tests/LoadBalancing/Makefile:

	  New top-level Load Balancing test Makefile.

	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/server.cpp:

	  More code review comments.

	* orbsvcs/tests/LoadBalancing/GenericFactory/Makefile:

	  Only build this test if the "CosLoadBalancing" ORBSVCS component
	  was built.

Fri Oct 11 10:38:26 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (locations_of_members):

	  Made reference to TAO_PG_MemberInfoSet non-const once again
	  since const iterators for the ACE_Unbounded_Set container are
	  currently unimplemented.  Fixes a compile-time problem.

Fri Oct 11 09:59:59 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (remove_member):

	  Added implementations for this method.

Fri Oct 11 09:41:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile:

	  Re-enabled the Telecom Logging Service by default.

	  Fixed some Telecom Logging Service dependencies.

Thu Oct 10 16:03:08 2002  Ossama Othman  <othman@cs.wustl.edu>

        * TAO version 1.2.5 released.

Thu Oct 10 07:27:19 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Svc_Utils.dsp:

	  Fixed typo in TAO_IDL "pre_include" directive in the DLL Release
	  configuration custom build step for TimeBase.idl.  "pre_include"
	  was spelled "pre_incluxde".  Fixes "more pops than pushes"
	  #pragma warnings in Win32 DLL Release builds.

Wed Oct  9 13:30:54 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/DsLogAdmin_Static.dsp:
	* orbsvcs/orbsvcs/FT_ORB.dsp:

	  Removed redundant and unnecessary "-I../../tao" TAO_IDL
	  preprocessor directive.  Addresses some compile-time errors.

Wed Oct  9 13:25:31 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:
	* orbsvcs/orbsvcs/RTEventLog.dsp:

	  Fixed custom build step for the "DLL Release" configuration.
	  Previously, the Microsoft IDL compiler "midl" was invoked by
	  default, which is obviously incorrect.  TAO's IDL compiler is
	  now invoked.

Wed Oct  9 09:56:40 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.h:

	  No need to explicitly include "tao/corba.h".

	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:

	  DOC group coding style fixes.

Wed Oct  9 09:28:28 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE.dsw:
	* TAOACE_Static.dsw:

	  Corrected project dependencies for DsNotifyLogAdmin project.

	* orbsvcs/orbsvcs/Svc_Utils.dsp:

	  More fixes for redundant "-I../../tao" preprocessor directives.
	  Addresses compile-time problems in the "DLL Release"
	  configuration.

	* orbsvcs/orbsvcs/Makefile (TAO_ORBSVCS):

	  Due to popular demand and broken builds, temporarily removed the
	  four Logging Services from the list of ORB services to build.

Tue Oct  8 16:28:05 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Test.idl:
	* orbsvcs/tests/LoadBalancing/GenericFactory/client.cpp:
	  Addressed the code review comments by Ossama.

Tue Oct  8 11:56:39 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LoadBalancer_i.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LoadBalancer_i.h:
	* orbsvcs/orbsvcs/LoadBalancing/LoadBalancer_i.i:
	* orbsvcs/orbsvcs/LoadBalancing/LoadBalancing_Strategy.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LoadBalancing_Strategy.h:
	* orbsvcs/orbsvcs/LoadBalancing/LoadBalancing_Strategy.i:
	* orbsvcs/orbsvcs/LoadBalancing/Minimum_Dispersion.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/Minimum_Dispersion.h:
	* orbsvcs/orbsvcs/LoadBalancing/ReplicaLocator.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/ReplicaLocator.h:
	* orbsvcs/orbsvcs/LoadBalancing/ReplicaProxy.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/ReplicaProxy.h:
	* orbsvcs/orbsvcs/LoadBalancing/ReplicaProxy.i:
	* orbsvcs/orbsvcs/LoadBalancing/Round_Robin_Strategy.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/Round_Robin_Strategy.h:

	  Removed sources left over from the old load balancer prototype.
	  They are no longer used.

Tue Oct  8 11:29:21 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/LogRecordStore.cpp:

	  Removed explicit template instantion for
	  ACE_Equal_To<DsLogAdmin::RecordId>.  A DsLogAdmin is a 64 bit
	  unsigned interger.  A template specialization for such an
	  integer already exists in "ace/Functor.*"  Fixes a compile-time
	  problem in explicit template instantation builds.

Tue Oct  8 10:05:50 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Svc_Utils.dsp:

	  Removed redundant/unnecessary "-I../../tao" TAO_IDL preprocessor
	  directive.  Redundant directives currently cause problems in
	  generated stubs.  Fixes a compile-time problem in Windows "DLL
	  Release" builds.

Tue Oct  8 09:44:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/Logging_Service/Basic_Logging_Service/Makefile (LDLIBS):

	  No need to link the TAO_Messaging library.  Addresses a
	  link-time error in builds that disable CORBA Messaging support.

Tue Oct  8 09:36:38 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile (MKLIST):

	  The basic Telecom Logging Service library code depends on the
	  TAO_ETCL library.  Build the latter when building the logging
	  service library.  Addresses some link-time errors.

Tue Oct  8 09:15:44 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile
	  (LDLIBS):

	  Explicitly link the TAO_Svc_Utils library to the service
	  binary.  This is necessary for statically linked builds.

Tue Oct  8 11:15:04 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/examples/Log/Notify/Makefile:

	  Added missing library link - DsEventLogAdmin.

Mon Oct  7 17:35:28 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/DsLogAdmin.dsp:

	  Added missing TAO_ETCL{d}.lib to the library link/input list.
	  Addresses "unresolved symbol" link-time errors in MSVC++ 6.0
	  builds.

Mon Oct  7 17:16:42 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/DsLogAdmin_Static.dsp:

	  Added missing `DsLogNotification.idl' and corresponding
	  stub/skeleton files to the project.  Addresses build problems in
	  our Win32 static builds.

Mon Oct  7 17:04:45 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE.dsw:
	* TAOACE_Static.dsw:

	  Added missing Telecom Logging Service projects and project
	  dependencies.

Mon Oct  7 16:49:28 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile.DsLogAdmin (ACE_SHLIBS):
	* orbsvcs/orbsvcs/Makefile.DsEventLogAdmin (ACE_SHLIBS):
	* orbsvcs/orbsvcs/Makefile.DsNotifyLogAdmin (ACE_SHLIBS):
	* orbsvcs/orbsvcs/Makefile.RTEventLogAdmin (ACE_SHLIBS):

	  More library link order corrections.

Mon Oct 07 15:18:52 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* examples/PluggableUDP/tests/SimplePerformance/client.dsp:
	* examples/PluggableUDP/tests/SimplePerformance/server.dsp:
	* examples/TypeCode_Creation/TypeCode_Creation.dsp:
	* orbsvcs/IFR_Service/TAO_IFR_BE_DLL.dsp:
	* orbsvcs/IFR_Service/tao_ifr.dsp:
	* orbsvcs/examples/Notify/Subscribe/Subscribe.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:
	* orbsvcs/orbsvcs/DsEventLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:
	* orbsvcs/orbsvcs/RTEventLog.dsp:
	* orbsvcs/orbsvcs/ETCL/ETCL.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:
	* tao/Domain/TAO_Domain.dsp:
	* tao/DynamicInterface/TAO_DynamicInterface_Static.dsp:
	* tao/IFR_Client/TAO_IFR_Client.dsp:
	* tao/IFR_Client/TAO_IFR_Client_Static.dsp:
	* tao/TypeCodeFactory/TypeCodeFactory.dsp:
	* tao/TypeCodeFactory/TypeCodeFactory_Static.dsp:
	* tests/MT_Timeout/MT_Timeout_Server.dsp: Disabled the generation
	  of precompiled headers.  They were taking up too much disk space
	  on the nightly build machines.  Thanks to Ossama for noticing
	  this.

Mon Oct  7 10:14:10 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/examples/Log/Basic/Makefile:
	* orbsvcs/examples/Log/Event/Makefile:
	* orbsvcs/examples/Log/Notify/Makefile:
	* orbsvcs/examples/Log/RTEvent/Makefile:

	  Fixed order library link order.

	  Corrected TAO_ORBSVCS component checks where appropriate.
	  Addresses some minimum CORBA build issues.

Mon Oct  7 17:07:10 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/PortableServer/Servant_Base.cpp:
	  Remove explicit template instantiations for ACE_Atomic_Op.
	  They are now being instantiated in ACE.

Mon Oct  7 17:45:02 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/Logging_Service/Basic_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/Event_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile:

	  Fixed order of LDLIBS.

Sun Oct  6 09:35:07 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/Logging_Service/Event_Logging_Service/Makefile (LDLIBS):
	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile (LDLIBS):
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile (LDLIBS):
	* orbsvcs/Logging_Service/Basic_Logging_Service/Makefile (LDLIBS):

	  Corrected order of libraries to link.  Order matters on UNIX
	  platforms.  Addresses some "undefined reference" errors.

Sun Oct  6 09:28:18 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile (MKLIST):

	  The new Telecom Logging Service implementation depends on other
	  services in some cases.  Build those other services if
	  necessary.  Addresses minimum CORBA build issues.

	  Added {Event,Notify,RTEvent} Logging service specific
	  "TAO_ORBSVCS" components.  Previously "Log" was used for all
	  four logging service types.  That was too coarse-grained to
	  allow disabling builds of some logging services when other
	  services they depend on are not built.

	* orbsvcs/Logging_Service/Event_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile:

	  Only build the service if its corresponding TAO_ORBSVCS
	  component was built.  Addresses minimum CORBA build issues.

Sun Oct  6 08:44:27 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/Object_Adapter.cpp (init):

	  Fixed "unused argument" warnings.

	* orbsvcs/orbsvcs/Log/Log_i.cpp (set_week_mask):

	  Fixed "multiple variable definition" error exhibited by MSVC++
	  6.0.  MSVC++ 6.0 doesn't correctly handle variables declared in
	  a "for" scope.  They are visible outside the "for" scope.  This
	  sometimes causes "multiple variable definition" errors when a
	  variable of the same name is declared both in the "for" scope
	  and outside it.

Fri Oct  4 19:31:51 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Makefile:
	* orbsvcs/tests/LoadBalancing/GenericFactory/client.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/server.cpp:
	  Fixed the code review comments given by Ossama.

Fri Oct 04 19:23:08 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tao/PortableServer/Object_Adapter.cpp (init):
	* tao/PortableServer/PortableServer.cpp: Moved the registration of
	  PortableServer_ORBInitializer with the
	  PortableInterceptor::ORBInitializer to the
	  Object_Adapter_Factory::init().  This way we don't do the
	  registration in the static constructor of POA_Initializer and
	  thus avoid the problem described in Bug 1315.

	  Thanks to Ossama for pointing out this problem.

Fri Oct  4 18:07:35 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.dsw:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.dsp:

	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.dsw:
	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.dsp:

	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.dsw:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.dsp:

	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.dsw:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.dsp:

	* orbsvcs/Logging_Service/Logging_Service.dsw:

	  Files added.

Fri Oct  4 18:03:17 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.dsw:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.dsp:

	  Files added.

Fri Oct  4 17:56:04 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/examples/Log/Basic/Client.dsw:
	* orbsvcs/examples/Log/Basic/Client.dsp:

	* orbsvcs/examples/Log/Event/Simple.dsw:
	* orbsvcs/examples/Log/Event/Log_CEC_Simple_Consumer.dsp:
	* orbsvcs/examples/Log/Event/Log_CEC_Simple_Supplier.dsp:

	* orbsvcs/examples/Log/Notify/Simple.dsw:
	* orbsvcs/examples/Log/Notify/Log_Notify_Simple_Consumer.dsp:
	* orbsvcs/examples/Log/Notify/Log_Notify_Simple_Supplier.dsp:

	* orbsvcs/examples/Log/RTEvent/Simple.dsw:
	* orbsvcs/examples/Log/RTEvent/Log_RTEvent_Simple_Consumer.dsp:
	* orbsvcs/examples/Log/RTEvent/Log_RTEvent_Simple_Supplier.dsp:

	  Files added.

Fri Oct  4 17:52:17 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/RTEventLog.dsp:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.dsp:
	* orbsvcs/orbsvcs/DsEventLogAdmin.dsp:

	  Files added for Logging Service.

	* orbsvcs/orbsvcs/DsLogAdmin.dsp:

	  Amended to include LogNotification and
	  DsLogNotification.idl.

Fri Oct  4 17:50:06 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* TAOACE.dsw:

	  New projects added - DsLogAdmin
	                       DsEventLogAdmin
	                       DsNotifyAdmin
	                       RTEventLog

	* orbsvcs/orbsvcs/orbsvcs.dsw

	  New projects added - DsLogAdmin
	                       DsEventLogAdmin
	                       DsNotifyAdmin
	                       RTEventLog

	* orbsvcs/tests/tests.dsw

	  New project added - Basic_Log_Test.dsp

Fri Oct  4 14:01:05 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.h:
	* orbsvcs/tests/Log/Basic_Log_Test/client.cpp:

	  Emulated exceptions fixed.

Fri Oct  4 13:56:19 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.h:

	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.h:

	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Server.cpp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:

	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.cpp:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.h:

	  Emulated exceptions fixed.

Fri Oct  4 13:51:22 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/examples/Log/Basic/main.cpp:
	* orbsvcs/examples/Log/Basic/TLS_Client.cpp:
	* orbsvcs/examples/Log/Basic/TLS_Client.h:

	* orbsvcs/examples/Log/Event/Event_Consumer.cpp:
	* orbsvcs/examples/Log/Event/Event_Consumer.h:
	* orbsvcs/examples/Log/Event/Event_Supplier.cpp:
	* orbsvcs/examples/Log/Event/Event_Supplier.h:

	* orbsvcs/examples/Log/Notify/Notify_Consumer.cpp:
	* orbsvcs/examples/Log/Notify/Notify_Consumer.h:
	* orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:
	* orbsvcs/examples/Log/Notify/Notify_Supplier.h:

	* orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.cpp:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.h:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.h:

	  Emulated exceptions fixed.

Fri Oct  4 13:41:44 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/BasicLog_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/Iterator_i.cpp:
	* orbsvcs/orbsvcs/Log/Log_i.cpp:
	* orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
	* orbsvcs/orbsvcs/Log/LogNotification.cpp:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.cpp:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
	* orbsvcs/orbsvcs/Log/LogRecordStore.cpp:
	* orbsvcs/orbsvcs/Log/LogRecordStore_persist.cpp:
	* orbsvcs/orbsvcs/Log/PersistStore.cpp:

	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/BasicLog_i.h:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/EventLog_i.h:
	* orbsvcs/orbsvcs/Log/EventLogNotification.h:
	* orbsvcs/orbsvcs/Log/RTEventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.h:
	* orbsvcs/orbsvcs/Log/RTEventLogNotification.h:
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.h:
	* orbsvcs/orbsvcs/Log/Iterator_i.h:
	* orbsvcs/orbsvcs/Log/Log_i.h:
	* orbsvcs/orbsvcs/Log/LogMgr_i.h:
	* orbsvcs/orbsvcs/Log/LogNotification.h:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Log/LogRecordStore.h:
	* orbsvcs/orbsvcs/Log/LogRecordStore_persist.h:
	* orbsvcs/orbsvcs/Log/PersistStore.h:

	  Emulated exception fixes.

Thu Oct  3 18:26:48 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/run_test.pl:

	  Fixed problem where server process was not spawned with correct
	  command line arguments.  The server must know what the
	  LoadManager's IOR is.

	  Give time for the LoadManager to create its IOR file before
	  spawning the server process.

	* orbsvcs/tests/LoadBalancing/GenericFactory/client.cpp (main):
	* orbsvcs/tests/LoadBalancing/GenericFactory/server.cpp (main):

	  More comments for Jai.

Thu Oct  3 18:04:56 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/server.cpp (main):

	  Code review.  Left a bunch of comments for Jai.

	* orbsvcs/tests/LoadBalancing/GenericFactory/Makefile:

	  Updated broken dependencies.

	  (IDL_HDR, SRC):

	  Fixed typos that prevented this test from compiling.

	  (client):

	  No need to link in the TAO_DynamicInterface library.  This test
	  doesn't use DII.  Fixes a link-time error.

Thu Oct  3 11:16:37 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp (create_with_id):

	  Fixed a compile-time error I introduced.

	  Left "@@" comments for David.

Thu Oct  3 11:05:57 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp (create_with_id):

	  Minor tweak to the ACE_CHECK_RETURN macro argument.  Return a
	  nil reference instead of the return value of _var._retn().  This
	  is a precautionary measure to prevent potential memory leaks
	  in emulated exception builds.

Thu Oct  3 10:56:23 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/EventLog_i.cpp (activate):

	  Fixed compile-time error.

Thu Oct  3 07:21:44 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Collocation/Collocation_Test_Stubs.bor:
        * tests/Collocation/Diamond.bor:
          Fixed BCB makefiles

Thu Oct  3 07:08:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Log/LogNotification.h:
          Fixed fuzz error about incorrect @file tag

Thu Oct  3 05:46:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/LoadBalancer/LoadMonitor.bor:
          Fixed this BCB makefile

Wed Oct  2 21:48:07 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/Log_i.cpp (query_i):

	  Improved exception-safety, and thus a potential memory leak.

	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp (create_with_id):

	  Fixed incorrect code that used the auto_ptr<> template in an
	  attempt to make the code exception-safe.  auto_ptr<> doesn't
	  apply in this case since the object in question is reference
	  counted.  Use a PortableServer::ServantBase_var instead to
	  eventually transfer ownership to the POA.  This addresses a
	  potential memory access violation due to improper memory
	  management through the reference counting mechanism.
	  Furthermoee, it also cleans up an unnecessary, and
	  non-exception-safe, call to the servant's _remove_ref() method.
	  This bug was made obvious by the change below where the
	  servant's destructor was made protected.  Protected destructors
	  in reference counted classes are your friend!

	  The above change obviates the need for explicit auto_ptr<>
	  template instantiations.

Wed Oct  2 21:40:31 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/LoadBalancing/GenericFactory/Test.idl:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Makefile:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/Basic.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.h:
	* orbsvcs/tests/LoadBalancing/GenericFactory/LB_server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/client.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/server.cpp:
	* orbsvcs/tests/LoadBalancing/GenericFactory/run_test.pl:
	  Added a test under the new directory orbsvcs/tests/LoadBalancing
	  to test the Object Group creation.
	  This test uses the application-controlled membership, that is
	  the application will populate the object group.

Wed Oct  2 17:42:42 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/EventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLog_i.h:
	* orbsvcs/orbsvcs/Log/Log_i.cpp:
	* orbsvcs/orbsvcs/Log/Log_i.h:

	  More memory leak, emulated and native exception fixes.

Wed Oct  2 17:25:18 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:

	  Fixed incorrect use of emulated exception macros.

Wed Oct  2 17:13:22 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/BasicLog_i.h:
	* orbsvcs/orbsvcs/Log/BasicLog_i.cpp:

	  Fixed emulated exception support.

Wed Oct  2 17:01:13 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Log/LogNotification.h:
	* orbsvcs/orbsvcs/Log/Log_i.h:

	  Doxygen-ated these headers.

	* orbsvcs/orbsvcs/Log/LogNotification.cpp:
	* orbsvcs/orbsvcs/Log/Log_i.cpp:

	  Fixed a large number of memory leaks.

	  Fixed emulated exception support.

	  Removed unnecessary static_cast hacks.  Use the ".in()"
	  accessors in the "_var" variables introduced in the above memory
	  leak fixes instead.  "Use the C++ mapping Luke."

	  Updated to conform to ACE/TAO coding/style guidelines.

	  Added missing ACE_RCSID macros.

Tue Oct  1 23:27:48 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Monitor_Signal_Handler.h:
	* orbsvcs/LoadBalancer/Monitor_Signal_Handler.cpp:

	  New signal handler designed to ensure proper cleanup of load
	  monitors registered with the LoadManager in "PULL" style load
	  monitoring configurations.  Signals are handled synchronously in
	  the multi-threaded build case through an Active Object, and
	  asynchronously through the ORB's Reactor in the single-threaded
	  build case using the same signal handler employed by the
	  LoadManager binary.

	* orbsvcs/LoadBalancer/LoadMonitor.cpp (main):

	  Instantiate and activate the Monitor_Signal_Handler to allow for
	  graceful shutdown of the LoadMonitor executable.

	* orbsvcs/LoadBalancer/LoadMonitor.bor (OBJFILES):
	* orbsvcs/LoadBalancer/Makefile.LoadMonitor (SRC)
	* orbsvcs/LoadBalancer/LoadMonitor.dsp:
	* orbsvcs/LoadBalancer/LoadMonitor_Static.dsp:

	  Added `Monitor_Signal_Handler' and `Signal_Handler' to the list
	  of source/object files.

Tue Oct  1 14:53:46 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_Location_Index_Map.cpp:

	  Corrected explicit template instantiations so that the template
	  parameters match those in the typedef in the corresponding
	  header file.

Tue Oct  1 14:47:42 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * docs/releasenotes/index.html:

	  Updated IDL compiler section.

Tue Oct  1 13:20:31 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

	* TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:

	  Fixed change below to work with nested nodes. Thanks to Bala
	  <baba@isis-server.isis.vanderbilt.edu> for pointing out the
	  problem.

Tue Oct  1 10:49:39 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * tao/AbstractBase.cpp:
        * tao/AbstractBase.h:

	  Removed the refcounting stuff. It is all handled by the derived
	  class, whether interface or valuetype.

	* TAO_IDL/ast/ast_interface_fwd.cpp:
	* TAO_IDL/ast/ast_module.cpp:
	* TAO_IDL/ast/ast_structure_fwd.cpp:

	  Fixed a bug in redefinition of forward declarations that shows up
	  when multiple forward declarations are made in separate module
	  openings, and the full declaration is in yet another. Thanks to
	  Nick S. Petrov <nicksp@ci.nnov.ru> for sending in the example IDL
	  file that uncovered the bug.

	* TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:

	  Fixed indentation in the generated inheritance list.

	* TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:

	  Added missing generated utility function for extracting the
	  valuetype from an abstract interface.

	* TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:

	  Added generated destructors for the OBV classes. While not necessary
	  for correct build or behavior, they provide a place to set
	  breakpoints when debugging, to follow the chain of destructors.

Tue Oct 01 07:10:28 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/tests/Log/Makefile.bor:
        * orbsvcs/tests/Log/Basic_Log_Test/Makefile.bor:
          Added Borland makefiles for the new Log test.

        * orbsvcs/orbsvcs/DsLogAdmin.bor:
          Added missing files.

        * orbsvcs/orbsvcs/Log/PersistStore.cpp:
          For portability, compare against ACE_INVALID_HANDLE rather than
          -1, and use ACE_OS::read rather than ::read. This fix should
          allow the file to compile with Borland C++.

Mon Sep 30 12:25:11 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE.dsw:

	  Once again added ImR_Activator project dependencies.  They were
	  lost when the below ImR_Activator.dsp change was made.

Mon Sep 30 11:40:20  2002 Priyanka Gontla <pgontla@doc.ece.uci.edu>

        * orbsvcs/ImplRepo_Service/ImR_Activator.dsp:

	  Replaced 'ImR_Activator ' with ImR_Activator. The empty space at
	  the end seems to have been causing the problems.

Sat Sep 28 22:16:50 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/fe/idl.ll:
	* TAO_IDL/fe/lex.yy.cpp (idl_store_pragma):

	  When parsing a #pragma version directive, added a check and remove
	  for a trailing space that the SunCC preprocessor puts there for
	  some reason. This trailing space interferes with the check for a
	  valid version number. Thanks to Andrew T. Finnell
	  <andrew@activesol.net> for reporting the bug.

	* TAO_IDL/ast/ast_decl.cpp (compute_repoID):

	  Fixed some mistakes in computing the prefix and version when
	  computing the repository ID.

Sat Sep 28 18:29:12 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

	  Fixed yet another typo.

Sat Sep 28 16:18:08 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/AMH_Response_Handler.h:
	* examples/AMH/Sink_Server/AMH_Servant.cpp:
	* examples/AMH/Sink_Server/AMH_Servant.h:
	* examples/AMH/Sink_Server/Base_Server.cpp:
	* examples/AMH/Sink_Server/Base_Server.h:
	* examples/AMH/Sink_Server/Timer_Handler.cpp:
	* examples/AMH/Sink_Server/client.cpp:
	* examples/AMH/Sink_Server/mt_server.cpp:
	* examples/AMH/Sink_Server/st_server.cpp:

	  Code review, comments, etc.

	* orbsvcs/LoadBalancer/Signal_Handler.h:
	* orbsvcs/LoadBalancer/Signal_Handler.cpp:

	  Removed LoadManager-specific comments and error messages from
	  this class.  There is nothing LoadManager-specific about this
	  class.  Perhaps it might be useful to move this class to the
	  TAO_Svc_Utils library.

Sat Sep 28 13:57:30 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/PortableServer/AMH_Response_Handler.h:

	  This seems like a 'stop-gap' fix right now due to pressure to
	  cut the beta.  Having the PortableServer ResponseHandler class
	  derive  from a Ref-counted Object seems to solve the problem of
	  ResponseHandlers not being reference counted (and we don't
	  require any IDL-compiler changes), since reference-counting in
	  CORBA::Object seems to be a no-op.  Whether this is the class
	  that should have the functionality of ref-counting is debatable.
	  It could also be added to the client-side or server-side RH but
	  that would require IDL-compiler changes.

	  Ossama also raises the question of why the server-side
	  ResponseHandler was inheriting from the client-side RH.  Though
	  I think I know the reason for this, I'll have to work it out
	  fully and then docuemnt it somewhere.  Another issue is the
	  dreaded diamond inheritance that is here in the current
	  hierarchy.  Though g++ didn;t have any problems doing the 'right
	  thing' : i.e., calling the correct reference-counting class,
	  we'll have to try and get rid of it, if possible.  Thanks to
	  Martin Johnson <mjhn@bigpond.net.au>  for bringing up the
	  memory-leak in: Sat Sep 28 13:55:56 2002  Mayur Deshpande
	  <mayur@ics.uci.edu> that led to all this.

Sat Sep 28 13:55:56 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/AMH/Sink_Server/Timer_Handler.cpp (Timer_Handler):

	  The ResponseHandler 'duplicated' in the AMH_Servant was
	  not released here after it was used.  This caused a
	  memory-leak.  This has been fixed now along with the change in:
	  Sat Sep 28 13:57:30 2002  Mayur Deshpande  <mayur@ics.uci.edu>

Sat Sep 28 13:30:32 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/examples/Log:

	  Removed the folders `Client' and `test'.

Sat Sep 28 13:11:22 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/Logging_Service/Basic_Logging_Service/README:
	* orbsvcs/Logging_Service/Event_Logging_Service/README:
	* orbsvcs/Logging_Service/Notify_Logging_Service/README:
	* orbsvcs/Logging_Service/README:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/README:
	* orbsvcs/tests/Log/README:
	* orbsvcs/tests/Log/Basic_Log_Test/README:

	  Added the above README files to describe the Logging
	  Service examples.

Sat Sep 28 01:49:01 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

	  Fixed typo.

Sat Sep 28 01:12:53 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* Branch qubdhanvey01 merged.

Sat Sep 28 01:10:32 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/Makefile.DsEventLogAdmin:
	* orbsvcs/orbsvcs/Makefile.DsNotifyLogAdmin:
	* orbsvcs/orbsvcs/Makefile.RTEventLogAdmin:

	  Files added as part of updated Logging Service.

Fri Sep 27 21:32:45 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
	* TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ci.cpp:

	  Added generated newlines.

Fri Sep 27 21:07:12 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Any.cpp (operator<<): Reverted this "Thu Sep 26 17:06:11
	  2002  Balachandran Natarajan
	  <bala@isis-server.isis.vanderbilt.edu>"  entry. This shows up
	  more problems than it solves.

Fri Sep 27 13:40:32 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Signal_Handler.h:
	* orbsvcs/LoadBalancer/Signal_Handler.cpp:

	  New signal handler designed to ensure proper cleanup of remote
	  objects and resources created by the LoadManager upon
	  interruption by signals.  Signals are handled synchronously in
	  the multi-threaded build case through an Active Object, and
	  asynchronously through the ORB's Reactor in the single-threaded
	  build case.

	* orbsvcs/LoadBalancer/LoadManager.cpp (ACE_TMAIN):

	  Instantiate and activate the new signal handler.

	* orbsvcs/LoadBalancer/Makefile.LoadManager (SRC):
	* orbsvcs/LoadBalancer/LoadManager.bor (OBJFILES):
	* orbsvcs/LoadBalancer/LoadManager.dsp:
	* orbsvcs/LoadBalancer/LoadManager_Static.dsp:

	  Added new Signal_Handler source to these Makefiles and MSVC++
	  project.

Fri Sep 27 11:55:18 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
	  Fixed the throw mismatch warning.

Fri Sep 27 09:49:39 2002  Ossama Othman  <ossama@uci.edu>

	* docs/releasenotes/index.html:

	  Updated load balancer release notes.

Thu Sep 26 21:49:16 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/BiDir_GIOP/BiDirGIOP.h:
	* tao/BiDir_GIOP/BiDirGIOP.cpp: Prevent activate () from being
	  called more than once. Thanks to Erich Hochmuth
	  <erich_hochmuth@hotmail.com> for reporting this.

Thu Sep 26 17:38:30 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp
	  (gen_encapsulation):

	  Fixed "unused variable" warning.

Thu Sep 26 18:23:11 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_module/module_ch.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

	  Cosmetic changes.

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

	  Modified the action code for the 'typeprefix' production as follows:
	  if the typeprefix occurs in a module and is applied to that module,
	  we apply the prefix to the current scope instead of doing a lookup
	  on the scope's name. In the case of a reopened module, a lookup will
	  return the previous opening, and the prefix will not be applied to
	  the current opening. To determine if the above conditions hold, the
	  current scope's name and the first typeprefix argument are compared.
	  Thanks to Nanbor <nanbor@cse.wustl.edu> for pointing out the
	  problem.

        * TAO_IDL/util/utl_idlist.cpp:

	  Modified the compare() method to ignore any leading empty segments.

Thu Sep 26 17:06:11 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Any.cpp: In operator<< (TAO_OutputCDR& cdr, const CORBA::Any
	  &), we could make use of the CDR inside the Any and append that
	  to the CDR stream instead of doing an interpretive marshalling
	  on the Any. We cannot do this if the byte orders of the CDR and
	  the Any are different. Hence we have a conditional optimization
	  that appends the CDR from the Any only if the byte orders are
	  same, else it will fallback to do an interpretive marshalling.

	  Thanks to Eric Malenfant <EMalenfant@interstarinc.com> for
	  suggesting this.

Thu Sep 26 16:07:18 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_field/field_ch.cpp:

	  Added newlines and annotation for the generation of code for
	  sequences as members. Thanks to Bala
	  <bala@isis-server.isis.vanderbilt.edu> for pointing out the lack.

Thu Sep 26 14:59:55 2002  Jeff Parsons <parsons@isis-server.isis.vanderbilt.edu>

        * TAO_IDL/be/be_visitor_root/root.cpp:

	  Added more missing generated newlines.

Thu Sep 26 12:41:51 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Dynamic.pidl:
	* tao/PortableIntercepor.pidl:
	* tao/ObjectReferenceTemplate.pidl:

	  CORBA 3.0 adds the missing "omg.org" typeprefix to the "Dynamic"
	  and "PortableInterceptor" modules.

Thu Sep 26 09:15:18 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/orbsvcs/Makefile:
	* orbsvcs/orbsvcs/Makefile.DsLogAdmin:
	* orbsvcs/orbsvcs/RTEventLogAdmin.idl:
	* orbsvcs/orbsvcs/DsEventLogAdmin.idl:
	* orbsvcs/orbsvcs/DsLogAdmin.idl:
	* orbsvcs/orbsvcs/DsLogNotification.idl:
	* orbsvcs/orbsvcs/DsNotifyLogAdmin.idl:
	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/BasicLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/BasicLog_i.cpp:
	* orbsvcs/orbsvcs/Log/BasicLog_i.h:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/EventLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/EventLogNotification.h:
	* orbsvcs/orbsvcs/Log/EventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/EventLog_i.h:
	* orbsvcs/orbsvcs/Log/Iterator_i.cpp:
	* orbsvcs/orbsvcs/Log/Iterator_i.h:
	* orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
	* orbsvcs/orbsvcs/Log/LogMgr_i.h:
	* orbsvcs/orbsvcs/Log/LogNotification.cpp:
	* orbsvcs/orbsvcs/Log/LogNotification.h:
	* orbsvcs/orbsvcs/Log/LogRecordStore.cpp:
	* orbsvcs/orbsvcs/Log/LogRecordStore.h:
	* orbsvcs/orbsvcs/Log/LogRecordStore_persist.cpp:
	* orbsvcs/orbsvcs/Log/LogRecordStore_persist.h:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.cpp:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp:
	* orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Log/Log_i.cpp:
	* orbsvcs/orbsvcs/Log/Log_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLogNotification.h:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.cpp:
	* orbsvcs/orbsvcs/Log/NotifyLog_i.h:
	* orbsvcs/orbsvcs/Log/PersistStore.cpp:
	* orbsvcs/orbsvcs/Log/PersistStore.h:
	* orbsvcs/orbsvcs/Log/RTEventLogFactory_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogFactory_i.h:
	* orbsvcs/orbsvcs/Log/RTEventLogNotification.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLogNotification.h:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.cpp:
	* orbsvcs/orbsvcs/Log/RTEventLog_i.h:
	* orbsvcs/orbsvcs/Log/eventlog_export.h:
	* orbsvcs/orbsvcs/Log/log_export.h:
	* orbsvcs/orbsvcs/Log/notifylog_export.h:
	* orbsvcs/orbsvcs/Log/rteventlog_export.h:

	  The above files were added and constitute the new Logging
	  Service which is actually 4 separate services:
	  - Basic_Logging_Service [same functionality as previous
	    Logging_Service]
	  - Event_Logging_Service [an event-aware logging service which
	    integates the Logging_Service and the CosEvent Service]
	  - Notify_Logging_Service [integrates Logging_Service and
	    Notification Service]
	  - RTEvent_Logging_Service [integrates with the RTEvent
	    Service].

Thu Sep 26 09:10:38 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/tests/Log/Makefile:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
	* orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.h:
	* orbsvcs/tests/Log/Basic_Log_Test/Makefile:
	* orbsvcs/tests/Log/Basic_Log_Test/client.cpp:

	  Added a test of the Basic_Logging_Service to the /tests/ directory.

Thu Sep 26 08:57:51 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/Logging_Service:

	  Logging_Service extended to include event logging.
	  4 separate services each in its own directory as below.

	* orbsvcs/Logging_Service/Basic_Logging_Service/README:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.h:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Makefile:

	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.h:
	* orbsvcs/Logging_Service/Event_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/Event_Logging_Service/README:

	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Server.cpp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:
	* orbsvcs/Logging_Service/Notify_Logging_Service/README:
	* orbsvcs/Logging_Service/Notify_Logging_Service/svc.conf:

	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.cpp:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.h:

	  Files above added as part of new Telecom Log Service.

Thu Sep 26 09:15:18 2002  D A Hanvey  <d.hanvey@qub.ac.uk>

	* orbsvcs/examples/Log:

	  Examples of the 4 Logging Services

	* orbsvcs/examples/Log/Basic/Makefile :
	* orbsvcs/examples/Log/Basic/TLS_Client.cpp:
	* orbsvcs/examples/Log/Basic/TLS_Client.h :
	* orbsvcs/examples/Log/Basic/main.cpp:

	* orbsvcs/examples/Log/Event/Event_Consumer.cpp:
	* orbsvcs/examples/Log/Event/Event_Consumer.h:
	* orbsvcs/examples/Log/Event/Event_Supplier.cpp:
	* orbsvcs/examples/Log/Event/Event_Supplier.h:
	* orbsvcs/examples/Log/Event/Makefile:

	* orbsvcs/examples/Log/Notify/Makefile:
	* orbsvcs/examples/Log/Notify/Notify_Consumer.cpp:
	* orbsvcs/examples/Log/Notify/Notify_Consumer.h:
	* orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:
	* orbsvcs/examples/Log/Notify/Notify_Supplier.h:

	* orbsvcs/examples/Log/RTEvent/Makefile:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.cpp:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.h:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:
	* orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.h:

	  Files above added as part of new Telecom Log Service.

Thu Sep 26 13:50:26 2002  Balachandran Natarajan  <bala@isis-server.isis.vanderbilt.edu>

	* tao/Transport.cpp (close_connection_shared):  Make a check for
	  the return value from the remove_handler_i () call before
	  calling handle_close (). Thanks to Eric Malenfant
	  <EMalenfant@interstarinc.com> for suggesting this.

	  Eric mentions that doesnt show up the BUG 1020  problem. But
	  local testing here doesnt tell so. I still see some core dumps
	  with a test, albeit slowly! The patch cannot do any harm and
	  hence this is checked in.

Thu Sep 26 13:11:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:

	  Fixed a bug where a repository ID prefix set by 'typeprefix' was
	  getting ignored in the repo IDs of scope members. Thanks to Ossama
	  <ossama@doc.ece.uci.edu> for pointing our the bug.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:

	  Added missing generated newlines.

        * TAO_IDL/be/be_visitor_module/module_sh.cpp:

	  Fixed indentation of generated code.

        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:

	  Replace a generated 'const' that had somehow gone missing.

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

	  Cosmetic changes.

	* orbsvcs/IFR_Service/ifr_visitor.cpp:
	* orbsvcs/IFR_Service/ifr_visitor.h:

	  Added empty methods visit_eventtype() and visit_eventtype_fwd() so
	  the tao_ifr visitor classes can be instantiated.

Thu Sep 26 09:30:02 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  Use the CORBA 3.0 "typeprefix" keyword instead of "#pragma
	  prefix" to declare the type prefix for the CosLoadBalancing
	  module.

Thu Sep 26 09:25:19 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp (get_location):

	  Removed comment that wasn't relevant to the code.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp (enable_alert):
	  (disable_alert):

	  Added comment about how and why AMI is used.

	* orbsvcs/orbsvcs/CosLoadBalancing.bor (OBJFILES):
	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing_Static.dsp:

	  Added "LB_Location_Index_Map" to the list of C++ source and
	  object files.

Thu Sep 26 09:14:22 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_Location_Index_Map.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Location_Index_Map.cpp:

	  New table that maps object group ID to the index
	  of the next element in a "locations of object group members"
	  sequence.

	* orbsvcs/orbsvcs/LoadBalancing/LB_RoundRobin.h:

	  Added location index map that maps object group ID to the index
	  of the next element in the "locations of members" sequence.

	  Added lock member to be used for synchronization of the location
	  index map.

	* orbsvcs/orbsvcs/LoadBalancing/LB_RoundRobin.cpp
	  (TAO_LB_RoundRobin):

	  Initialize the lock and location index members in the base
	  member initializer list.

	  (next_member):

	  Implemented this method.  [Bug 1293]

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing (CPP_SRCS):

	  Added "LB_Location_Index_Map" to the list of C++ sources.

Thu Sep 26 11:55:05 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/Connection_Handler.h:
	* tao/Connection_Handler.inl:
	  Remove unused IIOP-specific method.  This fixes:
	    http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1314

Tue Sep 26 05:32:22 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/ESF/ESF_Busy_Lock.h:
        * tao/Abstract_Servant_Base.h:
        * tao/Object.h:
        * tao/TAO_Internal.h:
        * tao/RTPortableServer/RT_Acceptor_Filters.h:
          Fixed doxygen warnings

Wed Sep 25 19:02:21 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
        * TAO_IDL/be_include/be_visitor_interface/smart_proxy_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/smart_proxy_cs.h:

	  Fixed incorrect signature for visit_component() in each class.

Wed Sep 25 18:50:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/fe_tmplinst.cpp:

	  Removed explicit template instantiation whose parameter no longer
	  exists.

Wed Sep 25 17:17:49 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/Strategies/DIOP_Connector.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
	  Do not use naked delete for reference counted objects.  This
	  fixes:
	    http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1313

Wed Sep 25 17:58:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/field_ch.cpp:

	  Added missing generated newlines for anonymous array members.

	* TAO_IDL/be/be_visitor_structure/structure_ch.cpp:

	  Removed extra generated newlines.

Wed Sep 25 17:12:06 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/keywords.idl:

	  This file tests the acceptance of C++ keywords used as identifiers,
	  which is legal (the IDL compiler prepends '_cxx_'). However, two of
	  these, 'private' and 'public' are now IDL keywords as well, and so
	  are no longer legal identifiers. They have been commented out of the
	  test IDL file.

Wed Sep 25 17:05:32 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_root/root_sth.cpp:

	  Added missing generated newline and annotation.

	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

	  Added missing generated newline.

Wed Sep 25 16:12:27 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/Makefile:

	  Remove for loop and use recursive make rule
	  similar to the one in rules.nested.GNU.  This will enable better
	  detection of build errors during recursive makes.

	* TAO_IDL/Makefile.dependencies:

	  Add MAKEFILE=Makefile.dependencies so
	  that recursive makes will work properly.

	  Patches and comments sent in by Craig Rodrigues <crodrigu@bbn.com>.

Wed Sep 25 14:35:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/Makefile.BE:
	* TAO_IDL/TAO_IDL_BE.bor:
	* TAO_IDL/be/Makefile.am:

	  Added missing files and updated dependencies again.

Wed Sep 25 14:09:20 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.FE:
        * TAO_IDL/Makefile.EXE:

	  Updated dependencies.

Wed Sep 25 12:40:23 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:

	  Removed unused local variables.

	* TAO_IDL/fe/fe_interface_header.cpp:

	  Commented out an unused parameter.

	* TAO_IDL/be/be_visitor_component/component_ss.cpp:

	  Filled in visit_component() method.

Wed Sep 25 12:24:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.FE:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/TAO_IDL_FE.bor:
        * TAO_IDL/ast/Makefile.am:
        * TAO_IDL/be/Makefile.am:

	  Fixed typos.

Wed Sep 25 11:12:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_eventtype.cpp:
        * TAO_IDL/ast/ast_eventtype_fwd.cpp:
        * TAO_IDL/be/be_eventtype.cpp:
        * TAO_IDL/be/be_eventtype_fwd.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_eventtype.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd.cpp:
        * TAO_IDL/be/be_visitor_eventtype.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_component/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component.cpp:
        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_component/component_ci.cpp:
        * TAO_IDL/be/be_visitor_component/component_cs.cpp:
        * TAO_IDL/be/be_visitor_component/component_ih.cpp:
        * TAO_IDL/be/be_visitor_component/component_is.cpp:
        * TAO_IDL/be/be_visitor_component/component_sh.cpp:
        * TAO_IDL/be/be_visitor_component/component_si.cpp:
        * TAO_IDL/be/be_visitor_component/component_ss.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_component_fwd/component_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_obv_cs.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_sh.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_si.cpp:
        * TAO_IDL/be/be_visitor_eventtype/eventtype_ss.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_eventtype_fwd/eventtype_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_home/home_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/any_op_ch.cpp:
        * TAO_IDL/be_include/be_eventtype.h:
        * TAO_IDL/be_include/be_eventtype_fwd.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/be_include/be_visitor_component/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_component/any_op_cs.h:
        * TAO_IDL/be_include/be_visitor_component/cdr_op_ch.h:
        * TAO_IDL/be_include/be_visitor_component/cdr_op_ci.h:
        * TAO_IDL/be_include/be_visitor_component/cdr_op_cs.h:
        * TAO_IDL/be_include/be_visitor_component/component.h:
        * TAO_IDL/be_include/be_visitor_component/component_ch.h:
        * TAO_IDL/be_include/be_visitor_component/component_ci.h:
        * TAO_IDL/be_include/be_visitor_component/component_cs.h:
        * TAO_IDL/be_include/be_visitor_component/component_ih.h:
        * TAO_IDL/be_include/be_visitor_component/component_is.h:
        * TAO_IDL/be_include/be_visitor_component/component_sh.h:
        * TAO_IDL/be_include/be_visitor_component/component_si.h:
        * TAO_IDL/be_include/be_visitor_component/component_ss.h:
        * TAO_IDL/be_include/be_visitor_component_fwd/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_component_fwd/cdr_op_ch.h:
        * TAO_IDL/be_include/be_visitor_component_fwd/cdr_op_ci.h:
        * TAO_IDL/be_include/be_visitor_component_fwd/component_fwd_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype/any_op_cs.h:
        * TAO_IDL/be_include/be_visitor_eventtype/cdr_op_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype/cdr_op_ci.h:
        * TAO_IDL/be_include/be_visitor_eventtype/cdr_op_cs.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_ci.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_cs.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_obv_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_obv_ci.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_obv_cs.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_sh.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_si.h:
        * TAO_IDL/be_include/be_visitor_eventtype/eventtype_ss.h:
        * TAO_IDL/be_include/be_visitor_eventtype_fwd/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype_fwd/cdr_op_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype_fwd/cdr_op_ci.h:
        * TAO_IDL/be_include/be_visitor_eventtype_fwd/eventtype_fwd_ch.h:
        * TAO_IDL/be_include/be_visitor_eventtype.h:
        * TAO_IDL/be_include/be_visitor_eventtype_fwd.h:
        * TAO_IDL/be_include/be_visitor_home/home_ch.h:
        * TAO_IDL/be_include/be_visitor_valuetype_fwd/any_op_ch.h:
        * TAO_IDL/include/ast_eventtype.h:
        * TAO_IDL/include/ast_eventtype_fwd.h:

          New files to complete the support of CORBA Components and related
          types in the IDL compiler.

        * TAO_IDL/be/be_visitor_interface/interceptors_sh.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ci.cpp:
        * TAO_IDL/be_include/be_visitor_interface/interceptors_sh.h:
        * TAO_IDL/be_include/be_visitor_interface_fwd/interface_fwd_ci.h:
        * TAO_IDL/be_include/be_visitor_valuetype_fwd/valuetype_fwd_ci.h:

          Files removed because they were no longer used or contained only
          empty methods.

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.FE:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_BE_LIB.dsp:
        * TAO_IDL/TAO_IDL_FE.bor:
        * TAO_IDL/TAO_IDL_FE_DLL.dsp:
        * TAO_IDL/TAO_IDL_FE_LIB.dsp:
        * TAO_IDL/tao_idl.cpp:
        * TAO_IDL/ast/Makefile.am:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_component.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/ast/ast_generator.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_structure_fwd.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_union_fwd.cpp:
        * TAO_IDL/ast/ast_valuetype_fwd.cpp:
        * TAO_IDL/be/Makefile.am:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_helper.cpp:
        * TAO_IDL/be/be_home.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_interface_fwd.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_structure_fwd.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_union_fwd.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_valuetype_fwd.cpp:
        * TAO_IDL/be/be_visitor.cpp:
        * TAO_IDL/be/be_visitor_argument.cpp:
        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be/be_visitor_component_fwd.cpp:
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_field.cpp:
        * TAO_IDL/be/be_visitor_home.cpp:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd.cpp:
        * TAO_IDL/be/be_visitor_module.cpp:
        * TAO_IDL/be/be_visitor_operation.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_scope.cpp:
        * TAO_IDL/be/be_visitor_typecode.cpp:
        * TAO_IDL/be/be_visitor_valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd.cpp:
        * TAO_IDL/be/be_visitor_argument/arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/paramlist.cpp:
        * TAO_IDL/be/be_visitor_argument/post_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/pre_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_result.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:
        * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/ami_interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_si.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_module/module_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/argument.cpp:
        * TAO_IDL/be/be_visitor_operation/argument_marshal.cpp:
        * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_result.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_assign_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_is.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_post_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_pre_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/tie_si.cpp:
        * TAO_IDL/be/be_visitor_root/cdr_op.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be/be_visitor_structure_fwd/structure_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp:
        * TAO_IDL/be/be_visitor_union/union_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_ci.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
        * TAO_IDL/be/be_visitor_union_fwd/union_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_sh.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ch.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_generator.h:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_structure.h:
        * TAO_IDL/be_include/be_structure_fwd.h:
        * TAO_IDL/be_include/be_union_fwd.h:
        * TAO_IDL/be_include/be_visitor.h:
        * TAO_IDL/be_include/be_visitor_ami_pre_proc.h:
        * TAO_IDL/be_include/be_visitor_component.h:
        * TAO_IDL/be_include/be_visitor_component_fwd.h:
        * TAO_IDL/be_include/be_visitor_home.h:
        * TAO_IDL/be_include/be_visitor_interface.h:
        * TAO_IDL/be_include/be_visitor_interface_fwd.h:
        * TAO_IDL/be_include/be_visitor_valuetype_fwd.h:
        * TAO_IDL/be_include/be_visitor_argument/arglist.h:
        * TAO_IDL/be_include/be_visitor_argument/invoke_cs.h:
        * TAO_IDL/be_include/be_visitor_argument/marshal_ss.h:
        * TAO_IDL/be_include/be_visitor_argument/post_invoke_cs.h:
        * TAO_IDL/be_include/be_visitor_argument/post_marshal_ss.h:
        * TAO_IDL/be_include/be_visitor_argument/pre_invoke_cs.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_arglist.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_ch.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_result.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_sh.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_ss.h:
        * TAO_IDL/be_include/be_visitor_argument/upcall_ss.h:
        * TAO_IDL/be_include/be_visitor_argument/vardecl_ss.h:
        * TAO_IDL/be_include/be_visitor_field/field_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/base_proxy_broker_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/base_proxy_impl_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/direct_proxy_impl_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/direct_proxy_impl_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/interceptors_cs.h:
        * TAO_IDL/be_include/be_visitor_interface/interceptors_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/proxy_brokers_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/proxy_impls_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_broker_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_broker_cs.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_impl_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/remote_proxy_impl_cs.h:
        * TAO_IDL/be_include/be_visitor_interface/smart_proxy_ch.h:
        * TAO_IDL/be_include/be_visitor_interface/smart_proxy_cs.h:
        * TAO_IDL/be_include/be_visitor_interface/strategized_proxy_broker_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/strategized_proxy_broker_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/thru_poa_proxy_impl_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/thru_poa_proxy_impl_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/tie_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/tie_si.h:
        * TAO_IDL/be_include/be_visitor_module/module.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_rh_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/ami_handler_reply_stub_operation_ch.h:
        * TAO_IDL/be_include/be_visitor_operation/argument.h:
        * TAO_IDL/be_include/be_visitor_operation/base_proxy_impl_ch.h:
        * TAO_IDL/be_include/be_visitor_operation/exceptlist_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_arglist.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_exceptlist.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_info_rettype.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_result.h:
        * TAO_IDL/be_include/be_visitor_operation/proxy_impl_xh.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_assign_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_is.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_marshal_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_pre_invoke_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_return_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_vardecl_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_vardecl_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/smart_proxy_ch.h:
        * TAO_IDL/be_include/be_visitor_root/root.h:
        * TAO_IDL/be_include/be_visitor_root/root_sth.h:
        * TAO_IDL/be_include/be_visitor_typecode/typecode_decl.h:
        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
        * TAO_IDL/be_include/be_visitor_valuetype/cdr_op_ch.h:
        * TAO_IDL/be_include/be_visitor_valuetype/cdr_op_ci.h:
        * TAO_IDL/be_include/be_visitor_valuetype/cdr_op_cs.h:
        * TAO_IDL/be_include/be_visitor_valuetype/obv_module.h:
        * TAO_IDL/be_include/be_visitor_valuetype/valuetype_obv_ch.h:
        * TAO_IDL/be_include/be_visitor_valuetype/valuetype_obv_ci.h:
        * TAO_IDL/be_include/be_visitor_valuetype_fwd/valuetype_fwd_ch.h:
        * TAO_IDL/driver/drv_args.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/include/ast_attribute.h:
        * TAO_IDL/include/ast_component.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_generator.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/include/ast_structure.h:
        * TAO_IDL/include/ast_structure_fwd.h:
        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_union_fwd.h:
        * TAO_IDL/include/ast_visitor.h:
        * TAO_IDL/include/fe_interface_header.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/narrow/narrow.cpp:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/util/utl_exceptlist.cpp:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          -- Modified files to complete the support of CORBA Components
	     and related types in the IDL compiler.

          -- Fixed a bug in the redefinition of forward declared structs and
             unions. Thanks to Ken Sedgwick <ken@xvros.org> for sending in the
             example IDL file that uncovered the bug.

          -- Changed addition of newlines to generated code to make it more
             consistent and readable.

          -- Added file and line number annotation to generated code
	     wherever it was found to be missing.

          -- Fixed several bugs in the code generation for valuetypes.

        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:

          Added visit_eventtype() and visit_eventtype_fwd() methods.

Wed Sep 25 11:07:21 2002  Jeff Parsons <parsons@cs.wustl.edu>

	* tao/TypeCodeFactory_Adapter.cpp:
	* tao/IFR_Client_Adapter.cpp:

	  Replaced an #include whose removal was causing build errors on
	  LynxOS and SunCC.  Thanks to Craig Rodrigues <crodrigu@bbn.com>
	  for pointing it out.

Wed Sep 25 13:15:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ImR_Activator.pidl:
        * tests/Bug_1269_Regression/Test.idl:
        * tests/Bug_1270_Regression/Test.idl:
          Fixed incorrect filename after @file doxygen command.

Tue Sep 24 23:11:02 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORBInitializer_Registry.h (TAO_ORBInitializer_Registry):

	  No need to export this class from the TAO DLL on Windows.  Only
	  the standard PortableInterceptor::register_orb_initializer()
	  method should be used.

	* orbsvcs/ImplRepo_Service/XML_ContentHandler.cpp
	  (endPrefixMapping):

	  Fixed unused argument warning.

Tue Sep 24 15:29:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Dynamic_Adapter.cpp:
        * tao/Dynamic_Adapter.h:
        * tao/IFR_Client_Adapter.cpp:
        * tao/IFR_Client_Adapter.h:
        * tao/TypeCodeFactory_Adapter.cpp:
        * tao/TypeCodeFactory_Adapter.h:

          Made the methods in these classes pure virtual and
          eliminated the empty method bodies.

        * tao/corbafwd.h:

          Added 'tk_event' to the TCKind enum.

Tue Sep 24 09:36:43 2002  Ossama Othman  <ossama@uci.edu>

	* TAO/orbsvcs/ImplRepo_Service/ImR_Activator.dsp:

	  Added missing ACEXML libraries to link command.  Fixes
	  unresolved symbol errors.

	  Removed unnecessary references to the DynamicInterface library.

	  Corrected ImR_Activator binary name from `ImR_Activator .exe' to
	  `ImR_Activator.exe'.  Notice the space that was between
	  "ImR_Activator" and ".exe".

	* TAO/orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp (ready_check):

	  Added missing ACE_CHECK_RETURN.

	* TAO/orbsvcs/ImplRepo_Service/Options.h:

	  No need to include "ace/FILE_Addr.h".

	* TAO/orbsvcs/ImplRepo_Service/Options.cpp (SERVICE_REG_ROOT):
	  (SERVICE_REG_PATH, SERVICE_REG_VALUE_NAME):

	  Made these global variables static.  They are only used in this
	  file.

	* TAO/orbsvcs/ImplRepo_Service/Repository_Configuration.cpp:

	  Removed global variables that were duplicates of those in
	  Options.cpp.  Fixes a link-time error.

	* TAO/orbsvcs/ImplRepo_Service/Server_Info.h:
	* TAO/orbsvcs/ImplRepo_Service/Server_Info.cpp:

	  ACE coding style updates.

	* TAO/orbsvcs/ImplRepo_Service/Server_Repository.h:

	  No need to include "XML_ContentHandler.h" to pull in the
	  corresponding class declaration.  A forward reference will do.

	* TAO/orbsvcs/ImplRepo_Service/Server_Repository.cpp:

	  Pass in "sizeof (buffer)" to fgets() instead of a constant like
	  "4096".  The former works since the buffer is stack allocated.
	  Compile time computation of the size leaves less room for
	  error.

	  Include "XML_ContentHandler.h" to pull in the appropriate class
	  declaration.

	  ACE coding style updates.

	* TAO/orbsvcs/ImplRepo_Service/XML_ContentHandler.cpp:

	  Commented out debugging code that was always executed.

	  Removed all ACE_UNUSED_ARG macros in favor of the standard C++
	  way of marking an argument unused, i.e. only list the type of
	  the argument without the argument name.

Tue Sep 24 08:58:54 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
	* orbsvcs/ImplRepo_Service/tao_imr_i.cpp (run):
	  Removed unnecessary debug statements.

	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
 	  Fixed the reregister method implementation to work correctly in
	  case when the ImR_Activator is locked.

	* orbsvcs/tests/ImplRepo/locked/run_test.pl:
	  Fixed the service name from ImplRepo_Service to ImplRepoService
	  to get the correct initial references.

Sat Sep 21 12:49:41 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE.dsw:

	  Added ACEXML_Parser and XML_Common projects.  The ImR_Activator
	  project depends on them.

Sat Sep 21 14:07:11 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE.dsw:

	  Added missing ImR_Activator project.  This should address a
	  build error about an unknown project.

Sat Sep 21 11:57:39 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/fe/idl.ll (stripped_name):
	* TAO_IDL/fe/lex.yy.cpp (stripped_name):

	  Commented out this unused function.  Fixes a warning exhibited
	  by g++ 3.2.

Sat Sep 21 13:49:27 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableInterceptorC.cpp (_create_policy):

	  Removed default argument value.  Default values should only be
	  set in method/function prototypes, not the implementations.
	  Fixes a warning exhibited by g++ 3.2.

Sat Sep 21 12:42:25 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Naming/Naming_Context_Interface.h:
	* orbsvcs/orbsvcs/Naming/Naming_Context_Interface.cpp (to_name):
	  (to_name_helper):

	  Applied Carlos' patch that fixes to_name() operation crashes
	  with some strings (a blocker bug).  [Bug 1224]

Fri Sep 20 12:53:58 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp (loads):

	  For the Linux case, only obtain the load average via
	  ::getloadavg() if Glibc 2.2 or better is used, and if either
	  _BSD_SOURCE or _GNU_SOURCE is defined.  Otherwise, obtain the
	  load average directly from the `/proc/loadavg' virtual file.
	  This address problems compiling the new load balancer on older
	  Linux distributions.  Thanks to Knut-Ha*vard Aksnes for
	  reporting the problem.  [Bug 1311]

Wed Sep 18 09:23:44 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp (reregister_server):
	  Fix the mismatch throw warning in borland builds.

Wed Sep 18 07:47:43 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Collocation/Diamond.bor:
        * tests/Collocation/Collocation_Test_Stubs.bor:
        * tests/Collocation/Collocation.bor:
          Fixed dynamic build and don't build in static environment because
          this test only works when building dynamic.

Wed Sep 18 06:41:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Event/Basic/MT_Disconnect.bor:
        * orbsvcs/tests/Notify/Basic/Makefile.bor:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.bor:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.bor:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.bor:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.bor:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.bor:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.bor:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.bor:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.bor:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.bor:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.bor:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.bor:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.bor:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.bor:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.bor:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.bor:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.bor:
          Fixed for static build

Tue Sep 17 16:57:19 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp
	  (establish_components):

	  Fixed operator precedence problem.

Tue Sep 17 09:09:32 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Collocation/Collocation_Test_Stubs.bor:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.bor:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.bor:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.bor:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.bor:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.bor:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.bor:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Filter_Consumer.bor:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Filter_Supplier.bor:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile.bor:
          Fixed for static build

Mon Sep 16 18:23:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/DLL_ORB/Test_Client_Module.bor:
        * tests/DLL_ORB/Test_Server_Module.bor:
          Fixed for static build.

Sun Sep 15 13:39:51 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Time/Timer_Helper.h:

	  Corrected inclusion of `ace/pre.h'.  It was included between the
	  #ifndef/#define header include guards.  It should have been
	  included after the include guard.

	* orbsvcs/orbsvcs/Time/Timer_Helper.cpp (Timer_Helper):

	  Initialize the clerk_ member.  Do not leave it uninitialized.

	  (~Timer_Helper):

	  Removed "delete this" code.  This code made no sense since it
	  was called inside a destructor!

	  (handle_timeout):

	  Only print debugging statements if TAO_debug_level is greater
	  than zero.  Previously, debugging statements were always
	  printed.  [Bug 1302]

Sun Sep 15 13:04:49 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/IORInfo.h:

	  No need to include `POA.h' and `portableserver_export.h'.  A
	  forward declaration is enough for the latter, there is no
	  need to export this IORInfo implementation on Windows for the
	  former.

	  Removed unused forward declarations.

	  Unexported the TAO_IORInfo class.  Exporting the
	  PortableInterceptor::IORInfo interface is enough.

	  Removed useless friend declarations.

	  No need to pass a pointer to the ORB_Core to the TAO_IORInfo
	  constructor.

	  Removed unused TAO_ORB_Core, TAO_MProfile, CORBA::PolicyList,
	  AdapterState, AdapterManagerId and ObjectReferenceTemplate
	  members.  They were not cleaned up or were incorrectly
	  introduced when TAO's ORT support was added.

	  (invalidate):

	  New method that invalidates the IORInfo instance.  Once the IOR
	  interception points have been invoked, this IORInfo instance is
	  no longer valid.  This also addresses potential memory access
	  violations that could occur if the POA is destroyed before the
	  IORInfo object.

	  (components_established):

	  This method is used to infom the IORInfo when the
	  add_ior_component() and add_ior_component_to_profile() methods
	  are invalid.  They are only valid in the
	  IORInterceptor::establish_components() interception point.

	  (check_validity):

	   Check if the IORInfo instance is valid.  Once all
	   IORInterceptor interception points have been called, the
	   IORInfo object is no longer valid.  Throw an exception in that
	   case.

	* tao/PortableServer/IORInfo.inl:

	  New file containing TAO_IORInfo inlined methods.

	* tao/PortableServer/IORInfo.cpp:

	  No need to include `PortableServerC.h'.  `POA.h' is enough.

	  No need to include `MProfile.h' and `ORB_Core.h'.  They were not
	  cleaned up when TAO's ORT support was added.

	  (TAO_IORInfo):

	  Removed TAO_ORB_Core parameter from the parameter list.  It is
	  no longer used.

	  (get_effective_policy):

	  Overhauled this method so that it actually works.  It was
	  completely broken when TAO's ORT support was added.  [Bug 1307]

	  Verify that the IORInfo object is still valid before proceeding.

	  (add_ior_component, add_ior_component_to_profile):

	  Throw a CORBA::BAD_INV_ORDER exception with the appropriate
	  minor code if either of these methods is called after the
	  IORInterceptor::establish_components() interception point has
	  been called, as required by the CORBA spec.

	  Verify that the IORInfo object is still valid before proceeding.

	  (manager_id, state, adapter_template, current_factory):

	  Verify that the IORInfo object is still valid before proceeding.

	* tao/PortableServer/POA.h (get_policy_list, set_policy_list):
	  (get_mprofile, set_mprofile):

	  Removed these methods.  The code that used them was misguided
	  and broken.

	  (components_established_i):

	  Renamed this method to components_established().  The previous
	  name did not match our naming conventions.  "_i()" methods are
	  used when implementing the thread-safe interface design pattern.

	  (policy_list_, mprofile_):

	  Removed these members.  The memory they pointed to was not
	  managed correctly.  This change is part of a number changes that
	  address many memory management issues.  They were introduced
	  when TAO's ORT support was added.

	* tao/PortableServer/POA.cpp (client_exposed_policies):

	  Removed unnecessary ACE_UNUSED_ARG.  Removing the corresponding
	  parameter name is enough, and is technically more correct in
	  terms of C++.

	  (tao_establish_components, establish_components):

	  Merged these methods.  tao_establish_components() didn't buy us
	  anything.

	  (add_ior_component, add_ior_component_to_profile):

	  Pass a reference to a TAO_MProfile to these methods instead of
	  using the now removed mprofile_ member.  This addresses some
	  memory access violations, in addition to some thread-safety
	  issues.

	  (establish_components):

	  Inform the TAO_IORInfo object that the
	  IORInterceptor::establish_components() interception point was
	  called.  This prevents user code from illegally adding
	  TaggedComponents after establish_components() is called.  This
	  behavior is required by the spec.

	  Invalidate the IORInfo object after the components_established()
	  interception point is called.  Once all IORInterceptor
	  interception points have been called, no changes via the IORInfo
	  object are allowed.  This change addresses a potential memory
	  violation that could occur if the POA is destroyed before the
	  IORInfo object.  Such a scenario can occur the user duplicates
	  the IORInfo reference in an IORInterceptor.

	  (create_stub_object):

	  Removed code that stored the stub object's policy list and
	  TAO_MProfile for use by TAO's IORInterceptor support.  This code
	  was very broken since it did not manage memory correctly (broke
	  when TAO's ORT support was added).  The cached policy list and
	  TAO_MProfile pointers could easily end up being dangling
	  pointers.  The IORInfo object now does the right thing, and
	  retrieves policies from the POA on-demand.  Furthermore, caching
	  a pointer to the TAO_MProfile was a very bad idea since it is
	  destroyed as soon as this method's scope is exited!  [Bug 1307]

	* tao/RTPortableServer/RT_POA.cpp (client_exposed_policies):

	  Fixed some exception safety issues.  Plugged some potential
	  memory leaks.

Sun Sep 15 11:56:58 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Codec/client.cpp (main):

	  Verify that extraction of data from the Any succeeded.

	  Cleaned up debugging output.

	* tests/Portable_Interceptors/IORInterceptor/FOO_ClientRequestInterceptor.h:

	  Added new IOP::Codec member that will be used when decoding data
	  from the object reference's TaggedComponent.

	* tests/Portable_Interceptors/IORInterceptor/FOO_ClientRequestInterceptor.cpp (send_request):

	  Use a CDR encapsulation Codec to better demonstrate the
	  standard/portable way to retrieve data from a TaggedComponent.

	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:

	  Added new IOP::Codec member that will be used when encoding data
	  into the object reference's TaggedComponent.

	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp (establish_components):

	  Use a CDR encapsulation Codec to better demonstrate the
	  standard/portable way to embed data into a TaggedComponent.  The
	  previous code used memcpy() on a string.

	  Verify that IORInfo::add_ior_component_to_profile() also works.
	  Previously, only add_ior_component() was tested.

	  Verify that IORInfo::get_effective_policy() works.  This check
	  was missing.  Thanks to Christoph Liebig <xfrog2000@yahoo.com>
	  providing the code.

	* tests/Portable_Interceptors/IORInterceptor/FOO_Client_ORBInitializer.cpp (post_init):
	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor_ORBInitializer.cpp (post_init):

	  Create a GIOP 1.2 CDR encapsulation Codec to be used by the
	  interceptors created by each of these ORBInitializers.

Sun Sep 15 09:38:42 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added ORB_shutdown directory.

Sun Sep 15 09:29:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1269_Regression/Echo.h:
        * tests/Bug_1269_Regression/Echo_Caller.h:
        * tests/Bug_1269_Regression/ORB_Task.h:
        * tests/Bug_1269_Regression/Server_Timer.h:
        * tests/Bug_1270_Regression/Echo_Caller.cpp:
        * tests/Bug_1270_Regression/ORB_Task.cpp:
        * tests/Bug_1270_Regression/Server_Timer.cpp:
        * tests/Bug_1269_Regression/Echo.cpp:
          Fixed fuzz errors

Sat Sep 14 18:17:43 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/EC_Multiple/Makefile.bor:
        * orbsvcs/tests/CosEvent/Basic/Makefile.bor:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile.bor:
        * orbsvcs/tests/CosEvent/lib/Makefile.bor:
        * orbsvcs/tests/Notify/lib/Makefile.bor:
          Fixed these BCB makefiles for the static build.

Sat Sep 14 08:42:33 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImR_Activator.bor:
          Added missing NT_Service.

Fri Sep 13 15:35:53 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Acceptor_Registry.cpp: Put errno value in the
	  constructor of the CORBA exception which is created when
	  when opening the acceptor in TAO_Acceptor_Registry::open_i() fails.

	* tao/Exception.cpp: For errno values which are not handled in the
	  switch statement, include ACE_OS_String::strerror(errno) in the
	  error output.

Fri Sep 13 14:31:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImR_Activator.bor:
          Added missing libs.

        * tests/POA/Policies/makefile.bor:
          Fixed this BCB makefile.

Fri Sep 13 09:37:59 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/Connection_Handler.h:
	* tao/Connection_Handler.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
	* tao/IIOP_Connection_Handler.h:
	* tao/IIOP_Connection_Handler.cpp:
	* tao/Strategies/DIOP_Connection_Handler.h:
	* tao/Strategies/DIOP_Connection_Handler.cpp:
	* tao/Strategies/SHMIOP_Connection_Handler.h:
	* tao/Strategies/SHMIOP_Connection_Handler.cpp:
	* tao/Strategies/UIOP_Connection_Handler.h:
	* tao/Strategies/UIOP_Connection_Handler.cpp:
	  Re-factor shared code into the TAO_Connection_Handler class.
	  The routines affected are handle_input(), handle_output(),
	  handle_close(), handle_close_i() and a couple others.
	  This fixes:
	    http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1309

	* tao/Strategies/DIOP_Acceptor.cpp:
	  The re-factoring eliminated some default arguments for
	  handle_close(), which was called directly from this class.

Thu Sep 12 08:08:35 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* tao/IIOP_Connection_Handler.cpp (TAO_IIOP_Connection_Handler):
	  Initialize the dscp_codepoint_ value.  Thanks to Martin Johnson
 	  <mjohnson@quickcut.com.au> for reporting this.

Thu Sep 12 11:31:13 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Bug_1269_Regression/Echo.cpp:
	* tests/Bug_1269_Regression/Echo_Caller.cpp:
	* tests/Bug_1269_Regression/ORB_Task.cpp:
	* tests/Bug_1269_Regression/Server_Timer.cpp:
	* tests/Bug_1270_Regression/Echo.cpp:
	* tests/Bug_1270_Regression/Echo.h:
	* tests/Bug_1270_Regression/Echo_Caller.h:
	* tests/Bug_1270_Regression/ORB_Task.h:
	* tests/Bug_1270_Regression/Server_Timer.h: Fixed fuzz errors.

Wed Sep 11 09:22:25 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/Makefile.bor:
	* orbsvcs/ImplRepo_Service/ImplRepo.bor (CFLAGS):
	* orbsvcs/ImplRepo_Service/ImR_Activator.bor (CFLAGS):
	  Updated the Borland files. Added a new ImR_Activator.bor for the
	  ImR_Activator executable. Thanks to Johnny Willemsen for
	  pointing it out.

	* tao/PortableServer/Makefile.bor (OBJFILES):
	  Updated the makefile to add the new ImR_Locator{C.S} and
	  ImR_Activator{C,S} files.

	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
	  Fixed template instantiations. Thanks to Craig Rodrigues
	  for pointing it out.

	* orbsvcs/ImplRepo_Service/Server_Repository.cpp:
	  Fixed warnings on Debian_Full build.

	* orbsvcs/tests/ImplRepo/locked/run_test.pl:
	  Replaced ImR_Locator with ImplRepo_Service as it should be.

Wed Sep 11 04:49:09 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/Makefile:
	  Do not build certain orbsvcs unless corba_messaging=1.

Tue Sep 10 14:02:04 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager_Static.dsp:
	* orbsvcs/LoadBalancer/LoadMonitor_Static.dsp:

	  Added Messaging library directory to the input library path.
	  Fixes a link-time error.

Tue Sep 10 12:17:26 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/Makefile:
	  Set TAO_ROOT if it does not have a value.

Tue Sep 10 04:18:47 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/examples/Makefile:
	  Do not build certain tests unless corba_messaging=1.

Tue Sep 10 04:10:46 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/Makefile:
	  Do not build certain tests unless corba_messaging=1.

Tue Sep 10 03:37:08 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tests/Connection_Timeout/Makefile:
	* tests/DSI_Gateway/Makefile:
	* tests/LongUpcalls/Makefile:
	* tests/Param_Test/Makefile:
	  Do not do final link in these tests unless corba_messaging=1

	* orbsvcs/Makefile:
	  Do not build CosEvent_Service and Event_Service unless
	  corba_messaging=1.

Mon Sep  9 20:37:21 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Strategies/Makefile: Change rules.nested.GNU to rules.nonested.GNU.

Mon Sep  9 01:25:56 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* rules.tao.GNU:
	* orbsvcs/tests/Event/Basic/Makefile:
	* tests/Param_Test/Makefile:
	  Remove references to obsolete ACE_HAS_GNUG_PRE_2_8 make
	  variable.

Sun Sep  8 21:04:45 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/Bug_1270_Regression/Makefile:
	* tests/Bug_1270_Regression/run_test.pl:
	* tests/Bug_1270_Regression/Test.idl:
	* tests/Bug_1270_Regression/Echo.h:
	* tests/Bug_1270_Regression/Echo.cpp:
	* tests/Bug_1270_Regression/client.cpp:
	* tests/Bug_1270_Regression/Echo_Caller.h:
	* tests/Bug_1270_Regression/Echo_Caller.cpp:
	* tests/Bug_1270_Regression/ORB_Task.h:
	* tests/Bug_1270_Regression/ORB_Task.cpp:
	* tests/Bug_1270_Regression/Server_Timer.h:
	* tests/Bug_1270_Regression/Server_Timer.cpp:
	* tests/Bug_1270_Regression/shutdown.cpp:
	* tests/Bug_1270_Regression/server.cpp:
	  Add regression test for bug 1270

	* tests/Bug_1269_Regression/Makefile:
	* tests/Bug_1269_Regression/run_test.pl:
	* tests/Bug_1269_Regression/Test.idl:
	* tests/Bug_1269_Regression/Echo.h:
	* tests/Bug_1269_Regression/Echo.cpp:
	* tests/Bug_1269_Regression/client.cpp:
	* tests/Bug_1269_Regression/Echo_Caller.h:
	* tests/Bug_1269_Regression/Echo_Caller.cpp:
	* tests/Bug_1269_Regression/ORB_Task.h:
	* tests/Bug_1269_Regression/ORB_Task.cpp:
	* tests/Bug_1269_Regression/Server_Timer.h:
	* tests/Bug_1269_Regression/Server_Timer.cpp:
	* tests/Bug_1269_Regression/shutdown.cpp:
	* tests/Bug_1269_Regression/server.cpp:
	  Add regression test for bug 1269, currently the test "passes",
	  but it used to fail so we need a regression test for it
	  anyways.

Mon Sep  9 00:24:44 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* examples/Event_Comm/Makefile:
	* examples/POA/TIE/Makefile:
	* examples/Quoter/Makefile:
	* examples/TypeCode_Creation/Makefile:
	* orbsvcs/Makefile:
	* orbsvcs/CosEvent_Service/Makefile:
	* orbsvcs/Event_Service/Makefile:
	* orbsvcs/examples/CosEC/Factory/Makefile:
	* orbsvcs/examples/CosEC/RtEC_Based/bin/Makefile:
	* orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Makefile:
	* orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Makefile:
	* orbsvcs/examples/CosEC/Simple/Makefile:
	* orbsvcs/examples/RtEC/MCast/Makefile:
	* orbsvcs/examples/RtEC/Schedule/Makefile:
	* orbsvcs/examples/RtEC/Simple/Makefile:
	* orbsvcs/orbsvcs/Makefile:
	* orbsvcs/orbsvcs/Makefile.CosEvent:
	* orbsvcs/orbsvcs/Makefile.CosNotification:
	* orbsvcs/orbsvcs/Makefile.RTEvent:
	* orbsvcs/orbsvcs/Makefile.RTSched:
	* orbsvcs/orbsvcs/Makefile.RTSchedEvent:
	* orbsvcs/tests/Makefile:
	* orbsvcs/tests/CosEvent/Basic/Makefile:
	* orbsvcs/tests/EC_Mcast/Makefile:
	* orbsvcs/tests/EC_Multiple/Makefile:
	* orbsvcs/tests/EC_Throughput/Makefile:
	* orbsvcs/tests/Event/Basic/Makefile:
	* orbsvcs/tests/Event/Performance/Makefile:
	* orbsvcs/tests/Trading/Makefile:
	* tao/Makefile.dirs:
	* tao/Makefile.tao:
	  Remove references to obsolete ACE_HAS_GNUG_PRE_2_8 make
	  variable.

Sun Sep  8 11:57:47 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/CDR_Encaps_Codec.cpp (decode): In methods decode () and
	  decode_value (), the incoming buffer was used to create a CDR
	  stream and it was not aligned on an 8 byte boundary on some
	  platforms. There was no check performed to make sure that the
	  buffer is aligned before extraction.

	  The methods have been changed to do the following

	  - A message block is created and after proper alignment the
	    buffer is copied.

	  - The message block thus created is used to create a CDR stream
	    for extraction. This helps to circumvent the problem seen.

	* tests/Codec/test.idl:
	* tests/Codec/client.cpp: Added a 8 byte variable to the struct
	  that is used in the test. Adding this one opened up the problem
	  mentioned above.

	  Thanks to Oleg Kraynov <mustafa@gema.ru> for reporting this and
	  helping us debug the problem.

Fri Sep  6 09:03:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/ImplRepo_Service/Options.h:
	* orbsvcs/ImplRepo_Service/Server_Repository.cpp:
	* orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
	* orbsvcs/ImplRepo_Service/Repository_Configuration.cpp:
	* orbsvcs/ImplRepo_Service/Repository_Configuration.h:
	  For some reason, the above files didnt get committed yesterday.
	  Recommitting them.

Fri Sep  6 03:54:01 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* rules.tao.GNU: Remove deprecated use_flick macro for Flick IDL
	  compiler.

Fri Sep  6 01:29:04 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:
	* orbsvcs/tests/AVStreams/Component_Switching/Makefile:
	  Remove obsoleted macro ACE_HAS_GNUG_PRE_2_8.

Thu Sep  5 23:28:29 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/Makefile: Instead of iterating through
	  the list of directories specified by DIRS in a for loop,
	  use a scheme similar to the one in rules.nested.GNU.

Thu Sep  5 09:46:38 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/ImplRepo_Service/ImR_Locator_i.h:
	  Fixed the mismatched ace/pre.h and post.h

Thu Sep  5 09:37:12 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/tests/ImplRepo/locked/run_test.pl:
	  Replaced ImR_Locator with ImplRepo_Service. ImplRepo_Serive is
	  the executable that performs the locator service.

	* orbsvcs/ImplRepo_Service/Options.cpp:
	* orbsvcs/ImplRepo_Service/Options.h:
	* orbsvcs/ImplRepo_Service/Server_Repository.cpp:
	* orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
	  Fixed the errors and warnings for Debian Full Reactor build.

	* orbsvcs/ImplRepo_Service/Repository_Configuration.cpp:
	* orbsvcs/ImplRepo_Service/Repository_Configuration.h:
	  Modified the constructor to take in a const char * instead of a
	  char *.

Thu Sep  5 09:54:04 2002  Priyanka Gontla  <pgontla@ociweb.com>

	* orbsvcs/ImplRepo_Service/Options.cpp (Options):
	  Added a missing brace. Must have got deleted by mistake.

Wed Sep  4 19:44:55 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

 	* tao/Messaging/MessagingC.h:
	* tao/Messaging/diffs/Messaging.diff: Yet another hack -- #if 0
	  the >> and << operators for OutputCDR.

Wed Sep  4 17:42:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/ImplRepo_Service/ImR_Activator.dsp:
	* orbsvcs/ImplRepo_Service/implrepo.dsp:
	* orbsvcs/ImplRepo_Service/ImplRepo.dsw:
	   New dsp and modified existing to add new files and remove
	   files.

	* orbsvcs/ImplRepo_Service/Options.cpp:
	* orbsvcs/ImplRepo_Service/NT_Service.cpp:
	  Modified to get compiled on NT. Replaced ImplREpo_i
	  with ImR_Activator_i.

Wed Sep  4 17:11:25 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/TAO_PortableServer.dsp:
	* tao/PortableServer/TAO_PortableServer_Static.dsp:
	  Added the new files.

Wed Sep  4 14:01:02 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/ImplRepo_Service/Forwarder.cpp:
	  Included a header file. It got removed by mistake.

Wed Sep  4 15:15:43 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* TAO_IDL/be/be_visitor_field/field_ch.cpp: Prevent the generation
	  of second typedefs for anonymous sequences. Thanks to Jeff
	  Parsons for suggesting this patch.

	* tao/Messaging/MessagingC.h:
	* tao/Messaging/diffs/Messaging.diff: Regenerated these again with
	  the above change.

Wed Sep  4 13:59:14 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Messaging/MessagingC.h: Removed another typedef declaration
	  for the same data type. This was breaking the builds.

	  We need to actually fix this in the IDL compiler, since we
	  cannot have our IDL compiler generate uncompilable code. But
	  this patch should help for the timebeing.

	* tao/Messaging/diffs/Messaging.diff: A new patch necessitated
	  from the above chage.

Wed Sep  4 10:58:07 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/ImplRepo.pidl:
	* tao/PortableServer/ImR_Activator.pidl
	* tao/PortableServer/ImR_Locator.pidl
	  Split the original ImplRepo.pidl into the above three pidls.
	  ImplRepo.pidl contains the common interfaces and the base
	  interface for the locator and the activator interfaces which are
	  defined in ImR_Locator.pidl and ImR_Activator.pidl respectively.

	* tao/PortableServer/ImplRepoC.cpp:
	* tao/PortableServer/ImplRepoC.h:
	* tao/PortableServer/ImplRepoC.i:
	* tao/PortableServer/ImplRepoS.cpp:
	* tao/PortableServer/ImplRepoS.h:
	* tao/PortableServer/ImplRepoS.i:
	* tao/PortableServer/ImplRepoS_T.cpp:
	* tao/PortableServer/ImplRepoS_T.h:
	* tao/PortableServer/ImplRepoS_T.i:
	* tao/PortableServer/ImR_ActivatorS.h:
	* tao/PortableServer/ImR_ActivatorS.i:
	* tao/PortableServer/ImR_ActivatorS.cpp:
	* tao/PortableServer/ImR_ActivatorC.cpp:
	* tao/PortableServer/ImR_ActivatorC.i:
	* tao/PortableServer/ImR_ActivatorC.h:
	* tao/PortableServer/ImR_ActivatorS_T.h:
	* tao/PortableServer/ImR_ActivatorS_T.cpp:
	* tao/PortableServer/ImR_ActivatorS_T.i:
	* tao/PortableServer/ImR_LocatorS.h:
	* tao/PortableServer/ImR_LocatorS.i:
	* tao/PortableServer/ImR_LocatorS.cpp:
	* tao/PortableServer/ImR_LocatorC.cpp:
	* tao/PortableServer/ImR_LocatorC.i:
	* tao/PortableServer/ImR_LocatorC.h:
	* tao/PortableServer/ImR_LocatorS_T.h:
	* tao/PortableServer/ImR_LocatorS_T.cpp:
	* tao/PortableServer/ImR_LocatorS_T.i:
	  Related stubs and skeletons.

	* tao/PortableServer/Makefile:
	  Added the new files.

	* tao/PortableServer/POA.cpp:
	  The interface which is now visible to the application's using
	  the ImR is ImplementationRepository::Locator. Modified
	  references to ImR accordingly.

	* orbsvcs/ImplRepo_Service/ImR_Activator.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Activator_i.h:
	* orbsvcs/ImplRepo_Service/ImR_Locator.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
	* orbsvcs/ImplRepo_Service/ImR_Locator_i.h:
	* orbsvcs/ImplRepo_Service/ImplRepo_i.h:
	* orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
	* orbsvcs/ImplRepo_Service/ImplRepo.cpp:
	  The workload of the previous ImR is now split to two,
	  ImR_Locator and ImR_Activator. ImR_Locator does the work of
	  administration... when it gets a request such as to add, remove,
	  activate or shutdown a server, it chooses an ImR_Activator and
	  sends it the request. The ImR_Activator is the one that actually
	  executes the request. Read more about this in the README.

	  Accordingly, the previous ImplRepo_i is split into ImR_Locator_i
	  and ImR_Activator_i. These classes implement the
	  ImplementationRepository::Locator and
	  ImplementationRepository::Activator interfaces respectively.

	  Removed ImplRepo_i.h ImplRepo_i.cpp ImplRepo.cpp

	* orbsvcs/ImplRepo_Service/Repository_Configuration.cpp:
	* orbsvcs/ImplRepo_Service/Repository_Configuration.h:
	  This class acts as a wrapper around the ACE_Configuration_Heap
	  class. This class is used to maintain the XML and the non-Win32
	  registry server configuration.

	* orbsvcs/ImplRepo_Service/Server_Info.cpp:
	* orbsvcs/ImplRepo_Service/Server_Info.h:
	* orbsvcs/ImplRepo_Service/Server_Repository.cpp:
	* orbsvcs/ImplRepo_Service/Server_Repository.h:
	* orbsvcs/ImplRepo_Service/Repository.cpp:
	* orbsvcs/ImplRepo_Service/Repository.h:
	  Split Repository into two set of files,
	  Server_Repository.{h,cpp} and Server_Info.{h,cpp} so that each
	  of the new file will have to deal with only one
	  interface.
	  Removed the original Repository.{h,cpp}

	* orbsvcs/ImplRepo_Service/XML_ContentHandler.cpp
	* orbsvcs/ImplRepo_Service/XML_ContentHandler.h
	  The class is used to help update the existing XML file that is
	  used for storing the server configuration. Derives from
	  ACEXML_DefaultHandler.

	* orbsvcs/ImplRepo_Service/repository.xml
	  Contains the sample xml.

	* orbsvcs/ImplRepo_Service/Adapter_Activator.cpp:
	  Cosmetic changes.

	* orbsvcs/ImplRepo_Service/Forwarder.cpp:
	* orbsvcs/ImplRepo_Service/Forwarder.h:
	  Modified the signature of the constructor to take in a reference
	  to the ORB.
	  Made class ImR_Locator_i forward declared instead of ImplRepo_i
	  as the class ImplRepo_i no longer exists.
	  Added a new private variable to save the ORB reference.

	* orbsvcs/ImplRepo_Service/Iterator.h:
	  The previous Repository.h doesnt exist now. See the description
	  for Repository.h. Included Server_Repository.h instead.

	* orbsvcs/ImplRepo_Service/Locator.cpp:
	  Included ImR_Activator_i.h instead of ImplRepo_i.h. See the
	  description for ImplRepo_i.h. Modified the constructor
	  accordingly.

	* orbsvcs/ImplRepo_Service/Locator.h:
	  Forward declared ImR_Activator_i instead of ImplRepo_i. class
	  ImplRepo_i doesnt exist anymore. ImR_Activator_i does the related
	  work.

	* orbsvcs/ImplRepo_Service/Makefile:
	* orbsvcs/ImplRepo_Service/Makefile.am:
	  Modified to remove and add the old and files
	  respectively.

	* orbsvcs/ImplRepo_Service/Options.cpp:
	* orbsvcs/ImplRepo_Service/Options.h:
	  New option '-x' to specify that the file used to store the
	  server related settings should be in XML format. Takes in the name
	  of the XML file where the information has to be saved.
	  Removed and replaced ACE_Configuration_Heap and related usage with
	  Repository_Configuration. Read the description for
	  Repository_Configuration.h for related information.

	  Added a new method to initialize the XML formatted repository.
	  Options::initialize_xml_persistence.
	  One method to convert from
	  ImplementationRepository::ActivationMode mode to a string and
	  another to do the reverse conversion.

	We have a new class Repository_Configuration which acts like a
 	wrap around over


	* orbsvcs/ImplRepo_Service/README:
	  Updated to describe the new ImR, future work and also a section
	  on how to transit from the old IMR to the present one.

	* orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
	* orbsvcs/ImplRepo_Service/tao_imr_i.h:
	  Since now the ImplementationRepository::Administration's work is
	  being done by ImplementationRepository::Locator interface,
	  replaced references to ImplementationRepository::Administration
	  accordingly. Also, added a new option, "-l", by which you can
	  specify the location ( hostname ) where you want to add, activate,
	  remove, shutdown the server. Also, while adding, activating,
	  removing and shutting down a server, check if the location is
	  specified. Invoke the corresponding methods 'activity'_server
	  or a'activity'_server_in_location accordingly.
	  Replaced references to the ImR related exceptions to go along
	  with the modified scopes to which they now belong. Several
	  cosmetic changes.


	* orbsvcs/tests/ImplRepo/locked/run_test.pl:
	* orbsvcs/tests/ImplRepo/run_test.pl:
	  Updated to get the tests running with the new ImR.

Wed Sep  4 10:44:39 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/ObjectReferenceTemplate.h (poa):

	  Added this new method.  It allows the caller to set the
	  underlying TAO_POA pointer.  It is currently only intended for
	  use by the POA itself.

	* tao/PortableServer/ObjectReferenceTemplate.inl:

	  New file containing the inline poa() mutator method.

	* tao/PortableServer/ObjectReferenceTemplate.cpp (adapter_name):
	  (make_object):

	  Only callback on the POA if the TAO_POA pointer is non-zero.  It
	  will be set to zero by the POA when the POA is destroyed.  This
	  prevents a seg fault from occurring if user code keeps a copy of
	  the ObjectReferenceTemplate around after the POA has been
	  destroyed.  Thanks to Irfan for suggesting this fix.

	* tao/PortableServer/POA.h:

	  Cache a pointer to the default TAO ObjectReferenceTemplate
	  implementation.  The POA now needs to call a TAO-specific method
	  in that implementation upon destruction.

	* tao/PortableServer/POA.cpp (destroy_i):

	  Set the TAO_POA pointer in the ObjectReferenceTemplate to zero.
	  This breaks all ties between the POA and the
	  ObjectReferenceTemplate.  Thanks to Irfan for suggesting this
	  fix.

Wed Sep 04 09:43:45 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tao/PortableInterceptorC.cpp (_create_policy): Fixed unused arg
	  warning.

Tue Sep 03 18:34:51 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Messaging/TAO_Messaging_Static.dsp: Added the new files in
	  to the workspace.

Tue Sep 03 19:26:44 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tao/ORB.cpp (_create_policy): Added proprietary
	  extension for the creation of policies to the ORB interface.
	  This function is similar to ORB::create_policy() except that it
	  creates an empty policy, usually to be filled in later by
	  demarshaling.

	  Also, corrected the throw spec for ORB::create_policy().

	* tao/PolicyFactory_Registry.cpp (_create_policy): Added new method
	  to TAO_PolicyFactory_Registry as described above.

	* tao/PortableInterceptorC.cpp (_create_policy): Added proprietary
	  extenstion to PortableInterceptor::PolicyFactory as described
	  above.  This method is virtual but not pure virtual.  Default
	  implementation throws PolicyError exception.

	* tao/Profile.cpp (policies): Changed the call to
	  ORB::create_policy() to ORB::_create_policy().  Passing in
	  "dummy" Anys to create empty RTCORBA policies is no longer
	  valid.

	* tao/RTCORBA/RT_PolicyFactory.cpp (_create_policy): Added code to
	  create empty PRIORITY_MODEL_POLICY_TYPE,
	  PRIORITY_BANDED_CONNECTION_POLICY_TYPE, and
	  CLIENT_PROTOCOL_POLICY_TYPE policies.  They will be filled in
	  later by the demarshaling code.

	* tests/RTCORBA/Policies/Policies.dsp: Corrected project name from
	  "POA Policies" to "Policies".

Tue Sep  3 18:18:16 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Messaging/Messaging_No_ImplC.h: Undefined TRANSPARENT, since
	  some platforms (one of them being Win32) uses it for ioctl ().

	* tao/Messaging/diffs/Messaging_No_Impl.diff: Updated the patch
	  file to include the above change.

Tue Sep  3 23:00:35 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Makefile.dirs: Put RTCORBA and RT_PortableServer directories
	  inside check for rt_corba GNU make variable.

Tue Sep 03 17:59:45 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Messaging/TAO_Messaging.dsp: Added the new files in to the
	  workspace.

Tue Sep  3 17:54:41 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tests/RTCORBA/Policies/Policies.cpp: Fixed a compile error in
	  builds where native exceptions are disabled.

Tue Sep  3 17:08:32 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	This check-in is aimed to help with the following

	- Reduce the TAO_HAS_SOME_POLICY madness
	- Make the compiler do the work of linking in the pieces that it
	  requires instead of putting the burden on the developers by
	  these #define madness

	All the policies that are implemented in TAO are placed in
        seperate pidl files. The linker should link in only pieces that
        are required. More work is required to achieve that. This is just
	a temporary check-in to facilitate stuff.

	* tao/Messaging/Messaging_RT_Policy.pidl:
	* tao/Messaging/Messaging_SyncScope_Policy.pidl: These two files
	  just house the RoundTrip and the SyncScope policies.

	* tao/Messaging/Messaging_No_Impl.pidl: This file contains stuff
	  that has not been implemented in TAO.

	* tao/Messaging/Messaging.pidl: Broken up the contents of this
	  file into multiple files described above.

	* tao/Messaging/Messaging{C,S, S_T}.{h,cpp,i}:
	* tao/Messaging/Messaging_RT_PolicyC.{h,cpp,i}:
	* tao/Messaging/Messaging_SyncScope_PolicyC.{h,cpp,i}:
	* tao/Messaging/Messaging_No_ImplC.{h,cpp,i}: The new generated
	  code.

	* tao/Messaging/diffs/Messaging.diff:
	* tao/Messaging/diff/Messaging_RT_Policy.diff:
	* tao/Messaging/diff/Messaging_SyncScope_Policy.diff:
	* tao/Messaging/diff/Messaging_No_Impl.diff: The diff files for
	  the generated code.

	* tao/Messaging/Makefile.bor:
	* tao/Messaging/Makefile: Added the new files.

Tue Sep  3 14:48:55 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/RTEvent_Static.dsp:
	* orbsvcs/orbsvcs/RTSched_Static.dsp:
	* orbsvcs/orbsvcs/SSLIOP.dsp:
	* orbsvcs/orbsvcs/SSLIOP_Static.dsp:
	* orbsvcs/orbsvcs/Svc_Utils_Static.dsp:

	  Removed redundant "-I" preprocessor directives again.

Tue Sep  3 14:40:35 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security.dsp:
	* orbsvcs/orbsvcs/Security_Static.dsp:

	  Removed redundant "-I" preprocessor directives.  They confused
	  TAO_IDL's preprocessor.  This fixes some Windows build
	  problems.

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  Removed `#pragma prefix""`.  It is no longer needed.

	  Removed commented out inclusion of `PortableInterceptor.pidl'
	  file.

Mon Sep  2 18:52:27 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Time/TAO_UTO.cpp:

	  Added missing emulated exception macros to _this() calls.

	* orbsvcs/orbsvcs/Time/Timer_Helper.cpp (handle_timeout):

	  Applied the same fix from Jon Biggar that Doug applied to the
	  TimeService implementation.

Mon Sep  2 18:28:14 2002  Ossama Othman  <ossama@uci.edu>

	* tao/RTCORBA/RT_PolicyFactory.cpp (create_policy):

	  Fixed unused variable warning.

	* orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp
	  (universal_time):

	  Fixed syntax error.

	  Added missing emulated exception macros to _this() calls.

	* orbsvcs/orbsvcs/Time/TAO_Time_Service_Clerk.cpp (get_time):

	  Applied the same fix from Jon Biggar that Doug applied to the
	  TimeService implementation.

	  Added missing emulated exception macros to _this() calls.

Mon Sep  2 16:20:08 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/FaultTolerance/FT_Invocation_Endpoint_Selectors.cpp:
	  Change TAO_OMG_VMCID to CORBA::OMGVMCID.

Mon Sep  2 09:09:30 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp (universal_time):
	  Only call ACE_OS::gettimeofday() once, not twice, to avoid a
 	  skew.  Thanks to Jon Biggar <jon@floorboard.com> for reporting
 	  this.

Sun Sep  1 11:10:51 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_ServerRequestInterceptor.cpp
	  (receive_request_service_contexts):

	  Use the standard CORBA::OMGVMCID constant instead of the
	  obsolete TAO_OMG_VMCID constant.

Sat Aug 31 23:58:02 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Makefile.dirs: Add include of rules.tao.GNU, in order to
	  get default values for make variables like corba_messaging.

Sat Aug 31 23:16:35 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Makefile: Re-order targets so that if make -k is specified,
	  a recursive make on Makefile.dirs will be performed even if
	  the recursive make on Makefile.tao fails.

Sat Aug 31 16:06:42 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Messaging/Makefile: Reverted the change "Sat Aug 31 14:54:01
	  2002  Balachandran Natarajan " since there is better way to do
	  this.

	* tao/Makefile.dirs: Make the Messaging directory to be
	  conditionally compiled.

Sat Aug 31 14:54:01 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Adapter.cpp: #included debug.h
	* tao/Messaging/Makefile: Do not compile if corba_messaging=0.

	  Thanks to Cemal Yilmaz <cyilmaz@cs.umd.edu> and the 'skoll'
	  experiment for finding and reporting it. Apparently the error in
	  tao/Adapter.cpp is being signalled by our scoreboard too.

Sat Aug 31 15:59:07 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tests/RTCORBA/Server_Protocol/server.cpp:
	* utils/catior/catior.cpp:
	* utils/nslist/nslist.cpp:
	  Change to TAO_TAG_IIOP_PROFILE to IOP::TAG_INTERNET_IOP.

Sat Aug 31 01:29:05 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Makefile.dirs: (Added) Specifies the DIRS= list of directories
	  to invoke recursive makes on.

	* tao/Makefile.tao: (Added) Build the libTAO library like the old
	  Makefile did.

	* tao/Makefile: Invoke Makefile.tao first, and then Makefile.dirs.
	  It was necessary to split apart the DIRS= rule from the part of the
          Makefile which builds libACE in order to have parallel makes (-j 2)
          work on recursive makes, using the new rules.nested.GNU, see ACE
	  ChangeLog entry:
	  Sat Aug 31 01:20:09 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

Fri Aug 30 17:24:15 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing_Static.dsp:
	* orbsvcs/orbsvcs/PortableGroup.dsp:
	* orbsvcs/orbsvcs/PortableGroup_Static.dsp:

	  Removed redundant "-I" preprocessor directives.  They confused
	  TAO_IDL's preprocessor.  This fixes some Windows build
	  problems.  Thanks to Jeff for figuring out the cause of these
	  problems, and for suggesting a fix.

Fri Aug 30 14:36:33 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp
	  (visit_operation):

	  Corrected call to send_exception() interception point in the
	  ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS case.  It was
	  receive_exception(), which was a cut and paste error from the
	  client side case.  Thanks to Jeff for pointing out the problem.

Fri Aug 30 13:36:24 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:

          Correction to

          Wed Aug 28 14:55:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

          This restores the original implementation of Any operators
          for local interfaces made a few months ago.

Fri Aug 30 13:08:59 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/RTCORBA/Policies/Makefile:
	* tests/POA/Policies/Makefile:

	  Minor change and updated dependencies.

	* tao/RTCORBA/RT_ORBInitializer.cpp (register_policy_factories):
	  Changed TAO_ORB_VMCID to CORBA::OMGVMCID.

	* tao/RTCORBA/RT_Policy_i.cpp: Fixed minor warnings.

Thu Aug 29 21:08:59 2002  Irfan Pyarali  <irfan@oomworks.com>

        Thanks to Paul Calabrese <calabrese_p@ociweb.com> for reporting
	bug 1091 that resulted in the following changes.

	* tests/POA/Policies: This program tests the construction of RTCORBA
	  policies, both through the generic ORB::create_policy()
	  interface and the RTCORBA specific interfaces.

	  The following files were added:

	  - tests/RTCORBA/Policies/Makefile
	  - tests/RTCORBA/Policies/Policies.cpp
	  - tests/RTCORBA/Policies/Policies.dsp
	  - tests/RTCORBA/Policies/Policies.dsw
	  - tests/RTCORBA/Policies/Policies.mpc
	  - tests/RTCORBA/Policies/makefile.bor
	  - tests/RTCORBA/Policies/run_test.pl

	  The following files were updated:

	  - tests/RTCORBA/RTCORBA_tests.dsw
	  - tests/RTCORBA/Makefile
	  - tests/RTCORBA/Makefile.bor
	  - tests/RTCORBA/README
	  - $ACE_ROOT/bin/auto_run_tests.lst

	* tao/RTCORBA/RT_Policy_i.cpp: Added static helper methods
	  (*Policy::create()) to help in the implementation of
	  CORBA::ORB::create_policy() for RTCORBA policies.

	* tao/RTCORBA/RT_PolicyFactory.cpp (create_policy): Fixed this
	  code which was completely incorrect.  <value> was being ignored
	  rendering the created policies useless.  In addition, there was
	  no any support for types RTCORBA::THREADPOOL_POLICY_TYPE,
	  RTCORBA::SERVER_PROTOCOL_POLICY_TYPE, and
	  RTCORBA::PRIVATE_CONNECTION_POLICY_TYPE.

	* tao/RTCORBA/RT_ORBInitializer.cpp (register_policy_factories):
	  Added the registration of the factory for types
	  RTCORBA::THREADPOOL_POLICY_TYPE,
	  RTCORBA::SERVER_PROTOCOL_POLICY_TYPE, and
	  RTCORBA::PRIVATE_CONNECTION_POLICY_TYPE. Not sure why these were
	  left out.

	* tao/RTCORBA/RTCORBAC.cpp: Added code for inserting/extracting a
	  RTCORBA::ProtocolList into/from an Any.  The IDL compiler did
	  not generate this code the last time RTCORBAC.* was created,
	  though now Jeff has fixed this problem in the IDL compiler.

	* tao/orbconf.h (TAO_POLICY_DEFAULT_SCOPE): Format change.

	* tests/POA/Policies/Policies.cpp (main): Added debug statement
	  for successful completion of test.

Thu Aug 29 14:48:51 2002  Ossama Othman  <ossama@uci.edu>

	* tao/corbafwd.h:

	  Removed unused, unnecessary and redundant preprocessor
	  constants.

	  Converted most preprocessor constants to compile-time constants
	  to improve type-safety.

	  Fixed documentation for compile-time constants.

	  Replaced TAO_OMG_VMCID preprocessor constant with
	  "CORBA::OMGVMCID" compile-time constant.  The latter is required
	  by the CORBA specification.

	* tao/CORBALOC_Parser.cpp:
	* tao/CORBANAME_Parser.cpp:
	* tao/ClientRequestInfo.inl:
	* tao/ClientRequestInfo_i.cpp:
	* tao/DomainC.cpp:
	* tao/Exception.cpp:
	* tao/Invocation_Endpoint_Selectors.cpp:
	* tao/LocalObject.cpp:
	* tao/ORB.cpp:
	* tao/ORB_Core.i:
	* tao/Object_Ref_Table.cpp:
	* tao/PICurrent.cpp:
	* tao/PolicyC.cpp:
	* tao/PolicyFactory_Registry.cpp:
	* tao/DynamicInterface/Server_Request.cpp:
	* tao/IFR_Client/IFR_BaseC.cpp:
	* tao/IFR_Client/IFR_BasicC.cpp:
	* tao/IFR_Client/IFR_ComponentsC.cpp:
	* tao/IFR_Client/IFR_ExtendedC.cpp:
	* tao/Messaging/Messaging_ORBInitializer.cpp:
	* tao/PortableServer/IORInfo.cpp:
	* tao/PortableServer/ImplRepoC.cpp:
	* tao/PortableServer/POA.cpp:
	* tao/PortableServer/PortableServer_ORBInitializer.cpp:
	* tao/PortableServer/ServerRequestInfo.cpp:
	* tao/RTCORBA/RT_Invocation_Endpoint_Selectors.cpp:

	  Updated all uses of "TAO_OMG_VMCID" with "CORBA::OMGVMCID".

	* TAO_IDL/be/be_visitor_operation/operation.cpp
	  (gen_marshal_and_invoke):
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp
	  (visit_operation):

	  When PortableInterceptor support is enabled, catch non-CORBA C++
	  native exceptions and convert them to CORBA::UNKNOWN when native
	  exception handling is enabled and the
	  ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS preprocessor macro is
	  defined.  This is necessary for platforms that do not correctly
	  handle unexpected exceptions, i.e. do not call the unexpected
	  exception handler.  On those platforms, the
	  receive/send_exception() interception points were not called.
	  Note that this does not handle the case where the application
	  explicitly overrides the ORB's unexpected exception handler.
	  Application developers are on their own in that case.  These
	  changes have no effect when emulated exceptions are used, or
	  when Portable Interceptor support is disabled.

	  Updated all uses of "TAO_OMG_VMCID" in generated code with
	  "CORBA::OMGVMCID".

	* tao/IIOP_Acceptor.cpp (TAO_IIOP_Acceptor):
	  (create_shared_profile):
	* tao/IIOP_Connector.cpp (TAO_IIOP_Connector, remote_endpoint):
	* tao/IIOP_Endpoint.cpp (TAO_IIOP_Endpoint):
	* tao/IIOP_Factory.cpp (TAO_IIOP_Protocol_Factory):
	* tao/IIOP_Lite_Factory.cpp (TAO_IIOP_Protocol_Factory):
	* tao/IIOP_Profile.cpp (TAO_IIOP_Profile):
	* tao/IIOP_Transport.cpp (TAO_IIOP_Transport):
	  (set_bidir_context_info):
	* tao/RTCORBA/RT_Policy_i.cpp (hook):

	  Use the proper IOP::TAG_INTERNET_IOP ProfileId instead of the
	  redundant and now non-existent TAO_TAG_IIOP_PROFILE macro.

	* tao/IOP_Defns.h:

	  Removed this completely unused header.  It defined redundant and
	  useless classes and types.

	* tao/RTCORBA/RT_Protocols_Hooks.cpp (init_hooks):

	  Fixed broken emulated exception macros yet again.  RTM people!

	  (update_client_protocol_properties):
	  (update_server_protocol_properties):

	  Use the proper IOP::TAG_INTERNET_IOP ProfileId instead of the
	  redundant and now non-existent TAO_TAG_IIOP_PROFILE macro.

	* tao/RTPortableServer/RT_Servant_Dispatcher.cpp:

	  Use the proper IOP::TAG_INTERNET_IOP ProfileId instead of the
	  redundant and now non-existent TAO_TAG_IIOP_PROFILE macro.

	  Corrected all CORBA::DATA_CONVERSION exception throw sites to
	  use the correct system exception minor code of 2 logically ORed
	  with CORBA::OMGVMCID.

	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp
	  (find_group_component_in_profile):
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp
	  (update_cached_group_component, extract_group_component):

	  Use the proper IOP::TAG_GROUP ComponentId instead of the
	  redundant and now non-existent TAO_TAG_GROUP macro.

Thu Aug 29 16:07:42 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/POA/Default_Servant/Default_Servant.cpp (main): Make sure
	  to destroy the ORB before the end of main(). Otherwise during
	  POA cleanup, it will try to access the deleted servant which was
	  on the stack.

Thu Aug 29 12:30:33 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* tao/RTCORBA/RT_Protocols_Hooks.h:
	* tao/RTCORBA/RT_Protocols_Hooks.cpp:

	  Moved the resolving of the RT_Current object from the
	  RT_Protocols_Hooks::get_dscp_codepoint method to the
	  RT_Protocols_Hooks::init_hooks method so it gets resolved only
	  once. Initially it was resolved every time the the
	  RT_Protocols_Hooks::get_dscp_codepoint method was invoked.

Thu Aug 29 10:23:57 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/FT_ORB.dsp:

          Changed tao_idl command line options to match those in
          Makefile.FTORB.

Thu Aug 29 06:04:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Sync_Strategies.h:
          Fixed doxygen command.

Wed Aug 28 16:50:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Svc_Utils.dsp:

          Changed IDL compiler options for RtecBase.idl and
          TimeBase.idl to match those of Makefile.Svc_Utils.

Wed Aug 28 16:27:05 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:

          Changed a check to look for a different error return
          value, to correspond with recent changes to
          ACE_Configuration.

Wed Aug 28 14:55:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:

          Took away the checks for 'local' that guarded generation
          of CDR and Any operators. I thought these had been
          removed before, but somehow they crept back in. Thanks
          to Irfan <irfan@oomworks.com> for pointing it out.

        * TAO_IDL/driver/drv_preproc.cpp:

          Fixed a signed/unsigned comparison warning that popped
          up because of a change in ACE.

        * orbsvcs/IFR_Service/drv_preproc_ifr.cpp:

          Fixed a signed/unsigned comparison warning that popped
          up because of a change in ACE.

Wed Aug 28 06:06:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Invocation.h:
          Fixed doxygen warnings.

        * tao/AbstractBase.h:
          Fixed doxygen command.

Tue Aug 27 18:31:53 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tao/Transport.cpp: Made the methods purge_entry () and make_idle
	  () more readable. Instead of checking whether the hash_map entry
	  is available within the transport classes, just defer that
	  decision to the Transport_Cache_Manager classes.

	* tao/Transport_Cache_Manager.cpp:
	* tao/Transport_Cache_Manager.inl: The make_idle () and
	  purge_entry () methods now use the classical double-checked
	  locking optimization pattern before calling the actual
	  implementations.

	  This fixes [BUG 1276]. Thanks to Carlos O'Ryan
	  <coryan@atdesk.com> for supplying the patches.

Tue Aug 27 15:56:05 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Security/Callback/server_i.cpp (test_request):

	  Removed default value in emulated exception parameter.  The
	  implementation should not use default arguments.  Fixes a
	  warning.

Tue Aug 27 16:22:27 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_global.cpp:

          Yet another pass at fixing conditional #included IDL files.
          This time code has been added to make sure, when stripping
          -I prefixes off of preprocessor #include strings, that we
          strip off the longest match, in case some -I options are
          substrings of others.

Tue Aug 27 15:41:57 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tests/ORB_shutdown/server.bor:
	* tests/ORB_shutdown/Makefile.bor: Added these files.

	* tests/Makefile: Added the new test for the daily builds to pick
	  up.

Tue Aug 27 15:48:17 2002  Irfan Pyarali  <irfan@oomworks.com>

        Thanks to Christian Klutz <cklutz@gmx.net> for reporting the bug
	that resulted in the following changes.

	* tao/PortableServer/PortableServer_PolicyFactory.cpp: New class
	  for creating POA Policies.

	* tao/PortableServer/PortableServer_ORBInitializer.cpp:  New
	  initialization class that adds TAO_PortableServer_PolicyFactory
	  as a factory for POA Policies.

	* tao/PortableServer/PortableServer.cpp (init): Registered
	  TAO_PortableServer_ORBInitializer with the PortableInterceptor.

	* tao/PortableServer/POA_Policies.cpp (create): Added create
	  methods to the policy classes so that they can be created from
	  Any values.

	* tests/POA/Policies: This program tests the construction of POA
	  policies, both through the generic ORB::create_policy interface
	  and the PortableServer specific interfaces.

	  The following files were added:

	  - tests/POA/Policies/Makefile
	  - tests/POA/Policies/Policies.cpp
	  - tests/POA/Policies/Policies.dsp
	  - tests/POA/Policies/Policies.dsw
	  - tests/POA/Policies/Policies.mpc
	  - tests/POA/Policies/makefile.bor
	  - tests/POA/Policies/run_test.pl

	  The following files were updated:

	  - tests/TAO_Tests.dsw
	  - tests/POA/Makefile
	  - tests/POA/Makefile.bor
	  - tests/POA/README
	  - $ACE_ROOT/bin/auto_run_tests.lst

	* tao/PortableServer: Added new files
	  PortableServer_PolicyFactory.{cpp,h} and
	  PortableServer_ORBInitializer.{cpp,h} to:

	  - TAO_PortableServer_Static.dsp
	  - TAO_PortableServer.dsp
	  - Makefile
	  - Makefile.bor

Tue Aug 27 12:42:58 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/POA/Default_Servant/Makefile (BIN_UNCHECKED): Changed
	  Makefile such that the test program is not compiled with minimum
	  CORBA.  Thanks to Ossama for pointing this out.

Tue Aug 27 12:40:12 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	Fix for [BUG 1265].

	* tao/Adapter.cpp:
	* tao/Adapter.h: Methods check_close () and close () have an empty
	  ACE_THROW_SPEC (()) to indicate that no exceptions pass through
	  to the higher layer.

	* tao/ORB_Core.h:
	* tao/ORB_Core.cpp (shutdown): Applied the patch in BUG 1265 which
	  basically releases the mutex before calling actual close () on
	  the adapter objects. Further, made sure that
	  destroy_interceptors () and the shutdown () calls dont propagate
	  exceptions to the caller. Thanks to Carlos O' Ryan
	  <coryan@atdesk.com> for the patch.

  	  Please see the discussions in BUG 1265 and chapter 2 of
	  "Exceptional C++" by Herb Sutter for details on why this is a
	  good idea.

	* tao/ORB.cpp (shutdown): Added a comment as to why we cannot lock
	  exceptions within this method.

Tue Aug 27 10:22:50 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tests/ORB_shutdown/server.cpp: Fixed a compile error in builds
	  where exceptions have been turned off.

Tue Aug 27 10:03:57 2002  Balachandran Natarajan  <bala@isis-server.vuse.vanderbilt.edu>

	* tests/ORB_shutdown/server.cpp:
	* tests/ORB_shutdown/Foo_Bar.h:
	* tests/ORB_shutdown/Foo_Bar.cpp:
	* tests/ORB_shutdown/Makefile:
	* tests/ORB_shutdown/run_test.pl:
	* tests/ORB_shutdown/README:
	* tests/ORB_shutdown/Foo_Bar.mpc:
	* tests/ORB_shutdown/Test.idl:
	* tests/ORB_shutdown/Foo_Bar.dsw:
	* tests/ORB_shutdown/server.dsp (BuildCmds): A simple test to
	  replicate the problem outlined in BUG 1265.

	  Sorry folks, my mail id is long and I cant help it :(.

Mon Aug 26 20:34:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/be/be_interface.cpp:

          Moved the assignment of the member size_type variable
          to the base class constructor, as has been done for
          the other BE node classes.

Mon Aug 26 17:17:58 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Exception.cpp (_tao_get_omg_exception_description):

	  Fixed an unused variable warning.

Mon Aug 26 16:27:29 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_global.cpp:

          Added one more check to handle a quirk of the SunCC
          preprocessor.

Mon Aug 26 14:41:19 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/include/idl_global.h:

          An overhaul of the earlier fix

          Sun Aug 25 16:36:53 2002  Jeff Parsons <parsons@cs.wustl.edu>.

          The new approach strips off any -I prefixes that may have
          been added by the preprocessor, when an #include filename
          is read by the lexer. This enables IDL file validation to
          use straight strcmp instead of finding a substring. A new
          function was added to IDL_GLobalData to perform the
          stripping.

Sun Aug 25 20:52:29 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/orbsvcs.dsw:
	* orbsvcs/orbsvcs/orbsvcs_static.dsw:

	  Added PortableGroup and CosLoadBalancing MSVC++ projects to
	  these workspaces.

Sun Aug 25 20:30:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup_Static.dsp:

	  Added miop stub and skeleton to the source list.  They were
	  missing.

Sun Aug 25 16:36:53 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/util/utl_global.cpp:

          Changed the storage of included IDL files from the
          lexer to use the full name instead of the stripped
          name (base file name only), and added checks to
          validate_included_idl_files() to handle conditional
          includes where the same local filename appears in
          different subdiretories, and where a complete path
          name is a substring of another one. Thanks to
          Robert Hancock <hancock@SEDSystems.ca>, Andy Olson
          <andrew.olson@lmco.com>, and to Terry Ware
          <terry.ware@dc.alphatech.com> for reporting the bug.
          This fix applies to [BUGID:821] and [BUGID:1225], but
          I will wait to see if the fix works on all platforms
          before I close the Bugzilla entries.

Sun Aug 25 15:07:05 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:

          Moved the placement of the generated "const" modifier.

Sat Aug 24 22:47:22 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * examples/POA/Loader/Servant_Activator.cpp:
        * examples/POA/Loader/Servant_Locator.cpp:
        * examples/POA/On_Demand_Loading/Servant_Manager.cpp:

          The explicit call to ACE::ldname() is no longer required since
          it will be automatically done by the ACE_DLL_Manager. This
          should fix these tests for Borland C++.

        * TAO_IDL/tao_idl.mpc:
        * orbsvcs/Concurrency_Service/Concurrency_Service.mpc:
        * orbsvcs/CosEvent_Service/CosEvent_Service.mpc:
        * orbsvcs/Dump_Schedule/Dump_Schedule.mpc:
        * orbsvcs/Event_Service/Event_Service.mpc:
        * orbsvcs/IFR_Service/IFR_Service.mpc:
        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.mpc:
        * orbsvcs/LoadBalancer/LoadBalancer.mpc:
        * orbsvcs/Logging_Service/Logging_Service.mpc:
        * orbsvcs/Naming_Service/Naming_Service.mpc:
        * orbsvcs/Notify_Service/Notify_Service.mpc:
        * orbsvcs/Scheduling_Service/Scheduling_Service.mpc:
        * orbsvcs/TAO_Service/TAO_Service.mpc:
        * orbsvcs/Time_Service/Time_Service.mpc:
        * orbsvcs/Trading_Service/Trading_Service.mpc:

          Added "core" as a base project.

        * orbsvcs/orbsvcs/AV.mpc:
        * orbsvcs/orbsvcs/CosConcurrency.mpc:
        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosLifeCycle.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosProperty.mpc:
        * orbsvcs/orbsvcs/CosTime.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:
        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/ETCL.mpc:
        * orbsvcs/orbsvcs/FTORB.mpc:
        * orbsvcs/orbsvcs/FaultTolerance.mpc:
        * orbsvcs/orbsvcs/IFRService.mpc:
        * orbsvcs/orbsvcs/PortableGroup.mpc:
        * orbsvcs/orbsvcs/RTCORBAEvent.mpc:
        * orbsvcs/orbsvcs/RTEvent.mpc:
        * orbsvcs/orbsvcs/RTOLDEvent.mpc:
        * orbsvcs/orbsvcs/RTSched.mpc:
        * orbsvcs/orbsvcs/RTSchedEvent.mpc:
        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/orbsvcs/Security.mpc:
        * orbsvcs/orbsvcs/Svc_Utils.mpc:
        * tao/tao.mpc:
        * tao/BiDir_GIOP/BiDir_GIOP.mpc:
        * tao/Domain/Domain.mpc:
        * tao/DynamicAny/DynamicAny.mpc:
        * tao/DynamicInterface/DynamicInterface.mpc:
        * tao/IFR_Client/IFR_Client.mpc:
        * tao/IORManipulation/IORManipulation.mpc:
        * tao/IORTable/IORTable.mpc:
        * tao/Messaging/Messaging.mpc:
        * tao/PortableServer/PortableServer.mpc:
        * tao/RTCORBA/RTCORBA.mpc:
        * tao/RTPortableServer/RTPortableServer.mpc:
        * tao/SmartProxies/SmartProxies.mpc:
        * tao/Strategies/Strategies.mpc:
        * tao/TypeCodeFactory/TypeCodeFactory.mpc:

          Added "core" as a base project and added "include_dir" value.

Sat Aug 24 16:17:46 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE_Static.dsw:
	* orbsvcs/LoadBalancer/LoadManager_Static.dsp:
	* orbsvcs/LoadBalancer/LoadMonitor_Static.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing_Static.dsp:
	* orbsvcs/orbsvcs/PortableGroup_Static.dsp:

	  Added static library/link versions of the Load Balancer and
	  PortableGroup related MSVC++ projects.

	* orbsvcs/LoadBalancer/LoadBalancer.h:
	* orbsvcs/LoadBalancer/LoadBalancer.cpp:

	  Removed these obsolete files.  They were left over from the old
	  load balancer prototype.

Fri Aug 23 18:52:46 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (init):

	  Updated "-ORBResources" deprecation message so that it says
	  something useful.  Previously it only stated an option was
	  deprecated, not which one!

	* tao/corbafwd.h (TAO_SYSTEM_EXCEPTION_LIST):
	* tao/Exception.h:
	* tao/Exception.cpp (STANDARD_EXCEPTION_LIST):

	  CORBA 3.0 adds three SystemExceptions to the "CORBA" namespace.
	  They are INVALID_ACTIVITY, ACTIVITY_COMPLETED,
	  ACTIVITY_REQUIRED.  All are apparently Transaction Service
	  related.

	  (_tao_get_omg_exception_description):

	  Updated a number of system exception minor code descriptions.

	* tao/CORBALOC_Parser.cpp:

	  Nuked trailing whitespace.

Fri Aug 23 16:15:00 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/TAO_PortableServer_Static.dsp:

  	  Removed all references to the no longer existent
	  ObjectReferenceFactory.* files.

Fri Aug 23 17:21:23 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_be_visitor_constant/constant_ch.cpp:
        * TAO_IDL/be_be_visitor_constant/constant_cs.cpp:

          Changed again, to handle the case where a constant is defined
 	  inside an interface or valuetype. In such cases, we still can't
 	  use the constant in a switch expression, but we can for all
 	  other cases.  Thanks to James Beale <JAMES.H.BEALE@saic.com> for
 	  helping to motivate this.

Fri Aug 23 17:03:05 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* */*.conf.xml: Converted all *.conf files to *.conf.xml files and
	  added them.

Fri Aug 23 11:23:07 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/be/be_visitor_constant/constant_cs.cpp (visit_constant):

	  Fixed unused argument warning.

	* tao/PortableServer/ObjectReferenceTemplate.h
	  (~TAO_ObjectReferenceTemplate):

	  Made this destructor protected to enforce proper memory
	  management through reference counting since this
	  ObjectReferenceTemplate implementation is reference counted.

	  (destroy):
	* tao/PortableServer/ObjectReferenceTemplate.cpp (destroy):

	  Removed this unused, unnecessary and useless method.

	  (make_object):

	  No need to store the created object reference in a temporary
	  variable.  Just return it.

	* tao/PortableServer/ObjectReferenceFactory.h:
	* tao/PortableServer/ObjectReferenceFactory.i:
	* tao/PortableServer/ObjectReferenceFactory.cpp:

	  Removed these unused files.

	* tao/PortableServer/Default_ORT.pidl:

	  Removed default ObjectReferenceFactory ValueType.  It is no
	  longer needed.

	  Updated tao_idl invocation comments to not include any export
	  commands.  There is no need to export the ValueType in the
	  generated stub since it is only meant to be used internally by
	  TAO's POA.

	  Added comments explaining how to regenerate the Default_ORTC.*
	  stub files.

	* tao/PortableServer/Default_ORTC.h:
	* tao/PortableServer/Default_ORTC.i:
	* tao/PortableServer/Default_ORTC.cpp:

	  Regenerated the stubs files.

	* tao/PortableServer/POA.h:

	  Removed unnecessary "friend class TAO_ObjectReferenceFactory"
	  declaration.

	* tao/PortableServer/POA.cpp:

	  No need to include "ObjectReferenceFactory.h".  The class
	  declared in that header was never used.

	* tao/PortableServer/PortableServer.pidl:

	  Corrected comments on patch generation.  The given shell code
	  didn't work.

	* tao/PortableServer/Makefile:
	* tao/PortableServer/Makefile.bor:
	* tao/PortableServer/TAO_PortableServer.dsp:

	  Removed all references to the ObjectReferenceFactory.* files.

	* tao/PortableServer/diffs/Default_ORT.diff:

	  Regenerated this patch.  It has been improved to remove
	  inclusion of several unnecessary headers.

Fri Aug 23 10:34:36 2002  Ossama Othman  <ossama@uci.edu>

	* examples/POA/Generic_Servant/client.cpp (main):

	  Removed unused variable.

	  Fixed emulated exception macro usage.

Fri Aug 23 09:45:05 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/PortableServer/AMH_Response_Handler.cpp
	(TAO_AMH_Response_Handler):
	  The transport_ was being 'released' more than once in case the
	control-flow entered the if condition.  Remedied this by adding an
	else condition.  The transport_ is now released only once,
	whichever path the control flows through.

Fri Aug 23 11:29:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:

          Made code generation for constants always inline
          in the header file, since we no longer support
          platforms without namespaces. If this change doesn't
          cause any unforseen problems on any platforms, I'll
          remove the client source visitor altogether, as well
          as the command line options to generate constants
          inline, and make it the default.

Fri Aug 23 10:33:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:

          Changed implementation class declaration to inherit
          from the stub class, if the interface is local. Thanks
          to Roy Sharon <roysharon@hotmail.com> for reporting
          the bug. This closes [BUGID:1188].

Fri Aug 23 10:10:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_operation.cpp (fe_add_argument):

          Added check for anonymous array as operation argument,
          which is illegal. Thanks to Frank Hunleth <fhunleth@cs.wustl.edu>
          for reporiting the bug. This closes [BUGID:840].

Thu Aug 22 20:08:47 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/POA.i (reference_to_servant):

	  Added missing ACE_INLINE declaration.  Fixes a "multiple
	  definition" link-time errors.

Thu Aug 22 16:00:59 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/README:

	  Added some detailed usage notes for the LoadManager.

Thu Aug 22 15:24:06 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp:

	  On Solaris, include <sys/loadavg.h> to pull in the getloadavg()
	  prototype.

Thu Aug 22 14:06:06 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tao/PortableServer/POA.cpp (id_to_servant_i and
	  reference_to_servant_i): If a POA has the USE_DEFAULT_SERVANT
	  policy and a default servant has been registered with the POA,
	  id_to_servant() should return the default servant. But since the
	  original POA spec did not have this requirement, id_to_servant()
	  was throwing the ObjectNotActive exception.  Changed
	  id_to_servant_i() to handle this use
	  case. reference_to_servant() was already handling this use case,
	  but needed some refactoring.

 	  Thanks to Lan Zhineng <lanzn@huawei.com> for reporting this.

	* tests/POA/Default_Servant: Added new test that checks the
	  behavior of POA::id_to_servant() and POA::reference_to_servant()
	  with the use of default servants.

          The following files were added:

	  - tests/POA/Default_Servant/Default_Servant.cpp
	  - tests/POA/Default_Servant/Default_Servant.dsp
	  - tests/POA/Default_Servant/Default_Servant.dsw
	  - tests/POA/Default_Servant/Default_Servant.mpc
	  - tests/POA/Default_Servant/Makefile
	  - tests/POA/Default_Servant/makefile.bor
	  - tests/POA/Default_Servant/run_test.pl
	  - tests/POA/Default_Servant/test.idl

          The following files were added:

	  - tests/TAO_Tests.dsw
	  - tests/POA/Makefile
	  - tests/POA/Makefile.bor
	  - tests/POA/README
	  - ACE_wrappers/bin/auto_run_tests.lst

        * examples/POA: The use of name "Foo" for the test interface was
	  unnecessary, inconsistent, and somewhat silly.  Therefore, I
	  replaced it with the standard name "test".

	  The following files were removed:

	  - examples/POA/Forwarding/Foo.idl
	  - examples/POA/Forwarding/MyFooServant.cpp
	  - examples/POA/Forwarding/MyFooServant.h
	  - examples/POA/Generic_Servant/Foo.idl
	  - examples/POA/Generic_Servant/MyFooServant.cpp
	  - examples/POA/Generic_Servant/MyFooServant.h
	  - examples/POA/TIE/Foo.idl
	  - examples/POA/TIE/Foo_i.cpp
	  - examples/POA/TIE/Foo_i.h

	  The following files were added:

	  - examples/POA/Forwarding/test.idl
	  - examples/POA/Forwarding/test_i.cpp
	  - examples/POA/Forwarding/test_i.h
	  - examples/POA/Generic_Servant/test.idl
	  - examples/POA/Generic_Servant/test_i.cpp
	  - examples/POA/Generic_Servant/test_i.h
	  - examples/POA/TIE/test.idl
	  - examples/POA/TIE/test_i.cpp
	  - examples/POA/TIE/test_i.h

  	  The following files were changed:

	  - examples/POA/README
	  - examples/POA/Adapter_Activator/Makefile
	  - examples/POA/Adapter_Activator/run_test.pl
	  - examples/POA/Adapter_Activator/server.cpp
	  - examples/POA/Explicit_Activation/Makefile
	  - examples/POA/Explicit_Activation/run_test.pl
	  - examples/POA/Explicit_Activation/server.cpp
	  - examples/POA/Forwarding/Makefile
	  - examples/POA/Forwarding/Servant_Activator.cpp
	  - examples/POA/Forwarding/Servant_Activator.h
	  - examples/POA/Forwarding/client.bor
	  - examples/POA/Forwarding/client.cpp
	  - examples/POA/Forwarding/client.dsp
	  - examples/POA/Forwarding/server.bor
	  - examples/POA/Forwarding/server.cpp
	  - examples/POA/Forwarding/server.dsp
	  - examples/POA/Generic_Servant/Makefile
	  - examples/POA/Generic_Servant/README
	  - examples/POA/Generic_Servant/client.bor
	  - examples/POA/Generic_Servant/client.cpp
	  - examples/POA/Generic_Servant/client.dsp
	  - examples/POA/Generic_Servant/generic_servant.bor
	  - examples/POA/Generic_Servant/server.dsp
	  - examples/POA/Loader/Servant_Activator.cpp
	  - examples/POA/Loader/Servant_Activator.h
	  - examples/POA/Loader/Servant_Locator.cpp
	  - examples/POA/Loader/Servant_Locator.h
	  - examples/POA/Loader/Server_Manager.cpp
	  - examples/POA/Loader/Server_Manager.h
	  - examples/POA/Loader/run_test.pl
	  - examples/POA/On_Demand_Activation/Makefile
	  - examples/POA/On_Demand_Activation/README
	  - examples/POA/On_Demand_Activation/Servant_Activator.cpp
	  - examples/POA/On_Demand_Activation/Servant_Activator.h
	  - examples/POA/On_Demand_Activation/Servant_Locator.cpp
	  - examples/POA/On_Demand_Activation/Servant_Locator.h
	  - examples/POA/On_Demand_Activation/run_test.pl
	  - examples/POA/On_Demand_Activation/server.cpp
	  - examples/POA/On_Demand_Loading/Servant_Activator.cpp
	  - examples/POA/On_Demand_Loading/Servant_Activator.h
	  - examples/POA/On_Demand_Loading/Servant_Locator.cpp
	  - examples/POA/On_Demand_Loading/Servant_Locator.h
	  - examples/POA/On_Demand_Loading/Servant_Manager.cpp
	  - examples/POA/On_Demand_Loading/Servant_Manager.h
	  - examples/POA/On_Demand_Loading/Server_Manager.cpp
	  - examples/POA/On_Demand_Loading/Server_Manager.h
	  - examples/POA/On_Demand_Loading/run_test.pl
	  - examples/POA/Reference_Counted_Servant/Makefile
	  - examples/POA/Reference_Counted_Servant/run_test.pl
	  - examples/POA/Reference_Counted_Servant/server.cpp
	  - examples/POA/TIE/Makefile
	  - examples/POA/TIE/client.bor
	  - examples/POA/TIE/client.cpp
	  - examples/POA/TIE/client.dsp
	  - examples/POA/TIE/server.bor
	  - examples/POA/TIE/server.cpp
          - examples/POA/TIE/server.dsp

Wed Aug 21 22:51:09 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

	* orbsvcs/PSS/PSDL.bor:
	* orbsvcs/PSS/Makefile.bor:

	  Renamed `PSDL.bor' to `Makefile.bor'  The latter is the correct
	  name.

Wed Aug 21 17:11:51 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp (loads):

	  Added support for load computation on Solaris 7 and HPUX.

	  Fixed unused variable warning.

Wed Aug 21 17:01:48 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.bor (RESOURCE):

	  Corrected resource filename.

	  (INCLUDES):

	  Corrected inline file extension, i.e. `.inl' instead of `.i'.
	  The latter extension is deprecated, and will not be used in the
	  new Load Balancer sources.

Wed Aug 21 16:55:39 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadMonitor.bor (CFLAGS, LIBFILES):

	  Add PortableGroup flags and library to these variables.
	  Statically linked binaries require the PortableGroup library to
	  be linked in.

Wed Aug 21 12:41:51 2002  Chad Elliott  <elliott_c@ociweb.com>

        * TAO/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/receiver.h:
        * TAO/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/sender.h:

          Fixed CORBA::Enviroment usage.

        * TAO/orbsvcs/IFR_Service/IFR_Service.mpc:
        * TAO/orbsvcs/LoadBalancer/LoadBalancer.mpc:
        * TAO/orbsvcs/orbsvcs/RTSched.mpc:
        * TAO/orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/AVStreams_Simple_Two_Stage_With_QoS.mpc:
        * TAO/orbsvcs/tests/CosEvent/Basic/CosEvent_Basic.mpc:
        * TAO/orbsvcs/tests/Event/Basic/Event_Basic.mpc:
        * TAO/orbsvcs/tests/Event/Performance/Event_Performance.mpc:
        * TAO/orbsvcs/tests/Trading/Trading.mpc:
        * TAO/performance-tests/Callback/Callback.mpc:
        * TAO/performance-tests/Cubit/TAO/DII_Cubit/DII_Cubit.mpc:
        * TAO/performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/ORB_Per_Priority.mpc:
        * TAO/performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Single_Endpoint.mpc:
        * TAO/performance-tests/RTCorba/Oneways/Reliable/Reliable.mpc:
        * TAO/tests/Collocation/Collocation.mpc:
        * TAO/tests/IORManipulation/IORManipulation.mpc:
        * TAO/tests/MProfile/MProfile.mpc:
        * TAO/tests/MProfile_Forwarding/MProfile_Forwarding.mpc:

          Fixed a few problems with some of the mpc files.

Wed Aug 21 12:05:35 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/LocalObject.h:
	* tao/LocalObject.cpp: Added _get_implementation method which only
	  throw CORBA::NO_IMPLEMENT according to the spec.     [1279]

Wed Aug 21 08:01:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/PSS/PSDL.bor:
          Added new BCB makefile

        * orbsvcs/Makefile.bor:
          Added PSS directory

        * orbsvcs/tests/AVStreams/Component_Switching/*.bor:
        * orbsvcs/tests/AVStreams/Full_Profile/server.bor:
        * orbsvcs/tests/AVStreams/Multicast/*.bor:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/*.bor:
        * orbsvcs/tests/AVStreams/Pluggable/*.bor:
        * orbsvcs/tests/EC_Custom_Marshal/*.bor:
        * orbsvcs/tests/EC_Mcast/Makefile.bor:
        * orbsvcs/tests/EC_Throughput/*.bor:
        * orbsvcs/tests/Event/Basic/*.bor:
          Added missing libraries

Tue Aug 20 14:20:40 2002  Jaiganesh@doc  <bugzilla@cs.wustl.edu>

        * TAO version 1.2.4 released.

Sun Aug 18 12:20:25 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing.rc:

	  Removed this file.  It is no longer used since the old load
	  balancer prototype was removed.

Fri Aug 16 14:22:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager.bor (CFLAGS, LIBFILES):

	  Added Messaging, CosNaming and PortableGroup flags and libraries
	  to address some build errors.

	* orbsvcs/LoadBalancer/LoadMonitor.bor (CFLAGS, LIBFILES):

	  Added Messaging and CosNaming flags and libraries to address
	  some build errors.

Fri Aug 16 11:36:39 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Makefile (BIN):

	  Only set this make variable if the CosLoadBalancing orbsvcs
	  component was enabled.  Fixes minimum CORBA builds.

	* orbsvcs/LoadBalancer/Makefile.LoadManager:
	* orbsvcs/LoadBalancer/Makefile.LoadMonitor:

	  No need to include `rules.tao.GNU'.

Fri Aug 16 10:59:51 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/orbsvcs_static.dsw:

	  Removed "LoadBalancing_Static.dsp" project from this MSVC++
	  workspace.  It no longer exists.

Fri Aug 16 10:40:53 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Loadbalancing.mpc:

	  Removed this MakeProjectCreator file.  It was for the old load
	  balancer prototype.

Fri Aug 16 10:31:51 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager.bor (CFLAGS, LIBFILES):
	* orbsvcs/LoadBalancer/LoadMonitor.bor (CFLAGS, LIBFILES):
	* orbsvcs/orbsvcs/CosLoadBalancing.bor (CFLAGS):

	  Corrected CosLoadBalancing library related variables.  They
	  were still setup for use with the old load balancer prototype.

Fri Aug 16 09:43:03 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadMonitor.cpp:

	  Removed unused "monitor_ior_file" variable.  Fixes a
	  compile-time warning.

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp (loads):

	  Fixed an "unreachable code" warning.

	* tao/RTCORBA/RT_Protocols_Hooks.cpp (get_dscp_codepoint):

	  Do not print exception if debugging output is not enabled.
	  Libraries should not print debugging information unless
	  configured to do so.

	  Fixed "statement is unreachable" warning.

Fri Aug 16 09:12:48 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.h (TAO_POA_Hooks):
	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:

	  Fixed minimum CORBA build errors by placing the offending code
	  within an "#ifdef TAO_HAS_MINIMUM_POA" block.

Thu Aug 15 10:45:00 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp:

	  Temporarily disabled LoadAlert object registration.  There are
	  some order-of-execution and concurrency issues that must be
	  resolved.  This will be fixed prior for the TAO 1.3 release.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.cpp (next_member):

	  Fixed problem where the full range of object group members were
	  not selected due to integer arithmetic overflow.  Store the
	  value that sets the maximum random number in a "float" prior to
	  using it in the random number computation.  This forces floating
	  point arithmetic to be used when computing the random number.

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (add_member):

	  Added some comments to some potentially confusing code.

	  (member_already_present):

	  Compare ObjectGroupIds instead of object group hash map entry
	  pointers.  Even though it worked, the latter was too brittle.

Wed Aug 14 21:32:36 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.h (get_location):
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp (get_location):

	  Removed unused object group parameter from the parameter list.

Wed Aug 14 21:22:29 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.h:

	  Commented out ACE_STATIC_SVC_REQUIRE macro.  It caused the
	  LB_Component to always be run by the Service_Configurator, which
	  is not desirable.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h
	  (built_in_strategy):
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:
	  (built_in_strategy):

	  Pass a pointer to a CosLoadBalancing::StrategyInfo to this
	  method.  It contains strategy-specific property information that
	  can be used when initializing built-in strategies.

	  (next_member):

	  Extract a CosLoadBalancing::StrategyInfo from the load balancing
	  strategy property value for the given object group instead of
	  string.  The former is the correct type.  Fixes a problem where
	  a CORBA::OBJECT_NOT_EXIST exception was always thrown when
	  attempting to bind a client to an object group member.

	* orbsvcs/orbsvcs/LoadBalancing/LB_MemberLocator.cpp (preinvoke):

	  Convert PortableGroup::ObjectGroupNotFound and
	  PortableGroup::MemberNotFound exceptions to
	  CORBA::OBJECT_NOT_EXIST.  The first two cannot be thrown from
	  this method.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.cpp:

	  Added some debugging code.

	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp
	  (get_properties):

	  Do not attempt to override default properties with type
	  properties if no type properties have been set.  Addresses a
	  memory access violation.

Wed Aug 14 10:57:52 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl (register_load_alert):
	  (get_load_alert, remove_load_alert, enable_alert):
	  (disable_alert):

	  Removed ObjectGroup "in" parameter.  LoadAlert objects are
	  location-oriented not group-oriented.

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.h
	  (TAO_LB_CPU_Monitor):

	  Mixed-in PortableServer::RefCountServantBase to enable reference
	  counting of this servant.

	  (~TAO_LB_CPU_Monitor):

	  Added a protected destructor to enforce proper memory management
	  through reference counting.

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp:

	  Added a no-op destructor.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.h (TAO_LB_Component):

	  Corrected class documentation.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.cpp (init):

	  Removed erroneous argument count check that prevented
	  initialization of the TAO_LB_Component Service Object.

	* orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.h:

	  Added a new "lock" and LoadAlert object reference members.

	* orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp:

	  (components_established):

	  Moved LoadAlert object activation and registration to the
	  adapter_manager_state_changed() method.  Creation of the
	  LoadAlert object reference through a partially constructed POA
	  was not a good idea :-).  Fixes a weird infinite recursion
	  problem.

	  (adapter_manager_state_changed):

	  Register the LoadAlert object when the AdapterManager is
	  activated.

	  (register_load_alert):

	  New private method that creates and registers the LoadAlert
	  object reference.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp (get_location):
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.h (enable_alert):
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.cpp (enable_alert):

	  The CosLoadBalancing::LoadAlert::{enable,disable}_alert()
	  methods no longer accept an object group reference parameter.
	  Updated all parameter lists and method calls.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertInfo.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertInfo.cpp:

	  Since LoadAlert objects are location-oriented, there is no need
	  cache a copy of any object group references.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertMap.cpp:

	  Changed ACE_Hash_Map_Manager_Ex template parameters to reflect
	  the fact that LoadAlert objects are location-oriented.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h
	  (register_load_alert, get_load_alert, remove_load_alert):
	  (enable_alert, disable_alert):
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:
	  (register_load_alert, get_load_alert, remove_load_alert):
	  (enable_alert, disable_alert):

	  Removed ObjectGroup "in" parameter.  LoadAlert objects are
	  location-oriented not group-oriented.

	  The implementation of these methods has been greatly simplified
	  due the above change.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ORBInitializer.h:

	  Removed extraneous "LoadBalancing_export.h" include.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.h:

	  There is no longer any need to cache the LoadAlert object
	  reference.

	  Changed underlying Hash_Map's external ID to an ACE_CString
	  instead of a "const char *".  Addresses some memory management
	  issues.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.cpp:

	  Updated Hash_Map explicit template instantiations in accordance
	  with the above fix.

	  (make_object):

	  Removed LoadAlert object registration code.  Registration is now
	  performed in the LB_IORInterceptor.

	  (find_object_group):

	  When creating an object group, force the membership style to be
	  "application controlled", i.e. PortableGroup::MEMB_APP_CTRL,
	  since the TAO's Load Balancer ObjectReferenceFactory is handling
	  the object group membership, not the Load Balancer itself.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Pull_Handler.cpp
	  (handle_timeout):

	  Correct syntax of some debugging code.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.cpp:

	  Nuked trailing whitespace.

	* orbsvcs/orbsvcs/LoadBalancing/LB_conf.h:

	  Changed default "pull" monitoring interval from 1 second to 5
	  seconds.  1 second is overkill, and adds more overhead than
	  necessary.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
	  (process_criteria):
	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (process_criteria):

	  Made "factory_infos" parameter a reference to a pointer instead
	  of a simple pointer.  The pointer parameter itself is updated by
	  this method, not the contents of the memory location.

	  (create_object):

	  Fixed a segmentation fault caused by attempting to invoke
	  methods on a FactoryInfos object through a zero pointer.

	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp:

	  Changed underlying Hash_Map's external ID to an ACE_CString
	  instead of a "const char *".  Addresses some memory management
	  issues.

	  (set_type_properties, get_type_properties):
	  (remove_type_properties):

	  Use the Hash_Map's "ENTRY" trait when declaring a corresponding
	  variable instead of the actual template type.  This makes it
	  possible to change the Hash_Map template parameters without
	  mucking with code that accesses the Hash_Map_Entry.

	  (get_type_properties):

	  Fixed problem where a CORBA::BAD_PARAM() was always thrown if
	  no type-specific properties were set.

	* orbsvcs/LoadBalancer/Makefile.LoadManager:
	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing:

	  Updated dependencies.

Tue Aug 13 19:21:07 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.bor (LIBFILES):

	  Added missing line continuation character (a backslash).

Tue Aug 13 16:19:31 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:

          Added a temporary hack to make VC7 happy, which consists
          of adding the initialization to zero of a boolean
          out argument in the generated skeleton body. Thanks to
          Vincent Nicolas <vincent.nicolas@radiometer.dk> for
          pointing out the problem.

Tue Aug 13 14:03:51 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/README:

	  Descriptions of the "LoadManager" and "LoadMonitor" binaries.

Tue Aug 13 13:52:15 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager.cpp (ACE_TMAIN):

	  Changed default load balancing strategy to "Random."  The
	  previous default, "RoundRobin," is currently unimplemented.

	  Corrected type of value inserted into
	  "omg.org.CosLoadBalancing.Strategy" property.  The correct type
	  is CosLoadBalancing::StrategyInfo, not a string.

	* orbsvcs/LoadBalancer/LoadMonitor.cpp (register_load_monitor):

	  Missing check for zero return from strcasecmp() caused the
	  "PULL" load monitoring style to always be used.  Added missing
	  zero check.  Both "PUSH" and "PULL" load monitoring styles work
	  now.

	  (ACE_TMAIN):

	  Corrected problem where the "push handler" timer was cancelled
	  before the Reactor's event loop ever started.

	* orbsvcs/LoadBalancer/Push_Handler.cpp (handle_timeout):

	  Added some debugging code.

Tue Aug 13 11:25:23 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Push_Handler.h:
	* orbsvcs/LoadBalancer/Push_Handler.cpp:

	  Event handler responsible for pushing loads to the LoadManager
	  when the "PUSH" load monitoring style is used.

	* orbsvcs/LoadBalancer/LoadMonitor.cpp:

	  Correctly handle both "PULL" and "PUSH" load monitoring styles.

	  Added support for custom LoadMonitors.  Users may now feed this
	  utility the IOR of their custom LoadMonitor.

	* orbsvcs/LoadBalancer/Makefile:

	  Added these targets to the ".PHONY" target.  This forces the
	  top-level Makefile to invoke these targets regardless of whether
	  or not the actual binaries they build have been built or not.
	  This fixes a problem where the binaries were not rebuilt after
	  invoking the top-level Makefile despite the fact that the
	  binary sources were modified.

	* orbsvcs/LoadBalancer/LoadMonitor.bor (OBJFILES)
	* orbsvcs/LoadBalancer/Makefile.LoadMonitor (SRC):

	  Added Push_Handler to the list of sources and/or object files.

Tue Aug 13 10:54:08 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.bor (CFLAGS):

	  Added missing CosNaming flags to this variable.  Thanks to
	  Johnny for pointing this out.

Tue Aug 13 10:25:36 2002  Ossama Othman  <ossama@uci.edu>

	* tests/DLL_ORB/Makefile (CLIENT_MODULE_LIB, SERVER_MODULE_LIB):

	  Added these targets to the ".PHONY" target.  This forces the
	  top-level Makefile to invoke these targets regardless of whether
	  or not the actual libraries they build have been built or not.
	  This fixes a problem where the libraries were not rebuilt after
	  invoking the top-level Makefile despite the fact that the
	  library sources were modified.

Tue Aug 13 09:16:44 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Makefile.bor (DIRS):

	  Removed LoadBalancing test directory from the list of tests.  A
	  new test suite is currently under development.

	* orbsvcs/tests/LoadBalancing/Hash_Replica.idl:
	* orbsvcs/tests/LoadBalancing/Hash_ReplicaControl.cpp:
	* orbsvcs/tests/LoadBalancing/Hash_ReplicaControl.h:
	* orbsvcs/tests/LoadBalancing/Hash_Replica_i.cpp:
	* orbsvcs/tests/LoadBalancing/Hash_Replica_i.h:
	* orbsvcs/tests/LoadBalancing/LoadBalancing.dsw:
	* orbsvcs/tests/LoadBalancing/LoadBalancing.mpc:
	* orbsvcs/tests/LoadBalancing/Makefile:
	* orbsvcs/tests/LoadBalancing/Makefile.bor:
	* orbsvcs/tests/LoadBalancing/client.bor:
	* orbsvcs/tests/LoadBalancing/client.cpp:
	* orbsvcs/tests/LoadBalancing/client.dsp:
	* orbsvcs/tests/LoadBalancing/server.bor:
	* orbsvcs/tests/LoadBalancing/server.cpp:
	* orbsvcs/tests/LoadBalancing/server.dsp:

	  Removed this test.  It was for the old Load Balancer prototype.
	  New tests will be added soon.

Tue Aug 13 08:22:33 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Makefile:
	* orbsvcs/LoadBalancer/Makefile.LoadManager:
	* orbsvcs/LoadBalancer/Makefile.LoadMonitor:
	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing:

	  Do not build the Load Balancer related binaries if
	  PortableInterceptor support is disabled.  Interceptor support is
	  required.

Tue Aug 13 07:54:39 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.bor:

	  Fixed IDL file compile rules.  One still referred to the IDL for
	  the old Load Balancer, and the other for LB_ORT.idl was
	  missing.

	  (OBJFILES):

	  Added stub and skeleton sources to the list of object files to
	  build.

	  Thanks to Johnny Willemsen for suggesting how to fix this
	  Borland Makefile.

	  (LIBFILES):

	  Added missing PortableGroup, CosNaming and Messaging libraries
	  to the list of libraries to link.

Mon Aug 12 20:03:09 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp (loads):

	  Added missing CPU load retrieval code.  Currently, only Linux
	  and Windows are supported.

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing (CPP_SRCS):
	* orbsvcs/orbsvcs/CosLoadBalancing.bor (OBJFILES):

	  Previously neglected to add LB_CPU_Monitor source to these
	  lists.  Added it.

Mon Aug 12 18:48:34 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.h:

	  Include "ace/Service_Config.h" on Windows to pull in some
	  necessary types.  Corrects build errors on Windows.

	* orbsvcs/LoadBalancer/LoadManager.cpp:

	  Fixed a syntax error.  Neglected to commit this change earlier.

Mon Aug 12 17:53:08 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE.dsw:

	  Added new LoadManager and LoadMonitor projects to this
	  workspace.

	* TAOACE_Static.dsw:

	  Removed old LoadBalancer project from this workspace.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.h:

	  Include "LoadBalancing_export.h" to pull Windows librar export
	  macros.

	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:

	  Added new sources to this project file.

	* orbsvcs/orbsvcs/LoadBalancing.dsp:
	* orbsvcs/orbsvcs/LoadBalancing_Static.dsp:

	  Removed these project files.  They were used for the old load
	  balancer prototype.

Mon Aug 12 17:27:30 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadBalancer_Service.dsp:

	  Removed this project file.  It was used for the old load
	  balancer prototype.

	* orbsvcs/LoadBalancer/LoadManager.bor:
	* orbsvcs/LoadBalancer/LoadManager.dsp:
	* orbsvcs/LoadBalancer/LoadMonitor.bor:
	* orbsvcs/LoadBalancer/LoadMonitor.dsp:
	* orbsvcs/LoadBalancer/Makefile:
	* orbsvcs/LoadBalancer/Makefile.LoadManager:
	* orbsvcs/LoadBalancer/Makefile.LoadMonitor:
	* orbsvcs/LoadBalancer/Makefile.bor:

	  Added/fixed projects and Makefiles so that both the LoadManager
	  and LoadMonitor binaries are built.  Previously, only the
	  LoadManager was built.

Mon Aug 12 08:31:03 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.h (TAO_LB_LoadAlert):

	  This servant is no longer reference counted.

	  (~TAO_LB_LoadAlert):

	  Commented out protected destructor.  A protected destructor is
	  no longer needed since reference counting is no a no-op.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.cpp (~TAO_LB_LoadAlert):

	  Likewise.

	* orbsvcs/orbsvsc/LoadBalancing/LB_LoadManager.h (init):
	* orbsvcs/orbsvsc/LoadBalancing/LB_LoadManager.cpp (init):

	  This method now accepts a pseudo-reference to the ORB.  The
	  LoadManager must register itself with the ORB's
	  resolve_initial_references() mechanism.

	* orbsvsc/orbsvcs/LoadBalancing/LB_Component.cpp:
	* orbsvsc/orbsvcs/LoadBalancing/LB_Component.h:
	* orbsvsc/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp:
	* orbsvsc/orbsvcs/LoadBalancing/LB_IORInterceptor.h:
	* orbsvsc/orbsvcs/LoadBalancing/LB_ORBInitializer.cpp:
	* orbsvsc/orbsvcs/LoadBalancing/LB_ORBInitializer.h:
	* orbsvsc/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.cpp:
	* orbsvsc/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.h:

	  Fixed all syntax errors and warnings.

	* orbsvcs/LoadBalancer/LoadManager.cpp (ACE_TMAIN):

	  Updated init() call to pass in the ORB pseudo-reference.

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing (IDL_FILES, CPP_SRCS):

	  Added new files IDL and C++ sources files to the appropriate
	  "make" variables.

	* orbsvcs/orbsvcs/Makefile.LoadBalancing:
	* orbsvcs/orbsvcs/LoadBalancing.bor:

	  Removed these Makefiles.  They were for the old Load Balancer
	  prototype.

	* orbsvcs/orbsvcs/CosLoadBalancing.bor:

	  New Load Balancer's Borland Makefile.

	* orbsvcs/orbsvcs/Makefile.bor (MAKEFILES):

	  Replaced "LoadBalancing.bor" with "CosLoadBalancing.bor", the
	  new Load Balancer's Borland Makefile.

Mon Aug 12 10:18:49 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* PROBLEM-REPORT-FORM: Fixed a typo where "ASCII text" was spelled
	  "ASCII test".  Thanks to Eric Newton <ecn@metaslash.com> for
	  reporting this.

Mon Aug 12 10:02:29 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* docs/releasenotes/index.html: Updated link to CCM (CIAO)'s
	  release note.

Mon Aug 12 07:16:39 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Component.cpp:

	  New Service Object that servers can use to transparently add
	  load balancing via the ACE_Service_Configurator.

	* orbsvsc/orbsvcs/LoadBalancing/LB_IORInterceptor.h:

	  Cache the ORBid of the ORB this IORInterceptor is registered
	  with.

	* orbsvsc/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp
	  (components_established):

	  Pass a pseudo-reference to the ORB to the
	  LB_ObjectReferenceFactory constructor.

	* orbsvsc/orbsvcs/LoadBalancing/LB_ORBInitializer.h:

	  Cache the options passed to the LB_Components object.  They are
	  required to configure the LB_ObjectReferenceFactory.

	* orbsvsc/orbsvcs/LoadBalancing/LB_ORBInitializer.cpp (pre_init):

	  This method is now a no-op.  No pre-initialization work is
	  necessary.

	  (post_init):

	  Removed dead code and replaced it with the code that was
	  intended to be there.  In particular, create and register the
	  IORInterceptor that contributes to the server side load
	  balancing transparency.

	* orbsvsc/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.h:

	  Added a member that is used to keep track of whether or not a
	  given member was registered with the LoadManager.

	* orbsvsc/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.cpp
	  (make_object):

	  Prevent attempts to register a member's object reference each
	  time make_object() is called.  Registration should only be
	  performed once.

Sun Aug 11 23:17:47 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvsc/orbsvcs/LoadBalancing/LB_ORT.idl:

	  New IDL file that defines a TAO load balancer specific
	  ObjectReferenceFactory ValueType.

	* orbsvsc/orbsvcs/LoadBalancing/LB_IORInterceptor.h:
	* orbsvsc/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp:

	  New IORInterceptor that sets the TAO load balancer specific
	  ObjectReferenceFactory for a given object adapter.

	* orbsvsc/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.h:
	* orbsvsc/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.cpp:

	  TAO load balancer specific ObjectReferenceFactory that creates
	  an object group for a member of the given repository ID (if
	  instructed to do so), creates an "unpublished" reference for
	  that member, and adds it to the object group via the
	  LoadManager.

Sat Aug 10 17:09:27 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/examples/PSS/PSS.dsw:
	* orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/Simple_Naming.dsp: Removed them from the
	  repo. They dont seem to work right in any configuration and this
	  should be fixed after the beta.

Fri Aug 9 21:22:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* tao/RTCORBA/TAO_RTCORBA.dsp:
	* tao/RTCORBA/TAO_RTCORBA_Static.dsp:

	  Reacreated the project files to add files
	  Network_Priority_Mapping.{h,cpp,i},
	  Linear_Network_Priority_Mapping.{h,cpp,i},
	  Network_Priority_Mapping_Manager.{h,cpp,i} to fix the compile
	  errors.

Fri Aug  9 15:28:10 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* tao/RTCORBA/RT_Protocols_Hooks.cpp:
	  Fixed the Debian NoInline builds.


Fri Aug  9 15:26:30 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:

          Fixed an overlooked item in my previous fix to an enum
          constant typedef problem.

Fri Aug  9 11:57:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/LF_Event_Binder.cpp:
	* tao/LF_Event_Binder.inl: Again moved the destructor from the
	  inline file to the cpp file. Repeat of this fix "Fri Aug  2
	  00:29:43 2002  Balachandran Natarajan
	  <bala@cs.wustl.edu>". Yes, some compilers are buggy. But they
	  look like buggy code and it takes a lot of time to track
	  them. This one took me a atleast 8 hours to get to the
	  problem.

	  This should fix somerandom core dumps with MT_Timeout test which
	  uses this feature heavily.

Thu Aug  8 23:12:23 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile: Reverted this change "Thu Aug  8
	  18:31:00 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>"

Thurs Aug 8 22:33:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* tao/Transport.h:

	  Made the send_message_shared method virtual so it can be
	  overriden by derived classes. Also made the
	  send_message_shared_i and check_event_handler_i methods
	  protected so they can be accessed by derived classes.

	* tao/IIOP_Transport.h:
	* tao/IIOP_Transport.cpp:

	  Overrode the send_message_shared method in order to add the call
	  to connection_handler_->set_dscp_codepoint (). This was
	  necessary because the initial call to set_dscp_codepoint on the
	  connection_handler, from send_message, was failing in some cases
	  as the connection_handler was already destroyed when the client
	  invocation terminated and hence closed the
	  connection_handler. By moving the call to send_message_shared it
	  was ensured that the check for null connection_handler was done
	  after grabbing a lock and hence it could not be deleted when
	  used. Thanks to Balachandran Natarajan <bala@cs.wustl.edu> for
	  helping fix this.

	* tao/RTCORBA/RT_Protocols_Hooks.cpp:

	  When updating client and server TCP protocol properties, made
	  sure that the properties for IIOP returned from the policies was
	  not null. They could be null in cases where a list of protocol
	  types, provided by the same policy that contains the TCP
	  protocol properties, could be specified without any protocol
	  properties set for any of the protocols chosen. Thanks to Irfan
	  Pyarali <irfan@oomworks.com> for pointing to it.

Thu Aug  8 13:35:27 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_expressions.cpp:

          When checking for a type mismatch in an enum constant,
          added a check-and-strip for a typedef. Thanks to Oliver
          Kellogg <Oliver.Kellogg@t-online.de> for sending in
          an example IDL file.

        * tests/IDL_Test/constants.idl:

          Added part of the example IDL file above to the tests.

        * tao/Sequence.h:

          Made the release() method public as required by the spec.
          Thanks to Tommy Andreasen <tommy.andreasen@radiometer.dk>
          for pointing out the oversight.

Thu Aug  8 18:31:00 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/Makefile: If we fail during a recursive
	  make, exit with error code 1.  This makes it easier to detect errors
	  in automated builds.  Thanks to Gary Duzan <gduzan@bbn.com> for
	  inspiring the fix.

Thurs Aug 8 11:36:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* tao/PortableServer/POA.h:
	* tao/PortableServer/POA.cpp:

	  Added the server_portocol method to the base POA class to avoid
	  the cast from TAO_POA to TAO_RT_POA.

	* tao/RTPortableServer/RT_Servant_Dispatcher.cpp

	  Removed the cast from TAO_POA to TAO_RT_POA to avoid compile
	  errors.

	* tao/RTCORBA/Makefile.bor:

	  Added the entries for Linear_Network_Priority_Mapping.obj,
	  Network_Priority_Mapping.obj,
	  Network_Priority_Mapping_Manager.obj to compile with Borland
	  compiler.

Wed Aug  7 23:23:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* tao/RTCORBA/TAO_RTCORBA.dsp:
	* tao/RTCORBA/TAO_RTCORBA_Static.dsp:

	  Added the entries for Linear_Network_Priority_Mapping.{h,cpp,i},
	  Network_Priority_Mapping.{h,cpp,i},
	  Network_Priority_Mapping_Manager.{h,cpp,i} to compile on
	  windows.

Mon Aug  5 15:49:45 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* TAO/TAO-INSTALL.html: Added an entry explaining how to
	  get information on subsetting the TAO ORB services.

Wed Aug  7 16:12:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

	* tests/RTCORBA/Diffserv/Makefile:
	* tests/RTCORBA/Diffserv/README:
	* tests/RTCORBA/Diffserv/client.cpp:
	* tests/RTCORBA/Diffserv/server.cpp:
	* tests/RTCORBA/Diffserv/test.idl:
	* tests/RTCORBA/Diffserv/Custom_Network_Priority_Mapping.h:

	  Added the Diffserv test to demonstrate the setting of Diffserv
	  Codepoints in the GIOP request and replies.

Wed Aug  7 11:59:58 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/Simple_Naming.dsp:
	  Updated the release configurations.

Wed Aug  7 10:50:03 2002  Ossama Othman  <ossama@uci.edu>

	* tao/IIOP_Connection_Handler.cpp (set_dscp_codepoint):
	* tao/IIOP_Transport.cpp (send_request):

	  Fixed emulated exception errors.

Wed Aug  7 13:06:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Object_Adapter.cpp:

	  Fixed compile errors.

Wed Aug  7 00:35:45 2002  Yamuna Krishnamurthy  <yamuna@oomworks.com>

        * tao/RTCORBA/Network_Priority_Mapping_Manager.h:
	* tao/RTCORBA/Network_Priority_Mapping_Manager.cpp:
	* tao/RTCORBA/Network_Priority_Mapping_Manager.i:
	* tao/RTCORBA/Network_Priority_Mapping.h:
	* tao/RTCORBA/Network_Priority_Mapping.cpp:
	* tao/RTCORBA/Network_Priority_Mapping.i:
	* tao/RTCORBA/Linear_Network_Priority_Mapping.h:
	* tao/RTCORBA/Linear_Network_Priority_Mapping.cpp:
	* tao/RTCORBA/Linear_Network_Priority_Mapping.i:

	  Added a Network Priority Mapping framework similar to the native
	  thread priority mapping framework. This will enable the mapping
	  from RTCORBA priority to Network Priority and vice versa. A
	  default implementation of the Linear Network Priority Mapping is
	  provided in TAO.

	* tao/RTPortableServer/RT_POA.h:
	* tao/RTPortableServer/RT_POA.cpp:

	  Added the server_protocol method to get the current server
	  protocol policy set either at the ORB, thread or POA level..

	* tao/RTPortableServer/RT_Servant_Dispatcher.h:
	* tao/RTPortableServer/RT_Servant_Dispatcher.cpp:

	  Modified the pre_invoke_remote_request to iniate the updation of
	  the tcp protocol properties and set the dscp in the replies
	  sent.

	* tao/RTCORBA/Makefile:
	* tao/RTCORBA/RTCORBA.pidl:
	* tao/RTCORBA/RTCORBAC.h:
	* tao/RTCORBA/RTCORBAC.cpp:
	* tao/RTCORBA/RTCORBAC.i:
	* tao/RTCORBA/RT_ORB.h:
	* tao/RTCORBA/RT_ORB.cpp:
	* tao/RTCORBA/RT_ORBInitializer.h:
	* tao/RTCORBA/RT_ORBInitializer.cpp:
	* tao/RTCORBA/RT_ORB_Loader.h:
	* tao/RTCORBA/RT_ORB_Loader.cpp:

	  Added an additional field enable_network_priority to the
	  TCP_Protocol_Properties. This is a flag which when set enables
	  the setting of diffserv codepoints in the IIOP packets sent.

	  Also added Network_Priority_Mapping native interfaces to provide
	  a mapping from CORBA priority to network priority.

	* tao/RTCORBA/RT_Policy_i.h:
	* tao/RTCORBA/RT_Policy_i.cpp:
	* tao/RTCORBA/RT_Policy_i.i:

	* tao/PortableServer/Servant_Dispatcher.h:
	* tao/PortableServer/Default_Servant_Dispatcher.h:
	* tao/PortableServer/Default_Servant_Dispatcher.cpp:

	  Changed the parameters of the
	  TAO_Default_Servant_Dispatcher::pre_invoke_remote_request
	  method.

	* tao/objectid.h:

	Defined TAO_OBJID_NETWORKPRIORITYMAPPINGMANAGER

	* tao/Connection_Handler.h:
	* tao/Connection_Handler.cpp:

	  Added:
	  update_protocol_properties - to update the tcp protocol
	  properties by getting the current tcp protocol properties from
	  the protocol policies set at the ORB,thread, object or POA
	  level.

	* tao/IIOP_Connection_Handler.h:
	* tao/IIOP_Connection_Handler.cpp:
	* tao/IIOP_Connection_Handler.i:

	  Added:
	  set_dscp_codepoint - to set the dscp codepoint on the tcp
	  connection used by the connection handler that sends GIOP
	  request and response messages. When the connection is diffserv
	  enabled all the GIOP message (requests and responses) packets
	  sent will have the Diffserv Codepoint set.

	* tao/Protocols_Hooks.h:
	* tao/Protocols_Hooks.cpp:
	* tao/RTCORBA/RT_Protocols_Hooks.h:
	* tao/RTCORBA/RT_Protocols_Hooks.cpp:
	* tao/RTCORBA/RT_Protocols_Hooks.i:
	* tao/Default_Protocols_Hooks.h:
	* tao/Default_Protocols_Hooks.cpp:

	  Added:
	  update_client_protocol_properties - to update the client tcp
	  protocol properties on the connection handler based on the
	  client protocol properties set at ORB, thread or object level.

	  update_server_protocol_properties - to update the server tcp
	  protocol properties on the cinnection handler based on the
	  server protocol property set at the ORB, thread or POA level.

	  get_dscp_codepoint - to calculate and return the dscp
	  corresponding corresponding to the CORBA to network mapping
	  used.

	* tao/IIOP_Acceptor.cpp:
	* tao/IIOP_Connector.cpp:
	* tao/Strategies/UIOP_Acceptor.cpp:
	* tao/Strategies/UIOP_Connector.cpp:

	* tao/IIOP_Transport.h:
	* tao/IIOP_Transport.cpp:

	  Made the connection_handler_i accessor method public.
	  connection handler.

Tue Aug  6 22:42:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Muxed_GIOP_Versions/run_test.pl: Slightly increased the
	  timeout on the client so that the test can run to completion on
	  Sun builds.

Tue Aug 6 17:21:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/Simple_Naming.dsp:
	  Updated the release configurations.

Tue Aug  6 12:08:00 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

	  Force the Singleton instance to be initialized/instantiated.
	  Some SSLIOP option combinations will result in the Singleton
	  instance never being initialized.  In that case, problems may
	  occur later on due to lack of initialization of the underlying
	  SSL library (e.g. OpenSSL), which occurs when an ACE_SSL_Context
	  is instantiated.  The code is cleaner this way anyway.

Mon Aug  5 17:14:45 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp (make_X509):
	  (make_EVP_PKEY):

	  Added missing error checks.  Thanks to Dmitry Khrapov
	  <yavannadil@yahoo.com> for providing a patch.

Mon Aug  5 09:38:18 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/Simple_Naming.dsp:
	* orbsvcs/examples/PSS/PSS.dsw:
          Updated the release configurations.

Mon Aug  5 07:23:10 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/PSS/PSDL_l.cpp:
	  Fixed the warning in the Lynx build. Thanks to Bala for
          showing it.

Sun Aug  4 14:38:14 2002  Priyanka Gontla <pggontla@ece.uci.edu>

        * orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/Simple_Naming.dsp:
	* orbsvcs/examples/PSS/PSS.dsw:
	  Fixed and added the files back to the repo.

Sun Aug  4 13:30:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* performance-tests/Cubit/TAO/IDL_Cubit/svc.conf:
	* performance-tests/Cubit/TAO/IDL_Cubit/svc.zero_lock.conf:
	* performance-tests/Cubit/TAO/MT_Cubit/svc.conf:
	* tests/Collocation/svc.conf:
	* tests/OctetSeq/svc1.conf:
	* tests/OctetSeq/svc2.conf:
	* tests/Smart_Proxies/Collocation/svc.conf:
	* tests/Strategies/advanced_svc.conf:
	* tests/Strategies/svc.conf: Removed the usage of -ORBResources
	  option from all the above files since the option has been
	  deprecated.

Sun Aug 04 09:56:29 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* docs/releasenotes/orbcore.html: Updated the release notes. Looks
	  like it was woefully out-of-date! Included some of the latest
	  concerns and plans in it. Need to make a pass again before the
	  beta goes out of the door.

Sun Aug  4 15:31:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Invocation.h:
        * tao/Service_Context.h:
        * tao/ValueBase.h:
        * tao/corbafwd.h:
        * orbsvcs/ImplRepo_Service/tao_imr_i.h:
        * orbsvcs/orbsvcs/CosNotifyChannelAdmin.idl:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy.h:
        * orbsvcs/orbsvcs/AV/RTCP.h:
        * orbsvcs/orbsvcs/AV/RTP.h:
          Fixed incorrect doxygen commands

        * TAO/orbsvcs/tests/AVStreams/Component_Switching/distributer.bor
        * TAO/orbsvcs/tests/AVStreams/Component_Switching/receiver.bor
        * TAO/orbsvcs/tests/AVStreams/Component_Switching/sender.bor
        * TAO/orbsvcs/tests/AVStreams/Full_Profile/ftp.bor
        * TAO/orbsvcs/tests/AVStreams/Full_Profile/server.bor
        * TAO/orbsvcs/tests/AVStreams/Multicast/ftp.bor
        * TAO/orbsvcs/tests/AVStreams/Multicast/server.bor
        * TAO/orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.bor
        * TAO/orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.bor
          Added missing ACE_QoS library, this is needed for static builds.

Sat Aug  3 20:44:51 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/AMH/Sink_Server/Base_Server.cpp:
	* examples/AMH/Sink_Server/client.cpp:
	  Fixes for warnings in g++ 2.96 static builds.  The compiler was,
	  in essense, complaining about uninitialised variables
	  (start_test, end_test) in Base_Server.cpp.  Thanks to Bala for
	  already fixing the return-warning in client.cpp

Sat Aug 03 18:50:11 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/PSS/PSDL.dsp:
	* orbsvcs/PSS/PSDL_Parser.dsp:
	* orbsvcs/PSS/PSDL_Datastore.dsp: Fixed the path to
	  TAO_Svc_Utils.lib in the release configuration.

Sat Aug  3 18:20:23 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/PSS.dsw: Removed these files from the
	  repo. The Win32 builds had problems groking these files and were
	  giving a tough time to the builds.

Sat Aug  3 14:34:59 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Makefile: The directory Smart_Proxies had two
	  entries. Removed one of them.

Sat Aug 03 12:42:43 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Thread_Lane_Resources.cpp: Delete the allocators from the
	  lane only after closing down the Reactor and Transport
	  cache. Contents of Reactor or Transport cache, like the event
	  handler and the transport could be using the allocators to
	  release memory. The allocator needs to be around till then!

Sat Aug  3 09:15:03 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/PSS/PSDL_Node_Visitor.cpp (visit_export_dcl): Fixed
	  unreachable statement warnings with TRU 64 builds.

Sat Aug  3 09:08:56 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* examples/AMH/Sink_Server/client.cpp: Fixed warnings from
	  explicit template builds.

Sat Aug  3 08:08:48 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* examples/AMH/Sink_Server/Base_Server.cpp: Fixed a "reaches end
	  of non-void" function warning in g++ builds.

Fri Aug  2 17:44:37 2002  Ossama Othman  <ossama@uci.edu>

	* docs/releasenotes/index.html:

	  Updated security service release notes.

Fri Aug  2 17:27:12 2002  Ossama Othman  <ossama@uci.edu>

	* docs/releasenotes/index.html:

	  Updated load balancer release notes.

Fri Aug  2 16:51:23 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:

	  Removed all explicit template instantiations for old style
	  ACE_Hash_Map_Manager.  They aren't needed.  This may also
	  address the strange unresolved symbol link-time errors since the
	  old style hash map templates inherit from the "_Ex" versions.

Fri Aug  2 15:13:28 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* docs/configurations.html: Added a documentation entry for the
	  Real-time CORBA thread pool model.

Fri Aug  2 16:17:34 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp: Added a
	  missing template instantiation. Should fix problems in

Fri Aug  2 11:35:17 2002  Ossama Othman  <ossama@uci.edu>

	* docs/interceptors.html:

	  Updated CORBA spec URLs.

Fri Aug  2 08:44:19 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/PSS/PSDL_Struct_Visitor.cpp (gen_code_for_si):
	  Filled in information to the structure that will be
	  generated.

	* orbsvcs/examples/PSS/client.cpp (main):
	  Fixed the warning in GCC 3.0 build.

Fri Aug  2 07:38:00 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_ServerRequestInterceptor.cpp
	  (receive_request_service_contexts):

	  Parenthesize expression to clarify precedence.

Fri Aug  2 09:11:27 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ValueFactory_Map.h:
	* tao/ORB_Core.h: Removed a ; that was not required after
	  TAO_SINGLETON_DECLARE.  TRU64 gives warnings with that extra ;.

Fri Aug  2 00:29:43 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Bind_Dispatcher_Guard.i :
	* tao/Bind_Dispatcher_Guard.cpp: Moved the destructor from the
	  inline file to the cpp file. Sounds crazy, but true. g++ seems
	  to miss calling the destructor of this object (which was in the
	  inlined file) created on the stack of the GIOP_Invocation object.

	  When a timeout occurs the stack unwinds but the destrcutor which
	  unbinds the reply dispatcher never gets called. This leaves the
	  reply dispatcher in the map and all hell breaks loose when the
	  reply actually shows up! This problem showed up only in our Full
	  builds on sirion which resulted in the failure of the Timeout
	  test. My testing on sirion with this change seems to work
	  fine. Let us wait and watch our daily builds to see the actual
	  results.

Thu Aug  1 21:00:03 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp (get_location):

	  Corrected LoadManager parameter so that it is not "const."
	  Fixes an "incompatible qualifier" compile-time error.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.h (enable_alert):
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.cpp (enable_alert):

	  Corrected object group reference parameter.  "CORBA::Object_ptr"
	  not "CORBA::Object".

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.inl (forward):

	  Removed this method.  There is no longer a need to cache a
	  forward reference.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ServerRequestInterceptor.cpp
	  (receive_request_service_contexts):

	  Check for the CosLoadBalancing::LOAD_MANAGED ServiceContext in
	  the request's ServiceContextList.  If it exists, and a load
	  alert has been enabled, throw a CORBA::TRANSIENT() to force the
	  client back to the original target, i.e. the LoadManager.

	  Do not attempt to obtain the cached forward reference from the
	  LoadAlert object.  It is longer cached.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ServerRequestInterceptor.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.h:

	  Cosmetic updates.

Thu Aug  1 21:09:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/PSS/PSDL_Node.cpp: Fixed a compile error in Win32
	  builds.

Thu Aug  1 13:26:40 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  Changed name of load shedding related ServiceContext's ServiceId
	  to "LOAD_MANAGED" to better match its purpose as a flag.

Thu Aug  1 13:24:21 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_ClientRequestInterceptor.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_ClientRequestInterceptor.cpp:

	  A client request interceptor that injects an IOP::ServiceContext
	  into a request's IOP::ServiceContextList.  It is needed to
	  support load shedding on servers that host both load balanced
	  and non-load balanced object.

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing:

	  Altered logic of AMI test to check if AMI is disabled instead of
	  enabled.  If AMI is disabled, force no library to be built.
	  Previously, library builds were enabled if AMI support was
	  enabled.  That caused strange interactions with static library
	  builds.

Thu Aug  1 12:22:17 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing:

	  Removed LB_ClientRequestInterceptor from the C++ source list,
	  and regenerated the dependencies.  That file hasn't been
	  committed yet.

Thu Aug  1 13:54:29 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing: Updated dependencies.

Thu Aug  1 11:20:39 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/AMH/Sink_Server/mt_server.cpp (main):
	* examples/AMH/Sink_Server/client.cpp (main):
	* examples/AMH/Sink_Server/Base_Server.cpp (start_orb_and_poa):
	  TRU64 compiler detected an unreachable statement and an implicit
	  return value from main.  Fixed both warnings.

Thu Aug  1 11:18:47 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/orbsvcs/Makefile.IFRService:
	  Updated dependencies.

Thu Aug  1 09:49:12 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/Makefile:
	* orbsvcs/orbsvcs/Makefile.CosLoadBalancing:

	  The new Load Balancer requires AMI to be enabled.  Do not
	  attempt to build it if AMI is disabled.

Thu Aug 01 15:19:44 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/LF_Follower_Auto_Adder.h:
        * tao/Transport_Acceptor.h:
        * tao/Transport_Connector.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Invocation_Endpoint_Selectors.h:
          Fixed incorrect doxygen @file command

Wed Jul 31 16:04:33 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Makefile (DIRS):

	  Temporarily removed LoadBalancing test directory from the list
	  of directories to make.  It depends on the old Load Balancer
	  which is in the process of being phased out.

Wed Jul 31 17:53:40 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/RTCORBA/Thread_Pool/run_test.pl (run_clients): Fixed an
	  error in the script which was causing unnecessary test failures.

Wed Jul 31 16:40:52 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/ORB_Core.h:
	* tao/ValueFactory_Map.h: Applied TAO_SINGLETON_DECLARE to
	  TAO_TSS_RESOURCES, and TAO_VALUEFACTORY_MAP to avoid MSVC from
	  instantiating multiple instantances of singleton in different
	  DLLs.  Thanks to Dimitrije Jankovic <djankov@syncad.com> for
	  reporting ths problem.

Wed Jul 31 16:22:59 2002  Irfan Pyarali  <irfan@oomworks.com>

	* tests/RTCORBA/Profile_And_Endpoint_Selection/run_test.pl: Made
	  it easier to run just IIOP or SHMIOP tests without having to run
	  both.

Wed Jul 31 13:27:10 2002  Ossama Othman  <ossama@uci.edu>

	* tao/TAO_Singleton_Manager.h (_set_unexpected):
	* tao/TAO_Singleton_Manager.cpp (_set_unexpected):

	  New public method that sets the unexpected exception handler to
	  the supplied value.
	  (init):

	  Do not set the unexpected exception handler.
	  ORB::init_orb_globals() once again does that by invoking the
	  above new method.

	* tao/ORB.cpp (init_orb_globals):

	  Set the unexpected exception handler by invoking the
	  TAO_Singleton_Manger::_set_unexpected() method.

Wed Jul 31 11:28:16 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB.h (init_orb_globals):

	  Changed emulated exception macro from the "_WITH_DEFAULTS"
	  version to the one without it.  This method is used internally
	  by TAO, meaning that a default CORBA::Environment should never
	  be used.

	* tao/ORB.cpp (init_orb_globals):

	  Moved code that sets the unexpected exception handler to
	  TAO_Singleton_Manager.cpp.  See below for the reason why this
	  was done.

	* tao/TAO_Singleton_Manager.h (TAO_Singleton_Manager):
	* tao/TAO_Singleton_Manager.cpp (init):

	  Store a pointer to the old unexpected exception handler so that
	  it can be restored when TAO is unloaded, for example.
	  Otherwise, any unexpected exceptions will result in a call to
	  TAO's unexpected exception handler which may no longer exist if
	  TAO was unloaded.

	  (fini):

	  Restore the old unexpected exception handler since TAO will no
	  longer be handling exceptions.  Allow the application to once
	  again handle unexpected exceptions.

	* orbsvcs/orbsvcs/PortableGroup/PG_Factory_Map.cpp:

	  Corrected explicit template instantiations to match the hash map
	  typedef in PG_Factory_Map.h.  Fixes "unresolved symbol" problems
	  in builds that use explicit template instantiations.  Thanks to
	  Jai for pointing out the problem.

Wed Jul 31 09:45:01 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/PSS/PSDL_String.h:
	* orbsvcs/PSS/PSDL_String.cpp:
	  Added an operator equality and inequality comparison operator
	  methods. Fixes the Lynx_PPC build with explicit template
	  instantiations

Wed Jul 31 11:34:02 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* docs/releasenotes/index.html: Added a place holder for CIAO,
	  TAO's CCM implementation.

Wed Jul 31 08:07:22 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/PSS/PSDL.dsw:
	* orbsvcs/PSS/PSDL.dsp:
	* orbsvcs/PSS/PSDL_Datastore.dsp:
	* orbsvcs/PSS/PSDL_Parser.dsp:
	  Updated. These should load correctly.

Wed Jul 31 07:13:53 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/PSS/server.cpp (main):
	  Fix for the GCC 3.0 build's warning.

	* orbsvcs/examples/PSS/Makefile:
	  Updated dependencies. This should fix the new set of errors.

Tue Jul 30 18:13:42 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* tests/Big_Reply/Makefile:
	* tests/Big_Twoways/Makefile:
	* tests/Big_Request_Muxing/Makefile:
	* tests/Oneways_Invoking_Twoways/Makefile:
	* tests/AMI_Buffering/Makefile:
	* tests/DLL_ORB/Makefile:
	* tests/Two_objects/Makefile:
	* tests/Nested_Upcall_Crash/Makefile:
	  Updated dependencies.

Wed Jul 31 01:05:23 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* docs/releasenotes/index.html: Updated AV Service information.

Tue Jul 30 21:02:57 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Fix Tru64 compilation problem.
	* orbsvcs/tests/AVStreams/Full_Profile/README: Add information about
	  the A/V Streams Full Profile specification, referring to the OMG
 	  document.

Tue Jul 30 16:14:10 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/examples/PSS/Makefile:
	  Updated dependencies.

Tue Jul 30 12:04:15 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/PSS/PSDL_String.cpp:
	  Fixed the Debian GCC 3.0 warnings.

Tue Jul 30 13:37:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* docs/performance.html:
	* docs/Options.html: Documented that RW connection handler cannot
	  be used with AMI.  Thanks to Bertin Colpron
 	  <BColpron@interstarinc.com> for motivating this.

Tue Jul 30 10:24:09 2002  Ossama Othman  <ossama@uci.edu>

	* tests/ORT/ORT_test_IORInterceptor.cpp (destroy):

	  Assert that the establish_components() and
	  components_established() were actually called, and that they
	  were called the same number of times.  This test is run in an
	  automated regression test suite so it is useful to have some
	  means of determining failure automatically instead of by
	  inspection.

Tue Jul 30 08:21:36 2002  Chad Elliott  <elliott_c@ociweb.com>

        * examples/AMH/Sink_Server/Sink_Server.mpc:
        * examples/AMI/FL_Callback/FL_Callback.mpc:
        * examples/Callback_Quoter/Callback_Quoter.mpc:
        * examples/Content_Server/SMI_Iterator/SMI_Iterator.mpc:
        * examples/Event_Comm/Event_Comm.mpc:
        * examples/Load_Balancing/Load_Balancing.mpc:
        * examples/Load_Balancing_persistent/Load_Balancing_persistent.mpc:
        * examples/Logging/Logging.mpc:
        * examples/OBV/Typed_Events/Typed_Events.mpc:
        * examples/Persistent_Grid/Persistent_Grid.mpc:
        * examples/PluggableUDP/tests/Basic/Basic.mpc:
        * examples/PluggableUDP/tests/Performance/Performance.mpc:
        * examples/PluggableUDP/tests/SimplePerformance/SimplePerformance.mpc:
        * examples/Quoter/Quoter.mpc:
        * examples/RTCORBA/Activity/Activity.mpc:
        * examples/Simple/bank/bank.mpc:
        * examples/Simple/chat/chat.mpc:
        * examples/Simple/echo/echo.mpc:
        * examples/Simple/grid/grid.mpc:
        * examples/Simple/time-date/time_date.mpc:
        * examples/Simple/time/time.mpc:
        * examples/TypeCode_Creation/TypeCode_Creation.mpc:

          Added new mpc files for the TAO examples.

Tue Jul 30 11:31:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/*.bor:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/*.bor:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/*.bor:
          Fixed BCB makefiles for static build.

Tue Jul 30 08:56:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/PSS/PSDL_Typecode_Defn.h:
          Added missing include for ace/post.h to fix fuzz error.

Mon Jul 29 17:34:40 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager.cpp (ACE_TMAIN):

	  Corrected emulated exception macro.  "ACE_TRY_CHECK" not
	  "ACE_CHECK."

	* orbsvcs/LoadBalancer/Makefile (BIN2):

	  Corrected binary name.  "LoadManager," not
	  "LoadBalancer_Service."

Mon Jul 29 17:29:37 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/LoadBalancer/LoadManager.cpp:

	  Stand-alone LoadManager service.  This is basically a thin
	  wrapper around the CosLoadBalancing library.

	* orbsvcs/LoadBalancer/LoadMonitor.cpp:

	  Stand-alone LoadMonitor utility.  It provides a simple way for
	  users to set up a LoadMonitor.

	* orbsvcs/LoadBalancer/Makefile:

	  Removed old LoadBalancer sources.

Mon Jul 29 13:44:51 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* docs/releasenotes/PSS.html:
	  Added the present status and future work related information.

Mon Jul 29 11:15:47 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/orbsvcs/Makefile.IFRService:
	  Updated the dependencies.

Mon Jul 29 11:08:58 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* docs/releasenotes/amh.html:
	  Updated to add the recent changes including:

	  - Various fixes to the IDL_Compiler to generate the
	    correct code for AMH-Exceptions

	  - Sending appropriate error-codes to clients in case of
	    an exception in the AMH server.

	  - Implementing AMH Exceptions.

	  - A single button test for AMH Exceptions.

	  - Example use case and implementation of an AMH server.


Mon Jul 29 19:46:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/*.bor:
          Added missing libraries for fixing link errors in static build.

Mon Jul 29 12:43:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:
        * docs/releasenotes/obv.html:

          Updated entries for the IDL compiler and for valuetypes.

Mon Jul 29 16:12:18 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Change ACE_Hash_Map template
	  instantiations to use _var types for FlowEndPoint, FDev, and FlowConnection.

Mon Jul 29 08:46:11 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/ORT/Gateway_i.cpp:
	* orbsvcs/examples/PSS/Server_i.cpp:
	  Fixed warnings from GCC 3.0 compiler.

Mon Jul 29 13:18:13 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Multicast/ftp.cpp: Fix unterminated
	  ACE_DEBUG macro.

Sun Jul 28 15:23:43 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/Trading/Trading.dsw:
	  Added missing dependencies.

Sun Jul 28 21:05:07 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	[Bug 1141]
	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
	* orbsvcs/orbsvcs/AV/AVStreams_i.h:
	* orbsvcs/orbsvcs/AV/AVStreams_i.i:
	* orbsvcs/orbsvcs/AV/AV_Core.cpp:
	* orbsvcs/orbsvcs/AV/Flows_T.cpp:
	* orbsvcs/orbsvcs/AV/Policy.cpp:
	* orbsvcs/orbsvcs/AV/RTP.cpp:
	* orbsvcs/orbsvcs/AV/TCP.cpp:
	* orbsvcs/orbsvcs/AV/Transport.cpp:
	* orbsvcs/orbsvcs/AV/UDP.cpp:
	* orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
	* orbsvcs/tests/AVStreams/Full_Profile/ftp.h:
	* orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
	* orbsvcs/tests/AVStreams/Full_Profile/server.cpp:
	* orbsvcs/tests/AVStreams/Full_Profile/server.h:
	* orbsvcs/tests/AVStreams/Latency/control.cpp:
	* orbsvcs/tests/AVStreams/Latency/ping.cpp:
	* orbsvcs/tests/AVStreams/Latency/pong.cpp:
	* orbsvcs/tests/AVStreams/Latency/run_test.pl:
	* orbsvcs/tests/AVStreams/Latency/svc.conf:
	* orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
	* orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
	* orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp:
	  Code cleanups, memory fixes, in attempt to fix
	  Full_Profile and Latency tests.  Multicast_Full_Profile
	  test isn't quite working, but it is not crashing like it
	  used to.

Sun Jul 28 13:36:48 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/Trading/Trading.dsw:
	  Added dependencies to fix the Win32 errors.

Sun Jul 28 09:43:53 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/IIOP_Transport.cpp:
	* tao/IIOP_Transport.h:
	* tao/Strategies/DIOP_Transport.cpp:
	* tao/Strategies/DIOP_Transport.h:
	* tao/Strategies/SHMIOP_Transport.cpp:
	* tao/Strategies/SHMIOP_Transport.h:
	* tao/Strategies/UIOP_Transport.cpp:
	* tao/Strategies/UIOP_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h: Methods like
	  send_message () and send_request () used varibale names like
	  twoway or is_synchronous. The variable names are not exact
	  representations of what is on. Changed the variable names to a
	  meaningful one.

Sun Jul 28 09:03:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        Merge from the branch bug_1125_stage_0. This merge solves the
        dreaded  problem of ORB building up the stack when a reply is
	written. This should fix [BUG 1125].

	Wed Jul 24 22:30:29 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Synch_Queued_Message.h:
	* tao/Synch_Queued_Message.cpp:
	* tao/Asynch_Queued_Message.h (TAO_Asynch_Queued_Message):
	* tao/Asynch_Queued_Message.cpp: Added comments and spruced up
	  line spacings.

	* tao/Transport.cpp: Added a debug statement for logging
	  purposes.


	Mon Jul 22 17:52:04 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/GIOP_Message_Base.cpp: We now use the global pool for
	  allocating memory  for the return path. Using TSS created
	  problems when we were trying to move the unsent messages from
	  the TSS to global pool. The message block makes things to crash
	  horribly, especially at places that you have no clue about.

	* tao/Transport.cpp: Do not reset the allocators since it is not
	  required.

	Tue Jul 16 07:06:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Synch_Queued_Message.cpp:
	* tao/Asynch_Queued_Message.cpp: Removed code that reset stuff
	  from the destructor.  This caused problems when trying to use
	  the ACE_DES_FREE macro since it called the destructor first and
	  then free ().

	* tao/TAO_Server_Request.cpp: All calls to send_message () will
	  carry an argument mentioning that they are replies.

	* tao/GIOP_Message_Base.cpp: Fixed a problem in dump_msg ()
	  method. The probelm was that we neved respected the byte-order
	  of the sending ORB when printing out request id's. Thanks to Kew
	  Whitney <Whitney.Kew@Invensys.com>

	* tao/Transport.cpp: Cosmetic fixes.

	Sun Jul 14 10:49:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Queued_Message.h:
	* tao/Queued_Message.cpp: Added an argument in the constructor to
	  pass an allocator. Added a pure virtual method, clone () to the
	  interface.

	* tao/Synch_Queued_Message.h:
	* tao/Synch_Queued_Message.cpp:
	* tao/Asynch_Queued_Message.h:
	* tao/Asynch_Queued_Message.cpp: Implemented the method clone ().

	* tao/Incoming_Mesage_Queue.cpp: Fixed a typo in a print
	  statement.

	Fri Jul 12 14:10:14 2002   Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Transport.h:
	* tao/Transport.cpp:
	  - Added a new enum enumerating the different message types
	    recognised within the ORB.

	  - Added two new methods send_reply_message_i () and
	    send_synch_message_helper_i (). The method
	    send_reply_message_i () seperates the path of the reply
	    message from the send_synchronous_message_i () method. The
	    method send_synch_message_helper_i () is a helper method
	    containing common code for the request and reply paths.

	  - The methods, send_message (), send_message_shared () and
	    send_message_shared_i () had a variable named
	    is_synchronous. The variable name has been changed to reflect
	    the right usage.

	* tao/IIOP_Transport.cpp:
	* tao/Strategies/DIOP_Transport.cpp:
	* tao/Strategies/SHMIOP_Transport.cpp:
	* tao/Strategies/UIOP_Transport.cpp: The variable names
	  is_synchronous was changed to reflect the usage.

	* tao/Invocation.cpp:
	* tao/Invocation.h: Instead of calling invoke () with a magic
	  number, used the enumeration defined in Transport.h.


Sun Jul 28 08:13:59 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/tests/Miop/McastHello/Makefile: Updated dependencies.

Sat Jul 27 17:27:34 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h:
	* orbsvcs/examples/ORT/Gateway_ObjRef_Factory.cpp:
	  Fixed the throw_specs.

Sat Jul 27 07:38:32 CDT 2002 Pradeep Gore <pradeep@oomworks.com>

	* docs/releasenotes/index.html:
	  Updated with a note announcing start of work Real-Time Notification.


Sat Jul 27 20:11:58 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Bidirectional_Flows/sender.cpp:
	  Exception macros fix.

Sat Jul 27 19:38:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO-INSTALL.html:
          Added BCB4 and BCB6 to supported platforms.

Fri Jul 26 21:07:03 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Profile.cpp (policies):

	  Verify that the Messaging::TAG_POLICIES tagged component was
	  successfully extracted from the CDR stream before continuing.

	* tao/MProfile.i (~TAO_MProfile):

	  Added missing emulated exception argument to Policy::destroy()
	  call.  Removes unnecessary TSS accesses in emulated exception
	  builds.

	* tao/DynamicInterface/Server_Request.cpp (arguments, set_result):
	* tao/PortableServer/POA.cpp (activate_object_with_id_i):

	  Logically "ORed" BAD_INV_ORDER minor code with TAO_OMG_VMCID.
	  Standard OMG exception minor codes must be logically "ORed" with
	  the OMG VMCID constant.

Fri Jul 26 17:07:01 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp (decode):

	  Verify that the SSLIOP::TAG_SSL_SEC_TRANS tagged component was
	  successfully extracted from the CDR stream before continuing.

Fri Jul 26 18:32:45 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	Merged from branch allocators_lanes. This merge basically moves
	some of the allocators that are global in nature to lanes. This
	help RTCORBA use cases. Details of the changes are explained
	below.

	Thu Jul 25 07:17:02 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/ORB_Core.h:
	* tao/ORB_Core.cpp:
	* tao/Thread_Lane_Resources.h:
	* tao/Thread_Lane_Resources.cpp (finalize): Moved the allocators,
	  used to create the InputCDR allocators like the data_block
	  allocator, message_block allocator, buffer allocator and the
	  allocator used for buffering messages in the transport object
	  from the ORB_Core to the lanes. Since these allocators are
	  global, sharing the allocators across threads in multiple lanes
	  could lead to jitter.

Fri Jul 26 17:41:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactory.pidl:

          Corrected mistakes in comments at the top of the file.

Fri Jul 26 11:32:54 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* tao/corbafwd.h: Added a #undef for the IOR macro on HPUX.
	  Thanks to Torsten Kuepper <torsten.kuepper@nokia.com> for
 	  reporting this.

Fri Jul 26 11:22:55 2002  Charles Frasch <cfrasch@spawar.navy.mil>

        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.h
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.h
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.h
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp

	  Correctly cancel timers in the shutdown methods. The timers
	  are scheduled in the activate methods but an
	  ACE_Reactor::remove_handler() call was being made rather
	  than the correct ACE_Reactor::cancel_timer(). Fixes
          BUGID 1246.

Fri Jul 26 09:26:34 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/PSS/Server_i.cpp (get_status):
	  Fixed unused variable warning.

Fri Jul 26 09:23:53 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/PSS/client.cpp (main):
	* orbsvcs/examples/PSS/Simple_Naming_i.cpp (find):
	* orbsvcs/PSS/PSDL_Code_Gen.cpp:
	  Fixed inline build's compilation errors.

Fri Jul 26 09:02:11 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/ORT/Server_IORInterceptor.cpp:
	* orbsvcs/examples/ORT/sum_server_i.cpp:
	* orbsvcs/examples/ORT/client.cpp:
	* orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp:
	* orbsvcs/examples/ORT/Gateway_ObjRef_Factory.cpp:
	* orbsvcs/examples/ORT/Gateway_i.cpp:
	* orbsvcs/examples/ORT/Object_Factory_i.cpp:
	* orbsvcs/examples/ORT/Gateway_i.cpp:
	  Fixed usage of exception macros.

Fri Jul 26 15:35:46 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Makefile: Add Bidirectional_Flows to DIRS.

Fri Jul 26 07:38:48 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/PSS/Makefile (PSDL_l.cpp):
	  Updated to run the other two makefiles in the directory.

	* orbsvcs/PSS/PSDL_Scope.cpp (check_identifier):
	  Fixed uninitialized warning.

Fri Jul 26 08:08:47 2002  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Callback/Callback.mpc:
        * performance-tests/Cubit/TAO/DII_Cubit/DII_Cubit.mpc:
        * performance-tests/Cubit/TAO/DII_Cubit/cubit.idl:
        * performance-tests/Cubit/TAO/IDL_Cubit/IDL_Cubit.mpc:
        * performance-tests/Cubit/TAO/MT_Cubit/MT_Cubit.mpc:
        * performance-tests/Latency/AMH/Single_Threaded/Single_Threaded.mpc:
        * performance-tests/Latency/AMI/AMI.mpc:
        * performance-tests/Latency/DII/DII.mpc:
        * performance-tests/Latency/DSI/DSI.mpc:
        * performance-tests/Latency/Deferred/Deferred.mpc:
        * performance-tests/Latency/Single_Threaded/Single_Threaded.mpc:
        * performance-tests/Latency/Thread_Per_Connection/Thread_Per_Connection.mpc:
        * performance-tests/Latency/Thread_Pool/Thread_Pool.mpc:
        * performance-tests/POA/Create_Reference/Create_Reference.mpc:
        * performance-tests/POA/Demux/Demux.mpc:
        * performance-tests/POA/Implicit_Activation/Implicit_Activation.mpc:
        * performance-tests/POA/Object_Creation_And_Registration/Object_Creation_And_Registration.mpc:
        * performance-tests/Pluggable/Pluggable.mpc:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Common.mpc:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/ORB_Per_Priority.mpc:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Single_Endpoint.mpc:
        * performance-tests/RTCorba/Oneways/Reliable/Reliable.mpc:
        * performance-tests/RTCorba/Thread_Pool/Thread_Pool.mpc:
        * performance-tests/Throughput/Throughput.mpc:

          Added mpc files for the TAO performance tests.

Fri Jul 26 10:27:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/AMH_Exceptions/server.cpp:
          Fixed BCB warning

Thu Jul 25 15:19:51 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:

          Put back generation of some lines that I had inadvertently
          removed. Thanks to Irfan for pointing it out.

Thu Jul 25 13:13:34 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/PSS/Makefile (%C.cpp):
	  Updated to include the generation of psdl generated stubs.

Thu Jul 25 14:35:36 2002  Irfan Pyarali  <irfan@oomworks.com>

	* performance-tests/RTCorba/Thread_Pool/server.cpp:
	* performance-tests/RTCorba/Thread_Pool/client.cpp:

	  Removed old reference to
	  tests/RTCORBA/Linear_Priority/readers.cpp and replaced it with
	  new file tests/RTCORBA/common_args.cpp.  Thanks to Bala for
	  pointing this out.

Thu Jul 25 11:13:07 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ObjectReferenceTemplateC.cpp (_tao_unmarshal):
	* tao/ObjectReferenceTemplateC.h:
	  Re-added the _tao_unmarshal and _tao_marshal methods which are
	  needed for value type support that are used in ORT.pidl. Someone
	  seems to have removed these.

	* orbsvcs/examples/ORT/Makefile:
	  Updated dependencies.

Thu Jul 25 11:37:21 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/tests/Security/Big_Request/Big_Request.mpc:
        * orbsvcs/tests/Security/Callback/Callback.mpc:
        * orbsvcs/tests/Security/Secure_Invocation/Secure_Invocation.mpc:
        * orbsvcs/tests/Security/SecurityLevel1/SecurityLevel1.mpc:

          Fixed the case on the dependencies line.

Thu Jul 25 09:25:49 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/examples/Makefile:
	  Added ORT and PSS to the list.

	* orbsvcs/Makefile:
	  Added PSS to the list of directories.

Thu Jul 25 08:05:47 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/PSS/PSDL.ll:
	* orbsvcs/PSS/PSDL.yy:
	* orbsvcs/PSS/PSDL_l.cpp:
	* orbsvcs/PSS/PSDL_y.cpp:
	* orbsvcs/PSS/PSDL_y.h:
	* orbsvcs/PSS/PSDL_Interpreter.cpp:
	* orbsvcs/PSS/PSDL_Interpreter.h:

	  The Lex and the Yacc files and the related classes to build an
	  abstract syntax tree for the Persistent State Definition
	  Language. PSDL is a superset of the IDL. This is needed for the
	  Persistent State Service (PSS).

	* orbsvcs/PSS/Makefile:
	* orbsvcs/PSS/Makefile.parser:
	  Makefiles to build the libTAO_PSDL, libTAO_PSDL_Datastore
	  and the actual PSDL parser, psdl_tao, which is similar to
	  tao_idl for the IDL.

	* orbsvcs/PSS/PSDL.dsp:
	* orbsvcs/PSS/PSDL_Datastore.dsp:
	* orbsvcs/PSS/PSDL_Parser.dsp:
	* orbsvcs/PSS/PSDL.dsw:
	  The workspace and the project files for windows.

	* orbsvcs/PSS/Dump_Visitor.cpp:
	* orbsvcs/PSS/Dump_Visitor.h:
	* orbsvcs/PSS/psdl_tao.cpp:
	  The classes for the psdl_tao executable. Dump_Visitor is used to
	  print out the abstract tree, just in case, someone wants to view
	  it. The psdl_tao.cpp reads the input file and invokes the accept
	  method which will start the yacc-lex parsing of the input file.

	* orbsvcs/PSS/Makefile.datastore:
	  Makefile for building libTAO_PSDL_Datastore

	  For making the services persistent, we save the object->IOR
 	  mapping in a persistent way. Could be writing to a database,
	  which can be a simple file or an actual database. Please read
	  the README for more about this and the future plans with regards
	  to this.

	  This library provides support to write and read the persistent
	  data.

	* orbsvcs/PSS/PSDL_Code_Gen.cpp:
	* orbsvcs/PSS/PSDL_Code_Gen.h:
	  This class acts as the interface to the datastore which is used
	  by the PSS. Before actually saving the object-name stringified
	  object reference to the datastore, it encodes the stringified
	  object reference. When trying to get the object reference
	  associated with an object, it gets the encoded reference from
	  the datastore and decodes it before passing it back to the
	  caller.

	* orbsvcs/PSS/PSDL_Datastore.cpp:
	* orbsvcs/PSS/PSDL_Datastore.h:
	  This class provides the access to the datastore.
	  The class intializes the database or the related where the data
	  is saved, binds, unbinds and finds the server-name and its
	  octetseq from the hash map which is saved to the datastore.

	* orbsvcs/PSS/PSDL_OctetSeq.cpp:
	* orbsvcs/PSS/PSDL_OctetSeq.h:
	* orbsvcs/PSS/PSDL_String.cpp:
	* orbsvcs/PSS/PSDL_String.h:
	  These classes provide a wrapper to the CORBA::OctetSeq and
	  ACE_CString respectively to facilitate saving the encoded object
	  reference and the object's name persistently.

	  Thanks to Ossama for helping out with these classes.

	* orbsvcs/PSS/PSDL_Node.cpp:
	* orbsvcs/PSS/PSDL_Node.h:
	  Each node in the abstract syntax tree is represented by an
	  instance of TAO_PSDL_Node. Each instance will have information
	  about the identifier name and its type and has accessibilty to
	  the get the scope of the node. The scope is needed to get the
	  parent of the node and its children.

	* orbsvcs/PSS/PSDL_Exception_Scope.cpp
	* orbsvcs/PSS/PSDL_Exception_Scope.h
	* orbsvcs/PSS/PSDL_Interface_Scope.cpp
	* orbsvcs/PSS/PSDL_Interface_Scope.h
	* orbsvcs/PSS/PSDL_Module_Scope.cpp
	* orbsvcs/PSS/PSDL_Module_Scope.h
	* orbsvcs/PSS/PSDL_Op_Dcl_Scope.cpp
	* orbsvcs/PSS/PSDL_Op_Dcl_Scope.h
	* orbsvcs/PSS/PSDL_Struct_Scope.cpp
	* orbsvcs/PSS/PSDL_Struct_Scope.h
	* orbsvcs/PSS/PSDL_Simple_Scope.cpp
	* orbsvcs/PSS/PSDL_Simple_Scope.h
	* orbsvcs/PSS/PSDL_Root_Scope.cpp
	* orbsvcs/PSS/PSDL_Root_Scope.h
	* orbsvcs/PSS/PSDL_Scope.cpp
	* orbsvcs/PSS/PSDL_Scope.h
	  Each node in the abstract syntax tree has a scope attached to
	  it. The scope concerned with each node contains information
	  about the members of that node, for example if the node is of
	  type 'interface', the scope will have information regarding the
	  functions, declarations, exceptions etc. that are valid for that
	  interface.

	  TAO_PSDL_Scope is the base class. This class provides the way to
	  add new structures, interfaces and all teh different types of
	  nodes defined in the PSDL to the tree.

	  Individual types override the needed methods to add types that
	  are valid in their scope. For example, structures wouldnt have
	  exceptions in their scope. So, PSDL_Struct_Scope neednot worry
	  about providing support for adding an exception declaration.

	  TAO_PSDL_Simple_Scope is the common class for all types that do
	  not will not have other types in them. For example, an interface
	  can have an interface in it which will have its own functions,
	  declarations etc. So, here the parent interface has a child
	  which will have its own scope. On the other hand, if the type of
	  the node is a constant declaration, it will not have sub-nodes
	  with their scopes. Those kind of identifier types are covered in
	  TAO_PSDL_Simple_Scope class.

	  TAO_PSDL_Root_Scope provides the root scope to the tree.

	* orbsvcs/PSS/PSDL_Scope_Visitor.cpp
	* orbsvcs/PSS/PSDL_Scope_Visitor.h
	  This is the base class used to generate the code that goes into
	  the stubs. Uses the visitor pattern. Derived classes override
	  the methods that are useful to them. Derives from
	  TAO_PSDL_Node_Visitor.

	* orbsvcs/PSS/PSDL_Enum_Type_Visitor.cpp
	* orbsvcs/PSS/PSDL_Enum_Type_Visitor.h
	* orbsvcs/PSS/PSDL_Exception_Visitor.cpp
	* orbsvcs/PSS/PSDL_Exception_Visitor.h
	* orbsvcs/PSS/PSDL_Interface_Visitor.cpp
	* orbsvcs/PSS/PSDL_Interface_Visitor.h
	* orbsvcs/PSS/PSDL_Module_Visitor.cpp
	* orbsvcs/PSS/PSDL_Module_Visitor.h
	* orbsvcs/PSS/PSDL_Struct_Visitor.cpp
	* orbsvcs/PSS/PSDL_Struct_Visitor.h
	* orbsvcs/PSS/PSDL_Type_Dcl_Visitor.cpp
	* orbsvcs/PSS/PSDL_Type_Dcl_Visitor.h
 	  Derived classes from PSDL_Node_Visitor which will override the
	  relevant methods from the base class.

	* orbsvcs/PSS/PSDL_Node_Visitor.cpp
	* orbsvcs/PSS/PSDL_Node_Visitor.h
	  Base class for TAO_PSDL_Scope_Visitor. In addition, holds the
	  temporary values while building the AST.

	* orbsvcs/PSS/PSDL_Typecode_Defn.cpp:
	* orbsvcs/PSS/PSDL_Typecode_Defn.h:
	  Helper for generation of the typecodes that go to the stubs.

	* orbsvcs/PSS/PSDL_Visitor_Factory.cpp
	* orbsvcs/PSS/PSDL_Visitor_Factory.h
	  Makes the necessary visitor depending on the type of the node.

	* orbsvcs/PSS/PSDL_Extern.cpp:
	* orbsvcs/PSS/PSDL_Extern.h:
	  Class to make available the yacc/lex related variables like
	  yyin, yyparse and yyval outside the PSDL library to psdl_tao
	  executable.

	* orbsvcs/PSS/PSDL_Stream.cpp
	* orbsvcs/PSS/PSDL_Stream.h
	  Class to help write the generated code to the files. Used to
	  open the files, keep track of the indentation, newlines and the
	  operator << and operator >> for the different types.

	* orbsvcs/PSS/psdl_export.h
	  The export file.

	* orbsvcs/examples/PSS/README:
	  Example to show the usage of Persistent State Service. We have a
	  simple naming service which is made persistent with the use of
	  PSS.

	* orbsvcs/examples/PSS/Client.dsp:
	* orbsvcs/examples/PSS/Server.dsp:
	* orbsvcs/examples/PSS/Simple_Naming.dsp:
	* orbsvcs/examples/PSS/PSS.dsw:
	* orbsvcs/examples/PSS/Makefile:
	  Project files, workspace and the makefile to build
	  the example.

	* orbsvcs/examples/PSS/server.cpp:
	* orbsvcs/examples/PSS/Server_i.cpp:
	* orbsvcs/examples/PSS/Server_i.h:
	* orbsvcs/examples/PSS/Server.idl:
	  Server related classes and idl file. The server is registered
	  with the simple naming service and is shown that it can be
	  contacted with the help of the persistent Simple_Naming service.

	* orbsvcs/examples/PSS/Simple_Naming.cpp:
	* orbsvcs/examples/PSS/Simple_Naming_i.cpp:
	* orbsvcs/examples/PSS/Simple_Naming_i.h:
	* orbsvcs/examples/PSS/Simple_Naming.idl:
	  The Simple_Naming classes and idl file. This is similar to the
	  naming service but supports only the bind and find
	  functionality. This is made persistent with the help of PSS.

	* orbsvcs/examples/PSS/naming_data.psdl:
	  The psdl file which is exposed to the PSS. Contains the data
	  structure that is sent to the PSS.

	* orbsvcs/examples/PSS/client.cpp:
	  Simple client which tries to use the Simple_Naming to get
	  access to the server and invoke a method on the server.

Thu Jul 25 09:53:27 2002  Paul Calabrese  <calabrese_p@ociweb.com>

        * tests/Nested_Upcall_Crash/Nested_Upcall_Crash.mpc:

          Add missing files to projects.

Thu Jul 25 08:09:24 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Nested_Upcall_Crash/scavenger.cpp: Fixed a unreachable
	  statement warning on TRU 64.

Thu Jul 25 08:01:12 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Stack_Recursion/Server_Task.cpp: Fixed a compile error in
	  g++ builds.

	* tests/Stack_Recursion/Sender.cpp: Fixed a unused variable warning.

Wed Jul 24 13:49:02 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  Corrected exception in "raises" clause of the
	  Strategy::push_loads() method.  "StrategyNotAdaptive" instead of
	  "LocationNotFound."

Wed Jul 24 11:51:29 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* tao/PortableServer/Collocated_Object.cpp:
	  Fixed a typo from retn() to _retn() to fix the RedHat static
	  builds.

Wed Jul 24 07:42:47 2002  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/util/utl_scope.cpp:

          Allocate the UTL_ScopeActiveIterator object on the heap instead of
          the stack.  This worked for most compilers (but it shouldn't
          have) except for KCC on Solaris.  Thanks to Tim Bradley
          (bradley_t@ociweb.com) for finding this and providing a fix.

Tue Jul 23 16:10:08 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (create_object):

	  Cast an unsigned short value to an unsigned long to silence an
	  apparently bogus Borland C++ warning.  Thanks to Jai for
	  pointing out the warning.

Tue Jul 23 22:23:35 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/TCP.h:
	* orbsvcs/orbsvcs/AV/TCP.cpp: Change name of TAO_AV_TCP_Base_Acceptor::open()
	  method to acceptor_open(), to prevent hiding of ACE_Acceptor::open()
	  virtual method.  Thanks to Steve Huston <shuston@riverace.com> and
	  Ossama Othman <ossama@doc.ece.uci.edu>.

Tue Jul 23 15:19:00 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/client.cpp (main):
	  Changed 'int time' to 'Test::Timestamp time'.  This should now
	  fix BCB.  Thanks to Ossama Othman <ossama@doc.ece.uci.edu> for
	  the suggestion.

Tue Jul 23 17:15:31 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/PortableServer/Collocated_Object.cpp
	(_non_existent,_get_component): Removed redundant useages of
	  ACE_TRY blocks.  They were causing some warnings from Tru64
	  compiler.

Tue Jul 23 16:20:39 2002  Steve Huston  <shuston@riverace.com>

        * orbsvcs/orbsvcs/Event/EC_Dispatching_Task.cpp (is_full_i):
          Cast this->cur_count_ to size_t to compare to high_water_mark_.
          Corresponds to a ACE_Message_Queue change I made to ACE yesterday.

        * examples/Simulator/Event_Supplier/DualEC_Sup.{h cpp}
          (DualEC_Supplier::run_orb, run_nav_thread, run_weap_thread):
          Change return type from void * to ACE_THR_FUNC_RETURN to match
          corresponding change in ACE.

Tue Jul 23 12:47:45 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/client.cpp (main):
	  Changed an 'long long unsigned int time' to 'int time'.  The BCB
	  compiler was complaining about this data-type (no 64-bit
	  support?).  Hopefully, the compilers will cast the int to the
	  appropriate type when 'time' is used.

Tue Jul 23 12:28:08 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvsc/LoadBalancing/LB_LeastLoaded.h:
	* orbsvcs/orbsvsc/LoadBalancing/LB_LeastLoaded.cpp:

	  Added emulated exception support.

	* orbsvcs/orbsvsc/LoadBalancing/LB_LoadAlert.cpp:

	  Correct emulated exception macro usage error,
	  i.e. "ACE_ENV_SINGLE_ARG_DECL" instead of "ACE_ENV_ARG_DECL".

	* orbsvcs/orbsvsc/LoadBalancing/LB_LoadManager.cpp
	  (check_strategy_proper, init_least_loaded):

	  Corrected typo where loop variable was not initialized.

	* orbsvcs/orbsvsc/LoadBalancing/LB_ORBInitializer.cpp:

	  Correct emulated exception macro usage error,
	  i.e. "ACE_CHECK" instead of "ACE_TRY_CHECK".

	* orbsvcs/orbsvsc/LoadBalancing/LB_Random.h:

	  Moved `CosLoadBalancingC.h' include ahead of
	  ACE_LACKS_PRAGMA_ONCE preprocessor check to make sure that macro
	  is defined.

	* orbsvcs/orbsvsc/LoadBalancing/LB_RoundRobin.cpp:
	* orbsvcs/orbsvsc/LoadBalancing/LB_ServerRequestInterceptor.cpp:

	  Corrected "unused argument" warnings.

	* orbsvcs/orbsvsc/Makefile:

	  Removed support for the old load balancer.  Added support for
	  the new one.

	* orbsvcs/orbsvsc/Makefile.CosLoadBalancing:

	  Makefile for the new load balancer.

	* orbsvcs/orbsvsc/Makefile.CosNaming:
	* orbsvcs/orbsvsc/Makefile.PortableGroup:

	  Updated dependencies.

Tue Jul 23 11:23:28 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_CPU_Monitor.h:

	  CPU load monitor implementation.  Currently a placeholder.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert_Handler.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert_Handler.h:

	  AMI reply handler used when the LoadManager issues load alerts
	  asynchronously.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ORBInitializer.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_ORBInitializer.h:

	  ORBInitializer that creates and registers a LoadManager instance
	  with the ORB.

	* orbsvcs/orbsvcs/LoadBalancing/LB_ServerRequestInterceptor.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_ServerRequestInterceptor.h:

	  Utility interceptor that servers may use to add load shedding
	  capabilities.

	* orbsvcs/orbsvcs/LoadBalancing/LB_conf.h:

	  No need to include "orbsvcs/CosLoadBalancingC.h".

Mon Jul 22 21:42:20 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:

          The recent change to the regular expression for string literals
          in the TAO IDL compiler lexer has caused the SunCC preprocessor
          to leave an extra char at the end. The action code for string
          literals was changed to chop off one extra char only if __SUNPRO_CC
          is defined. Thanks to Marvin Wolfthal <maw@weichi.com> and
          Jaiganesh Balasubramanian <jai@doc.ece.uci.edu> for reporting
          the problem with string constants when some version of SunCC
          is used.

Mon Jul 22 17:46:19 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_Default_Property_Validator.h
	  (validate_criteria):

	  Added missing "ACE_ENV_ARG_DECL" emulated exception macro.

Mon Jul 22 19:12:20 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:

          Fixed a previous change (probably made by me) that
          caused incorrect code generation for the CDR
          insertion/extraction of a CORBA::Object
          when it appears as a struct/union/exception member.
          Thanks to Johnny Willemsen <jwillemsen@remedy.nl> for
          pointing out the resulting build errors.

Mon Jul 22 18:25:52 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:

          Moved a block of generated code back to its original
          position, since the original move reintroduced
          [BUGID:58]. Thanks to Carlos O'Ryan <coryan@atdesk.com>
          for pointing this out.

Mon Jul 22 17:26:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Stack_Recursion/Client_Task.cpp:
	* tests/Stack_Recursion/Sender.cpp:
	* tests/Stack_Recursion/Sender.h:
	* tests/Stack_Recursion/Test.idl:
	* tests/Stack_Recursion/client.cpp:
	* tests/Stack_Recursion/run_test.pl: Made some cosmetic fixes to
	  get the test to exhibit the crash properly.

Mon Jul 22 17:20:41 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_array.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:

          Fixes for certain kinds of declarations within structs,
          exceptions and unions - enum in exception and anonymous array of
          enum/struct/union inside exception/struct/union. These fixes
          close out [BUGID:569] and [BUGID:1079].

        * tests/IDL_Test/enum_in_struct.idl:
        * tests/IDL_Test/union.idl:

          Added examples to the test to cover the above fixes.

Mon Jul 22 20:16:04 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/Makefile.PortableGroup: Add
	  PG_Default_Property_Validator.cpp to list of files being built.
	* orbsvcs/tests/Miop/McastHello/Makefile: Add -lTAO_PortableGroup to
	  link line.  Fix for TRU64 Unix build.

Mon Jul 22 14:22:49 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  Refined the CosLoadBalancing IDL.  Neglected to commit these
	  changes in an earlier commit.

	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:

	  Added new CosLoadBalancing source files to the source list(s).

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp
	  (built_in_strategy):

	  Removed extraneous "ACE_INLINE" declaration.

Mon Jul 22 13:49:28 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/Utils/RIR_Narrow.h:
	  Removed syntax error.

	* tao/Utils/RIR_Narrow.cpp:
	  Removed bogus semi-colon.

	* examples/Makefile:
	  Add AMH directory, without this the nightly regression tests fail.

	* tests/AMH_Exceptions/client.cpp:
	  This test expects an exception from the server, in fact, the
	  whole point of the test is to verify that exceptions do work
	  with AMH.  Thus, the client should not print an error when the
	  exception is raised, rather, it should print an error when the
	  exception is *NOT* raised.

Mon Jul 22 12:15:24 2002  Krishnakumar B  <kitty@cs.wustl.edu>

        * taoconfig.mk (INCLDIRS):

          Use INCLDIRS instead of CPPFLAGS. Thanks to Sean Ogle
          <sean.ogle@syslog.at> for suggesting this.

Mon Jul 22 06:22:45 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* docs/Options.html: Fixed a typo in the documentation of
	  -ORBConnectStrategy. Thanks to Colin Weaver
	  <colin.weaver@invensys.com> for pointing this out.

Sat Jul 20 09:19:15 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* TAO_IDL/ast/ast_constant.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Property_Utils.h:
	* tests/AMH_Exceptions/server.cpp (main): Fixed warnings in TRU 64
	  builds.

Sat Jul 20 09:08:17 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/RTCORBA/Profile_And_Endpoint_Selection/client.cpp: Fixed a
	  unused variable warning.

Fri Jul 19 23:44:29 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/RTCORBA/common_args.cpp:
	* tests/RTCORBA/Profile_And_Endpoint_Selection/client.cpp: Fixed
	  compile errors in build where exceptions are turned off.

Thu Jul 18 08:46:16 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/AV.mpc:
        * orbsvcs/orbsvcs/CosConcurrency.mpc:
        * orbsvcs/orbsvcs/CosEvent.mpc:
        * orbsvcs/orbsvcs/CosLifeCycle.mpc:
        * orbsvcs/orbsvcs/CosNaming.mpc:
        * orbsvcs/orbsvcs/CosNotification.mpc:
        * orbsvcs/orbsvcs/CosProperty.mpc:
        * orbsvcs/orbsvcs/CosTime.mpc:
        * orbsvcs/orbsvcs/CosTrading.mpc:
        * orbsvcs/orbsvcs/DsLogAdmin.mpc:
        * orbsvcs/orbsvcs/ETCL.mpc:
        * orbsvcs/orbsvcs/FTORB.mpc:
        * orbsvcs/orbsvcs/FaultTolerance.mpc:
        * orbsvcs/orbsvcs/IFRService.mpc:
        * orbsvcs/orbsvcs/Loadbalancing.mpc:
        * orbsvcs/orbsvcs/PortableGroup.mpc:
        * orbsvcs/orbsvcs/RTCORBAEvent.mpc:
        * orbsvcs/orbsvcs/RTEvent.mpc:
        * orbsvcs/orbsvcs/RTOLDEvent.mpc:
        * orbsvcs/orbsvcs/RTSched.mpc:
        * orbsvcs/orbsvcs/RTSchedEvent.mpc:
        * orbsvcs/orbsvcs/SSLIOP.mpc:
        * orbsvcs/orbsvcs/Security.mpc:

          Added options to generate conditional target GNU Makefiles.

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/AVStreams_Asynch_Three_Stage.mpc:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/AVStreams_Bidirectional_Flows.mpc:
        * orbsvcs/tests/AVStreams/Component_Switching/AVStreams_Component_Switching.mpc:
        * orbsvcs/tests/AVStreams/Full_Profile/AVStreams_Full_Profile.mpc:
        * orbsvcs/tests/AVStreams/Latency/AVStreams_Latency.mpc:
        * orbsvcs/tests/AVStreams/Modify_QoS/AVStreams_Modify_QoS.mpc:
        * orbsvcs/tests/AVStreams/Multicast/AVStreams_Multicast.mpc:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/AVStreams_Multicast_Full_Profile.mpc:
        * orbsvcs/tests/AVStreams/Multiple_Flows/AVStreams_Multiple_Flows.mpc:
        * orbsvcs/tests/AVStreams/Pluggable/AVStreams_Pluggable.mpc:
        * orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/AVStream_Pluggable_Flow_Protocol.mpc:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/AVStreams_Simple_Three_Stage.mpc:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/AVStreams_Simple_Two_Stage.mpc:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/AVStreams_Simple_Two_Stage_With_QoS.mpc:
        * orbsvcs/tests/Concurrency/Concurrency.mpc:
        * orbsvcs/tests/CosEvent/Basic/CosEvent_Basic.mpc:
        * orbsvcs/tests/CosEvent/lib/CosEvent_lib.mpc:
        * orbsvcs/tests/EC_Throughput/EC_Throughput.mpc:
        * orbsvcs/tests/Event/Basic/Event_Basic.mpc:
        * orbsvcs/tests/Event/Performance/Event_Performance.mpc:
        * orbsvcs/tests/Event/lib/Event_lib.mpc:
        * orbsvcs/tests/FaultTolerance/IOGR/FaultTolerance_IOGR.mpc:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/FaultTolerance_IOGRManipulation.mpc:
        * orbsvcs/tests/ImplRepo/ImplRepo.mpc:
        * orbsvcs/tests/ImplRepo/NameService/ImplRepo_NameService.mpc:
        * orbsvcs/tests/LoadBalancing/LoadBalancing.mpc:
        * orbsvcs/tests/Miop/McastHello/McastHello.mpc:
        * orbsvcs/tests/Notify/Basic/Basic.mpc:
        * orbsvcs/tests/Property/Property.mpc:
        * orbsvcs/tests/Sched/Sched.mpc:
        * orbsvcs/tests/Sched_Conf/Sched_Conf.mpc:
        * orbsvcs/tests/Security/Big_Request/Big_Request.mpc:
        * orbsvcs/tests/Security/Callback/Callback.mpc:
        * orbsvcs/tests/Security/Secure_Invocation/Secure_Invocation.mpc:
        * orbsvcs/tests/Security/SecurityLevel1/SecurityLevel1.mpc:
        * orbsvcs/tests/Simple_Naming/Simple_Naming.mpc:
        * orbsvcs/tests/Time/Time.mpc:
        * orbsvcs/tests/Trading/Trading.mpc:
        * orbsvcs/tests/tests_svc_loader/tests_svc_loader.mpc:
        * tests/AMI/AMI.mpc:
        * tests/BiDirectional/BiDirectional.mpc:
        * tests/BiDirectional_NestedUpcall/BiDirectional_NestedUpcall.mpc:
        * tests/Big_Request_Muxing/Big_Request_Muxing.mpc:
        * tests/Blocking_Sync_None/Blocking_Sync_None.mpc:
        * tests/Crashed_Callback/Crashed_Callback.mpc:
        * tests/DSI_Gateway/DSI_Gateway.mpc:
        * tests/Faults/Faults.mpc:
        * tests/File_IO/File_IO.mpc:
        * tests/MProfile_Forwarding/MProfile_Forwarding.mpc:
        * tests/MT_BiDir/MT_BiDir.mpc:
        * tests/MT_Timeout/MT_Timeout.mpc:
        * tests/Native_Exceptions/Native_Exceptions.mpc:
        * tests/Nested_Upcall_Crash/Nested_Upcall_Crash.mpc:
        * tests/ORT/ORT.mpc:
        * tests/Oneway_Buffering/Oneway_Buffering.mpc:
        * tests/POA/Etherealization/Etherealization.mpc:
        * tests/POA/Excessive_Object_Deactivations/Excessive_Object_Deactivations.mpc:
        * tests/POA/Identity/Identity.mpc:
        * tests/POA/Non_Servant_Upcalls/Non_Servant_Upcalls.mpc:
        * tests/POA/Object_Reactivation/Object_Reactivation.mpc:
        * tests/POA/POA_Destruction/POA_Destruction.mpc:
        * tests/POA/Single_Threaded_POA/Single_Threaded_POA.mpc:
        * tests/POA/wait_for_completion/wait_for_completion.mpc:
        * tests/Param_Test/Param_Test.mpc:
        * tests/Policies/Policies.mpc:
        * tests/Portable_Interceptors/Benchmark/Portable_Interceptors_Benchmark.mpc:
        * tests/Portable_Interceptors/Dynamic/Portable_Interceptors_Dynamic.mpc:
        * tests/Portable_Interceptors/ForwardRequest/Portable_Interceptors_ForwardRequest.mpc:
        * tests/Portable_Interceptors/IORInterceptor/Portable_Interceptors_IORInterceptor.mpc:
        * tests/Portable_Interceptors/PICurrent/Portable_Interceptors_PICurrent.mpc:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Portable_Interceptors_Request_Interceptor_Flow.mpc:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Portable_Interceptors_Service_Context_Manipulation.mpc:
        * tests/RTCORBA/Persistent_IOR/RTCORBA_Persistent_IOR.mpc:
        * tests/Reliable_Oneways/Reliable_Oneways.mpc:
        * tests/Timed_Buffered_Oneways/Timed_Buffered_Oneways.mpc:
        * tests/Timeout/Timeout.mpc:

          Added options to generate target conditional GNU Makefiles based
          on GNU Make macro settings.

Wed Jul 17 23:54:44 2002  Ossama Othman  <ossama@uci.edu>

	Thanks to Carlos for "encouraging" me to document the following
	changes.  :)

	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.inl:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp:

	  Implementation of the CosLoadBalancing "LeastLoaded" built-in
	  load balancing strategy.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.inl:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlert.cpp:

	  Default CosLoadBalancing::LoadAlert implementation.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertInfo.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertInfo.cpp:

	  Structure that contains information specific to given LoadAlert
	  object.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadAlertMap.cpp:

	  Table that maps ObjectGroupId (lower 32 bits) to LoadAlertInfo
	  structure.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadListMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadListMap.cpp:

	  Table that maps location to a LoadList.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:

	  Implementation of the CosLoadBalancing::LoadManager interface.

	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadMap.cpp:

	  Table that maps location to a single Load.

	* orbsvcs/orbsvcs/LoadBalancing/LB_MemberLocator.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_MemberLocator.cpp:

	  PortableServer::ServantLocator responsible for forwarding client
	  requests to the appropriate object group member.

	* orbsvcs/orbsvcs/LoadBalancing/LB_MonitorMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_MonitorMap.cpp:

	  Table that maps location to LoadMonitor.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Pull_Handler.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Pull_Handler.cpp:

	  Event handler that is fired periodically to retrieve
	  (i.e. "pull") loads from LoadMonitors registered with the
	  LoadManager.

	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.cpp:

	  Implementation of the CosLoadBalancing "Random" built-in
	  load balancing strategy.

	* orbsvcs/orbsvcs/LoadBalancing/LB_RoundRobin.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_RoundRobin.cpp:

  	  Implementation of the CosLoadBalancing "RoundRobin" built-in
	  load balancing strategy.

	* orbsvcs/orbsvcs/LoadBalancing/LB_conf.h:

	  TAO load balancer specific configuration constants.

Wed Jul 17 01:00:26 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_MemberInfo.h (operator==):
	* orbsvcs/orbsvcs/PortableGroup/PG_MemberInfo.cpp (operator==):

	  Removed extraneous "struct" from parameter list.

	* orbsvcs/orbsvcs/PortableGroup/PG_Operators.h (operator==):
	  (operator!=):

	  Export these global functions.  Addresses link-time errors in MS
	  Windows builds.

Wed Jul 17 00:49:06 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Any.cpp (operator>>=):

	  Corrected TypeCode that is set in the CORBA::Any when extracting
	  a CORBA::WString, i.e. use CORBA::_tc_wstring instead of
	  CORBA::_tc_string.  Addresses CORBA::WString extraction
	  problems.

Mon Jul 15 10:16:07 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* utils/catior/catior.cpp:
	  Print out unknown profiles, so at least we get some output out
	  of them.

Sat Jul 13 23:46:56 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Stack_Recursion/Client_Task.cpp:
	* tests/Stack_Recursion/Client_Task.h: Fixed compile errors in
	  builds where exceptions are turned off.

Sat Jul 13 15:26:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Utils/RIR_Narrow.cpp (narrow):
	* tao/Utils/RIR_Narrow.h: Fixed some more fuzz errors.

Sat Jul 13 15:19:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/RTCORBA/common_args.cpp (get_protocols): Fixed a compile
	  error in builds where exceptions are turned off.

Sat Jul 13 15:14:43 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Nested_Upcall_Crash/client.dsp:
	* tests/Nested_Upcall_Crash/server.dsp:
	* tests/Nested_Upcall_Crash/scavenger.dsp: Fixed the dsp files to
	  include the right files. This should prevent link errors in the
	  Win32 builds.

Sat Jul 13 14:57:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/RTCORBA/Profile_And_Endpoint_Selection/client.dsp:
	* tests/RTCORBA/Profile_And_Endpoint_Selection/server.dsp: Fixed
	  the path to strategies library. Shuld fix link errors with Win32
	  builds.

Sat Jul 13 14:26:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/POA/Persistent_ID/server.cpp (method):
	* tao/Utils/RIR_Narrow.cpp: Fixed fuzz errors.

Sat Jul 13 13:22:19 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Stack_Recursion/Makefile:
	* tests/Stack_Recursion/Makefile.bor:
	* tests/Stack_Recursion/server.bor:
	* tests/Stack_Recursion/client.bor: Makefiles for different
	  platforms.

	* tests/Stack_Recursion/run_test.pl: The core files should be
	  cleaned up when program exits, else the test could fill up the
	  file system and prevent other tests from running.

	* tests/Makefile:
	* tests/Makefile.bor: Added the new test to the daily builds.

Sat Jul 13 09:26:53 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Stack_Recursion/client.cpp:
	* tests/Stack_Recursion/Client_Task.h:
	* tests/Stack_Recursion/Client_Task.cpp (svc):
	* tests/Stack_Recursion/Sender.cpp:
	* tests/Stack_Recursion/Sender.h:
	* tests/Stack_Recursion/server.cpp:
	* tests/Stack_Recursion/Server_Task.h:
	* tests/Stack_Recursion/Server_Task.cpp:
	* tests/Stack_Recursion/Test.idl:
	* tests/Stack_Recursion/run_test.pl: A stress test for [BUG
	  1125], the infamous stack recursion problem.

Fri Jul 12 13:52:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/Makefile.bor:
          Added AMH directory

        * examples/AMH/Makefile.bor:
          New BCB makefile to build subdirectory

        * examples/AMH/Sink_Server/*.bor:
          Added BCB makefiles for this example

Fri Jul 12 13:39:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added AMH_Exceptions directory

        * tests/AMH_Exceptions/*.bor:
          Created BCB makefiles for this test

Thu Jul 11 21:10:37 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* Makefile.bor: Added a new BUILD target called "nightlybuild" to
	  simplify nightlybuild script.

Thu Jul 11 11:55:00 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/orbsvcs/Makefile.IFRService:
	  Updated the dependencies.

Thu Jul 11 13:29:57 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
	* orbsvcs/IFR_Service/ifr_adding_visitor.h:

	  Changed signature of visit_valuetype() and visit_valuetype_fwd()
	  to take AST_ValueType and AST_ValueTypeFwd instead of the
	  corresponding AST_Interface* base classes.

Thu Jul 11 10:47:41 2002  Steve Huston  <shuston@riverace.com>

        * performance-tests/Cubit/TAO/MT_Cubit/Task_Client.cpp (svc):
          In calls the ACE_Thread_Manager::exit() and ACE_OS::thr_exit(),
          correct argument to be ACE_THR_FUNC_RETURN, not a pointer.
          Thanks to Johnny Willemsen for pointing this out.

Thu Jul 11 09:23:12 2002   Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/RTCORBA/Profile_And_Endpoint_Selection/client.bor:
        * tests/RTCORBA/Profile_And_Endpoint_Selection/server.bor:
          Added missing TAO_Strategies library to fix BCB compile errors.

Wed Jul 10 17:54:14 2002   Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Utils/Servant_Var.cpp:
	* tao/Utils/RIR_Narrow.h:
	* tao/Utils/PolicyList_Destroyer.h: Fixed fuzz errors.

Wed Jul 10 15:38:48 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/AMH/Sink_Server/AMH_Servant.h:
	* examples/AMH/Sink_Server/AMH_Servant.cpp:
	* examples/AMH/Sink_Server/Base_Server.cpp:
	* examples/AMH/Sink_Server/client.cpp:

	* examples/AMH/Sink_Server/client.cpp:
	* examples/AMH/Sink_Server/server.cpp:

	  Changed deprecated TAO_ENV_ exception macros to ACE_ENV_
	  exception macros.

Wed Jul 10 14:25:14 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/ccm_core/Component_Base.idl:
	* tao/ccm_core/CosPersistentState.idl: Moved these files under the
	  new CIAO subdir.

Wed Jul 10 11:35:05 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/server.cpp (ST_AMH_Server):

	  Removed the changes of:
	  Mon Jul 8 11:05:44 2002 Mayur Deshpande <mayur@ics.uci.edu>
	  and instead did a simple ACE_const_cast instead.

	* examples/AMH/Sink_Server/AMH_Servant.cpp:
	* examples/AMH/Sink_Server/Base_Server.cpp:
	* examples/AMH/Sink_Server/Base_Server.h:
	* examples/AMH/Sink_Server/client.cpp:
	* examples/AMH/Sink_Server/mt_server.cpp:
	* examples/AMH/Sink_Server/st_server.cpp:

	  Used ACE_const_cast to convert string literals to 'char
	  *'s. Should fix the warnings for GCC-3.0.4 builds.

Wed Jul 10 10:19:25 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/server.cpp (test_method):

	  Allocate the exception on the heap.  The ExceptionHolder now
	  requires that all exceptions it is constructed with, be allocated
	  on the heap since the ExceptionHolder takes over ownership of
	  the exception and deletes it later.

Wed Jul 10 12:19:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include/utl_identifier.h:
        * TAO_IDL/include/utl_string.h:
        * TAO_IDL/include/utl_strlist.h:

          More files to which the conditional include of ace/streams.h
          is needed for BCB. Thanks again to Johnny Willemsen
          <jwillemsen@remedy.nl> for his help in maintaining the
          BCB builds.

Wed Jul 10 10:11:30 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp (visit_operation):

          We need to throw an exceptions that was assigned in a different
	  place (by the app-developer).  ACE_THROW does not fit the bill
	  since the ACE_THROW macro contructs the exception passed to it.
	  Also exception->raise_() is ruled out since in platforms without
	  native exception support, the raise() function does not do
	  anything.  What is left as an alternative is an #ifdef that
	  explicitly takes care of both the cases (platforms with and
	  without native exception support). The original
	  exception->raise_() code is now replaced by the generation of
	  the #ifdef.

Wed Jul 10 10:48:51 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Updated IDL compiler section.

Wed Jul 10 08:36:49 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/utl_idlist.h:
        * TAO_IDL/include/utl_indenter.h:

          Removed the conditional include of ace/streams.h for BCB
          from ast_decl.h and added it to the two other files. Thanks
          to Johnny Willemsen <jwillemsen@remedy.nl> and Chris Kohlhoff
          <chris@kohlhoff.com> for tracking this down.

Tue Jul  9 16:31:58 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/tests/Security/Big_Request/Makefile:
	  Updated the dependencies to fix the compiler issues.

Tue Jul  9 14:05:25 2002  Chad Elliott  <elliott_c@ociweb.com>
        * orbsvcs/orbsvcs/Loadbalancing.mpc:
        * tao/tao.mpc:

          Update these mpc files to reflect the current source.

Tue Jul  9 11:28:31 2002  Steve Huston  <shuston@riverace.com>

        * examples/PluggableUDP/tests/Performance/server.cpp: Changed
          svc() return type from void * to ACE_THR_FUNC_RETURN.

Tue Jul  9 09:41:10 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include/ast_decl.h:

          Added conditional include of ace/streams.h for BCB, needed
          by class AST_Decl and all its descendants. Thanks to
          Johnny Willemsen <jwillemsen@remedy.nl> for pointing this
          out.

Tue Jul  9 08:42:12 2002  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/tao_idl.mpc:

          Update the mpc file to reflect the current state of the idl
          compiler source.

Tue Jul  9 07:16:10 2002  Chad Elliott  <elliott_c@ociweb.com>

        * */*.mpc:

          Commit the first version of the Make Project Creator input files.

Tue Jul  9 07:14:38 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.h:
        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.cpp:
        * orbsvcs/orbsvcs/AV/QoS_UDP.h:
        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp:

          Only compile the contents of these files if there is a valid
          session factory defines.

        * orbsvcs/orbsvcs/Security/MechanismPolicy.h:

          Change the return value of the mechanisms() method to match
          the implementation.

        * orbsvcs/tests/Sched/DynSched_Test.cpp:

          Change the #include of Strategy_Scheduler.h to one relative to
          orbsvcs (like most other #includes).


        * tao/PortableServer/Key_Adapters.h:

          #include ace/Map_T.h instead of ace/Map.h.  All ace/Map.h does is
          #include ace/Map_T.h.

Tue Jul  9 13:09:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

	* tao/AbstractBase.cpp:
	* tao/ObjectReferenceTemplateC.cpp:
	  Fixed BCB compile errors. Added missing .in().

Tue Jul  9 08:56:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

	* TAO_IDL/ast/ast_argument.cpp:
	* TAO_IDL/ast/ast_factory.cpp:
	  Changed the type of the argument of the dump method from
	  ostream to ACE_OSTREAM_TYPE so that it matches the header file.

Mon Jul  8 17:44:47 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/Makefile:
	  Did a 'make depend'.  This should fix the no_inline build.

Mon Jul  8 18:21:42 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ValueFactory_Map.cp:

          Fixed explicit template instantiations.

Sun Jun 30 22:22:05 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao/RTCORBA/RT_Invocation_Endpoint_Selectors:
	* tao/RTCORBA/RT_Endpoint_Selector_Factory:

	  The RT endpoint and profile selection in TAO was broken.  There
	  were serveral classes intended for this task such as
	  TAO_Priority_Endpoint_Selector, TAO_Bands_Endpoint_Selector,
	  TAO_Protocol_Endpoint_Selector, TAO_Priority_Protocol_Selector,
	  TAO_Bands_Protocol_Selector, and
	  TAO_RT_Default_Endpoint_Selector.  However, these class really
	  did not simultaneously cover the spectrum of policy choices for
	  RT invocations. Therefore, replaced the above classes with the
	  new class TAO_RT_Invocation_Endpoint_Selector.

	  - RT_Endpoint_Selector_Factory::get_selector became super simple
	  since always the same TAO_RT_Invocation_Endpoint_Selector class
	  is being returned.

	  - RT_Endpoint_Selector_Factory::init_client_protocol removed
	  since it was empty and was not being called.

	  - The new profile and endpoint selection criteria works as
	  follows:

	  We first check for client protocol policies. If there aren't
	  any, we delegate to the TAO_Default_Endpoint_Selector.  If
	  client protocol policies are set, we cycle through all profiles
	  to find a protocol match in the policy.  Even though cycling
	  through all the protocols is the correct things to do to find a
	  match, starting from the start of the profile list is not.  In
	  addition, this code is also ignoring the forwarded reference (if
	  it exists).  This behavior is caused by problems with the
	  profile management in TAO which are documented in bugzilla bugs
	  1237, 1238, and 1239.  Once the above problems are fixed, this
	  behavior should be fixed to do the right thing.

	  We then check if all endpoints are valid or we need to match the
	  priority of the client thread or we need to match the priority
	  of the band or if the profile contains just one endpoint.  All
	  endpoints are valid if the priority model policy is server
	  declared or if no priority model policy (and no bands policy) is
	  specified. One endpoint occurs when (a) we are talking to a
	  nonTAO server (which doesn't have the concept of multiple
	  endpoints per profile) or (b) we have TAO server with a non-lane
	  threadpool, in which case there is only one acceptor. In both
	  cases we should use the endpoint regardless of its priority.

	  Finally, we check for the private connection policy.

	  A new test tests/RTCORBA/Profile_And_Endpoint_Selection
	  described below is added to make sure that all the RT invocation
	  policy combinations are being correctly honored.

	* tao/IIOP_Endpoint:
	* tao/Strategies/DIOP_Endpoint:
	* tao/Strategies/SHMIOP_Endpoint:

	  Fixed a very subtle race condition caused by changes from:

	  Wed Jun 12 13:24:11 2002  Carlos O'Ryan  <coryan@atdesk.com>

	  The changes assumed that the <object_addr_> was set if its type
	  has been set to <AF_INET>.  However, on closer inspection,
	  INET_Addr::set() is not atomic and the family type is set before
	  the rest of the fields are set.  Therefore, a very subtle and
	  difficult to replicate race condition existed where one thread
	  would think that the address has been set when it was still in
	  the process of being set by another thread. This bug would
	  manifest itself in one of the client threads failing to connect
	  to server.

	  The solution was to separate out the indication of the address
	  being set into a new <object_addr_set_> flag.  The code that
	  depended on the address type being set was replaced to check for
	  this flag.

	* tao: Added a new ORB option -ORBSingleReadOptimization.  This
	  option controls single read optimzations when reading requests.
	  If this option is off, the ORB will do two reads to read a
	  request.  One to read the request header and the other to read
	  the request payload.  If this option is on, the ORB will do a
	  read of size <TAO_MAXBUFSIZE>, hoping to read the entire
	  request.  However, in this case, there is a chance of reading
	  more than one request.  If any additional requests have been
	  read, they are queued up for processing later.

          This option defaults to 1 because it can provide better
	  performance since one less read is performed.  However, in the
	  case of RT-CORBA, this option should be set to 0.  Consider the
	  following scenario: two requests are read from one socket; the
	  additional request is queued; a Reactor notify is dispatch to
	  awake a follower threads; at this time, new requests arrive on
	  others sockets of higher priority; however, since notifies are
	  given preferences over normal I/O, the lower priority queued
	  message will be processed before the newly arrived higher
	  priority request.

	  The following files were changed:

	  - tao/Transport.cpp (handle_input_i): Check if the single read
	  optimization option is on. If so continue with existing behavior
	  of read upto the size of <TAO_MAXBUFSIZE>.  If not, read only
	  upto the header length specified by the messaging object.

	  - tao/Pluggable_Messaging.h:
	  - tao/GIOP_Message_Base.h:
	  - tao/GIOP_Message_Base.cpp:
	  - tao/GIOP_Message_Lite.h:
	  - tao/GIOP_Message_Lite.cpp:

	    Added new header_length() method to get the header length used
	    by the messaging layer.

	  - tao/ORB_Core.cpp: Added parsing of new option.

	  - tao/params.*: Added new option.

	  - docs/Options.html: Added documentation on new option.

	* tao/Invocation_Endpoint_Selectors (next): Removed this method
	  since it had been deprecated and was no longer being used.
	  Also, made endpoint_from_profile() virtual so that the RT
	  selector class can override it.

	* tao/Default_Endpoint_Selector_Factory.cpp: Format fix.

        * tao/Protocols_Hooks.h:
        * tao/Default_Protocols_Hooks.cpp:
        * tao/Default_Protocols_Hooks.h:
        * tao/RTCORBA/RT_Protocols_Hooks.cpp:
        * tao/RTCORBA/RT_Protocols_Hooks.h:

	  get_selector_bands_policy_hook() was unnecessarily passing the
	  <priority> by reference.  Changed it to pass by value since it
	  is an "in" parameter.

	* tests/RTCORBA/Profile_And_Endpoint_Selection: This new test
	  exercises the profile and endpoint selection of the ORB.

	  Server: The server creates a servant in a regular POA and
	  another in an RT-POA. The RT-POA can be configured in serveral
	  ways as detailed below.

	  Client: The client does the following:

	  - vanilla invocations
	  - sets private connection
	  - vanilla invocations
	  - reset

	  - sets client protocols
	  - vanilla invocations
	  - sets private connection
	  - vanilla invocations
	  - reset

	  - set bands
	  - priority invocations
	  - sets private connection
	  - priority invocations
	  - reset

	  - set bands
	  - sets client protocols
	  - priority invocations
	  - sets private connection
	  - priority invocations
	  - reset

	  Client: The client starts off by making vanilla invocations on
	  the server. It then sets client protocols policies and repeats
	  the invocations.  After this, the client protocols policies are
	  reset.  Then the priority bands are set and priority based
	  invocations are made. Then the client protocols policies are
	  reset and the priority based invocations are repeated.  Finally,
	  the client protocols policies are reset.

	  This test can be configured in several ways (72 to be precise)
	  as documented in the README file.

	  The following files were added:

	  - Makefile
	  - Makefile.bor
	  - Profile_And_Endpoint_Selection.dsw
	  - README
	  - bands
	  - client.bor
	  - client.cpp
	  - client.dsp
	  - empty_file
	  - iiop
	  - iiop_shmiop
	  - invocation_priorities
	  - lanes
	  - run_test.pl
	  - server.bor
	  - server.cpp
	  - server.dsp
	  - shmiop
	  - shmiop_iiop
	  - svc.conf
	  - test.idl

	  The following files were updated:

	  - tests/RTCORBA/Makefile
	  - tests/RTCORBA/Makefile.bor
	  - tests/RTCORBA/RTCORBA_tests.dsw
	  - $ACE_ROOT/bin/auto_run_tests.lst

	* tests/RTCORBA/common_args.cpp: New files replaces
	  tests/RTCORBA/Linear_Priority/readers.cpp since it had reusable
	  code that is now also used by the Profile_And_Endpoint_Selection
	  test.

	* tests/RTCORBA/Linear_Priority/client.cpp:
	* tests/RTCORBA/Linear_Priority/server.cpp:

	  Updated to use the new tests/RTCORBA/common_args.cpp parsing
	  code.

Mon Jul  8 16:27:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/TAO_IDL_FE_DLL.dsp:
        * TAO_IDL/TAO_IDL_FE_LIB.dsp:

          A header file in FileView was from the wrong directory.
          Just removed it and added it again.

        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp

          Fixed indentation in code generation.

Mon Jul  8 16:29:16 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/Utils/Makefile:
	  Add new library with helper classes and templates that make
	  type-safe, exception-safe CORBA programming significantly
	  easier.

	* tao/Utils/Auto_Functor.h:
	* tao/Utils/Auto_Functor.inl:
	* tao/Utils/Auto_Functor.cpp:
	  Policy-based auto_ptr<>-like helper class.

	* tao/Utils/Implicit_Deactivator.h:
	* tao/Utils/Implicit_Deactivator.cpp:
	  Automatically deactivate an implicitly activated (i.e. via
	  _this()) servant.

	* tao/Utils/ORB_Destroyer.h:
	* tao/Utils/ORB_Destroyer.cpp:
	  Automatically call orb->destroy()

	* tao/Utils/PolicyList_Destroyer.h:
	* tao/Utils/PolicyList_Destroyer.inl:
	* tao/Utils/PolicyList_Destroyer.cpp:
	  Automatically destroy all the policies in a policy list.

	* tao/Utils/RIR_Narrow.h:
	* tao/Utils/RIR_Narrow.cpp:
	  Call resolve_initial_references() and then narrow.

	* tao/Utils/Servant_Var.h:
	* tao/Utils/Servant_Var.inl:
	* tao/Utils/Servant_Var.cpp:
	  Automatically manage the reference count on a Servant, like
	  ServantBase_var, but type-safe.

Mon Jul  8 15:16:34 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/DynAny_Test/Makefile:

          Updated dependencies.

Mon Jul  8 14:38:42 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation/cpp:

          Fixed error in stub code generation for non-anonymous
          arrays with a fixed size element type.

Mon Jul 08 14:25:44 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao/RTCORBA/RT_Endpoint_Selector_Factory.cpp (get_selector):
	* tao/RTCORBA/RT_Invocation_Endpoint_Selectors.cpp (endpoint_from_profile):
	* tests/RTCORBA/Linear_Priority/Makefile:
	* tests/RTCORBA/Profile_And_Endpoint_Selection/Makefile:

	  Minor fixes.

Mon Jul 08 12:51:34 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/POA/Persistent_ID/Makefile: This test works with minimum
	  CORBA.  Therefore, removed the unnecessary minimum_corba check
	  from the Makefile.  Thanks to Jaiganesh Balasubramanian
	  <jai@doc.ece.uci.edu> for pointing this out.

Mon Jul  8 11:05:44 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/Makefile:
	* tests/AMH_Exceptions/Test.idl:
	* tests/AMH_Exceptions/run_test.pl:
	  Updated the IDL file to include a dummy valuetype just to make
	  sure the IDL-compiler generation of valuetypes and
	  AMHEceptionHolders does not result in any clashes of code when
	  both are present simultaneously.  Updated Makefile to take the
	  -Gv option. Cosmetic changes to run_test.pl
	* tests/AMH_Exceptions/server.cpp:
	  Was assigning const char* to a char* in the constructor of
	  ST_AMH_Server.  "-Wwrite-strings" flagged this as a warning of
	  deprecated use.  On feedback from Craig Rodrigues
	  <crodrigu@bbn.com> who also reported this warning, fixed this by
	  copying the const char * with ACE_OS::strdup ().  The alternate
	  approach by Balachandran Natarajan <bala@cs.wustl.edu> of making
	  an explicit cast and declaring ior_output_file_ as static char *
	  seemed a little inelegant.

Mon Jul  8 10:59:41 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp (visit_operation):
	  Fixed generation of ACE exception macro for AMHExceptionHolder
	  raise operation. The raise operation are *always* parameter-less
	  so generate ACE_ENV_SINGLE_ARG_DECL_NOT_USED for these.

Sun Jul  7 22:03:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Makefile:
	* tao/Makefile.bor: Added the new files to the Makefiles.

Sun Jul 07 21:56:23 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Transport.h:
	* tao/Transport.cpp:
	* tao/Transport.inl: Did a few cosmetic changes.

	  - Removed the TAO_Synch_Refcountable class and moved that to a
	    new file.

	  - Rearranged the methods in cpp and inl files, so that the
	    methods specific for the input path and output path are
	    grouped together. Just did this to improve readability.

	  - Added a new method by name transport_cache_manager () which
	    returns the reference to transport cache manager from the ORB.

	* tao/Synch_Refcountable.{h,cpp,inl}: Added this new file which
	  contains the class TAO_Synch_Refcountable.

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp: Added the new files to the project
	  workspace.

	* tao/Incoming_Mesage_Queue.h: Fixed an erroneous comment.

Sun Jul  7 18:53:54 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/fe_tmplinst.cpp:

          Added ACE_Unbounded_Queue<AST_Operation *> and related
          entries. Thanks again to Marvin Wolfthal <maw@weichi.com>
          for the bug report.

Sun Jul  7 12:45:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.IFRService:
        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.EXE:
        * TAO_IDL/Makefile.FE:

          Updated dependencies.

Fri Jul  5 08:12:30 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp (init):
	  Added an "else" clause to handle the case where a user gives
 	  incorrect options.  Thanks to Bruce McIntosh
 	  <Bruce.McIntosh@Australia.Boeing.com> for reporting this.

Sun Jul  7 10:24:06 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/tests/Miop/McastHello/Makefile: Updated dependencies.

Sun Jul  7 09:38:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/AMH_Exceptions/server.cpp (write_ior_to_file): Fixed a
	  warning in GCC 3.0.4 builds.

Fri Jul  5 13:50:28 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/server.cpp (start_orb_and_poa):
	  Fixed Exception macros for no-exception builds.

Fri Jul  5 12:07:07 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
	  Apparently this change:

	  Wed Jul  3 12:28:23 2002  Jeff Parsons <parsons@cs.wustl.edu>

	  missed something, I made the checks match what is done for
	  unbounded object sequences and things compile now, IMHO there is
	  too much code duplication here!  Somebody should re-factor that
	  code into a subroutine or something.

Thu Jul  4 16:50:53 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ValueFactory.h:

	  Fixed TAO_OBV_REGISTER_FACTORY macro to use the (spec-defined)
	  typedef of CORBA_ValueFactoryBase* in corbafwd.h.

Thu Jul  4 15:25:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:

          Added generation of newline where it will separate the
          environment parameter from any previous parameters. They
          were running together and causing build errors.

Thu Jul  4 15:00:06 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_visitor.cpp:

	  Added missing 'int' return type to visit_component() and
	  visit_home().

Thu Jul  4 12:58:57 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/Makefile:
	  Added missing TAO_ROOT variable definition.  Thanks to Craig Rodrigues
	  <crodrigu@bbn.com> for reporting this.

Thu Jul  4 11:50:51 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/include/ast_array.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_field.h:
        * TAO_IDL/include/ast_sequence.h:
        * TAO_IDL/include/ast_structure.h:

          Added methods to determine if an aggregate type contains
          a wstring at some nested level. This will be useful for
          generating (de)marshaling code, since the encoding of
          wstrings depends on the GIOP version. What's been added
          above will not affect generated code at all, that part
          is still TODO.

        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/be/be_enum.cpp:

          Moved size type initialization to the front end node.

        * TAO_IDL/be/be_tmplinst.cpp:

          Added #include file. Thanks to Marvin Wolfthal <maw@weichi.com>
          for pointing it out.

        * TAO_IDL/include/ast_native.h:

          Cosmetic changes.

        * TAO_IDL/include/ast_visitor.h:

          Corrected some comments.

Thu Jul 04 08:17:11 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Transport.h:
	* tao/Transport.cpp (close_connection_shared):
	* tao/Transport.inl: Fixed some comments and did some cosmetic
	  fixes. Added a new method by name transport_cache_manager ()
	  that returns the Transport_Cache_Manager from the ORB
	  core.

Wed Jul  3 19:17:52 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/fe_tmplinst.cpp:

          Fixed typos in template instantiation list. Thanks to
          Marvin Wolfthal <maw@weichi.com> for pointing them
          out.

Wed Jul  3 18:16:38 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ObjectReferenceTemplateC.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/PortableServer/Default_ORTC.cpp:
        * tao/PortableServer/Default_ORTC.h:

	  Added more missing generated valuetype code. Thanks to Marvin
	  Wolfthal <maw@weichi.com> for pointing it out.

Wed Jul  3 16:37:49 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_valuetype.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_home.cpp:

          Removed extra semicolons.

        * TAO_IDL/util/utl_scope.cpp:

          Removed code in lookup_by_name() that is no longer
          used.

Wed Jul  3 15:09:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/fe/fe_declarator.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Moved size type computation for strings to the front
          end node class, and fixed a bug in error-checking
          regarding the use of forward declared structs and
          unions.

Wed Jul  3 12:08:57 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/Makefile (DIRS):
	  Added AMH_Exceptions test to main Makefile.

Wed Jul  3 12:01:35 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tests/AMH_Exceptions/Test.idl:
	* tests/AMH_Exceptions/Makefile:
	* tests/AMH_Exceptions/run_test.pl:
	* tests/AMH_Exceptions/server.cpp:
	* tests/AMH_Exceptions/client.cpp:
	  One button test to test AMH exceptions (IDL-compiler generation
	  of ExceptionHolders as well as run-time throwing of AMH
	  Exceptions).

Wed Jul  3 11:23:10 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_cs.h:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
	  Fixed generation of AMH ExceptionHolders after Jeff's large
	  commit. Somehow, something got missed :-)

Wed Jul  3 14:04:57 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
	  Fixed generation of valuetype arguments, somehow the
	  ACE_ENV_[SINGLE_]ARG_DECL code was lost.

Wed Jul  3 12:28:23 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:

          Fixed broken check for pseudo object element type.

Wed Jul  3 11:48:57 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/orbconf.h: Added a check around TAO_HAS_VALUETYPE. Further,
	  the #define is defined as 1 to be very clear.

	* tao/AbstractBase.h:
	* tao/AbstractBase.cpp:
	* tao/ORB.h:
	* tao/ORB.cpp:
	* tao/ValueBase.cpp:
	* tao/ValueBase.h:
	* tao/ValueFactory.cpp:
	* tao/ValueFactory.h:
	* tao/ValueFactory_Map.h:
	* tao/ValueFactory_Map.cpp:
	* tao/corbafwd.h:
	* tao/DynamicAny/DynCommon.cpp:
	* tao/DynamicAny/DynCommon.h: Make a check for TAO_HAS_VALUETYPE
	  == 1, instead of plain #if defined (..).

Wed Jul  3 11:31:25 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/Portable_Interceptors/ForwardRequest/Makefile:
        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:

          Updated dependencies.

Wed Jul  3 11:00:23 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ValueFactory.h:

	  Changed occurrences of CORBA_ValueFactory_ptr to
	  CORBA_ValueFactory *, since the former is not
	  provided for in the spec.

	* tao/ValueFactory_Map.cpp:

	  Cosmetic changes.

Wed Jul  3 10:47:58 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_TypeCodes.cpp:
	* tao/corbafwd.cpp:

	  Moved valuetype-related definitions from IFR_TypeCodes.cpp to
	  corbafwd.cpp, so they will be included in minimum CORBA builds.

Wed Jul  3 09:53:30 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Smart_Proxies/On_Demand:Makefile: Updated dependencies.

Wed Jul  3 09:30:12 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ObectReferenceTemplateC.cpp:
        * tao/ObectReferenceTemplateC.h:

	  Added static tao_add_ref() and tao_remove_ref() methods
	  to ObjectReferenceFactory_var.

Wed Jul  3 09:17:50 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_root/cdr_op.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
        * TAO_IDL/be_include/be_valuetype_fwd.h:

          Cosmetic and code generation format changes.

        * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:

          Added generation of CORBA::add_ref and CORBA::remove_ref
          declarations for undefined forward declared valuetypes.

Wed Jul  3 07:41:06 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Notify_Handler.h: Fixed a warming about an extra ; with the
	  same compiler

Wed Jul  3 07:27:49 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/ValueFactory_Map.cpp: Fixed a compile error with SunCC 5.3.

Tue Jul  2 19:27:49 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Security.idl:

	  Escaped all occurrences of identifier 'EventType'.

Tue Jul  2 19:03:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:

          Fixed indentation.

Tue Jul  2 18:01:56 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ValueBase.h:

	  Fixed typo in comment.

	* tao/ValueBase.i:
	* tao/ValueBase.cpp:

	  Uninlined the CDR stream operators.

	* tao/AbstractBase.cpp:

	  Added #include of debug.h, needed by the Debian Minimum Static
	  build.

Tue Jul 02 16:51:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp: Added the new file Notify_Handler.* to the
	  project files.

Tue Jul  2 16:16:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp: Added an
	  implementation for the new virtual call connection_handler_i ().

Tue Jul  2 16:12:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Makefile.bor (OBJFILES): Added the new file, Notify_Handler
	  to the list of object files.

Tue Jul  2 15:46:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	This checkin is to prevent a problem that occurs unders certain
        circumstances as described in [Bug 1230]
        http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1230

	The methodology used to solve the problem is pretty much similar
        to that described in the bug report.

	* tao/Connection_Handler.h: Added a pure virtual call handle_input
	  ().

	* tao/Transport.h:
	* tao/Transport.cpp: Added a new pure virtual method
	  connection_handler_i (). Trying to use an reinterpret_cast of
	  the event_handler didnt seem to work right. Hence this method.

	  Further, added a method called notify_reactor () which creates a
	  an instance of the TAO_Notify_Handler and use that to send a
	  notify () call to the Reactor.

	* tao/Notify_Handler.h:
	* tao/Notify_Handler.cpp: A new handler that takes care of
	  handling notify () calls to the reactor.

	* tao/IIOP_Transport.h:
	* tao/IIOP_Transport.cpp:
	* tao/Strategies/DIOP_Transport.cpp:
	* tao/Strategies/DIOP_Transport.h:
	* tao/Strategies/SHMIOP_Transport.cpp:
	* tao/Strategies/SHMIOP_Transport.h:
	* tao/Strategies/UIOP_Transport.cpp:
	* tao/Strategies/UIOP_Transport.h: Added an implementation of
	  connection_handler_i ().

	* tao/ORB_Core.cpp: Delete transport_buffer and cdr_msgblock
	  allocators during shutdown. This should prevent some leaks in
	  the ORB during shutdown.

	* tao/Makefile: Added the new file Notify_Handler.

Tue Jul  2 14:57:27 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/append.cpp:

          Fixed a bug in TAO_Marshal_Union::append where an
          implicit default case was causing an inappropriate
          throw of CORBA::MARSHAL. Thanks to Adee Ran
          <adeeran@yahoo.com> for reporting the failure and
          sending in an example.

        * tao/skip.cpp:

          Fixed a comment.

        * tao/Any.cpp:

          Added missing check for the return status of
          TAO_Marshal_Object::perform_append() in the
          CDR insertion operator for CORBA::Any.

Tue Jul  2 13:24:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Put back code to generated a default constructor for
          local interfaces - it was removed by mistake.

Tue Jul  2 12:39:21 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Big_Oneways/Session.cpp (start): Fixed a problem in the
	  start ()  method that was leading to deadlocks and failures in
	  out nightly builds. The change made was to let go of the lock
	  before we call validate connections.

Tue Jul  2 11:37:49 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile* : Updated dependencies.

Mon Jul  1 23:29:15 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * */Makefile*:

          Updated dependencies.

Mon Jul  1 22:53:15 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Fixed a bug in the logic in selecting what to generate
          for interfaces based on the 'local' and 'abstract'
          qualifiers.

Mon Jul  1 21:58:25 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_context.cpp:

          Fixed some cut and paste errors.

        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be_include/be_valuetype.h:

          Made the signature of redefine() consistent with the
          base class versions in AST_Interface and AST_Valuetype.

        * TAO_IDL/be_include/be_visitor_operation/ami_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/ami_handler_reply_stub_operation_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/operation.h:

          Changed gen_pre_stub_info() to be non-virtual to avoid a
          warning on DEC Unix.

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Had to change the recursive-handedness of a production rule
          for parsing the parameters of a valuetype factory operation.
          The previous version was causing a crash when parsing a
          factory operation with more than one parameter.

Mon Jul  1 19:09:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/PortableInterceptor.pidl:

          Added escape to occurrences of 'component' identifier.

        * tests/Multiple/Multiple.idl:

          Added escape to identifier 'Multiple':

          Thes are both IDL3 keywords.

Mon Jul  1 18:22:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.idl:
        * orbsvcs/orbsvcs/FT_CORBA.idl:

          Added leading underscore to all occurrences of the
          identifier 'TypeId', since it is an IDL3 keyword.

Mon Jul  1 15:57:06 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:

          Added missing member initialization in the constructor.

Mon Jul  1 14:56:27 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Backed out the changes in the previous checkin in
          favor of a fix nearer the source, in
          AST_PredefinedType::compute_size_type().

Mon Jul  1 14:03:45 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Changed code generation to be aware that if the return type
          of an operation is CORBA::Object, the stub and skeleton
          operations' internal return value variables are _vars.

Mon Jul  1 12:34:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Added some missing switch cases.

Mon Jul  1 12:24:05 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:

          Changed some comments so yacc doesn't generated nested
          /* */ pairs.

Mon Jul  1 11:36:15 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/AbstractBase.h:

          Moved the include of corbafwd.h to precede the #pragma once
          directive.

Mon Jul  1 11:02:13 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/AbstractBase.inl:
        * tao/ABstractBase.cpp:

          Moved constructors and destructor from inline to source file.
          More includes are needed for inlining enabled, which
          would increase the footprint, and the constructors
          all contain an ACE_NEW, so we aren't gaining much
          by inlining them anyway. Thanks to Bala for pointing
          this out.

Mon Jul  1 11:52:45 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* TAO_IDL/Makefile.BE:
	* TAO_IDL/Makefile.EXE:
	* TAO_IDL/Makefile.FE:
	  Update dependencies

	* TAO_IDL/include/utl_err.h:
	  Fixed #include, damn NT and the case-insensitive file system.

	* TAO_IDL/include/utl_string.h:
	* TAO_IDL/tao_idl.cpp:
	* TAO_IDL/ast/ast_expression.cpp:
	* TAO_IDL/be/be_valuetype.cpp:
	* TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
	* TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
	* TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
	* TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
	* TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
	* TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
	* TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_init_ci.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_si.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:
	* TAO_IDL/driver/drv_args.cpp:
	* TAO_IDL/fe/fe_init.cpp:
	* TAO_IDL/fe/fe_lookup.cpp:
	  Fixed warnings and a couple of minor errors.

Mon Jul  1 09:31:20 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/tao_ifr.bor:

          Removed drv_init_ifr.cpp and drv_private_ifr.cpp.

        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:

          Added AbstractBase files.

        * tests/IDL_Test/generic_object.idl:

          Cosmetic changes.

Mon Jul  1 09:13:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/CosNotification.idl:
        * orbsvcs/orbsvcs/CosNotifyComm.idl:
        * orbsvcs/orbsvcs/RtecEventComm.idl:

	  Added leading underscore to occurrences of identifier
	  'EventType' since this is now a keyword in the IDL
	  compiler.

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:

	  Cosmetic changes.

Mon Jul  1 09:06:15 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/be_extern.h:
        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/drv_args_ifr.cpp:
        * orbsvcs/IFR_Service/drv_extern_ifr.h:
        * orbsvcs/IFR_Service/drv_init_ifr.cpp:
        * orbsvcs/IFR_Service/drv_preproc_ifr.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/tao_ifr.cpp:
        * orbsvcs/IFR_Service/tao_ifr.dsp:

          Changes to keep tao_ifr compatible with the recent
          changes to the IDL compiler. These changes are
          only to avoid build errors - full support of
          valuetypes and components in the IFR has not yet
          been implemented.

Mon Jul  1 09:02:32 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/AbstractBase.cpp:
        * tao/AbstractBase.h:
        * tao/AbstractBase.inl:

	  New files for abstract interface support.

        * tao/Any.cpp:
        * tao/Any.h:
        * tao/Any.i:

	  Added the structs to_value and to_absstract_base,
	  plus the extraction operators for them.

        * tao/ClientRequestInfo_i.cpp:
        * tao/ClientRequestInfo_i.h:

	  Added a constructor that takes an AbstractBase,
	  corresponding to the one that takes Object.

        * tao/Sequence_T.cpp:
        * tao/Sequence_T.h:
        * tao/Sequence_T.i:

	  Changes to support forward declared valuetypes
	  not defined in the same IDL file.

        * tao/TAO.dsp
        * tao/TAO_Static.dsp

	  Added new files to projects.

        * tao/ValueBase.cpp:
        * tao/ValueBase.h:
        * tao/ValueBase.i:
        * tao/ValueFactory.cpp:
        * tao/ValueFactory.h:
        * tao/ValueFactory.i:
        * tao/ValueFactory_Map.cpp:
        * tao/ValueFactory_Map.h:

	  Added clases ValueBase_var, ValueBase_out, and
	  ValueFactory_var.

        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/corba.h:
        * tao/corbafwd.h:

	  Added new typedefs, plus the spec-required typedef
	  of ValueFactoryBase * to ValueFactory.
        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:
        * tao/Object.h:

	  Cosmetic changes.

        * tao/Messaging/MessagingC.cpp:
        * tao/PortableServer/Default_ORTC.cpp:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/ObjectReferenceTemplateC.h:

	  Changed valuetype factory-related code to use the
	  typedef mentioned above.

Mon Jul  1 08:31:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        Sun Jun 30 17:15:52 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
                * TAO_IDL/be_include/be_visitor_valuetype/arglist.h:

                  Integrated Mayur's changes of 6/18 into my branch to
                  minimize conflicts when I merge, since we have both
                  modified the source file extensively.

        Sun Jun 30 16:42:25 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:

                  Changed the accessors and modifiers for Any members to
                  pass and return by reference instead of by value, as
                  specified in the CORBA C++ mapping, sections 1.12 and
                  1.17.1. Thanks to Nanbor <nanbor@cs.wustl.edu> for
                  questioning the valuetype case.

        Fri Jun 28 17:06:46 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be/be_viistor_typecode/typecode_defn.cpp:

                  Fixed typo in generated comment.

        Fri Jun 28 11:46:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/fe/idl.ll:
                * TAO_IDL/fe/lex.yy.cpp:

                  Changed the regular expressions parsing all # directives
                  to allow the line to begin with whitespace, as per
                  CORBA 2.x section 3.2. Thanks to Heather Drury
                  <drury_h@ociweb.com> and Steve Totten <totten_s@ociweb.com>
                  for pointing this out.

        Fri Jun 28 09:03:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_component.cpp:
                * TAO_IDL/ast/ast_decl.cpp:
                * TAO_IDL/ast/ast_exception.cpp:
                * TAO_IDL/ast/ast_expression.cpp:
                * TAO_IDL/ast/ast_interface.cpp:
                * TAO_IDL/ast/ast_module.cpp:
                * TAO_IDL/ast/ast_sequence.cpp:
                * TAO_IDL/ast/ast_structure.cpp:
                * TAO_IDL/ast/ast_union.cpp:
                * TAO_IDL/be/be_decl.cpp:
                * TAO_IDL/be/be_global.cpp:
                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_sequence.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_visitor_operation.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
                * TAO_IDL/be/be_visitor_root/cdr_op.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union/union_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:
                * TAO_IDL/be_include/be_decl.h:
                * TAO_IDL/be_include/be_global.h:
                * TAO_IDL/be_include/be_interface.h:
                * TAO_IDL/driver/drv_preproc.cpp:
                * TAO_IDL/fe/fe_tmplinst.cpp:
                * TAO_IDL/fe/idl.ll:
                * TAO_IDL/fe/idl.yy:
                * TAO_IDL/fe/lex.yy.cpp:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/include/ast_component.h:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_expression.h:
                * TAO_IDL/include/ast_interface.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_global.cpp:
                * TAO_IDL/util/utl_scope.cpp:
                * TAO_IDL/util/utl_idlist.cpp:
                * TAO_IDL/include/utl_idlist.h:
                * TAO_IDL/driver/drv_preproc.cpp:

	          Finished support for forward declared valuetypes not defined
	          in the same IDL file.

	          Changed the behavior when dealing with assignment of literals
	          to constants. CORBA 2.6 and earlier state that each subexpression
	          in a literal must be within the range of the assigned type.
	          However, the OMG has realized that this may pose a problem if
	          a compiler must check every possible grouping of subexpressions,
	          so open issue #1189 addresses this problem. Thanks to Jon Biggar
	          <jon@floorboard.com>, I have it good authority that the issue
	          will soon be resolved in favor or relaxing the rule, to state
	          that only the value of the entire expression must be within the
	          range of the assigned type. So the IDL compiler has bee modified
	          to comply with the relaxed rule.

	          Added checks to valuetypes and components to check for
	          redefinition clashes of operations or attributes between class
	          members and parent members, class members and supported
	          interface members, parent members and supported interface
	          members, two parent members and two supported interface members.

	          Fixed several bugs:

	          - Defining an enum inside a union [BUGID:568]

	          - Assigning an enum value of one type to an enum constant of
	            another type.

	          - Handling a set of strings as a string literal, for example
	            const string hello = "hel" "lo";

	          - Finding a redefinition clash between operations or attributes
                    of two parents of an interface.

	          - Adding to the referenced list of a scope the top-level
	            component of a scoped type name that is introduced into
	            that scope.

	          - Expanding the 'potential' scope of a type declaration until
	            a module or global containing scope is reached
	            (CORBA 2.6 3.5.13).

                * TAO_IDL/be/be_visitor_root/root_is.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
                * TAO_IDL/be/be_visitor_module/module_ih.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
                * TAO_IDL/be_include/be_visitor_interface/interface_ih.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_is.h:
                * TAO_IDL/be_include/be_visitor_module/module_ih.h:
                * TAO_IDL/be_include/be_visitor_operation/operation_ih.h:
                * TAO_IDL/be_include/be_visitor_operation/operation_is.h:
                * TAO_IDL/be_include/be_visitor_root/root_ih.h:

	          Cosmetic changes.

        Thu Jun 20 18:48:28 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_decl.cpp (set_name):

                  Added a check for setting a name to itself (not a copy),
                  because the old name is first destroyed.

                * TAO_IDL/be/be_visitor_array.cpp:
                * TAO_IDL/be/be_visitor_exception.cpp:
                * TAO_IDL/be/be_visitor_union_branch.cpp:
                * TAO_IDL/be/be_visitor_array/array.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/ctor_assign.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp:
                * TAO_IDL/be/be_visitor_union/union.cpp:
                * TAO_IDL/be/be_visitor_union/union_ch.cpp:
                * TAO_IDL/be/be_visitor_union/union_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_reset_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_ci.cpp:
                * TAO_IDL/be_include/be_visitor_union_branch.h:
                * TAO_IDL/be_include/be_visitor_array/array.h:
                * TAO_IDL/be_include/be_visitor_array/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_exception/ctor.h:
                * TAO_IDL/be_include/be_visitor_exception/ctor_assign.h:
                * TAO_IDL/be_include/be_visitor_field/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_union_branch/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_union_branch/private_ch.h:
                * TAO_IDL/be_include/be_visitor_union_branch/public_assign_cs.h:
                * TAO_IDL/be_include/be_visitor_union_branch/public_ci.h:
                * TAO_IDL/be_include/be_visitor_union_branch/public_cs.h:
                * TAO_IDL/be_include/be_visitor_union_branch/public_reset_cs.h:

                  All the missing pieces for valuetypes as members of structs,
                  unions, exceptions, arrays and sequences.

                * TAO_IDL/be/be_visitor_union_branch/public_access_cs.cpp:
                * TAO_IDL/be_include/be_visitor_union_branch/public_access_cs.h:

                  Removed these files - visitor is never created.

                * TAO_IDL/be_include/be_codegen.h:

                  Removed an unused context state.

        Wed Jun 19 11:47:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/operation.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_sh.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_si.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ch.cpp:
                * TAO_IDL/be_include/be_visitor_interface/interface.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_cs.h:
                * TAO_IDL/be_include/be_visitor_operation/operation.h:
                * TAO_IDL/be_include/be_visitor_operation/remote_proxy_impl_cs.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype_sh.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype_ss.h:

                  Re-did the implementation of abstract interfaces. Now either
                  an interface or a valuetype can be passed as an abstract
                  interface argument. The abstract interface can make calls
                  on the concrete interface's methods, and can narrow to
                  the concrete interface and make calls on methods not declared
                  in the abstract interface. We can also recover the state of
                  a valuetype. The AbstractBase methods _to_object and _to_value
                  are working, and none of this is leaking memory according to
                  Purify.

        Wed Jun  5 09:04:05 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be/be_visitor_valuetype/valuetype_sh.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_si.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype_sh.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype_si.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype_ss.h:

                  New files - new visitors to generate the skeleton class
                  for a valuetype that supports a concrete interface.

        Tue Jun  4 11:08:40 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_array.cpp:
                * TAO_IDL/ast/ast_predefined_type.cpp:
                * TAO_IDL/ast/ast_structure.cpp:
                * TAO_IDL/ast/ast_typedef.cpp:
                * TAO_IDL/ast/ast_union.cpp:
                * TAO_IDL/ast/ast_valuetype.cpp:
                * TAO_IDL/be/be_array.cpp:
                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_predefined_type.cpp:
                * TAO_IDL/be/be_structure.cpp:
                * TAO_IDL/be/be_typedef.cpp:
                * TAO_IDL/be/be_union.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype.cpp:
                * TAO_IDL/be/be_visitor_argument/argument.cpp:
                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cp
                * TAO_IDL/be/be_visitor_operation/arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/operation.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
                * TAO_IDL/be_include/be_array.h:
                * TAO_IDL/be_include/be_codegen.h:
                * TAO_IDL/be_include/be_interface.h:
                * TAO_IDL/be_include/be_predefined_type.h:
                * TAO_IDL/be_include/be_sequence.h:
                * TAO_IDL/be_include/be_structure.h:
                * TAO_IDL/be_include/be_typedef.h:
                * TAO_IDL/be_include/be_union.h:
                * TAO_IDL/be_include/be_valuetype.h:
                * TAO_IDL/be_include/be_visitor_valuetype.h:
                * TAO_IDL/be_include/be_visitor_interface/base_proxy_impl_ch.h:
                * TAO_IDL/be_include/be_visitor_interface/direct_collocated_sh.h:
                * TAO_IDL/be_include/be_visitor_interface/direct_proxy_impl_sh.h:
                * TAO_IDL/be_include/be_visitor_interface/direct_proxy_impl_ss.h:
                * TAO_IDL/be_include/be_visitor_interface/interceptors_cs.h:
                * TAO_IDL/be_include/be_visitor_interface/interceptors_ss.h:
                * TAO_IDL/be_include/be_visitor_interface/interface.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_ch.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_cs.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_sh.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
                * TAO_IDL/be_include/be_visitor_interface/remote_proxy_impl_ch.h:
                * TAO_IDL/be_include/be_visitor_interface/remote_proxy_impl_cs.h:
                * TAO_IDL/be_include/be_visitor_interface/thru_poa_proxy_impl_sh.h:
                * TAO_IDL/be_include/be_visitor_interface/thru_poa_proxy_impl_ss.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype_ch.h:
                * TAO_IDL/fe/fe_interface_header.cpp:
                * TAO_IDL/include/ast_array.h:
                * TAO_IDL/include/ast_predefined_type.h:
                * TAO_IDL/include/ast_structure.h:
                * TAO_IDL/include/ast_typedef.h:
                * TAO_IDL/include/ast_union.h:
                * TAO_IDL/include/ast_valuetype.h:
                * TAO_IDL/include/fe_interface_header.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/util/utl_err.cpp:

	          - Made changes to error checking for abstract interface
	            inheritance, valuetype inheritance, and valuetype supported
	            interfaces.

	          - Fixed value factory code generation.

	          - Finished code generation for abstract interfaces, add code
	            generation for abstract valuetypes, and added code generation
	            for valuetype interface support. The last item isn't finished
	            yet.

        Fri May 24 09:04:38 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/tao_idl.cpp:
                * TAO_IDL/ast/ast_component.cpp:
                * TAO_IDL/ast/ast_constant.cpp:
                * TAO_IDL/ast/ast_decl.cpp:
                * TAO_IDL/ast/ast_generator.cpp:
                * TAO_IDL/ast/ast_home.cpp:
                * TAO_IDL/ast/ast_interface.cpp:
                * TAO_IDL/ast/ast_interface_fwd.cpp:
                * TAO_IDL/ast/ast_operation.cpp:
                * TAO_IDL/ast/ast_predefined_type.cpp:
                * TAO_IDL/ast/ast_root.cpp:
                * TAO_IDL/ast/ast_type.cpp:
                * TAO_IDL/be/be_array.cpp:
                * TAO_IDL/be/be_codegen.cpp:
                * TAO_IDL/be/be_constant.cpp:
                * TAO_IDL/be/be_decl.cpp:
                * TAO_IDL/be/be_generator.cpp:
                * TAO_IDL/be/be_helper.cpp:
                * TAO_IDL/be/be_home.cpp:
                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_operation.cpp:
                * TAO_IDL/be/be_predefined_type.cpp:
                * TAO_IDL/be/be_sequence.cpp:
                * TAO_IDL/be/be_structure.cpp:
                * TAO_IDL/be/be_type.cpp:
                * TAO_IDL/be/be_union.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_interface.cpp:
                * TAO_IDL/be/be_visitor_argument/arglist.cpp:
                * TAO_IDL/be/be_visitor_argument/argument.cpp:
                * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/post_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/post_marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_result.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:
                * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_array/array_ch.cpp:
                * TAO_IDL/be/be_visitor_array/array_cs.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
                * TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/ami_interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:
                * TAO_IDL/be/be_visitor_module/module_ch.cpp:
                * TAO_IDL/be/be_visitor_module/module_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_sequence/elemtype.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ci.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
                * TAO_IDL/be/be_visitor_typedef/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_typedef/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
                * TAO_IDL/be_include/be_array.h:
                * TAO_IDL/be_include/be_codegen.h:
                * TAO_IDL/be_include/be_constant.h:
                * TAO_IDL/be_include/be_decl.h:
                * TAO_IDL/be_include/be_generator.h:
                * TAO_IDL/be_include/be_helper.h:
                * TAO_IDL/be_include/be_home.h:
                * TAO_IDL/be_include/be_operation.h:
                * TAO_IDL/be_include/be_sequence.h:
                * TAO_IDL/be_include/be_type.h:
                * TAO_IDL/be_include/be_visitor_argument.h:
                * TAO_IDL/be_include/be_visitor_array.h:
                * TAO_IDL/be_include/be_visitor_field.h:
                * TAO_IDL/be_include/be_visitor_interface.h:
                * TAO_IDL/be_include/be_visitor_operation.h:
                * TAO_IDL/be_include/be_visitor_sequence.h:
                * TAO_IDL/be_include/be_visitor_typecode.h:
                * TAO_IDL/be_include/be_visitor_union_branch.h:
                * TAO_IDL/be_include/be_visitor_valuetype.h:
                * TAO_IDL/be_include/be_visitor_argument/post_marshal_ss.h:
                * TAO_IDL/be_include/be_visitor_array/array.h:
                * TAO_IDL/be_include/be_visitor_array/array_cs.h:
                * TAO_IDL/be_include/be_visitor_array/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_array/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_array/cdr_op_cs.h:
                * TAO_IDL/be_include/be_visitor_attribute/attribute.h:
                * TAO_IDL/be_include/be_visitor_constant/constant_ch.h:
                * TAO_IDL/be_include/be_visitor_enum/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_enum/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_enum/enum_cs.h:
                * TAO_IDL/be_include/be_visitor_field/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_field/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_field/cdr_op_cs.h:
                * TAO_IDL/be_include/be_visitor_field/field_ch.h:
                * TAO_IDL/be_include/be_visitor_field/field_ci.h:
                * TAO_IDL/be_include/be_visitor_field/field_cs.h:
                * TAO_IDL/be_include/be_visitor_interface/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_interface/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_interface/cdr_op_cs.h:
                * TAO_IDL/be_include/be_visitor_interface/interface_ci.h:
                * TAO_IDL/be_include/be_visitor_interface_fwd/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_interface_fwd/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_interface_fwd/interface_fwd_ch.h:
                * TAO_IDL/be_include/be_visitor_interface_fwd/interface_fwd_ci.h:
                * TAO_IDL/be_include/be_visitor_module/module.h:
                * TAO_IDL/be_include/be_visitor_module/module_ch.h:
                * TAO_IDL/be_include/be_visitor_module/module_sh.h:
                * TAO_IDL/be_include/be_visitor_operation/arglist.h:
                * TAO_IDL/be_include/be_visitor_operation/operation_ch.h:
                * TAO_IDL/be_include/be_visitor_operation/operation_cs.h:
                * TAO_IDL/be_include/be_visitor_operation/operation_sh.h:
                * TAO_IDL/be_include/be_visitor_sequence/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_structure/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_structure/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_structure/structure_ch.h:
                * TAO_IDL/be_include/be_visitor_structure/structure_ci.h:
                * TAO_IDL/be_include/be_visitor_structure/structure_cs.h:
                * TAO_IDL/be_include/be_visitor_typedef/cdr_op_ch.h:
                * TAO_IDL/be_include/be_visitor_typedef/cdr_op_ci.h:
                * TAO_IDL/be_include/be_visitor_typedef/cdr_op_cs.h:
                * TAO_IDL/be_include/be_visitor_typedef/typedef.h:
                * TAO_IDL/be_include/be_visitor_typedef/typedef_ch.h:
                * TAO_IDL/be_include/be_visitor_typedef/typedef_ci.h:
                * TAO_IDL/be_include/be_visitor_typedef/typedef_cs.h:
                * TAO_IDL/be_include/be_visitor_union_branch/public_ch.h:
                * TAO_IDL/driver/drv_preproc.cpp:
                * TAO_IDL/fe/fe_interface_header.cpp:
                * TAO_IDL/fe/fe_tmplinst.cpp:
                * TAO_IDL/fe/idl.yy:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/fe/y.tab.h:
                * TAO_IDL/include/ast_component.h:
                * TAO_IDL/include/ast_constant.h:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_generator.h:
                * TAO_IDL/include/ast_home.h:
                * TAO_IDL/include/ast_interface.h:
                * TAO_IDL/include/ast_operation.h:
                * TAO_IDL/include/ast_type.h:
                * TAO_IDL/include/fe_interface_header.h:
                * TAO_IDL/include/idl_defines.h:
                * TAO_IDL/include/idl_global.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/include/utl_scope.h:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_global.cpp:
                * TAO_IDL/util/utl_list.cpp:
                * TAO_IDL/util/utl_scope.cpp:

	          - Beginning of support for abstract interfaces.
	          - Moved some utility methods and members of the BE
	            node classes to the AST node classes, so the NEST
                    backend under construction will need only visitors,
 	            no backend node classes.
	          - Cosmetic changes to many files.

                * TAO_IDL/be_include/be_visitor_interface/interceptors_ch.h:
                * TAO_IDL/be/be_visitor_interface/interceptors_ch.cpp:

	          Removed these files, they're no longer used.

        Wed Apr  3 13:20:58 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be_visitor_interface/amh_ch.cpp:
                * TAO_IDL/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be_visitor_structure/structure_ch.cpp:

                  Fixed indentation of _ptr_type and _var_type typedef
                  generation.

        Tue Apr  2 16:17:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
                * TAO_IDL/be/be_visitor_union/union_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:

	          Removed the generated guards around the '_ptr_type'
	          and '_var_type' typedefs, since we no longer
	          the pre-2.8 version of gcc that required them.

        Tue Apr  2 15:23:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_component.cpp:
                * TAO_IDL/ast/ast_component_fwd.cpp:
                * TAO_IDL/ast/ast_home.cpp:
                * TAO_IDL/be/be_component.cpp:
                * TAO_IDL/be/be_component_fwd.cpp:
                * TAO_IDL/be/be_home.cpp:
                * TAO_IDL/be/be_visitor_component.cpp:
                * TAO_IDL/be/be_visitor_component_fwd.cpp:
                * TAO_IDL/be/be_visitor_home.cpp:
                * TAO_IDL/be_include/be_component.h:
                * TAO_IDL/be_include/be_component_fwd.h:
                * TAO_IDL/be_include/be_visitor_component.h:
                * TAO_IDL/be_include/be_visitor_component_fwd.h:
                * TAO_IDL/be_include/be_visitor_home.h:
                * TAO_IDL/be_include/be_home.h:
                * TAO_IDL/include/ast_component.h:
                * TAO_IDL/include/ast_component_fwd.h:
                * TAO_IDL/include/ast_home.h:

	          New files representing new node classes for components,
	          forward declared components and component homes. Also
	          new container files for the corresponding visitors
	          (not yet created).

                * TAO_IDL/Makefile.BE:
                * TAO_IDL/Makefile.FE:
                * TAO_IDL/TAO_IDL_BE.bor:
                * TAO_IDL/TAO_IDL_BE_DLL.dsp:
                * TAO_IDL/TAO_IDL_BE_LIB.dsp:
                * TAO_IDL/TAO_IDL_FE.bor:
                * TAO_IDL/TAO_IDL_FE_DLL.dsp:
                * TAO_IDL/TAO_IDL_FE_LIB.dsp:
                * TAO_IDL/ast/Makefile.am:
                * TAO_IDL/ast/ast_component.cpp:
                * TAO_IDL/ast/ast_generator.cpp:
                * TAO_IDL/ast/ast_module.cpp:
                * TAO_IDL/ast/ast_redef.cpp:
                * TAO_IDL/ast/ast_valuetype.cpp:
                * TAO_IDL/be/Makefile.am:
                * TAO_IDL/be/be_generator.cpp:
                * TAO_IDL/be/be_scope.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_valuetype_fwd.cpp:
                * TAO_IDL/be/be_visitor.cpp:
                * TAO_IDL/be_include/Makefile.am:
                * TAO_IDL/be_include/be_generator.h:
                * TAO_IDL/be_include/be_interface_fwd.h:
                * TAO_IDL/be_include/be_visitor.h:
                * TAO_IDL/fe/fe_tmplinst.cpp:
                * TAO_IDL/include/Makefile.am:
                * TAO_IDL/include/ast_component.h:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_generator.h:
                * TAO_IDL/include/ast_module.h:
                * TAO_IDL/include/ast_valuetype_fwd.h:
                * TAO_IDL/include/ast_visitor.h:
                * TAO_IDL/include/utl_scope.h:
                * TAO_IDL/narrow/narrow.cpp:
                * TAO_IDL/util/utl_scope.cpp:

	          Changes to existing files to accommodate the new node
	          classes.

        Mon Apr  1 14:42:45 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_valuetype.cpp:
                * TAO_IDL/ast/ast_valuetype_fwd.cpp:
                * TAO_IDL/include/ast_valuetype.h:
                * TAO_IDL/include/ast_valuetype_fwd.h:

	          New files containing the new front end classes
	          AST_ValueType and AST_ValueTypeFwd

                * TAO_IDL/Makefile.FE:
                * TAO_IDL/TAO_IDL_FE.bor:
                * TAO_IDL/TAO_IDL_FE_DLL.dsp:
                * TAO_IDL/TAO_IDL_FE_LIB.dsp:
                * TAO_IDL/ast/Makefile.am:
                * TAO_IDL/ast/ast_decl.cpp:
                * TAO_IDL/ast/ast_generator.cpp:
                * TAO_IDL/ast/ast_interface.cpp:
                * TAO_IDL/ast/ast_interface_fwd.cpp:
                * TAO_IDL/ast/ast_module.cpp:
                * TAO_IDL/ast/ast_redef.cpp:
                * TAO_IDL/be/Makefile.am:
                * TAO_IDL/be/be_generator.cpp:
                * TAO_IDL/be/be_scope.cpp:
                * TAO_IDL/be/be_sequence.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_valuetype_fwd.cpp:
                * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:
                * TAO_IDL/be_include/Makefile.am:
                * TAO_IDL/be_include/be_generator.h:
                * TAO_IDL/be_include/be_valuetype.h:
                * TAO_IDL/be_include/be_valuetype_fwd.h:
                * TAO_IDL/be_include/be_visitor_argument.h:
                * TAO_IDL/be_include/be_visitor_argument/post_upcall_ss.h:
                * TAO_IDL/driver/Makefile.am:
                * TAO_IDL/fe/Makefile.am:
                * TAO_IDL/fe/fe_interface_header.cpp:
                * TAO_IDL/fe/idl.yy:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/include/Makefile.am:
                * TAO_IDL/include/ast_component.h:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_generator.h:
                * TAO_IDL/include/ast_interface.h:
                * TAO_IDL/include/ast_interface_fwd.h:
                * TAO_IDL/include/ast_module.h:
                * TAO_IDL/include/fe_interface_header.h:
                * TAO_IDL/include/idl_global.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/include/utl_scope.h:
                * TAO_IDL/narrow/narrow.cpp:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_scope.cpp:

	          Changes, additions and deletions occurring as a consequence
	          of the new class files created as listed above. In particular,
	          value types now conform to the constraints on inheritance
	          and interface support that have been recently agreed upon by
	          the OMG and which will soon be added officially to CORBA.
	          Thanks to Jonathan Biggar <jon@floorboard.com> for passing
	          along the results of this recent OMG agreement.

        Tue Mar 26 19:42:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_constant.cpp:
                * TAO_IDL/ast/ast_expression.cpp:
                * TAO_IDL/ast/ast_predefined_type.cpp:
                * TAO_IDL/ast/ast_union.cpp:
                * TAO_IDL/be/be_constant.cpp:
                * TAO_IDL/be/be_predefined_type.cpp:
                * TAO_IDL/be/be_sequence.cpp:
                * TAO_IDL/be/be_sunsoft.cpp:
                * TAO_IDL/be/be_union_branch.cpp:
                * TAO_IDL/be/be_visitor_argument/arglist.cpp:
                * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/post_marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/pre_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:
                * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
                * TAO_IDL/be/be_visitor_array/array.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/ctor_assign.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_result.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_assign_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
                * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/elemtype.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_access_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_reset_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
                * TAO_IDL/fe/fe_init.cpp:
                * TAO_IDL/fe/idl.ll:
                * TAO_IDL/fe/idl.yy:
                * TAO_IDL/fe/lex.yy.cpp:
                * TAO_IDL/fe/lex.yy.cpp:.diff:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/fe/y.tab.h:
                * TAO_IDL/include/ast_expression.h:
                * TAO_IDL/include/ast_predefined_type.h:
                * TAO_IDL/include/ast_union.h:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_global.cpp:
                * TAO_IDL/util/utl_scope.cpp:

                  Added the token IDL_OBJECT to the lexer and the production rule
                  'object_type' to the parser, as specified in the OMG IDL grammar.
                  Now a CORBA::Object, when used as a field or parameter, is parsed
                  by this rule instead of by 'scoped_name' as it was formerly. Also
                  added values to enum in AST_Expression and AST_PredefinedType to
                  correspond specifically to CORBA::Object, and modified many files
                  to use the new enum values.

        Mon Mar 25 18:27:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_constant.cpp:
                * TAO_IDL/ast/ast_expression.cpp:
                * TAO_IDL/be/be_constant.cpp:
                * TAO_IDL/be/be_global.cpp:
                * TAO_IDL/be/be_sunsoft.cpp:
                * TAO_IDL/be/be_visitor_constant.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
                * TAO_IDL/be_include/be_constant.h:
                * TAO_IDL/be_include/be_global.h:
                * TAO_IDL/driver/drv_args.cpp:
                * TAO_IDL/include/ast_constant.h:

                  Added support for enum constants. Also added command line option
                  to generate constants inline (always in the stub header file
                  regardless of whether the scope of the constant's declaration
                  is nested or not), which works better with some C++ compilers.
                  Thanks to Jody Hagins <jody@atdesk.com> for sending in patches
                  for the inline constant generation option.

                * TAO_IDL/be/be_visitor_argument/arglist.cpp:

                  Cosmetic changes.

        Sun Mar 24 20:59:07 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_decl.cpp:
                * TAO_IDL/be/be_array.cpp:
                * TAO_IDL/be/be_structure.cpp:
                * TAO_IDL/be/be_visitor_decl.cpp:
                * TAO_IDL/be/be_visitor_root.cpp:
                * TAO_IDL/be/be_visitor_array/array_ch.cpp:
                * TAO_IDL/be/be_visitor_field/field_cs.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be_include/be_array.h:
                * TAO_IDL/be_include/be_visitor_root/root.h:
                * TAO_IDL/fe/idl.yy:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/util/utl_scope.cpp:

                  Bugs fixed as a result of testing against IDL_Test. Also
                  fixed lookup problem where a struct/union/exception member
                  name was incorrectly clashing with the scope enclosing the
                  struct/union/exception.

        Sun Mar 24 16:30:01 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/ast/ast_structure_fwd.cpp:
                * TAO_IDL/ast/ast_union_fwd.cpp:
                * TAO_IDL/be/be_structure_fwd.cpp:
                * TAO_IDL/be/be_union_fwd.cpp:
                * TAO_IDL/be/be_visitor_structure_fwd.cpp:
                * TAO_IDL/be/be_visitor_union_fwd.cpp:
                * TAO_IDL/be/be_visitor_structure_fwd/structure_fwd_ch.cpp:
                * TAO_IDL/be/be_visitor_union_fwd/union_fwd_ch.cpp:
                * TAO_IDL/be_include/be_structure_fwd.h:
                * TAO_IDL/be_include/be_union_fwd.h:
                * TAO_IDL/be_include/be_visitor_structure_fwd.h:
                * TAO_IDL/be_include/be_visitor_union_fwd.h:
                * TAO_IDL/be_include/be_visitor_structure_fwd/structure_fwd_ch.h:
                * TAO_IDL/be_include/be_visitor_union_fwd/union_fwd_ch.h:
                * TAO_IDL/include/ast_structure_fwd.h:
                * TAO_IDL/include/ast_union_fwd.h:

	          New files for forward declared structs and unions, along
	          with the associated visitors.

                * TAO_IDL/Makefile.BE:
                * TAO_IDL/Makefile.FE:
                * TAO_IDL/TAO_IDL_BE.bor:
                * TAO_IDL/TAO_IDL_BE_DLL.dsp
                * TAO_IDL/TAO_IDL_BE_LIB.dsp
                * TAO_IDL/TAO_IDL_FE.bor:
                * TAO_IDL/TAO_IDL_FE_DLL.dsp:
                * TAO_IDL/TAO_IDL_FE_LIB.dsp:
                * TAO_IDL/tao_idl.cpp:
                * TAO_IDL/tao_idl_static.dsp
                * TAO_IDL/ast/ast_check.cpp:
                * TAO_IDL/ast/ast_generator.cpp:
                * TAO_IDL/ast/ast_interface.cpp:
                * TAO_IDL/ast/ast_interface_fwd.cpp:
                * TAO_IDL/ast/ast_module.cpp:
                * TAO_IDL/ast/ast_redef.cpp:
                * TAO_IDL/ast/ast_structure.cpp:
                * TAO_IDL/ast/ast_type.cpp:
                * TAO_IDL/be/be_constant.cpp:
                * TAO_IDL/be/be_decl.cpp:
                * TAO_IDL/be/be_enum.cpp:
                * TAO_IDL/be/be_enum_val.cpp:
                * TAO_IDL/be/be_exception.cpp:
                * TAO_IDL/be/be_field.cpp:
                * TAO_IDL/be/be_generator.cpp:
                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_interface_fwd.cpp:
                * TAO_IDL/be/be_module.cpp:
                * TAO_IDL/be/be_operation.cpp:
                * TAO_IDL/be/be_predefined_type.cpp:
                * TAO_IDL/be/be_sequence.cpp:
                * TAO_IDL/be/be_string.cpp:
                * TAO_IDL/be/be_structure.cpp:
                * TAO_IDL/be/be_typedef.cpp:
                * TAO_IDL/be/be_union.cpp:
                * TAO_IDL/be/be_union_branch.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_visitor.cpp:
                * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_factory.cpp:
                * TAO_IDL/be/be_visitor_interface.cpp:
                * TAO_IDL/be/be_visitor_module.cpp:
                * TAO_IDL/be/be_visitor_sequence.cpp:
                * TAO_IDL/be/be_visitor_valuetype.cpp:
                * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/pre_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_array/array_ch.cpp:
                * TAO_IDL/be/be_visitor_array/array_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
                * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp:
                * TAO_IDL/be/be_visitor_sequence/elemtype.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ci.cpp:
                * TAO_IDL/be/be_visitor_union/union_ch.cpp:
                * TAO_IDL/be/be_visitor_union/union_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be_include/be_codegen.h:
                * TAO_IDL/be_include/be_decl.h:
                * TAO_IDL/be_include/be_enum_val.h:
                * TAO_IDL/be_include/be_field.h:
                * TAO_IDL/be_include/be_generator.h:
                * TAO_IDL/be_include/be_interface_fwd.h:
                * TAO_IDL/be_include/be_module.h:
                * TAO_IDL/be_include/be_operation.h:
                * TAO_IDL/be_include/be_union_branch.h:
                * TAO_IDL/be_include/be_visitor.h:
                * TAO_IDL/be_include/be_visitor_argument.h:
                * TAO_IDL/be_include/be_visitor_enum.h:
                * TAO_IDL/be_include/be_visitor_exception.h:
                * TAO_IDL/be_include/be_visitor_interface.h:
                * TAO_IDL/be_include/be_visitor_interface_fwd.h:
                * TAO_IDL/be_include/be_visitor_typecode.h:
                * TAO_IDL/be_include/be_visitor_typedef.h:
                * TAO_IDL/be_include/be_visitor_valuetype_fwd.h:
                * TAO_IDL/be_include/be_visitor_argument/marshal_ss.h:
                * TAO_IDL/be_include/be_visitor_argument/post_upcall_ss.h:
                * TAO_IDL/be_include/be_visitor_argument/upcall_ss.h:
                * TAO_IDL/be_include/be_visitor_interface/interface.h:
                * TAO_IDL/be_include/be_visitor_module/module.h:
                * TAO_IDL/be_include/be_visitor_sequence/buffer_type.h:
                * TAO_IDL/be_include/be_visitor_sequence/elemtype.h:
                * TAO_IDL/be_include/be_visitor_sequence/sequence_base.h:
                * TAO_IDL/be_include/be_visitor_valuetype/valuetype.h:
                * TAO_IDL/fe/fe_declarator.cpp:
                * TAO_IDL/fe/idl.yy:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_extern.h:
                * TAO_IDL/include/ast_generator.h:
                * TAO_IDL/include/ast_interface.h:
                * TAO_IDL/include/ast_interface_fwd.h:
                * TAO_IDL/include/ast_module.h:
                * TAO_IDL/include/ast_type.h:
                * TAO_IDL/include/ast_visitor.h:
                * TAO_IDL/include/idl_global.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/include/utl_idlist.h:
                * TAO_IDL/include/utl_scope.h:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_idlist.cpp:
                * TAO_IDL/util/utl_scope.cpp:

	          - Added functionality to existing files to complete the
	            support of forward declared structs and unions, including
	            checks to output an error message if a forward declared
	            struct or union is used anywhere but as a sequence element.

	          - Moved the AST_Interface method compare(), which compares
	            two scoped names for equality, to UTL_IdList, so it can
	            be used with any two scoped names.

	          - Moved the SIZE_TYPE enum, along with its associated
	            set/set/compute methods, from class be_decl to class
	            AST_Type, making it accessible to the front end, and
	            not inherited by any class that doesn't need it. Also
	            removed size type functionality from class be_operation,
	            since it was never used.

	          - Removed generation of 'struct <structname>' from code
	            generation for fully defined struct, and removed
	            'class <classname>' from code generation for fully
	            defined union. If these occur inside an interface or
	            value type, and the struct or union has been previously
	            forward declared, the MSVC compiler has an internal error.

	          - Cosmetic changes to both source code and generated code.

        Fri Mar 15 16:02:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/Makefile.EXE:
                * TAO_IDL/TAO_IDL_BE_DLL.dsp:
                * TAO_IDL/TAO_IDL_FE_DLL.dsp:
                * TAO_IDL/tao_idl.bor:
                * TAO_IDL/tao_idl.cpp:
                * TAO_IDL/tao_idl.dsp:
                * TAO_IDL/ast/ast_argument.cpp:
                * TAO_IDL/ast/ast_array.cpp:
                * TAO_IDL/ast/ast_attribute.cpp:
                * TAO_IDL/ast/ast_check.cpp:
                * TAO_IDL/ast/ast_component.cpp:
                * TAO_IDL/ast/ast_concrete_type.cpp:
                * TAO_IDL/ast/ast_constant.cpp:
                * TAO_IDL/ast/ast_decl.cpp:
                * TAO_IDL/ast/ast_enum.cpp:
                * TAO_IDL/ast/ast_enum_val.cpp:
                * TAO_IDL/ast/ast_exception.cpp:
                * TAO_IDL/ast/ast_expression.cpp:
                * TAO_IDL/ast/ast_factory.cpp:
                * TAO_IDL/ast/ast_field.cpp:
                * TAO_IDL/ast/ast_generator.cpp:
                * TAO_IDL/ast/ast_interface.cpp:
                * TAO_IDL/ast/ast_interface_fwd.cpp:
                * TAO_IDL/ast/ast_module.cpp:
                * TAO_IDL/ast/ast_native.cpp:
                * TAO_IDL/ast/ast_operation.cpp:
                * TAO_IDL/ast/ast_predefined_type.cpp:
                * TAO_IDL/ast/ast_recursive.cpp:
                * TAO_IDL/ast/ast_redef.cpp:
                * TAO_IDL/ast/ast_root.cpp:
                * TAO_IDL/ast/ast_sequence.cpp:
                * TAO_IDL/ast/ast_string.cpp:
                * TAO_IDL/ast/ast_structure.cpp:
                * TAO_IDL/ast/ast_type.cpp:
                * TAO_IDL/ast/ast_typedef.cpp:
                * TAO_IDL/ast/ast_union.cpp:
                * TAO_IDL/ast/ast_union_branch.cpp:
                * TAO_IDL/ast/ast_union_label.cpp:
                * TAO_IDL/ast/ast_visitor.cpp:
                * TAO_IDL/be/be_argument.cpp:
                * TAO_IDL/be/be_array.cpp:
                * TAO_IDL/be/be_attribute.cpp:
                * TAO_IDL/be/be_codegen.cpp:
                * TAO_IDL/be/be_constant.cpp:
                * TAO_IDL/be/be_decl.cpp:
                * TAO_IDL/be/be_enum.cpp:
                * TAO_IDL/be/be_enum_val.cpp:
                * TAO_IDL/be/be_exception.cpp:
                * TAO_IDL/be/be_expression.cpp:
                * TAO_IDL/be/be_factory.cpp:
                * TAO_IDL/be/be_field.cpp:
                * TAO_IDL/be/be_generator.cpp:
                * TAO_IDL/be/be_global.cpp:
                * TAO_IDL/be/be_helper.cpp:
                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_interface_fwd.cpp:
                * TAO_IDL/be/be_interface_strategy.cpp:
                * TAO_IDL/be/be_module.cpp:
                * TAO_IDL/be/be_native.cpp:
                * TAO_IDL/be/be_operation.cpp:
                * TAO_IDL/be/be_operation_strategy.cpp:
                * TAO_IDL/be/be_predefined_type.cpp:
                * TAO_IDL/be/be_produce.cpp:
                * TAO_IDL/be/be_root.cpp:
                * TAO_IDL/be/be_scope.cpp:
                * TAO_IDL/be/be_sequence.cpp:
                * TAO_IDL/be/be_stream_factory.cpp:
                * TAO_IDL/be/be_string.cpp:
                * TAO_IDL/be/be_structure.cpp:
                * TAO_IDL/be/be_sunsoft.cpp:
                * TAO_IDL/be/be_tmplinst.cpp:
                * TAO_IDL/be/be_type.cpp:
                * TAO_IDL/be/be_typedef.cpp:
                * TAO_IDL/be/be_union.cpp:
                * TAO_IDL/be/be_union_branch.cpp:
                * TAO_IDL/be/be_union_label.cpp:
                * TAO_IDL/be/be_valuetype.cpp:
                * TAO_IDL/be/be_valuetype_fwd.cpp:
                * TAO_IDL/be/be_visitor.cpp:
                * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_argument.cpp:
                * TAO_IDL/be/be_visitor_array.cpp:
                * TAO_IDL/be/be_visitor_attribute.cpp:
                * TAO_IDL/be/be_visitor_constant.cpp:
                * TAO_IDL/be/be_visitor_context.cpp:
                * TAO_IDL/be/be_visitor_decl.cpp:
                * TAO_IDL/be/be_visitor_enum.cpp:
                * TAO_IDL/be/be_visitor_exception.cpp:
                * TAO_IDL/be/be_visitor_factory.cpp:
                * TAO_IDL/be/be_visitor_field.cpp:
                * TAO_IDL/be/be_visitor_interface.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd.cpp:
                * TAO_IDL/be/be_visitor_module.cpp:
                * TAO_IDL/be/be_visitor_operation.cpp:
                * TAO_IDL/be/be_visitor_root.cpp:
                * TAO_IDL/be/be_visitor_scope.cpp:
                * TAO_IDL/be/be_visitor_sequence.cpp:
                * TAO_IDL/be/be_visitor_structure.cpp:
                * TAO_IDL/be/be_visitor_typecode.cpp:
                * TAO_IDL/be/be_visitor_typedef.cpp:
                * TAO_IDL/be/be_visitor_union.cpp:
                * TAO_IDL/be/be_visitor_union_branch.cpp:
                * TAO_IDL/be/be_visitor_valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd.cpp:
                * TAO_IDL/be/be_visitor_argument/arglist.cpp:
                * TAO_IDL/be/be_visitor_argument/argument.cpp:
                * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/paramlist.cpp:
                * TAO_IDL/be/be_visitor_argument/post_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/post_marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/pre_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_cs.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_result.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:
                * TAO_IDL/be/be_visitor_argument/request_info_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
                * TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_array/array.cpp:
                * TAO_IDL/be/be_visitor_array/array_ch.cpp:
                * TAO_IDL/be/be_visitor_array/array_ci.cpp:
                * TAO_IDL/be/be_visitor_array/array_cs.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
                * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
                * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/ctor_assign.cpp:
                * TAO_IDL/be/be_visitor_exception/exception.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ci.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_field/field_ci.cpp:
                * TAO_IDL/be/be_visitor_field/field_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/ami_interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_collocated_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_collocated_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/tie_si.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:
                * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ci.cpp:
                * TAO_IDL/be/be_visitor_module/any_op.cpp:
                * TAO_IDL/be/be_visitor_module/cdr_op.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_module/module_ch.cpp:
                * TAO_IDL/be/be_visitor_module/module_ih.cpp:
                * TAO_IDL/be/be_visitor_module/module_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/argument.cpp:
                * TAO_IDL/be/be_visitor_operation/argument_invoke.cpp:
                * TAO_IDL/be/be_visitor_operation/argument_marshal.cpp:
                * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_collocated_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_exceptlist.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_result.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/operation.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
                * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_assign_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_is.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_post_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_post_upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_pre_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/smart_proxy_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/smart_proxy_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/tie_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/tie_si.cpp:
                * TAO_IDL/be/be_visitor_root/any_op.cpp:
                * TAO_IDL/be/be_visitor_root/cdr_op.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_root/root_ch.cpp:
                * TAO_IDL/be/be_visitor_root/root_ci.cpp:
                * TAO_IDL/be/be_visitor_root/root_cs.cpp:
                * TAO_IDL/be/be_visitor_root/root_ih.cpp:
                * TAO_IDL/be/be_visitor_root/root_is.cpp:
                * TAO_IDL/be/be_visitor_root/root_sh.cpp:
                * TAO_IDL/be/be_visitor_root/root_si.cpp:
                * TAO_IDL/be/be_visitor_root/root_ss.cpp:
                * TAO_IDL/be/be_visitor_root/root_sth.cpp:
                * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/elemtype.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/structure.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ci.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
                * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
                * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_typedef/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_typedef/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_typedef/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
                * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_ci.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_cs.cpp:
                * TAO_IDL/be/be_visitor_union/union.cpp:
                * TAO_IDL/be/be_visitor_union/union_ch.cpp:
                * TAO_IDL/be/be_visitor_union/union_ci.cpp:
                * TAO_IDL/be/be_visitor_union/union_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_access_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_reset_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ci.cpp:
                * TAO_IDL/be_include/be_constant.h:
                * TAO_IDL/be_include/be_extern.h:
                * TAO_IDL/be_include/be_generator.h:
                * TAO_IDL/be_include/be_global.h:
                * TAO_IDL/be_include/be_helper.h:
                * TAO_IDL/be_include/be_native.h:
                * TAO_IDL/be_include/be_operation.h:
                * TAO_IDL/be_include/be_operation_strategy.h:
                * TAO_IDL/be_include/be_sequence.h:
                * TAO_IDL/be_include/be_union.h:
                * TAO_IDL/be_include/be_union_branch.h:
                * TAO_IDL/be_include/be_valuetype.h:
                * TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
                * TAO_IDL/be_include/be_visitor_ami_pre_proc.h:
                * TAO_IDL/be_include/be_visitor_array.h:
                * TAO_IDL/be_include/be_visitor_attribute.h:
                * TAO_IDL/be_include/be_visitor_constant.h:
                * TAO_IDL/be_include/be_visitor_context.h:
                * TAO_IDL/be_include/be_visitor_enum.h:
                * TAO_IDL/be_include/be_visitor_exception.h:
                * TAO_IDL/be_include/be_visitor_factory.h:
                * TAO_IDL/be_include/be_visitor_field.h:
                * TAO_IDL/be_include/be_visitor_interface.h:
                * TAO_IDL/be_include/be_visitor_interface_fwd.h:
                * TAO_IDL/be_include/be_visitor_module.h:
                * TAO_IDL/be_include/be_visitor_operation.h:
                * TAO_IDL/be_include/be_visitor_root.h:
                * TAO_IDL/be_include/be_visitor_scope.h:
                * TAO_IDL/be_include/be_visitor_sequence.h:
                * TAO_IDL/be_include/be_visitor_structure.h:
                * TAO_IDL/be_include/be_visitor_typecode.h:
                * TAO_IDL/be_include/be_visitor_typedef.h:
                * TAO_IDL/be_include/be_visitor_union.h:
                * TAO_IDL/be_include/be_visitor_union_branch.h:
                * TAO_IDL/be_include/be_visitor_valuetype.h:
                * TAO_IDL/be_include/be_visitor_valuetype_fwd.h:
                * TAO_IDL/be_include/be_visitor_argument/argument.h:
                * TAO_IDL/be_include/be_visitor_argument/vardecl_ss.h:
                * TAO_IDL/be_include/be_visitor_operation/operation.h:
                * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
                * TAO_IDL/driver/drv_args.cpp:
                * TAO_IDL/driver/drv_init.cpp:
                * TAO_IDL/driver/drv_preproc.cpp:
                * TAO_IDL/fe/fe_declarator.cpp:
                * TAO_IDL/fe/fe_extern.cpp:
                * TAO_IDL/fe/fe_global.cpp:
                * TAO_IDL/fe/fe_init.cpp:
                * TAO_IDL/fe/fe_interface_header.cpp:
                * TAO_IDL/fe/fe_lookup.cpp:
                * TAO_IDL/fe/fe_private.cpp:
                * TAO_IDL/fe/idl.ll
                * TAO_IDL/fe/idl.yy
                * TAO_IDL/fe/lex.yy.cpp:
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/include/ast_argument.h:
                * TAO_IDL/include/ast_array.h:
                * TAO_IDL/include/ast_attribute.h:
                * TAO_IDL/include/ast_component.h:
                * TAO_IDL/include/ast_concrete_type.h:
                * TAO_IDL/include/ast_constant.h:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_enum.h:
                * TAO_IDL/include/ast_enum_val.h:
                * TAO_IDL/include/ast_exception.h:
                * TAO_IDL/include/ast_expression.h:
                * TAO_IDL/include/ast_extern.h:
                * TAO_IDL/include/ast_factory.h:
                * TAO_IDL/include/ast_field.h:
                * TAO_IDL/include/ast_generator.h:
                * TAO_IDL/include/ast_interface.h:
                * TAO_IDL/include/ast_interface_fwd.h:
                * TAO_IDL/include/ast_module.h:
                * TAO_IDL/include/ast_native.h:
                * TAO_IDL/include/ast_operation.h:
                * TAO_IDL/include/ast_predefined_type.h:
                * TAO_IDL/include/ast_root.h:
                * TAO_IDL/include/ast_sequence.h:
                * TAO_IDL/include/ast_string.h:
                * TAO_IDL/include/ast_structure.h:
                * TAO_IDL/include/ast_type.h:
                * TAO_IDL/include/ast_typedef.h:
                * TAO_IDL/include/ast_union.h:
                * TAO_IDL/include/ast_union_branch.h:
                * TAO_IDL/include/ast_union_label.h:
                * TAO_IDL/include/drv_extern.h:
                * TAO_IDL/include/drv_private.h:
                * TAO_IDL/include/fe_declarator.h:
                * TAO_IDL/include/fe_extern.h:
                * TAO_IDL/include/fe_interface_header.h:
                * TAO_IDL/include/fe_private.h:
                * TAO_IDL/include/global_extern.h:
                * TAO_IDL/include/idl_bool.h:
                * TAO_IDL/include/idl_global.h:
                * TAO_IDL/include/nr_extern.h:
                * TAO_IDL/include/utl_decllist.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/include/utl_exceptlist.h:
                * TAO_IDL/include/utl_exprlist.h:
                * TAO_IDL/include/utl_identifier.h:
                * TAO_IDL/include/utl_idlist.h:
                * TAO_IDL/include/utl_indenter.h:
                * TAO_IDL/include/utl_labellist.h:
                * TAO_IDL/include/utl_list.h:
                * TAO_IDL/include/utl_namelist.h:
                * TAO_IDL/include/utl_scope.h:
                * TAO_IDL/include/utl_scoped_name.h:
                * TAO_IDL/include/utl_stack.h:
                * TAO_IDL/include/utl_string.h:
                * TAO_IDL/include/utl_strlist.h:
                * TAO_IDL/narrow/narrow.cpp:
                * TAO_IDL/util/utl_decllist.cpp:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_exceptlist.cpp:
                * TAO_IDL/util/utl_exprlist.cpp:
                * TAO_IDL/util/utl_global.cpp:
                * TAO_IDL/util/utl_identifier.cpp:
                * TAO_IDL/util/utl_idlist.cpp:
                * TAO_IDL/util/utl_indenter.cpp:
                * TAO_IDL/util/utl_labellist.cpp:
                * TAO_IDL/util/utl_list.cpp:
                * TAO_IDL/util/utl_namelist.cpp:
                * TAO_IDL/util/utl_scope.cpp:
                * TAO_IDL/util/utl_stack.cpp:
                * TAO_IDL/util/utl_string.cpp:
                * TAO_IDL/util/utl_strlist.cpp:

                  Overhauled the #include structure to reduce dependencies
                  and minimize redundant and unnecessary includes. Compile
                  time from clean has been reduced by 30%.

                * TAO_IDL/be_include/be.h:
                * TAO_IDL/driver/drv_init.cpp:
                * TAO_IDL/driver/drv_private.cpp:
                * TAO_IDL/driver/drv_private.h:
                * TAO_IDL/include/idl.h:
                * TAO_IDL/include/idl_extern.h:
                * TAO_IDL/include/idl_fwd.h:
                * TAO_IDL/include/util.h:
                * TAO_IDL/include/ast.h:

                  Eliminated these files by moving their contents to other
                  files.

        Wed Mar  6 10:15:45 2002  Jeff Parsons <parsons@cs.wustl.edu>

                * TAO_IDL/TAO_IDL_FE_DLL.dsp:
                * TAO_IDL/tao_idl.cpp:
                * TAO_IDL/ast/ast_constant.cpp:
                * TAO_IDL/ast/ast_decl.cpp:
                * TAO_IDL/ast/ast_enum.cpp:
                * TAO_IDL/ast/ast_exception.cpp:
                * TAO_IDL/ast/ast_expression.cpp:
                * TAO_IDL/ast/ast_factory.cpp:
                * TAO_IDL/ast/ast_generator.cpp:
                * TAO_IDL/ast/ast_interface.cpp:
                * TAO_IDL/ast/ast_module.cpp:
                * TAO_IDL/ast/ast_native.cpp:
                * TAO_IDL/ast/ast_operation.cpp:
                * TAO_IDL/ast/ast_predefined_type.cpp:
                * TAO_IDL/ast/ast_root.cpp:
                * TAO_IDL/ast/ast_string.cpp:
                * TAO_IDL/ast/ast_type.cpp:
                * TAO_IDL/ast/ast_typedef.cpp:
                * TAO_IDL/be/be_codegen.cpp:
                * TAO_IDL/be/be_constant.cpp:
                * TAO_IDL/be/be_decl.cpp:
                * TAO_IDL/be/be_enum.cpp:
                * TAO_IDL/be/be_enum_val.cpp:
                * TAO_IDL/be/be_expression.cpp:
                * TAO_IDL/be/be_generator.cpp:
                * TAO_IDL/be/be_global.cpp:
                * TAO_IDL/be/be_helper.cpp:
                * TAO_IDL/be/be_interface.cpp:
                * TAO_IDL/be/be_interface_strategy.cpp:
                * TAO_IDL/be/be_operation.cpp:
                * TAO_IDL/be/be_predefined_type.cpp:
                * TAO_IDL/be/be_produce.cpp:
                * TAO_IDL/be/be_root.cpp:
                * TAO_IDL/be/be_scope.cpp:
                * TAO_IDL/be/be_string.cpp:
                * TAO_IDL/be/be_type.cpp:
                * TAO_IDL/be/be_typedef.cpp:
                * TAO_IDL/be/be_visitor.cpp:
                * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
                * TAO_IDL/be/be_visitor_factory.cpp:
                * TAO_IDL/be/be_visitor_operation.cpp:
                * TAO_IDL/be/be_visitor_sequence.cpp:
                * TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp:
                * TAO_IDL/be/be_visitor_argument/pre_invoke_cs.cpp:
                * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
                * TAO_IDL/be/be_visitor_enum/enum_cs.cpp:
                * TAO_IDL/be/be_visitor_exception/exception.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
                * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
                * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_field/field_ch.cpp:
                * TAO_IDL/be/be_visitor_field/field_ci.cpp:
                * TAO_IDL/be/be_visitor_field/field_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ih.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_is.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
                * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
                * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
                * TAO_IDL/be/be_visitor_interface/tie_si.cpp:
                * TAO_IDL/be/be_visitor_module/module.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/argument.cpp:
                * TAO_IDL/be/be_visitor_operation/argument_invoke.cpp:
                * TAO_IDL/be/be_visitor_operation/argument_marshal.cpp:
                * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_collocated_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_is.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
                * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/smart_proxy_ch.cpp:
                * TAO_IDL/be/be_visitor_operation/smart_proxy_cs.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
                * TAO_IDL/be/be_visitor_operation/tie_sh.cpp:
                * TAO_IDL/be/be_visitor_operation/tie_si.cpp:
                * TAO_IDL/be/be_visitor_root/root.cpp:
                * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:
                * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
                * TAO_IDL/be/be_visitor_structure/structure.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
                * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
                * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
                * TAO_IDL/be/be_visitor_union/discriminant_cs.cpp:
                * TAO_IDL/be/be_visitor_union/union.cpp:
                * TAO_IDL/be/be_visitor_union/union_ch.cpp:
                * TAO_IDL/be/be_visitor_union/union_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
                * TAO_IDL/be/be_visitor_union_branch/public_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cdr_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_arglist_ch.cpp:
                * TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:
                * TAO_IDL/be_include/be_codegen.h:
                * TAO_IDL/be_include/be_constant.h:
                * TAO_IDL/be_include/be_decl.h:
                * TAO_IDL/be_include/be_enum_val.h:
                * TAO_IDL/be_include/be_helper.h:
                * TAO_IDL/be_include/be_interface_strategy.h:
                * TAO_IDL/be_include/be_predefined_type.h:
                * TAO_IDL/be_include/be_string.h:
                * TAO_IDL/be_include/be_visitor_operation.h:
                * TAO_IDL/be_include/be_visitor_operation/ami_cs.h:
                * TAO_IDL/be_include/be_visitor_operation/ami_handler_reply_stub_operation_cs.h:
                * TAO_IDL/be_include/be_visitor_operation/argument_invoke.h:
                * TAO_IDL/be_include/be_visitor_operation/argument_marshal.h:
                * TAO_IDL/be_include/be_visitor_operation/direct_collocated_ss.h:
                * TAO_IDL/be_include/be_visitor_operation/direct_proxy_impl_ss.h:
                * TAO_IDL/be_include/be_visitor_operation/smart_proxy_cs.h:
                * TAO_IDL/be_include/be_visitor_operation/thru_poa_collocated_ss.h:
                * TAO_IDL/be_include/be_visitor_operation/thru_poa_proxy_impl_ss.h:
                * TAO_IDL/driver/drv_args.cpp:
                * TAO_IDL/driver/drv_init.cpp:
                * TAO_IDL/driver/drv_preproc.cpp:
                * TAO_IDL/fe/fe_declarator.cpp:
                * TAO_IDL/fe/fe_extern.cpp:
                * TAO_IDL/fe/fe_init.cpp:
                * TAO_IDL/fe/fe_interface_header.cpp:
                * TAO_IDL/fe/fe_private.cpp:
                * TAO_IDL/fe/fe_tmplinst.cpp:
                * TAO_IDL/fe/idl.ll
                * TAO_IDL/fe/idl.yy
                * TAO_IDL/fe/lex.yy.cpp:
                * TAO_IDL/fe/lex.yy.cpp:.diff
                * TAO_IDL/fe/y.tab.cpp:
                * TAO_IDL/fe/y.tab.cpp:.diff
                * TAO_IDL/fe/y.tab.h:
                * TAO_IDL/include/ast.h:
                * TAO_IDL/include/ast_constant.h:
                * TAO_IDL/include/ast_decl.h:
                * TAO_IDL/include/ast_enum.h:
                * TAO_IDL/include/ast_expression.h:
                * TAO_IDL/include/ast_extern.h:
                * TAO_IDL/include/ast_generator.h:
                * TAO_IDL/include/ast_interface.h:
                * TAO_IDL/include/ast_predefined_type.h:
                * TAO_IDL/include/ast_root.h:
                * TAO_IDL/include/ast_string.h:
                * TAO_IDL/include/ast_structure.h:
                * TAO_IDL/include/ast_type.h:
                * TAO_IDL/include/ast_typedef.h:
                * TAO_IDL/include/fe_declarator.h:
                * TAO_IDL/include/fe_extern.h:
                * TAO_IDL/include/fe_interface_header.h:
                * TAO_IDL/include/idl.h:
                * TAO_IDL/include/idl_extern.h:
                * TAO_IDL/include/idl_global.h:
                * TAO_IDL/include/util.h:
                * TAO_IDL/include/utl_decllist.h:
                * TAO_IDL/include/utl_err.h:
                * TAO_IDL/include/utl_exceptlist.h:
                * TAO_IDL/include/utl_identifier.h:
                * TAO_IDL/include/utl_idlist.h:
                * TAO_IDL/include/utl_list.h:
                * TAO_IDL/include/utl_stack.h:
                * TAO_IDL/util/utl_decllist.cpp:
                * TAO_IDL/util/utl_err.cpp:
                * TAO_IDL/util/utl_global.cpp:
                * TAO_IDL/util/utl_identifier.cpp:
                * TAO_IDL/util/utl_idlist.cpp:
                * TAO_IDL/util/utl_labellist.cpp:
                * TAO_IDL/util/utl_list.cpp:
                * TAO_IDL/util/utl_scope.cpp:
                * TAO_IDL/util/utl_stack.cpp:
                * TAO_IDL/util/utl_strlist.cpp:
                * TAO_IDL/util/utl_tmpl/utl_idlist.cpp:
                * TAO_IDL/util/utl_tmpl/utl_strlist.cpp:

	          - Added tokens corresponding to the new IDL3 keywords.

	          - Added production rules for 'typeid' and 'typeprefix'.
	            These are the CCM equivalents of #pragma prefix and
	            #pragma ID.

	          - Replaced nearly 200 heap visitor allocations with
	            stack allocations. The remaining two dozen or so
	            heap visitor allocations are all related to AMI or
 	            AMH, where the context state is not locally known.

	          - Plugged many memory leaks and reduced memory usage by:

	            + Changing some global variable creations from heap
	              stack.

	            + Changing most scoped name and identifier class
	              allocations from heap to stack, especially the cases
	              where they are passed to a node constructor and
	              copied.

	            + Expanded the use of the virtual destroy() functions.

	            + Freeing memory that holds the string corresponding
	              to the current token or identifier before the next
	              one is read, in cases where it is either copied or
	              not referenced.

                * TAO_IDL/be_include/be_visitor_operation/inv_arglist.h:
                * TAO_IDL/be_be_visitor_operation/inv_arglist.cpp:

  	          Removed files -- no longer used.

	        * TAO_IDL/ast/ast_component.cpp:
	        * TAO_IDL/include/ast_component.h:

	          New files.

Mon Jul 01 09:11:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/PortableGroup.bor:
          Added missing files.
