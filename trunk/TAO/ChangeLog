Mon Aug 16 12:13:30 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* TAO-INSTALL.html (href): 

	  Fixed some notes on .sln files generated for VC71.

Sun Aug 15 18:16:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        
          Fixed minor bug in setting the default version to 1.0.
          
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
        
          - Moved code to create AST nodes for a struct and sequence
            implied IDL for 'uses multiple' declarations from the
            parser back to its original location in the CCM preprocessing
            visitor.
            
          - Added a command line option (-Sm) to suppress the CCM
            preprocessing visitor, for use on IDL files that have
            already had their CCM-related implied IDL converted explicitly.
            
          - Added a flag to change the way the includes orb.idl,
            Components.idl and *.pidl are handled. This flag can be set
            to modify the default behavior by a plugin back end.

Sun Aug 15 18:07:04 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * docs/compiler.html:
        * docs/releasenotes/index.html:
        
          Added items for a new IDL compiler command line option -Sm, that
          disables the visitor that converts IDL3 constructs to the
          equivalent IDL2. This option is for use in IDL files where such 
          conversions are already present explicitly, for example if the
          IDL file is the product of a converstion tool.

Sat Aug 14 20:21:34 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (OpenSSL_traits):

	  Replaced primary template definition with a forward declaration.
	  OpenSSL data structure-specific traits should always
	  define/specialize their own traits template.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h (OpenSSL_traits):
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.h (OpenSSL_traits):
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h (OpenSSL_traits):

	  More MSVC++ 6 brain damage.  MSVC++ 6 cannot handle
	  initialization of a static constant variable in the structure
	  declaration.  It considers non-zero initialization to be an
	  improper pure function specifier despite the fact no function is
	  declared in this case.  Define the constant inside an
	  enumeration instead to work around the problem.

Sat Aug 14 18:17:59 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          In the traversal of the inheritance graph for components, changed
          the algorithm so that CCMObject is processed before the base
          component, if any. This move ensures that, in the generated
          copy constructor in the skeleton class of the equivalent interface,
          the calls to base class copy constructors will be generated in
          the correct order. For compilers that are strict about this,
          the correct order is depth-first pre-order on the inheritance
          tree.

Sat Aug 14 12:11:06 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/Event/ECG_UDP_Out_Endpoint.cpp (is_loopback):

	  The "ACE_Sock_Connect" interim pseudo namespace no longer
	  exists.  Use the true "ACE" C++ namespace instead.  Fixes a
	  compile-time error.

Fri Aug 13 23:58:50 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* tao/Thread_Per_Connection_Handler.cpp (svc):

	  The "ACE_Flag_Manip" pseudo namespace no longer exists, and was
	  not meant to be used in the long run in this code.  Use the true
	  "ACE" C++ namespace instead.

Sat Aug 14 03:32:38 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tests/Bug_1904_Regression/test.cpp:

	  Fixed warnings in the daily builds.

Fri Aug 13 11:06:43 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (OpenSSL_st_var):

	  The types used as template parameters for this class template do
	  not inherit from a common base class so there is no need to
	  inherit from TAO_Base_var and declare undefined a TAO_Base_var
	  copy constructor and assignment operator to prevent widening
	  assignments.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.inl (OpenSSL_st_var):

	  Removed TAO_Base_var constructor call from the base member
	  initializer list.  This class no longer inherits from
	  TAO_Base_var.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.h (Current_var):

	  Define this class in terms of the TAO::Pseudo_Var_T class
	  template instead of customized class.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp:

	  Removed the custom TAO::SSLIOP::Current_var class definition.
	  It is no longer needed.

	* orbsvsc/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
	* orbsvsc/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp:
	* orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.cpp:

	  Added missing explicit template instantiations for
	  TAO_Pseudo_Var_T template instances defined in the corresponding
	  headers of these files.  Fixes link-time errors in explicit
	  template instantiation builds.

Fri Aug 13 17:46:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IOR_Parser.h:
          Small doxygen tag improvements

Fri Aug 13 10:25:25 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (OpenSSL_traits):

	  Corrected doxygen documentation for this traits structure.
	  "@struct", not "@class".

Fri Aug 13 10:17:46 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	* orbsvcs/orbsvcs/SSLIOP.mpc:
	  Remove PIDL_Files.  Thanks to Ossama Othman who let me know that
	  ssl_endpoint.pidl needn't be installed.

Fri Aug 13 09:38:24 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h (copy):

	  Corrected function parameter.  It should have been "T const &",
	  not "T *".  This should fix a Borland C++ Builder X compile-time
	  problem.  Interestingly, g++ 3.4.1 did not complain about this
	  problem.

Fri Aug 13 11:10:00 2004  Liang-Jui Shen <ls1@cec.wustl.edu>

        * orbsvcs/orbsvcs/Event/EC_Basic_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Null_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.h:

        My previous check-ins failed the tests. Therefore, I reverted to
        the original version.

Fri Aug 13 09:01:00 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* configure.ac:
	  Update to configure orbsvcs/tests/[A-E]*.

	* orbsvcs/Makefile.am:
	  Update to build tests.

	* orbsvcs/tests/Makefile.am
	* orbsvcs/tests/AVStreams/Makefile.am:
	  Updated.

	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile.am:
	* orbsvcs/tests/AVStreams/Bidirectional_Flows/Makefile.am:
	* orbsvcs/tests/AVStreams/Component_Switching/Makefile.am:
	* orbsvcs/tests/AVStreams/Full_Profile/Makefile.am:
	* orbsvcs/tests/AVStreams/Latency/Makefile.am:
	* orbsvcs/tests/AVStreams/Modify_QoS/Makefile.am:
	* orbsvcs/tests/AVStreams/Multicast/Makefile.am:
	* orbsvcs/tests/AVStreams/Multicast_Full_Profile/Makefile.am:
	* orbsvcs/tests/AVStreams/Multiple_Flows/Makefile.am:
	* orbsvcs/tests/AVStreams/Pluggable/Makefile.am:
	* orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/Makefile.am:
	* orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile.am:
	* orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile.am:
	* orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/Makefile.am:
	* orbsvcs/tests/Bug_1334_Regression/Makefile.am:
	* orbsvcs/tests/Bug_1393_Regression/Makefile.am:
	* orbsvcs/tests/Bug_1395_Regression/Makefile.am:
	* orbsvcs/tests/Bug_1630_Regression/Makefile.am:
	* orbsvcs/tests/Concurrency/Makefile.am:
	* orbsvcs/tests/CosEvent/Makefile.am:
	* orbsvcs/tests/CosEvent/Basic/Makefile.am:
	* orbsvcs/tests/CosEvent/lib/Makefile.am:
	* orbsvcs/tests/EC_Custom_Marshal/Makefile.am:
	* orbsvcs/tests/EC_MT_Mcast/Makefile.am:
	* orbsvcs/tests/EC_Mcast/Makefile.am:
	* orbsvcs/tests/EC_Multiple/Makefile.am:
	* orbsvcs/tests/EC_Throughput/Makefile.am:
	* orbsvcs/tests/Event/Makefile.am:
	* orbsvcs/tests/Event/Basic/Makefile.am:
	* orbsvcs/tests/Event/Mcast/Makefile.am:
	* orbsvcs/tests/Event/Mcast/Common/Makefile.am:
	* orbsvcs/tests/Event/Mcast/Complex/Makefile.am:
	* orbsvcs/tests/Event/Mcast/Simple/Makefile.am:
	* orbsvcs/tests/Event/Mcast/Two_Way/Makefile.am:
	* orbsvcs/tests/Event/Performance/Makefile.am:
	* orbsvcs/tests/Event/lib/Makefile.am:
	  New files, built with a little help from MPC.

Fri Aug 13 09:30:54 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* orbsvcs/tests/ior_corbaname/README:

	  Fixed a typo in the instructions. Thanks to TG <groth dot th at
	  nord-com dot net>.

Fri Aug 13 12:48:48 2004  Simon McQueen  <sm@prismtechnologies.com>

        * TAO_IDL/fe/fe_lookup.cpp (lookup):
          Fixed warning in Linux builds.

        * tests/Bug_1904_Regression/test.mpc:
          Added missing $Id tag.

Fri Aug 13 00:46:24 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	  Update to account for Ossama's SSLIOP changes.

	* configure.ac:
	  Update to configure orbsvcs/performance-tests/*.

	* orbsvcs/Makefile.am:
	  Update to build performance-tests.

	* orbsvcs/performance-tests/Makefile.am:
	* orbsvcs/performance-tests/LoadBalancing/Makefile.am:
	* orbsvcs/performance-tests/LoadBalancing/LBPerf/Makefile.am:
	* orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/TCP_Baseline/Makefile.am:
	* orbsvcs/performance-tests/RTEvent/lib/Makefile.am:
	  New files, built with a little help from MPC.

Thu Aug 12 21:00:22 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	* tao/Makefile.am:
	  Update, with a little help from MPC.

	* orbsvcs/orbsvcs/SSLIOP.mpc:
	* tao/BiDir_GIOP.mpc:
	* tao/Domain.mpc:
	* tao/DynamicAny.mpc:
	* tao/DynamicInterface.mpc:
	* tao/IFR_Client.mpc:
	* tao/IORInterceptor.mpc:
	* tao/IORManipulation.mpc:
	* tao/IORTable.mpc:
	* tao/Messaging.mpc:
	* tao/ObjRefTemplate.mpc:
	* tao/PortableServer.mpc:
	* tao/RTCORBA.mpc:
	* tao/RTPortableServer.mpc:
	* tao/RTScheduler.mpc:
	* tao/SmartProxies.mpc:
	* tao/Strategies.mpc:
	* tao/TypeCodeFactory.mpc:
	* tao/Utils.mpc:
	* tao/Valuetype.mpc:
	* tao/tao.mpc:
	  Use new PIDL_Files custom file type so that *.pidl files are
	  known to MPC.  This will be used by the automake template so
	  *.pidl files are installed.

Thu Aug 12 19:21:25 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP.mpc:

	  Removed SSLIOPS.cpp from the source file list.  No unconstrained
	  interfaces are defined in the SSLIOP.idl IDL file, meaning that
	  there is no need to compile and link the corresponding
	  skeleton file.

Thu Aug 12 18:45:20 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.h

	  Added new OpenSSL "SSL" data structure constructor parameter,
	  and accompanying cached member.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp
	  (ClientCredentials):

	  Initialize new SSL data structure member with given SSL
	  argument.

	  (parent_credentials, client_authentication, integrity):

	  Implemented these methods.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

	  Do not widen the retrieved OwnCredentials pointer to a
	  Credentials pointer.  We really want to retain the narrower
	  interface for later use.  Furthermore, it is more correct to
	  store an OwnCredentials reference in an endpoint rather than one
	  that has been widened to a Credentials reference.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:

	  Cosmetic updates.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current_Impl.cpp
	  (client_credentials):

	  Pass the underlying SSL data structur to the ClientCredentials
	  constructor.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h:

	  The types that were defined in these files are now implemented
	  in terms of the new TAO::SSLIOP::OpenSSL_st_T<> template.
	  Reduces code duplication and maintenance burden.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i:

	  Cache and return an OwnCredentials reference, not a wider
	  Credentials reference.  It is more correct to use the former.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OpenSSL_st_T.inl:

	  New template used to implement a "_var" class for OpenSSL data
	  structures such as "X509, EVP_PKEY" and "SSL".

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.h:

	  Corrected typo in documentation.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_SSL.h:

	  New files containing TAO::SSLIOP::SSL_var typdef and
	  accompanying explicit template instantiations.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.inl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.inl:

	  Removed these files.  They are no longer used.

Thu Aug 12 17:52:36 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (operator==):

	  Cast away the const-ness of the right hand side argument before
	  invoking its non-const cred_type() method.  The method in
	  question doesn't modify the object so doing so is not violating
	  any "immutability contract".  Fixes a compile-time error.

Thu Aug 12 17:51:52 2004  Simon McQueen  <sm@prismtechnologies.com>

        * TAO_IDL/fe/fe_lookup.cpp (lookup):
          Added test for matching string lengths to prevent incorrect
          identification of non-keyword strings as c++ keywords.

          This fixes bugzilla #1904.

        * tests/Bug_1904_Regression/test.cpp:
        * tests/Bug_1904_Regression/test.idl:
        * tests/Bug_1904_Regression/test.mpc:

          Regression test for the above.

Thu Aug 12 11:56:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Transport.cpp:
        * tao/Codeset_Manager.cpp:
          Smaller debug message formatting so that things look the same and
          that it is directly clear where the message is coming from when
          reading a log.

        * tao/IIOP_Transport.cpp (set_bidir_context_info):
          After we retrieved all listen_points check that the list is
          empty, if it is, we really have a problem and we report it.

        * tao/IIOP_Connection_Handler.cpp (process_listen_point_list):
          This method processes the listen_point_list, when we are here we
          should have a list with something in it, when the client has a
          misconfigured DNS, it can be that an empty list is send by the
          client because in TAO_IIOP_Transport::get_listen_point we only
          add endpoints there that match the local address and when we have
          misconfigured this, this check could fail and we could send an
          empty list.

Thu Aug 12 10:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Oneways/server.cpp:
        * tests/Big_Oneways/Session_Control.cpp:
          Added a few more debug lines to the shutdown process, so that we
          can see how far we get when this test fails.

Thu Aug 12 09:36:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/Client_Task.cpp:
        * tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/Server_Task.cpp:
          When catching an exception, tell whether it is in the client or
          server task. When an event loop ends, also tell which loop it is.

Thu Aug 12 09:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/AMI_Buffering/admin.cpp:
        * tests/AMI_Buffering/client.cpp:
        * tests/AMI_Buffering/server.cpp:
          When catching an exception, tell whether it is in the client,
          admin or server.

        * tests/Faults/client.cpp:
        * tests/Faults/middle.cpp:
        * tests/Faults/ping.cpp:
        * tests/Faults/server.cpp:
          When catching an exception, tell whether it is in the client,
          ping, admin or server. When an event loop ends, also tell which
          loop it is.

Wed Aug 11 22:28:47 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* orbsvcs/orbsvcs/CSI.idl:
	* orbsvcs/orbsvcs/CSIIOP.idl:
	* orbsvcs/orbsvcs/SecurityLevel3.idl:

	  Fixed fuzz errors.

Wed Aug 11 18:54:35 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	* tao/Makefile.am:
	  Update, with help from the latest version of automake.mpd.
	  Adds resource files to EXTRA_DIST, and installs *.idl files.

Wed Aug 11 15:34:59 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

	  Remove explicit namespace qualifier from base class constructor
	  call in the base member initializer list due to MSVC++ 6 brain
	  damage.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (operator==):

	  Added missing SSLIOP Credentials attribute checks.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirer.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp:

	  Coding style updates.

Wed Aug 11 14:54:31 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* docs/ORBEndpoint.html:

	  Improved documentation with additional examples and fixed a few
	  typos. Thanks to Jules Colding <jules at tdcadsl dot dk> for
	  motivating this.

Wed Aug 11 09:36:16 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	 * docs/tutorials/Quoter/Event_Service/Quoter_Event_Service.mpc:
	 * docs/tutorials/Quoter/On_Demand_Activation/Quoter_On_Demand_Activation.mpc:
	 * docs/tutorials/Quoter/RT_Event_Service/Quoter_RT_Event_Service.mpc:
	 * docs/tutorials/Quoter/Simple/ImprovedServer/Quoter_Simple_ImprovedServer.mpc:
	 * examples/Load_Balancing_persistent/Load_Balancing_persistent.mpc:
	 * examples/OBV/Typed_Events/Typed_Events.mpc:
	 * examples/POA/Adapter_Activator/POA_Adapter_Activator.mpc:
	 * examples/POA/DSI/POA_DSI.mpc:
	 * examples/POA/Default_Servant/POA_Default_Servant.mpc:
	 * examples/POA/Explicit_Activation/POA_Explicit_Activation.mpc:
	 * examples/POA/FindPOA/POA_FindPOA.mpc:
	 * examples/POA/Forwarding/POA_Forwarding.mpc:
	 * examples/POA/Generic_Servant/POA_Generic_Servant.mpc:
	 * examples/POA/Loader/POA_Loader.mpc:
	 * examples/POA/NewPOA/POA_NewPOA.mpc:
	 * examples/POA/On_Demand_Activation/POA_On_Demand_Activation.mpc:
	 * examples/POA/On_Demand_Loading/POA_On_Demand_Loading.mpc:
	 * examples/POA/POA_BiDir/POA_BiDir.mpc:
	 * examples/POA/Reference_Counted_Servant/Reference_Counted_Servant.mpc:
	 * examples/POA/TIE/POA_TIE.mpc:
	 * examples/Quoter/Quoter.mpc:
	 * examples/TypeCode_Creation/TypeCode_Creation.mpc:
	 * orbsvcs/FT_ReplicationManager/FT_ReplicationManager.mpc:
	 * orbsvcs/LifeCycle_Service/LifeCycle_Service.mpc:
	 * orbsvcs/examples/Notify/Subscribe/Notify_Subscribe.mpc:
	 * orbsvcs/examples/Notify/ThreadPool/Notify_ThreadPool.mpc:
	 * orbsvcs/examples/ORT/ORT.mpc:
	 * orbsvcs/orbsvcs/CosEvent.mpc:
	 * orbsvcs/orbsvcs/CosLoadBalancing.mpc:
	 * orbsvcs/orbsvcs/FaultTolerance.mpc:
	 * orbsvcs/orbsvcs/FtRtEvent.mpc:
	 * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Colocated_Roundtrip.mpc:
	 * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Federated_Roundtrip.mpc:
	 * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/RTCORBA_Baseline.mpc:
	 * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/RTCORBA_Callback.mpc:
	 * orbsvcs/performance-tests/RTEvent/Roundtrip/Roundtrip.mpc:
	 * orbsvcs/performance-tests/RTEvent/TCP_Baseline/TCP_Baseline.mpc:
	 * orbsvcs/performance-tests/RTEvent/lib/RTEC_Perf.mpc:
	 * orbsvcs/tests/Bug_1630_Regression/test.mpc:
	 * orbsvcs/tests/FT_App/FT_App.mpc:
	 * orbsvcs/tests/InterfaceRepo/Application_Test/IFR_Application_Test.mpc:
	 * orbsvcs/tests/InterfaceRepo/IDL3_Test/IFR_IDL3_Test.mpc:
	 * orbsvcs/tests/InterfaceRepo/IFR_Test/IFR_IFR_Test.mpc:
	 * orbsvcs/tests/InterfaceRepo/Persistence_Test/IFR_Persistence_Test.mpc:
	 * orbsvcs/tests/Notify/performance-tests/Filter/Filter.mpc:
	 * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.mpc:
	 * performance-tests/Cubit/TAO/DII_Cubit/DII_Cubit.mpc:
	 * performance-tests/Latency/DII/DII.mpc:
	 * performance-tests/Latency/DSI/DSI.mpc:
	 * performance-tests/Latency/Deferred/Deferred.mpc:
	 * performance-tests/RTCorba/Multiple_Endpoints/Common/Common.mpc:
	 * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/ORB_Per_Priority.mpc:
	 * performance-tests/RTCorba/Oneways/Reliable/Reliable.mpc:
	 * performance-tests/RTCorba/Thread_Pool/Thread_Pool.mpc:
	 * performance-tests/Sequence_Latency/DII/DII.mpc:
	 * performance-tests/Sequence_Latency/DSI/DSI.mpc:
	 * performance-tests/Sequence_Latency/Deferred/Deferred.mpc:
	 * tao/DynamicInterface.mpc:
	 * tests/Bug_1636_Regression/test.mpc:
	 * tests/POA/Default_Servant/Default_Servant.mpc:
	 * tests/POA/MT_Servant_Locator/MT_Servant_Locator.mpc:
	 * tests/RTCORBA/Diffserv/RTCORBA_Diffserv.mpc:
	 * tests/RTCORBA/Explicit_Binding/RTCORBA_Explicit_Binding.mpc:
	 * tests/RTCORBA/Linear_Priority/RTCORBA_Linear_Priority.mpc:
	 * tests/RTCORBA/MT_Client_Protocol_Priority/RTCORBA_MT_Client_Proto_Prio.mpc:
	 * tests/RTCORBA/Persistent_IOR/RTCORBA_Persistent_IOR.mpc:
	 * tests/RTCORBA/Policies/Policies.mpc:
	 * tests/RTCORBA/Policy_Combinations/RTCORBA_Policy_Combinations.mpc:
	 * tests/RTCORBA/Priority_Inversion_With_Bands/Priority_Inversion_With_Bands.mpc:
	 * tests/RTCORBA/Private_Connection/RTCORBA_Private_Connection.mpc:
	 * tests/RTCORBA/Profile_And_Endpoint_Selection/PaE_Selection.mpc:
	 * tests/RTCORBA/Server_Protocol/RTCORBA_Server_Protocol.mpc:
	 * tests/RTCORBA/Thread_Pool/RTCORBA_Thread_Pool.mpc:

	   Changed to inherit from minimum_corba instead of providing
	   avoids statements to eliminate duplicate entries in list.

Wed Aug 11 13:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Oneway_Buffering/admin.cpp:
        * tests/Oneway_Buffering/client.cpp:
        * tests/Oneway_Buffering/server.cpp:
          When catching an exception, tell whether it is in the client,
          admin or server.

Wed Aug 11 09:50:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA.h:
          Updated documentation to doxygen style

Wed Aug 11 09:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/ImplRepo.pidl:
          Updated documentation to doxygen style

Wed Aug 11 07:57:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Basic/Basic.mpc:
        * orbsvcs/tests/Notify/Structured_Filter/Struct_Filter.mpc:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Struct_Multi_Filter.mpc:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.mpc:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.mpc:
          Removed naming as base project, the notifytests base used is also
          based on naming

Tue Aug 10 18:33:30 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* configure.ac:
	* orbsvcs/CosEvent_Service/Makefile.am:
	* orbsvcs/Event_Service/Makefile.am:
	* orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
	* orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
	* orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
	* orbsvcs/FT_ReplicationManager/Makefile.am:
	* orbsvcs/Fault_Detector/Makefile.am:
	* orbsvcs/Fault_Notifier/Makefile.am:
	* orbsvcs/IFR_Service/Makefile.am:
	* orbsvcs/LifeCycle_Service/Makefile.am:
	* orbsvcs/LoadBalancer/Makefile.am:
	* orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
	* orbsvcs/Trading_Service/Makefile.am:
	* orbsvcs/orbsvcs/Makefile.am:
	* tao/Makefile.am:
	  Initial support for user-configurable features (ssl, rt_corba,
	  minimum_corba, etc.) with automake conditionals.  Conditional
	  values are currently hard-coded in configure.ac and will have
	  to be replaced by --with-* and --enable-* options.

Tue Aug 10 17:56:00 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Fixed bug in the inheritance graph traversal algorithm
          that was sometimes failing to enqueue CCMObject and therefore
          also its parents Navigation, Receptacles, and Events. Thanks
          to Matthew Gillen <mgillen@bbn.com> for pointing out
          resulting runtime error in the generated skeleton operation
          table.

        * TAO_IDL/be/be_visitor_arg_traits.cpp:

          Fixed bug where the stub export macro was getting generated
          on the skeleton side.

        * TAO_IDL/be/be_visitor_component/component_sh.cpp:

          Cosmetic changes to source code.

        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:

          Removed generation of collocation classes for abstract interfaces
          in the skeleton header file, since they are not generated in
          the skeleton source file, thus causing a link error. For
          abstract interfaces, all the code related to their operations
          is duplicated in code generation for concrete interfaces
          deriving from them, at least on the skeleton side, so no code
          generation is required on the skeleton side at all for
          abstract interfaces.

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp:

          Fixed a bug in code generation of the copy constructor for
          a valuetype that supports an abstract interface.

Tue Aug 10 13:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/BiDir_GIOP/BiDirPolicy_Validator.h:
          Use unique ifdef defines

Tue Aug 10 12:54:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1476_Regression/Client_Task.cpp:
        * tests/Bug_1476_Regression/Sender_i.h:
          Fixed compile errors with emulated exceptions

Tue Aug 10 10:57:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * NEWS:
          Updated that the fixes for bug 1476 aren't planned anymore but
          will be visible in the x.4.3 release

Tue Aug 10 08:13:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1476_Regression/*:
          New regression test for bug 1476. This tests that when using
          oneways with sync_none policy applied the ORB doesn't block
          on connection establishment. To be able to run this test you
          must have a long connection establishment time, this isn't
          the case on localhost, so run client and server far far from
          away. Because of this, this test isn't able to run in our
          daily builds.

Tue Aug 10 00:41:10 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* utils/nslist/nslist.cpp (display_endpoint_info):

	  Fixed compile-time error.  "CORBA::is_nil()", not
	  "CORBA::Object::is_nil()".

Mon Aug  9 23:31:45 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/PSS/PSDL_Scope.cpp:
	  Change call to ACE_OS::to_lower() to ACE_OS::ace_tolower()
	  to adapt to API change.

Mon Aug  9 17:43:33 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* tao/Utils/Servant_Var.inl:

	  Include "tao/Exception.h" to pull CORBA::Exception declaration.
	  Fixes a compile-time error regarding an incomplete
	  CORBA::Exception type in a catch() statement.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:

	  Renamed TAO::SSLIOP::Credentials class to
	  TAO::SSLIOP_Credentials, i.e. moved it one namespace level up.
	  Brain damaged MSVC++ 6 cannot handle calling base class
	  constructors of classes declared in a nested namespace inside a
	  sub-class base member initializer.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:

	  Updated these sources to refer to the renamed
	  TAO::SSLIOP_Credentials class.

Mon Aug  9 12:16:50 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.cpp:

          Fixed incorrect placement of #if TAO_HAS_INTERCEPTORS == 1
          guard.

Mon Aug  9 15:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.{h,cpp}:
          Updated these files because of the interface changes of the base class

Mon Aug  9 11:51:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        Integration of the fixes for bug 1476. In short, when making oneway
        calls with sync_none policy applied, the ORB shouldn't block, this was
        working for all calls, except for the first call, the connection
        establishment blocked and violated the meaning of sync_none. All changes
        below are there to also don't block on the first call, but just queue
        the messages until the transport is connection. Thanks to Bala for
        helping with this.

        Fri Aug  6 15:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector:
                * tao/SCIOP_Connection:
                * tao/UIOP_Connector:
                * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
                * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
                  As last step in the make_connection register the transport with the
                  reactor when the transport is connected. When it is not connected it
                  will or happen in the Transport_Connector when there the connection
                  is established or in the Transport::post_open when the transport is
                  connected and we have outgoing data.

        Fri Aug  6 15:11:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                * tao/Transport_Connector.cpp (connect):
                  Corrected method name in debug statement

        Fri Aug  6 14:58:18 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/IIOP_Connector.cpp:
                * tao/Transport_Connector.cpp:

                  Test for is_connected () before registration.

        Fri Aug  6 14:11:10 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/IIOP_Connection_Handler.cpp:

                  Cosmetic fix.

                * tao/IIOP_Connector.cpp:

                  Register handler after the caching the transport.

                * tao/Transport.cpp:

                  Register handler if there is a non-empty queue. then call
                  schedule_wakeup (). Added locks to prevents races.

                  Removed locks from format_queue_message (), since I think its
                  not necessary.

                * tao/Transport.inl:

                  Added a lock to is_connected (). This introduces a lock on the
                  critical path. We need to think about this later.

                * tao/Transport_Connector.cpp:

                  Added code to register the handler with the reactor.

        Fri Aug  6 13:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connection_Handler.cpp:
                  Removed duplicate include

                * ace/Thread_Per_Connection_Handler.cpp:
                  Corrected classname in debug statement

        Thu Aug  5 08:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Invocation_Adapter.{h,cpp}:
                  Renamed set_sync_policy to set_response_flags, we are setting
                  the response flags using sync_policy for oneways. Also, when
                  having a twoway set the correct response_flags, this was done
                  later in the twoday invocation, but the response_flags are
                  SYNC_NONE by default, resulting that all twoways used a non
                  blocking connect. By setting the response_flags earlier, the
                  blocked member of the profile transport resolver is set
                  to the correct value

                * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
                  Corrected some errors

                * tao/Transport.cpp:
                  When we are not connected, also purge us from the connection
                  cache. When we are connected, the connection closure will do this
                  but not when we are not connected. Use in recache_transport() the
                  this->purge_entry() call to reduce code duplication

                * tao/IIOP_Connector:
                * tao/SCIOP_Connection:
                * tao/UIOP_Connector:
                * orbsvcs/orbsvcs/SSLIOP_Connector.cpp:
                * orbsvcs/orbsvcs/IIOP_SSL_Connector.cpp:
                  When the connect() calls return -1, only when errno == EWOULDBLOCK
                  we wait for completion, for other errno's we have to set
                  transport to zero, because the transport is not usable in that
                  case and we just don't have a connection then.

        Wed Aug  4 09:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * orbsvs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
                * orbsvs/orbsvcs/SSLIOP/SSLIOP_Connector.{h,cpp}:
                * orbsvs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
                  Updated for changes. These files wheren't added to my original
                  branch and they where recently changed by Ossame, so make a new
                  branch bug1476 on the head, so that I can merge all changes in one
                  action to the main

        Wed Aug  4 09:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                  Fixed typo in debug line

                * tao/IIOP_Connector.h:
                  Added virtual to cancel_svc_handler() to show that this is a virtual
                  method.

                * tao/Strategies/DIOP_Connection_Handler.cpp:
                * tao/Strategies/SCIOP_Connection_Handler.cpp:
                * tao/Strategies/SHMIOP_Connection_Handler.cpp:
                * tao/Strategies/UIOP_Connection_Handler.cpp:
                * tao/Strategies/DIOP_Connector.{h,cpp}:
                * tao/Strategies/SCIOP_Connector.{h,cpp}:
                * tao/Strategies/SHMIOP_Connector.{h,cpp}:
                * tao/Strategies/UIOP_Connector.{h,cpp}:
                  Updated these protocols with all changes we did in the base classes

        Tue Aug  3 11:56:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                  An overview of the changes in the pluggable transport interface
                  which has to be done in all pluggable transports:
                  * Connection_Handler::open(), instead of setting just the id of the
                    transport, call transport::post_open() with the id, this will set
                    the id, mark the transport as connected, register the transport with
                    the reactor and in case there is data in the outgoing queue it
                    will also schedule the transport for output.
                  * Connection_Handler::close(), check the implementation of this
                    method, it should in most cases sufficient to just call
                    this->close_handler().
                  * Connector::make_connection(), check using the profile transport
                    resolver whether to make a blocked connect or non blocked. A non
                    blocked is done when making oneways with sync_none policy applied.
                    In case the connect returns -1 and errno == EWOULDBLOCK use the
                    base method wait_for_connection_completion to wait for the
                    connection to be established. Don't register here anymore the
                    transport with the reactor, this is already done in your derived
                    Connection_Handler::open() by calling the post_open()
                  * Connector::cancel_svc_handler, a new method that must be
                    implemented by each pluggable protocol to cancel the connection
                    handler from the connector.

        Tue Aug  3 09:45:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Remove_Invocation.cpp:
                  Removed debug comment

        Tue Aug  3 09:21:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}:
                * tao/IIOP_Connector.cpp:
                  Changed signature of wait_for_connection_completion, pass transport
                  as *&, so that is can be set to 0 when not usable and return a bool
                  whether succeeded or not.

        Tue Aug  3 08:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.h:
                  Corrected link to pluggable protocols documentation

        Mon Aug  2 18:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  Added wait_for_connection_completion() which now contains the code
                  from connect that handles the waiting until the connection is
                  completed. The only thing is the result value, maybe add a bool as
                  return value and pass Transport by *&, what about that?

                * tao/IIOP_Connector.cpp:
                  Use the new Transport_Connector::wait_for_connection_completion
                  instead of doing everything here again

        Mon Aug  2 13:52:27 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Transport_Connector.cpp (connect):

                  Left some comments for Johnny.

        Mon Aug  2 09:45:36 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.h:
                  Added a todo that event_handler_i has to be renamed to event_handler

                * tao/Transport.cpp (send_message_shared_i):
                  Use ACE_ERROR for a fatal message instead of a debug

        Mon Aug  2 09:16:36 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp (connect):
                  Refactored this method so that checking for errors is easier, seems
                  to me that part of this method can be factored out again and can
                  then also be called from IIOP_Connector::make_connection(). Added
                  some remarks for Bala, in case we do a wait of zero on a non
                  blocking connection, how to handle any return value?

        Mon Aug  2 07:54:36 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Changed the result value type of post_open from int to bool. In case
                  registration succeeds and we have data in our outgoing queue,
                  schedule ourselves for output.

                * tao/IIOP_Connection_Handler.cpp:
                  Check the result value of post_open. In case this fails, we return
                  -1, the setting of the state to success, is now moved after the
                  post_open.

                * tao/IIOP_Connector.cpp:
                  Added a comment for Bala. Only call check_connection_closure when
                  wait return -1.

                * tao/Transport_Connector.{h,cpp}:
                  Only when wait fails call check_connection_closure. Removed the
                  result argument from this method, the caller should only call this
                  when wait returns -1, clarified the return value meaning. Removed
                  the printing of errno when connection establishment fails, shouldn't
                  we do the same in TAO_IIOP_Connector::make_connection()?

                  Not all comments of Bala below are handled yet, handling
                  of connection failures must still be improved.

        Mon Aug  2 03:40:36 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Transport_Connector.cpp:

                  Fixed a logic error and added a few comments for Johnny.

                * tao/IIOP_Connection_Handler.cpp:
                * tao/IIOP_Connector.cpp:
                * tao/Transport.cpp:
                * tao/Transport_Connector.h:

                  More comments for Johnny.

        Fri Jul 30 10:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.cpp:
                * tao/Transport_Connector.cpp:
                * tao/IIOP_Connector.cpp:
                  Added some comments, removed commented out code

                * tao/IIOP_Connection_Handler.cpp:
                  Removed not needed include which I added during my changes but is
                  now not needed anymore

                * tao/Invocation_Endpoint_Selectors.cpp:
                  Removed comments and changed the logic of selecting an endpoint, if
                  one isn't usable not break but try the next.

        Thu Jul 29 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  Removed not needed include

        Thu Jul 29 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Renamed set_connected to post_open, we do much more then just
                  setting a property. When the transport is connected we register
                  ourselves with the reactor. In case of failure we close the
                  connection. The thing to check is whether it is safe to assume that
                  we are also in the transport cache

                * tao/Transport_Connector.{h,cpp}:
                  Removed register_transport() because the transport register itselves
                  now. Also removed the calls to register_transport, we don't have to
                  register the transport as connector anymore, the transport does
                  that.

                * tao/IIOP_Connector.cpp (make_connection):
                  Removed the registration of the transport with the reactor, see
                  above. Use a ACE_Event_Handler_var to make sure that we always do
                  a remove reference on the connection handler.

                * tao/IIOP_Connection_Handler.cpp (open):
                  Call transport::post_open instead of set_connected

        Thu Jul 29 10:00:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.cpp (set_connected):
                  Commented out schedule_output, this doesn't work, have to think
                  about something else

                * tao/Transport_Connector.cpp (connect):
                  When we get a connected transport out of the transport cache it can
                  happen that another thread drove the reactor and set the transport
                  to connected, but then it is not registered with the reactor, so add
                  a check here that when we get a connected transport and it is not
                  registered it yet, register it.

                  In case we get a setup where the connection_handler::open() could
                  safely register it, we could remove the checks above.

        Thu Jul 29 08:44:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp (connect):
                  Added more error handling to handle situations where connections
                  can't be established

        Wed Jul 28 15:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}
                  Added pure virtual cancel_svc_handler() method which must be
                  implemented by derived connectors to cancel the passed svc_handler
                  with their base connector, the cancel on the base_connector must
                  have derived connection handler, so we just can't do it in the base.
                  Another option would be to make Transport_Connector a template which
                  gets the connection handler type as template argument.
                  Added also check_connection_closure, which is now generic and can
                  also be used from the connect() call.

                * tao/IIOP_Connector.{h,cpp}:
                  Implemented the cancel_svc_handler() and removed the
                  check_connection_closure() because it is now in the base.

        Tue Jul 27 18:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Connection_Handler.{h,cpp}:
                  Added virtual close_handler() method, this will be called the the
                  Transport_Connector and derived classes if they want to close the
                  connection_handler, the default implementation changes the LF state
                  to closed and removes a reference from the transport

                * tao/IIOP_Connection_Handler.cpp (close):
                  Instead of modifing the LF state and removing a reference from the
                  transport, just call this->close_handler(), this calls the
                  Connection_Handler::close_handler().

                  With this we can close handlers in a generic way from the
                  Transport_Connectors.

                  When we would move a template class between
                  the ACE_Svc_Handler template and the derived connection handlers,
                  this extra template could implement the close method in a generic
                  way, this would reduce the footprint a little.

                * tao/IIO_Connector.cpp:
                  Moved docu to the correct place

        Tue Jul 27 17:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connection_Handler.cpp:
                  Instead of modifying the transport in several steps, just call
                  set_connected which will do all work.

                * tao/Transport.{h,cpp,inl}:
                  Removed the is_connected accessor, made a set_connected, which will
                  set the id, set the connected_ bool and will schedule an output
                  when the queue is not empty

        Tue Jul 27 12:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                * tao/Synch_Invocation.cpp:
                  Renamed queue_message to format_queue_message

        Tue Jul 27 12:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Added out_stream() which returns the out_stream from the
                  messaging_object, this way the invocation classes don't need to use
                  messaging_object anymore, just get the stream from the transport

                * tao/Synch_Invocation.cpp:
                * tao/Messaging/Asynch_Invocation.cpp:
                * tao/LocateRequest_Invocation.cpp:
                  Instead of getting the out_stream from the messaging_object which is
                  retrieved from the transport, get it from the transport. This way we
                  don't have to include tao/Pluggable_Messaging.h

        Tue Jul 27 08:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}:
                  Factered out the registration of the transport into
                  register_transport()

        Tue Jul 27 07:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Sync_Invocation.cpp:
                * tao/Transport.{h,cpp}:
                  Changed queue_message so that transport does the formatting

        Tue Jul 27 02:47:18 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Synch_Invocation.cpp:

                  Left some comments for Johnny.

        Mon Jul 26 13:48:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Synch_Invocation.cpp (remote_oneway):
                  When queueing the message, stream it first else we just queue no
                  message contents. The only question is how to handle the failure
                  of the streaming

        Mon Jul 26 13:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Moved cleaning up the queue out of destruction and
                  send_connection_closed_notifications_i annd into the new method
                  cleanup_queue_i which is called from these places

                * tao/IIOP_Connection_Handler.cpp:
                  Marked the transport as connected after we changed the state to
                  success

                * tao/IIOP_Connector.cpp:
                  We have to handle the timeout of wait, made an implementation, but
                  with a remark to Bala to check this, not sure if this is the correct
                  way todo.

        Mon Jul 26 11:38:41 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Transport.cpp (TAO_Transport):

                  Left a comment for Johnny.

        Mon Jul 26 11:04:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Invocation_Adapter.cpp:
                  Check for blocked or not blocked connection was wrong

                * tao/Transport_Connector.cpp:
                  Corrected debug statement

        Mon Jul 26 09:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.cpp:
                  In case we destruct a not connected transport it can happen that
                  we have queued messages, zap these then from memory, we just can't
                  deliver them.

        Sat Jul 24 18:08:13 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

                * tao/Connect_Strategy.h:

                  Added a new wait () method which takes in a transport.

                * tao/Blocked_Connect_Strategy.cpp:
                * tao/Blocked_Connect_Strategy.h:

                  Provided a default implementation for the new wait () method.

                * tao/LF_Connect_Strategy.cpp:
                * tao/LF_Connect_Strategy.h:
                * tao/Reactive_Connect_Strategy.cpp:
                * tao/Reactive_Connect_Strategy.h:

                  Provided an implementation of the new wait () method.

                * tao/Invocation_Adapter.h:

                  Changed the setup_operation_details_i () to set_syncscope_policy
                  () since that is what it does.

                * tao/Invocation_Adapter.cpp:

                  Changed the operation name in the implementation of the above
                  method. Did a bunch of cosmetic changes to keep the line lengths
                  smaller.

                * tao/Profile_Transport_Resolver.h:
                * tao/Profile_Transport_Resolver.inl:

                  Changed the name of the connected () method as blocked
                  (). Improved const correctness so that the blocked_ data member
                  is const.

                * tao/Invocation_Endpoint_Selectors.cpp:

                  Use TAO::ProfileTransportResolver::blocked () instead of
                  TAO::ProfileTransportResolver::connected ().

                * tao/Transport_Connector.cpp:
                * tao/IIOP_Connector.cpp:

                  Made a bunch of changes to improve readability of the code. Left
                  a couple of questions for Johnny. There are a few more things
                  that need to be addressed here.

        Fri Jul 22 09:54:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                  Call the check_connection_closure only when we want to have a
                  connected transport, for the non-blocking case we have to do
                  something else because the return value of -1 doesn't mean there
                  always the we have a problem just establishing this connection.

                * tao/IIOP_Connector.{h,cpp} (check_connection_closure):
                  Changed method signature to have a return value

        Fri Jul 22 09:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp (connect):
                  When getting a transport out of the cache, print out whether it is
                  connected or not

        Thu Jul 21 15:03:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                  Use timeout to change the sync_options, this way we don't change
                  the bitmask

        Thu Jul 21 14:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/ORB_Core.h:
                  Removed the transport_cache accessor method, it was just declared
                  and not implemented, the ORB_Core know nothing about this

        Thu Jul 21 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  In case we have a not connected transport we should look if we need
                  to deliver a connected transport or not and behave accordingly to it

        Wed Jul 20 15:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/TAO_Server_Request.cpp:
                  Updated all ACE_DEBUG and ACE_ERROR macros so that the formatting of
                  messages is the same as in the rest of TAO. This makes reading the
                  logfiles much easier.

        Wed Jul 20 14:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp (make_connection):
                  Removed commented out code and only check for registration errors
                  when we are calling the register_handler().

        Wed Jul 20 11:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.cpp:
                  Changed some remarks, some are not valid, some need some more
                  clarification

                * tao/IIOP_Connector.{h,cpp}:
                  Moved the handling of connection closure to a new separate method
                  check_connection_closure(). This contains code original in
                  make_connection(). This code is dependent on the type of tranport
                  used, so it can't move into the base class.

        Thu Jul  8 14:50:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connection_Handler.cpp (open):
                  Set the transport to connected here. We should refactor the last
                  lines of this method, these lines are copied in each different type
                  of connection_handler.

                * tao/IIOP_Connector.cpp:
                  Removed not needed code, just us is_connected() on the transport.
                  Made a remark with the registration of the wait_strategy, do we need
                  to do this here?

                * tao/Transport_Connector.cpp:
                  Use the transport->is_connected() instead of the wait of the result.

                  Thanks to Bala for getting me on the right track.

        Thu Jul  8 13:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                * tao/Transport_Connector.cpp:
                  Some changes to handle the wait, but things are still not correct

                * tao/Transport.cpp:
                  Initialize is_connected+ to false

        Thu Jul  8 11:58:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                  Added some test code for how the handle the wait result value

                * tao/Transport_Connector.cpp:
                  Added more logic what to do when a not connected transport is
                  retrieved

        Mon Jul  5 12:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Removed commented out method in the header file and give purge_entry
                  a return value, so that we can check for failure.

        Mon Jul  5 12:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/IIOP_Connector.cpp:
                * tao/Transport_Connector.cpp:
                * tao/Profile_Transport_Resolver.cpp:
                  Added some documentation and added some question to some code parts
                  to be sure that we check this

        Fri Jul  2 11:32:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Invocation_Adapter.{h,cpp}:
                  Added setup_operation_details_i() which will setup the operation
                  details and determine whether we want to block until a connection
                  is ready or not, this removes duplicated code and we ony determine
                  the settings once in the invocation path.

        Thu Jul  1 12:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport_Connector.{h,cpp}:
                  Removed the block argument from the make_connection and connect
                  method again, if we should get a connected transport or not can be
                  retrieved from the ProfileTransportResolver

                * tao/Transport_Connector.cpp:
                  In case we get a transport from the cache that is not connected,
                  call wait with zero time. We have to add more functionality here
                  to handle the closing of that transport, and check the
                  implementation what we do when we can't register the wait strategy
                  with the reactor

                * tao/IIOP_Connector.{h,cpp}:
                  Added better handling of blocking or non-blocking connects.

        Thu Jul  1 10:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,inl}:
                  Added connection_handler accessor function and made
                  connetion_handler_i protected again

                * tao/Transport_Connector.cpp:
                  Use Transport::connection_handler instead of the _i version.

        Wed Jun 30 14:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Profile_Transport_Resolver.{h,cpp,i}:
                  Instead of passed with each operation whether the connect should
                  block or not, we now pass a boolean with the constructor if this
                  tranport must deliver a connected transport or whether it is also
                  allowed to deliver a not connected transport. Added an accessor for
                  this member.

                * tao/Invocation_Adapter.cpp:
                * tao/Invocation_Endpoint_Selectors.{h,cpp}:
                * tao/LocateRequest_Invocation_Adapter.cpp:
                  Instead of passing the block boolean with each operation, pass it
                  with the constructor or the Profile_Transport_Resolver.

        Wed Jun 30 10:19:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Synch_Invocation (remote_oneway):
                  At the top of the method we check for sync with server or sync with
                  target. In case of this we do a twoway. I don't see any reason why
                  lower in the method we check another time for sync with server, so
                  removed that check. Changed the calling of
                  Synch_Twoway_Invocation::remote_twoway(), so that we check for
                  exceptions in case of emulated exception macros. Add transport local
                  variable, so that we don't need to get it several times in one
                  method call.

                * tao/Transport.cpp (send_message_shared_i):
                  Removed queueing, it should be here, added some comments that the
                  code checking for twoways or replies should go out of here. This
                  class also got the new methods queue_message and queue_message_i
                  when it was created as branch.

        Tue Jun 20 10:10:10 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

                * tao/Transport.{h,cpp}:
                  Added queue_message and queue_message_i to be able to queue a
                  message from the outside, use this method also internally.
                  Added connected_ member and accessors to indicate whether this
                  transport is connected or not

                * tao/LocateRequest_Invocation_Adapter.cpp:
                  We use the Profile_Transport_Resolver here, assume that we always
                  need to get a connected transport

Mon Aug  9 09:29:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Buffer_Allocator_T.h:
          Added missing access control specifier public for the base class

Sat Aug  7 23:06:41 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	  Changed to introduce an intermediate dependency between the IDL
	  sources and generated output files so that only one instance of
	  tao_idl is spawned per input file with parallel make.

Sat Aug  7 18:08:51 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* utils/catior/catior.cpp:

	  Removed direct inclusion of <ctype.h>. This file already
	  includes ace/os_include/os_ctype.h. If LynxOS has problems, then
	  the problem is elsewhere.

	* utils/nslist/nslist.cpp:

	  Used Object::is_nil () instead of _nil ().

Fri Aug  6 15:44:50 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/TAO_Service/Makefile.am:
	  New file.

Fri Aug  6 12:51:33 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Argument.cpp:
        * tao/Argument.h:
        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/BD_String_SArgument_T.cpp:
        * tao/BD_String_SArgument_T.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/Basic_SArgument_T.cpp:
        * tao/Basic_SArgument_T.h:
        * tao/DomainC.cpp:
        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Array_Argument_T.h:
        * tao/Fixed_Array_SArgument_T.cpp:
        * tao/Fixed_Array_SArgument_T.h:
        * tao/Fixed_Size_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.h:
        * tao/Fixed_Size_SArgument_T.cpp:
        * tao/Fixed_Size_SArgument_T.h:
        * tao/Object_Argument_T.cpp:
        * tao/Object_Argument_T.h:
        * tao/Object_SArgument_T.cpp:
        * tao/Object_SArgument_T.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/Special_Basic_SArgument_T.cpp:
        * tao/Special_Basic_SArgument_T.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_SArgument_T.cpp:
        * tao/UB_String_SArgument_T.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:
        * tao/Var_Array_SArgument_T.cpp:
        * tao/Var_Array_SArgument_T.h:
        * tao/Var_Size_Argument_T.cpp:
        * tao/Var_Size_Argument_T.h:
        * tao/Var_Size_SArgument_T.cpp:
        * tao/Var_Size_SArgument_T.h:
        * tao/operation_details.cpp:
        * tao/operation_details.h:
        * tao/DynamicInterface/DII_Invocation.cpp:

          Added TAO_HAS_INTERCEPTORS == 1 guards to all interceptor-related
          operations, so code generated from IDL operations will compile
          if Any operators (used by interceptors) are suppressed in code
          generation. Thanks to Nicolas HUYNH <HUYNH_Nicolas at cena dot fr>
          for reporting the problem.

Fri Aug  6 15:45:00 UTC 2004  Simon Massey  <simon.massey@prismtechnologies.com>

        * TAO/utils/catior/catior.cpp
          Added #include <ctype.h> required for Lynxos cross build.

Fri Aug  6 08:05:25 2004  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* orbsvcs/orbsvcs/Log/LogMgr_i.cpp (TAO_LogMgr_i): Initialize
	  max_id_ to 0.  Thanks to Thomas Girard <thomas.g.girard@free.fr>
 	  for reporting this.

	* orbsvcs/orbsvcs/Log/NotifyLogFactory_i.cpp (create_with_id):
	  Duplidate object references before putting them in the hash map.
  	  Thanks to Thomas Girard <thomas.g.girard@free.fr> for this fix.

Fri Aug  6 12:16:35 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* utils/nslist/nslist.cpp:

	  Fixed a core dump with the Object is _nil (). Thanks to Tufan
	  Oruk <toruk at usa dot net> for the patch.

Thu Aug  5 23:42:02 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/ec_typed_events.mpb:
	  Changed to inherit from dynamicinterface and ifr_client instead
	  of providing libs and after statements so that dependency chain
	  is complete.

Thu Aug  5 20:20:37 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	  Changed custom build rules to use $(srcdir)/<input-file> so
	  resulting makefiles will work on systems where make doesn't
	  support VPATH.

Thu Aug  5 07:08:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/PluggableUDP/tests/Performance/run_test.pl:
          The client also has a servant, so we must specifiy also an
          -ORBEndPoint for the client process. This fixes bugzilla bug
          1899.

Thu Aug  5 07:01:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/PluggableUDP/tests/Performance/run_test.pl:
          Updated this script to use the PerlACE module, simplifies this
          script a lot.

Wed Aug  4 23:03:45 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (Credentials):

	  Older versions of OpenSSL didn't define the OpenSSL macro.  Use
	  CRYPTO_free if OPENSSL_free isn't defined.

Wed Aug  4 22:13:19 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.cpp
	  (register_acquirer_factory):

	  Release the String_var containing the acquisition method Id once
	  the factory is successfully registered.  Memory management
	  becomes the responsiblity of the CredentialsCurator.  Fixes a
	  double deletion error.

Wed Aug  4 21:23:52 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* tao/IIOP_Acceptor.h (BASE_ACCEPTOR, CREATION_STRATEGY):
	  (CONCURRENCY_STRATEGY, ACCEPT_STRATEGY):
	* tao/IIOP_Acceptor.cpp:

	  Removed the "TAO_IIOP_" prefix from these typedefs.  It was
	  redundant since these typedefs are already encapsulated within
	  the TAO_IIOP_Acceptor class.

	* tao/ORB_Table.cpp (get_orbs):

	  Minor TAO coding convention update.

Wed Aug  4 21:16:42 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.cpp
	  (ClientCredentials):
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.cpp
	  (OwnCredentials):
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp
	  (TargetCredentials):

	  Explicitly qualify the namespace to which the Credentials base
	  class belongs to work around MSVC++ 6 namespace brain damage.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (open, close):
	  (iiop_connect):

	  Wrap calls to TAO::IIOP_SSL_Connector base class methods with
	  the ACE_NESTED_CLASS macro to work around MSVC++ 6 namespace
	  brain damage.

Wed Aug  4 15:48:06 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

	* TAO_IDL/be/be_global.cpp (destroy):
	* TAO_IDL/driver/drv_preproc.cpp (DRV_cpp_init):

	  Fixed memory leaks.

Wed Aug  4 14:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Security/MT_IIOP_SSL/run_test.pl:
          This test uses multiple clients, when a client timeouts, report
          which client this is.

Wed Aug  4 07:17:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/AMH/Sink_Server/Timer_Handler.h:
        * examples/AMH/Sink_Server/Client_Task.cpp:
          Removed old comments that just shouldn't be in the code anymore

Tue Aug  3 17:08:38 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	  Removed duplicate rules for building CosEventComm and
	  CosEventChannelAdmin IDL files.
	  Changed to not install headers, at least for the time
	  being.

	* orbsvcs/FTRT_Event_Service/Makefile.am:
	* orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
	* orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
	* orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
	* orbsvcs/FT_ReplicationManager/Makefile.am:
	* orbsvcs/Fault_Detector/Makefile.am:
	* orbsvcs/Fault_Notifier/Makefile.am:
	* orbsvcs/LoadBalancer/Makefile.am:
	* orbsvcs/Logging_Service/Makefile.am:
	* orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
	* orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
	* orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
	* orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:
	* orbsvcs/Notify_Service/Makefile.am:
	  New file.

	* orbsvcs/Concurrency_Service/Makefile.am:
	* orbsvcs/CosEvent_Service/Makefile.am:
	* orbsvcs/Dump_Schedule/Makefile.am:
	* orbsvcs/Event_Service/Makefile.am:
	* orbsvcs/IFR_Service/Makefile.am:
	* orbsvcs/LifeCycle_Service/Makefile.am:
	* orbsvcs/Naming_Service/Makefile.am:
	* orbsvcs/Scheduling_Service/Makefile.am:
	* orbsvcs/Time_Service/Makefile.am:
	* orbsvcs/Trading_Service/Makefile.am:
	  Update, with a little help from MPC.

	* orbsvcs/Makefile.am:
	  Added Concurrency, CosEvent, Dump Schedule, Event, Fault
	  Detector, Fault Notifier, FT Replication Manager, FTRT Event,
	  IFR, LifeCycle, Load Balancer, Logging, Naming, Notify,
	  Scheduling, Time, and Trading services to list of SUBDIRS.

	* configure.ac:
	  Added Concurrency, CosEvent, Dump Schedule, Event, Fault
	  Detector, Fault Notifier, FT Replication Manager, FTRT Event,
	  IFR, LifeCycle, Load Balancer, Logging, Naming, Notify,
	  Scheduling, Time, and Trading service Makefile.am's to list of
	  config files.

Tue Aug  3 16:32:56 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Made the checking more strict for enqueueing abstract
          interfaces to an internally used list - abstract
          valuetypes and eventtypes were also getting put on it,
          leading to generated code that wouldn't compile. Thanks to
          Will Otte <wotte@dre.vanderbilt.edu> for pointing out
          the problem.

Tue Aug  3 13:10:04 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/Makefile.am:
	  Update, with a little help from MPC.

	* orbsvcs/Makefile.am:
	  Added orbsvcs to list of SUBDIRS.

	* configure.ac:
	  Added orbsvcs/orbsvcs/Makefile to list of config files.

Tue Aug  3 08:05:20 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/PSS/PSDL_Datastore.cpp:
	  Fixed TAO_PSDL_Datastore::create_index_helper() where the
	  ACE_NEW_RETURN macro was being ab/used for placement new.
	  This caused problems for targets w/ACE_HAS_NOTHROW_NEW.
	  I eliminated the error checks because this function can
	  never called with a bad buffer pointer.

	* orbsvcs/PSS/Makefile.am:
	  New file.

	* orbsvcs/Makefile.am:
	  Update with current MPC generated file, but enable only
	  PSS and TAO_Service in SUBDIRS.

	* Makefile.am:
	  Added orbsvcs to SUBDIRS.

	* configure.ac:
	  Added orbsvcs/{,PSS/,TAO_Service/}Makefile to list of
	  config files.

Tue Aug  3 13:47:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.{h,cpp}:
          Corrected the method name for decrementing the reference count
          from decr_refcount to _remove_ref. The AMH Response Handler is
          derived from TAO_Local_RefCounted_Object and this defines the
          virtual method _remove_ref, we now had two methods where the
          base method didn't know anything of the allocator. By overruling
          we also get the derived _remove_ref and use the allocator
          when needed. This fixes the crashing of the AMH Sink_Server
          example in our daily builds.

Tue Aug  3 08:34:53 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/IFR_Service/be_extern.h:
        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/IFR_Service/be_init.cpp:

          Changes corresponding to those in TAO_IDL_BE, made in

          Sun Aug  1 20:57:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

Mon Aug  2 14:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.cpp:
          Removed incorrect ACE_INLINE, fixes linker errors in the builds

Mon Aug  2 08:40:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Collocated_Invocation.h:
          Doxygen fix

Mon Aug  2 07:59:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Cache_Manager.cpp (is_entry_idle):
          Corrected method name in debug statement and instead of retrieving
          the recycle_state three times, get it into a local variable and use
          that for checking.

Mon Aug  2 06:46:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Security/MT_IIOP_SSL/test_i.cpp:
          Fixed compile error due to SSLIOP Transport name change

Sun Aug  1 23:41:50 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* tao/Makefile.am:
	  Update after last change.  Fixes "make install" failure due to
	  bad dependencies.

Mon Aug  2 06:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AMH_Response_Handler.{h,cpp}:
          Changed this class so that AMH Response Handlers can be allocated
          with an allocator and when the reference count reaches zero we
          look if we have an allocator, if so, release from the allocator,
          else just delete

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/tmplinst_ss.cpp:
          Changed the generation of the allocation of the AMH Response
          Handler so that we use an allocator.

Mon Aug  2 06:10:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/Active_Object_Map.h:
          Doxygen improvement

Sun Aug  1 22:39:44 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* tao/BiDir_GIOP.mpc:
	* tao/Domain.mpc:
	* tao/DynamicAny.mpc:
	* tao/DynamicInterface.mpc:
	* tao/IFR_Client.mpc:
	* tao/IORInterceptor.mpc:
	* tao/IORManipulation.mpc:
	* tao/IORTable.mpc:
	* tao/Messaging.mpc:
	* tao/ObjRefTemplate.mpc:
	* tao/PortableServer.mpc:
	* tao/RTCORBA.mpc:
	* tao/RTPortableServer.mpc:
	* tao/RTScheduler.mpc:
	* tao/SmartProxies.mpc:
	* tao/Strategies.mpc:
	* tao/TypeCodeFactory.mpc:
	* tao/Utils.mpc:
	* tao/Valuetype.mpc:
	  Fix thinko.  When these files were moved from subdirectories, I
	  first merged them into tao.mpc, which required explicit project
	  names.  I didn't realize at that time that the precise name was
	  significant.  This caused build failures due to bad dependencies.
	  I've removed the explicit names since the projects have been
	  split back into separate project files.

Sun Aug  1 21:05:59 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* TAO_IDL/Makefile.am:
	  Add _LDFLAGS definitions with -version-number flag for FE and BE
	  libraries.

	* tao/Makefile.am:
	  Update, with a little help from MPC.

	* Makefile.am:
	  Update.

	* configure.ac:
	  Added.  First cut at a new configure script with bits taken from
	  ACE's configure.ac and the old TAO configure.in in the CVS Attic.

Sun Aug  1 20:57:32 2004  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/tao_idl.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_home.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/be/be_init.cpp:
        * TAO_IDL/be_include/be_extern.h:
        * TAO_IDL/include/idl_defines.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          - Fixed bugs in cleanup between iterations in processing eacj IDL
            file in the list passed on the command line.

          - Fixed bug in checking for recursive types.

          - Fixed bug in eager calculation of the version segment of the
            repository ID.

          - Fixed bug in checking number of interfaces supported by a home.

          - Added markers in existing bit vector to keep track of which
            sequences of basic types have been referenced, and code to
            update the markers.

Sun Aug  1 16:32:56 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* TAO_IDL/Makefile.am:
	  Update, with a little help from MPC.

	* TAO_IDL/ast/Makefile.am:
	* TAO_IDL/be/Makefile.am:
	* TAO_IDL/be_include/Makefile.am:
	* TAO_IDL/driver/Makefile.am:
	* TAO_IDL/fe/Makefile.am:
	* TAO_IDL/include/Makefile.am:
	* TAO_IDL/narrow/Makefile.am:
	* TAO_IDL/util/Makefile.am:
	  Remove stale Makefile.am's.

Sun Aug  1 09:48:46 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* tao/BiDir_GIOP/BiDir_GIOP.mpc:
	* tao/Domain/Domain.mpc:
	* tao/DynamicAny/DynamicAny.mpc:
	* tao/DynamicInterface/DynamicInterface.mpc:
	* tao/IFR_Client/IFR_Client.mpc:
	* tao/IORInterceptor/IORInterceptor.mpc:
	* tao/IORManipulation/IORManipulation.mpc:
	* tao/IORTable/IORTable.mpc:
	* tao/Messaging/Messaging.mpc:
	* tao/ObjRefTemplate/ObjRefTemplate.mpc:
	* tao/PortableServer/PortableServer.mpc:
	* tao/RTCORBA/RTCORBA.mpc:
	* tao/RTPortableServer/RTPortableServer.mpc:
	* tao/RTScheduling/RTScheduler.mpc:
	* tao/SmartProxies/SmartProxies.mpc:
	* tao/Strategies/Strategies.mpc:
	* tao/TypeCodeFactory/TypeCodeFactory.mpc:
	* tao/Utils/Utils.mpc:
	* tao/Valuetype/Valuetype.mpc:
	  Move from here...

	* tao/BiDir_GIOP.mpc:
	* tao/Domain.mpc:
	* tao/DynamicAny.mpc:
	* tao/DynamicInterface.mpc:
	* tao/IFR_Client.mpc:
	* tao/IORInterceptor.mpc:
	* tao/IORManipulation.mpc:
	* tao/IORTable.mpc:
	* tao/Messaging.mpc:
	* tao/ObjRefTemplate.mpc:
	* tao/PortableServer.mpc:
	* tao/RTCORBA.mpc:
	* tao/RTPortableServer.mpc:
	* tao/RTScheduler.mpc:
	* tao/SmartProxies.mpc:
	* tao/Strategies.mpc:
	* tao/TypeCodeFactory.mpc:
	* tao/Utils.mpc:
	* tao/Valuetype.mpc:
	  ...to here.  Adapt as necessary to find source, inline, and
	  template files.

Sun Aug  1 17:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/QtTests/server.cpp:
          Added missing include

Sun Aug  1 17:07:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/RTCORBA/Banded_Connections/server.cpp:
          When we get an exception, an internal corba error is handled
          to look if it is an permission error and a specific minor code
          is set, this fails on HPUX and then the test just uses ACE_ASSERT,
          added some more code to get some specific feedback what the
          retrieved minor code from the exception is

Sun Aug  1 08:53:48 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* tao/tao.mpc:
	  Updated Header_Files, Inline_Files, and Template_Files so that
	  generated project files will contain complete list for install.
	  Suggested by Chad Elliot <elliot_c@ociweb.com>.

Sun Aug  1 15:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.cpp:
          Fixed conversion warning by adding missing .in()

Sun Aug  1 15:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security/SL3_SecurityCurrent_Impl.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ClientCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirer.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirerFactory.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_OwnCredentials.h:
        * orbsvcs/orbsvcs/Security/SL3_CredentialsAcquirerFactory.h:
        * orbsvcs/orbsvcs/Security/SL3_CredentialsCurator.h:
        * orbsvcs/orbsvcs/Security/SL3_SecurityCurrent.h:
          Fixed fuzz errors

Sun Aug  1 15:27:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Wait_Strategy.h:
        * tao/Strategies/SCIOP_Transport.h:
        * tao/Valuetype/AbstractBase.h:
          Doxygen improvement

        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.h:
          Removed not needed forward declarations

        * orbsvcs/examples/LoadBalancing/RPS_Monitor.cpp:
        * orbsvcs/examples/Log/Basic/TLS_Client.cpp:
        * orbsvcs/examples/Log/Event/Event_Supplier.cpp:
        * orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:
        * orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:
          Fixed vc71 conversion warnings

Sun Aug  1 08:16:27 2004  J.T. Conklin  <jtc@acorntoolworks.com>

	* orbsvcs/orbsvcs/FtRtEvent.mpc:
	  Changed ftrtec_export.h to FtRtEvent/EventChannel/ftrtec_export.h
	  in Header_Files.

	* tao/tao.mpc:
	* orbsvcs/performance-tests/RTEvent/lib/RTEC_Perf.mpc:
	  Removed Auto_Functor.cpp from Template_Files.

	* TAO_IDL/tao_idl.1: Update to reflect current file extensions.

	* orbsvcs/orbsvcs/DsEventLogAdmin.mpc:
	  Changed group name from EventLog to DsEventLogAdmin.

	* orbsvcs/orbsvcs/DsLogAdmin.mpc:
	  Changed group name from Log to DsLogAdmin.

	* orbsvcs/orbsvcs/DsNotifyLogAdmin.mpc:
	  Changed group name from Log to DsNotifyLogAdmin.

Sun Aug  1 09:10:39 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* ChangeLogs/ChangeLog-04a:

	  Moved the contents to the new directory.

Sat Jul 31 11:14:00 2004  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * TAO version 1.4.2 released.

Local Variables:
add-log-time-format: current-time-string
End:
