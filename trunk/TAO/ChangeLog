Tue Oct 28 22:22:29 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/FT_ORB.dsp:

          Updated project file list.

        * orbsvcs/orbsvcs/FaultTolerance/FT_ServerRequest_Interceptor.cpp:

          Added include of tao/Typecode.h.

        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp:

          Replaced instances of TAO_INVOKE_EXCEPTION with
          TAO::TAO_INVOKE_SYSTEM_EXCEPTION.

Tue Oct 28 22:12:23 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* performance-tests/RTCorba/Multiple_Endpoints/Common/Makefile:
	* docs/tutorials/Quoter/AMI/Makefile:
	* docs/tutorials/Quoter/Event_Service/Makefile:
	* docs/tutorials/Quoter/Naming_Service/Makefile:
	* docs/tutorials/Quoter/On_Demand_Activation/Makefile:
	* docs/tutorials/Quoter/RT_Event_Service/Makefile:
	* docs/tutorials/Quoter/Simple/Client/Makefile:
	* docs/tutorials/Quoter/Simple/Impl-Repo/Makefile:
	* docs/tutorials/Quoter/Simple/ImprovedServer/Makefile:
	* docs/tutorials/Quoter/Simple/Persistent/Makefile:
	* docs/tutorials/Quoter/Simple/Server/Makefile:
	* docs/tutorials/Quoter/idl/Makefile:

	  Updated dependencies.

	* docs/tutorials/Quoter/On_Demand_Activation/Stock_Factory_Locator_i.h: 
	  #included ORB.h instead of corba.h.

Tue Oct 28 22:04:02 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* orbsvcs/examples/CosEC/Factory/FactoryClient.cpp:
	* orbsvcs/examples/Log/Basic/TLS_Client.cpp:
	* orbsvcs/examples/ORT/Server_IORInterceptor.h:
	* orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp:
	* orbsvcs/examples/ORT/server.cpp:
	* orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.h:
	* orbsvcs/tests/LoadBalancing/LoadMonitor/CPU/Makefile:
	* orbsvcs/tests/Log/Basic_Log_Test/client.cpp:
	* orbsvcs/tests/RTCosScheduling/client.cpp:

	  All those simple mistakes that were left behind. Changing
	  corba.h to ORB.h, including additional header files like
	  ace/Log_Msg.h were done to get these files compiling. 

Tue Oct 28 21:53:13 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

	  Removed #include of Invocation.h. We need to remove this from
	  the repo. We will do that once things stabilize a bit. 

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.h: Removed the
	  declaratrion of _tao_QueryInterface () since it is no longer
	  required. 

	* orbsvcs/tests/Security/MT_IIOP_SSL/Makefile:

	  Updated dependecies. 

	* orbsvcs/tests/Security/MT_IIOP_SSL/Server_Worker.h:
	* orbsvcs/tests/Security/MT_SSLIOP/Server_Worker.h: 

	  Changed the #include of corba.h to ORB.h. This (corba.h)
	  is another file that needs to be removed from the repo. 

	* orbsvcs/tests/Security/Secure_Invocation/server.cpp: Fixed a
	  unused variable warning.

Tue Oct 28 21:51:19 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Dynamic_Adapter.cpp:
        * tao/Dynamic_Adapter.h:
        * tao/DynamicInterface/Context.h:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Request.inl:
        * tao/DynamicInterface/Server_Request.h:
        * tao/DynamicInterface/Server_Request.inl:

          Moved CORBA::release() and CORBA::is_nil() for Request and
          ServerRequest from Dynamic_Adapter.* to their associated
          files in the DynamicInterface library.

        * TAOACE.dsw:

          Added dependency on the TAO_Messaging library to 
          TAO_DynamicInterface library build.

Tue Oct 28 20:56:41 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* TAO_IDL/be/be_sequence.cpp:
	* TAO_IDL/be/be_visitor_arg_traits.cpp:
	* TAO_IDL/be_include/be_sequence.h:
	* TAO_IDL/be_include/be_visitor_arg_traits.h:
	* TAO_IDL/util/utl_scope.cpp: 

	  Fixed warnings that arose due to a conversion of string to a
	  non-const pointers.

Tue Oct 28 15:53:42 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Invocation_Adapter.h:
	* tao/Invocation_Adapter.inl:
	* tao/Invocation_Adapter.h:
	* tao/Invocation_Adapter.inl:
	* tao/DynamicInterface/DII_Invocation_Adapter.cpp:
	* tao/DynamicInterface/DII_Invocation_Adapter.h:
	* tao/Messaging/Asynch_Invocation_Adapter.cpp:
	* tao/Messaging/Asynch_Invocation_Adapter.h
	  
	  Added const qualifier to the operation names. Not sure how this
	  got missed. Thought I had done this once before!

Tue Oct 28 14:06:52 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* orbsvcs/tests/AVStreams/Latency/pong.cpp: 

	  #included ORB.h and removed corba.h

	* tao/Invocation_Adapter.h: Cosmetic fixes. 

	* TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

	  Implementation of the insertion operators for the valuetypes
	  generated the ACE_INLINE macro. Removed generation of the
	  ACE_INLINE macro. 

Tue Oct 28 13:48:50 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Invocation_Adapter.h: 

	  Added some documentation. More stuff needs to be added.
	
	* tao/Profile_Transport_Resolver.cpp: 

	  Cosmetic fix.

	* tao/Messaging/MessagingC.cpp:
	* tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:

          Fixed a couple of fuzz errors that slipped.

Tue Oct 28 13:33:58 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/IORInterceptor/TAO_IORInterceptor.dsp;

          Added link to Valuetype library.

Tue Oct 28 13:21:43 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/ORB.cpp:

          Replaced a TypeCode::_nil () return value with 0, similar to other
          locations in this file, to avoid dependency on Typecode.h.

        * tao/ORB.h:

          Cosmetic changes.

        * tao/ORB_Core.cpp:

          Fixed misstypes of TAO::TAO_INVOKE_SYSTEM_EXCEPTION.

        * tao/ObjRefTemplate/TAO_ObjRefTemplate_Static.dsp:
        * tao/Valuetype/TAO_Valuetype_Static.dsp:

          Minor changes to project configurations.

Tue Oct 28 13:11:03 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/ORB.cpp:
	* tao/Service_Callbacks.cpp: 
	  
	  Fixed compilation errors due to a wrong casting of an int as an
	  enum. VC6.o doesn't like this.

Tue Oct 28 12:47:54 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp
	  (visit_interface_fwd): 
	  
	  Unused variable warning.

Tue Oct 28 12:39:01 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Any.cpp (operator>>): 

	  Inspite of numerous compilations we seemed to have missed a
	  warning. The fix is to use .in () on a Typecode_var while
	  passing the pointer to another object.

Tue Oct 28 12:02:47 2003  Balachandran Natarajan <bala@dre.vanderbilt.edu>
                          Jeff Parsons  <parsons@dre.vanderbilt.edu>

	This checkin is aimed at revamping the invocation code path
	including the generated code. The design is outlined in the
        bugzilla. Please see 

	http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1369

	This checkin only concentrates on the stub path. During the work
	we tried addressing the following additional problems

	- Header inclusions. Now IDL compiler generates just enough
	  headers for the applications. There is no need to include
	  corba.h or corbafwd.h anymore. 

	- Wide range of problems with PortableInterceptors. Please see the
	  dependencies in the above bug list. 

	- We have tried reducing the inter-header dependencies quite a
	  bit within the TAO library. Other libraries need more
	  work. There are more places in TAO where this can be done
	  effectively. We will address all of them with time. 

	- We have changed most of the tests and examples including the ORB
	  services to include thelight weight headers.

	- The generated code has gone down by more than 50%
	  everywhere. This work also clearly demarcates the responsibility
	  of the IDL compiler from the ORB. More work is needed on the
	  skeleton side. 

	More gory details of the changes can be found in
	$TAO_ROOT/ChangeLogs/ChangeLog-03d. The documentation for all the
	new interfaces are not complete yet. We will do them as we
	cleanup the scoreboard.

        * ChangeLogs/ChangeLog-03d: New changelog entry for the changes. 
	
Tue Oct 28 12:01:06 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* ChangeLogs/ChangeLog-03c: Moved a bunch of ChangeLog entries
	  right untril 1.3.5 to this new file.

Tue Oct 28 07:05:46 2003  Ossama Othman  <ossama@dre.vanderbilt.edu>

	The following changes are designed to make profile equivalance
	checking code consistent between all pluggable protocol
	implementations.

	* tao/Profile.h (is_equivalent):

	  This method is no longer virtual since it relies on template
	  methods implemented by subclasses to perform pluggable
	  protocol-specific profile equivalence check processing.

	  (do_is_equivalent):

	  New protected template method that subclasses must implement in
	  order to allow pluggable protocols to apply their own definition
	  of profile equivalance.

	  (endpoint_count):

	  Made this method const to address "discards const qualifier"
	  errors.  This is now necessary since some equivalence checking
	  code that calls this method has been refactored to the
	  is_equivalence() method.

	* tao/Profile.cpp (is_equivalent):

	  Check for a zero pointer to avoid potential a seg fault.

	  Invoke the new do_is_equivalent() template method and the new
	  is_equivalent_hook() hook method.

	  (is_profile_equivalent_i, is_equivalent_hook):

	  Renamed is_profile_equivalent_i() method to is_equivalent_hook()
	  to better reflect the purpose of this method.  Note that
	  is_equivalent_hook() is virtual to allow subclasses to override
	  the default behavior.

	  (is_equivalent_hook):

	  The TAO_Unknown_Profile::is_equivalent() method does not need to
	  allow some services (e.g. FT) to apply their own definition of
	  profile equivalence.  Override this method so that it always
	  return true.  Note that this behavior is consistent with the
	  behavior that existed prior to these changes.

	* tao/IIOP_Profile.h (endpoint_count):

	  Now a "const" method to address "discards const qualifier"
	  errors.

	  (is_equivalent, do_is_equivalent):

	  Renamed this public method to the new protected
	  do_is_equivalent() template method.

	* tao/IIOP_Profile.cpp (is_equivalent):

	  Refactored common profile equivalence checking code to the
	  TAO_Profile base class.

	  (do_is_equivalent):

	  Moved protocol-specific profile equivalence checks to this
	  template method.

	  (endpoint_count):

	  Now a "const" method to address "discards const qualifier"
	  errors.

	* tao/Strategies/DIOP_Profile.h:
	* tao/Strategies/DIOP_Profile.cpp:
	* tao/Strategies/SCIOP_Profile.h:
	* tao/Strategies/SCIOP_Profile.cpp:
	* tao/Strategies/SHMIOP_Profile.h:
	* tao/Strategies/SHMIOP_Profile.cpp:
	* tao/Strategies/UIOP_Profile.h:
	* tao/Strategies/UIOP_Profile.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:

	  Likewise.

	* orbsvcs/tests/Security/Secure_Invocation/server.cpp:

	  Added a sanity check for properly functioning SSLIOP object
	  reference equivalence checks.  Thanks to Sebastien Lalonde
	  <SLalonde@interstarinc.com> for pointing out that SSLIOP object
	  reference equivalence was not working properly.

Sat Oct 25 13:19:12 UTC 2003  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAOACE.dsw: Added that EventService is dependent of BiDIR GIOP
          to make sure that BiDIR GIOP is build first.

