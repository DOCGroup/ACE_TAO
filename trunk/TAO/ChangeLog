Thu Nov 12 07:13:51 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/PortableInterceptors/AdvSlot/run_test.pl
        * tests/PortableInterceptors/AdvSlotDblCpy/run_test.pl
        * tests/PortableInterceptors/Bug_2133/run_test.pl
        * tests/PortableInterceptors/Bug_2510_Regression/run_test.pl
        * tests/PortableInterceptors/Bug_3080/run_test.pl
        * tests/PortableInterceptors/Bug_3582/run_test.pl
        * tests/PortableInterceptors/Dynamic/run_test.pl
        * tests/PortableInterceptors/IORInterceptor/run_test.pl
        * tests/PortableInterceptors/ORB_Shutdown/run_test.pl
        * tests/PortableInterceptors/PICurrent/run_test.pl
          Fixed fuzz errors

Wed Nov 11 15:33:51 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:

          Removed ancestors from scope visitation for the LEM IDL
          context classes. This closes [BUGID:3761].

        * TAO_IDL/ast/ast_template_interface.cpp:

          Cosmetic changes.

Tue Nov 10 20:14:12 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorSequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorStructuredProxyPushSupplier.h:

          Added TAO_HAS_MONITOR_FRAMEWORK==1 guard so it won't be compiled when
          monitor framework is disabled.

Tue Nov 10 19:07:43 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          When adding uses multiple related constructs to the
          AST, we now use the instantiating port name (if any)
          as a prefix to the constructed type names.

        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exs.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component_scope.h:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:
        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:

          Fixed bugs in the handling of the port name when
          it is used in the construction of facet and
          receptacle operation names. This fix closes [BUGID:3760].

Tue Nov 10 18:15:44 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.cpp:

          Added TAO_HAS_MONITOR_FRAMEWORK==1 guard so it won't be compiled when
          monitor framework is disabled.

Tue Nov 10 13:37:57 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Param_Test/run_test.pl:
        * tests/Abstract_Interface/run_test.pl:
          Don't use hardcoded timeouts

Tue Nov 10 12:36:57 UTC 2009  Denis Budko  <denis.budko@remedy.nl>

        * tests/IORManipulation/filter/run_test.pl
        * tests/Connection_Failure/run_test.pl
        * orbsvcs/DevGuideExamples/NamingService/Naming_Server/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Statistic/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Statistic_Registry/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/MonitorControlExt/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/NotificationServiceMonitor/run_test.pl
        * orbsvcs/tests/unit/Notify/MC/Control/run_test.pl
        * orbsvcs/tests/unit/Trading/Interpreter/run_test.pl
        * orbsvcs/tests/Bug_2074_Regression/run_test.pl
        * tests/GIOP_Fragments/PMB_With_Fragments/run_test.pl
        * tests/Optimized_Connection/run_test.pl
        * performance-tests/Latency/Collocation/run_test.pl
        * performance-tests/POA/Object_Creation_And_Registration/run_test.pl
        * orbsvcs/tests/Bug_2137_Regression/run_test.pl
        * orbsvcs/tests/Bug_2377_Regression/run_test.pl
        * orbsvcs/tests/Bug_2377_Regression/run_test_ipv6.pl

          Simple porting to new test framework.

Mon Nov  9 19:21:53 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_field.h:
        * TAO_IDL/be/be_field.cpp:

          Added flag to check whether a provides or uses port's
          name has already been prefixed with an extended port
          or mirrorport name.

        * TAO_IDL/be/be_visitor_component\context_ex_idl.cpp:

          When visiting a component, changed the call to visit_scope()
          to visit_component_scope() to take advantage of special
          properties in the visitor base class.

        * TAO_IDL/be/be_visitor_component_scope.cpp:

          Fixed a bug in the prefixing of uses or provides port's
          name with the extended port or mirror port's name.

        * TAO_IDL/be/be_interface.cpp:

          Disable code generation of release() and is_nil() overrides
          for children of abstract interfaces if the child itself is
          included from another IDL file, avoiding possible multiple
          defintions of these methods. This item closes [BUGID:3759].

Mon Nov  9 14:58:34 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/driver/drv_args.cpp:

          Cosmetic changes.

        * TAO_IDL/tao_idl.cpp:

          Added the (optional) behavior of creating a new IDL file
          containing #includes of the individual IDL files on the
          command line, or in the directory tree specified by -r
          on some backends. Processing this 'container' IDL file
          results in significant performance improvement when
          processing multiple IDL files, especially if they include
          Components.idl, since all the middleware IDL is then
          processed only once.

        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/include/idl_global.h:

          Added a flag to toggle the above behavior, set by a
          backend (currently only idl_to_picml) that processes
          multiple IDL files into one output.

Mon Nov  9 12:41:31 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_helper.cpp:
          Removed empty line

        * TAO_IDL/be/be_visitor_component/executor_exh.cpp:
          Generate doxygen grouping comments

Mon Nov  9 03:29:31 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:

          Added the process ID to the temporary file used for gperf, due
          to a perhaps weak random number generator not being random
          enough for parallel builds on OS X.

Fri Nov  6 10:13:00 UTC 2009  Simon Massey  <sma at prismtech dot com>

        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/driver/drv_mcpp_preproc.cpp:

          Updated DRV_add_include_path() space within roots and
          directory slash handling. (TAO782) It wasn't detecting
          or handling spaced roots or trailing directory slashes
          correctly.

        * TAO_IDL/util/utl_global.cpp:

          Allow for the gperf absolute directory path to contain spaces.

Thu Nov  5 12:48:31 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Don't generate an include for CIAO_common.h anymore

Thu Nov  5 12:24:52 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/run_test.pl:
          Extended the time for running client.

Thu Nov  5 10:48:07 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/server.cpp:
          Fixed warnings.

Wed Nov  4 20:57:08 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * MPC/config/notify_monitor_control.mpb:

          Disable this feature on wince=1 build.

Tue Nov  3 17:32:03 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/fe_init.cpp:

          Added IDL3+ keywords to the list used to check for clashes
          and leading underscore retention.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Added creation of uses multiple-specific struct and sequence
          nodes in the AST when the uses multiple port
          appears in an extended port declaration, identically to what
          is now added for a standalone uses multiple port.

Mon Nov  2 22:59:48 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.h:
        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.cpp:

          Made MonitorManager not start ORBTask if MC is not required.
          This should resolve Notify tests failure on static builds.

        * orbsvcs/tests/Notify/MC/notify.conf:

          Removed this file as it'll be generated when running the test
          and cause setup warning on scoreboard.

Mon Nov  2 16:54:24 UTC 2009  Steven Stallion  <stallions@ociweb.com>

        * tests/RTCORBA/Bug_3643_Regression/test_i.cpp:

          Dropped spurious use of NDEBUG; tests should not predicate debug
          logging based on the (lack of) presence of NDEBUG.

Fri Oct 30 16:25:53 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3755_Regression/orb1_svc.conf:
        * tests/Bug_3755_Regression/orb2_svc.conf:
        * tests/Bug_3755_Regression/server.cpp:
        * tests/Bug_3755_Regression/run_test.pl:
        * tests/Bug_3755_Regression/Bug_3755_Regression.mpc:
        * bin/tao_orb_tests.lst:
          Added a test for bug#3755 and scheduled it for run.

Fri Oct 30 14:50:00 UTC 2009  Simon Massey  <sma at prismtech dot com>

        * TAO_IDL/driver/drv_preproc.cpp:
          Improve the DRV_add_include_path() space within roots and
          directory slash handling.   (TAO782)

Fri Oct 30 13:08:30 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/client.cpp:
        * tests/Bug_3748_Regression/Bug_3748_Regression.mpc:
        * tests/Bug_3748_Regression/Server_ORBInitializer.h:
        * tests/Bug_3748_Regression/Hello.cpp:
        * tests/Bug_3748_Regression/Test.idl:
        * tests/Bug_3748_Regression/server.cpp:
        * tests/Bug_3748_Regression/Test_Protocols_Hooks.cpp:
        * tests/Bug_3748_Regression/Makefile.am:
        * tests/Bug_3748_Regression/Hello.h:
        * tests/Bug_3748_Regression/Test_Protocols_Hooks.h:
        * tests/Bug_3748_Regression/README:
        * tests/Bug_3748_Regression/run_test.pl:
        * tests/Bug_3748_Regression/Server_ORBInitializer.cpp:
        * bin/tao_orb_tests.lst:
          Complitely rewrote the test for bug#3748 and changed configs
          in which this test can run.

Fri Oct 30 06:15:53 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        Merged changes from Jeff for port/porttype/mirrorport to head

        Thu Oct 29 12:50:35 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_connector.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exs.cpp:
        * TAO_IDL/be/be_visitor_connector/connector_dds_exh.cpp:
        * TAO_IDL/be_include/be_visitor_connector.h:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_exs.h:
        * TAO_IDL/be_include/be_visitor_connector/connector_dds_exh.h:

          New visitors, implementing (so far) part of the code
          generation of connector executors.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_component/component_exh.cpp:
        * TAO_IDL/be/be_visitor_component/component_exs.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_component_scope.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_visitor_component_scope.h:
        * TAO_IDL/be_include/be_global.h:

          - Factored out code for generating entrypoint declarations
            and definitions.

          - Added mechanism to generate includes of DDS type
            support files for the connector executor.

        Sun Oct 25 17:10:27 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_visitor_component_scope.h:
        * TAO_IDL/be/be_visitor_component_scope.cpp:

          Moved these files from the be_visitor_component
          subdirectory, so the visitor would be accessible
          as a base class to be_visitor_ccm_pre_proc. Also
          add override of base class (be_visitor_scope)
          method pre_proces(), to extend the generated
          names of provides and uses methods with a
          prefix of the port or mirrorport name, if any.

        * TAO_IDL/be/be_visitor_ccm_pre_proc.cpp:
        * TAO_IDL/be_include/be_visitor_ccm_pre_proc.h:

          Made class be_visitor_component_scope the base class
          of this visitor, thereby adding support for simple
          ports, mirrorports and porttypes.

        * TAO_IDL/be_include/be_visitor_component.h:
        * TAO_IDL/be/be_visitor_component.cpp:

          Removed relocated files from these file lists.

        Thu Oct 22 20:39:02 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_scope.h:

          Added code generation for mirror ports.

        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:

          Changed base class to be_visitor_component_scope to
          pull in the mirror port support.

        Thu Oct 22 19:21:26 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/facet_exs.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exh.cpp:
        * TAO_IDL/be/be_visitor_component/executor_exs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_exh.cpp:
        * TAO_IDL/be_include/be_visitor_component/executor_exh.h:
        * TAO_IDL/be_include/be_visitor_component/executor_exs.h:
        * TAO_IDL/be_include/be_visitor_component/facet_exh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_exs.h:

          New files, containing new visitors that handle code
          generation class-by-class in the executor implementation.

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_attribute.cpp:
        * TAO_IDL/be/be_consumes.cpp:
        * TAO_IDL/be/be_field.cpp:
        * TAO_IDL/be/be_publishes.cpp:
        * TAO_IDL/be/be_uses.cpp:
        * TAO_IDL/be/be_emits.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be_include/be_field.h:
        * TAO_IDL/be_include/be_publishes.h:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_uses.h:
        * TAO_IDL/be_include/be_provides.h:
        * TAO_IDL/be_include/be_attribute.h:
        * TAO_IDL/be_include/be_emits.h:
        * TAO_IDL/be_include/be_consumes.h:
        * TAO_IDL/be_include/be_sequence.h:

          Add non-virtual override of frontend methods that
          fetch the referenced provides, uses, publishes, emits,
          consumes, field, or base type. This addition concentrates
          the narrowing to the backend type so it need not be
          done over and over in the visitors.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added new visitor files.

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be_include/be_interface.h:

          Renamed static method facet_op_attr_decl_helper to
          op_attr_decl_helper, since its use is now more general.

        * TAO_IDL/be_include/be_visitor_component/component_exh.h:
        * TAO_IDL/be_include/be_visitor_component/component_exs.h:
        * TAO_IDL/be/be_visitor_component/component_exh.cpp:
        * TAO_IDL/be/be_visitor_component/component_exs.cpp:

          Split code out of these visitors and distributed it
          among the new visitors.

        * TAO_IDL/be/be_visitor_operation/operation_exs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_svs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_attribute.cpp:
        * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
        * TAO_IDL/be_include/be_visitor_operation/operation_svs.h:
        * TAO_IDL/be_include/be_visitor_component/component.h:

          Minor or cosmetic changes.

        Wed Oct 21 20:40:45 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_extended_port.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port.h:

          Removed these files, should have been removed in

          Wed Oct 21 14:10:35 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>


        * TAO_IDL/be/be_visitor_component/facet_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/context_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/executor_ex_idl.cpp:
        * TAO_IDL/be_include/be_visitor_component/facet_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/context_ex_idl.h:
        * TAO_IDL/be_include/be_visitor_component/executor_ex_idl.h:

          New files, split executor IDL code generation into separate
          visitors for the facet, context and executor classes. Also
          added support for simple extended ports and porttypes.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added new files to the include lists.

        * TAO_IDL/be/be_util.cpp:
        * TAO_IDL/be_include/be_util.h:

          Moved utility methods to generate nested namespaces
          to this class, so they can be visible to all visitors.

        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be/be_visitor_component/component_ex_idl.cpp:
        * TAO_IDL/be/be_visitor_component/component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_scope.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:
        * TAO_IDL/be_include/be_visitor_component/component_ex_idl.h:

          Moved visit method overrides for extended port, mirror port
          and porttype to the base class be_visitor_component_scope.
          In every case so far, the extended port (and eventually the
          mirror port) traversal just fetches the porttype reference
          and visits its scope, calling back the port kind traversal
          methods that happen to be overridden in the original
          visitor, so there's no need to reimplement these methods
          over and over.

        Wed Oct 21 14:10:35 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_extended_port/extended_port_svs.cpp:
        * TAO_IDL/be/be_visitor_extended_port/extended_port.cpp:
        * TAO_IDL/be/be_visitor_extended_port/extended_port_svh.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svs.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svh.h:

          Removed these visitors, better use of polymorphism can be made
          by just implementing their methods in the appropriate
          component visitor.

        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:

          Copied code from removed visitor methods above, and
          removed visit_component() method.

        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:

          Spawned facet visitors above with visit_component_scope()
          call, eliminating the extra step of calling visit_component().


        * TAO_IDL/be_include/be_extended_port.h:
        * TAO_IDL/be/be_extended_port.cpp:

          Overloaded port_type() method to return backend-specific
          type, to eliminate many narrowing calls.

        Tue Oct 20 22:55:25 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/component_scope.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_scope.h:

          New files containing a new base class visitor, encapsulating
          a scope visitation method that recurses over the scopes of
          a component's ancestors, if any.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be/be_component.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be_include/be_component.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:
        * TAO_IDL/be_include/be_visitor_component.h:

          Replaced all occurrences of recursive scope iteration
          with new visitor classes derived from the abstract
          visitor above.

        Mon Oct 19 23:26:07 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/servant_svs.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svs.cpp:
        * TAO_IDL/be/be_visitor_component/context_svs.cpp:
        * TAO_IDL/be_include/be_visitor_component/facet_svs.h:
        * TAO_IDL/be_include/be_visitor_component/servant_svs.h:
        * TAO_IDL/be_include/be_visitor_component/context_svs.h:

          New files containing new visitors with code factored out
          of class be_visitor_component_svs

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:
        * TAO_IDL/be/be_visitor_attribute/component_init.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_svs.h:
        * TAO_IDL/be_include/be_visitor_component.h:

          Changes stemming from the new visitors above.

        Fri Oct 16 19:54:38 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_component/servant_svh.cpp:
        * TAO_IDL/be/be_visitor_component/facet_svh.cpp:
        * TAO_IDL/be/be_visitor_component/context_svh.cpp:
        * TAO_IDL/be_include/be_visitor_component/servant_svh.h:
        * TAO_IDL/be_include/be_visitor_component/facet_svh.h:
        * TAO_IDL/be_include/be_visitor_component/context_svh.h:

          New files, new visitors that contain code moved from
          private methods in class be_visitor_component_svh.

        * TAO_IDL/be/be_provides.cpp:

          Fixed bug in code generation.

        * TAO_IDL/be/be_visitor_component.cpp:
        * TAO_IDL/be_include/be_visitor_component.h:

          Added new visitor files.

        * TAO_IDL/be/be_visitor_component/component_exh.cpp:

          Removed debugging output.

        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be_include/be_visitor_component/component_svh.h:

          Moved code out to new visitor above.

Thu Oct 29 16:36:53 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.cpp:

          Fixed a compilation error on wchar build.

Thu Oct 29 15:34:15 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
          Disabled running tests 3531, 3647, and 3683 in NO_MESSAGING and
          CORBA_E_MICRO builds since those tests are not built in such
          setups.

Thu Oct 29 14:56:17 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * tests/Bug_3748_Regression/client.cpp:
        * tests/Bug_3748_Regression/server.cpp:
        * tests/Bug_3748_Regression/run_test.pl:
          Temporarily made the output a bit more verbose.

Thu Oct 29 02:12:40 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * orbsvcs/orbsvcs/Notify/MonitorControl/NotificationServiceMonitor_i.cpp:
        * tao/Monitor/Monitor_Impl.cpp:

          Fixed bugs that did not initialize and set last in Numric data.

        * orbsvcs/tests/Notify/MC/test_monitor.cpp:

          Corrected some expected values.

Wed Oct 28 23:27:02 UTC 2009  Yan Dai  <dai_y@ociweb.com>

        * MPC/config/negotiate_codesets.mpb:
        * MPC/config/notify_monitor_control.mpb:
        * MPC/config/tao_notify_service.mpb:
        * docs/notification/monitor.html:
        * interop-tests/wchar/Client.java:
        * interop-tests/wchar/interop_wchar.mpc:
        * interop-tests/wchar/server.cpp:
        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.mpc:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/CosEC_ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Any/ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Builder.cpp:
        * orbsvcs/orbsvcs/Notify/Consumer.h:
        * orbsvcs/orbsvcs/Notify/Consumer.inl:
        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.h:
        * orbsvcs/orbsvcs/Notify/MonitorControl/MonitorManager.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControl/NotificationServiceMonitor_i.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Default_Factory.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Notify_Service.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MC_Notify_Service.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorConsumerAdmin.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorConsumerAdmin.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorEventChannel.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorSequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/MonitorStructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/MonitorControlExt/NotifyMonitoringExt.idl:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Sequence/SequenceProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.h:
        * orbsvcs/orbsvcs/Notify/Structured/StructuredProxyPushSupplier.cpp:
        * orbsvcs/tests/Notify/MC/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/MC/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/MC/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/MC/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/MC/notify.conf:
        * orbsvcs/tests/Notify/MC/run_test.pl:
        * orbsvcs/tests/Notify/MC/test_monitor.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/unit/Notify/MC/Statistic/Statistic.cpp:
        * tao/Monitor/Monitor_Types.pidl:

          Merged following changes from OCI made between 1.5a p15 and p16 releases.

          - Added consumer-level queueing statistics to the Notification Service MC.
          - Added queue-overflow statistics to the Notification Service MC.
          - Modified Notification Service MC to work in static builds.
          - Corrected an error that caused Notification Service MC statistics to fail
            when -AllocateTaskPerProxy is used.
          - QueueDepth have been changed to measure the number of entries rather than
            attempting unsuccessfully to estimate the amount of memory used by the queue.
          - Added TAO_EXPLICIT_NEGOTIATE_CODESETS macro to improve the ease of including
            optional codeset support to Notify_Service in static builds.

Wed Oct 28 06:09:33 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * bin/tao_other_tests.lst:
          Enabled a few tests for ce/fuzz

        * orbsvcs/tests/Notify/Bug_2926_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3688b_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3252_Regression/run_test.pl:
        * orbsvcs/tests/Notify/Bug_3646b_Regression/run_test.pl
          Converted to the new test framework

Tue Oct 27 16:58:33 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * bin/tao_orb_tests.lst:
          Enabled Bug_3748_Regression in all builds except for single
          threaded.

Mon Oct 26 10:52:01 UTC 2009  Vladimir Zykov  <vladimir.zykov@prismtech.com>

        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Completion_Handler.h:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor_Impl.h:
          Fixed several memory leaks. Changed HTIOP Acceptor to use
          strategies implemented in HTIOP_Acceptor_Impl.*. This was
          required for proper fix for bug#3748.

        * tao/Acceptor_Impl.cpp:
          Uncommented code for a fix for bug#3748.

Thu Oct 22 10:47:21 UTC 2009  Johnny Willemsen  <jwilllemsen@remedy.nl>

        * TAO_IDL/TAO_IDL_ACE.mwc:
          Only list mpc files here

        * TAO_IDL/be/be_visitor_valuebox/valuebox_ch.cpp:
          Updated a few of the comments we generate

Tue Oct 20 22:58:21 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/TAO_IDL_ACE.mwc:

          Updated in accordance with the changes of

          Thu Oct 15 07:20:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

Tue Oct 20 12:09:06 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/Concurrency_Service/Concurrency_Service.cpp:
        * orbsvcs/Concurrency_Service/Concurrency_Service.mpc:
        * orbsvcs/CosEvent_Service/CosEvent_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.mpc:
        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.mpc:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * MPC/config/tao_notify_service.mpb:
          Handle -ORBDeamon in these services directly, this is a work around
          until bugzilla 3335 gets resolved. This fixes bugzilla 3656

Mon Oct 19 12:18:06 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Makefile.am:
          Add Daemon_Utilities

        * orbsvcs/Naming_Service/Naming_Service.cpp:
        * orbsvcs/Naming_Service/Naming_Service.mpc:
          Use Deamon_Utilities to handle -ORBDeamon in the naming service. This
          is because -ORBDeamon doesn't work for these services due to bugzilla
          3335. This is related to bugzilla 3656

Mon Oct 19 12:13:06 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/IFR_Service/IFR_Service.mpc:
          Use tao_idl_fe base project

        * orbsvcs/orbsvcs/Daemon_Utilities.cpp:
        * orbsvcs/orbsvcs/Daemon_Utilities.h:
        * orbsvcs/orbsvcs/Svc_Utils.mpc:
          New helper class which checks for -ORBDeamon and when this is specified
          it calls ACE::deamonize()

Mon Oct 19 00:26:06 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp: Another shot
          at trying to fix the memory leaks in the servants.  Thanks to
          Johnny for reporting this.

Fri Oct 16 02:09:47 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/mcpp_tao_yyinput.h:

          Fixed potential signed/unsigned mismatch in macro definition
          for TAO_YY_INPUT.

Thu Oct 15 21:44:22 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/fe/mcpp_tao_yyinput.h:
        * TAO_IDL/fe/fe_extern.cpp:

          Made tao_preproc_buffer_pos an extern int, similar to
          its neighbor tao_preproc_buffer_length, so it can be
          reset to 0 for each new file processed in the same
          location that tao_preproc_buffer_length is reset. The
          failure to reset tao_preproc_buffer_pos was causing
          an error in the CoSMIC-specific backend, which is the
          only one currently processing multiple IDL files in
          a single execution. When reading the first token from
          the 2nd file, the lexer would not be at the top of
          the buffer and would therefore read garbage.

Thu Oct 15 17:02:54 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp
          (universal_time): Replaced TAO_UTO_var with CosTime::UTO_var to
          fix a compile error.  Thanks to Johnny for reporting this.

Thu Oct 15 16:05:25 UTC 2009  Vladimir Zykov  <vz@prismtech.com>

        * bin/tao_other_tests.lst:
          Disabled HTIOP tests on static builds since they need
          dynamic loading for HTIOP library.

        * tao/Acceptor_Impl.cpp:
          Temporarily commented out problematic code until
          HTIOP is fixed.

Thu Oct 15 14:01:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_component/component_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
          Fixed typo in comment

Thu Oct 15 11:33:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/documentation.html:
          Updated link to the TPG

Thu Oct 15 07:20:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/tao_idl.mpc
        * TAO_IDL/tao_idl_be.mpc
        * TAO_IDL/tao_idl_fe.mpc
          Added seperate mpc files for the back end and the front end library

Wed Oct 14 23:05:35 UTC 2009  William R. Otte  <wotte@dre.vanderbilt.edu>

        * TAO_IDL/contrib/mcpp/support.cpp:
          Now releases ownership of in-memory buffers when retrieved for
          preprocessing.  Fixes a crash when in-memory preprocessor
          was used multiple times per process invocation.

Wed Oct 14 18:31:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/tao_idl.mpc:
          Use the new tao_idl_fe base project

Wed Oct 14 18:26:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MPC/config/tao_idl_fe.mpb:
          New base project for tao_idl_fe

Wed Oct 14 18:16:38 UTC 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/contrib/mcpp/system.cpp:
          Fixed argument not used warning

Wed Oct 14 17:42:38 UTC 2009  Vladimir Zykov  <vz@prismtech.com>

        * tao/Acceptor_Impl.cpp:
          Fixed bug#3748. It fixes a connection handler leak when
          server accepts a connection but then fails to open a connection
          handler.

Wed Oct 14 16:53:09 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_provides.cpp:

          Fixed bug in facet servant class generation.

        * TAO_IDL/be/be_interface.cpp(traverse_inheritance_graph):

          Added "!= 0" to an IF state checking the return value
          of a call to ACE_Unbounded_Queue, which returns an int.

Wed Oct 14 13:51:03 UTC 2009  Douglas C. Schmidt  <schmidt@dre.vanderbilt.edu>

        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.cpp (universal_time):
          Changed

          TAO_UTO *uto = 0;

          to

          TAO_UTO_Var uto;

          to avoid a memory leak.  Thanks to Chris Shaw <google at
          cshaw-tech dot co dot uk> for reporting this.

Tue Oct 13 15:54:44 UTC 2009  Vladimir Zykov  <vz@prismtech.com>

        * tests/Bug_3748_Regression/client.cpp:
        * tests/Bug_3748_Regression/Bug_3748_Regression.mpc:
        * tests/Bug_3748_Regression/Hello.cpp:
        * tests/Bug_3748_Regression/Test.idl:
        * tests/Bug_3748_Regression/server.cpp:
        * tests/Bug_3748_Regression/Makefile.am:
        * tests/Bug_3748_Regression/Hello.h:
        * tests/Bug_3748_Regression/README:
        * tests/Bug_3748_Regression/run_test.pl:
        * bin/tao_orb_tests.lst:
          Added a test for bug#3748.

Tue Oct 13 15:36:48 UTC 2009  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_extended_port/extended_port_svs.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svs.h:

          New files, containing new visitor that generates the implementation
          of the facet servant class.

        * TAO_IDL/be/be_provides.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_provides.h:

          Factored common code generation into the appropriate nodes.

        * TAO_IDL/narrow/narrow.cpp:

          Added port types to the group of types that can be
          transformed from scope to decl and vice versa.

        * TAO_IDL/be/be_visitor_extended_port/extended_port.cpp:
        * TAO_IDL/be/be_visitor_extended_port/extended_port_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svh.cpp:
        * TAO_IDL/be/be_visitor_component/component_svs.cpp:
        * TAO_IDL/be/be_visitor_extended_port.cpp:
        * TAO_IDL/be_include/be_visitor_extended_port.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port.h:
        * TAO_IDL/be_include/be_visitor_extended_port/extended_port_svh.h:

          Added new files as includes, factored common visitor code into
          base class, other minor changes.

Mon Oct 12 14:03:48 CDT 2009  Johnny Willemsen  <jwillemsen@remedy.nl>

              * TAO version 1.7.4 released.

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
