// $Id$

README:
======
        This directory consists of the files implementing the TAO
NamingService.

        The TAO NamingService makes use of IP Multicast to process
requests to the Naming Service.

To Run:
======

        % Naming_Service [-ORBport port] [-ORBobjrefstyle url]
                         [-ORBnameserviceport nsport] 

Arguments:
==========        
        port - The ORB port
        nsport - Multicast port.
 
Environment Variables:
=====================

        NameServicePort - Multicast port.

Sample Run:
==========

      % Naming_Service -ORBport 20000 -ORBobjrefstyle url -ORBnameserviceport 19999
starting up daemon <unknown>
opening dynamic service Resource_Factory
did dynamic on Resource_Factory, error = 0
opening dynamic service Client_Strategy_Factory
did dynamic on Client_Strategy_Factory, error = 0
opening dynamic service Server_Strategy_Factory
did dynamic on Server_Strategy_Factory, error = 0
listening as object <iiop:1.0//tango:20000/P35194c690003809cRootPOA/child_poa/NameService>
The multicast server setup is done.

NameService Client:
==================        

        A client of the TAO Naming Service will use the ORB
resolve_initial_references to resolve the NamingService object. This
will be done using Multicast by default. This behavior can be
overridden by these 2 ways.

        1. passing the argument -ORBnameserviceior ior. 
           This ior is got from the output of the Naming_Service from
           line 'listening as object <iiop:..>'. 

        2. setting the env. variable 'NameService'.

For example if a client wants to use the Naming_Service from the
sample run it would be like,

        %client -ORBnameserviceior
                <iiop:1.0//tango:20000/P35194c690003809cRootPOA/child_poa/NameService> 

or set the environment variable,

        in a tcsh ,

        % setenv NameService <iiop:1.0//tango:20000/P35194c690003809cRootPOA/child_poa/NameService>

        and then run the client,

        % client <.. client's arguments>

        These methods might be needed in an environment where there is
more than one NamingService to avoid the confusion of a server
registering its object with one NamingService and the client getting
the reply from some other NamingService.

                
