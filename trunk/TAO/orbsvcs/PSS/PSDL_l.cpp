/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Id$
 */

#define yy_create_buffer TAO_PSDL_yy_create_buffer
#define yy_delete_buffer TAO_PSDL_yy_delete_buffer
#define yy_scan_buffer TAO_PSDL_yy_scan_buffer
#define yy_scan_string TAO_PSDL_yy_scan_string
#define yy_scan_bytes TAO_PSDL_yy_scan_bytes
#define yy_flex_debug TAO_PSDL_yy_flex_debug
#define yy_init_buffer TAO_PSDL_yy_init_buffer
#define yy_flush_buffer TAO_PSDL_yy_flush_buffer
#define yy_load_buffer_state TAO_PSDL_yy_load_buffer_state
#define yy_switch_to_buffer TAO_PSDL_yy_switch_to_buffer
#define yyin TAO_PSDL_yyin
#define yyleng TAO_PSDL_yyleng
#define yylex TAO_PSDL_yylex
#define yyout TAO_PSDL_yyout
#define yyrestart TAO_PSDL_yyrestart
#define yytext TAO_PSDL_yytext

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include "ace/OS.h"

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _Win32
#include "ace/Synch.h"
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if ( condition_holds )
 *    yyless( 5 );
 *  else
 *    do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
  do \
    { \
    /* Undo effects of setting up yytext. */ \
    *yy_cp = yy_hold_char; \
    YY_RESTORE_YY_MORE_OFFSET \
    yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
  while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
{
  FILE *yy_input_file;

  char *yy_ch_buf;    /* input buffer */
  char *yy_buf_pos;   /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;    /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;   /* whether we need to initialize */
static int yy_start = 0;  /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
  { \
  if ( ! yy_current_buffer ) \
    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
  yy_current_buffer->yy_is_interactive = is_interactive; \
  }

#define yy_set_bol(at_bol) \
  { \
  if ( ! yy_current_buffer ) \
    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
  yy_current_buffer->yy_at_bol = at_bol; \
  }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


// #define yywrap() 1
// #define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
  yytext_ptr = yy_bp; \
  yyleng = (int) (yy_cp - yy_bp); \
  yy_hold_char = *yy_cp; \
  *yy_cp = '\0'; \
  yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
static yyconst short int yy_accept[364] =
    {   0,
        0,    0,   95,   93,   91,   92,   18,   13,   93,    5,
        6,   14,   10,    9,   11,   93,   17,   87,    2,    1,
        7,   20,    8,   89,   89,   89,   89,   89,   23,   93,
       24,   12,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,    3,   21,    4,   19,    0,   90,    0,   88,    0,
       87,   22,   16,   15,   89,   89,   89,   89,   89,   89,
       89,   89,   26,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   25,   89,   89,
       89,   89,   89,   27,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,    0,    0,   89,   89,   89,   89,   89,
       89,   30,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   28,
       89,   89,   89,   89,   89,   89,   31,   89,   89,   89,
       89,   89,   29,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,    0,
       88,   89,   89,   85,   89,   89,   89,   89,   32,   89,
       36,   89,   89,   89,   89,   89,   80,   89,   89,   89,
       89,   89,   89,   89,   89,   57,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   65,   89,   89,   86,   89,   89,   89,   89,   89,
       89,   64,   89,   89,   89,   89,   89,   89,   68,   55,
       89,   33,   89,   72,   89,   89,   51,   89,   89,   89,
       89,   89,   89,   89,   38,   89,   58,   40,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   47,   89,   89,
       49,   89,   52,   89,   89,   89,   89,   89,   89,   74,
       89,   56,   89,   89,   89,   89,   62,   61,   63,   89,
       89,   89,   83,   66,   89,   89,   89,   39,   77,   44,

       53,   89,   48,   89,   89,   89,   89,   89,   89,   89,
       89,   50,   34,   67,   54,   89,   84,   89,   89,   45,
       82,   89,   89,   89,   89,   89,   89,   60,   89,   89,
       78,   89,   41,   89,   89,   89,   89,   35,   46,   81,
       89,   89,   76,   89,   59,   89,   69,   79,   70,   89,
       71,   89,   89,   89,   73,   37,   89,   89,   89,   43,
       42,   75,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    5,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,    1,   21,   22,   23,   23,   24,   25,
       23,   23,   23,   23,   23,   26,   23,   23,   27,   23,
       23,   28,   29,   30,   31,   32,   23,   23,   23,   23,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   23,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[368] =
    {   0,
        0,    0,  391,  392,  392,  392,  392,  392,   61,  392,
      392,  392,  392,  392,  392,  375,  392,   55,  373,  392,
      370,  392,  367,    0,  365,  346,  356,  345,  392,    0,
      392,  392,   30,  330,   33,   30,   22,   50,   24,  339,
      328,  327,  340,   49,   21,   42,   61,   35,  326,   56,
       37,  392,  392,  392,  392,   92,  392,   96,   89,  361,
       96,  392,  392,  392,    0,  349,  327,  342,  323,    0,
      315,  308,    0,  312,  316,   58,  329,  315,  309,  321,
      305,  304,  321,  320,  298,  306,  304,   53,  294,   72,
      314,  297,  296,    0,  310,  294,   70,  311,  303,   82,

      296,  293,  294,   86,  292,  298,  285,  289,   71,  292,
      294,  294,  281,  122,  122,  308,  294,  311,  276,    0,
      276,    0,  277,  282,  288,  291,  273,   79,  270,  288,
      286,  274,  281,  265,  279,  282,  270,  260,  275,    0,
      278,  271,  256,  267,  270,  251,    0,   83,  251,  260,
      252,  266,    0,  253,  247,  249,  246,  247,   93,  248,
      243,  248,  256,  245,  250,  237,  253,  255,  237,  276,
      275,  265,  248,    0,  245,  231,  239,  242,    0,  234,
        0,  225,  239,  228,  221,  229,    0,  224,  224,  234,
      217,  231,  215,  216,  221,    0,  220,  209,  210,  228,

      227,  226,  217,  216,  219,  208,  217,  216,  200,  214,
      102,  204,  203,  213,  200,  211,  210,  208,  197,  203,
      204,    0,  190,  198,    0,  186,  220,  203,  201,  201,
      186,    0,  176,  186,  186,  192,  176,  177,    0,    0,
      181,    0,  187,    0,  187,  186,    0,  165,  171,  168,
      183,  183,  166,  170,    0,  169,    0,    0,  175,  162,
      173,  172,  158,  159,  168,  174,  169,    0,  159,  152,
        0,  157,    0,  169,  166,  147,  153,  159,  145,    0,
      144,    0,  154,  137,  156,  159,    0,    0,    0,  134,
      153,  152,    0,    0,  144,  152,  149,    0,    0,    0,

        0,  133,    0,  132,  145,  145,  124,  141,  128,  126,
      125,    0,    0,    0,    0,  129,    0,  129,  139,    0,
        0,  122,  115,  134,   98,  119,  136,    0,  132,  119,
        0,  129,    0,  128,  118,  111,  125,    0,    0,    0,
      114,  103,    0,  125,    0,  112,    0,    0,    0,   97,
        0,  102,   97,  100,    0,    0,  106,  105,  104,    0,
        0,    0,  392,  156,  158,  126,  160
    } ;

static yyconst short int yy_def[368] =
    {   0,
      363,    1,  363,  363,  363,  363,  363,  363,  364,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  365,  365,  365,  365,  365,  363,  366,
      363,  363,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  363,  363,  363,  363,  364,  363,  363,  363,  363,
      363,  363,  363,  363,  365,  365,  365,  365,  365,  367,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  364,  363,  365,  365,  365,  365,  367,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  363,
      363,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,    0,  363,  363,  363,  363
    } ;

static yyconst short int yy_nxt[459] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   25,   24,   26,   24,   24,   27,
       24,   28,   29,   30,   31,   32,    4,   33,   34,   35,
       36,   37,   38,   24,   24,   39,   24,   40,   41,   42,
       43,   44,   45,   24,   46,   47,   48,   49,   50,   51,
       24,   24,   52,   53,   54,   55,   57,   60,   71,   61,
       76,   80,   82,   87,   88,   97,  112,   77,   98,   99,
       72,   81,   83,  100,   78,   73,   74,   84,   93,  107,
       79,   94,  113,  110,   58,   85,  108,   57,   86,   95,

      101,  114,  102,   59,  138,  103,   96,  111,   60,  139,
       61,  141,  115,  125,  126,  148,  164,  104,  105,  152,
      106,  149,  142,  157,  153,   58,  165,   57,   70,  114,
      115,  170,  201,  170,  182,  183,  171,  158,  212,  259,
      159,  202,  341,  260,  213,  362,  361,  360,  359,  358,
      214,  357,  356,  355,  342,   58,   56,   56,   56,   65,
       65,  120,  120,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,

      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  171,
      171,  224,  223,  222,  221,  220,  219,  218,  217,  216,

      215,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  169,  168,  167,
      166,  163,  162,  161,  160,  156,  155,  154,  151,  150,
      147,  146,  145,  144,  143,  140,  137,  136,  135,  134,
      133,  132,  131,  130,  129,  128,  127,  124,  123,  122,
      121,  119,  118,  117,  116,   59,  109,   92,   91,   90,
       89,   75,   69,   68,   67,   66,   64,   63,   62,   59,
      363,    3,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363
    } ;

static yyconst short int yy_chk[459] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,   18,   33,   18,
       35,   36,   37,   39,   39,   45,   51,   35,   45,   46,
       33,   36,   37,   46,   35,   33,   33,   38,   44,   48,
       35,   44,   51,   50,    9,   38,   48,   56,   38,   44,

       47,   58,   47,   59,   88,   47,   44,   50,   61,   88,
       61,   90,   59,   76,   76,   97,  109,   47,   47,  100,
       47,   97,   90,  104,  100,   56,  109,  114,  366,   58,
       59,  115,  148,  115,  128,  128,  115,  104,  159,  211,
      104,  148,  325,  211,  159,  359,  358,  357,  354,  353,
      159,  352,  350,  346,  325,  114,  364,  364,  364,  365,
      365,  367,  367,  344,  342,  341,  337,  336,  335,  334,
      332,  330,  329,  327,  326,  324,  323,  322,  319,  318,
      316,  311,  310,  309,  308,  307,  306,  305,  304,  302,
      297,  296,  295,  292,  291,  290,  286,  285,  284,  283,

      281,  279,  278,  277,  276,  275,  274,  272,  270,  269,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  256,
      254,  253,  252,  251,  250,  249,  248,  246,  245,  243,
      241,  238,  237,  236,  235,  234,  233,  231,  230,  229,
      228,  227,  226,  224,  223,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  195,
      194,  193,  192,  191,  190,  189,  188,  186,  185,  184,
      183,  182,  180,  178,  177,  176,  175,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,

      160,  158,  157,  156,  155,  154,  152,  151,  150,  149,
      146,  145,  144,  143,  142,  141,  139,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  129,  127,  126,  125,
      124,  123,  121,  119,  118,  117,  116,  113,  112,  111,
      110,  108,  107,  106,  105,  103,  102,  101,   99,   98,
       96,   95,   93,   92,   91,   89,   87,   86,   85,   84,
       83,   82,   81,   80,   79,   78,   77,   75,   74,   72,
       71,   69,   68,   67,   66,   60,   49,   43,   42,   41,
       40,   34,   28,   27,   26,   25,   23,   21,   19,   16,
        3,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "PSDL.ll"
#define INITIAL 0
#line 4 "PSDL.ll"
// $Id$
// ========================================================================
//
// = LIBRARY
//   orbsvcs/PSS
//
// = FILENAME
//   PSDL.ll
//
// = AUTHOR
//   Priyanka Gontla <gontla_p@ociweb.com>
// ========================================================================

#include "ace/OS.h"

#include "PSDL_Interpreter.h"
#include "PSDL_Node.h"
#include "PSDL_y.h"

static const char * extract_string(char*);

#define TAO_YY_LEX_DEBUG

//#define TAO_YY_LEX_DEBUG ACE_OS::fprintf(stderr, "%s\n", yytext)

#define YY_DECL int TAO_PSDL_yylex (TAO_PSDL_Node **lvalp, void* )

#define YY_BREAK
#define YY_NO_UNPUT


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

//FUZZ: disable check_for_lack_ACE_OS
#ifndef TAO_PSDL_ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define TAO_PSDL_ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif
//FUZZ: enable check_for_lack_ACE_OS

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
  if ( yy_current_buffer->yy_is_interactive ) \
    { \
    int c = '*', n; \
    for ( n = 0; n < max_size && \
         (c = ACE_OS:getc( yyin )) != EOF && c != '\n'; ++n ) \
      buf[n] = (char) c; \
    if ( c == '\n' ) \
      buf[n++] = (char) c; \
    if ( c == EOF && ferror( yyin ) ) \
      YY_FATAL_ERROR( "input in flex scanner failed" ); \
    result = n; \
    } \
  else \
    { \
    errno=0; \
    while ( (result = ACE_OS::fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
      { \
      if( errno != EINTR) \
        { \
        YY_FATAL_ERROR( "input in flex scanner failed" ); \
        break; \
        } \
      errno=0; \
      ACE_OS::clearerr(yyin); \
      } \
    }
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
  YY_USER_ACTION

YY_DECL
  {
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 47 "PSDL.ll"



  if ( yy_init )
    {
    yy_init = 0;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if ( ! yy_start )
      yy_start = 1; /* first start state */

    if ( ! yyin )
      yyin = stdin;

    if ( ! yyout )
      yyout = stdout;

    if ( ! yy_current_buffer )
      yy_current_buffer =
        yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_load_buffer_state();
    }

  while ( 1 )   /* loops until end-of-file is reached */
    {
    yy_cp = yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = yy_start;
yy_match:
    do
      {
      register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
      if ( yy_accept[yy_current_state] )
        {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
        }
      while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 364 )
          yy_c = yy_meta[(unsigned int) yy_c];
        }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
      ++yy_cp;
      }
    while ( yy_base[yy_current_state] != 392 );

yy_find_action:
    yy_act = yy_accept[yy_current_state];
    if ( yy_act == 0 )
      { /* have to back up */
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      yy_act = yy_accept[yy_current_state];
      }

    YY_DO_BEFORE_ACTION;


do_action:  /* This label is used only to access EOF actions. */


    switch ( yy_act )
  { /* beginning of action switch */
      case 0: /* must back up */
      /* undo the effects of YY_DO_BEFORE_ACTION */
      *yy_cp = yy_hold_char;
      yy_cp = yy_last_accepting_cpos;
      yy_current_state = yy_last_accepting_state;
      goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 49 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_SEMI; }
  YY_BREAK
case 2:
YY_RULE_SETUP
#line 50 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_COLON; }
  YY_BREAK
case 3:
YY_RULE_SETUP
#line 51 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OPEN_CURLY_BRACE; }
  YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CLOSE_CURLY_BRACE; }
  YY_BREAK
case 5:
YY_RULE_SETUP
#line 53 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OPEN_BRACE; }
  YY_BREAK
case 6:
YY_RULE_SETUP
#line 54 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CLOSE_BRACE; }
  YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OPEN_ANGULAR_BRACE; }
  YY_BREAK
case 8:
YY_RULE_SETUP
#line 56 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CLOSE_ANGULAR_BRACE; }
  YY_BREAK
case 9:
YY_RULE_SETUP
#line 57 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_COMMA; }
  YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_PLUS; }
  YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_MINUS; }
  YY_BREAK
case 12:
YY_RULE_SETUP
#line 60 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_XOR; }
  YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_AND; }
  YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_MULT; }
  YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_RIGHT_SHIFT; }
  YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_LEFT_SHIFT; }
  YY_BREAK
case 17:
YY_RULE_SETUP
#line 65 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_DIV; }
  YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_PERCENT; }
  YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_TILDA; }
  YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_EQUAL; }
  YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OR; }
  YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_DOUBLE_COLON; }
  YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OPEN_SQUARE_BRACE; }
  YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CLOSE_SQUARE_BRACE; }
  YY_BREAK
case 25:
YY_RULE_SETUP
#line 73 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_IN; }
  YY_BREAK
case 26:
YY_RULE_SETUP
#line 74 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_AS; }
  YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OF; }
  YY_BREAK
case 28:
YY_RULE_SETUP
#line 76 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_KEY; }
  YY_BREAK
case 29:
YY_RULE_SETUP
#line 77 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_REF; }
  YY_BREAK
case 30:
YY_RULE_SETUP
#line 78 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_ANY; }
  YY_BREAK
case 31:
YY_RULE_SETUP
#line 79 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OUT; }
  YY_BREAK
case 32:
YY_RULE_SETUP
#line 80 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CASE; }
  YY_BREAK
case 33:
YY_RULE_SETUP
#line 81 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_INOUT; }
  YY_BREAK
case 34:
YY_RULE_SETUP
#line 82 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CATALOG; }
  YY_BREAK
case 35:
YY_RULE_SETUP
#line 83 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_PROVIDES; }
  YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CHAR; }
  YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_IMPLEMENTS; }
  YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_SCOPE; }
  YY_BREAK
case 39:
YY_RULE_SETUP
#line 87 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STORES; }
  YY_BREAK
case 40:
YY_RULE_SETUP
#line 88 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STATE; }
  YY_BREAK
case 41:
YY_RULE_SETUP
#line 89 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_ABSTRACT; }
  YY_BREAK
case 42:
YY_RULE_SETUP
#line 90 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STORAGETYPE; }
  YY_BREAK
case 43:
YY_RULE_SETUP
#line 91 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STORAGEHOME; }
  YY_BREAK
case 44:
YY_RULE_SETUP
#line 92 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STRONG; }
  YY_BREAK
case 45:
YY_RULE_SETUP
#line 93 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_PRIMARY; }
  YY_BREAK
case 46:
YY_RULE_SETUP
#line 94 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_READONLY; }
  YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_UNION; }
  YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_SWITCH; }
  YY_BREAK
case 49:
YY_RULE_SETUP
#line 97 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_WCHAR; }
  YY_BREAK
case 50:
YY_RULE_SETUP
#line 98 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_BOOLEAN; }
  YY_BREAK
case 51:
YY_RULE_SETUP
#line 99 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OCTET; }
  YY_BREAK
case 52:
YY_RULE_SETUP
#line 100 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_OBJECT; }
  YY_BREAK
case 53:
YY_RULE_SETUP
#line 101 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STRUCT; }
  YY_BREAK
case 54:
YY_RULE_SETUP
#line 102 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_DEFAULT; }
  YY_BREAK
case 55:
YY_RULE_SETUP
#line 103 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_FLOAT; }
  YY_BREAK
case 56:
YY_RULE_SETUP
#line 104 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_DOUBLE; }
  YY_BREAK
case 57:
YY_RULE_SETUP
#line 105 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_LONG; }
  YY_BREAK
case 58:
YY_RULE_SETUP
#line 106 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_SHORT; }
  YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_UNSIGNED; }
  YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_TYPEDEF; }
  YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_NATIVE; }
  YY_BREAK
case 62:
YY_RULE_SETUP
#line 110 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_MODULE; }
  YY_BREAK
case 63:
YY_RULE_SETUP
#line 111 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_ONEWAY; }
  YY_BREAK
case 64:
YY_RULE_SETUP
#line 112 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CONST; }
  YY_BREAK
case 65:
YY_RULE_SETUP
#line 113 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_VOID; }
  YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_RAISES; }
  YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CONTEXT; }
  YY_BREAK
case 68:
YY_RULE_SETUP
#line 116 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_FIXED; }
  YY_BREAK
case 69:
YY_RULE_SETUP
#line 117 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_VALUEBASE; }
  YY_BREAK
case 70:
YY_RULE_SETUP
#line 118 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_EXCEPTION; }
  YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_INTERFACE; }
  YY_BREAK
case 72:
YY_RULE_SETUP
#line 120 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_LOCAL; }
  YY_BREAK
case 73:
YY_RULE_SETUP
#line 121 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_VALUETYPE; }
  YY_BREAK
case 74:
YY_RULE_SETUP
#line 122 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_CUSTOM; }
  YY_BREAK
case 75:
YY_RULE_SETUP
#line 123 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_TRUNCATABLE; }
  YY_BREAK
case 76:
YY_RULE_SETUP
#line 124 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_SUPPORTS; }
  YY_BREAK
case 77:
YY_RULE_SETUP
#line 125 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_STRING; }
  YY_BREAK
case 78:
YY_RULE_SETUP
#line 126 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_WSTRING; }
  YY_BREAK
case 79:
YY_RULE_SETUP
#line 127 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_ATTRIBUTE; }
  YY_BREAK
case 80:
YY_RULE_SETUP
#line 128 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_ENUM; }
  YY_BREAK
case 81:
YY_RULE_SETUP
#line 129 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_SEQUENCE; }
  YY_BREAK
case 82:
YY_RULE_SETUP
#line 130 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_PRIVATE; }
  YY_BREAK
case 83:
YY_RULE_SETUP
#line 131 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_PUBLIC; }
  YY_BREAK
case 84:
YY_RULE_SETUP
#line 132 "PSDL.ll"
{ TAO_YY_LEX_DEBUG; return TAO_PSDL_FACTORY; }
  YY_BREAK
case 85:
YY_RULE_SETUP
#line 133 "PSDL.ll"
{
      *lvalp =
        new TAO_PSDL_Literal ((CORBA::Boolean) 1);
      TAO_YY_LEX_DEBUG; return TAO_PSDL_TRUE;
    }
  YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "PSDL.ll"
{
      *lvalp =
        new TAO_PSDL_Literal ((CORBA::Boolean) 0);
      TAO_YY_LEX_DEBUG; return TAO_PSDL_FALSE;
    }
  YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "PSDL.ll"
{
      *lvalp =
      new TAO_PSDL_Literal (ACE_OS::atoi (yytext));
      TAO_YY_LEX_DEBUG; return TAO_PSDL_INTEGER;
    }
  YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "PSDL.ll"
{
        double v;
      sscanf (yytext, "%lf", &v);
      *lvalp =
        new TAO_PSDL_Literal (v);
      TAO_YY_LEX_DEBUG; return TAO_PSDL_FLOATING_PT;
    }
  YY_BREAK
case 89:
YY_RULE_SETUP
#line 155 "PSDL.ll"
{
      *lvalp =
        new TAO_PSDL_Identifier (yytext);
      TAO_YY_LEX_DEBUG; return TAO_PSDL_IDENT;
    }
  YY_BREAK
case 90:
YY_RULE_SETUP
#line 160 "PSDL.ll"
{
      *lvalp =
        new TAO_PSDL_Literal (extract_string (yytext));
      TAO_YY_LEX_DEBUG; return TAO_PSDL_STRING;
    }
  YY_BREAK
case 91:
YY_RULE_SETUP
#line 165 "PSDL.ll"
{
                  TAO_YY_LEX_DEBUG; break; // Ignore
                }
  YY_BREAK
case 92:
YY_RULE_SETUP
#line 168 "PSDL.ll"
{
      TAO_YY_LEX_DEBUG; break; // Ignore
    }
  YY_BREAK
case 93:
YY_RULE_SETUP
#line 171 "PSDL.ll"
{
                  TAO_YY_LEX_DEBUG; break; // @@ TODO
                }
  YY_BREAK
case 94:
YY_RULE_SETUP
#line 174 "PSDL.ll"
TAO_PSDL_ECHO;
  YY_BREAK
case YY_STATE_EOF(INITIAL):
  yyterminate();

  case YY_END_OF_BUFFER:
    {
    /* Amount of text matched not including the EOB char. */
    int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

    /* Undo the effects of YY_DO_BEFORE_ACTION. */
    *yy_cp = yy_hold_char;
    YY_RESTORE_YY_MORE_OFFSET

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
      {
      /* We're scanning a new file or input source.  It's
       * possible that this happened because the user
       * just pointed yyin at a new source and called
       * yylex().  If so, then we have to assure
       * consistency between yy_current_buffer and our
       * globals.  Here is the right place to do so, because
       * this is the first action (other than possibly a
       * back-up) that will match for the new input source.
       */
      yy_n_chars = yy_current_buffer->yy_n_chars;
      yy_current_buffer->yy_input_file = yyin;
      yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
      }

    /* Note that here we test for yy_c_buf_p "<=" to the position
     * of the first EOB in the buffer, since yy_c_buf_p will
     * already have been incremented past the NUL character
     * (since all states make transitions on EOB to the
     * end-of-buffer state).  Contrast this with the test
     * in input().
     */
    if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
      { /* This was really a NUL. */
      yy_state_type yy_next_state;

      yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

      yy_current_state = yy_get_previous_state();

      /* Okay, we're now positioned to make the NUL
       * transition.  We couldn't have
       * yy_get_previous_state() go ahead and do it
       * for us because it doesn't know how to deal
       * with the possibility of jamming (and we don't
       * want to build jamming into it because then it
       * will run more slowly).
       */

      yy_next_state = yy_try_NUL_trans( yy_current_state );

      yy_bp = yytext_ptr + YY_MORE_ADJ;

      if ( yy_next_state )
        {
        /* Consume the NUL. */
        yy_cp = ++yy_c_buf_p;
        yy_current_state = yy_next_state;
        goto yy_match;
        }

      else
        {
        yy_cp = yy_c_buf_p;
        goto yy_find_action;
        }
      }

    else switch ( yy_get_next_buffer() )
      {
      case EOB_ACT_END_OF_FILE:
        {
        yy_did_buffer_switch_on_eof = 0;

        if ( yywrap() )
          {
          /* Note: because we've taken care in
           * yy_get_next_buffer() to have set up
           * yytext, we can now set up
           * yy_c_buf_p so that if some total
           * hoser (like flex itself) wants to
           * call the scanner after we return the
           * YY_NULL, it'll still work - another
           * YY_NULL will get returned.
           */
          yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

          yy_act = YY_STATE_EOF(YY_START);
          goto do_action;
          }

        else
          {
          if ( ! yy_did_buffer_switch_on_eof )
            YY_NEW_FILE;
          }
        break;
        }

      case EOB_ACT_CONTINUE_SCAN:
        yy_c_buf_p =
          yytext_ptr + yy_amount_of_matched_text;

        yy_current_state = yy_get_previous_state();

        yy_cp = yy_c_buf_p;
        yy_bp = yytext_ptr + YY_MORE_ADJ;
        goto yy_match;

      case EOB_ACT_LAST_MATCH:
        yy_c_buf_p =
        &yy_current_buffer->yy_ch_buf[yy_n_chars];

        yy_current_state = yy_get_previous_state();

        yy_cp = yy_c_buf_p;
        yy_bp = yytext_ptr + YY_MORE_ADJ;
        goto yy_find_action;
      }
    break;
    }

  default:
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--no action found" );
  } /* end of action switch */
    } /* end of scanning one token */
  } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
  {
  register char *dest = yy_current_buffer->yy_ch_buf;
  register char *source = yytext_ptr;
  register int number_to_move, i;
  int ret_val;

  if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
    YY_FATAL_ERROR(
    "fatal flex scanner internal error--end of buffer missed" );

  if ( yy_current_buffer->yy_fill_buffer == 0 )
    { /* Don't try to fill the buffer, so this is an EOF. */
    if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
      {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
      }

    else
      {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
      }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

  for ( i = 0; i < number_to_move; ++i )
    *(dest++) = *(source++);

  if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_current_buffer->yy_n_chars = yy_n_chars = 0;

  else
    {
    int num_to_read =
      yy_current_buffer->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
      { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
      YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = yy_current_buffer;

      int yy_c_buf_p_offset =
        (int) (yy_c_buf_p - b->yy_ch_buf);

      if ( b->yy_is_our_buffer )
        {
        int new_size = b->yy_buf_size * 2;

        if ( new_size <= 0 )
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          yy_flex_realloc( (void *) b->yy_ch_buf,
               b->yy_buf_size + 2 );
        }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR(
        "fatal error - scanner input buffer overflow" );

      yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = yy_current_buffer->yy_buf_size -
            number_to_move - 1;
#endif
      }

    if ( num_to_read > YY_READ_BUF_SIZE )
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
      yy_n_chars, num_to_read );

    yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  if ( yy_n_chars == 0 )
    {
    if ( number_to_move == YY_MORE_ADJ )
      {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart( yyin );
      }

    else
      {
      ret_val = EOB_ACT_LAST_MATCH;
      yy_current_buffer->yy_buffer_status =
        YY_BUFFER_EOF_PENDING;
      }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yy_n_chars += number_to_move;
  yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

  return ret_val;
  }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
  {
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = yy_start;

  for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
    {
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if ( yy_accept[yy_current_state] )
      {
      yy_last_accepting_state = yy_current_state;
      yy_last_accepting_cpos = yy_cp;
      }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
      {
      yy_current_state = (int) yy_def[yy_current_state];
      if ( yy_current_state >= 364 )
        yy_c = yy_meta[(unsigned int) yy_c];
      }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
  }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
  {
  register int yy_is_jam;
  register char *yy_cp = yy_c_buf_p;

  register YY_CHAR yy_c = 1;
  if ( yy_accept[yy_current_state] )
    {
    yy_last_accepting_state = yy_current_state;
    yy_last_accepting_cpos = yy_cp;
    }
  while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 364 )
      yy_c = yy_meta[(unsigned int) yy_c];
    }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 363);

  return yy_is_jam ? 0 : yy_current_state;
  }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
  {
  register char *yy_cp = yy_c_buf_p;

  /* undo effects of setting up yytext */
  *yy_cp = yy_hold_char;

  if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
    { /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = yy_n_chars + 2;
    register char *dest = &yy_current_buffer->yy_ch_buf[
          yy_current_buffer->yy_buf_size + 2];
    register char *source =
        &yy_current_buffer->yy_ch_buf[number_to_move];

    while ( source > yy_current_buffer->yy_ch_buf )
      *--dest = *--source;

    yy_cp += (int) (dest - source);
    yy_bp += (int) (dest - source);
    yy_current_buffer->yy_n_chars =
      yy_n_chars = yy_current_buffer->yy_buf_size;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
      YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }

  *--yy_cp = (char) c;


  yytext_ptr = yy_bp;
  yy_hold_char = *yy_cp;
  yy_c_buf_p = yy_cp;
  }
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
  {
  int c;

  *yy_c_buf_p = yy_hold_char;

  if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
    {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
      /* This was really a NUL. */
      *yy_c_buf_p = '\0';

    else
      { /* need more input */
      int offset = yy_c_buf_p - yytext_ptr;
      ++yy_c_buf_p;

      switch ( yy_get_next_buffer() )
        {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart( yyin );

          /* fall through */

        case EOB_ACT_END_OF_FILE:
          {
          if ( yywrap() )
            return EOF;

          if ( ! yy_did_buffer_switch_on_eof )
            YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput();
#else
          return input();
#endif
          }

        case EOB_ACT_CONTINUE_SCAN:
          yy_c_buf_p = yytext_ptr + offset;
          break;
        }
      }
    }

  c = *(unsigned char *) yy_c_buf_p;  /* cast for 8-bit char's */
  *yy_c_buf_p = '\0'; /* preserve yytext */
  yy_hold_char = *++yy_c_buf_p;


  return c;
  }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
  {
  if ( ! yy_current_buffer )
    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

  yy_init_buffer( yy_current_buffer, input_file );
  yy_load_buffer_state();
  }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
  {
  if ( yy_current_buffer == new_buffer )
    return;

  if ( yy_current_buffer )
    {
    /* Flush out information for old buffer. */
    *yy_c_buf_p = yy_hold_char;
    yy_current_buffer->yy_buf_pos = yy_c_buf_p;
    yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  yy_current_buffer = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yy_did_buffer_switch_on_eof = 1;
  }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
  {
  yy_n_chars = yy_current_buffer->yy_n_chars;
  yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
  yyin = yy_current_buffer->yy_input_file;
  yy_hold_char = *yy_c_buf_p;
  }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
  {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
  if ( ! b )
    YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
  if ( ! b->yy_ch_buf )
    YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

  b->yy_is_our_buffer = 1;

  yy_init_buffer( b, file );

  return b;
  }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
  {
  if ( ! b )
    return;

  if ( b == yy_current_buffer )
    yy_current_buffer = (YY_BUFFER_STATE) 0;

  if ( b->yy_is_our_buffer )
    yy_flex_free( (void *) b->yy_ch_buf );

  yy_flex_free( (void *) b );
  }


#ifndef _Win32
#include "ace/Synch.h"
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


  {
  yy_flush_buffer( b );

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
  b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
  b->yy_is_interactive = 0;
#else
  b->yy_is_interactive = file ? (ACE_OS::ace_isatty( fileno(file) ) > 0) : 0;
#endif
#endif
  }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

  {
  if ( ! b )
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if ( b == yy_current_buffer )
    yy_load_buffer_state();
  }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
  {
  YY_BUFFER_STATE b;

  if ( size < 2 ||
       base[size-2] != YY_END_OF_BUFFER_CHAR ||
       base[size-1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
    return 0;

  b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
  if ( ! b )
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

  b->yy_buf_size = size - 2;  /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = 0;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer( b );

  return b;
  }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
  {
  int len;
  for ( len = 0; yy_str[len]; ++len )
    ;

  return yy_scan_bytes( yy_str, len );
  }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
  {
  YY_BUFFER_STATE b;
  char *buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = len + 2;
  buf = (char *) yy_flex_alloc( n );
  if ( ! buf )
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

  for ( i = 0; i < len; ++i )
    buf[i] = bytes[i];

  buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer( buf, n );
  if ( ! b )
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
  }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
  {
  if ( yy_start_stack_ptr >= yy_start_stack_depth )
    {
    yy_size_t new_size;

    yy_start_stack_depth += YY_START_STACK_INCR;
    new_size = yy_start_stack_depth * sizeof( int );

    if ( ! yy_start_stack )
      yy_start_stack = (int *) yy_flex_alloc( new_size );

    else
      yy_start_stack = (int *) yy_flex_realloc(
          (void *) yy_start_stack, new_size );

    if ( ! yy_start_stack )
      YY_FATAL_ERROR(
      "out of memory expanding start-condition stack" );
    }

  yy_start_stack[yy_start_stack_ptr++] = YY_START;

  BEGIN(new_state);
  }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
  {
  if ( --yy_start_stack_ptr < 0 )
    YY_FATAL_ERROR( "start-condition stack underflow" );

  BEGIN(yy_start_stack[yy_start_stack_ptr]);
  }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
  {
  return yy_start_stack[yy_start_stack_ptr - 1];
  }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
  {
  (void) ACE_OS::fprintf( stderr, "%s\n", msg );
  ACE_OS::exit( YY_EXIT_FAILURE );
  }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
  do \
    { \
    /* Undo effects of setting up yytext. */ \
    yytext[yyleng] = yy_hold_char; \
    yy_c_buf_p = yytext + n; \
    yy_hold_char = *yy_c_buf_p; \
    *yy_c_buf_p = '\0'; \
    yyleng = n; \
    } \
  while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
  {
  register int i;
  for ( i = 0; i < n; ++i )
    s1[i] = s2[i];
  }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
  {
  register int n;
  for ( n = 0; s[n]; ++n )
    ;

  return n;
  }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
  {
  return (void *) ACE_OS::malloc( size );
  }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
  {
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
   return (void *) ACE_OS::realloc( (char *) ptr, size );
  }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
  {
  ACE_OS::free( ptr );
  }

#if YY_MAIN
int main()
  {
  yylex();
  return 0;
  }
#endif
#line 174 "PSDL.ll"


const char*
extract_string(char* str)
{
  char *t = str;
  for (char * i = str + 1; *i != '\''; ++i, ++t)
    {
      if (*i == '\\')
        {
          ++i;
          if (*i == 0)
            return 0;
          else if (*i == 't')
            *t = '\t';
          else if (*i == 'n')
            *t = '\n';
          else if (*i == '\\')
            *t = '\\';
          else
            *t = *i;
          continue;
        }

      *t = *i;
    }

  *t = '\0';
  return str;
}

int
yywrap ()
{
  return 1;
}
