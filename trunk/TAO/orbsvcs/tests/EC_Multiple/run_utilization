#!/bin/sh
#
# $Id$
#

MSG_INTERVAL=5000
# The interval between the messages, in usecs

UTL_COUNT=2500
# The number of iterations in the scavenger thread; each iteration is
# (roughly) 20 usecs (On a Sparc Ultra 30); and the number of
# iterations must be high enough so all the messages are sent while
# the scavenger is still running.

PUSH_COUNTS="5000 10000 100000"
# The number of messages sent on each test...

MSG_COUNT=50

/bin/rm -f NameService.ior NameService.pid EC1.pid EC2.pid EC.pid

# Generate the baseline data, i.e. shortcircuit the EC.

for i in $PUSH_COUNTS; do
  echo Local EC test $i
  ../../Naming_Service/Naming_Service -ORBport 20000 \
    -o NameService.ior -p NameService.pid >/dev/null 2>&1 &
  sleep 2
  NameService=`cat NameService.ior`
  export NameService
  ./EC_Multiple -ORBport 20010 -l EC1 -s RUNTIME1 \
    -a 1 -b 2 -c 2 -m $MSG_COUNT -u $UTL_COUNT -w $i \
    -i $MSG_INTERVAL -p EC1.pid > UTL.LCL.${i}.log 2>&1
  kill `cat NameService.pid`

done

exit 0


  echo Short circuit test $i
  sleep 1    
  ./EC_Multiple -ORBport 20010 -l EC1 -s RUNTIME1 \
    -a 1 -b 2 -c 2 -m $MSG_COUNT -u $UTL_COUNT -w $i \
    -i $MSG_INTERVAL -x > UTL.X.${i}.log 2>&1

  echo Remote EC test $i
  ../../Naming_Service/Naming_Service -ORBport 20000 \
    -o NameService.ior -p NameService.pid >/dev/null 2>&1 &
  sleep 2
  NameService=`cat NameService.ior`
  export NameService
  ./EC_Multiple -ORBport 20010 -l EC1 -r EC2 -s RUNTIME1 -o RUNTIME2 \
    -a 1 -b 2 -c 3 -p EC1.pid -m $MSG_COUNT -u $UTL_COUNT -w $i \
    -i $MSG_INTERVAL > UTL.RMT1.${i}.log 2>&1 &
  ./EC_Multiple -ORBport 20020 -l EC2 -r EC1 -s RUNTIME2 -o RUNTIME1 \
    -a 4 -b 3 -c 2 -p EC2.pid -m $MSG_COUNT -u $UTL_COUNT -w $i \
    -i $MSG_INTERVAL > UTL.RMT2.${i}.log 2>&1 &
  sleep 2
  wait `cat EC1.pid`
  wait `cat EC2.pid`
  kill `cat NameService.pid`
  wait
