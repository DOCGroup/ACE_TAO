README,v 1.0 2003/07/09

This is a test for RTCORBA 1.0 scheduling Service.

Matt Murphy <murphym@cs.uri.edu>
University of Rhode Island

Scenario:
--------
Client nodes connect to a server to make object calls to execute
on the server.  An offline analysis tool has determined appropriate
priorities for each task on the system.  These priorities are stored
in a configuration file.

The server is started with the appropriate object instantiated that
will be used by the clients, and the server has created a local
ServerScheduler object, which sets the RT policies necessary for
the scheduling service to execute (set through the
ServerScheduler->create_POA(...) method.). The Client creates a local
ClientScheduler object, which read the configuration file and stores
the activity/priority relationships for the given node.  Clients make
a schedule_activity("activity_name") call to the ClientScheduler
object to set the local system priority as specified by the activity name.

When a client makes a CORBA call on an object residing on the server,
the Client Propagated Priority policy (set in ServerScheduler)
ensures that the server receives the priority the client runs at.  A
ServerScheduler receive_request() interceptor intercepts the method
call and locks the thread while there are higher priority tasks executing
on the server.  The ServerScheduler then sets the server thread to
run using MPCP while the task executes.  A ServerScheduler send_reply
interceptor lowers the server thread priority when execution is complete.


To compile (on unix):
----------
Ensure that RTCosScheduling is compiled.  There should be a
libTAO_RTCosScheduling.so file in $ACE_ROOT/TAO/orbsvcs/orbsvcs.

If it is not there, run
tao_idl -I $TAO_ROOT/ RTCosScheduling.pidl
in $ACE_ROOT/TAO/orbsvcs/orbsvcs/RTCoscScheduler/
When this is done, some versions of TAO will erroneously include the line:
#include "tao/PortableServer/PortableServerS.h"
in RTCosSchedulingS.h.  Comment this line out.

Now from the $ACE_ROOT/TAO/orbsvcs/orbsvcs/ directory, run
make -f Makefile.RTCosScheduling


To compile the test, just run make in the test directory


To run (on Unix):
-------
Run the test as root since this test sets the priorities on
both the client and server.
Make sure that your LD_LIBRARY_PATH and TAO_ROOT are set apprioriately:

# ./run_test.pl


Options:
--------
Client:
-B int    # amount of work performed before the CORBA call is made
-R int    # amount of work performed on server during the CORBA call
-A int    # amount of work performed after the corba call
-N char*  # name of the node
-X 0|1    # Flag to use yealtime (Y=1)
-C char*  # intermediate client output file
            #  (used by the run_test validator)
-S char*  # intermediate server output file
            #  (used by the run_test validator)
-F char*  # name of the configuration file that their
            # activities/priorities/resources are stored in
-T char*  # name of the activity that the client will run

Server:
-N char*  # The name of the node
-F char*  # The name of the configuration file
-A char*  # the name of the server resource
-X 1|0    # Flag to use realtime (Y=1)

Tests
---------

Functionality Tests
-------------------
Test1  ensures that the scheduling service works as expected.
Three clients are started with the following parameters:

Client      priority      release time      remote execution time
Client1     Low           0                 30
Client2     Medium        0                 3
Client3     High          2                 3

Where release time is the amount of work done on the local client before
the remote method call is made.  Each remote method call is made on the
same server object, so the ServerScheduler must schedule execution of
each of these three clients so that they use the remote object in the
appropriate order.

Note that the scheduling service is only tested when both the client and
the server are using the 1.0 scheduler. (Test1)
In the functionality tests the clients start up at the same time.  Client1
immediately makes a remote method call to the server.  Clients 2 and 3
make method calls to the server object that arrive while the client 1
method call is still executing on the server. MPCP guarantees that
client1's priority is elevated so that it is allowed to finish, so clients
2 and 3 are placed in a pending queue to await execution.  Once client
1 finishes, the activity in queue with the highest client propagated
priority (client3) runs.  When it is finished, client 2 runs.

When Client1 execution returns from the method call it is blocked in this
test because it runs at a lower priority than the server execution of
clients 2 and 3 (this is because this test is designed to run on a single
node!).

When clients 2 and 3 return from the method call, client 3 finishes execution
because it has the highest priority, then client2 finishes, finally client 1.

If the scheduling service test failed an error message will appear describing
the point of failure.  Please note that some artificial changes to the client
and server object code since this test is designed to run on one node.
Specifically, there is an ACE_OS::sleep(2) in object1_i::method1() that
executes only when client1 makes the method call.  This is because the client1
method call is running at an elevated MPCP priority, and needs to sleep long
enough for clients 2 and 3 to execute on the client and make method calls on
object1.  If it did not sleep, the method1() method call would execute to
completion due the singe node nature of this test. (It is running at an
elevated priority on the same processor as the clients 2 and 3).

There is also a sleep method in the client code that sleeps for 1 as soon as
each client starts up.  This occurs before schedule activity is called, and is
in place to allow each client to start up in the event that the default
priority for new processes is higher than the the priorities set in the config
file.  If the default priority was higher and the clients did not sleep, each
would not let the sucessive one start at the appropriate time.

Please note that in designing a test that since this runs on a single node, there
is no noticeable network delay.  There will be a greater network delay on a truly
distributed system.  If the test does not run correctly on you machine, try 
changing the sleep delays to allow all processes to start.  If they all start, 
the test should work.


Tests 2,3,4 do not execute with both ClientScheduler and a ServerScheduler
so there is no way to validate that execution is appropriate.  In test 2,
visual inspection of the output shows that tasks are scheduled on the client
appropriately.  Similarly, test 3 uses MPCP on the server, but is using the
default priority that the client ran at rather than a priority set on the
client by a schedule_activity() call.



Exception Tests
---------------
Tests 5,6,7,8 ensure that the 1.0 scheduling service handles excpetions
and other errors.
These test determine that the proper exceptions are thrown when the
scheduling service receives improper parameters from either the Client
or the server.



Expected Output
---------------
==== Running RTCORBA 1.0 Scheduling Service test
==== Note that the first column is the time, it will be different for you

TIME                    OBJECT  LOCATION        ACTIVITY

==== Test1 - YES client side scheduling, YES server side scheduling
 14:05:38.691428        Client1 Client  Beginning Activity with priority 668
 14:05:38.692174        Client1 Client  Calling method1 at priority 668
 14:05:38.702362        Client1 Server  Beginning work on the server
 14:05:39.695854        Client2 Client  Beginning Activity with priority 2674
 14:05:39.965150        Client3 Client  Beginning Activity with priority 4681
 14:05:40.233140        Client3 Client  Calling method1 at priority 4681
 14:05:40.235364        Client2 Client  Calling method1 at priority 2674
 14:05:44.700578        Client1 Server  Method1 finished work on the server
 14:05:44.701183        Client3 Server  Beginning work on the server
 14:05:45.103074        Client3 Server  Method1 finished work on the server
 14:05:45.103365        Client2 Server  Beginning work on the server
 14:05:45.503888        Client2 Server  Method1 finished work on the server
 14:05:45.504470        Client3 Client  Done with method1 with priority 4681
 14:05:45.504529        Client3 Client  Done with test at priority 4681
 14:05:45.508665        Client2 Client  Done with method1 with priority 2674
 14:05:45.508786        Client2 Client  Done with test at priority 2674
 14:05:45.512861        Client1 Client  Done with method1 with priority 668
 14:05:45.512929        Client1 Client  Done with test at priority 668
The scheduling service worked as expected

==== Test2 - NO client side scheduling, YES server side scheduling
 14:05:47.708843        Client1 Client  Beginning Activity
 14:05:47.709428        Client1 Client  Calling method1
 14:05:47.718302        Client1 Server  Beginning work on the server
 14:05:48.710637        Client2 Client  Beginning Activity
 14:05:48.710847        Client2 Client  Calling method1
 14:05:48.714555        Client3 Client  Beginning Activity
 14:05:48.984240        Client3 Client  Calling method1
 14:05:48.986737        Client2 Server  Beginning work on the server
 14:05:48.992367        Client3 Server  Beginning work on the server
 14:05:49.754084        Client2 Server  Method1 finished work on the server
 14:05:49.754667        Client2 Client  Done with method1
 14:05:50.182869        Client3 Server  Method1 finished work on the server
 14:05:50.183503        Client3 Client  Done with method1
 14:05:54.586684        Client1 Server  Method1 finished work on the server
 14:05:54.587270        Client1 Client  Done with method1

==== Test3 - YES client side scheduling, NO server side scheduling
 14:05:59.734408        Client1 Client  Beginning Activity with priority 668
 14:05:59.735149        Client1 Client  Calling method1 at priority 668
 14:05:59.748380        Client1 Server  Beginning work on the server
 14:06:00.738820        Client2 Client  Beginning Activity with priority 2674
 14:06:01.008121        Client3 Client  Beginning Activity with priority 4681
 14:06:01.276250        Client3 Client  Calling method1 at priority 4681
 14:06:01.278463        Client2 Client  Calling method1 at priority 2674
 14:06:01.284581        Client3 Server  Beginning work on the server
 14:06:01.685291        Client3 Server  Method1 finished work on the server
 14:06:01.686140        Client3 Client  Done with method1 with priority 4681
 14:06:01.686199        Client3 Client  Done with test at priority 4681
 14:06:01.692324        Client2 Server  Beginning work on the server
 14:06:02.092657        Client2 Server  Method1 finished work on the server
 14:06:02.093181        Client2 Client  Done with method1 with priority 2674
 14:06:02.093237        Client2 Client  Done with test at priority 2674
 14:06:06.102033        Client1 Server  Method1 finished work on the server
 14:06:06.102576        Client1 Client  Done with method1 with priority 668
 14:06:06.102631        Client1 Client  Done with test at priority 668

==== Test4 - NO client side scheduling, NO server side scheduling
 14:06:08.750219        Client1 Client  Beginning Activity
 14:06:08.750789        Client1 Client  Calling method1
 14:06:08.760283        Client1 Server  Beginning work on the server
 14:06:09.751665        Client2 Client  Beginning Activity
 14:06:09.751877        Client2 Client  Calling method1
 14:06:09.755382        Client3 Client  Beginning Activity
 14:06:10.025305        Client3 Client  Calling method1
 14:06:10.027841        Client2 Server  Beginning work on the server
 14:06:10.101792        Client3 Server  Beginning work on the server
 14:06:10.736601        Client2 Server  Method1 finished work on the server
 14:06:10.737125        Client2 Client  Done with method1
 14:06:11.238066        Client3 Server  Method1 finished work on the server
 14:06:11.238607        Client3 Client  Done with method1
 14:06:15.644066        Client1 Server  Method1 finished work on the server
 14:06:15.644596        Client1 Client  Done with method1

==== Testing exceptions

==== Test5 - Testing ClientScheduler exception for invalid activity name
(11071|16386) EXCEPTION, Invalid activity name

user exception, ID 'IDL:RTCosScheduling/UnknownName:1.0'

==== Test6 - Testing client exception when invalid config file specified
Could not find the config file INVALID_FILE.cfg, aborting

==== Test7 - Testing server exception when invalid Object Name specified
==== (Object name not in config file)
(11075|16384) EXCEPTION, Unknown object passed to schedule_object

user exception, ID 'IDL:RTCosScheduling/UnknownName:1.0'

==== Test8 - Testing server exception when invalid config file specified
Could not find the config file INVALID_FILE.cfg, aborting
ERROR: server returned 1





