// $Id$

project(ImR_Activator_IDL) : orbsvcslib, portableserver, messaging {
  sharedname = TAO_ImR_Activator_IDL
  dynamicflags = ACTIVATOR_IDL_BUILD_DLL
  idlflags += -GH -Wb,export_macro=ActivatorIDL_Export -Wb,export_include=activator_idl_export.h
  idl_files {
    ImR_Activator.idl
  }
  source_files {
    ImR_ActivatorS.cpp
    ImR_ActivatorC.cpp
  }
  header_files {
    activator_idl_export.h
  }
}

project(ImR_Locator_IDL) : orbsvcslib, valuetype, portableserver {
  sharedname   = TAO_ImR_Locator_IDL
  after       += ImR_Activator_IDL
  libs        += TAO_ImR_Activator_IDL
  dynamicflags = LOCATOR_IDL_BUILD_DLL
  idlflags    += -Wb,export_macro=LocatorIDL_Export -Wb,export_include=locator_idl_export.h
  idl_files {
    ImR_Locator.idl
  }
  source_files {
    ImR_LocatorS.cpp
    ImR_LocatorC.cpp
  }
  header_files {
    locator_idl_export.h
  }
}

project(ImR_Activator) : orbsvcslib, core, acexml, minimum_corba, valuetype, portableserver {
  sharedname   = TAO_ImR_Activator
  dynamicflags = ACTIVATOR_BUILD_DLL
  after       += ImR_Activator_IDL ImR_Locator_IDL
  libs        += TAO_ImR_Activator_IDL TAO_ImR_Locator_IDL
  Source_Files {
    ImR_Activator_i.cpp
    Activator_Options.cpp
    Activator_Loader.cpp
  }
  header_files {
    activator_export.h
  }
  idl_files {
  }
}

project(ImR_Locator) : orbsvcslib, core, minimum_corba, iortable, portableserver, messaging, svc_utils, acexml {
  sharedname   = TAO_ImR_Locator
  dynamicflags = LOCATOR_BUILD_DLL
  after       += ImR_Locator_IDL ImR_Activator_IDL
  libs        += TAO_ImR_Locator_IDL TAO_ImR_Activator_IDL
  Source_Files {
    Activator_Info.cpp
    Adapter_Activator.cpp
    Forwarder.cpp
    ImR_Locator_i.cpp
    INS_Locator.cpp
    Locator_XMLHandler.cpp
    Locator_Loader.cpp
    Locator_Options.cpp
    Iterator.cpp
    Server_Info.cpp
    Locator_Repository.cpp
  }
  header_files {
    utils.h
    locator_export.h
  }
  idl_files {
  }
}

project(ImR_Locator_Service) : orbsvcsexe, core, minimum_corba, iortable, messaging, acexml ,svc_utils {
  exename  = ImplRepo_Service
  after   += ImR_Locator ImR_Activator_IDL ImR_Locator_IDL
  libs    += TAO_ImR_Locator TAO_ImR_Activator_IDL TAO_ImR_Locator_IDL

  // Static Debug builds on Windows will not link properly due
  // to a linker bug.  It complains that the ACEXML library duplicates
  // a couple of template instantiations from the TAO_ImR_Locator library.
  // This option works around that bug.  Unfortunately, there is no way to
  // narrow the options down to only static debug builds.
  specific(em3, nmake, vc6, vc71) {
    link_options += /FORCE:MULTIPLE
  }

  Source_Files {
    ImR_Locator.cpp
    Locator_NT_Service.cpp
  }
  idl_files {
  }
}


project(ImR_Activator_Service) : orbsvcsexe, core, acexml, minimum_corba, messaging, svc_utils {
  exename  = ImR_Activator
  after   += ImR_Activator ImR_Activator_IDL ImR_Locator_IDL
  libs    += TAO_ImR_Activator TAO_ImR_Activator_IDL TAO_ImR_Locator_IDL
  Source_Files {
    ImR_Activator.cpp
    Activator_NT_Service.cpp
  }
  idl_files {
  }
}


project(tao_imr) : orbsvcsexe, core, minimum_corba, portableserver {
  exename  = tao_imr
  install  = $(ACE_ROOT)/bin
  Source_Files {
    tao_imr.cpp
    tao_imr_i.cpp
  }
  idl_files {
  }
}
