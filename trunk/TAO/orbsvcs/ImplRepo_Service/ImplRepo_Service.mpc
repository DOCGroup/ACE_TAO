// $Id$

project(ImR_Activator_IDL) : orbsvcslib, orbsvcs_output, conv_lib, portableserver, imr_client, tao_versioning_idl_defaults {
  sharedname = TAO_ImR_Activator_IDL
  dynamicflags += ACTIVATOR_IDL_BUILD_DLL
  idlflags += -Wb,export_macro=ActivatorIDL_Export -Wb,export_include=activator_idl_export.h
  idl_files {
    ImR_Activator.idl
  }
  source_files {
    ImR_ActivatorS.cpp
    ImR_ActivatorC.cpp
  }
  header_files {
    activator_idl_export.h
  }
}

project(ImR_Locator_IDL) : orbsvcslib, orbsvcs_output, conv_lib, valuetype, portableserver, imr_client, messaging, tao_versioning_idl_defaults {
  sharedname   = TAO_ImR_Locator_IDL
  after       += ImR_Activator_IDL
  libs        += TAO_ImR_Activator_IDL
  // Dont try to build this project if ImR_Activator_IDL is not built

  dynamicflags += LOCATOR_IDL_BUILD_DLL
  idlflags    += -Wb,export_macro=LocatorIDL_Export -Wb,export_include=locator_idl_export.h
  idl_files {
    ImR_Locator.idl
  }

  idl_files {
    idlflags    += -GH
    AsyncStartupWaiter.idl
  }

  source_files {
    ImR_LocatorS.cpp
    ImR_LocatorC.cpp
    AsyncStartupWaiterS.cpp
    AsyncStartupWaiterC.cpp
  }
  header_files {
    locator_idl_export.h
  }
}

project(ImR_Activator) : orbsvcslib, orbsvcs_output, conv_lib, acexml, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, valuetype, portableserver, imr_client, messaging, pi, codecfactory {
  sharedname   = TAO_ImR_Activator
  dynamicflags += ACTIVATOR_BUILD_DLL
  after       += ImR_Activator_IDL ImR_Locator_IDL
  libs        += TAO_ImR_Activator_IDL TAO_ImR_Locator_IDL
  // Dont try to build this project if ImR_Activator_IDL is not built

  Source_Files {
    ImR_Activator_i.cpp
    Activator_Options.cpp
    Activator_Loader.cpp
  }
  header_files {
    activator_export.h
  }
  idl_files {
  }
}

project(ImR_Locator) : orbsvcslib, orbsvcs_output, conv_lib, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, iortable, portableserver, messaging, svc_utils, acexml, imr_client {
  sharedname   = TAO_ImR_Locator
  dynamicflags += LOCATOR_BUILD_DLL
  after       += ImR_Locator_IDL ImR_Activator_IDL
  libs        += TAO_ImR_Locator_IDL TAO_ImR_Activator_IDL
  avoids      += uses_wchar
  Source_Files {
    Activator_Info.cpp
    Adapter_Activator.cpp
    Forwarder.cpp
    ImR_Locator_i.cpp
    AsyncStartupWaiter_i.cpp
    INS_Locator.cpp
    Locator_XMLHandler.cpp
    Locator_Loader.cpp
    Locator_Options.cpp
    Iterator.cpp
    Server_Info.cpp
    Locator_Repository.cpp
  }
  header_files {
    utils.h
    locator_export.h
  }
  idl_files {
  }
}

project(ImR_Locator_Service) : orbsvcsexe, install, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, iortable, messaging, acexml ,svc_utils, pi_server, imr_client {
  exename  = tao_imr_locator
  after   += ImR_Locator ImR_Activator_IDL ImR_Locator_IDL
  libs    += TAO_ImR_Locator TAO_ImR_Activator_IDL TAO_ImR_Locator_IDL
  avoids  += uses_wchar

  // Static Debug builds on Windows will not link properly due
  // to a linker bug.  It complains that the ACEXML library duplicates
  // a couple of template instantiations from the TAO_ImR_Locator library.
  // The FORCE:MULTIPLE option works around that bug.  Unfortunately,
  // there is no way to narrow the options down to only static debug builds.
  // Incremental linking has also been turned off since it is
  // incompatible with this option, producing warnings at link time.
  specific(em3, nmake, vc6, vc71) {
    link_options += /FORCE:MULTIPLE /INCREMENTAL:NO
  }

  Source_Files {
    ImR_Locator.cpp
    Locator_NT_Service.cpp
  }
  idl_files {
  }
}


project(ImR_Activator_Service) : orbsvcsexe, install, acexml, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, messaging, svc_utils, imr_client {
  exename  = tao_imr_activator
  after   += ImR_Activator ImR_Activator_IDL ImR_Locator_IDL
  libs    += TAO_ImR_Activator TAO_ImR_Activator_IDL TAO_ImR_Locator_IDL
  Source_Files {
    ImR_Activator.cpp
    Activator_NT_Service.cpp
  }
  idl_files {
  }
}


project(tao_imr) : orbsvcsexe, install, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, portableserver, imr_client {
  exename  = tao_imr
  Source_Files {
    tao_imr.cpp
    tao_imr_i.cpp
  }
  idl_files {
  }
  InstallData_Files {
    gendir = .
    README
  }
}
