--- InterfaceS.cpp	Fri Dec 01 16:26:23 2000
+++ ..\..\..\orbsvcs\IFR_Service\InterfaceS.cpp	Wed Nov 29 01:50:02 2000
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -23,6 +23,8 @@
 #include "tao/PortableServer/Object_Adapter.h"
 #include "tao/PortableServer/Operation_Table.h"
 
+ACE_RCSID(IFR_Service, IFR_skel, "$Id$")
+
 #if !defined (__ACE_INLINE__)
 #include "InterfaceS.i"
 #endif /* !defined INLINE */
@@ -34,7 +36,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:20 */
+/* starting time is 22:05:52 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_CORBA_IRObject_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -107,9 +109,9 @@
       {"",0},{"",0},{"",0},{"",0},{"",0},
       {"_is_a",  &POA_CORBA::IRObject::_is_a_skel},
       {"",0},
-      {"destroy", 	&POA_CORBA::IRObject::destroy_skel},
+      {"destroy",       &POA_CORBA::IRObject::destroy_skel},
       {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_get_def_kind", 	&POA_CORBA::IRObject::_get_def_kind_skel},
+      {"_get_def_kind",         &POA_CORBA::IRObject::_get_def_kind_skel},
       {"_non_existent",  &POA_CORBA::IRObject::_non_existent_skel},
     };
 
@@ -127,16 +129,16 @@
     }
   return 0;
 }
-/* ending time is 10:26:20 */
+/* ending time is 22:05:52 */
 static TAO_CORBA_IRObject_Perfect_Hash_OpTable tao_CORBA_IRObject_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker *POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker::the_TAO_IRObject_Strategized_Proxy_Broker (void)
+POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker *
+POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker::the_TAO_IRObject_Strategized_Proxy_Broker (void)
 {
   static POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
@@ -156,7 +158,7 @@
   
 }
 
-CORBA::_TAO_IRObject_Proxy_Impl&
+_TAO_IRObject_Proxy_Impl&
 POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker::select_proxy (
     ::CORBA::IRObject *object,
     CORBA::Environment &ACE_TRY_ENV
@@ -190,7 +192,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl,
+              _TAO_IRObject_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -200,7 +202,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::CORBA::_TAO_IRObject_Remote_Proxy_Impl,
+              ::_TAO_IRObject_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -217,26 +219,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-CORBA::_TAO_IRObject_Proxy_Broker *
-CORBA__TAO_IRObject_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_IRObject_Proxy_Broker *
+_TAO_IRObject_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker::the_TAO_IRObject_Strategized_Proxy_Broker();
+  return POA_CORBA::_TAO_IRObject_Strategized_Proxy_Broker::the_TAO_IRObject_Strategized_Proxy_Broker();
 }
 
 int
-CORBA__TAO_IRObject_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_IRObject_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer = 
-    CORBA__TAO_IRObject_Proxy_Broker_Factory_function;
+  _TAO_IRObject_Proxy_Broker_Factory_function_pointer = 
+    _TAO_IRObject_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int CORBA__TAO_IRObject_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  CORBA__TAO_IRObject_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, CORBA__TAO_IRObject_Proxy_Broker_Factory_Initializer));
+static int _TAO_IRObject_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_IRObject_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_IRObject_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -246,9 +248,13 @@
 POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl::_TAO_IRObject_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl::~_TAO_IRObject_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
-IR::DefinitionKind POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl::def_kind (
+IR_DefinitionKind 
+POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl::def_kind (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -256,7 +262,7 @@
     CORBA::SystemException
   ))
 {
-    IR::DefinitionKind _tao_retval;
+    IR_DefinitionKind _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -279,7 +285,8 @@
       );
 }
 
-void POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl::destroy (
+void 
+POA_CORBA::_TAO_IRObject_ThruPOA_Proxy_Impl::destroy (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -331,124 +338,49 @@
 
 void POA_CORBA::IRObject::_get_def_kind_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   POA_CORBA::IRObject *_tao_impl = (POA_CORBA::IRObject *)_tao_object_reference;
 
-  IR::DefinitionKind _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get ri (
-      "_get_def_kind",
-      _tao_server_request.service_info (),
+  IR_DefinitionKind _tao_retval;
+
+  _tao_retval = _tao_impl->def_kind (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->def_kind (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::DefinitionKind _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_CORBA::IRObject::destroy_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_CORBA::IRObject *_tao_impl = (POA_CORBA::IRObject *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-  #if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_destroy ri (
-      "destroy",
-      _tao_server_request.service_info (),
+  _tao_impl->destroy (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_impl->destroy (
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
 void POA_CORBA::IRObject::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -458,20 +390,20 @@
   POA_CORBA::IRObject *_tao_impl = (POA_CORBA::IRObject *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_CORBA::IRObject::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -480,10 +412,10 @@
   POA_CORBA::IRObject *_tao_impl = (POA_CORBA::IRObject *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -504,9 +436,9 @@
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
     return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
@@ -538,86 +470,6 @@
   return ::CORBA::IRObject::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_def_kind_get::result (IR::DefinitionKind result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_destroy::TAO_ServerRequestInfo_CORBA_IRObject_destroy (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_destroy::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_destroy::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_CORBA::IRObject::TAO_ServerRequestInfo_CORBA_IRObject_destroy::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_Contained_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -625,7 +477,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:20 */
+/* starting time is 11:23:09 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_Contained_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -696,28 +548,28 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::Contained::move_skel},
+      {"move",  &POA_IR::Contained::move_skel},
       {"_is_a",  &POA_IR::Contained::_is_a_skel},
-      {"_get_id", 	&POA_IR::Contained::_get_id_skel},
-      {"_set_id", 	&POA_IR::Contained::_set_id_skel},
-      {"describe", 	&POA_IR::Contained::describe_skel},
-      {"_get_name", 	&POA_IR::Contained::_get_name_skel},
-      {"_set_name", 	&POA_IR::Contained::_set_name_skel},
-      {"_get_version", 	&POA_IR::Contained::_get_version_skel},
-      {"_set_version", 	&POA_IR::Contained::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::Contained::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::Contained::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::Contained::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::Contained::_get_absolute_name_skel},
+      {"_get_id",       &POA_IR::Contained::_get_id_skel},
+      {"_set_id",       &POA_IR::Contained::_set_id_skel},
+      {"describe",      &POA_IR::Contained::describe_skel},
+      {"_get_name",     &POA_IR::Contained::_get_name_skel},
+      {"_set_name",     &POA_IR::Contained::_set_name_skel},
+      {"_get_version",  &POA_IR::Contained::_get_version_skel},
+      {"_set_version",  &POA_IR::Contained::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::Contained::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::Contained::_get_defined_in_skel},
+      {"destroy",       &POA_IR::Contained::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::Contained::_get_absolute_name_skel},
       {"_non_existent",  &POA_IR::Contained::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::Contained::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::Contained::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       -1,  14,  -1,  15,  16,  -1,  -1,  -1,  -1,  17,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  18, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       -1,  14,  -1,  15,  16,  -1,  -1,  -1,  -1,  17,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  18,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -751,16 +603,15 @@
     }
   return 0;
 }
-/* ending time is 10:26:20 */
+/* ending time is 11:23:09 */
 static TAO_IR_Contained_Perfect_Hash_OpTable tao_IR_Contained_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_Contained_Strategized_Proxy_Broker *POA_IR::_TAO_Contained_Strategized_Proxy_Broker::the_TAO_Contained_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_Contained_Strategized_Proxy_Broker *the_TAO_Contained_Strategized_Proxy_Broker (void)
 {
   static POA_IR::_TAO_Contained_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
@@ -780,9 +631,9 @@
   
 }
 
-IR::_TAO_Contained_Proxy_Impl&
+_TAO_Contained_Proxy_Impl&
 POA_IR::_TAO_Contained_Strategized_Proxy_Broker::select_proxy (
-    ::IR::Contained *object,
+    ::IR_Contained *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -824,7 +675,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_Contained_Remote_Proxy_Impl,
+              _TAO_Contained_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -841,26 +692,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_Contained_Proxy_Broker *
-IR__TAO_Contained_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_Contained_Proxy_Broker *
+_TAO_Contained_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_Contained_Strategized_Proxy_Broker::the_TAO_Contained_Strategized_Proxy_Broker();
+  return the_TAO_Contained_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_Contained_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_Contained_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_Contained_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_Contained_Proxy_Broker_Factory_function;
+  _TAO_Contained_Proxy_Broker_Factory_function_pointer = 
+    _TAO_Contained_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_Contained_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_Contained_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_Contained_Proxy_Broker_Factory_Initializer));
+static int _TAO_Contained_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_Contained_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_Contained_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -870,6 +721,9 @@
 POA_IR::_TAO_Contained_ThruPOA_Proxy_Impl::_TAO_Contained_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_Contained_ThruPOA_Proxy_Impl::~_TAO_Contained_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 char * POA_IR::_TAO_Contained_ThruPOA_Proxy_Impl::id (
@@ -1069,7 +923,7 @@
     CORBA::SystemException
   ))
 {
-    IR::Container_var _tao_retval;
+    IR_Container_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -1131,7 +985,7 @@
     CORBA::SystemException
   ))
 {
-    IR::Repository_var _tao_retval;
+    IR_Repository_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -1162,7 +1016,7 @@
     CORBA::SystemException
   ))
 {
-    IR::Contained::Description_var _tao_retval;
+    IR_Contained::Description_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -1187,7 +1041,7 @@
 
 void POA_IR::_TAO_Contained_ThruPOA_Proxy_Impl::move (
     CORBA_Object *_collocated_tao_target_,
-    IR::Container_ptr new_container,
+    IR_Container_ptr new_container,
     const char * new_name,
     const char * new_version,
     CORBA::Environment &ACE_TRY_ENV
@@ -1244,664 +1098,268 @@
 
 void POA_IR::Contained::_get_id_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
   CORBA::String_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_get ri (
-      "_get_id",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->id (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->id (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      char * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::_set_id_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::String_var id;
+  CORBA::String_var id;
   if (!(
     (_tao_in >> id.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_set ri (
-      "_set_id",
-      _tao_server_request.service_info (),
+  _tao_impl->id (
       id.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->id (
-          id.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
 void POA_IR::Contained::_get_name_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
   CORBA::String_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_get ri (
-      "_get_name",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->name (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->name (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      char * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::_set_name_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::String_var name;
+  CORBA::String_var name;
   if (!(
     (_tao_in >> name.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_set ri (
-      "_set_name",
-      _tao_server_request.service_info (),
+  _tao_impl->name (
       name.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->name (
-          name.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
 void POA_IR::Contained::_get_version_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
   CORBA::String_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_get ri (
-      "_get_version",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->version (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->version (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      char * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::_set_version_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::String_var version;
+  CORBA::String_var version;
   if (!(
     (_tao_in >> version.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_set ri (
-      "_set_version",
-      _tao_server_request.service_info (),
+  _tao_impl->version (
       version.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->version (
-          version.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
 void POA_IR::Contained::_get_defined_in_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-  IR::Container_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_defined_in_get ri (
-      "_get_defined_in",
-      _tao_server_request.service_info (),
+  IR_Container_var _tao_retval;
+
+  _tao_retval = _tao_impl->defined_in (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->defined_in (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::Container_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::_get_absolute_name_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
   CORBA::String_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_absolute_name_get ri (
-      "_get_absolute_name",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->absolute_name (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->absolute_name (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      char * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::_get_containing_repository_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-  IR::Repository_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_containing_repository_get ri (
-      "_get_containing_repository",
-      _tao_server_request.service_info (),
+  IR_Repository_var _tao_retval;
+
+  _tao_retval = _tao_impl->containing_repository (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->containing_repository (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::Repository_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::describe_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-  IR::Contained::Description_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_describe ri (
-      "describe",
-      _tao_server_request.service_info (),
+  IR_Contained::Description_var _tao_retval;
+
+  _tao_retval = _tao_impl->describe (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->describe (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::Contained::Description * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Contained::move_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::Container_var new_container;
+  IR_Container_var new_container;
   CORBA::String_var new_name;
   CORBA::String_var new_version;
   if (!(
@@ -1909,59 +1367,22 @@
     (_tao_in >> new_name.out ()) &&
     (_tao_in >> new_version.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_move ri (
-      "move",
-      _tao_server_request.service_info (),
+  _tao_impl->move (
       new_container.in (),
       new_name.in (),
       new_version.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->move (
-          new_container.in (),
-          new_name.in (),
-          new_version.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
 void POA_IR::Contained::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -1971,20 +1392,20 @@
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::Contained::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -1993,10 +1414,10 @@
   POA_IR::Contained *_tao_impl = (POA_IR::Contained *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -2051,492 +1472,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::Contained::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_get::TAO_ServerRequestInfo_IR_Contained_id_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  return IR_Contained::_unchecked_narrow (obj.in ());
 }
 
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_get::result (char * result)
+class TAO_IR_Container_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_set::TAO_ServerRequestInfo_IR_Contained_id_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_id_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_get::TAO_ServerRequestInfo_IR_Contained_name_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_get::result (char * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_set::TAO_ServerRequestInfo_IR_Contained_name_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * name,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    name_ (name)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_name_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_get::TAO_ServerRequestInfo_IR_Contained_version_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_get::result (char * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_set::TAO_ServerRequestInfo_IR_Contained_version_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * version,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    version_ (version)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_version_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_defined_in_get::TAO_ServerRequestInfo_IR_Contained_defined_in_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_defined_in_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_defined_in_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_defined_in_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_defined_in_get::result (IR::Container_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_absolute_name_get::TAO_ServerRequestInfo_IR_Contained_absolute_name_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_absolute_name_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_absolute_name_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_absolute_name_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_absolute_name_get::result (char * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_containing_repository_get::TAO_ServerRequestInfo_IR_Contained_containing_repository_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_containing_repository_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_containing_repository_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_containing_repository_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_containing_repository_get::result (IR::Repository_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_describe::TAO_ServerRequestInfo_IR_Contained_describe (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_describe::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_describe::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_describe::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_describe::result (IR::Contained::Description * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_move::TAO_ServerRequestInfo_IR_Contained_move (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::Container_ptr new_container,
-    const char * new_name,
-    const char * new_version,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    new_container_ (new_container),
-    new_name_ (new_name),
-    new_version_ (new_version)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_move::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_new_container = this->parameter_list_.length ();
-  this->parameter_list_.length (length_new_container + 1);
-  this->parameter_list_[length_new_container].argument <<=  this->new_container_;
-  
-  this->parameter_list_[length_new_container].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_new_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_new_name + 1);
-  this->parameter_list_[length_new_name].argument <<= new_name_;
-  this->parameter_list_[length_new_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_new_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_new_version + 1);
-  this->parameter_list_[length_new_version].argument <<= new_version_;
-  this->parameter_list_[length_new_version].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_move::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Contained::TAO_ServerRequestInfo_IR_Contained_move::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_Container_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:20 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_Container_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_Container_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:09 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_Container_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_Container_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -2603,32 +1553,32 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},{"",0},{"",0},
-      {"lookup", 	&POA_IR::Container::lookup_skel},
-      {"destroy", 	&POA_IR::Container::destroy_skel},
-      {"lookup_name", 	&POA_IR::Container::lookup_name_skel},
-      {"create_value", 	&POA_IR::Container::create_value_skel},
-      {"create_module", 	&POA_IR::Container::create_module_skel},
-      {"create_native", 	&POA_IR::Container::create_native_skel},
-      {"create_interface", 	&POA_IR::Container::create_interface_skel},
-      {"create_union", 	&POA_IR::Container::create_union_skel},
-      {"contents", 	&POA_IR::Container::contents_skel},
+      {"lookup",        &POA_IR::Container::lookup_skel},
+      {"destroy",       &POA_IR::Container::destroy_skel},
+      {"lookup_name",   &POA_IR::Container::lookup_name_skel},
+      {"create_value",  &POA_IR::Container::create_value_skel},
+      {"create_module",         &POA_IR::Container::create_module_skel},
+      {"create_native",         &POA_IR::Container::create_native_skel},
+      {"create_interface",      &POA_IR::Container::create_interface_skel},
+      {"create_union",  &POA_IR::Container::create_union_skel},
+      {"contents",      &POA_IR::Container::contents_skel},
       {"_is_a",  &POA_IR::Container::_is_a_skel},
-      {"create_exception", 	&POA_IR::Container::create_exception_skel},
-      {"create_alias", 	&POA_IR::Container::create_alias_skel},
-      {"create_struct", 	&POA_IR::Container::create_struct_skel},
-      {"create_constant", 	&POA_IR::Container::create_constant_skel},
-      {"create_value_box", 	&POA_IR::Container::create_value_box_skel},
-      {"describe_contents", 	&POA_IR::Container::describe_contents_skel},
-      {"_get_def_kind", 	&POA_IR::Container::_get_def_kind_skel},
-      {"create_enum", 	&POA_IR::Container::create_enum_skel},
+      {"create_exception",      &POA_IR::Container::create_exception_skel},
+      {"create_alias",  &POA_IR::Container::create_alias_skel},
+      {"create_struct",         &POA_IR::Container::create_struct_skel},
+      {"create_constant",       &POA_IR::Container::create_constant_skel},
+      {"create_value_box",      &POA_IR::Container::create_value_box_skel},
+      {"describe_contents",     &POA_IR::Container::describe_contents_skel},
+      {"_get_def_kind",         &POA_IR::Container::_get_def_kind_skel},
+      {"create_enum",   &POA_IR::Container::create_enum_skel},
       {"_non_existent",  &POA_IR::Container::_non_existent_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -1,  -1,  -1,   6,   7,  -1, -10,  -2,   8,   9, -42, 
-       -1,  -1,  12,  13,  14,  -1,  15,  16,  17,  18,  -1,  19,  20,  21, 
-       22,  -1,  -1,  23,  -1,  -1,  -1,  -1,  -1,  -1,  24, 
+       -1,  -1,  -1,  -1,  -1,  -1,   6,   7,  -1, -10,  -2,   8,   9, -42,
+       -1,  -1,  12,  13,  14,  -1,  15,  16,  17,  18,  -1,  19,  20,  21,
+       22,  -1,  -1,  23,  -1,  -1,  -1,  -1,  -1,  -1,  24,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -2662,10 +1612,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:20 */
+/* ending time is 11:23:09 */
 static TAO_IR_Container_Perfect_Hash_OpTable tao_IR_Container_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -2691,9 +1640,9 @@
   
 }
 
-IR::_TAO_Container_Proxy_Impl&
+_TAO_Container_Proxy_Impl&
 POA_IR::_TAO_Container_Strategized_Proxy_Broker::select_proxy (
-    ::IR::Container *object,
+    IR_Container *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -2725,7 +1674,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_Container_ThruPOA_Proxy_Impl,
+              _TAO_Container_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -2735,7 +1684,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_Container_Remote_Proxy_Impl,
+              _TAO_Container_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -2752,26 +1701,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_Container_Proxy_Broker *
-IR__TAO_Container_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_Container_Proxy_Broker *
+_TAO_Container_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_Container_Strategized_Proxy_Broker::the_TAO_Container_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_Container_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_Container_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_Container_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_Container_Proxy_Broker_Factory_function;
+  _TAO_Container_Proxy_Broker_Factory_function_pointer = 
+    _TAO_Container_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_Container_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_Container_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_Container_Proxy_Broker_Factory_Initializer));
+static int _TAO_Container_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_Container_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_Container_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -2781,6 +1730,9 @@
 POA_IR::_TAO_Container_ThruPOA_Proxy_Impl::_TAO_Container_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_Container_ThruPOA_Proxy_Impl::~_TAO_Container_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 IR::Contained_ptr POA_IR::_TAO_Container_ThruPOA_Proxy_Impl::lookup (
@@ -2792,7 +1744,7 @@
     CORBA::SystemException
   ))
 {
-    IR::Contained_var _tao_retval;
+    IR_Contained_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -2818,7 +1770,7 @@
 
 IR::ContainedSeq * POA_IR::_TAO_Container_ThruPOA_Proxy_Impl::contents (
     CORBA_Object *_collocated_tao_target_,
-    IR::DefinitionKind limit_type,
+    IR_DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -2826,7 +1778,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ContainedSeq_var _tao_retval;
+    IR_ContainedSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -2855,7 +1807,7 @@
     CORBA_Object *_collocated_tao_target_,
     const char * search_name,
     CORBA::Long levels_to_search,
-    IR::DefinitionKind limit_type,
+    IR_DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -2863,7 +1815,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ContainedSeq_var _tao_retval;
+    IR_ContainedSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -2892,7 +1844,7 @@
 
 IR::Container::DescriptionSeq * POA_IR::_TAO_Container_ThruPOA_Proxy_Impl::describe_contents (
     CORBA_Object *_collocated_tao_target_,
-    IR::DefinitionKind limit_type,
+    IR_DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited,
     CORBA::Long max_returned_objs,
     CORBA::Environment &ACE_TRY_ENV
@@ -2901,7 +1853,7 @@
     CORBA::SystemException
   ))
 {
-    IR::Container::DescriptionSeq_var _tao_retval;
+    IR_Container::DescriptionSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -2938,7 +1890,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ModuleDef_var _tao_retval;
+    IR_ModuleDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -2969,7 +1921,7 @@
     const char * id,
     const char * name,
     const char * version,
-    IR::IDLType_ptr type,
+    IR_IDLType_ptr type,
     const CORBA::Any & value,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -2977,7 +1929,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ConstantDef_var _tao_retval;
+    IR_ConstantDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3010,14 +1962,14 @@
     const char * id,
     const char * name,
     const char * version,
-    const IR::StructMemberSeq & members,
+    const IR_StructMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::StructDef_var _tao_retval;
+    IR_StructDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3049,15 +2001,15 @@
     const char * id,
     const char * name,
     const char * version,
-    IR::IDLType_ptr discriminator_type,
-    const IR::UnionMemberSeq & members,
+    IR_IDLType_ptr discriminator_type,
+    const IR_UnionMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::UnionDef_var _tao_retval;
+    IR_UnionDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3090,14 +2042,14 @@
     const char * id,
     const char * name,
     const char * version,
-    const IR::EnumMemberSeq & members,
+    const IR_EnumMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::EnumDef_var _tao_retval;
+    IR_EnumDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3129,14 +2081,14 @@
     const char * id,
     const char * name,
     const char * version,
-    IR::IDLType_ptr original_type,
+    IR_IDLType_ptr original_type,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::AliasDef_var _tao_retval;
+    IR_AliasDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3168,7 +2120,7 @@
     const char * id,
     const char * name,
     const char * version,
-    const IR::InterfaceDefSeq & base_interfaces,
+    const IR_InterfaceDefSeq & base_interfaces,
     CORBA::Boolean is_abstract,
     CORBA::Boolean is_local,
     CORBA::Environment &ACE_TRY_ENV
@@ -3177,7 +2129,7 @@
     CORBA::SystemException
   ))
 {
-    IR::InterfaceDef_var _tao_retval;
+    IR_InterfaceDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3213,18 +2165,18 @@
     const char * version,
     CORBA::Boolean is_custom,
     CORBA::Boolean is_abstract,
-    IR::ValueDef_ptr base_value,
+    IR_ValueDef_ptr base_value,
     CORBA::Boolean is_truncatable,
-    const IR::ValueDefSeq & abstract_base_values,
-    const IR::InterfaceDefSeq & supported_interfaces,
-    const IR::InitializerSeq & initializers,
+    const IR_ValueDefSeq & abstract_base_values,
+    const IR_InterfaceDefSeq & supported_interfaces,
+    const IR_InitializerSeq & initializers,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ValueDef_var _tao_retval;
+    IR_ValueDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3262,14 +2214,14 @@
     const char * id,
     const char * name,
     const char * version,
-    IR::IDLType_ptr original_type_def,
+    IR_IDLType_ptr original_type_def,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ValueBoxDef_var _tao_retval;
+    IR_ValueBoxDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3301,14 +2253,14 @@
     const char * id,
     const char * name,
     const char * version,
-    const IR::StructMemberSeq & members,
+    const IR_StructMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ExceptionDef_var _tao_retval;
+    IR_ExceptionDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3346,7 +2298,7 @@
     CORBA::SystemException
   ))
 {
-    IR::NativeDef_var _tao_retval;
+    IR_NativeDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -3395,172 +2347,85 @@
 
 void POA_IR::Container::lookup_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::Contained_var _tao_retval;
+  IR_Contained_var _tao_retval;
   CORBA::String_var search_name;
   if (!(
     (_tao_in >> search_name.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup ri (
-      "lookup",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->lookup (
       search_name.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->lookup (
-          search_name.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::Contained_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+
+      ACE_CHECK;
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::contents_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ContainedSeq_var _tao_retval;
-  IR::DefinitionKind limit_type;
+  IR_ContainedSeq_var _tao_retval;
+  IR_DefinitionKind limit_type;
   CORBA::Boolean exclude_inherited;
   if (!(
     (_tao_in >> limit_type) &&
     (_tao_in >> CORBA::Any::to_boolean (exclude_inherited))
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_contents ri (
-      "contents",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->contents (
       limit_type,
       exclude_inherited,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->contents (
-          limit_type,
-          exclude_inherited,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ContainedSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::lookup_name_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ContainedSeq_var _tao_retval;
+  IR_ContainedSeq_var _tao_retval;
   CORBA::String_var search_name;
   CORBA::Long levels_to_search;
-  IR::DefinitionKind limit_type;
+  IR_DefinitionKind limit_type;
   CORBA::Boolean exclude_inherited;
   if (!(
     (_tao_in >> search_name.out ()) &&
@@ -3568,84 +2433,38 @@
     (_tao_in >> limit_type) &&
     (_tao_in >> CORBA::Any::to_boolean (exclude_inherited))
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup_name ri (
-      "lookup_name",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->lookup_name (
       search_name.in (),
       levels_to_search,
       limit_type,
       exclude_inherited,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->lookup_name (
-          search_name.in (),
-          levels_to_search,
-          limit_type,
-          exclude_inherited,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ContainedSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::describe_contents_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::Container::DescriptionSeq_var _tao_retval;
-  IR::DefinitionKind limit_type;
+  IR_Container::DescriptionSeq_var _tao_retval;
+  IR_DefinitionKind limit_type;
   CORBA::Boolean exclude_inherited;
   CORBA::Long max_returned_objs;
   if (!(
@@ -3653,81 +2472,36 @@
     (_tao_in >> CORBA::Any::to_boolean (exclude_inherited)) &&
     (_tao_in >> max_returned_objs)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_describe_contents ri (
-      "describe_contents",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->describe_contents (
       limit_type,
       exclude_inherited,
       max_returned_objs,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->describe_contents (
-          limit_type,
-          exclude_inherited,
-          max_returned_objs,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::Container::DescriptionSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_module_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ModuleDef_var _tao_retval;
+  IR_ModuleDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
@@ -3736,85 +2510,40 @@
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_module ri (
-      "create_module",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_module (
       id.in (),
       name.in (),
       version.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_module (
-          id.in (),
-          name.in (),
-          version.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ModuleDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_constant_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ConstantDef_var _tao_retval;
+  IR_ConstantDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::IDLType_var type;
+  IR_IDLType_var type;
   CORBA::Any value;
   if (!(
     (_tao_in >> id.out ()) &&
@@ -3823,16 +2552,9 @@
     (_tao_in >> type.out ()) &&
     (_tao_in >> value)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_constant ri (
-      "create_constant",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_constant (
       id.in (),
       name.in (),
       version.in (),
@@ -3840,160 +2562,74 @@
       value,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_constant (
-          id.in (),
-          name.in (),
-          version.in (),
-          type.in (),
-          value,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ConstantDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_struct_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::StructDef_var _tao_retval;
+  IR_StructDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::StructMemberSeq members;
+  IR_StructMemberSeq members;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ()) &&
     (_tao_in >> members)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_struct ri (
-      "create_struct",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_struct (
       id.in (),
       name.in (),
       version.in (),
       members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_struct (
-          id.in (),
-          name.in (),
-          version.in (),
-          members,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::StructDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_union_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::UnionDef_var _tao_retval;
+  IR_UnionDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::IDLType_var discriminator_type;
-  IR::UnionMemberSeq members;
+  IR_IDLType_var discriminator_type;
+  IR_UnionMemberSeq members;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
@@ -4001,16 +2637,9 @@
     (_tao_in >> discriminator_type.out ()) &&
     (_tao_in >> members)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_union ri (
-      "create_union",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_union (
       id.in (),
       name.in (),
       version.in (),
@@ -4018,246 +2647,114 @@
       members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_union (
-          id.in (),
-          name.in (),
-          version.in (),
-          discriminator_type.in (),
-          members,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::UnionDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_enum_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::EnumDef_var _tao_retval;
+  IR_EnumDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::EnumMemberSeq members;
+  IR_EnumMemberSeq members;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ()) &&
     (_tao_in >> members)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_enum ri (
-      "create_enum",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_enum (
       id.in (),
       name.in (),
       version.in (),
       members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_enum (
-          id.in (),
-          name.in (),
-          version.in (),
-          members,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::EnumDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_alias_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::AliasDef_var _tao_retval;
+  IR_AliasDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::IDLType_var original_type;
+  IR_IDLType_var original_type;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ()) &&
     (_tao_in >> original_type.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_alias ri (
-      "create_alias",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_alias (
       id.in (),
       name.in (),
       version.in (),
       original_type.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_alias (
-          id.in (),
-          name.in (),
-          version.in (),
-          original_type.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::AliasDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_interface_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::InterfaceDef_var _tao_retval;
+  IR_InterfaceDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::InterfaceDefSeq base_interfaces;
+  IR_InterfaceDefSeq base_interfaces;
   CORBA::Boolean is_abstract;
   CORBA::Boolean is_local;
   if (!(
@@ -4268,16 +2765,9 @@
     (_tao_in >> CORBA::Any::to_boolean (is_abstract)) &&
     (_tao_in >> CORBA::Any::to_boolean (is_local))
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_interface ri (
-      "create_interface",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_interface (
       id.in (),
       name.in (),
       version.in (),
@@ -4286,79 +2776,38 @@
       is_local,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_interface (
-          id.in (),
-          name.in (),
-          version.in (),
-          base_interfaces,
-          is_abstract,
-          is_local,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_value_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ValueDef_var _tao_retval;
+  IR_ValueDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
   CORBA::Boolean is_custom;
   CORBA::Boolean is_abstract;
-  IR::ValueDef_var base_value;
+  IR_ValueDef_var base_value;
   CORBA::Boolean is_truncatable;
-  IR::ValueDefSeq abstract_base_values;
-  IR::InterfaceDefSeq supported_interfaces;
-  IR::InitializerSeq initializers;
+  IR_ValueDefSeq abstract_base_values;
+  IR_InterfaceDefSeq supported_interfaces;
+  IR_InitializerSeq initializers;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
@@ -4371,16 +2820,9 @@
     (_tao_in >> supported_interfaces) &&
     (_tao_in >> initializers)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value ri (
-      "create_value",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_value (
       id.in (),
       name.in (),
       version.in (),
@@ -4393,247 +2835,110 @@
       initializers,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_value (
-          id.in (),
-          name.in (),
-          version.in (),
-          is_custom,
-          is_abstract,
-          base_value.in (),
-          is_truncatable,
-          abstract_base_values,
-          supported_interfaces,
-          initializers,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_value_box_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ValueBoxDef_var _tao_retval;
+  IR_ValueBoxDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::IDLType_var original_type_def;
+  IR_IDLType_var original_type_def;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ()) &&
     (_tao_in >> original_type_def.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value_box ri (
-      "create_value_box",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_value_box (
       id.in (),
       name.in (),
       version.in (),
       original_type_def.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_value_box (
-          id.in (),
-          name.in (),
-          version.in (),
-          original_type_def.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueBoxDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_exception_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::ExceptionDef_var _tao_retval;
+  IR_ExceptionDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::StructMemberSeq members;
+  IR_StructMemberSeq members;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ()) &&
     (_tao_in >> members)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_exception ri (
-      "create_exception",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_exception (
       id.in (),
       name.in (),
       version.in (),
       members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_exception (
-          id.in (),
-          name.in (),
-          version.in (),
-          members,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ExceptionDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::create_native_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::Container *_tao_impl = (POA_IR::Container *)_tao_object_reference;
 
-  IR::NativeDef_var _tao_retval;
+  IR_NativeDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
@@ -4642,72 +2947,27 @@
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_native ri (
-      "create_native",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_native (
       id.in (),
       name.in (),
       version.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_native (
-          id.in (),
-          name.in (),
-          version.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::NativeDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::Container::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -4717,20 +2977,20 @@
   POA_IR::Container *_tao_impl = (POA_IR::Container *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::Container::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -4739,10 +2999,10 @@
   POA_IR::Container *_tao_impl = (POA_IR::Container *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -4797,1241 +3057,713 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::Container::_unchecked_narrow (obj.in ());
+  return IR_Container::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup::TAO_ServerRequestInfo_IR_Container_lookup (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * search_name,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    search_name_ (search_name)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+class TAO_IR_IDLType_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_search_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_search_name + 1);
-  this->parameter_list_[length_search_name].argument <<= search_name_;
-  this->parameter_list_[length_search_name].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:09 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_IDLType_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_IDLType_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
-  // Generate the exception list on demand
-  return 0;
+  static const unsigned char asso_values[] =
+    {
+#if defined (ACE_MVS)
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
+     19, 19,  0,  0, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19,  5, 19, 19, 19, 19,  0, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19,
+#else
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
+      0,  0, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19,  5, 19, 19, 19,
+     19,  0, 19, 19, 19, 19, 19, 19,
+#endif /* ACE_MVS */
+    };
+  return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+const class TAO_operation_db_entry *
+TAO_IR_IDLType_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  enum
+    {
+      TOTAL_KEYWORDS = 5,
+      MIN_WORD_LENGTH = 5,
+      MAX_WORD_LENGTH = 13,
+      MIN_HASH_VALUE = 5,
+      MAX_HASH_VALUE = 18,
+      HASH_VALUE_RANGE = 14,
+      DUPLICATES = 0
+    };
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup::result (IR::Contained_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  static const class TAO_operation_db_entry  wordlist[] =
+    {
+      {"",0},{"",0},{"",0},{"",0},{"",0},
+      {"_is_a",  &POA_IR::IDLType::_is_a_skel},
+      {"",0},
+      {"destroy",       &POA_IR::IDLType::destroy_skel},
+      {"",0},
+      {"_get_type",     &POA_IR::IDLType::_get_type_skel},
+      {"",0},{"",0},{"",0},
+      {"_get_def_kind",         &POA_IR::IDLType::_get_def_kind_skel},
+      {"",0},{"",0},{"",0},{"",0},
+      {"_non_existent",  &POA_IR::IDLType::_non_existent_skel},
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      unsigned int key = hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          const char *s = wordlist[key].opname_;
+
+          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
 }
+/* ending time is 11:23:09 */
+static TAO_IR_IDLType_Perfect_Hash_OpTable tao_IR_IDLType_optable;
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_contents::TAO_ServerRequestInfo_IR_Container_contents (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::DefinitionKind & limit_type,
-    const CORBA::Boolean & exclude_inherited,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    limit_type_ (limit_type),
-    exclude_inherited_ (exclude_inherited)
-{}
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
 
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_contents::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+// Factory function Implementation.
+POA_IR::_TAO_IDLType_Strategized_Proxy_Broker *POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::the_TAO_IDLType_Strategized_Proxy_Broker (void)
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_limit_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_limit_type + 1);
-  this->parameter_list_[length_limit_type].argument <<=  this->limit_type_;
-  
-  this->parameter_list_[length_limit_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exclude_inherited = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exclude_inherited + 1);
-  this->parameter_list_[length_exclude_inherited].argument <<= CORBA::Any::from_boolean (this->exclude_inherited_);
-  this->parameter_list_[length_exclude_inherited].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
+  static POA_IR::_TAO_IDLType_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_contents::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::_TAO_IDLType_Strategized_Proxy_Broker (void)
 {
-  // Generate the exception list on demand
-  return 0;
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
+  
 }
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_contents::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::~_TAO_IDLType_Strategized_Proxy_Broker (void)
 {
-  // Generate the result on demand
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
   
-  return &this->result_val_;
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_contents::result (IR::ContainedSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup_name::TAO_ServerRequestInfo_IR_Container_lookup_name (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * search_name,
-    const CORBA::Long & levels_to_search,
-    IR::DefinitionKind & limit_type,
-    const CORBA::Boolean & exclude_inherited,
-    CORBA::Environment &
+_TAO_IDLType_Proxy_Impl&
+POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::select_proxy (
+    IR_IDLType *object,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    search_name_ (search_name),
-    levels_to_search_ (levels_to_search),
-    limit_type_ (limit_type),
-    exclude_inherited_ (exclude_inherited)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup_name::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_search_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_search_name + 1);
-  this->parameter_list_[length_search_name].argument <<= search_name_;
-  this->parameter_list_[length_search_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_levels_to_search = this->parameter_list_.length ();
-  this->parameter_list_.length (length_levels_to_search + 1);
-  this->parameter_list_[length_levels_to_search].argument <<= levels_to_search_;
-  this->parameter_list_[length_levels_to_search].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_limit_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_limit_type + 1);
-  this->parameter_list_[length_limit_type].argument <<=  this->limit_type_;
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
   
-  this->parameter_list_[length_limit_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exclude_inherited = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exclude_inherited + 1);
-  this->parameter_list_[length_exclude_inherited].argument <<= CORBA::Any::from_boolean (this->exclude_inherited_);
-  this->parameter_list_[length_exclude_inherited].mode = Dynamic::PARAM_IN;
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
   
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup_name::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup_name::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
+  
+  return *this->proxy_cache_[strategy];
   
-  return &this->result_val_;
 }
 
 void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_lookup_name::result (IR::ContainedSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_describe_contents::TAO_ServerRequestInfo_IR_Container_describe_contents (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::DefinitionKind & limit_type,
-    const CORBA::Boolean & exclude_inherited,
-    const CORBA::Long & max_returned_objs,
-    CORBA::Environment &
+POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    limit_type_ (limit_type),
-    exclude_inherited_ (exclude_inherited),
-    max_returned_objs_ (max_returned_objs)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_describe_contents::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_limit_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_limit_type + 1);
-  this->parameter_list_[length_limit_type].argument <<=  this->limit_type_;
-  
-  this->parameter_list_[length_limit_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exclude_inherited = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exclude_inherited + 1);
-  this->parameter_list_[length_exclude_inherited].argument <<= CORBA::Any::from_boolean (this->exclude_inherited_);
-  this->parameter_list_[length_exclude_inherited].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_max_returned_objs = this->parameter_list_.length ();
-  this->parameter_list_.length (length_max_returned_objs + 1);
-  this->parameter_list_[length_max_returned_objs].argument <<= max_returned_objs_;
-  this->parameter_list_[length_max_returned_objs].mode = Dynamic::PARAM_IN;
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
   
-  return &this->parameter_list_;
+  if (this->proxy_cache_[strategy] == 0)
+    {
+      switch (strategy)
+        {
+        case TAO_ORB_Core::THRU_POA_STRATEGY:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_IDLType_ThruPOA_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+          
+        case TAO_ORB_Core::REMOTE_STRATEGY:
+        default:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_IDLType_Remote_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+        
+      }
+    
+  }
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_describe_contents::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+
+//
+//        End Strategized Proxy Broker Implementation
+///////////////////////////////////////////////////////////////////////
+
+
+_TAO_IDLType_Proxy_Broker *
+_TAO_IDLType_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
-  // Generate the exception list on demand
-  return 0;
+  ACE_UNUSED_ARG (obj);
+  return ::POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::the_TAO_IDLType_Strategized_Proxy_Broker();
 }
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_describe_contents::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+int
+_TAO_IDLType_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
-  // Generate the result on demand
+  ACE_UNUSED_ARG (_dummy_);
   
-  return &this->result_val_;
+  _TAO_IDLType_Proxy_Broker_Factory_function_pointer = 
+    _TAO_IDLType_Proxy_Broker_Factory_function;
+  
+  return 0;
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_describe_contents::result (IR::Container::DescriptionSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
+static int _TAO_IDLType_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_IDLType_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_IDLType_Proxy_Broker_Factory_Initializer));
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_module::TAO_ServerRequestInfo_IR_Container_create_module (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version)
+
+///////////////////////////////////////////////////////////////////////
+//                 ThruPOA Proxy  Implementation
+//
+
+POA_IR::_TAO_IDLType_ThruPOA_Proxy_Impl::_TAO_IDLType_ThruPOA_Proxy_Impl (void)
 {}
 
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_module::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+POA_IR::_TAO_IDLType_ThruPOA_Proxy_Impl::~_TAO_IDLType_ThruPOA_Proxy_Impl (void)
+{}
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_module::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+// ThruPOA Implementation of the IDL interface methods
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_module::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+CORBA::TypeCode_ptr POA_IR::_TAO_IDLType_ThruPOA_Proxy_Impl::type (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+    CORBA::TypeCode_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::IDLType_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/IDLType:1.0"
+        )
+    )->type (
+        ACE_TRY_ENV
+      );
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_module::result (IR::ModuleDef_ptr result)
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
+
+// skeleton constructor
+POA_IR::IDLType::IDLType (void)
 {
-  // update the result 
-   this->result_ = result;
+  this->optable_ = &tao_IR_IDLType_optable;
 }
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_constant::TAO_ServerRequestInfo_IR_Container_create_constant (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    const CORBA::Any & value,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    type_ (type),
-    value_ (value)
+// copy ctor
+POA_IR::IDLType::IDLType (const IDLType& rhs)
+  :   ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
 {}
 
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_constant::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+// skeleton destructor
+POA_IR::IDLType::~IDLType (void)
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type + 1);
-  this->parameter_list_[length_type].argument <<=  this->type_;
-  
-  this->parameter_list_[length_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_value + 1);
-  this->parameter_list_[length_value].argument <<= value_;
-  this->parameter_list_[length_value].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_constant::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::IDLType::_get_type_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the exception list on demand
-  return 0;
-}
+  POA_IR::IDLType *_tao_impl = (POA_IR::IDLType *)_tao_object_reference;
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_constant::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  CORBA::TypeCode_var _tao_retval;
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_constant::result (IR::ConstantDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  _tao_retval = _tao_impl->type (
+      ACE_TRY_ENV
+    );
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_struct::TAO_ServerRequestInfo_IR_Container_create_struct (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const IR::StructMemberSeq & members,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    members_ (members)
-{}
+  ACE_CHECK;
 
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_struct::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_struct::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::IDLType::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
 {
-  // Generate the exception list on demand
-  return 0;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::IDLType *_tao_impl = (POA_IR::IDLType *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_struct::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_struct::result (IR::StructDef_ptr result)
+void POA_IR::IDLType::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
 {
-  // update the result 
-   this->result_ = result;
+  POA_IR::IDLType *_tao_impl = (POA_IR::IDLType *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_union::TAO_ServerRequestInfo_IR_Container_create_union (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr discriminator_type,
-    const IR::UnionMemberSeq & members,
-    CORBA::Environment &
+CORBA::Boolean POA_IR::IDLType::_is_a (
+    const char* value,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    discriminator_type_ (discriminator_type),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_union::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_discriminator_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_discriminator_type + 1);
-  this->parameter_list_[length_discriminator_type].argument <<=  this->discriminator_type_;
-  
-  this->parameter_list_[length_discriminator_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
+  if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_union::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void* POA_IR::IDLType::_downcast (
+    const char* logical_type_id
+  )
 {
-  // Generate the exception list on demand
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
+    return ACE_static_cast (POA_IR::IDLType_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_union::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::IDLType::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_union::result (IR::UnionDef_ptr result)
+const char* POA_IR::IDLType::_interface_repository_id (void) const
 {
-  // update the result 
-   this->result_ = result;
+  return "IDL:omg.org/IR/IDLType:1.0";
 }
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_enum::TAO_ServerRequestInfo_IR_Container_create_enum (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const IR::EnumMemberSeq & members,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_enum::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+IR::IDLType*
+POA_IR::IDLType::_this (CORBA_Environment &ACE_TRY_ENV)
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
+  
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
   
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
-  return &this->parameter_list_;
+  CORBA::Object_var obj = tmp;
+  return IR_IDLType::_unchecked_narrow (obj.in ());
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_enum::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+class TAO_IR_Repository_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_enum::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:09 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_Repository_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_Repository_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  static const unsigned char asso_values[] =
+    {
+#if defined (ACE_MVS)
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 20,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 15,
+     71,  0, 23, 10, 71,  5, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71,  0,  0, 15,
+     71,  0, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 30,  0, 71, 71, 71,  0,  0, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71,
+#else
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
+     71, 71, 71, 71, 71, 20, 71, 15, 71,  0,
+     23, 10, 71,  5, 71, 71, 71, 71,  0,  0,
+     15, 71,  0, 71, 71, 30,  0, 71, 71, 71,
+      0,  0, 71, 71, 71, 71, 71, 71,
+#endif /* ACE_MVS */
+    };
+  return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_enum::result (IR::EnumDef_ptr result)
+const class TAO_operation_db_entry *
+TAO_IR_Repository_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
-  // update the result 
-   this->result_ = result;
-}
+  enum
+    {
+      TOTAL_KEYWORDS = 27,
+      MIN_WORD_LENGTH = 5,
+      MAX_WORD_LENGTH = 22,
+      MIN_HASH_VALUE = 6,
+      MAX_HASH_VALUE = 70,
+      HASH_VALUE_RANGE = 65,
+      DUPLICATES = 2
+    };
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_alias::TAO_ServerRequestInfo_IR_Container_create_alias (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr original_type,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    original_type_ (original_type)
-{}
+  static const class TAO_operation_db_entry  wordlist[] =
+    {
+      {"",0},{"",0},{"",0},{"",0},{"",0},{"",0},
+      {"lookup",        &POA_IR::Repository::lookup_skel},
+      {"create_enum",   &POA_IR::Repository::create_enum_skel},
+      {"create_array",  &POA_IR::Repository::create_array_skel},
+      {"create_struct",         &POA_IR::Repository::create_struct_skel},
+      {"create_constant",       &POA_IR::Repository::create_constant_skel},
+      {"create_value_box",      &POA_IR::Repository::create_value_box_skel},
+      {"create_string",         &POA_IR::Repository::create_string_skel},
+      {"create_wstring",        &POA_IR::Repository::create_wstring_skel},
+      {"lookup_name",   &POA_IR::Repository::lookup_name_skel},
+      {"create_value",  &POA_IR::Repository::create_value_skel},
+      {"create_module",         &POA_IR::Repository::create_module_skel},
+      {"create_native",         &POA_IR::Repository::create_native_skel},
+      {"create_sequence",       &POA_IR::Repository::create_sequence_skel},
+      {"create_interface",      &POA_IR::Repository::create_interface_skel},
+      {"create_union",  &POA_IR::Repository::create_union_skel},
+      {"get_primitive",         &POA_IR::Repository::get_primitive_skel},
+      {"destroy",       &POA_IR::Repository::destroy_skel},
+      {"create_exception",      &POA_IR::Repository::create_exception_skel},
+      {"lookup_id",     &POA_IR::Repository::lookup_id_skel},
+      {"_non_existent",  &POA_IR::Repository::_non_existent_skel},
+      {"create_fixed",  &POA_IR::Repository::create_fixed_skel},
+      {"get_canonical_typecode",        &POA_IR::Repository::get_canonical_typecode_skel},
+      {"contents",      &POA_IR::Repository::contents_skel},
+      {"_is_a",  &POA_IR::Repository::_is_a_skel},
+      {"create_alias",  &POA_IR::Repository::create_alias_skel},
+      {"_get_def_kind",         &POA_IR::Repository::_get_def_kind_skel},
+      {"describe_contents",     &POA_IR::Repository::describe_contents_skel},
+    };
 
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_alias::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_original_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_original_type + 1);
-  this->parameter_list_[length_original_type].argument <<=  this->original_type_;
-  
-  this->parameter_list_[length_original_type].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  static const signed char lookup[] =
+    {
+       -1,  -1,  -1,  -1,  -1,  -1,   6,  -1,  -1, -16,  -2,   7,   8,   9,
+       -1,  10,  11,  -1,  12,  13,  -1,  14,  15, -84,  -1,  18,  19,  20,
+       21,  -1,  22,  23,  24,  25,  -1,  26,  -1,  27,  28,  -1,  29,  -1,
+       30,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+       31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+       32,
+    };
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_alias::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      unsigned int key = hash (str, len);
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_alias::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          int slot = lookup[key];
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_alias::result (IR::AliasDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+          if (slot >= 0 && slot < MAX_HASH_VALUE)
+            {
+              const char *s = wordlist[slot].opname_;
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_interface::TAO_ServerRequestInfo_IR_Container_create_interface (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const IR::InterfaceDefSeq & base_interfaces,
-    const CORBA::Boolean & is_abstract,
-    const CORBA::Boolean & is_local,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    base_interfaces_ (base_interfaces),
-    is_abstract_ (is_abstract),
-    is_local_ (is_local)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_interface::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_base_interfaces = this->parameter_list_.length ();
-  this->parameter_list_.length (length_base_interfaces + 1);
-  this->parameter_list_[length_base_interfaces].argument <<=  this->base_interfaces_;
-  
-  this->parameter_list_[length_base_interfaces].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_is_abstract = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_abstract + 1);
-  this->parameter_list_[length_is_abstract].argument <<= CORBA::Any::from_boolean (this->is_abstract_);
-  this->parameter_list_[length_is_abstract].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_is_local = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_local + 1);
-  this->parameter_list_[length_is_local].argument <<= CORBA::Any::from_boolean (this->is_local_);
-  this->parameter_list_[length_is_local].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_interface::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+                return &wordlist[slot];
+            }
+          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
+            return 0;
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
+            }
+        }
+    }
   return 0;
 }
+/* ending time is 11:23:09 */
+static TAO_IR_Repository_Perfect_Hash_OpTable tao_IR_Repository_optable;
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_interface::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_interface::result (IR::InterfaceDef_ptr result)
+// Factory function Implementation.
+POA_IR::_TAO_Repository_Strategized_Proxy_Broker *POA_IR::_TAO_Repository_Strategized_Proxy_Broker::the_TAO_Repository_Strategized_Proxy_Broker (void)
 {
-  // update the result 
-   this->result_ = result;
+  static POA_IR::_TAO_Repository_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
 }
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value::TAO_ServerRequestInfo_IR_Container_create_value (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const CORBA::Boolean & is_custom,
-    const CORBA::Boolean & is_abstract,
-    IR::ValueDef_ptr base_value,
-    const CORBA::Boolean & is_truncatable,
-    const IR::ValueDefSeq & abstract_base_values,
-    const IR::InterfaceDefSeq & supported_interfaces,
-    const IR::InitializerSeq & initializers,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    is_custom_ (is_custom),
-    is_abstract_ (is_abstract),
-    base_value_ (base_value),
-    is_truncatable_ (is_truncatable),
-    abstract_base_values_ (abstract_base_values),
-    supported_interfaces_ (supported_interfaces),
-    initializers_ (initializers)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_is_custom = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_custom + 1);
-  this->parameter_list_[length_is_custom].argument <<= CORBA::Any::from_boolean (this->is_custom_);
-  this->parameter_list_[length_is_custom].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_is_abstract = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_abstract + 1);
-  this->parameter_list_[length_is_abstract].argument <<= CORBA::Any::from_boolean (this->is_abstract_);
-  this->parameter_list_[length_is_abstract].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_base_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_base_value + 1);
-  this->parameter_list_[length_base_value].argument <<=  this->base_value_;
-  
-  this->parameter_list_[length_base_value].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_is_truncatable = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_truncatable + 1);
-  this->parameter_list_[length_is_truncatable].argument <<= CORBA::Any::from_boolean (this->is_truncatable_);
-  this->parameter_list_[length_is_truncatable].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_abstract_base_values = this->parameter_list_.length ();
-  this->parameter_list_.length (length_abstract_base_values + 1);
-  this->parameter_list_[length_abstract_base_values].argument <<=  this->abstract_base_values_;
-  
-  this->parameter_list_[length_abstract_base_values].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_supported_interfaces = this->parameter_list_.length ();
-  this->parameter_list_.length (length_supported_interfaces + 1);
-  this->parameter_list_[length_supported_interfaces].argument <<=  this->supported_interfaces_;
-  
-  this->parameter_list_[length_supported_interfaces].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_initializers = this->parameter_list_.length ();
-  this->parameter_list_.length (length_initializers + 1);
-  this->parameter_list_[length_initializers].argument <<=  this->initializers_;
-  
-  this->parameter_list_[length_initializers].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+POA_IR::_TAO_Repository_Strategized_Proxy_Broker::_TAO_Repository_Strategized_Proxy_Broker (void)
 {
-  // Generate the result on demand
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
   
-  return &this->result_val_;
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value::result (IR::ValueDef_ptr result)
+POA_IR::_TAO_Repository_Strategized_Proxy_Broker::~_TAO_Repository_Strategized_Proxy_Broker (void)
 {
-  // update the result 
-   this->result_ = result;
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
+  
 }
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value_box::TAO_ServerRequestInfo_IR_Container_create_value_box (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr original_type_def,
-    CORBA::Environment &
+_TAO_Repository_Proxy_Impl&
+POA_IR::_TAO_Repository_Strategized_Proxy_Broker::select_proxy (
+    IR_Repository *object,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    original_type_def_ (original_type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value_box::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_original_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_original_type_def + 1);
-  this->parameter_list_[length_original_type_def].argument <<=  this->original_type_def_;
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
   
-  this->parameter_list_[length_original_type_def].mode = Dynamic::PARAM_IN;
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
   
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value_box::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value_box::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
+  
+  return *this->proxy_cache_[strategy];
   
-  return &this->result_val_;
 }
 
 void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_value_box::result (IR::ValueBoxDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_exception::TAO_ServerRequestInfo_IR_Container_create_exception (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const IR::StructMemberSeq & members,
-    CORBA::Environment &
+POA_IR::_TAO_Repository_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_exception::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
   
-  return &this->parameter_list_;
+  if (this->proxy_cache_[strategy] == 0)
+    {
+      switch (strategy)
+        {
+        case TAO_ORB_Core::THRU_POA_STRATEGY:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_Repository_ThruPOA_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+          
+        case TAO_ORB_Core::REMOTE_STRATEGY:
+        default:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_Repository_Remote_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+        
+      }
+    
+  }
 }
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_exception::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+
+//
+//        End Strategized Proxy Broker Implementation
+///////////////////////////////////////////////////////////////////////
+
+
+_TAO_Repository_Proxy_Broker *
+_TAO_Repository_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
-  // Generate the exception list on demand
-  return 0;
+  ACE_UNUSED_ARG (obj);
+  return ::POA_IR::_TAO_Repository_Strategized_Proxy_Broker::the_TAO_Repository_Strategized_Proxy_Broker();
 }
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_exception::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+int
+_TAO_Repository_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
-  // Generate the result on demand
+  ACE_UNUSED_ARG (_dummy_);
+  
+  _TAO_Repository_Proxy_Broker_Factory_function_pointer = 
+    _TAO_Repository_Proxy_Broker_Factory_function;
   
-  return &this->result_val_;
+  return 0;
 }
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_exception::result (IR::ExceptionDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+static int _TAO_Repository_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_Repository_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_Repository_Proxy_Broker_Factory_Initializer));
 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_native::TAO_ServerRequestInfo_IR_Container_create_native (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version)
-{}
 
-Dynamic::ParameterList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_native::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+///////////////////////////////////////////////////////////////////////
+//                 ThruPOA Proxy  Implementation
+//
 
-Dynamic::ExceptionList *
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_native::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::_TAO_Repository_ThruPOA_Proxy_Impl (void)
+{}
 
-CORBA::Any * 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_native::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::~_TAO_Repository_ThruPOA_Proxy_Impl (void)
+{}
 
-void 
-POA_IR::Container::TAO_ServerRequestInfo_IR_Container_create_native::result (IR::NativeDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+// ThruPOA Implementation of the IDL interface methods
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_IDLType_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:20 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_IDLType_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_IDLType_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
-{
-  static const unsigned char asso_values[] =
-    {
-#if defined (ACE_MVS)
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
-     19, 19,  0,  0, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19,  5, 19, 19, 19, 19,  0, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19,
-#else
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
-      0,  0, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19,  5, 19, 19, 19,
-     19,  0, 19, 19, 19, 19, 19, 19,
-#endif /* ACE_MVS */
-    };
-  return len + asso_values[str[len - 1]] + asso_values[str[0]];
-}
-
-const class TAO_operation_db_entry *
-TAO_IR_IDLType_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
-{
-  enum
-    {
-      TOTAL_KEYWORDS = 5,
-      MIN_WORD_LENGTH = 5,
-      MAX_WORD_LENGTH = 13,
-      MIN_HASH_VALUE = 5,
-      MAX_HASH_VALUE = 18,
-      HASH_VALUE_RANGE = 14,
-      DUPLICATES = 0
-    };
-
-  static const class TAO_operation_db_entry  wordlist[] =
-    {
-      {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::IDLType::_is_a_skel},
-      {"",0},
-      {"destroy", 	&POA_IR::IDLType::destroy_skel},
-      {"",0},
-      {"_get_type", 	&POA_IR::IDLType::_get_type_skel},
-      {"",0},{"",0},{"",0},
-      {"_get_def_kind", 	&POA_IR::IDLType::_get_def_kind_skel},
-      {"",0},{"",0},{"",0},{"",0},
-      {"_non_existent",  &POA_IR::IDLType::_non_existent_skel},
-    };
-
-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
-    {
-      unsigned int key = hash (str, len);
-
-      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
-        {
-          const char *s = wordlist[key].opname_;
-
-          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-            return &wordlist[key];
-        }
-    }
-  return 0;
-}
-/* ending time is 10:26:20 */
-static TAO_IR_IDLType_Perfect_Hash_OpTable tao_IR_IDLType_optable;
-
-
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
-
-// Factory function Implementation.
-POA_IR::_TAO_IDLType_Strategized_Proxy_Broker *POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::the_TAO_IDLType_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_IDLType_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
-}
-
-POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::_TAO_IDLType_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
-
-POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::~_TAO_IDLType_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
-}
-
-IR::_TAO_IDLType_Proxy_Impl&
-POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::select_proxy (
-    ::IR::IDLType *object,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
-}
-
-void 
-POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
+IR::Contained_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::lookup_id (
+    CORBA_Object *_collocated_tao_target_,
+    const char * search_id,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
-  
-  if (this->proxy_cache_[strategy] == 0)
-    {
-      switch (strategy)
-        {
-        case TAO_ORB_Core::THRU_POA_STRATEGY:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              POA_IR::_TAO_IDLType_ThruPOA_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-          
-        case TAO_ORB_Core::REMOTE_STRATEGY:
-        default:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              ::IR::_TAO_IDLType_Remote_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-        
-      }
-    
-  }
-}
-
-
-//
-//        End Strategized Proxy Broker Implementation
-///////////////////////////////////////////////////////////////////////
-
-
-IR::_TAO_IDLType_Proxy_Broker *
-IR__TAO_IDLType_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
-{
-  ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_IDLType_Strategized_Proxy_Broker::the_TAO_IDLType_Strategized_Proxy_Broker();
-}
-
-int
-IR__TAO_IDLType_Proxy_Broker_Factory_Initializer (long _dummy_)
-{
-  ACE_UNUSED_ARG (_dummy_);
-  
-  IR__TAO_IDLType_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_IDLType_Proxy_Broker_Factory_function;
-  
-  return 0;
+    IR_Contained_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "lookup_id",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->lookup_id (
+        search_id,
+        ACE_TRY_ENV
+      );
 }
 
-static int IR__TAO_IDLType_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_IDLType_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_IDLType_Proxy_Broker_Factory_Initializer));
-
-
-///////////////////////////////////////////////////////////////////////
-//                 ThruPOA Proxy  Implementation
-//
-
-POA_IR::_TAO_IDLType_ThruPOA_Proxy_Impl::_TAO_IDLType_ThruPOA_Proxy_Impl (void)
-{}
-
-// ThruPOA Implementation of the IDL interface methods
-
-CORBA::TypeCode_ptr POA_IR::_TAO_IDLType_ThruPOA_Proxy_Impl::type (
+CORBA::TypeCode_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::get_canonical_typecode (
     CORBA_Object *_collocated_tao_target_,
+    CORBA::TypeCode_ptr tc,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -6046,1465 +3778,1126 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "type",
+      "get_canonical_typecode",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::IDLType_ptr,
+      POA_IR::Repository_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/IDLType:1.0"
+          "IDL:omg.org/IR/Repository:1.0"
         )
-    )->type (
+    )->get_canonical_typecode (
+        tc,
         ACE_TRY_ENV
       );
 }
 
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::IDLType::IDLType (void)
-{
-  this->optable_ = &tao_IR_IDLType_optable;
-}
-
-// copy ctor
-POA_IR::IDLType::IDLType (const IDLType& rhs)
-  :   ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::IDLType::~IDLType (void)
+IR::PrimitiveDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::get_primitive (
+    CORBA_Object *_collocated_tao_target_,
+    IR_PrimitiveKind kind,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
+    IR_PrimitiveDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "get_primitive",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->get_primitive (
+        kind,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::IDLType::_get_type_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::StringDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_string (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::ULong bound,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::IDLType *_tao_impl = (POA_IR::IDLType *)_tao_object_reference;
-
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_StringDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::IDLType::TAO_ServerRequestInfo_IR_IDLType_type_get ri (
-      "_get_type",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_string",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->create_string (
+        bound,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::IDLType::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
+IR::WstringDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_wstring (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::ULong bound,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::IDLType *_tao_impl = (POA_IR::IDLType *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
+    IR_WstringDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_wstring",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->create_wstring (
+        bound,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::IDLType::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
+IR::SequenceDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_sequence (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::ULong bound,
+    IR_IDLType_ptr element_type,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::IDLType *_tao_impl = (POA_IR::IDLType *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
+    IR_SequenceDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_sequence",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->create_sequence (
+        bound,
+        element_type,
+        ACE_TRY_ENV
+      );
 }
 
-CORBA::Boolean POA_IR::IDLType::_is_a (
-    const char* value,
+IR::ArrayDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_array (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::ULong length,
+    IR_IDLType_ptr element_type,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
+    IR_ArrayDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_array",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->create_array (
+        length,
+        element_type,
+        ACE_TRY_ENV
+      );
 }
 
-void* POA_IR::IDLType::_downcast (
-    const char* logical_type_id
+IR::FixedDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_fixed (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::UShort digits,
+    CORBA::Short scale,
+    CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
-    return ACE_static_cast (POA_IR::IDLType_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
+    IR_FixedDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_fixed",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::Repository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/Repository:1.0"
+        )
+    )->create_fixed (
+        digits,
+        scale,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::IDLType::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
+
+// skeleton constructor
+POA_IR::Repository::Repository (void)
 {
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
+  this->optable_ = &tao_IR_Repository_optable;
 }
 
-const char* POA_IR::IDLType::_interface_repository_id (void) const
+// copy ctor
+POA_IR::Repository::Repository (const Repository& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
+
+// skeleton destructor
+POA_IR::Repository::~Repository (void)
 {
-  return "IDL:omg.org/IR/IDLType:1.0";
 }
 
-IR::IDLType*
-POA_IR::IDLType::_this (CORBA_Environment &ACE_TRY_ENV)
+void POA_IR::Repository::lookup_id_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::IDLType::_unchecked_narrow (obj.in ());
-}
-
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::IDLType::TAO_ServerRequestInfo_IR_IDLType_type_get::TAO_ServerRequestInfo_IR_IDLType_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  IR_Contained_var _tao_retval;
+  CORBA::String_var search_id;
+  if (!(
+    (_tao_in >> search_id.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::IDLType::TAO_ServerRequestInfo_IR_IDLType_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->lookup_id (
+      search_id.in (),
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::IDLType::TAO_ServerRequestInfo_IR_IDLType_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::IDLType::TAO_ServerRequestInfo_IR_IDLType_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::Repository::get_canonical_typecode_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
-void 
-POA_IR::IDLType::TAO_ServerRequestInfo_IR_IDLType_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  CORBA::TypeCode_var _tao_retval;
+  CORBA::TypeCode_var tc;
+  if (!(
+    (_tao_in >> tc.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_Repository_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:20 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_Repository_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_Repository_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
-{
-  static const unsigned char asso_values[] =
-    {
-#if defined (ACE_MVS)
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 20,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 15,
-     71,  0, 23, 10, 71,  5, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71,  0,  0, 15,
-     71,  0, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 30,  0, 71, 71, 71,  0,  0, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71,
-#else
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
-     71, 71, 71, 71, 71, 20, 71, 15, 71,  0,
-     23, 10, 71,  5, 71, 71, 71, 71,  0,  0,
-     15, 71,  0, 71, 71, 30,  0, 71, 71, 71,
-      0,  0, 71, 71, 71, 71, 71, 71,
-#endif /* ACE_MVS */
-    };
-  return len + asso_values[str[len - 1]] + asso_values[str[0]];
+  _tao_retval = _tao_impl->get_canonical_typecode (
+      tc.in (),
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-const class TAO_operation_db_entry *
-TAO_IR_Repository_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+void POA_IR::Repository::get_primitive_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  enum
-    {
-      TOTAL_KEYWORDS = 27,
-      MIN_WORD_LENGTH = 5,
-      MAX_WORD_LENGTH = 22,
-      MIN_HASH_VALUE = 6,
-      MAX_HASH_VALUE = 70,
-      HASH_VALUE_RANGE = 65,
-      DUPLICATES = 2
-    };
-
-  static const class TAO_operation_db_entry  wordlist[] =
-    {
-      {"",0},{"",0},{"",0},{"",0},{"",0},{"",0},
-      {"lookup", 	&POA_IR::Repository::lookup_skel},
-      {"create_enum", 	&POA_IR::Repository::create_enum_skel},
-      {"create_array", 	&POA_IR::Repository::create_array_skel},
-      {"create_struct", 	&POA_IR::Repository::create_struct_skel},
-      {"create_constant", 	&POA_IR::Repository::create_constant_skel},
-      {"create_value_box", 	&POA_IR::Repository::create_value_box_skel},
-      {"create_string", 	&POA_IR::Repository::create_string_skel},
-      {"create_wstring", 	&POA_IR::Repository::create_wstring_skel},
-      {"lookup_name", 	&POA_IR::Repository::lookup_name_skel},
-      {"create_value", 	&POA_IR::Repository::create_value_skel},
-      {"create_module", 	&POA_IR::Repository::create_module_skel},
-      {"create_native", 	&POA_IR::Repository::create_native_skel},
-      {"create_sequence", 	&POA_IR::Repository::create_sequence_skel},
-      {"create_interface", 	&POA_IR::Repository::create_interface_skel},
-      {"create_union", 	&POA_IR::Repository::create_union_skel},
-      {"get_primitive", 	&POA_IR::Repository::get_primitive_skel},
-      {"destroy", 	&POA_IR::Repository::destroy_skel},
-      {"create_exception", 	&POA_IR::Repository::create_exception_skel},
-      {"lookup_id", 	&POA_IR::Repository::lookup_id_skel},
-      {"_non_existent",  &POA_IR::Repository::_non_existent_skel},
-      {"create_fixed", 	&POA_IR::Repository::create_fixed_skel},
-      {"get_canonical_typecode", 	&POA_IR::Repository::get_canonical_typecode_skel},
-      {"contents", 	&POA_IR::Repository::contents_skel},
-      {"_is_a",  &POA_IR::Repository::_is_a_skel},
-      {"create_alias", 	&POA_IR::Repository::create_alias_skel},
-      {"_get_def_kind", 	&POA_IR::Repository::_get_def_kind_skel},
-      {"describe_contents", 	&POA_IR::Repository::describe_contents_skel},
-    };
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
-  static const signed char lookup[] =
-    {
-       -1,  -1,  -1,  -1,  -1,  -1,   6,  -1,  -1, -16,  -2,   7,   8,   9, 
-       -1,  10,  11,  -1,  12,  13,  -1,  14,  15, -84,  -1,  18,  19,  20, 
-       21,  -1,  22,  23,  24,  25,  -1,  26,  -1,  27,  28,  -1,  29,  -1, 
-       30,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 
-       31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 
-       32, 
-    };
+  IR_PrimitiveDef_var _tao_retval;
+  IR_PrimitiveKind kind;
+  if (!(
+    (_tao_in >> kind)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
-    {
-      unsigned int key = hash (str, len);
+  _tao_retval = _tao_impl->get_primitive (
+      kind,
+      ACE_TRY_ENV
+    );
 
-      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
-        {
-          int slot = lookup[key];
+  ACE_CHECK;
 
-          if (slot >= 0 && slot < MAX_HASH_VALUE)
-            {
-              const char *s = wordlist[slot].opname_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
 
-              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-                return &wordlist[slot];
-            }
-          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
-            return 0;
-          else
-            {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+void POA_IR::Repository::create_string_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
-            }
-        }
-    }
-  return 0;
-}
-/* ending time is 10:26:20 */
-static TAO_IR_Repository_Perfect_Hash_OpTable tao_IR_Repository_optable;
+  IR_StringDef_var _tao_retval;
+  CORBA::ULong bound;
+  if (!(
+    (_tao_in >> bound)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
+  _tao_retval = _tao_impl->create_string (
+      bound,
+      ACE_TRY_ENV
+    );
 
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
+  ACE_CHECK;
 
-// Factory function Implementation.
-POA_IR::_TAO_Repository_Strategized_Proxy_Broker *POA_IR::_TAO_Repository_Strategized_Proxy_Broker::the_TAO_Repository_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_Repository_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-POA_IR::_TAO_Repository_Strategized_Proxy_Broker::_TAO_Repository_Strategized_Proxy_Broker (void)
+void POA_IR::Repository::create_wstring_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
-POA_IR::_TAO_Repository_Strategized_Proxy_Broker::~_TAO_Repository_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
+  IR_WstringDef_var _tao_retval;
+  CORBA::ULong bound;
+  if (!(
+    (_tao_in >> bound)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_retval = _tao_impl->create_wstring (
+      bound,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-IR::_TAO_Repository_Proxy_Impl&
-POA_IR::_TAO_Repository_Strategized_Proxy_Broker::select_proxy (
-    ::IR::Repository *object,
+void POA_IR::Repository::create_sequence_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
+
+  IR_SequenceDef_var _tao_retval;
+  CORBA::ULong bound;
+  IR_IDLType_var element_type;
+  if (!(
+    (_tao_in >> bound) &&
+    (_tao_in >> element_type.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_retval = _tao_impl->create_sequence (
+      bound,
+      element_type.in (),
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::_TAO_Repository_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
+void POA_IR::Repository::create_array_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
-  
-  if (this->proxy_cache_[strategy] == 0)
-    {
-      switch (strategy)
-        {
-        case TAO_ORB_Core::THRU_POA_STRATEGY:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-          
-        case TAO_ORB_Core::REMOTE_STRATEGY:
-        default:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              ::IR::_TAO_Repository_Remote_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-        
-      }
-    
-  }
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
+  IR_ArrayDef_var _tao_retval;
+  CORBA::ULong length;
+  IR_IDLType_var element_type;
+  if (!(
+    (_tao_in >> length) &&
+    (_tao_in >> element_type.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-//
-//        End Strategized Proxy Broker Implementation
-///////////////////////////////////////////////////////////////////////
+   _tao_retval = _tao_impl->create_array (
+      length,
+      element_type.in (),
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-IR::_TAO_Repository_Proxy_Broker *
-IR__TAO_Repository_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
-{
-  ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_Repository_Strategized_Proxy_Broker::the_TAO_Repository_Strategized_Proxy_Broker();
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-int
-IR__TAO_Repository_Proxy_Broker_Factory_Initializer (long _dummy_)
+void POA_IR::Repository::create_fixed_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  ACE_UNUSED_ARG (_dummy_);
-  
-  IR__TAO_Repository_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_Repository_Proxy_Broker_Factory_function;
-  
-  return 0;
-}
-
-static int IR__TAO_Repository_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_Repository_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_Repository_Proxy_Broker_Factory_Initializer));
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
+  IR_FixedDef_var _tao_retval;
+  CORBA::UShort digits;
+  CORBA::Short scale;
+  if (!(
+    (_tao_in >> digits) &&
+    (_tao_in >> scale)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-///////////////////////////////////////////////////////////////////////
-//                 ThruPOA Proxy  Implementation
-//
+  _tao_retval = _tao_impl->create_fixed (
+      digits,
+      scale,
+      ACE_TRY_ENV
+    );
 
-POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::_TAO_Repository_ThruPOA_Proxy_Impl (void)
-{}
+  ACE_CHECK;
 
-// ThruPOA Implementation of the IDL interface methods
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
 
-IR::Contained_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::lookup_id (
-    CORBA_Object *_collocated_tao_target_,
-    const char * search_id,
+void POA_IR::Repository::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    IR::Contained_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "lookup_id",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->lookup_id (
-        search_id,
-        ACE_TRY_ENV
-      );
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
+
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::TypeCode_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::get_canonical_typecode (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::TypeCode_ptr tc,
+void POA_IR::Repository::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    CORBA::TypeCode_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "get_canonical_typecode",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->get_canonical_typecode (
-        tc,
-        ACE_TRY_ENV
-      );
+  POA_IR::Repository *_tao_impl = (POA_IR::Repository *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-IR::PrimitiveDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::get_primitive (
-    CORBA_Object *_collocated_tao_target_,
-    IR::PrimitiveKind kind,
+CORBA::Boolean POA_IR::Repository::_is_a (
+    const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    IR::PrimitiveDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "get_primitive",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->get_primitive (
-        kind,
-        ACE_TRY_ENV
-      );
+  if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Repository:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
 }
 
-IR::StringDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_string (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong bound,
-    CORBA::Environment &ACE_TRY_ENV
+void* POA_IR::Repository::_downcast (
+    const char* logical_type_id
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    IR::StringDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_string",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->create_string (
-        bound,
-        ACE_TRY_ENV
-      );
-}
-
-IR::WstringDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_wstring (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong bound,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::WstringDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_wstring",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->create_wstring (
-        bound,
-        ACE_TRY_ENV
-      );
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Repository:1.0") == 0)
+    return ACE_static_cast (POA_IR::Repository_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
+    return ACE_static_cast (POA_IR::Container_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
+  return 0;
 }
 
-IR::SequenceDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_sequence (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong bound,
-    IR::IDLType_ptr element_type,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+void POA_IR::Repository::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
-    IR::SequenceDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_sequence",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->create_sequence (
-        bound,
-        element_type,
-        ACE_TRY_ENV
-      );
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-IR::ArrayDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_array (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong length,
-    IR::IDLType_ptr element_type,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+const char* POA_IR::Repository::_interface_repository_id (void) const
 {
-    IR::ArrayDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_array",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->create_array (
-        length,
-        element_type,
-        ACE_TRY_ENV
-      );
+  return "IDL:omg.org/IR/Repository:1.0";
 }
 
-IR::FixedDef_ptr POA_IR::_TAO_Repository_ThruPOA_Proxy_Impl::create_fixed (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::UShort digits,
-    CORBA::Short scale,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+IR::Repository*
+POA_IR::Repository::_this (CORBA_Environment &ACE_TRY_ENV)
 {
-    IR::FixedDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_fixed",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::Repository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/Repository:1.0"
-        )
-    )->create_fixed (
-        digits,
-        scale,
-        ACE_TRY_ENV
-      );
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
+  
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
+  
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
+  
+  CORBA::Object_var obj = tmp;
+  return IR_Repository::_unchecked_narrow (obj.in ());
 }
 
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::Repository::Repository (void)
+class TAO_IR_ComponentRepository_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  this->optable_ = &tao_IR_Repository_optable;
-}
-
-// copy ctor
-POA_IR::Repository::Repository (const Repository& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::Repository::~Repository (void)
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:09 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ComponentRepository_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_ComponentRepository_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
+  static const unsigned char asso_values[] =
+    {
+#if defined (ACE_MVS)
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 15,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54,  5,
+     54,  0, 25, 15, 54, 10, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 10,  0,  3,
+     54, 25, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54,  0,  5, 54, 54, 54,  0, 20, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54,
+#else
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
+     54, 54, 54, 54, 54, 15, 54,  5, 54,  0,
+     25, 15, 54, 10, 54, 54, 54, 54, 10,  0,
+      3, 54, 25, 54, 54,  0,  5, 54, 54, 54,
+      0, 20, 54, 54, 54, 54, 54, 54,
+#endif /* ACE_MVS */
+    };
+  return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
-void POA_IR::Repository::lookup_id_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
+const class TAO_operation_db_entry *
+TAO_IR_ComponentRepository_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
+  enum
+    {
+      TOTAL_KEYWORDS = 29,
+      MIN_WORD_LENGTH = 5,
+      MAX_WORD_LENGTH = 22,
+      MIN_HASH_VALUE = 8,
+      MAX_HASH_VALUE = 53,
+      HASH_VALUE_RANGE = 46,
+      DUPLICATES = 2
+    };
 
-  IR::Contained_var _tao_retval;
-  CORBA::String_var search_id;
-  if (!(
-    (_tao_in >> search_id.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+  static const class TAO_operation_db_entry  wordlist[] =
+    {
+      {"",0},{"",0},{"",0},{"",0},{"",0},{"",0},{"",0},{"",0},
+      {"contents",      &POA_IR::ComponentRepository::contents_skel},
+      {"create_enum",   &POA_IR::ComponentRepository::create_enum_skel},
+      {"create_alias",  &POA_IR::ComponentRepository::create_alias_skel},
+      {"create_union",  &POA_IR::ComponentRepository::create_union_skel},
+      {"create_value_box",      &POA_IR::ComponentRepository::create_value_box_skel},
+      {"create_struct",         &POA_IR::ComponentRepository::create_struct_skel},
+      {"create_exception",      &POA_IR::ComponentRepository::create_exception_skel},
+      {"create_constant",       &POA_IR::ComponentRepository::create_constant_skel},
+      {"create_component",      &POA_IR::ComponentRepository::create_component_skel},
+      {"create_string",         &POA_IR::ComponentRepository::create_string_skel},
+      {"create_wstring",        &POA_IR::ComponentRepository::create_wstring_skel},
+      {"_is_a",  &POA_IR::ComponentRepository::_is_a_skel},
+      {"create_home",   &POA_IR::ComponentRepository::create_home_skel},
+      {"create_value",  &POA_IR::ComponentRepository::create_value_skel},
+      {"create_module",         &POA_IR::ComponentRepository::create_module_skel},
+      {"create_native",         &POA_IR::ComponentRepository::create_native_skel},
+      {"create_sequence",       &POA_IR::ComponentRepository::create_sequence_skel},
+      {"create_interface",      &POA_IR::ComponentRepository::create_interface_skel},
+      {"create_array",  &POA_IR::ComponentRepository::create_array_skel},
+      {"_non_existent",  &POA_IR::ComponentRepository::_non_existent_skel},
+      {"lookup_name",   &POA_IR::ComponentRepository::lookup_name_skel},
+      {"create_fixed",  &POA_IR::ComponentRepository::create_fixed_skel},
+      {"get_primitive",         &POA_IR::ComponentRepository::get_primitive_skel},
+      {"lookup",        &POA_IR::ComponentRepository::lookup_skel},
+      {"describe_contents",     &POA_IR::ComponentRepository::describe_contents_skel},
+      {"lookup_id",     &POA_IR::ComponentRepository::lookup_id_skel},
+      {"get_canonical_typecode",        &POA_IR::ComponentRepository::get_canonical_typecode_skel},
+      {"destroy",       &POA_IR::ComponentRepository::destroy_skel},
+      {"_get_def_kind",         &POA_IR::ComponentRepository::_get_def_kind_skel},
+    };
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_lookup_id ri (
-      "lookup_id",
-      _tao_server_request.service_info (),
-      search_id.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
+  static const signed char lookup[] =
     {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->lookup_id (
-          search_id.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::Contained_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,   9,  10, -22,
+       -2,  11,  12,  -1,  13,  14,  15,  16,  -1,  17,  18,  19,  20,  21,
+      -68,  -1,  24,  25,  26,  27,  -1,  -1,  28,  29,  30,  -1,  -1,  31,
+       32,  -1,  33,  -1,  -1,  34,  -1,  -1,  -1,  -1,  35,  36,
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
     {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      unsigned int key = hash (str, len);
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          int slot = lookup[key];
+
+          if (slot >= 0 && slot < MAX_HASH_VALUE)
+            {
+              const char *s = wordlist[slot].opname_;
+
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+                return &wordlist[slot];
+            }
+          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
+            return 0;
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
 
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
+            }
+        }
+    }
+  return 0;
 }
+/* ending time is 11:23:09 */
+static TAO_IR_ComponentRepository_Perfect_Hash_OpTable tao_IR_ComponentRepository_optable;
 
-void POA_IR::Repository::get_canonical_typecode_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
 
-  CORBA::TypeCode_var _tao_retval;
-  CORBA::TypeCode_var tc;
-  if (!(
-    (_tao_in >> tc.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+// Factory function Implementation.
+POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker *POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::the_TAO_ComponentRepository_Strategized_Proxy_Broker (void)
+{
+  static POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
+}
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode ri (
-      "get_canonical_typecode",
-      _tao_server_request.service_info (),
-      tc.in (),
-      ACE_TRY_ENV
-    );
+POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::_TAO_ComponentRepository_Strategized_Proxy_Broker (void)
+{
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
   
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->get_canonical_typecode (
-          tc.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+}
 
+POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::~_TAO_ComponentRepository_Strategized_Proxy_Broker (void)
+{
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
+  
 }
 
-void POA_IR::Repository::get_primitive_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+_TAO_ComponentRepository_Proxy_Impl&
+POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::select_proxy (
+    IR_ComponentRepository *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
-
-  IR::PrimitiveDef_var _tao_retval;
-  IR::PrimitiveKind kind;
-  if (!(
-    (_tao_in >> kind)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
   
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_primitive ri (
-      "get_primitive",
-      _tao_server_request.service_info (),
-      kind,
-      ACE_TRY_ENV
-    );
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
+  
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
+  
+  return *this->proxy_cache_[strategy];
   
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->get_primitive (
-          kind,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::PrimitiveDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::Repository::create_string_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+void 
+POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
-
-  IR::StringDef_var _tao_retval;
-  CORBA::ULong bound;
-  if (!(
-    (_tao_in >> bound)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_string ri (
-      "create_string",
-      _tao_server_request.service_info (),
-      bound,
-      ACE_TRY_ENV
-    );
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
   
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_string (
-          bound,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::StringDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
+  if (this->proxy_cache_[strategy] == 0)
     {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      switch (strategy)
+        {
+        case TAO_ORB_Core::THRU_POA_STRATEGY:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ComponentRepository_ThruPOA_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+          
+        case TAO_ORB_Core::REMOTE_STRATEGY:
+        default:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ComponentRepository_Remote_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+        
+      }
+    
+  }
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
 
-}
+//
+//        End Strategized Proxy Broker Implementation
+///////////////////////////////////////////////////////////////////////
 
-void POA_IR::Repository::create_wstring_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
 
-  IR::WstringDef_var _tao_retval;
-  CORBA::ULong bound;
-  if (!(
-    (_tao_in >> bound)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+_TAO_ComponentRepository_Proxy_Broker *
+_TAO_ComponentRepository_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+{
+  ACE_UNUSED_ARG (obj);
+  return ::POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::the_TAO_ComponentRepository_Strategized_Proxy_Broker();
+}
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
+int
+_TAO_ComponentRepository_Proxy_Broker_Factory_Initializer (long _dummy_)
+{
+  ACE_UNUSED_ARG (_dummy_);
   
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_wstring ri (
-      "create_wstring",
-      _tao_server_request.service_info (),
-      bound,
-      ACE_TRY_ENV
-    );
+  _TAO_ComponentRepository_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ComponentRepository_Proxy_Broker_Factory_function;
   
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_wstring (
-          bound,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::WstringDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+  return 0;
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+static int _TAO_ComponentRepository_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ComponentRepository_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ComponentRepository_Proxy_Broker_Factory_Initializer));
 
-}
 
-void POA_IR::Repository::create_sequence_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+///////////////////////////////////////////////////////////////////////
+//                 ThruPOA Proxy  Implementation
+//
+
+POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::_TAO_ComponentRepository_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::~_TAO_ComponentRepository_ThruPOA_Proxy_Impl (void)
+{}
+
+// ThruPOA Implementation of the IDL interface methods
+
+IR::ComponentDef_ptr POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::create_component (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_ComponentDef_ptr base_component,
+    const IR_InterfaceDefSeq & supports_interfaces,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
+    IR_ComponentDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_component",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentRepository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentRepository:1.0"
+        )
+    )->create_component (
+        id,
+        name,
+        version,
+        base_component,
+        supports_interfaces,
+        ACE_TRY_ENV
+      );
+}
 
-  IR::SequenceDef_var _tao_retval;
-  CORBA::ULong bound;
-  IR::IDLType_var element_type;
-  if (!(
-    (_tao_in >> bound) &&
-    (_tao_in >> element_type.out ())
+IR::HomeDef_ptr POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::create_home (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_HomeDef_ptr base_home,
+    IR_ComponentDef_ptr managed_component,
+    IR_ValueDef_ptr primary_key,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    IR_HomeDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_sequence ri (
-      "create_sequence",
-      _tao_server_request.service_info (),
-      bound,
-      element_type.in (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_home",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_sequence (
-          bound,
-          element_type.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::SequenceDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentRepository_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentRepository:1.0"
+        )
+    )->create_home (
+        id,
+        name,
+        version,
+        base_home,
+        managed_component,
+        primary_key,
+        ACE_TRY_ENV
+      );
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
 
+// skeleton constructor
+POA_IR::ComponentRepository::ComponentRepository (void)
+{
+  this->optable_ = &tao_IR_ComponentRepository_optable;
 }
 
-void POA_IR::Repository::create_array_skel (
+// copy ctor
+POA_IR::ComponentRepository::ComponentRepository (const ComponentRepository& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Repository) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
+
+// skeleton destructor
+POA_IR::ComponentRepository::~ComponentRepository (void)
+{
+}
+
+void POA_IR::ComponentRepository::create_component_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
+  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *)_tao_object_reference;
 
-  IR::ArrayDef_var _tao_retval;
-  CORBA::ULong length;
-  IR::IDLType_var element_type;
+  IR_ComponentDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_ComponentDef_var base_component;
+  IR_InterfaceDefSeq supports_interfaces;
   if (!(
-    (_tao_in >> length) &&
-    (_tao_in >> element_type.out ())
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> base_component.out ()) &&
+    (_tao_in >> supports_interfaces)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_array ri (
-      "create_array",
-      _tao_server_request.service_info (),
-      length,
-      element_type.in (),
+  _tao_retval = _tao_impl->create_component (
+      id.in (),
+      name.in (),
+      version.in (),
+      base_component.in (),
+      supports_interfaces,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_array (
-          length,
-          element_type.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ArrayDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::Repository::create_fixed_skel (
+void POA_IR::ComponentRepository::create_home_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *)_tao_object_reference;
+  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *)_tao_object_reference;
 
-  IR::FixedDef_var _tao_retval;
-  CORBA::UShort digits;
-  CORBA::Short scale;
+  IR_HomeDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_HomeDef_var base_home;
+  IR_ComponentDef_var managed_component;
+  IR_ValueDef_var primary_key;
   if (!(
-    (_tao_in >> digits) &&
-    (_tao_in >> scale)
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> base_home.out ()) &&
+    (_tao_in >> managed_component.out ()) &&
+    (_tao_in >> primary_key.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_fixed ri (
-      "create_fixed",
-      _tao_server_request.service_info (),
-      digits,
-      scale,
+  _tao_retval = _tao_impl->create_home (
+      id.in (),
+      name.in (),
+      version.in (),
+      base_home.in (),
+      managed_component.in (),
+      primary_key.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_fixed (
-          digits,
-          scale,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::FixedDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::Repository::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ComponentRepository::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *) _tao_object_reference;
+  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::Repository::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ComponentRepository::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::Repository *_tao_impl = (POA_IR::Repository *) _tao_object_reference;
+  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::Repository::_is_a (
+CORBA::Boolean POA_IR::ComponentRepository::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ComponentRepository:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Repository:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
@@ -7514,10 +4907,12 @@
       return 0;
 }
 
-void* POA_IR::Repository::_downcast (
+void* POA_IR::ComponentRepository::_downcast (
     const char* logical_type_id
   )
 {
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ComponentRepository:1.0") == 0)
+    return ACE_static_cast (POA_IR::ComponentRepository_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Repository:1.0") == 0)
     return ACE_static_cast (POA_IR::Repository_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
@@ -7529,18 +4924,18 @@
   return 0;
 }
 
-void POA_IR::Repository::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::ComponentRepository::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::Repository::_interface_repository_id (void) const
+const char* POA_IR::ComponentRepository::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/Repository:1.0";
+  return "IDL:omg.org/IR/ComponentRepository:1.0";
 }
 
-IR::Repository*
-POA_IR::Repository::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::ComponentRepository*
+POA_IR::ComponentRepository::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -7553,524 +4948,125 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::Repository::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_lookup_id::TAO_ServerRequestInfo_IR_Repository_lookup_id (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * search_id,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    search_id_ (search_id)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_lookup_id::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_search_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_search_id + 1);
-  this->parameter_list_[length_search_id].argument <<= search_id_;
-  this->parameter_list_[length_search_id].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_lookup_id::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_lookup_id::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_lookup_id::result (IR::Contained_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::TypeCode_ptr tc,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    tc_ (tc)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_tc = this->parameter_list_.length ();
-  this->parameter_list_.length (length_tc + 1);
-  this->parameter_list_[length_tc].argument <<= tc_;
-  this->parameter_list_[length_tc].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  return IR_ComponentRepository::_unchecked_narrow (obj.in ());
 }
 
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+class TAO_IR_ModuleDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_canonical_typecode::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_primitive::TAO_ServerRequestInfo_IR_Repository_get_primitive (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::PrimitiveKind & kind,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    kind_ (kind)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_primitive::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_kind = this->parameter_list_.length ();
-  this->parameter_list_.length (length_kind + 1);
-  this->parameter_list_[length_kind].argument <<=  this->kind_;
-  
-  this->parameter_list_[length_kind].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_primitive::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_primitive::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_get_primitive::result (IR::PrimitiveDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_string::TAO_ServerRequestInfo_IR_Repository_create_string (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & bound,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    bound_ (bound)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_string::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_bound = this->parameter_list_.length ();
-  this->parameter_list_.length (length_bound + 1);
-  this->parameter_list_[length_bound].argument <<= bound_;
-  this->parameter_list_[length_bound].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_string::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_string::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_string::result (IR::StringDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_wstring::TAO_ServerRequestInfo_IR_Repository_create_wstring (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & bound,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    bound_ (bound)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_wstring::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_bound = this->parameter_list_.length ();
-  this->parameter_list_.length (length_bound + 1);
-  this->parameter_list_[length_bound].argument <<= bound_;
-  this->parameter_list_[length_bound].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_wstring::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_wstring::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_wstring::result (IR::WstringDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_sequence::TAO_ServerRequestInfo_IR_Repository_create_sequence (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & bound,
-    IR::IDLType_ptr element_type,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    bound_ (bound),
-    element_type_ (element_type)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_sequence::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_bound = this->parameter_list_.length ();
-  this->parameter_list_.length (length_bound + 1);
-  this->parameter_list_[length_bound].argument <<= bound_;
-  this->parameter_list_[length_bound].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_element_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_element_type + 1);
-  this->parameter_list_[length_element_type].argument <<=  this->element_type_;
-  
-  this->parameter_list_[length_element_type].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_sequence::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_sequence::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_sequence::result (IR::SequenceDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_array::TAO_ServerRequestInfo_IR_Repository_create_array (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & length,
-    IR::IDLType_ptr element_type,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    length_ (length),
-    element_type_ (element_type)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_array::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_length = this->parameter_list_.length ();
-  this->parameter_list_.length (length_length + 1);
-  this->parameter_list_[length_length].argument <<= length_;
-  this->parameter_list_[length_length].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_element_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_element_type + 1);
-  this->parameter_list_[length_element_type].argument <<=  this->element_type_;
-  
-  this->parameter_list_[length_element_type].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_array::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_array::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_array::result (IR::ArrayDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_fixed::TAO_ServerRequestInfo_IR_Repository_create_fixed (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::UShort & digits,
-    const CORBA::Short & scale,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    digits_ (digits),
-    scale_ (scale)
-{}
-
-Dynamic::ParameterList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_fixed::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_digits = this->parameter_list_.length ();
-  this->parameter_list_.length (length_digits + 1);
-  this->parameter_list_[length_digits].argument <<= digits_;
-  this->parameter_list_[length_digits].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_scale = this->parameter_list_.length ();
-  this->parameter_list_.length (length_scale + 1);
-  this->parameter_list_[length_scale].argument <<= scale_;
-  this->parameter_list_[length_scale].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_fixed::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_fixed::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::Repository::TAO_ServerRequestInfo_IR_Repository_create_fixed::result (IR::FixedDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ComponentRepository_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:20 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ComponentRepository_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_ComponentRepository_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:09 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ModuleDef_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_ModuleDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 15,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54,  5,
-     54,  0, 25, 15, 54, 10, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 10,  0,  3,
-     54, 25, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54,  0,  5, 54, 54, 54,  0, 20, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 10,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
+     52,  0, 15,  0, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 20,  0,  5,
+     52, 10, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 10, 20, 52, 52, 52, 10, 15, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52,
 #else
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
-     54, 54, 54, 54, 54, 15, 54,  5, 54,  0,
-     25, 15, 54, 10, 54, 54, 54, 54, 10,  0,
-      3, 54, 25, 54, 54,  0,  5, 54, 54, 54,
-      0, 20, 54, 54, 54, 54, 54, 54,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 10, 52,  0, 52,  0,
+     15,  0, 52, 52, 52, 52, 52, 52, 20,  0,
+      5, 52, 10, 52, 52, 10, 20, 52, 52, 52,
+     10, 15, 52, 52, 52, 52, 52, 52,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_ComponentRepository_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_ModuleDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 29,
-      MIN_WORD_LENGTH = 5,
-      MAX_WORD_LENGTH = 22,
-      MIN_HASH_VALUE = 8,
-      MAX_HASH_VALUE = 53,
-      HASH_VALUE_RANGE = 46,
-      DUPLICATES = 2
+      TOTAL_KEYWORDS = 30,
+      MIN_WORD_LENGTH = 4,
+      MAX_WORD_LENGTH = 26,
+      MIN_HASH_VALUE = 4,
+      MAX_HASH_VALUE = 51,
+      HASH_VALUE_RANGE = 48,
+      DUPLICATES = 5
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
-      {"",0},{"",0},{"",0},{"",0},{"",0},{"",0},{"",0},{"",0},
-      {"contents", 	&POA_IR::ComponentRepository::contents_skel},
-      {"create_enum", 	&POA_IR::ComponentRepository::create_enum_skel},
-      {"create_alias", 	&POA_IR::ComponentRepository::create_alias_skel},
-      {"create_union", 	&POA_IR::ComponentRepository::create_union_skel},
-      {"create_value_box", 	&POA_IR::ComponentRepository::create_value_box_skel},
-      {"create_struct", 	&POA_IR::ComponentRepository::create_struct_skel},
-      {"create_exception", 	&POA_IR::ComponentRepository::create_exception_skel},
-      {"create_constant", 	&POA_IR::ComponentRepository::create_constant_skel},
-      {"create_component", 	&POA_IR::ComponentRepository::create_component_skel},
-      {"create_string", 	&POA_IR::ComponentRepository::create_string_skel},
-      {"create_wstring", 	&POA_IR::ComponentRepository::create_wstring_skel},
-      {"_is_a",  &POA_IR::ComponentRepository::_is_a_skel},
-      {"create_home", 	&POA_IR::ComponentRepository::create_home_skel},
-      {"create_value", 	&POA_IR::ComponentRepository::create_value_skel},
-      {"create_module", 	&POA_IR::ComponentRepository::create_module_skel},
-      {"create_native", 	&POA_IR::ComponentRepository::create_native_skel},
-      {"create_sequence", 	&POA_IR::ComponentRepository::create_sequence_skel},
-      {"create_interface", 	&POA_IR::ComponentRepository::create_interface_skel},
-      {"create_array", 	&POA_IR::ComponentRepository::create_array_skel},
-      {"_non_existent",  &POA_IR::ComponentRepository::_non_existent_skel},
-      {"lookup_name", 	&POA_IR::ComponentRepository::lookup_name_skel},
-      {"create_fixed", 	&POA_IR::ComponentRepository::create_fixed_skel},
-      {"get_primitive", 	&POA_IR::ComponentRepository::get_primitive_skel},
-      {"lookup", 	&POA_IR::ComponentRepository::lookup_skel},
-      {"describe_contents", 	&POA_IR::ComponentRepository::describe_contents_skel},
-      {"lookup_id", 	&POA_IR::ComponentRepository::lookup_id_skel},
-      {"get_canonical_typecode", 	&POA_IR::ComponentRepository::get_canonical_typecode_skel},
-      {"destroy", 	&POA_IR::ComponentRepository::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::ComponentRepository::_get_def_kind_skel},
+      {"",0},{"",0},{"",0},{"",0},
+      {"move",  &POA_IR::ModuleDef::move_skel},
+      {"create_enum",   &POA_IR::ModuleDef::create_enum_skel},
+      {"create_value",  &POA_IR::ModuleDef::create_value_skel},
+      {"create_module",         &POA_IR::ModuleDef::create_module_skel},
+      {"create_native",         &POA_IR::ModuleDef::create_native_skel},
+      {"_is_a",  &POA_IR::ModuleDef::_is_a_skel},
+      {"create_interface",      &POA_IR::ModuleDef::create_interface_skel},
+      {"create_union",  &POA_IR::ModuleDef::create_union_skel},
+      {"contents",      &POA_IR::ModuleDef::contents_skel},
+      {"_get_name",     &POA_IR::ModuleDef::_get_name_skel},
+      {"_set_name",     &POA_IR::ModuleDef::_set_name_skel},
+      {"create_exception",      &POA_IR::ModuleDef::create_exception_skel},
+      {"create_alias",  &POA_IR::ModuleDef::create_alias_skel},
+      {"describe",      &POA_IR::ModuleDef::describe_skel},
+      {"create_value_box",      &POA_IR::ModuleDef::create_value_box_skel},
+      {"_get_version",  &POA_IR::ModuleDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ModuleDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::ModuleDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::ModuleDef::_get_defined_in_skel},
+      {"lookup_name",   &POA_IR::ModuleDef::lookup_name_skel},
+      {"_get_id",       &POA_IR::ModuleDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ModuleDef::_set_id_skel},
+      {"create_struct",         &POA_IR::ModuleDef::create_struct_skel},
+      {"create_constant",       &POA_IR::ModuleDef::create_constant_skel},
+      {"lookup",        &POA_IR::ModuleDef::lookup_skel},
+      {"destroy",       &POA_IR::ModuleDef::destroy_skel},
+      {"_get_def_kind",         &POA_IR::ModuleDef::_get_def_kind_skel},
+      {"describe_contents",     &POA_IR::ModuleDef::describe_contents_skel},
+      {"_non_existent",  &POA_IR::ModuleDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::ModuleDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,   9,  10, -22, 
-       -2,  11,  12,  -1,  13,  14,  15,  16,  -1,  17,  18,  19,  20,  21, 
-      -68,  -1,  24,  25,  26,  27,  -1,  -1,  28,  29,  30,  -1,  -1,  31, 
-       32,  -1,  33,  -1,  -1,  34,  -1,  -1,  -1,  -1,  35,  36, 
+       -1,  -1,  -1,  -1,   4,  -7,  -2, -13,  -2, -19,  -2,   5,   6, -59,
+       -1,   9,  10,  11,  12, -63,  -1,  15,  16,  17, -24,  -2,  18, -69,
+       21,  -1,  22,  23, -59,  26,  -1,  27,  28,  29,  30,  -1,  -1,  -1,
+       31,  32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  33,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -8104,38 +5100,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:20 */
-static TAO_IR_ComponentRepository_Perfect_Hash_OpTable tao_IR_ComponentRepository_optable;
-
+/* ending time is 11:23:09 */
+static TAO_IR_ModuleDef_Perfect_Hash_OpTable tao_IR_ModuleDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker *POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::the_TAO_ComponentRepository_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker *POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::the_TAO_ModuleDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::_TAO_ComponentRepository_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::_TAO_ModuleDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::~_TAO_ComponentRepository_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::~_TAO_ModuleDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_ComponentRepository_Proxy_Impl&
-POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ComponentRepository *object,
+_TAO_ModuleDef_Proxy_Impl&
+POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ModuleDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -8153,7 +5148,7 @@
 }
 
 void 
-POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -8167,7 +5162,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl,
+              _TAO_ModuleDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -8177,7 +5172,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ComponentRepository_Remote_Proxy_Impl,
+              _TAO_ModuleDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -8194,379 +5189,112 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ComponentRepository_Proxy_Broker *
-IR__TAO_ComponentRepository_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ModuleDef_Proxy_Broker *
+_TAO_ModuleDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ComponentRepository_Strategized_Proxy_Broker::the_TAO_ComponentRepository_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::the_TAO_ModuleDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ComponentRepository_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ModuleDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ComponentRepository_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ComponentRepository_Proxy_Broker_Factory_function;
+  _TAO_ModuleDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ModuleDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ComponentRepository_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ComponentRepository_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ComponentRepository_Proxy_Broker_Factory_Initializer));
+static int _TAO_ModuleDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ModuleDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ModuleDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::_TAO_ComponentRepository_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_ModuleDef_ThruPOA_Proxy_Impl::_TAO_ModuleDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_ModuleDef_ThruPOA_Proxy_Impl::~_TAO_ModuleDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-IR::ComponentDef_ptr POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::create_component (
-    CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ComponentDef_ptr base_component,
-    const IR::InterfaceDefSeq & supports_interfaces,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::ComponentDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_component",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentRepository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentRepository:1.0"
-        )
-    )->create_component (
-        id,
-        name,
-        version,
-        base_component,
-        supports_interfaces,
-        ACE_TRY_ENV
-      );
-}
-
-IR::HomeDef_ptr POA_IR::_TAO_ComponentRepository_ThruPOA_Proxy_Impl::create_home (
-    CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::HomeDef_ptr base_home,
-    IR::ComponentDef_ptr managed_component,
-    IR::ValueDef_ptr primary_key,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::HomeDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_home",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentRepository_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentRepository:1.0"
-        )
-    )->create_home (
-        id,
-        name,
-        version,
-        base_home,
-        managed_component,
-        primary_key,
-        ACE_TRY_ENV
-      );
-}
-
 //
 //           End ThruPOA Proxy Implementation
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::ComponentRepository::ComponentRepository (void)
+POA_IR::ModuleDef::ModuleDef (void)
 {
-  this->optable_ = &tao_IR_ComponentRepository_optable;
+  this->optable_ = &tao_IR_ModuleDef_optable;
 }
 
 // copy ctor
-POA_IR::ComponentRepository::ComponentRepository (const ComponentRepository& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Repository) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+POA_IR::ModuleDef::ModuleDef (const ModuleDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::ComponentRepository::~ComponentRepository (void)
-{
-}
-
-void POA_IR::ComponentRepository::create_component_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
+POA_IR::ModuleDef::~ModuleDef (void)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *)_tao_object_reference;
-
-  IR::ComponentDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::ComponentDef_var base_component;
-  IR::InterfaceDefSeq supports_interfaces;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> base_component.out ()) &&
-    (_tao_in >> supports_interfaces)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_component ri (
-      "create_component",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      base_component.in (),
-      supports_interfaces,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_component (
-          id.in (),
-          name.in (),
-          version.in (),
-          base_component.in (),
-          supports_interfaces,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ComponentDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::ComponentRepository::create_home_skel (
+void POA_IR::ModuleDef::_is_a_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *)_tao_object_reference;
-
-  IR::HomeDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::HomeDef_var base_home;
-  IR::ComponentDef_var managed_component;
-  IR::ValueDef_var primary_key;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> base_home.out ()) &&
-    (_tao_in >> managed_component.out ()) &&
-    (_tao_in >> primary_key.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_home ri (
-      "create_home",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      base_home.in (),
-      managed_component.in (),
-      primary_key.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_home (
-          id.in (),
-          name.in (),
-          version.in (),
-          base_home.in (),
-          managed_component.in (),
-          primary_key.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::HomeDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ComponentRepository::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *) _tao_object_reference;
+  POA_IR::ModuleDef *_tao_impl = (POA_IR::ModuleDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::ComponentRepository::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ModuleDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::ComponentRepository *_tao_impl = (POA_IR::ComponentRepository *) _tao_object_reference;
+  POA_IR::ModuleDef *_tao_impl = (POA_IR::ModuleDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::ComponentRepository::_is_a (
+CORBA::Boolean POA_IR::ModuleDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ComponentRepository:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Repository:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ModuleDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
       return 1;
@@ -8574,16 +5302,16 @@
       return 0;
 }
 
-void* POA_IR::ComponentRepository::_downcast (
+void* POA_IR::ModuleDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ComponentRepository:1.0") == 0)
-    return ACE_static_cast (POA_IR::ComponentRepository_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Repository:1.0") == 0)
-    return ACE_static_cast (POA_IR::Repository_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ModuleDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ModuleDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
     return ACE_static_cast (POA_IR::Container_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    return ACE_static_cast (POA_IR::Contained_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
@@ -8591,18 +5319,18 @@
   return 0;
 }
 
-void POA_IR::ComponentRepository::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::ModuleDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::ComponentRepository::_interface_repository_id (void) const
+const char* POA_IR::ModuleDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/ComponentRepository:1.0";
+  return "IDL:omg.org/IR/ModuleDef:1.0";
 }
 
-IR::ComponentRepository*
-POA_IR::ComponentRepository::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::ModuleDef*
+POA_IR::ModuleDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -8615,281 +5343,114 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::ComponentRepository::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_component::TAO_ServerRequestInfo_IR_ComponentRepository_create_component (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ComponentDef_ptr base_component,
-    const IR::InterfaceDefSeq & supports_interfaces,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    base_component_ (base_component),
-    supports_interfaces_ (supports_interfaces)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_component::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_base_component = this->parameter_list_.length ();
-  this->parameter_list_.length (length_base_component + 1);
-  this->parameter_list_[length_base_component].argument <<=  this->base_component_;
-  
-  this->parameter_list_[length_base_component].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_supports_interfaces = this->parameter_list_.length ();
-  this->parameter_list_.length (length_supports_interfaces + 1);
-  this->parameter_list_[length_supports_interfaces].argument <<=  this->supports_interfaces_;
-  
-  this->parameter_list_[length_supports_interfaces].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_component::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_component::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_component::result (IR::ComponentDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_home::TAO_ServerRequestInfo_IR_ComponentRepository_create_home (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::HomeDef_ptr base_home,
-    IR::ComponentDef_ptr managed_component,
-    IR::ValueDef_ptr primary_key,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    base_home_ (base_home),
-    managed_component_ (managed_component),
-    primary_key_ (primary_key)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_home::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_base_home = this->parameter_list_.length ();
-  this->parameter_list_.length (length_base_home + 1);
-  this->parameter_list_[length_base_home].argument <<=  this->base_home_;
-  
-  this->parameter_list_[length_base_home].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_managed_component = this->parameter_list_.length ();
-  this->parameter_list_.length (length_managed_component + 1);
-  this->parameter_list_[length_managed_component].argument <<=  this->managed_component_;
-  
-  this->parameter_list_[length_managed_component].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_primary_key = this->parameter_list_.length ();
-  this->parameter_list_.length (length_primary_key + 1);
-  this->parameter_list_[length_primary_key].argument <<=  this->primary_key_;
-  
-  this->parameter_list_[length_primary_key].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_home::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_home::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ComponentRepository::TAO_ServerRequestInfo_IR_ComponentRepository_create_home::result (IR::HomeDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  return IR_ModuleDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ModuleDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_ConstantDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:20 */
+/* starting time is 11:23:09 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ModuleDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ConstantDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_ModuleDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_ConstantDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 10,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
-     52,  0, 15,  0, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 20,  0,  5,
-     52, 10, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 10, 20, 52, 52, 52, 10, 15, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37,  0,  0, 10, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 15, 37, 37, 37, 37, 10, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37,
 #else
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 10, 52,  0, 52,  0,
-     15,  0, 52, 52, 52, 52, 52, 52, 20,  0,
-      5, 52, 10, 52, 52, 10, 20, 52, 52, 52,
-     10, 15, 52, 52, 52, 52, 52, 52,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
+      0,  0, 10, 37, 37, 37, 37, 37, 37,  0,
+      0, 37, 37, 37, 37, 37, 15, 37, 37, 37,
+     37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_ModuleDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_ConstantDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 30,
+      TOTAL_KEYWORDS = 20,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 51,
-      HASH_VALUE_RANGE = 48,
-      DUPLICATES = 5
+      MAX_HASH_VALUE = 36,
+      HASH_VALUE_RANGE = 33,
+      DUPLICATES = 7
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ModuleDef::move_skel},
-      {"create_enum", 	&POA_IR::ModuleDef::create_enum_skel},
-      {"create_value", 	&POA_IR::ModuleDef::create_value_skel},
-      {"create_module", 	&POA_IR::ModuleDef::create_module_skel},
-      {"create_native", 	&POA_IR::ModuleDef::create_native_skel},
-      {"_is_a",  &POA_IR::ModuleDef::_is_a_skel},
-      {"create_interface", 	&POA_IR::ModuleDef::create_interface_skel},
-      {"create_union", 	&POA_IR::ModuleDef::create_union_skel},
-      {"contents", 	&POA_IR::ModuleDef::contents_skel},
-      {"_get_name", 	&POA_IR::ModuleDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::ModuleDef::_set_name_skel},
-      {"create_exception", 	&POA_IR::ModuleDef::create_exception_skel},
-      {"create_alias", 	&POA_IR::ModuleDef::create_alias_skel},
-      {"describe", 	&POA_IR::ModuleDef::describe_skel},
-      {"create_value_box", 	&POA_IR::ModuleDef::create_value_box_skel},
-      {"_get_version", 	&POA_IR::ModuleDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ModuleDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::ModuleDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::ModuleDef::_get_defined_in_skel},
-      {"lookup_name", 	&POA_IR::ModuleDef::lookup_name_skel},
-      {"_get_id", 	&POA_IR::ModuleDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ModuleDef::_set_id_skel},
-      {"create_struct", 	&POA_IR::ModuleDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::ModuleDef::create_constant_skel},
-      {"lookup", 	&POA_IR::ModuleDef::lookup_skel},
-      {"destroy", 	&POA_IR::ModuleDef::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::ModuleDef::_get_def_kind_skel},
-      {"describe_contents", 	&POA_IR::ModuleDef::describe_contents_skel},
-      {"_non_existent",  &POA_IR::ModuleDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ModuleDef::_get_containing_repository_skel},
+      {"move",  &POA_IR::ConstantDef::move_skel},
+      {"_is_a",  &POA_IR::ConstantDef::_is_a_skel},
+      {"_get_id",       &POA_IR::ConstantDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ConstantDef::_set_id_skel},
+      {"describe",      &POA_IR::ConstantDef::describe_skel},
+      {"_get_type",     &POA_IR::ConstantDef::_get_type_skel},
+      {"_set_name",     &POA_IR::ConstantDef::_set_name_skel},
+      {"_get_name",     &POA_IR::ConstantDef::_get_name_skel},
+      {"_get_value",    &POA_IR::ConstantDef::_get_value_skel},
+      {"_set_value",    &POA_IR::ConstantDef::_set_value_skel},
+      {"_get_version",  &POA_IR::ConstantDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ConstantDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::ConstantDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::ConstantDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::ConstantDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::ConstantDef::_get_absolute_name_skel},
+      {"_get_type_def",         &POA_IR::ConstantDef::_get_type_def_skel},
+      {"_set_type_def",         &POA_IR::ConstantDef::_set_type_def_skel},
+      {"_non_existent",  &POA_IR::ConstantDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::ConstantDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -1,   4,  -7,  -2, -13,  -2, -19,  -2,   5,   6, -59, 
-       -1,   9,  10,  11,  12, -63,  -1,  15,  16,  17, -24,  -2,  18, -69, 
-       21,  -1,  22,  23, -59,  26,  -1,  27,  28,  29,  30,  -1,  -1,  -1, 
-       31,  32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  33, 
+      -12,  -2, -14,  -2,   4,   5,  -1,  53,   8,  46, -46,  -1, -46,  16,
+       -1,  17,  -1,  18,  19,  -9,  -3, -20,  -2, -38,  -6,  -2,  -1,  -1,
+       22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -8923,38 +5484,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:20 */
-static TAO_IR_ModuleDef_Perfect_Hash_OpTable tao_IR_ModuleDef_optable;
-
+/* ending time is 11:23:09 */
+static TAO_IR_ConstantDef_Perfect_Hash_OpTable tao_IR_ConstantDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker *POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::the_TAO_ModuleDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker *POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::the_TAO_ConstantDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::_TAO_ModuleDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::_TAO_ConstantDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::~_TAO_ModuleDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::~_TAO_ConstantDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_ModuleDef_Proxy_Impl&
-POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ModuleDef *object,
+_TAO_ConstantDef_Proxy_Impl&
+POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ConstantDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -8972,7 +5532,7 @@
 }
 
 void 
-POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -8986,7 +5546,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ModuleDef_ThruPOA_Proxy_Impl,
+              _TAO_ConstantDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -8996,7 +5556,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ModuleDef_Remote_Proxy_Impl,
+              _TAO_ConstantDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -9013,125 +5573,408 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ModuleDef_Proxy_Broker *
-IR__TAO_ModuleDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ConstantDef_Proxy_Broker *
+_TAO_ConstantDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ModuleDef_Strategized_Proxy_Broker::the_TAO_ModuleDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::the_TAO_ConstantDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ModuleDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ConstantDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ModuleDef_Proxy_Broker_Factory_function;
+  _TAO_ConstantDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ConstantDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ModuleDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ModuleDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ModuleDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_ConstantDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ConstantDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ConstantDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_ModuleDef_ThruPOA_Proxy_Impl::_TAO_ModuleDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::_TAO_ConstantDef_ThruPOA_Proxy_Impl (void)
 {}
 
-// ThruPOA Implementation of the IDL interface methods
-
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::ModuleDef::ModuleDef (void)
-{
-  this->optable_ = &tao_IR_ModuleDef_optable;
-}
-
-// copy ctor
-POA_IR::ModuleDef::ModuleDef (const ModuleDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
+POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::~_TAO_ConstantDef_ThruPOA_Proxy_Impl (void)
 {}
 
-// skeleton destructor
-POA_IR::ModuleDef::~ModuleDef (void)
-{
-}
+// ThruPOA Implementation of the IDL interface methods
 
-void POA_IR::ModuleDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
+CORBA::TypeCode_ptr POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::type (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ModuleDef *_tao_impl = (POA_IR::ModuleDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
+    CORBA::TypeCode_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ConstantDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ConstantDef:1.0"
+        )
+    )->type (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ModuleDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
+IR::IDLType_ptr POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::type_def (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ModuleDef *_tao_impl = (POA_IR::ModuleDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
+    IR_IDLType_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ConstantDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ConstantDef:1.0"
+        )
+    )->type_def (
+        ACE_TRY_ENV
+      );
 }
 
-CORBA::Boolean POA_IR::ModuleDef::_is_a (
-    const char* value,
+void POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::type_def (
+    CORBA_Object *_collocated_tao_target_,
+    IR_IDLType_ptr type_def,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ModuleDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ConstantDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ConstantDef:1.0"
+        )
+    )->type_def (
+        type_def,
+        ACE_TRY_ENV
+      );
+  return;
 }
 
-void* POA_IR::ModuleDef::_downcast (
-    const char* logical_type_id
+CORBA::Any * POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::value (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ModuleDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ModuleDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
-    return ACE_static_cast (POA_IR::Container_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    CORBA::Any_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "value",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ConstantDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ConstantDef:1.0"
+        )
+    )->value (
+        ACE_TRY_ENV
+      );
+}
+
+void POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::value (
+    CORBA_Object *_collocated_tao_target_,
+    const CORBA::Any & value,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "value",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ConstantDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ConstantDef:1.0"
+        )
+    )->value (
+        value,
+        ACE_TRY_ENV
+      );
+  return;
+}
+
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
+
+// skeleton constructor
+POA_IR::ConstantDef::ConstantDef (void)
+{
+  this->optable_ = &tao_IR_ConstantDef_optable;
+}
+
+// copy ctor
+POA_IR::ConstantDef::ConstantDef (const ConstantDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
+
+// skeleton destructor
+POA_IR::ConstantDef::~ConstantDef (void)
+{
+}
+
+void POA_IR::ConstantDef::_get_type_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
+
+  CORBA::TypeCode_var _tao_retval;
+
+  _tao_retval = _tao_impl->type (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::ConstantDef::_get_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
+
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->type_def (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::ConstantDef::_set_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
+
+  IR_IDLType_var type_def;
+  if (!(
+    (_tao_in >> type_def.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->type_def (
+      type_def.in (),
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::ConstantDef::_get_value_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
+
+  CORBA::Any_var _tao_retval;
+
+  _tao_retval = _tao_impl->value (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::ConstantDef::_set_value_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
+
+  CORBA::Any value;
+  if (!(
+    (_tao_in >> value)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->value (
+      value,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::ConstantDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
+
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
+}
+
+void POA_IR::ConstantDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
+}
+
+CORBA::Boolean POA_IR::ConstantDef::_is_a (
+    const char* value,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ConstantDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
+}
+
+void* POA_IR::ConstantDef::_downcast (
+    const char* logical_type_id
+  )
+{
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ConstantDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ConstantDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
@@ -9140,18 +5983,18 @@
   return 0;
 }
 
-void POA_IR::ModuleDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::ConstantDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::ModuleDef::_interface_repository_id (void) const
+const char* POA_IR::ConstantDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/ModuleDef:1.0";
+  return "IDL:omg.org/IR/ConstantDef:1.0";
 }
 
-IR::ModuleDef*
-POA_IR::ModuleDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::ConstantDef*
+POA_IR::ConstantDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -9164,24 +6007,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::ModuleDef::_unchecked_narrow (obj.in ());
+  return IR_ConstantDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ConstantDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_TypedefDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:20 */
+/* starting time is 11:23:09 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ConstantDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_TypedefDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_ConstantDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_TypedefDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -9199,10 +6039,10 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0, 10, 37, 37, 37, 37, 37,
+     37, 37,  0,  0, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 15, 37, 37, 37, 37, 10, 37,
+     37, 37, 37, 10, 37, 37, 37, 37, 10, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
@@ -9223,8 +6063,8 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0, 10, 37, 37, 37, 37, 37, 37,  0,
-      0, 37, 37, 37, 37, 37, 15, 37, 37, 37,
+      0,  0, 37, 37, 37, 37, 37, 37, 37,  0,
+      0, 37, 37, 37, 37, 37, 10, 37, 37, 37,
      37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
     };
@@ -9232,49 +6072,45 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_ConstantDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_TypedefDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 20,
+      TOTAL_KEYWORDS = 16,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
       MAX_HASH_VALUE = 36,
       HASH_VALUE_RANGE = 33,
-      DUPLICATES = 7
+      DUPLICATES = 5
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ConstantDef::move_skel},
-      {"_is_a",  &POA_IR::ConstantDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::ConstantDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ConstantDef::_set_id_skel},
-      {"describe", 	&POA_IR::ConstantDef::describe_skel},
-      {"_get_type", 	&POA_IR::ConstantDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::ConstantDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::ConstantDef::_get_name_skel},
-      {"_get_value", 	&POA_IR::ConstantDef::_get_value_skel},
-      {"_set_value", 	&POA_IR::ConstantDef::_set_value_skel},
-      {"_get_version", 	&POA_IR::ConstantDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ConstantDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::ConstantDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::ConstantDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::ConstantDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::ConstantDef::_get_absolute_name_skel},
-      {"_get_type_def", 	&POA_IR::ConstantDef::_get_type_def_skel},
-      {"_set_type_def", 	&POA_IR::ConstantDef::_set_type_def_skel},
-      {"_non_existent",  &POA_IR::ConstantDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ConstantDef::_get_containing_repository_skel},
+      {"move",  &POA_IR::TypedefDef::move_skel},
+      {"_is_a",  &POA_IR::TypedefDef::_is_a_skel},
+      {"_get_id",       &POA_IR::TypedefDef::_get_id_skel},
+      {"_set_id",       &POA_IR::TypedefDef::_set_id_skel},
+      {"describe",      &POA_IR::TypedefDef::describe_skel},
+      {"_get_name",     &POA_IR::TypedefDef::_get_name_skel},
+      {"_get_type",     &POA_IR::TypedefDef::_get_type_skel},
+      {"_set_name",     &POA_IR::TypedefDef::_set_name_skel},
+      {"_get_version",  &POA_IR::TypedefDef::_get_version_skel},
+      {"_set_version",  &POA_IR::TypedefDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::TypedefDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::TypedefDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::TypedefDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::TypedefDef::_get_absolute_name_skel},
+      {"_non_existent",  &POA_IR::TypedefDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::TypedefDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-      -12,  -2, -14,  -2,   4,   5,  -1,  53,   8,  46, -46,  -1, -46,  16, 
-       -1,  17,  -1,  18,  19,  -9,  -3, -20,  -2, -38,  -6,  -2,  -1,  -1, 
-       22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23, 
+       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14,
+       -1,  15,  -1,  16,  17,  -1,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -9308,38 +6144,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:20 */
-static TAO_IR_ConstantDef_Perfect_Hash_OpTable tao_IR_ConstantDef_optable;
-
+/* ending time is 11:23:09 */
+static TAO_IR_TypedefDef_Perfect_Hash_OpTable tao_IR_TypedefDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker *POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::the_TAO_ConstantDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker *POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::the_TAO_TypedefDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::_TAO_ConstantDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::_TAO_TypedefDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::~_TAO_ConstantDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::~_TAO_TypedefDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_ConstantDef_Proxy_Impl&
-POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ConstantDef *object,
+_TAO_TypedefDef_Proxy_Impl&
+POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::select_proxy (
+    IR_TypedefDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -9357,7 +6192,7 @@
 }
 
 void 
-POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -9371,7 +6206,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl,
+              _TAO_TypedefDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -9381,7 +6216,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ConstantDef_Remote_Proxy_Impl,
+              _TAO_TypedefDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -9398,586 +6233,112 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ConstantDef_Proxy_Broker *
-IR__TAO_ConstantDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_TypedefDef_Proxy_Broker *
+_TAO_TypedefDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ConstantDef_Strategized_Proxy_Broker::the_TAO_ConstantDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::the_TAO_TypedefDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ConstantDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_TypedefDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ConstantDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ConstantDef_Proxy_Broker_Factory_function;
+  _TAO_TypedefDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_TypedefDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ConstantDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ConstantDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ConstantDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_TypedefDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_TypedefDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_TypedefDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::_TAO_ConstantDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_TypedefDef_ThruPOA_Proxy_Impl::_TAO_TypedefDef_ThruPOA_Proxy_Impl (void)
 {}
 
-// ThruPOA Implementation of the IDL interface methods
-
-CORBA::TypeCode_ptr POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::type (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::TypeCode_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "type",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ConstantDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ConstantDef:1.0"
-        )
-    )->type (
-        ACE_TRY_ENV
-      );
-}
-
-IR::IDLType_ptr POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::type_def (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::IDLType_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ConstantDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ConstantDef:1.0"
-        )
-    )->type_def (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::type_def (
-    CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr type_def,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ConstantDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ConstantDef:1.0"
-        )
-    )->type_def (
-        type_def,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-CORBA::Any * POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::value (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::Any_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "value",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ConstantDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ConstantDef:1.0"
-        )
-    )->value (
-        ACE_TRY_ENV
-      );
-}
+POA_IR::_TAO_TypedefDef_ThruPOA_Proxy_Impl::~_TAO_TypedefDef_ThruPOA_Proxy_Impl (void)
+{}
 
-void POA_IR::_TAO_ConstantDef_ThruPOA_Proxy_Impl::value (
-    CORBA_Object *_collocated_tao_target_,
-    const CORBA::Any & value,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "value",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ConstantDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ConstantDef:1.0"
-        )
-    )->value (
-        value,
-        ACE_TRY_ENV
-      );
-  return;
-}
+// ThruPOA Implementation of the IDL interface methods
 
 //
 //           End ThruPOA Proxy Implementation
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::ConstantDef::ConstantDef (void)
+POA_IR::TypedefDef::TypedefDef (void)
 {
-  this->optable_ = &tao_IR_ConstantDef_optable;
+  this->optable_ = &tao_IR_TypedefDef_optable;
 }
 
 // copy ctor
-POA_IR::ConstantDef::ConstantDef (const ConstantDef& rhs)
+POA_IR::TypedefDef::TypedefDef (const TypedefDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::ConstantDef::~ConstantDef (void)
+POA_IR::TypedefDef::~TypedefDef (void)
 {
 }
 
-void POA_IR::ConstantDef::_get_type_skel (
+void POA_IR::TypedefDef::_is_a_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void * _tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
-
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_get ri (
-      "_get_type",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::TypedefDef *_tao_impl = (POA_IR::TypedefDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::ConstantDef::_get_type_def_skel (
+void POA_IR::TypedefDef::_non_existent_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void * _tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
-
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get ri (
-      "_get_type_def",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+  POA_IR::TypedefDef *_tao_impl = (POA_IR::TypedefDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ConstantDef::_set_type_def_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var type_def;
-  if (!(
-    (_tao_in >> type_def.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_set ri (
-      "_set_type_def",
-      _tao_server_request.service_info (),
-      type_def.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->type_def (
-          type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ConstantDef::_get_value_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
-
-  CORBA::Any_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_get ri (
-      "_get_value",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->value (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Any * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ConstantDef::_set_value_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Any value;
-  if (!(
-    (_tao_in >> value)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_set ri (
-      "_set_value",
-      _tao_server_request.service_info (),
-      value,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->value (
-          value,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ConstantDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
-
-void POA_IR::ConstantDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ConstantDef *_tao_impl = (POA_IR::ConstantDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::ConstantDef::_is_a (
+CORBA::Boolean POA_IR::TypedefDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ConstantDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
       return 1;
@@ -9985,14 +6346,16 @@
       return 0;
 }
 
-void* POA_IR::ConstantDef::_downcast (
+void* POA_IR::TypedefDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ConstantDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ConstantDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
+    return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
@@ -10000,18 +6363,18 @@
   return 0;
 }
 
-void POA_IR::ConstantDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::TypedefDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::ConstantDef::_interface_repository_id (void) const
+const char* POA_IR::TypedefDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/ConstantDef:1.0";
+  return "IDL:omg.org/IR/TypedefDef:1.0";
 }
 
-IR::ConstantDef*
-POA_IR::ConstantDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::TypedefDef*
+POA_IR::TypedefDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -10024,321 +6387,128 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::ConstantDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_get::TAO_ServerRequestInfo_IR_ConstantDef_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_get::result (IR::IDLType_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_set::TAO_ServerRequestInfo_IR_ConstantDef_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    type_def_ (type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type_def + 1);
-  this->parameter_list_[length_type_def].argument <<=  this->type_def_;
-  
-  this->parameter_list_[length_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
+  return IR_TypedefDef::_unchecked_narrow (obj.in ());
 }
 
-Dynamic::ExceptionList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_get::TAO_ServerRequestInfo_IR_ConstantDef_value_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_get::result (CORBA::Any * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_set::TAO_ServerRequestInfo_IR_ConstantDef_value_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Any & value,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    value_ (value)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_value + 1);
-  this->parameter_list_[length_value].argument <<= value_;
-  this->parameter_list_[length_value].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ConstantDef::TAO_ServerRequestInfo_IR_ConstantDef_value_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_TypedefDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_StructDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:09 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_TypedefDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_StructDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_TypedefDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_StructDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 10, 37, 37, 37, 37, 10, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
+     52, 20,  3,  0, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 10, 15,  5,
+     52, 10, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 15, 15, 52, 52, 52, 15,  5, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52,
 #else
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0, 37, 37, 37, 37, 37, 37, 37,  0,
-      0, 37, 37, 37, 37, 37, 10, 37, 37, 37,
-     37, 10, 37, 37, 37, 37, 37, 37,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52,  0, 52,  0, 52, 20,
+      3,  0, 52, 52, 52, 52, 52, 52, 10, 15,
+      5, 52, 10, 52, 52, 15, 15, 52, 52, 52,
+     15,  5, 52, 52, 52, 52, 52, 52,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_TypedefDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_StructDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 16,
+      TOTAL_KEYWORDS = 33,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
-      MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 36,
-      HASH_VALUE_RANGE = 33,
-      DUPLICATES = 5
+      MIN_HASH_VALUE = 5,
+      MAX_HASH_VALUE = 51,
+      HASH_VALUE_RANGE = 47,
+      DUPLICATES = 7
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
-      {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::TypedefDef::move_skel},
-      {"_is_a",  &POA_IR::TypedefDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::TypedefDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::TypedefDef::_set_id_skel},
-      {"describe", 	&POA_IR::TypedefDef::describe_skel},
-      {"_get_name", 	&POA_IR::TypedefDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::TypedefDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::TypedefDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::TypedefDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::TypedefDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::TypedefDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::TypedefDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::TypedefDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::TypedefDef::_get_absolute_name_skel},
-      {"_non_existent",  &POA_IR::TypedefDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::TypedefDef::_get_containing_repository_skel},
+      {"",0},{"",0},{"",0},{"",0},{"",0},
+      {"_is_a",  &POA_IR::StructDef::_is_a_skel},
+      {"_get_name",     &POA_IR::StructDef::_get_name_skel},
+      {"_get_type",     &POA_IR::StructDef::_get_type_skel},
+      {"_set_name",     &POA_IR::StructDef::_set_name_skel},
+      {"_get_id",       &POA_IR::StructDef::_get_id_skel},
+      {"_set_id",       &POA_IR::StructDef::_set_id_skel},
+      {"describe",      &POA_IR::StructDef::describe_skel},
+      {"destroy",       &POA_IR::StructDef::destroy_skel},
+      {"_get_def_kind",         &POA_IR::StructDef::_get_def_kind_skel},
+      {"_get_version",  &POA_IR::StructDef::_get_version_skel},
+      {"_set_version",  &POA_IR::StructDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::StructDef::_get_absolute_name_skel},
+      {"move",  &POA_IR::StructDef::move_skel},
+      {"_get_defined_in",       &POA_IR::StructDef::_get_defined_in_skel},
+      {"lookup_name",   &POA_IR::StructDef::lookup_name_skel},
+      {"lookup",        &POA_IR::StructDef::lookup_skel},
+      {"_get_members",  &POA_IR::StructDef::_get_members_skel},
+      {"_set_members",  &POA_IR::StructDef::_set_members_skel},
+      {"_non_existent",  &POA_IR::StructDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::StructDef::_get_containing_repository_skel},
+      {"create_value",  &POA_IR::StructDef::create_value_skel},
+      {"create_module",         &POA_IR::StructDef::create_module_skel},
+      {"create_native",         &POA_IR::StructDef::create_native_skel},
+      {"describe_contents",     &POA_IR::StructDef::describe_contents_skel},
+      {"create_interface",      &POA_IR::StructDef::create_interface_skel},
+      {"create_union",  &POA_IR::StructDef::create_union_skel},
+      {"create_exception",      &POA_IR::StructDef::create_exception_skel},
+      {"contents",      &POA_IR::StructDef::contents_skel},
+      {"create_enum",   &POA_IR::StructDef::create_enum_skel},
+      {"create_alias",  &POA_IR::StructDef::create_alias_skel},
+      {"create_struct",         &POA_IR::StructDef::create_struct_skel},
+      {"create_constant",       &POA_IR::StructDef::create_constant_skel},
+      {"create_value_box",      &POA_IR::StructDef::create_value_box_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14, 
-       -1,  15,  -1,  16,  17,  -1,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19, 
+       -1,  -1,  -1,  -6,  -3,   5,  -1,  -9,  -2, -57, -54,  11,  -1, -14,
+       -2,  12,  13, -55,  16,  17,  18,  19,  -1,  -1, -21,  -2,  20, -54,
+       23, -26,  -2,  24,  25, -55,  -1,  28,  29,  30,  -1,  -1,  -1,  31,
+       -1,  32,  -1,  -1,  33,  34,  35,  -1,  36,  37,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -10372,38 +6542,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_TypedefDef_Perfect_Hash_OpTable tao_IR_TypedefDef_optable;
-
+/* ending time is 11:23:09 */
+static TAO_IR_StructDef_Perfect_Hash_OpTable tao_IR_StructDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker *POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::the_TAO_TypedefDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_StructDef_Strategized_Proxy_Broker *POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::the_TAO_StructDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_StructDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::_TAO_TypedefDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::_TAO_StructDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::~_TAO_TypedefDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::~_TAO_StructDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_TypedefDef_Proxy_Impl&
-POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::TypedefDef *object,
+_TAO_StructDef_Proxy_Impl&
+POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::select_proxy (
+    IR_StructDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -10421,7 +6590,7 @@
 }
 
 void 
-POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -10435,7 +6604,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_TypedefDef_ThruPOA_Proxy_Impl,
+              _TAO_StructDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -10445,7 +6614,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_TypedefDef_Remote_Proxy_Impl,
+              _TAO_StructDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -10462,107 +6631,228 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_TypedefDef_Proxy_Broker *
-IR__TAO_TypedefDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_StructDef_Proxy_Broker *
+_TAO_StructDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_TypedefDef_Strategized_Proxy_Broker::the_TAO_TypedefDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::the_TAO_StructDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_TypedefDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_StructDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_TypedefDef_Proxy_Broker_Factory_function;
+  _TAO_StructDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_StructDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_TypedefDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_TypedefDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_TypedefDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_StructDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_StructDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_StructDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_TypedefDef_ThruPOA_Proxy_Impl::_TAO_TypedefDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::_TAO_StructDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::~_TAO_StructDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
+IR::StructMemberSeq * POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::members (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    IR_StructMemberSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "members",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::StructDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/StructDef:1.0"
+        )
+    )->members (
+        ACE_TRY_ENV
+      );
+}
+
+void POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::members (
+    CORBA_Object *_collocated_tao_target_,
+    const IR_StructMemberSeq & members,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "members",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::StructDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/StructDef:1.0"
+        )
+    )->members (
+        members,
+        ACE_TRY_ENV
+      );
+  return;
+}
+
 //
 //           End ThruPOA Proxy Implementation
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::TypedefDef::TypedefDef (void)
+POA_IR::StructDef::StructDef (void)
 {
-  this->optable_ = &tao_IR_TypedefDef_optable;
+  this->optable_ = &tao_IR_StructDef_optable;
 }
 
 // copy ctor
-POA_IR::TypedefDef::TypedefDef (const TypedefDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+POA_IR::StructDef::StructDef (const StructDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,TypedefDef) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
     ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::TypedefDef::~TypedefDef (void)
+POA_IR::StructDef::~StructDef (void)
 {
 }
 
-void POA_IR::TypedefDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::StructDef::_get_members_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *)_tao_object_reference;
+
+  IR_StructMemberSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->members (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::StructDef::_set_members_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *)_tao_object_reference;
+
+  IR_StructMemberSeq members;
+  if (!(
+    (_tao_in >> members)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->members (
+      members,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::StructDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::TypedefDef *_tao_impl = (POA_IR::TypedefDef *) _tao_object_reference;
+  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::TypedefDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::StructDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::TypedefDef *_tao_impl = (POA_IR::TypedefDef *) _tao_object_reference;
+  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::TypedefDef::_is_a (
+CORBA::Boolean POA_IR::StructDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/StructDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
@@ -10572,12 +6862,16 @@
       return 0;
 }
 
-void* POA_IR::TypedefDef::_downcast (
+void* POA_IR::StructDef::_downcast (
     const char* logical_type_id
   )
 {
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/StructDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::StructDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
     return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
+    return ACE_static_cast (POA_IR::Container_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
@@ -10589,18 +6883,18 @@
   return 0;
 }
 
-void POA_IR::TypedefDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::StructDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::TypedefDef::_interface_repository_id (void) const
+const char* POA_IR::StructDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/TypedefDef:1.0";
+  return "IDL:omg.org/IR/StructDef:1.0";
 }
 
-IR::TypedefDef*
-POA_IR::TypedefDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::StructDef*
+POA_IR::StructDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -10613,131 +6907,132 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::TypedefDef::_unchecked_narrow (obj.in ());
+  return IR_StructDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_StructDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_UnionDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:09 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_StructDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_UnionDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_StructDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_UnionDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
-     52, 20,  3,  0, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 10, 15,  5,
-     52, 10, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 15, 15, 52, 52, 52, 15,  5, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68,  0,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68,  0,
+     68, 25,  3,  0,  0, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 10,  0, 10,
+     68, 10, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 30, 15, 68, 68, 68,  5,  5, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68,
 #else
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52,  0, 52,  0, 52, 20,
-      3,  0, 52, 52, 52, 52, 52, 52, 10, 15,
-      5, 52, 10, 52, 52, 15, 15, 52, 52, 52,
-     15,  5, 52, 52, 52, 52, 52, 52,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
+     68, 68, 68, 68, 68,  0, 68,  0, 68, 25,
+      3,  0,  0, 68, 68, 68, 68, 68, 10,  0,
+     10, 68, 10, 68, 68, 30, 15, 68, 68, 68,
+      5,  5, 68, 68, 68, 68, 68, 68,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_StructDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_UnionDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 33,
+      TOTAL_KEYWORDS = 36,
       MIN_WORD_LENGTH = 4,
-      MAX_WORD_LENGTH = 26,
-      MIN_HASH_VALUE = 5,
-      MAX_HASH_VALUE = 51,
-      HASH_VALUE_RANGE = 47,
-      DUPLICATES = 7
+      MAX_WORD_LENGTH = 27,
+      MIN_HASH_VALUE = 4,
+      MAX_HASH_VALUE = 67,
+      HASH_VALUE_RANGE = 64,
+      DUPLICATES = 8
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
-      {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::StructDef::_is_a_skel},
-      {"_get_name", 	&POA_IR::StructDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::StructDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::StructDef::_set_name_skel},
-      {"_get_id", 	&POA_IR::StructDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::StructDef::_set_id_skel},
-      {"describe", 	&POA_IR::StructDef::describe_skel},
-      {"destroy", 	&POA_IR::StructDef::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::StructDef::_get_def_kind_skel},
-      {"_get_version", 	&POA_IR::StructDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::StructDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::StructDef::_get_absolute_name_skel},
-      {"move", 	&POA_IR::StructDef::move_skel},
-      {"_get_defined_in", 	&POA_IR::StructDef::_get_defined_in_skel},
-      {"lookup_name", 	&POA_IR::StructDef::lookup_name_skel},
-      {"lookup", 	&POA_IR::StructDef::lookup_skel},
-      {"_get_members", 	&POA_IR::StructDef::_get_members_skel},
-      {"_set_members", 	&POA_IR::StructDef::_set_members_skel},
-      {"_non_existent",  &POA_IR::StructDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::StructDef::_get_containing_repository_skel},
-      {"create_value", 	&POA_IR::StructDef::create_value_skel},
-      {"create_module", 	&POA_IR::StructDef::create_module_skel},
-      {"create_native", 	&POA_IR::StructDef::create_native_skel},
-      {"describe_contents", 	&POA_IR::StructDef::describe_contents_skel},
-      {"create_interface", 	&POA_IR::StructDef::create_interface_skel},
-      {"create_union", 	&POA_IR::StructDef::create_union_skel},
-      {"create_exception", 	&POA_IR::StructDef::create_exception_skel},
-      {"contents", 	&POA_IR::StructDef::contents_skel},
-      {"create_enum", 	&POA_IR::StructDef::create_enum_skel},
-      {"create_alias", 	&POA_IR::StructDef::create_alias_skel},
-      {"create_struct", 	&POA_IR::StructDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::StructDef::create_constant_skel},
-      {"create_value_box", 	&POA_IR::StructDef::create_value_box_skel},
+      {"",0},{"",0},{"",0},{"",0},
+      {"move",  &POA_IR::UnionDef::move_skel},
+      {"_is_a",  &POA_IR::UnionDef::_is_a_skel},
+      {"_get_name",     &POA_IR::UnionDef::_get_name_skel},
+      {"_get_type",     &POA_IR::UnionDef::_get_type_skel},
+      {"_set_name",     &POA_IR::UnionDef::_set_name_skel},
+      {"_get_id",       &POA_IR::UnionDef::_get_id_skel},
+      {"_set_id",       &POA_IR::UnionDef::_set_id_skel},
+      {"describe",      &POA_IR::UnionDef::describe_skel},
+      {"destroy",       &POA_IR::UnionDef::destroy_skel},
+      {"_get_def_kind",         &POA_IR::UnionDef::_get_def_kind_skel},
+      {"_get_absolute_name",    &POA_IR::UnionDef::_get_absolute_name_skel},
+      {"lookup_name",   &POA_IR::UnionDef::lookup_name_skel},
+      {"_get_version",  &POA_IR::UnionDef::_get_version_skel},
+      {"_set_version",  &POA_IR::UnionDef::_set_version_skel},
+      {"_get_discriminator_type",       &POA_IR::UnionDef::_get_discriminator_type_skel},
+      {"_get_defined_in",       &POA_IR::UnionDef::_get_defined_in_skel},
+      {"lookup",        &POA_IR::UnionDef::lookup_skel},
+      {"_get_discriminator_type_def",   &POA_IR::UnionDef::_get_discriminator_type_def_skel},
+      {"_set_discriminator_type_def",   &POA_IR::UnionDef::_set_discriminator_type_def_skel},
+      {"_non_existent",  &POA_IR::UnionDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::UnionDef::_get_containing_repository_skel},
+      {"create_enum",   &POA_IR::UnionDef::create_enum_skel},
+      {"create_value",  &POA_IR::UnionDef::create_value_skel},
+      {"create_module",         &POA_IR::UnionDef::create_module_skel},
+      {"create_native",         &POA_IR::UnionDef::create_native_skel},
+      {"create_interface",      &POA_IR::UnionDef::create_interface_skel},
+      {"_get_members",  &POA_IR::UnionDef::_get_members_skel},
+      {"_set_members",  &POA_IR::UnionDef::_set_members_skel},
+      {"create_value_box",      &POA_IR::UnionDef::create_value_box_skel},
+      {"create_union",  &POA_IR::UnionDef::create_union_skel},
+      {"describe_contents",     &POA_IR::UnionDef::describe_contents_skel},
+      {"create_exception",      &POA_IR::UnionDef::create_exception_skel},
+      {"create_struct",         &POA_IR::UnionDef::create_struct_skel},
+      {"create_constant",       &POA_IR::UnionDef::create_constant_skel},
+      {"contents",      &POA_IR::UnionDef::contents_skel},
+      {"create_alias",  &POA_IR::UnionDef::create_alias_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -6,  -3,   5,  -1,  -9,  -2, -57, -54,  11,  -1, -14, 
-       -2,  12,  13, -55,  16,  17,  18,  19,  -1,  -1, -21,  -2,  20, -54, 
-       23, -26,  -2,  24,  25, -55,  -1,  28,  29,  30,  -1,  -1,  -1,  31, 
-       -1,  32,  -1,  -1,  33,  34,  35,  -1,  36,  37, 
+       -1,  -1,  -6,  -3,   4,   5,  -1,  -9,  -2, -74, -70,  11,  -1, -16,
+       -2,  12,  13,  -1,  14, -21,  -2,  15, -76,  18,  -1,  19,  20, -75,
+       23,  -1,  -1,  24,  -1,  -1, -27,  -2,  25,  26, -71, -30,  -2,  29,
+      -70,  -1,  -1,  -1,  32,  33,  -1,  -1,  34,  35,  -1,  36,  -1,  37,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  38,  -1,  -1,  -1,  39,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -10771,38 +7066,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_StructDef_Perfect_Hash_OpTable tao_IR_StructDef_optable;
-
+/* ending time is 11:23:09 */
+static TAO_IR_UnionDef_Perfect_Hash_OpTable tao_IR_UnionDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_StructDef_Strategized_Proxy_Broker *POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::the_TAO_StructDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker *POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::the_TAO_UnionDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_StructDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::_TAO_StructDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::_TAO_UnionDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::~_TAO_StructDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::~_TAO_UnionDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_StructDef_Proxy_Impl&
-POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::StructDef *object,
+_TAO_UnionDef_Proxy_Impl&
+POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::select_proxy (
+    IR_UnionDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -10820,7 +7114,7 @@
 }
 
 void 
-POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -10834,7 +7128,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl,
+              _TAO_UnionDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -10844,7 +7138,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_StructDef_Remote_Proxy_Impl,
+              _TAO_UnionDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -10861,38 +7155,135 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_StructDef_Proxy_Broker *
-IR__TAO_StructDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_UnionDef_Proxy_Broker *
+_TAO_UnionDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_StructDef_Strategized_Proxy_Broker::the_TAO_StructDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::the_TAO_UnionDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_StructDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_UnionDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_StructDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_StructDef_Proxy_Broker_Factory_function;
+  _TAO_UnionDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_UnionDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_StructDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_StructDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_StructDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_UnionDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_UnionDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_UnionDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::_TAO_StructDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::_TAO_UnionDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::~_TAO_UnionDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-IR::StructMemberSeq * POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::members (
+CORBA::TypeCode_ptr POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::discriminator_type (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    CORBA::TypeCode_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "discriminator_type",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::UnionDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/UnionDef:1.0"
+        )
+    )->discriminator_type (
+        ACE_TRY_ENV
+      );
+}
+
+IR::IDLType_ptr POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::discriminator_type_def (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    IR_IDLType_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "discriminator_type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::UnionDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/UnionDef:1.0"
+        )
+    )->discriminator_type_def (
+        ACE_TRY_ENV
+      );
+}
+
+void POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::discriminator_type_def (
+    CORBA_Object *_collocated_tao_target_,
+    IR_IDLType_ptr discriminator_type_def,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "discriminator_type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::UnionDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/UnionDef:1.0"
+        )
+    )->discriminator_type_def (
+        discriminator_type_def,
+        ACE_TRY_ENV
+      );
+  return;
+}
+
+IR::UnionMemberSeq * POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::members (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -10900,7 +7291,7 @@
     CORBA::SystemException
   ))
 {
-    IR::StructMemberSeq_var _tao_retval;
+    IR_UnionMemberSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -10914,18 +7305,18 @@
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::StructDef_ptr,
+      POA_IR::UnionDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/StructDef:1.0"
+          "IDL:omg.org/IR/UnionDef:1.0"
         )
     )->members (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_StructDef_ThruPOA_Proxy_Impl::members (
+void POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::members (
     CORBA_Object *_collocated_tao_target_,
-    const IR::StructMemberSeq & members,
+    const IR_UnionMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -10944,9 +7335,9 @@
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::StructDef_ptr,
+      POA_IR::UnionDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/StructDef:1.0"
+          "IDL:omg.org/IR/UnionDef:1.0"
         )
     )->members (
         members,
@@ -10960,13 +7351,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::StructDef::StructDef (void)
+POA_IR::UnionDef::UnionDef (void)
 {
-  this->optable_ = &tao_IR_StructDef_optable;
+  this->optable_ = &tao_IR_UnionDef_optable;
 }
 
 // copy ctor
-POA_IR::StructDef::StructDef (const StructDef& rhs)
+POA_IR::UnionDef::UnionDef (const UnionDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,TypedefDef) (rhs),
     ACE_NESTED_CLASS (POA_IR,Container) (rhs),
     ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
@@ -10976,185 +7367,184 @@
 {}
 
 // skeleton destructor
-POA_IR::StructDef::~StructDef (void)
+POA_IR::UnionDef::~UnionDef (void)
 {
 }
 
-void POA_IR::StructDef::_get_members_skel (
+void POA_IR::UnionDef::_get_discriminator_type_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *)_tao_object_reference;
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
 
-  IR::StructMemberSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_get ri (
-      "_get_members",
-      _tao_server_request.service_info (),
+  CORBA::TypeCode_var _tao_retval;
+
+  _tao_retval = _tao_impl->discriminator_type (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->members (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::StructMemberSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::StructDef::_set_members_skel (
+void POA_IR::UnionDef::_get_discriminator_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
+{
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
+
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->discriminator_type_def (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::UnionDef::_set_discriminator_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *)_tao_object_reference;
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::StructMemberSeq members;
+  IR_IDLType_var discriminator_type_def;
   if (!(
-    (_tao_in >> members)
+    (_tao_in >> discriminator_type_def.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+  _tao_impl->discriminator_type_def (
+      discriminator_type_def.in (),
+      ACE_TRY_ENV
     );
-  
-  POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_set ri (
-      "_set_members",
-      _tao_server_request.service_info (),
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::UnionDef::_get_members_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
+
+  IR_UnionMemberSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->members (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::UnionDef::_set_members_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
+
+  IR_UnionMemberSeq members;
+  if (!(
+    (_tao_in >> members)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->members (
       members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->members (
-          members,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::StructDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::UnionDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *) _tao_object_reference;
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::StructDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::UnionDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::StructDef *_tao_impl = (POA_IR::StructDef *) _tao_object_reference;
+  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::StructDef::_is_a (
+CORBA::Boolean POA_IR::UnionDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/StructDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/UnionDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
@@ -11166,12 +7556,12 @@
       return 0;
 }
 
-void* POA_IR::StructDef::_downcast (
+void* POA_IR::UnionDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/StructDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::StructDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/UnionDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::UnionDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
     return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
@@ -11187,18 +7577,18 @@
   return 0;
 }
 
-void POA_IR::StructDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::UnionDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::StructDef::_interface_repository_id (void) const
+const char* POA_IR::UnionDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/StructDef:1.0";
+  return "IDL:omg.org/IR/UnionDef:1.0";
 }
 
-IR::StructDef*
-POA_IR::StructDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::UnionDef*
+POA_IR::UnionDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -11211,219 +7601,112 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::StructDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_get::TAO_ServerRequestInfo_IR_StructDef_members_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_get::result (IR::StructMemberSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_set::TAO_ServerRequestInfo_IR_StructDef_members_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::StructMemberSeq & members,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::StructDef::TAO_ServerRequestInfo_IR_StructDef_members_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+  return IR_UnionDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_UnionDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_EnumDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_UnionDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_EnumDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_UnionDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_EnumDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68,  0,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68,  0,
-     68, 25,  3,  0,  0, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 10,  0, 10,
-     68, 10, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 30, 15, 68, 68, 68,  5,  5, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37,  0,  0, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 10, 10, 37, 37, 37, 37, 10, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37,
 #else
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
-     68, 68, 68, 68, 68,  0, 68,  0, 68, 25,
-      3,  0,  0, 68, 68, 68, 68, 68, 10,  0,
-     10, 68, 10, 68, 68, 30, 15, 68, 68, 68,
-      5,  5, 68, 68, 68, 68, 68, 68,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
+      0,  0, 37, 37, 37, 37, 37, 37, 37,  0,
+      0, 37, 37, 37, 37, 10, 10, 37, 37, 37,
+     37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_UnionDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_EnumDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 36,
+      TOTAL_KEYWORDS = 18,
       MIN_WORD_LENGTH = 4,
-      MAX_WORD_LENGTH = 27,
+      MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 67,
-      HASH_VALUE_RANGE = 64,
-      DUPLICATES = 8
+      MAX_HASH_VALUE = 36,
+      HASH_VALUE_RANGE = 33,
+      DUPLICATES = 6
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::UnionDef::move_skel},
-      {"_is_a",  &POA_IR::UnionDef::_is_a_skel},
-      {"_get_name", 	&POA_IR::UnionDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::UnionDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::UnionDef::_set_name_skel},
-      {"_get_id", 	&POA_IR::UnionDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::UnionDef::_set_id_skel},
-      {"describe", 	&POA_IR::UnionDef::describe_skel},
-      {"destroy", 	&POA_IR::UnionDef::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::UnionDef::_get_def_kind_skel},
-      {"_get_absolute_name", 	&POA_IR::UnionDef::_get_absolute_name_skel},
-      {"lookup_name", 	&POA_IR::UnionDef::lookup_name_skel},
-      {"_get_version", 	&POA_IR::UnionDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::UnionDef::_set_version_skel},
-      {"_get_discriminator_type", 	&POA_IR::UnionDef::_get_discriminator_type_skel},
-      {"_get_defined_in", 	&POA_IR::UnionDef::_get_defined_in_skel},
-      {"lookup", 	&POA_IR::UnionDef::lookup_skel},
-      {"_get_discriminator_type_def", 	&POA_IR::UnionDef::_get_discriminator_type_def_skel},
-      {"_set_discriminator_type_def", 	&POA_IR::UnionDef::_set_discriminator_type_def_skel},
-      {"_non_existent",  &POA_IR::UnionDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::UnionDef::_get_containing_repository_skel},
-      {"create_enum", 	&POA_IR::UnionDef::create_enum_skel},
-      {"create_value", 	&POA_IR::UnionDef::create_value_skel},
-      {"create_module", 	&POA_IR::UnionDef::create_module_skel},
-      {"create_native", 	&POA_IR::UnionDef::create_native_skel},
-      {"create_interface", 	&POA_IR::UnionDef::create_interface_skel},
-      {"_get_members", 	&POA_IR::UnionDef::_get_members_skel},
-      {"_set_members", 	&POA_IR::UnionDef::_set_members_skel},
-      {"create_value_box", 	&POA_IR::UnionDef::create_value_box_skel},
-      {"create_union", 	&POA_IR::UnionDef::create_union_skel},
-      {"describe_contents", 	&POA_IR::UnionDef::describe_contents_skel},
-      {"create_exception", 	&POA_IR::UnionDef::create_exception_skel},
-      {"create_struct", 	&POA_IR::UnionDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::UnionDef::create_constant_skel},
-      {"contents", 	&POA_IR::UnionDef::contents_skel},
-      {"create_alias", 	&POA_IR::UnionDef::create_alias_skel},
+      {"move",  &POA_IR::EnumDef::move_skel},
+      {"_is_a",  &POA_IR::EnumDef::_is_a_skel},
+      {"_get_id",       &POA_IR::EnumDef::_get_id_skel},
+      {"_set_id",       &POA_IR::EnumDef::_set_id_skel},
+      {"describe",      &POA_IR::EnumDef::describe_skel},
+      {"_get_name",     &POA_IR::EnumDef::_get_name_skel},
+      {"_get_type",     &POA_IR::EnumDef::_get_type_skel},
+      {"_set_name",     &POA_IR::EnumDef::_set_name_skel},
+      {"_get_version",  &POA_IR::EnumDef::_get_version_skel},
+      {"_set_version",  &POA_IR::EnumDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::EnumDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::EnumDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::EnumDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::EnumDef::_get_absolute_name_skel},
+      {"_get_members",  &POA_IR::EnumDef::_get_members_skel},
+      {"_set_members",  &POA_IR::EnumDef::_set_members_skel},
+      {"_non_existent",  &POA_IR::EnumDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::EnumDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -6,  -3,   4,   5,  -1,  -9,  -2, -74, -70,  11,  -1, -16, 
-       -2,  12,  13,  -1,  14, -21,  -2,  15, -76,  18,  -1,  19,  20, -75, 
-       23,  -1,  -1,  24,  -1,  -1, -27,  -2,  25,  26, -71, -30,  -2,  29, 
-      -70,  -1,  -1,  -1,  32,  33,  -1,  -1,  34,  35,  -1,  36,  -1,  37, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  38,  -1,  -1,  -1,  39, 
+       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14,
+       -1,  15,  -1,  16,  17,  -1, -18,  -2, -38,  20,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -11457,38 +7740,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_UnionDef_Perfect_Hash_OpTable tao_IR_UnionDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_EnumDef_Perfect_Hash_OpTable tao_IR_EnumDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker *POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::the_TAO_UnionDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker *POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::the_TAO_EnumDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::_TAO_UnionDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::_TAO_EnumDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::~_TAO_UnionDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::~_TAO_EnumDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_UnionDef_Proxy_Impl&
-POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::UnionDef *object,
+_TAO_EnumDef_Proxy_Impl&
+POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::select_proxy (
+    IR_EnumDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -11506,7 +7788,7 @@
 }
 
 void 
-POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -11520,7 +7802,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl,
+              _TAO_EnumDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -11530,7 +7812,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_UnionDef_Remote_Proxy_Impl,
+              _TAO_EnumDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -11547,132 +7829,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_UnionDef_Proxy_Broker *
-IR__TAO_UnionDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_EnumDef_Proxy_Broker *
+_TAO_EnumDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_UnionDef_Strategized_Proxy_Broker::the_TAO_UnionDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::the_TAO_EnumDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_UnionDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_EnumDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_UnionDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_UnionDef_Proxy_Broker_Factory_function;
+  _TAO_EnumDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_EnumDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_UnionDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_UnionDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_UnionDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_EnumDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_EnumDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_EnumDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::_TAO_UnionDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::_TAO_EnumDef_ThruPOA_Proxy_Impl (void)
 {}
 
-// ThruPOA Implementation of the IDL interface methods
-
-CORBA::TypeCode_ptr POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::discriminator_type (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::TypeCode_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "discriminator_type",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::UnionDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/UnionDef:1.0"
-        )
-    )->discriminator_type (
-        ACE_TRY_ENV
-      );
-}
-
-IR::IDLType_ptr POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::discriminator_type_def (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::IDLType_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "discriminator_type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::UnionDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/UnionDef:1.0"
-        )
-    )->discriminator_type_def (
-        ACE_TRY_ENV
-      );
-}
+POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::~_TAO_EnumDef_ThruPOA_Proxy_Impl (void)
+{}
 
-void POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::discriminator_type_def (
-    CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr discriminator_type_def,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "discriminator_type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::UnionDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/UnionDef:1.0"
-        )
-    )->discriminator_type_def (
-        discriminator_type_def,
-        ACE_TRY_ENV
-      );
-  return;
-}
+// ThruPOA Implementation of the IDL interface methods
 
-IR::UnionMemberSeq * POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::members (
+IR::EnumMemberSeq * POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::members (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -11680,7 +7871,7 @@
     CORBA::SystemException
   ))
 {
-    IR::UnionMemberSeq_var _tao_retval;
+    IR_EnumMemberSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -11694,18 +7885,18 @@
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::UnionDef_ptr,
+      POA_IR::EnumDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/UnionDef:1.0"
+          "IDL:omg.org/IR/EnumDef:1.0"
         )
     )->members (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_UnionDef_ThruPOA_Proxy_Impl::members (
+void POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::members (
     CORBA_Object *_collocated_tao_target_,
-    const IR::UnionMemberSeq & members,
+    const IR_EnumMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -11724,9 +7915,9 @@
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::UnionDef_ptr,
+      POA_IR::EnumDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/UnionDef:1.0"
+          "IDL:omg.org/IR/EnumDef:1.0"
         )
     )->members (
         members,
@@ -11740,15 +7931,14 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::UnionDef::UnionDef (void)
+POA_IR::EnumDef::EnumDef (void)
 {
-  this->optable_ = &tao_IR_UnionDef_optable;
+  this->optable_ = &tao_IR_EnumDef_optable;
 }
 
 // copy ctor
-POA_IR::UnionDef::UnionDef (const UnionDef& rhs)
+POA_IR::EnumDef::EnumDef (const EnumDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,TypedefDef) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
     ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
     ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
@@ -11756,381 +7946,109 @@
 {}
 
 // skeleton destructor
-POA_IR::UnionDef::~UnionDef (void)
-{
-}
-
-void POA_IR::UnionDef::_get_discriminator_type_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
-
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get ri (
-      "_get_discriminator_type",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->discriminator_type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::UnionDef::_get_discriminator_type_def_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
+POA_IR::EnumDef::~EnumDef (void)
 {
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
-
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get ri (
-      "_get_discriminator_type_def",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->discriminator_type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::UnionDef::_set_discriminator_type_def_skel (
+void POA_IR::EnumDef::_get_members_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var discriminator_type_def;
-  if (!(
-    (_tao_in >> discriminator_type_def.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_set ri (
-      "_set_discriminator_type_def",
-      _tao_server_request.service_info (),
-      discriminator_type_def.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->discriminator_type_def (
-          discriminator_type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
+  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *)_tao_object_reference;
 
-void POA_IR::UnionDef::_get_members_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
+  IR_EnumMemberSeq_var _tao_retval;
 
-  IR::UnionMemberSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_get ri (
-      "_get_members",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->members (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->members (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::UnionMemberSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::UnionDef::_set_members_skel (
+void POA_IR::EnumDef::_set_members_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *)_tao_object_reference;
+  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::UnionMemberSeq members;
+  IR_EnumMemberSeq members;
   if (!(
     (_tao_in >> members)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_set ri (
-      "_set_members",
-      _tao_server_request.service_info (),
+  _tao_impl->members (
       members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->members (
-          members,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::UnionDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::EnumDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *) _tao_object_reference;
+  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::UnionDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::EnumDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::UnionDef *_tao_impl = (POA_IR::UnionDef *) _tao_object_reference;
+  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::UnionDef::_is_a (
+CORBA::Boolean POA_IR::EnumDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/UnionDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/EnumDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
@@ -12140,39 +8058,37 @@
       return 0;
 }
 
-void* POA_IR::UnionDef::_downcast (
+void* POA_IR::EnumDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/UnionDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::UnionDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/EnumDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::EnumDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
     return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
-    return ACE_static_cast (POA_IR::Container_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
     return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
 
-void POA_IR::UnionDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::EnumDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::UnionDef::_interface_repository_id (void) const
+const char* POA_IR::EnumDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/UnionDef:1.0";
+  return "IDL:omg.org/IR/EnumDef:1.0";
 }
 
-IR::UnionDef*
-POA_IR::UnionDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::EnumDef*
+POA_IR::EnumDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -12185,233 +8101,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::UnionDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_get::result (IR::IDLType_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_set::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr discriminator_type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    discriminator_type_def_ (discriminator_type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_discriminator_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_discriminator_type_def + 1);
-  this->parameter_list_[length_discriminator_type_def].argument <<=  this->discriminator_type_def_;
-  
-  this->parameter_list_[length_discriminator_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_discriminator_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_get::TAO_ServerRequestInfo_IR_UnionDef_members_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_get::result (IR::UnionMemberSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_set::TAO_ServerRequestInfo_IR_UnionDef_members_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::UnionMemberSeq & members,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UnionDef::TAO_ServerRequestInfo_IR_UnionDef_members_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+  return IR_EnumDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_EnumDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_AliasDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_EnumDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_AliasDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_EnumDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_AliasDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -12429,10 +8133,10 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0, 37, 37, 37, 37, 37, 37,
+     37, 37,  0,  0,  0, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 10, 10, 37, 37, 37, 37, 10, 37,
+     37, 37, 37, 10, 37, 37, 37, 37, 10, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
@@ -12453,8 +8157,8 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0, 37, 37, 37, 37, 37, 37, 37,  0,
-      0, 37, 37, 37, 37, 10, 10, 37, 37, 37,
+      0,  0,  0, 37, 37, 37, 37, 37, 37,  0,
+      0, 37, 37, 37, 37, 37, 10, 37, 37, 37,
      37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
     };
@@ -12462,7 +8166,7 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_EnumDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_AliasDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
@@ -12478,31 +8182,31 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::EnumDef::move_skel},
-      {"_is_a",  &POA_IR::EnumDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::EnumDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::EnumDef::_set_id_skel},
-      {"describe", 	&POA_IR::EnumDef::describe_skel},
-      {"_get_name", 	&POA_IR::EnumDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::EnumDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::EnumDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::EnumDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::EnumDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::EnumDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::EnumDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::EnumDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::EnumDef::_get_absolute_name_skel},
-      {"_get_members", 	&POA_IR::EnumDef::_get_members_skel},
-      {"_set_members", 	&POA_IR::EnumDef::_set_members_skel},
-      {"_non_existent",  &POA_IR::EnumDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::EnumDef::_get_containing_repository_skel},
+      {"move",  &POA_IR::AliasDef::move_skel},
+      {"_is_a",  &POA_IR::AliasDef::_is_a_skel},
+      {"_get_id",       &POA_IR::AliasDef::_get_id_skel},
+      {"_set_id",       &POA_IR::AliasDef::_set_id_skel},
+      {"describe",      &POA_IR::AliasDef::describe_skel},
+      {"_get_name",     &POA_IR::AliasDef::_get_name_skel},
+      {"_get_type",     &POA_IR::AliasDef::_get_type_skel},
+      {"_set_name",     &POA_IR::AliasDef::_set_name_skel},
+      {"_get_version",  &POA_IR::AliasDef::_get_version_skel},
+      {"_set_version",  &POA_IR::AliasDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::AliasDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::AliasDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::AliasDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::AliasDef::_get_absolute_name_skel},
+      {"_get_original_type_def",        &POA_IR::AliasDef::_get_original_type_def_skel},
+      {"_set_original_type_def",        &POA_IR::AliasDef::_set_original_type_def_skel},
+      {"_non_existent",  &POA_IR::AliasDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::AliasDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14, 
-       -1,  15,  -1,  16,  17,  -1, -18,  -2, -38,  20,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21, 
+       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14,
+       -1,  15,  -1,  16,  17,  -1, -18,  -2, -38,  20,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -12536,38 +8240,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_EnumDef_Perfect_Hash_OpTable tao_IR_EnumDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_AliasDef_Perfect_Hash_OpTable tao_IR_AliasDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker *POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::the_TAO_EnumDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker *POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::the_TAO_AliasDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::_TAO_EnumDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::_TAO_AliasDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::~_TAO_EnumDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::~_TAO_AliasDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_EnumDef_Proxy_Impl&
-POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::EnumDef *object,
+_TAO_AliasDef_Proxy_Impl&
+POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::select_proxy (
+    IR_AliasDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -12585,7 +8288,7 @@
 }
 
 void 
-POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -12599,7 +8302,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl,
+              _TAO_AliasDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -12609,7 +8312,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_EnumDef_Remote_Proxy_Impl,
+              _TAO_AliasDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -12626,38 +8329,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_EnumDef_Proxy_Broker *
-IR__TAO_EnumDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_AliasDef_Proxy_Broker *
+_TAO_AliasDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_EnumDef_Strategized_Proxy_Broker::the_TAO_EnumDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::the_TAO_AliasDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_EnumDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_AliasDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_EnumDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_EnumDef_Proxy_Broker_Factory_function;
+  _TAO_AliasDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_AliasDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_EnumDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_EnumDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_EnumDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_AliasDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_AliasDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_AliasDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::_TAO_EnumDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::_TAO_AliasDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::~_TAO_AliasDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-IR::EnumMemberSeq * POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::members (
+IR::IDLType_ptr POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::original_type_def (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -12665,7 +8371,7 @@
     CORBA::SystemException
   ))
 {
-    IR::EnumMemberSeq_var _tao_retval;
+    IR_IDLType_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -12673,24 +8379,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "members",
+      "original_type_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::EnumDef_ptr,
+      POA_IR::AliasDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/EnumDef:1.0"
+          "IDL:omg.org/IR/AliasDef:1.0"
         )
-    )->members (
+    )->original_type_def (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_EnumDef_ThruPOA_Proxy_Impl::members (
+void POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::original_type_def (
     CORBA_Object *_collocated_tao_target_,
-    const IR::EnumMemberSeq & members,
+    IR_IDLType_ptr original_type_def,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -12703,18 +8409,18 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "members",
+      "original_type_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::EnumDef_ptr,
+      POA_IR::AliasDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/EnumDef:1.0"
+          "IDL:omg.org/IR/AliasDef:1.0"
         )
-    )->members (
-        members,
+    )->original_type_def (
+        original_type_def,
         ACE_TRY_ENV
       );
   return;
@@ -12725,13 +8431,13 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::EnumDef::EnumDef (void)
+POA_IR::AliasDef::AliasDef (void)
 {
-  this->optable_ = &tao_IR_EnumDef_optable;
+  this->optable_ = &tao_IR_AliasDef_optable;
 }
 
 // copy ctor
-POA_IR::EnumDef::EnumDef (const EnumDef& rhs)
+POA_IR::AliasDef::AliasDef (const AliasDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,TypedefDef) (rhs),
     ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
     ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
@@ -12740,185 +8446,108 @@
 {}
 
 // skeleton destructor
-POA_IR::EnumDef::~EnumDef (void)
+POA_IR::AliasDef::~AliasDef (void)
 {
 }
 
-void POA_IR::EnumDef::_get_members_skel (
+void POA_IR::AliasDef::_get_original_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *)_tao_object_reference;
+  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *)_tao_object_reference;
 
-  IR::EnumMemberSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_get ri (
-      "_get_members",
-      _tao_server_request.service_info (),
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->original_type_def (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->members (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::EnumMemberSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::EnumDef::_set_members_skel (
+void POA_IR::AliasDef::_set_original_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *)_tao_object_reference;
+  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::EnumMemberSeq members;
+  IR_IDLType_var original_type_def;
   if (!(
-    (_tao_in >> members)
+    (_tao_in >> original_type_def.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_set ri (
-      "_set_members",
-      _tao_server_request.service_info (),
-      members,
+  _tao_impl->original_type_def (
+      original_type_def.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->members (
-          members,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::EnumDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::AliasDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *) _tao_object_reference;
+  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::EnumDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::AliasDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::EnumDef *_tao_impl = (POA_IR::EnumDef *) _tao_object_reference;
+  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::EnumDef::_is_a (
+CORBA::Boolean POA_IR::AliasDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/EnumDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/AliasDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
@@ -12929,12 +8558,12 @@
       return 0;
 }
 
-void* POA_IR::EnumDef::_downcast (
+void* POA_IR::AliasDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/EnumDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::EnumDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/AliasDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::AliasDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
     return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
@@ -12948,19 +8577,19 @@
   return 0;
 }
 
-void POA_IR::EnumDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::AliasDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::EnumDef::_interface_repository_id (void) const
+const char* POA_IR::AliasDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/EnumDef:1.0";
+  return "IDL:omg.org/IR/AliasDef:1.0";
 }
 
-IR::EnumDef*
-POA_IR::EnumDef::_this (CORBA_Environment &ACE_TRY_ENV)
-{
+IR::AliasDef*
+POA_IR::AliasDef::_this (CORBA_Environment &ACE_TRY_ENV)
+{
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
   
@@ -12972,108 +8601,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::EnumDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_get::TAO_ServerRequestInfo_IR_EnumDef_members_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_get::result (IR::EnumMemberSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_set::TAO_ServerRequestInfo_IR_EnumDef_members_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::EnumMemberSeq & members,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
+  return IR_AliasDef::_unchecked_narrow (obj.in ());
 }
 
-Dynamic::ExceptionList *
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::EnumDef::TAO_ServerRequestInfo_IR_EnumDef_members_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_AliasDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_NativeDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_AliasDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_NativeDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_AliasDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_NativeDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -13091,7 +8633,7 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0,  0, 37, 37, 37, 37, 37,
+     37, 37,  0,  0, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 10, 37, 37, 37, 37, 10, 37,
@@ -13115,7 +8657,7 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0,  0, 37, 37, 37, 37, 37, 37,  0,
+      0,  0, 37, 37, 37, 37, 37, 37, 37,  0,
       0, 37, 37, 37, 37, 37, 10, 37, 37, 37,
      37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
@@ -13124,47 +8666,45 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_AliasDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_NativeDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 18,
+      TOTAL_KEYWORDS = 16,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
       MAX_HASH_VALUE = 36,
       HASH_VALUE_RANGE = 33,
-      DUPLICATES = 6
+      DUPLICATES = 5
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::AliasDef::move_skel},
-      {"_is_a",  &POA_IR::AliasDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::AliasDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::AliasDef::_set_id_skel},
-      {"describe", 	&POA_IR::AliasDef::describe_skel},
-      {"_get_name", 	&POA_IR::AliasDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::AliasDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::AliasDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::AliasDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::AliasDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::AliasDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::AliasDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::AliasDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::AliasDef::_get_absolute_name_skel},
-      {"_get_original_type_def", 	&POA_IR::AliasDef::_get_original_type_def_skel},
-      {"_set_original_type_def", 	&POA_IR::AliasDef::_set_original_type_def_skel},
-      {"_non_existent",  &POA_IR::AliasDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::AliasDef::_get_containing_repository_skel},
+      {"move",  &POA_IR::NativeDef::move_skel},
+      {"_is_a",  &POA_IR::NativeDef::_is_a_skel},
+      {"_get_id",       &POA_IR::NativeDef::_get_id_skel},
+      {"_set_id",       &POA_IR::NativeDef::_set_id_skel},
+      {"describe",      &POA_IR::NativeDef::describe_skel},
+      {"_get_name",     &POA_IR::NativeDef::_get_name_skel},
+      {"_get_type",     &POA_IR::NativeDef::_get_type_skel},
+      {"_set_name",     &POA_IR::NativeDef::_set_name_skel},
+      {"_get_version",  &POA_IR::NativeDef::_get_version_skel},
+      {"_set_version",  &POA_IR::NativeDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::NativeDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::NativeDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::NativeDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::NativeDef::_get_absolute_name_skel},
+      {"_non_existent",  &POA_IR::NativeDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::NativeDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14, 
-       -1,  15,  -1,  16,  17,  -1, -18,  -2, -38,  20,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21, 
+       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14,
+       -1,  15,  -1,  16,  17,  -1,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -13198,38 +8738,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_AliasDef_Perfect_Hash_OpTable tao_IR_AliasDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_NativeDef_Perfect_Hash_OpTable tao_IR_NativeDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker *POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::the_TAO_AliasDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker *POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::the_TAO_NativeDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::_TAO_AliasDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::_TAO_NativeDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::~_TAO_AliasDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::~_TAO_NativeDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_AliasDef_Proxy_Impl&
-POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::AliasDef *object,
+_TAO_NativeDef_Proxy_Impl&
+POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::select_proxy (
+    IR_NativeDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -13247,7 +8786,7 @@
 }
 
 void 
-POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -13261,7 +8800,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl,
+              _TAO_NativeDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -13271,7 +8810,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_AliasDef_Remote_Proxy_Impl,
+              _TAO_NativeDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -13288,112 +8827,52 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_AliasDef_Proxy_Broker *
-IR__TAO_AliasDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_NativeDef_Proxy_Broker *
+_TAO_NativeDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_AliasDef_Strategized_Proxy_Broker::the_TAO_AliasDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::the_TAO_NativeDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_AliasDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_NativeDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_AliasDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_AliasDef_Proxy_Broker_Factory_function;
+  _TAO_NativeDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_NativeDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_AliasDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_AliasDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_AliasDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_NativeDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_NativeDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_NativeDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::_TAO_AliasDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_NativeDef_ThruPOA_Proxy_Impl::_TAO_NativeDef_ThruPOA_Proxy_Impl (void)
 {}
 
-// ThruPOA Implementation of the IDL interface methods
-
-IR::IDLType_ptr POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::original_type_def (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::IDLType_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "original_type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::AliasDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AliasDef:1.0"
-        )
-    )->original_type_def (
-        ACE_TRY_ENV
-      );
-}
+POA_IR::_TAO_NativeDef_ThruPOA_Proxy_Impl::~_TAO_NativeDef_ThruPOA_Proxy_Impl (void)
+{}
 
-void POA_IR::_TAO_AliasDef_ThruPOA_Proxy_Impl::original_type_def (
-    CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr original_type_def,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "original_type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::AliasDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AliasDef:1.0"
-        )
-    )->original_type_def (
-        original_type_def,
-        ACE_TRY_ENV
-      );
-  return;
-}
+// ThruPOA Implementation of the IDL interface methods
 
 //
 //           End ThruPOA Proxy Implementation
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::AliasDef::AliasDef (void)
+POA_IR::NativeDef::NativeDef (void)
 {
-  this->optable_ = &tao_IR_AliasDef_optable;
+  this->optable_ = &tao_IR_NativeDef_optable;
 }
 
 // copy ctor
-POA_IR::AliasDef::AliasDef (const AliasDef& rhs)
+POA_IR::NativeDef::NativeDef (const NativeDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,TypedefDef) (rhs),
     ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
     ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
@@ -13402,185 +8881,57 @@
 {}
 
 // skeleton destructor
-POA_IR::AliasDef::~AliasDef (void)
-{
-}
-
-void POA_IR::AliasDef::_get_original_type_def_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
+POA_IR::NativeDef::~NativeDef (void)
 {
-  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *)_tao_object_reference;
-
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get ri (
-      "_get_original_type_def",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->original_type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::AliasDef::_set_original_type_def_skel (
+void POA_IR::NativeDef::_is_a_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var original_type_def;
-  if (!(
-    (_tao_in >> original_type_def.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_set ri (
-      "_set_original_type_def",
-      _tao_server_request.service_info (),
-      original_type_def.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->original_type_def (
-          original_type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::AliasDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *) _tao_object_reference;
+  POA_IR::NativeDef *_tao_impl = (POA_IR::NativeDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::AliasDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::NativeDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::AliasDef *_tao_impl = (POA_IR::AliasDef *) _tao_object_reference;
+  POA_IR::NativeDef *_tao_impl = (POA_IR::NativeDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::AliasDef::_is_a (
+CORBA::Boolean POA_IR::NativeDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/AliasDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/NativeDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
@@ -13591,12 +8942,12 @@
       return 0;
 }
 
-void* POA_IR::AliasDef::_downcast (
+void* POA_IR::NativeDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/AliasDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::AliasDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/NativeDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::NativeDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
     return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
@@ -13610,18 +8961,18 @@
   return 0;
 }
 
-void POA_IR::AliasDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::NativeDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::AliasDef::_interface_repository_id (void) const
+const char* POA_IR::NativeDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/AliasDef:1.0";
+  return "IDL:omg.org/IR/NativeDef:1.0";
 }
 
-IR::AliasDef*
-POA_IR::AliasDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::NativeDef*
+POA_IR::NativeDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -13634,197 +8985,97 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::AliasDef::_unchecked_narrow (obj.in ());
+  return IR_NativeDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_get::result (IR::IDLType_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_set::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr original_type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    original_type_def_ (original_type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_original_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_original_type_def + 1);
-  this->parameter_list_[length_original_type_def].argument <<=  this->original_type_def_;
-  
-  this->parameter_list_[length_original_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AliasDef::TAO_ServerRequestInfo_IR_AliasDef_original_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_NativeDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_PrimitiveDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_NativeDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_PrimitiveDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_NativeDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_PrimitiveDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 10, 37, 37, 37, 37, 10, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
+     19, 19,  0,  5, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19,  5, 19, 19, 19, 19,  0, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19,
 #else
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0, 37, 37, 37, 37, 37, 37, 37,  0,
-      0, 37, 37, 37, 37, 37, 10, 37, 37, 37,
-     37, 10, 37, 37, 37, 37, 37, 37,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
+      0,  5, 19, 19, 19, 19, 19, 19, 19, 19,
+     19, 19, 19, 19, 19, 19,  5, 19, 19, 19,
+     19,  0, 19, 19, 19, 19, 19, 19,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_NativeDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_PrimitiveDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 16,
-      MIN_WORD_LENGTH = 4,
-      MAX_WORD_LENGTH = 26,
-      MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 36,
-      HASH_VALUE_RANGE = 33,
-      DUPLICATES = 5
+      TOTAL_KEYWORDS = 6,
+      MIN_WORD_LENGTH = 5,
+      MAX_WORD_LENGTH = 13,
+      MIN_HASH_VALUE = 5,
+      MAX_HASH_VALUE = 18,
+      HASH_VALUE_RANGE = 14,
+      DUPLICATES = 0
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
-      {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::NativeDef::move_skel},
-      {"_is_a",  &POA_IR::NativeDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::NativeDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::NativeDef::_set_id_skel},
-      {"describe", 	&POA_IR::NativeDef::describe_skel},
-      {"_get_name", 	&POA_IR::NativeDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::NativeDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::NativeDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::NativeDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::NativeDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::NativeDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::NativeDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::NativeDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::NativeDef::_get_absolute_name_skel},
-      {"_non_existent",  &POA_IR::NativeDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::NativeDef::_get_containing_repository_skel},
-    };
-
-  static const signed char lookup[] =
-    {
-       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14, 
-       -1,  15,  -1,  16,  17,  -1,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19, 
+      {"",0},{"",0},{"",0},{"",0},{"",0},
+      {"_is_a",  &POA_IR::PrimitiveDef::_is_a_skel},
+      {"",0},
+      {"destroy",       &POA_IR::PrimitiveDef::destroy_skel},
+      {"",0},
+      {"_get_kind",     &POA_IR::PrimitiveDef::_get_kind_skel},
+      {"",0},{"",0},{"",0},
+      {"_get_def_kind",         &POA_IR::PrimitiveDef::_get_def_kind_skel},
+      {"_get_type",     &POA_IR::PrimitiveDef::_get_type_skel},
+      {"",0},{"",0},{"",0},
+      {"_non_existent",  &POA_IR::PrimitiveDef::_non_existent_skel},
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -13833,63 +9084,45 @@
 
       if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
         {
-          int slot = lookup[key];
-
-          if (slot >= 0 && slot < MAX_HASH_VALUE)
-            {
-              const char *s = wordlist[slot].opname_;
-
-              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-                return &wordlist[slot];
-            }
-          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
-            return 0;
-          else
-            {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+          const char *s = wordlist[key].opname_;
 
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
-            }
+          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+            return &wordlist[key];
         }
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_NativeDef_Perfect_Hash_OpTable tao_IR_NativeDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_PrimitiveDef_Perfect_Hash_OpTable tao_IR_PrimitiveDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker *POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::the_TAO_NativeDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker *POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::the_TAO_PrimitiveDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::_TAO_NativeDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::_TAO_PrimitiveDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::~_TAO_NativeDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::~_TAO_PrimitiveDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_NativeDef_Proxy_Impl&
-POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::NativeDef *object,
+_TAO_PrimitiveDef_Proxy_Impl&
+POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::select_proxy (
+    IR_PrimitiveDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -13907,7 +9140,7 @@
 }
 
 void 
-POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -13921,7 +9154,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_NativeDef_ThruPOA_Proxy_Impl,
+              _TAO_PrimitiveDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -13931,7 +9164,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_NativeDef_Remote_Proxy_Impl,
+              _TAO_PrimitiveDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -13948,110 +9181,165 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_NativeDef_Proxy_Broker *
-IR__TAO_NativeDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_PrimitiveDef_Proxy_Broker *
+_TAO_PrimitiveDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_NativeDef_Strategized_Proxy_Broker::the_TAO_NativeDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::the_TAO_PrimitiveDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_NativeDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_PrimitiveDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_NativeDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_NativeDef_Proxy_Broker_Factory_function;
+  _TAO_PrimitiveDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_PrimitiveDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_NativeDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_NativeDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_NativeDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_PrimitiveDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_PrimitiveDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_PrimitiveDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_NativeDef_ThruPOA_Proxy_Impl::_TAO_NativeDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl::~_TAO_PrimitiveDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
+IR::PrimitiveKind POA_IR::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl::kind (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    IR_PrimitiveKind _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "kind",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::PrimitiveDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/PrimitiveDef:1.0"
+        )
+    )->kind (
+        ACE_TRY_ENV
+      );
+}
+
 //
 //           End ThruPOA Proxy Implementation
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::NativeDef::NativeDef (void)
+POA_IR::PrimitiveDef::PrimitiveDef (void)
 {
-  this->optable_ = &tao_IR_NativeDef_optable;
+  this->optable_ = &tao_IR_PrimitiveDef_optable;
 }
 
 // copy ctor
-POA_IR::NativeDef::NativeDef (const NativeDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,TypedefDef) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
+POA_IR::PrimitiveDef::PrimitiveDef (const PrimitiveDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::NativeDef::~NativeDef (void)
+POA_IR::PrimitiveDef::~PrimitiveDef (void)
 {
 }
 
-void POA_IR::NativeDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::PrimitiveDef::_get_kind_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::PrimitiveDef *_tao_impl = (POA_IR::PrimitiveDef *)_tao_object_reference;
+
+  IR_PrimitiveKind _tao_retval;
+
+  _tao_retval = _tao_impl->kind (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::PrimitiveDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::NativeDef *_tao_impl = (POA_IR::NativeDef *) _tao_object_reference;
+  POA_IR::PrimitiveDef *_tao_impl = (POA_IR::PrimitiveDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::NativeDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::PrimitiveDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::NativeDef *_tao_impl = (POA_IR::NativeDef *) _tao_object_reference;
+  POA_IR::PrimitiveDef *_tao_impl = (POA_IR::PrimitiveDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::NativeDef::_is_a (
+CORBA::Boolean POA_IR::PrimitiveDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/NativeDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/TypedefDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/PrimitiveDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -14060,16 +9348,12 @@
       return 0;
 }
 
-void* POA_IR::NativeDef::_downcast (
+void* POA_IR::PrimitiveDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/NativeDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::NativeDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/TypedefDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::TypedefDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
-    return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/PrimitiveDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::PrimitiveDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -14079,18 +9363,18 @@
   return 0;
 }
 
-void POA_IR::NativeDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::PrimitiveDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::NativeDef::_interface_repository_id (void) const
+const char* POA_IR::PrimitiveDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/NativeDef:1.0";
+  return "IDL:omg.org/IR/PrimitiveDef:1.0";
 }
 
-IR::NativeDef*
-POA_IR::NativeDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::PrimitiveDef*
+POA_IR::PrimitiveDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -14103,24 +9387,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::NativeDef::_unchecked_narrow (obj.in ());
+  return IR_PrimitiveDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_PrimitiveDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_StringDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_PrimitiveDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_StringDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_PrimitiveDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_StringDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -14138,7 +9419,7 @@
      19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
-     19, 19,  0,  5, 19, 19, 19, 19, 19, 19,
+     19, 19,  0,  0, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19,  5, 19, 19, 19, 19,  0, 19,
@@ -14162,7 +9443,7 @@
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
-      0,  5, 19, 19, 19, 19, 19, 19, 19, 19,
+      0,  0, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19,  5, 19, 19, 19,
      19,  0, 19, 19, 19, 19, 19, 19,
 #endif /* ACE_MVS */
@@ -14171,32 +9452,35 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_PrimitiveDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_StringDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 6,
+      TOTAL_KEYWORDS = 7,
       MIN_WORD_LENGTH = 5,
       MAX_WORD_LENGTH = 13,
       MIN_HASH_VALUE = 5,
       MAX_HASH_VALUE = 18,
       HASH_VALUE_RANGE = 14,
-      DUPLICATES = 0
+      DUPLICATES = 2
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::PrimitiveDef::_is_a_skel},
-      {"",0},
-      {"destroy", 	&POA_IR::PrimitiveDef::destroy_skel},
-      {"",0},
-      {"_get_kind", 	&POA_IR::PrimitiveDef::_get_kind_skel},
-      {"",0},{"",0},{"",0},
-      {"_get_def_kind", 	&POA_IR::PrimitiveDef::_get_def_kind_skel},
-      {"_get_type", 	&POA_IR::PrimitiveDef::_get_type_skel},
-      {"",0},{"",0},{"",0},
-      {"_non_existent",  &POA_IR::PrimitiveDef::_non_existent_skel},
+      {"_is_a",  &POA_IR::StringDef::_is_a_skel},
+      {"destroy",       &POA_IR::StringDef::destroy_skel},
+      {"_get_type",     &POA_IR::StringDef::_get_type_skel},
+      {"_get_bound",    &POA_IR::StringDef::_get_bound_skel},
+      {"_set_bound",    &POA_IR::StringDef::_set_bound_skel},
+      {"_get_def_kind",         &POA_IR::StringDef::_get_def_kind_skel},
+      {"_non_existent",  &POA_IR::StringDef::_non_existent_skel},
+    };
+
+  static const signed char lookup[] =
+    {
+       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7, -25,  -1,  -1,  10,
+       -1,  -1,  -1,  -1,  11,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -14205,46 +9489,62 @@
 
       if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
         {
-          const char *s = wordlist[key].opname_;
+          int slot = lookup[key];
 
-          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-            return &wordlist[key];
+          if (slot >= 0 && slot < MAX_HASH_VALUE)
+            {
+              const char *s = wordlist[slot].opname_;
+
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+                return &wordlist[slot];
+            }
+          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
+            return 0;
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
+            }
         }
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_PrimitiveDef_Perfect_Hash_OpTable tao_IR_PrimitiveDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_StringDef_Perfect_Hash_OpTable tao_IR_StringDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker *POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::the_TAO_PrimitiveDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_StringDef_Strategized_Proxy_Broker *POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::the_TAO_StringDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_StringDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::_TAO_PrimitiveDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::_TAO_StringDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::~_TAO_PrimitiveDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::~_TAO_StringDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_PrimitiveDef_Proxy_Impl&
-POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::PrimitiveDef *object,
+_TAO_StringDef_Proxy_Impl&
+POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::select_proxy (
+    IR_StringDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -14262,7 +9562,7 @@
 }
 
 void 
-POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -14276,7 +9576,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl,
+              _TAO_StringDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -14286,7 +9586,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_PrimitiveDef_Remote_Proxy_Impl,
+              _TAO_StringDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -14303,38 +9603,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_PrimitiveDef_Proxy_Broker *
-IR__TAO_PrimitiveDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_StringDef_Proxy_Broker *
+_TAO_StringDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_PrimitiveDef_Strategized_Proxy_Broker::the_TAO_PrimitiveDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::the_TAO_StringDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_PrimitiveDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_StringDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_PrimitiveDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_PrimitiveDef_Proxy_Broker_Factory_function;
+  _TAO_StringDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_StringDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_PrimitiveDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_PrimitiveDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_PrimitiveDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_StringDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_StringDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_StringDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::_TAO_StringDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::~_TAO_StringDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-IR::PrimitiveKind POA_IR::_TAO_PrimitiveDef_ThruPOA_Proxy_Impl::kind (
+CORBA::ULong POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::bound (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -14342,7 +9645,7 @@
     CORBA::SystemException
   ))
 {
-    IR::PrimitiveKind _tao_retval;
+    CORBA::ULong _tao_retval = 0;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -14350,19 +9653,51 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "kind",
+      "bound",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::PrimitiveDef_ptr,
+      POA_IR::StringDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/PrimitiveDef:1.0"
+          "IDL:omg.org/IR/StringDef:1.0"
         )
-    )->kind (
+    )->bound (
+        ACE_TRY_ENV
+      );
+}
+
+void POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::bound (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::ULong bound,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "bound",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::StringDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/StringDef:1.0"
+        )
+    )->bound (
+        bound,
         ACE_TRY_ENV
       );
+  return;
 }
 
 //
@@ -14370,135 +9705,121 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::PrimitiveDef::PrimitiveDef (void)
+POA_IR::StringDef::StringDef (void)
 {
-  this->optable_ = &tao_IR_PrimitiveDef_optable;
+  this->optable_ = &tao_IR_StringDef_optable;
 }
 
 // copy ctor
-POA_IR::PrimitiveDef::PrimitiveDef (const PrimitiveDef& rhs)
+POA_IR::StringDef::StringDef (const StringDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::PrimitiveDef::~PrimitiveDef (void)
+POA_IR::StringDef::~StringDef (void)
 {
 }
 
-void POA_IR::PrimitiveDef::_get_kind_skel (
+void POA_IR::StringDef::_get_bound_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::PrimitiveDef *_tao_impl = (POA_IR::PrimitiveDef *)_tao_object_reference;
+  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *)_tao_object_reference;
 
-  IR::PrimitiveKind _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::PrimitiveDef::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get ri (
-      "_get_kind",
-      _tao_server_request.service_info (),
+  CORBA::ULong _tao_retval = 0;
+
+  _tao_retval = _tao_impl->bound (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->kind (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::PrimitiveKind _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::StringDef::_set_bound_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *)_tao_object_reference;
+
+  CORBA::ULong bound;
+  if (!(
+    (_tao_in >> bound)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->bound (
+      bound,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
 
+  _tao_server_request.init_reply ();
 }
 
-void POA_IR::PrimitiveDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::StringDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::PrimitiveDef *_tao_impl = (POA_IR::PrimitiveDef *) _tao_object_reference;
+  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::PrimitiveDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::StringDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::PrimitiveDef *_tao_impl = (POA_IR::PrimitiveDef *) _tao_object_reference;
+  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::PrimitiveDef::_is_a (
+CORBA::Boolean POA_IR::StringDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/PrimitiveDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/StringDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -14507,12 +9828,12 @@
       return 0;
 }
 
-void* POA_IR::PrimitiveDef::_downcast (
+void* POA_IR::StringDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/PrimitiveDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::PrimitiveDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/StringDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::StringDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -14522,18 +9843,18 @@
   return 0;
 }
 
-void POA_IR::PrimitiveDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::StringDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::PrimitiveDef::_interface_repository_id (void) const
+const char* POA_IR::StringDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/PrimitiveDef:1.0";
+  return "IDL:omg.org/IR/StringDef:1.0";
 }
 
-IR::PrimitiveDef*
-POA_IR::PrimitiveDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::StringDef*
+POA_IR::StringDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -14546,65 +9867,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::PrimitiveDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::PrimitiveDef::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::PrimitiveDef::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::PrimitiveDef::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::PrimitiveDef::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::PrimitiveDef::TAO_ServerRequestInfo_IR_PrimitiveDef_kind_get::result (IR::PrimitiveKind result)
-{
-  // update the result 
-   this->result_ = result;
+  return IR_StringDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_StringDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_WstringDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_StringDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_WstringDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_StringDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_WstringDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -14655,7 +9932,7 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_StringDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_WstringDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
@@ -14671,19 +9948,19 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::StringDef::_is_a_skel},
-      {"destroy", 	&POA_IR::StringDef::destroy_skel},
-      {"_get_type", 	&POA_IR::StringDef::_get_type_skel},
-      {"_get_bound", 	&POA_IR::StringDef::_get_bound_skel},
-      {"_set_bound", 	&POA_IR::StringDef::_set_bound_skel},
-      {"_get_def_kind", 	&POA_IR::StringDef::_get_def_kind_skel},
-      {"_non_existent",  &POA_IR::StringDef::_non_existent_skel},
+      {"_is_a",  &POA_IR::WstringDef::_is_a_skel},
+      {"destroy",       &POA_IR::WstringDef::destroy_skel},
+      {"_get_type",     &POA_IR::WstringDef::_get_type_skel},
+      {"_get_bound",    &POA_IR::WstringDef::_get_bound_skel},
+      {"_set_bound",    &POA_IR::WstringDef::_set_bound_skel},
+      {"_get_def_kind",         &POA_IR::WstringDef::_get_def_kind_skel},
+      {"_non_existent",  &POA_IR::WstringDef::_non_existent_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7, -25,  -1,  -1,  10, 
-       -1,  -1,  -1,  -1,  11, 
+       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7, -25,  -1,  -1,  10,
+       -1,  -1,  -1,  -1,  11,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -14717,38 +9994,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_StringDef_Perfect_Hash_OpTable tao_IR_StringDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_WstringDef_Perfect_Hash_OpTable tao_IR_WstringDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_StringDef_Strategized_Proxy_Broker *POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::the_TAO_StringDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker *POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::the_TAO_WstringDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_StringDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::_TAO_StringDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::_TAO_WstringDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::~_TAO_StringDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::~_TAO_WstringDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_StringDef_Proxy_Impl&
-POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::StringDef *object,
+_TAO_WstringDef_Proxy_Impl&
+POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::select_proxy (
+    IR_WstringDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -14766,7 +10042,7 @@
 }
 
 void 
-POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -14780,7 +10056,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl,
+              _TAO_WstringDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -14790,7 +10066,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_StringDef_Remote_Proxy_Impl,
+              _TAO_WstringDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -14807,38 +10083,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_StringDef_Proxy_Broker *
-IR__TAO_StringDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_WstringDef_Proxy_Broker *
+_TAO_WstringDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_StringDef_Strategized_Proxy_Broker::the_TAO_StringDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::the_TAO_WstringDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_StringDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_WstringDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_StringDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_StringDef_Proxy_Broker_Factory_function;
+  _TAO_WstringDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_WstringDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_StringDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_StringDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_StringDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_WstringDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_WstringDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_WstringDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::_TAO_StringDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::_TAO_WstringDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::~_TAO_WstringDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::ULong POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::bound (
+CORBA::ULong POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::bound (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -14860,16 +10139,16 @@
     );
       ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::StringDef_ptr,
+      POA_IR::WstringDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/StringDef:1.0"
+          "IDL:omg.org/IR/WstringDef:1.0"
         )
     )->bound (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_StringDef_ThruPOA_Proxy_Impl::bound (
+void POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::bound (
     CORBA_Object *_collocated_tao_target_,
     CORBA::ULong bound,
     CORBA::Environment &ACE_TRY_ENV
@@ -14890,9 +10169,9 @@
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::StringDef_ptr,
+      POA_IR::WstringDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/StringDef:1.0"
+          "IDL:omg.org/IR/WstringDef:1.0"
         )
     )->bound (
         bound,
@@ -14906,197 +10185,121 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::StringDef::StringDef (void)
+POA_IR::WstringDef::WstringDef (void)
 {
-  this->optable_ = &tao_IR_StringDef_optable;
+  this->optable_ = &tao_IR_WstringDef_optable;
 }
 
 // copy ctor
-POA_IR::StringDef::StringDef (const StringDef& rhs)
+POA_IR::WstringDef::WstringDef (const WstringDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::StringDef::~StringDef (void)
+POA_IR::WstringDef::~WstringDef (void)
 {
 }
 
-void POA_IR::StringDef::_get_bound_skel (
+void POA_IR::WstringDef::_get_bound_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *)_tao_object_reference;
+  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *)_tao_object_reference;
 
   CORBA::ULong _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_get ri (
-      "_get_bound",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->bound (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->bound (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::ULong _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::StringDef::_set_bound_skel (
+void POA_IR::WstringDef::_set_bound_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *)_tao_object_reference;
+  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::ULong bound;
+  CORBA::ULong bound;
   if (!(
     (_tao_in >> bound)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_set ri (
-      "_set_bound",
-      _tao_server_request.service_info (),
+  _tao_impl->bound (
       bound,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->bound (
-          bound,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::StringDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::WstringDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *) _tao_object_reference;
+  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::StringDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::WstringDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::StringDef *_tao_impl = (POA_IR::StringDef *) _tao_object_reference;
+  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::StringDef::_is_a (
+CORBA::Boolean POA_IR::WstringDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/StringDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/WstringDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -15105,12 +10308,12 @@
       return 0;
 }
 
-void* POA_IR::StringDef::_downcast (
+void* POA_IR::WstringDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/StringDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::StringDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/WstringDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::WstringDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -15120,18 +10323,18 @@
   return 0;
 }
 
-void POA_IR::StringDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::WstringDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::StringDef::_interface_repository_id (void) const
+const char* POA_IR::WstringDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/StringDef:1.0";
+  return "IDL:omg.org/IR/WstringDef:1.0";
 }
 
-IR::StringDef*
-POA_IR::StringDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::WstringDef*
+POA_IR::WstringDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -15144,107 +10347,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::StringDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_get::TAO_ServerRequestInfo_IR_StringDef_bound_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  return IR_WstringDef::_unchecked_narrow (obj.in ());
 }
 
-void 
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_get::result (CORBA::ULong result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_set::TAO_ServerRequestInfo_IR_StringDef_bound_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & bound,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    bound_ (bound)
-{}
-
-Dynamic::ParameterList *
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_bound = this->parameter_list_.length ();
-  this->parameter_list_.length (length_bound + 1);
-  this->parameter_list_[length_bound].argument <<= bound_;
-  this->parameter_list_[length_bound].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::StringDef::TAO_ServerRequestInfo_IR_StringDef_bound_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_WstringDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_FixedDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_WstringDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_FixedDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_WstringDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_FixedDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -15265,7 +10382,7 @@
      19, 19,  0,  0, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19,  5, 19, 19, 19, 19,  0, 19,
+     19, 19,  0,  5, 19, 19, 19, 19,  0, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
@@ -15287,7 +10404,7 @@
      19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
      19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
       0,  0, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19,  5, 19, 19, 19,
+     19, 19, 19, 19, 19,  0,  5, 19, 19, 19,
      19,  0, 19, 19, 19, 19, 19, 19,
 #endif /* ACE_MVS */
     };
@@ -15295,35 +10412,37 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_WstringDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_FixedDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 7,
+      TOTAL_KEYWORDS = 9,
       MIN_WORD_LENGTH = 5,
       MAX_WORD_LENGTH = 13,
       MIN_HASH_VALUE = 5,
       MAX_HASH_VALUE = 18,
       HASH_VALUE_RANGE = 14,
-      DUPLICATES = 2
+      DUPLICATES = 3
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::WstringDef::_is_a_skel},
-      {"destroy", 	&POA_IR::WstringDef::destroy_skel},
-      {"_get_type", 	&POA_IR::WstringDef::_get_type_skel},
-      {"_get_bound", 	&POA_IR::WstringDef::_get_bound_skel},
-      {"_set_bound", 	&POA_IR::WstringDef::_set_bound_skel},
-      {"_get_def_kind", 	&POA_IR::WstringDef::_get_def_kind_skel},
-      {"_non_existent",  &POA_IR::WstringDef::_non_existent_skel},
+      {"_is_a",  &POA_IR::FixedDef::_is_a_skel},
+      {"destroy",       &POA_IR::FixedDef::destroy_skel},
+      {"_get_type",     &POA_IR::FixedDef::_get_type_skel},
+      {"_get_scale",    &POA_IR::FixedDef::_get_scale_skel},
+      {"_set_scale",    &POA_IR::FixedDef::_set_scale_skel},
+      {"_get_digits",   &POA_IR::FixedDef::_get_digits_skel},
+      {"_set_digits",   &POA_IR::FixedDef::_set_digits_skel},
+      {"_get_def_kind",         &POA_IR::FixedDef::_get_def_kind_skel},
+      {"_non_existent",  &POA_IR::FixedDef::_non_existent_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7, -25,  -1,  -1,  10, 
-       -1,  -1,  -1,  -1,  11, 
+       -1,  -8,  -2, -10,  -2,   5,  -1,   6,  -1,   7, -27, -26,  -1,  12,
+       -1,  -1,  -1,  -1,  13,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -15357,38 +10476,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_WstringDef_Perfect_Hash_OpTable tao_IR_WstringDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_FixedDef_Perfect_Hash_OpTable tao_IR_FixedDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker *POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::the_TAO_WstringDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker *POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::the_TAO_FixedDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::_TAO_WstringDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::_TAO_FixedDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::~_TAO_WstringDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::~_TAO_FixedDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_WstringDef_Proxy_Impl&
-POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::WstringDef *object,
+_TAO_FixedDef_Proxy_Impl&
+POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::select_proxy (
+    IR_FixedDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -15406,7 +10524,7 @@
 }
 
 void 
-POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -15420,7 +10538,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl,
+              _TAO_FixedDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -15430,7 +10548,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_WstringDef_Remote_Proxy_Impl,
+              _TAO_FixedDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -15447,38 +10565,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_WstringDef_Proxy_Broker *
-IR__TAO_WstringDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_FixedDef_Proxy_Broker *
+_TAO_FixedDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_WstringDef_Strategized_Proxy_Broker::the_TAO_WstringDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::the_TAO_FixedDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_WstringDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_FixedDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_WstringDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_WstringDef_Proxy_Broker_Factory_function;
+  _TAO_FixedDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_FixedDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_WstringDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_WstringDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_WstringDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_FixedDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_FixedDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_FixedDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::_TAO_WstringDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::_TAO_FixedDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::~_TAO_FixedDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::ULong POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::bound (
+CORBA::UShort POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::digits (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -15486,7 +10607,7 @@
     CORBA::SystemException
   ))
 {
-    CORBA::ULong _tao_retval = 0;
+    CORBA::UShort _tao_retval = 0;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -15494,24 +10615,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "bound",
+      "digits",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::WstringDef_ptr,
+      POA_IR::FixedDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/WstringDef:1.0"
+          "IDL:omg.org/IR/FixedDef:1.0"
         )
-    )->bound (
+    )->digits (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_WstringDef_ThruPOA_Proxy_Impl::bound (
+void POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::digits (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong bound,
+    CORBA::UShort digits,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -15524,219 +10645,257 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "bound",
+      "digits",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::WstringDef_ptr,
+      POA_IR::FixedDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/WstringDef:1.0"
+          "IDL:omg.org/IR/FixedDef:1.0"
         )
-    )->bound (
-        bound,
+    )->digits (
+        digits,
         ACE_TRY_ENV
       );
   return;
 }
 
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::WstringDef::WstringDef (void)
-{
-  this->optable_ = &tao_IR_WstringDef_optable;
-}
-
-// copy ctor
-POA_IR::WstringDef::WstringDef (const WstringDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::WstringDef::~WstringDef (void)
-{
-}
-
-void POA_IR::WstringDef::_get_bound_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+CORBA::Short POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::scale (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *)_tao_object_reference;
-
-  CORBA::ULong _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    CORBA::Short _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_get ri (
-      "_get_bound",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "scale",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::FixedDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/FixedDef:1.0"
+        )
+    )->scale (
+        ACE_TRY_ENV
+      );
+}
+
+void POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::scale (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Short scale,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "scale",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::FixedDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/FixedDef:1.0"
+        )
+    )->scale (
+        scale,
+        ACE_TRY_ENV
+      );
+  return;
+}
+
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
 
-      _tao_retval = _tao_impl->bound (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::ULong _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
+// skeleton constructor
+POA_IR::FixedDef::FixedDef (void)
+{
+  this->optable_ = &tao_IR_FixedDef_optable;
+}
 
-TAO_INTERCEPTOR_CHECK;
+// copy ctor
+POA_IR::FixedDef::FixedDef (const FixedDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
+
+// skeleton destructor
+POA_IR::FixedDef::~FixedDef (void)
+{
+}
+
+void POA_IR::FixedDef::_get_digits_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+
+  CORBA::UShort _tao_retval = 0;
+
+  _tao_retval = _tao_impl->digits (
+      ACE_TRY_ENV
+    );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::WstringDef::_set_bound_skel (
+void POA_IR::FixedDef::_set_digits_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *)_tao_object_reference;
+  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::ULong bound;
+  CORBA::UShort digits;
   if (!(
-    (_tao_in >> bound)
+    (_tao_in >> digits)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+  _tao_impl->digits (
+      digits,
+      ACE_TRY_ENV
     );
-  
-  POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_set ri (
-      "_set_bound",
-      _tao_server_request.service_info (),
-      bound,
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::FixedDef::_get_scale_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+
+  CORBA::Short _tao_retval = 0;
+
+  _tao_retval = _tao_impl->scale (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->bound (
-          bound,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::WstringDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::FixedDef::_set_scale_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+
+  CORBA::Short scale;
+  if (!(
+    (_tao_in >> scale)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->scale (
+      scale,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::FixedDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *) _tao_object_reference;
+  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::WstringDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::FixedDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::WstringDef *_tao_impl = (POA_IR::WstringDef *) _tao_object_reference;
+  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::WstringDef::_is_a (
+CORBA::Boolean POA_IR::FixedDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/WstringDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/FixedDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -15745,12 +10904,12 @@
       return 0;
 }
 
-void* POA_IR::WstringDef::_downcast (
+void* POA_IR::FixedDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/WstringDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::WstringDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/FixedDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::FixedDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -15760,18 +10919,18 @@
   return 0;
 }
 
-void POA_IR::WstringDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::FixedDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::WstringDef::_interface_repository_id (void) const
+const char* POA_IR::FixedDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/WstringDef:1.0";
+  return "IDL:omg.org/IR/FixedDef:1.0";
 }
 
-IR::WstringDef*
-POA_IR::WstringDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::FixedDef*
+POA_IR::FixedDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -15784,188 +10943,103 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::WstringDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_get::TAO_ServerRequestInfo_IR_WstringDef_bound_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_get::result (CORBA::ULong result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_set::TAO_ServerRequestInfo_IR_WstringDef_bound_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & bound,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    bound_ (bound)
-{}
-
-Dynamic::ParameterList *
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_bound = this->parameter_list_.length ();
-  this->parameter_list_.length (length_bound + 1);
-  this->parameter_list_[length_bound].argument <<= bound_;
-  this->parameter_list_[length_bound].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  return IR_FixedDef::_unchecked_narrow (obj.in ());
 }
 
-CORBA::Any * 
-POA_IR::WstringDef::TAO_ServerRequestInfo_IR_WstringDef_bound_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_FixedDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_SequenceDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_FixedDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_SequenceDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_FixedDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_SequenceDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
-     19, 19,  0,  0, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19,  0,  5, 19, 19, 19, 19,  0, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19,
-#else
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
-      0,  0, 19, 19, 19, 19, 19, 19, 19, 19,
-     19, 19, 19, 19, 19,  0,  5, 19, 19, 19,
-     19,  0, 19, 19, 19, 19, 19, 19,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
+     22, 22,  0,  0,  0, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22,  5, 22, 22, 22, 22,  0, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22,
+#else
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22,  0, 22,  0, 22, 22,
+      0,  0,  0, 22, 22, 22, 22, 22, 22, 22,
+     22, 22, 22, 22, 22, 22,  5, 22, 22, 22,
+     22,  0, 22, 22, 22, 22, 22, 22,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_FixedDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_SequenceDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 9,
+      TOTAL_KEYWORDS = 10,
       MIN_WORD_LENGTH = 5,
-      MAX_WORD_LENGTH = 13,
+      MAX_WORD_LENGTH = 21,
       MIN_HASH_VALUE = 5,
-      MAX_HASH_VALUE = 18,
-      HASH_VALUE_RANGE = 14,
+      MAX_HASH_VALUE = 21,
+      HASH_VALUE_RANGE = 17,
       DUPLICATES = 3
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::FixedDef::_is_a_skel},
-      {"destroy", 	&POA_IR::FixedDef::destroy_skel},
-      {"_get_type", 	&POA_IR::FixedDef::_get_type_skel},
-      {"_get_scale", 	&POA_IR::FixedDef::_get_scale_skel},
-      {"_set_scale", 	&POA_IR::FixedDef::_set_scale_skel},
-      {"_get_digits", 	&POA_IR::FixedDef::_get_digits_skel},
-      {"_set_digits", 	&POA_IR::FixedDef::_set_digits_skel},
-      {"_get_def_kind", 	&POA_IR::FixedDef::_get_def_kind_skel},
-      {"_non_existent",  &POA_IR::FixedDef::_non_existent_skel},
+      {"_is_a",  &POA_IR::SequenceDef::_is_a_skel},
+      {"destroy",       &POA_IR::SequenceDef::destroy_skel},
+      {"_get_type",     &POA_IR::SequenceDef::_get_type_skel},
+      {"_get_bound",    &POA_IR::SequenceDef::_get_bound_skel},
+      {"_set_bound",    &POA_IR::SequenceDef::_set_bound_skel},
+      {"_get_def_kind",         &POA_IR::SequenceDef::_get_def_kind_skel},
+      {"_get_element_type",     &POA_IR::SequenceDef::_get_element_type_skel},
+      {"_non_existent",  &POA_IR::SequenceDef::_non_existent_skel},
+      {"_get_element_type_def",         &POA_IR::SequenceDef::_get_element_type_def_skel},
+      {"_set_element_type_def",         &POA_IR::SequenceDef::_set_element_type_def_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -8,  -2, -10,  -2,   5,  -1,   6,  -1,   7, -27, -26,  -1,  12, 
-       -1,  -1,  -1,  -1,  13, 
+       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7, -28,  -1,  -1,  10,
+       -1,  -1,  -1,  11,  12, -13,  -2, -23,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -15999,38 +11073,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_FixedDef_Perfect_Hash_OpTable tao_IR_FixedDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_SequenceDef_Perfect_Hash_OpTable tao_IR_SequenceDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker *POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::the_TAO_FixedDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker *POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::the_TAO_SequenceDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::_TAO_FixedDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::_TAO_SequenceDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::~_TAO_FixedDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::~_TAO_SequenceDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_FixedDef_Proxy_Impl&
-POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::FixedDef *object,
+_TAO_SequenceDef_Proxy_Impl&
+POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::select_proxy (
+    IR_SequenceDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -16048,7 +11121,7 @@
 }
 
 void 
-POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -16062,7 +11135,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl,
+              _TAO_SequenceDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -16072,7 +11145,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_FixedDef_Remote_Proxy_Impl,
+              _TAO_SequenceDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -16089,38 +11162,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_FixedDef_Proxy_Broker *
-IR__TAO_FixedDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_SequenceDef_Proxy_Broker *
+_TAO_SequenceDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_FixedDef_Strategized_Proxy_Broker::the_TAO_FixedDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::the_TAO_SequenceDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_FixedDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_SequenceDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_FixedDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_FixedDef_Proxy_Broker_Factory_function;
+  _TAO_SequenceDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_SequenceDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_FixedDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_FixedDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_FixedDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_SequenceDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_SequenceDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_SequenceDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::_TAO_FixedDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::_TAO_SequenceDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::~_TAO_SequenceDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::UShort POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::digits (
+CORBA::ULong POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::bound (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -16128,7 +11204,7 @@
     CORBA::SystemException
   ))
 {
-    CORBA::UShort _tao_retval = 0;
+    CORBA::ULong _tao_retval = 0;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -16136,24 +11212,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "digits",
+      "bound",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::FixedDef_ptr,
+      POA_IR::SequenceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/FixedDef:1.0"
+          "IDL:omg.org/IR/SequenceDef:1.0"
         )
-    )->digits (
+    )->bound (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::digits (
+void POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::bound (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::UShort digits,
+    CORBA::ULong bound,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -16166,24 +11242,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "digits",
+      "bound",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::FixedDef_ptr,
+      POA_IR::SequenceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/FixedDef:1.0"
+          "IDL:omg.org/IR/SequenceDef:1.0"
         )
-    )->digits (
-        digits,
+    )->bound (
+        bound,
         ACE_TRY_ENV
       );
   return;
 }
 
-CORBA::Short POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::scale (
+CORBA::TypeCode_ptr POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::element_type (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -16191,7 +11267,7 @@
     CORBA::SystemException
   ))
 {
-    CORBA::Short _tao_retval = 0;
+    CORBA::TypeCode_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -16199,48 +11275,79 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "scale",
+      "element_type",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN  (_tao_retval);
+      ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::FixedDef_ptr,
+      POA_IR::SequenceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/FixedDef:1.0"
+          "IDL:omg.org/IR/SequenceDef:1.0"
         )
-    )->scale (
+    )->element_type (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_FixedDef_ThruPOA_Proxy_Impl::scale (
+IR::IDLType_ptr POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::element_type_def (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::Short scale,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
+    IR_IDLType_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "scale",
+      "element_type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::SequenceDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/SequenceDef:1.0"
+        )
+    )->element_type_def (
+        ACE_TRY_ENV
+      );
+}
+
+void POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::element_type_def (
+    CORBA_Object *_collocated_tao_target_,
+    IR_IDLType_ptr element_type_def,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "element_type_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::FixedDef_ptr,
+      POA_IR::SequenceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/FixedDef:1.0"
+          "IDL:omg.org/IR/SequenceDef:1.0"
         )
-    )->scale (
-        scale,
+    )->element_type_def (
+        element_type_def,
         ACE_TRY_ENV
       );
   return;
@@ -16251,324 +11358,197 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::FixedDef::FixedDef (void)
+POA_IR::SequenceDef::SequenceDef (void)
 {
-  this->optable_ = &tao_IR_FixedDef_optable;
+  this->optable_ = &tao_IR_SequenceDef_optable;
 }
 
 // copy ctor
-POA_IR::FixedDef::FixedDef (const FixedDef& rhs)
+POA_IR::SequenceDef::SequenceDef (const SequenceDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::FixedDef::~FixedDef (void)
+POA_IR::SequenceDef::~SequenceDef (void)
 {
 }
 
-void POA_IR::FixedDef::_get_digits_skel (
+void POA_IR::SequenceDef::_get_bound_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
 
-  CORBA::UShort _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_get ri (
-      "_get_digits",
-      _tao_server_request.service_info (),
+  CORBA::ULong _tao_retval = 0;
+
+  _tao_retval = _tao_impl->bound (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->digits (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::UShort _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::FixedDef::_set_digits_skel (
+void POA_IR::SequenceDef::_set_bound_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::UShort digits;
+  CORBA::ULong bound;
   if (!(
-    (_tao_in >> digits)
+    (_tao_in >> bound)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_set ri (
-      "_set_digits",
-      _tao_server_request.service_info (),
-      digits,
+  _tao_impl->bound (
+      bound,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->digits (
-          digits,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::FixedDef::_get_scale_skel (
+void POA_IR::SequenceDef::_get_element_type_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
 
-  CORBA::Short _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_get ri (
-      "_get_scale",
-      _tao_server_request.service_info (),
+  CORBA::TypeCode_var _tao_retval;
+
+  _tao_retval = _tao_impl->element_type (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->scale (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Short _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
-    (_tao_out << _tao_retval)
+    (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::FixedDef::_set_scale_skel (
+void POA_IR::SequenceDef::_get_element_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *)_tao_object_reference;
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::Short scale;
-  if (!(
-    (_tao_in >> scale)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+  IR_IDLType_var _tao_retval;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_set ri (
-      "_set_scale",
-      _tao_server_request.service_info (),
-      scale,
+  _tao_retval = _tao_impl->element_type_def (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->scale (
-          scale,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::FixedDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
+void POA_IR::SequenceDef::_set_element_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *) _tao_object_reference;
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
+
+  IR_IDLType_var element_type_def;
+  if (!(
+    (_tao_in >> element_type_def.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->element_type_def (
+      element_type_def.in (),
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::SequenceDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::FixedDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::SequenceDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::FixedDef *_tao_impl = (POA_IR::FixedDef *) _tao_object_reference;
+  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::FixedDef::_is_a (
+CORBA::Boolean POA_IR::SequenceDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/FixedDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/SequenceDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -16577,12 +11557,12 @@
       return 0;
 }
 
-void* POA_IR::FixedDef::_downcast (
+void* POA_IR::SequenceDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/FixedDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::FixedDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/SequenceDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::SequenceDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -16592,18 +11572,18 @@
   return 0;
 }
 
-void POA_IR::FixedDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::SequenceDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::FixedDef::_interface_repository_id (void) const
+const char* POA_IR::SequenceDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/FixedDef:1.0";
+  return "IDL:omg.org/IR/SequenceDef:1.0";
 }
 
-IR::FixedDef*
-POA_IR::FixedDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::SequenceDef*
+POA_IR::SequenceDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -16616,190 +11596,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::FixedDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_get::TAO_ServerRequestInfo_IR_FixedDef_digits_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_get::result (CORBA::UShort result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_set::TAO_ServerRequestInfo_IR_FixedDef_digits_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::UShort & digits,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    digits_ (digits)
-{}
-
-Dynamic::ParameterList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_digits = this->parameter_list_.length ();
-  this->parameter_list_.length (length_digits + 1);
-  this->parameter_list_[length_digits].argument <<= digits_;
-  this->parameter_list_[length_digits].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_digits_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_get::TAO_ServerRequestInfo_IR_FixedDef_scale_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_get::result (CORBA::Short result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_set::TAO_ServerRequestInfo_IR_FixedDef_scale_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Short & scale,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    scale_ (scale)
-{}
-
-Dynamic::ParameterList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_scale = this->parameter_list_.length ();
-  this->parameter_list_.length (length_scale + 1);
-  this->parameter_list_[length_scale].argument <<= scale_;
-  this->parameter_list_[length_scale].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::FixedDef::TAO_ServerRequestInfo_IR_FixedDef_scale_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+  return IR_SequenceDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_SequenceDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+class TAO_IR_ArrayDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:21 */
+/* starting time is 11:23:10 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_SequenceDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ArrayDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_SequenceDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_ArrayDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -16817,7 +11628,7 @@
      22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
      22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
      22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
-     22, 22,  0,  0,  0, 22, 22, 22, 22, 22,
+     22, 22,  0,  0,  0, 22,  0, 22, 22, 22,
      22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
      22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
      22, 22, 22,  5, 22, 22, 22, 22,  0, 22,
@@ -16841,7 +11652,7 @@
      22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
      22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
      22, 22, 22, 22, 22,  0, 22,  0, 22, 22,
-      0,  0,  0, 22, 22, 22, 22, 22, 22, 22,
+      0,  0,  0, 22,  0, 22, 22, 22, 22, 22,
      22, 22, 22, 22, 22, 22,  5, 22, 22, 22,
      22,  0, 22, 22, 22, 22, 22, 22,
 #endif /* ACE_MVS */
@@ -16850,7 +11661,7 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_SequenceDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_ArrayDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
@@ -16866,22 +11677,22 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::SequenceDef::_is_a_skel},
-      {"destroy", 	&POA_IR::SequenceDef::destroy_skel},
-      {"_get_type", 	&POA_IR::SequenceDef::_get_type_skel},
-      {"_get_bound", 	&POA_IR::SequenceDef::_get_bound_skel},
-      {"_set_bound", 	&POA_IR::SequenceDef::_set_bound_skel},
-      {"_get_def_kind", 	&POA_IR::SequenceDef::_get_def_kind_skel},
-      {"_get_element_type", 	&POA_IR::SequenceDef::_get_element_type_skel},
-      {"_non_existent",  &POA_IR::SequenceDef::_non_existent_skel},
-      {"_get_element_type_def", 	&POA_IR::SequenceDef::_get_element_type_def_skel},
-      {"_set_element_type_def", 	&POA_IR::SequenceDef::_set_element_type_def_skel},
+      {"_is_a",  &POA_IR::ArrayDef::_is_a_skel},
+      {"destroy",       &POA_IR::ArrayDef::destroy_skel},
+      {"_get_type",     &POA_IR::ArrayDef::_get_type_skel},
+      {"_get_length",   &POA_IR::ArrayDef::_get_length_skel},
+      {"_set_length",   &POA_IR::ArrayDef::_set_length_skel},
+      {"_get_def_kind",         &POA_IR::ArrayDef::_get_def_kind_skel},
+      {"_get_element_type",     &POA_IR::ArrayDef::_get_element_type_skel},
+      {"_non_existent",  &POA_IR::ArrayDef::_non_existent_skel},
+      {"_get_element_type_def",         &POA_IR::ArrayDef::_get_element_type_def_skel},
+      {"_set_element_type_def",         &POA_IR::ArrayDef::_set_element_type_def_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7, -28,  -1,  -1,  10, 
-       -1,  -1,  -1,  11,  12, -13,  -2, -23, 
+       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7,  -1, -29,  -1,  10,
+       -1,  -1,  -1,  11,  12, -13,  -2, -23,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -16915,38 +11726,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_SequenceDef_Perfect_Hash_OpTable tao_IR_SequenceDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_ArrayDef_Perfect_Hash_OpTable tao_IR_ArrayDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker *POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::the_TAO_SequenceDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker *POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::the_TAO_ArrayDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::_TAO_SequenceDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::_TAO_ArrayDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::~_TAO_SequenceDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::~_TAO_ArrayDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_SequenceDef_Proxy_Impl&
-POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::SequenceDef *object,
+_TAO_ArrayDef_Proxy_Impl&
+POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ArrayDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -16964,7 +11774,7 @@
 }
 
 void 
-POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -16978,7 +11788,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl,
+              _TAO_ArrayDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -16988,7 +11798,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_SequenceDef_Remote_Proxy_Impl,
+              _TAO_ArrayDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -17005,38 +11815,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_SequenceDef_Proxy_Broker *
-IR__TAO_SequenceDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ArrayDef_Proxy_Broker *
+_TAO_ArrayDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_SequenceDef_Strategized_Proxy_Broker::the_TAO_SequenceDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::the_TAO_ArrayDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_SequenceDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ArrayDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_SequenceDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_SequenceDef_Proxy_Broker_Factory_function;
+  _TAO_ArrayDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ArrayDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_SequenceDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_SequenceDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_SequenceDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_ArrayDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ArrayDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ArrayDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::_TAO_SequenceDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::_TAO_ArrayDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::~_TAO_ArrayDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::ULong POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::bound (
+CORBA::ULong POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::length (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -17052,24 +11865,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "bound",
+      "length",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::SequenceDef_ptr,
+      POA_IR::ArrayDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/SequenceDef:1.0"
+          "IDL:omg.org/IR/ArrayDef:1.0"
         )
-    )->bound (
+    )->length (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::bound (
+void POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::length (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong bound,
+    CORBA::ULong length,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -17082,24 +11895,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "bound",
+      "length",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::SequenceDef_ptr,
+      POA_IR::ArrayDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/SequenceDef:1.0"
+          "IDL:omg.org/IR/ArrayDef:1.0"
         )
-    )->bound (
-        bound,
+    )->length (
+        length,
         ACE_TRY_ENV
       );
   return;
 }
 
-CORBA::TypeCode_ptr POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::element_type (
+CORBA::TypeCode_ptr POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::element_type (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -17121,16 +11934,16 @@
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::SequenceDef_ptr,
+      POA_IR::ArrayDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/SequenceDef:1.0"
+          "IDL:omg.org/IR/ArrayDef:1.0"
         )
     )->element_type (
         ACE_TRY_ENV
       );
 }
 
-IR::IDLType_ptr POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::element_type_def (
+IR::IDLType_ptr POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::element_type_def (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -17138,7 +11951,7 @@
     CORBA::SystemException
   ))
 {
-    IR::IDLType_var _tao_retval;
+    IR_IDLType_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -17152,18 +11965,18 @@
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::SequenceDef_ptr,
+      POA_IR::ArrayDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/SequenceDef:1.0"
+          "IDL:omg.org/IR/ArrayDef:1.0"
         )
     )->element_type_def (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_SequenceDef_ThruPOA_Proxy_Impl::element_type_def (
+void POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::element_type_def (
     CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr element_type_def,
+    IR_IDLType_ptr element_type_def,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -17182,9 +11995,9 @@
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::SequenceDef_ptr,
+      POA_IR::ArrayDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/SequenceDef:1.0"
+          "IDL:omg.org/IR/ArrayDef:1.0"
         )
     )->element_type_def (
         element_type_def,
@@ -17198,391 +12011,197 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::SequenceDef::SequenceDef (void)
+POA_IR::ArrayDef::ArrayDef (void)
 {
-  this->optable_ = &tao_IR_SequenceDef_optable;
+  this->optable_ = &tao_IR_ArrayDef_optable;
 }
 
 // copy ctor
-POA_IR::SequenceDef::SequenceDef (const SequenceDef& rhs)
+POA_IR::ArrayDef::ArrayDef (const ArrayDef& rhs)
   :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::SequenceDef::~SequenceDef (void)
+POA_IR::ArrayDef::~ArrayDef (void)
 {
 }
 
-void POA_IR::SequenceDef::_get_bound_skel (
+void POA_IR::ArrayDef::_get_length_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
 
   CORBA::ULong _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_get ri (
-      "_get_bound",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->length (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->bound (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::ULong _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::SequenceDef::_set_bound_skel (
+void POA_IR::ArrayDef::_set_length_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    CORBA::ULong bound;
+  CORBA::ULong length;
   if (!(
-    (_tao_in >> bound)
+    (_tao_in >> length)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_set ri (
-      "_set_bound",
-      _tao_server_request.service_info (),
-      bound,
+  _tao_impl->length (
+      length,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->bound (
-          bound,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::SequenceDef::_get_element_type_skel (
+void POA_IR::ArrayDef::_get_element_type_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
 
   CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get ri (
-      "_get_element_type",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->element_type (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->element_type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::SequenceDef::_get_element_type_def_skel (
+void POA_IR::ArrayDef::_get_element_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
 
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get ri (
-      "_get_element_type_def",
-      _tao_server_request.service_info (),
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->element_type_def (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->element_type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::SequenceDef::_set_element_type_def_skel (
+void POA_IR::ArrayDef::_set_element_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *)_tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var element_type_def;
+  IR_IDLType_var element_type_def;
   if (!(
     (_tao_in >> element_type_def.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_set ri (
-      "_set_element_type_def",
-      _tao_server_request.service_info (),
+  _tao_impl->element_type_def (
       element_type_def.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->element_type_def (
-          element_type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::SequenceDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ArrayDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *) _tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::SequenceDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ArrayDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::SequenceDef *_tao_impl = (POA_IR::SequenceDef *) _tao_object_reference;
+  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::SequenceDef::_is_a (
+CORBA::Boolean POA_IR::ArrayDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/SequenceDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ArrayDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -17591,12 +12210,12 @@
       return 0;
 }
 
-void* POA_IR::SequenceDef::_downcast (
+void* POA_IR::ArrayDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/SequenceDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::SequenceDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ArrayDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ArrayDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
     return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -17606,18 +12225,18 @@
   return 0;
 }
 
-void POA_IR::SequenceDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::ArrayDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::SequenceDef::_interface_repository_id (void) const
+const char* POA_IR::ArrayDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/SequenceDef:1.0";
+  return "IDL:omg.org/IR/ArrayDef:1.0";
 }
 
-IR::SequenceDef*
-POA_IR::SequenceDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::ArrayDef*
+POA_IR::ArrayDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -17630,402 +12249,215 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::SequenceDef::_unchecked_narrow (obj.in ());
+  return IR_ArrayDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_get::TAO_ServerRequestInfo_IR_SequenceDef_bound_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+class TAO_IR_ExceptionDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:10 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ExceptionDef_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_ExceptionDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
-  // Generate the exception list on demand
-  return 0;
+  static const unsigned char asso_values[] =
+    {
+#if defined (ACE_MVS)
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
+     52, 20,  3,  0, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 10, 15,  5,
+     52, 10, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 15, 15, 52, 52, 52, 15,  5, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52,
+#else
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
+     52, 52, 52, 52, 52,  0, 52,  0, 52, 20,
+      3,  0, 52, 52, 52, 52, 52, 52, 10, 15,
+      5, 52, 10, 52, 52, 15, 15, 52, 52, 52,
+     15,  5, 52, 52, 52, 52, 52, 52,
+#endif /* ACE_MVS */
+    };
+  return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
-CORBA::Any * 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+const class TAO_operation_db_entry *
+TAO_IR_ExceptionDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  enum
+    {
+      TOTAL_KEYWORDS = 33,
+      MIN_WORD_LENGTH = 4,
+      MAX_WORD_LENGTH = 26,
+      MIN_HASH_VALUE = 5,
+      MAX_HASH_VALUE = 51,
+      HASH_VALUE_RANGE = 47,
+      DUPLICATES = 7
+    };
 
-void 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_get::result (CORBA::ULong result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  static const class TAO_operation_db_entry  wordlist[] =
+    {
+      {"",0},{"",0},{"",0},{"",0},{"",0},
+      {"_is_a",  &POA_IR::ExceptionDef::_is_a_skel},
+      {"_get_type",     &POA_IR::ExceptionDef::_get_type_skel},
+      {"_set_name",     &POA_IR::ExceptionDef::_set_name_skel},
+      {"_get_name",     &POA_IR::ExceptionDef::_get_name_skel},
+      {"_get_id",       &POA_IR::ExceptionDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ExceptionDef::_set_id_skel},
+      {"describe",      &POA_IR::ExceptionDef::describe_skel},
+      {"destroy",       &POA_IR::ExceptionDef::destroy_skel},
+      {"_get_def_kind",         &POA_IR::ExceptionDef::_get_def_kind_skel},
+      {"_get_version",  &POA_IR::ExceptionDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ExceptionDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::ExceptionDef::_get_absolute_name_skel},
+      {"move",  &POA_IR::ExceptionDef::move_skel},
+      {"_get_defined_in",       &POA_IR::ExceptionDef::_get_defined_in_skel},
+      {"lookup_name",   &POA_IR::ExceptionDef::lookup_name_skel},
+      {"lookup",        &POA_IR::ExceptionDef::lookup_skel},
+      {"_get_members",  &POA_IR::ExceptionDef::_get_members_skel},
+      {"_set_members",  &POA_IR::ExceptionDef::_set_members_skel},
+      {"_non_existent",  &POA_IR::ExceptionDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::ExceptionDef::_get_containing_repository_skel},
+      {"create_value",  &POA_IR::ExceptionDef::create_value_skel},
+      {"create_module",         &POA_IR::ExceptionDef::create_module_skel},
+      {"create_native",         &POA_IR::ExceptionDef::create_native_skel},
+      {"describe_contents",     &POA_IR::ExceptionDef::describe_contents_skel},
+      {"create_interface",      &POA_IR::ExceptionDef::create_interface_skel},
+      {"create_union",  &POA_IR::ExceptionDef::create_union_skel},
+      {"create_exception",      &POA_IR::ExceptionDef::create_exception_skel},
+      {"contents",      &POA_IR::ExceptionDef::contents_skel},
+      {"create_enum",   &POA_IR::ExceptionDef::create_enum_skel},
+      {"create_alias",  &POA_IR::ExceptionDef::create_alias_skel},
+      {"create_struct",         &POA_IR::ExceptionDef::create_struct_skel},
+      {"create_constant",       &POA_IR::ExceptionDef::create_constant_skel},
+      {"create_value_box",      &POA_IR::ExceptionDef::create_value_box_skel},
+    };
 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_set::TAO_ServerRequestInfo_IR_SequenceDef_bound_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & bound,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    bound_ (bound)
-{}
+  static const signed char lookup[] =
+    {
+       -1,  -1,  -1,  -6,  -3,   5,  -1,  -9,  -2, -57, -54,  11,  -1, -14,
+       -2,  12,  13, -55,  16,  17,  18,  19,  -1,  -1, -21,  -2,  20, -54,
+       23, -26,  -2,  24,  25, -55,  -1,  28,  29,  30,  -1,  -1,  -1,  31,
+       -1,  32,  -1,  -1,  33,  34,  35,  -1,  36,  37,
+    };
 
-Dynamic::ParameterList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_bound = this->parameter_list_.length ();
-  this->parameter_list_.length (length_bound + 1);
-  this->parameter_list_[length_bound].argument <<= bound_;
-  this->parameter_list_[length_bound].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      unsigned int key = hash (str, len);
 
-Dynamic::ExceptionList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          int slot = lookup[key];
 
-CORBA::Any * 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_bound_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
+          if (slot >= 0 && slot < MAX_HASH_VALUE)
+            {
+              const char *s = wordlist[slot].opname_;
 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+                return &wordlist[slot];
+            }
+          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
+            return 0;
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
 
-Dynamic::ParameterList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
+            }
+        }
+    }
   return 0;
 }
+/* ending time is 11:23:10 */
+static TAO_IR_ExceptionDef_Perfect_Hash_OpTable tao_IR_ExceptionDef_optable;
 
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
 
-  Dynamic::ExceptionList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+// Factory function Implementation.
+POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker *POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::the_TAO_ExceptionDef_Strategized_Proxy_Broker (void)
 {
-  // Generate the exception list on demand
-  return 0;
+  static POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
 }
 
-CORBA::Any * 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::_TAO_ExceptionDef_Strategized_Proxy_Broker (void)
 {
-  // Generate the result on demand
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
   
-  return &this->result_val_;
 }
 
-void 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_get::result (CORBA::TypeCode_ptr result)
+POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::~_TAO_ExceptionDef_Strategized_Proxy_Broker (void)
 {
-  // update the result 
-   this->result_ = result;
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
+  
 }
 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
+_TAO_ExceptionDef_Proxy_Impl&
+POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ExceptionDef *object,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the result on demand
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
+  
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
+  
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
+  
+  return *this->proxy_cache_[strategy];
   
-  return &this->result_val_;
 }
 
 void 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_get::result (IR::IDLType_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_set::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr element_type_def,
-    CORBA::Environment &
+POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    element_type_def_ (element_type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_element_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_element_type_def + 1);
-  this->parameter_list_[length_element_type_def].argument <<=  this->element_type_def_;
-  
-  this->parameter_list_[length_element_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::SequenceDef::TAO_ServerRequestInfo_IR_SequenceDef_element_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ArrayDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:21 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ArrayDef_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_ArrayDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
-{
-  static const unsigned char asso_values[] =
-    {
-#if defined (ACE_MVS)
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
-     22, 22,  0,  0,  0, 22,  0, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22,  5, 22, 22, 22, 22,  0, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22,
-#else
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22,  0, 22,  0, 22, 22,
-      0,  0,  0, 22,  0, 22, 22, 22, 22, 22,
-     22, 22, 22, 22, 22, 22,  5, 22, 22, 22,
-     22,  0, 22, 22, 22, 22, 22, 22,
-#endif /* ACE_MVS */
-    };
-  return len + asso_values[str[len - 1]] + asso_values[str[0]];
-}
-
-const class TAO_operation_db_entry *
-TAO_IR_ArrayDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
-{
-  enum
-    {
-      TOTAL_KEYWORDS = 10,
-      MIN_WORD_LENGTH = 5,
-      MAX_WORD_LENGTH = 21,
-      MIN_HASH_VALUE = 5,
-      MAX_HASH_VALUE = 21,
-      HASH_VALUE_RANGE = 17,
-      DUPLICATES = 3
-    };
-
-  static const class TAO_operation_db_entry  wordlist[] =
-    {
-      {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::ArrayDef::_is_a_skel},
-      {"destroy", 	&POA_IR::ArrayDef::destroy_skel},
-      {"_get_type", 	&POA_IR::ArrayDef::_get_type_skel},
-      {"_get_length", 	&POA_IR::ArrayDef::_get_length_skel},
-      {"_set_length", 	&POA_IR::ArrayDef::_set_length_skel},
-      {"_get_def_kind", 	&POA_IR::ArrayDef::_get_def_kind_skel},
-      {"_get_element_type", 	&POA_IR::ArrayDef::_get_element_type_skel},
-      {"_non_existent",  &POA_IR::ArrayDef::_non_existent_skel},
-      {"_get_element_type_def", 	&POA_IR::ArrayDef::_get_element_type_def_skel},
-      {"_set_element_type_def", 	&POA_IR::ArrayDef::_set_element_type_def_skel},
-    };
-
-  static const signed char lookup[] =
-    {
-       -1,  -1,  -1,  -8,  -2,   5,  -1,   6,  -1,   7,  -1, -29,  -1,  10, 
-       -1,  -1,  -1,  11,  12, -13,  -2, -23, 
-    };
-
-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
-    {
-      unsigned int key = hash (str, len);
-
-      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
-        {
-          int slot = lookup[key];
-
-          if (slot >= 0 && slot < MAX_HASH_VALUE)
-            {
-              const char *s = wordlist[slot].opname_;
-
-              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-                return &wordlist[slot];
-            }
-          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
-            return 0;
-          else
-            {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
-
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
-            }
-        }
-    }
-  return 0;
-}
-/* ending time is 10:26:21 */
-static TAO_IR_ArrayDef_Perfect_Hash_OpTable tao_IR_ArrayDef_optable;
-
-
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
-
-// Factory function Implementation.
-POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker *POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::the_TAO_ArrayDef_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
-}
-
-POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::_TAO_ArrayDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
-
-POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::~_TAO_ArrayDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
-}
-
-IR::_TAO_ArrayDef_Proxy_Impl&
-POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ArrayDef *object,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
-}
-
-void 
-POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
   
   if (this->proxy_cache_[strategy] == 0)
     {
@@ -18034,7 +12466,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl,
+              _TAO_ExceptionDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -18044,7 +12476,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ArrayDef_Remote_Proxy_Impl,
+              _TAO_ExceptionDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -18061,38 +12493,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ArrayDef_Proxy_Broker *
-IR__TAO_ArrayDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ExceptionDef_Proxy_Broker *
+_TAO_ExceptionDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ArrayDef_Strategized_Proxy_Broker::the_TAO_ArrayDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::the_TAO_ExceptionDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ArrayDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ExceptionDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ArrayDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ArrayDef_Proxy_Broker_Factory_function;
+  _TAO_ExceptionDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ExceptionDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ArrayDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ArrayDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ArrayDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_ExceptionDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ExceptionDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ExceptionDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::_TAO_ArrayDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::_TAO_ExceptionDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::~_TAO_ExceptionDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::ULong POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::length (
+CORBA::TypeCode_ptr POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::type (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -18100,7 +12535,7 @@
     CORBA::SystemException
   ))
 {
-    CORBA::ULong _tao_retval = 0;
+    CORBA::TypeCode_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -18108,538 +12543,232 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "length",
+      "type",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN  (_tao_retval);
+      ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::ArrayDef_ptr,
+      POA_IR::ExceptionDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ArrayDef:1.0"
+          "IDL:omg.org/IR/ExceptionDef:1.0"
         )
-    )->length (
+    )->type (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::length (
+IR::StructMemberSeq * POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::members (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::ULong length,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
+    IR_StructMemberSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "length",
+      "members",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ArrayDef_ptr,
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ExceptionDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ArrayDef:1.0"
+          "IDL:omg.org/IR/ExceptionDef:1.0"
         )
-    )->length (
-        length,
+    )->members (
         ACE_TRY_ENV
       );
-  return;
 }
 
-CORBA::TypeCode_ptr POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::element_type (
+void POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::members (
     CORBA_Object *_collocated_tao_target_,
+    const IR_StructMemberSeq & members,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    CORBA::TypeCode_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "element_type",
+      "members",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ArrayDef_ptr,
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ExceptionDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ArrayDef:1.0"
+          "IDL:omg.org/IR/ExceptionDef:1.0"
         )
-    )->element_type (
+    )->members (
+        members,
         ACE_TRY_ENV
       );
+  return;
 }
 
-IR::IDLType_ptr POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::element_type_def (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
+
+// skeleton constructor
+POA_IR::ExceptionDef::ExceptionDef (void)
 {
-    IR::IDLType_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "element_type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ArrayDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ArrayDef:1.0"
-        )
-    )->element_type_def (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ArrayDef_ThruPOA_Proxy_Impl::element_type_def (
-    CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr element_type_def,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "element_type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ArrayDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ArrayDef:1.0"
-        )
-    )->element_type_def (
-        element_type_def,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::ArrayDef::ArrayDef (void)
-{
-  this->optable_ = &tao_IR_ArrayDef_optable;
+  this->optable_ = &tao_IR_ExceptionDef_optable;
 }
 
 // copy ctor
-POA_IR::ArrayDef::ArrayDef (const ArrayDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
+POA_IR::ExceptionDef::ExceptionDef (const ExceptionDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::ArrayDef::~ArrayDef (void)
-{
-}
-
-void POA_IR::ArrayDef::_get_length_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
-
-  CORBA::ULong _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_get ri (
-      "_get_length",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->length (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::ULong _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ArrayDef::_set_length_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
+POA_IR::ExceptionDef::~ExceptionDef (void)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::ULong length;
-  if (!(
-    (_tao_in >> length)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_set ri (
-      "_set_length",
-      _tao_server_request.service_info (),
-      length,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->length (
-          length,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
 }
 
-void POA_IR::ArrayDef::_get_element_type_skel (
+void POA_IR::ExceptionDef::_get_type_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
+  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *)_tao_object_reference;
 
   CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get ri (
-      "_get_element_type",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->type (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->element_type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ArrayDef::_get_element_type_def_skel (
+void POA_IR::ExceptionDef::_get_members_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
+  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *)_tao_object_reference;
 
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get ri (
-      "_get_element_type_def",
-      _tao_server_request.service_info (),
+  IR_StructMemberSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->members (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->element_type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ArrayDef::_set_element_type_def_skel (
+void POA_IR::ExceptionDef::_set_members_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *)_tao_object_reference;
+  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var element_type_def;
+  IR_StructMemberSeq members;
   if (!(
-    (_tao_in >> element_type_def.out ())
+    (_tao_in >> members)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_set ri (
-      "_set_element_type_def",
-      _tao_server_request.service_info (),
-      element_type_def.in (),
+  _tao_impl->members (
+      members,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->element_type_def (
-          element_type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::ArrayDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ExceptionDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *) _tao_object_reference;
+  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::ArrayDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::ExceptionDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::ArrayDef *_tao_impl = (POA_IR::ArrayDef *) _tao_object_reference;
+  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::ArrayDef::_is_a (
+CORBA::Boolean POA_IR::ExceptionDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ArrayDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ExceptionDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
       return 1;
@@ -18647,14 +12776,16 @@
       return 0;
 }
 
-void* POA_IR::ArrayDef::_downcast (
+void* POA_IR::ExceptionDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ArrayDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ArrayDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
-    return ACE_static_cast (POA_IR::IDLType_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ExceptionDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ExceptionDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
+    return ACE_static_cast (POA_IR::Container_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
@@ -18662,363 +12793,121 @@
   return 0;
 }
 
-void POA_IR::ArrayDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::ExceptionDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::ArrayDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/ArrayDef:1.0";
-}
-
-IR::ArrayDef*
-POA_IR::ArrayDef::_this (CORBA_Environment &ACE_TRY_ENV)
-{
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::ArrayDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_get::TAO_ServerRequestInfo_IR_ArrayDef_length_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+const char* POA_IR::ExceptionDef::_interface_repository_id (void) const
 {
-  // Generate the exception list on demand
-  return 0;
+  return "IDL:omg.org/IR/ExceptionDef:1.0";
 }
 
-CORBA::Any * 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+class TAO_IR_AttributeDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_get::result (CORBA::ULong result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_set::TAO_ServerRequestInfo_IR_ArrayDef_length_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::ULong & length,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    length_ (length)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_length = this->parameter_list_.length ();
-  this->parameter_list_.length (length_length + 1);
-  this->parameter_list_[length_length].argument <<= length_;
-  this->parameter_list_[length_length].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_length_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_get::result (IR::IDLType_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_set::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr element_type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    element_type_def_ (element_type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_element_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_element_type_def + 1);
-  this->parameter_list_[length_element_type_def].argument <<=  this->element_type_def_;
-  
-  this->parameter_list_[length_element_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ArrayDef::TAO_ServerRequestInfo_IR_ArrayDef_element_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ExceptionDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:21 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ExceptionDef_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_ExceptionDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:10 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_AttributeDef_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_AttributeDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52,  0,
-     52, 20,  3,  0, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 10, 15,  5,
-     52, 10, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 15, 15, 52, 52, 52, 15,  5, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37,  0,  0, 10, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 15, 37, 37, 37, 37, 10, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37,
 #else
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
-     52, 52, 52, 52, 52,  0, 52,  0, 52, 20,
-      3,  0, 52, 52, 52, 52, 52, 52, 10, 15,
-      5, 52, 10, 52, 52, 15, 15, 52, 52, 52,
-     15,  5, 52, 52, 52, 52, 52, 52,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
+      0,  0, 10, 37, 37, 37, 37, 37, 37,  0,
+      0, 37, 37, 37, 37, 37, 15, 37, 37, 37,
+     37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_ExceptionDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_AttributeDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 33,
+      TOTAL_KEYWORDS = 20,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
-      MIN_HASH_VALUE = 5,
-      MAX_HASH_VALUE = 51,
-      HASH_VALUE_RANGE = 47,
-      DUPLICATES = 7
+      MIN_HASH_VALUE = 4,
+      MAX_HASH_VALUE = 36,
+      HASH_VALUE_RANGE = 33,
+      DUPLICATES = 8
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
-      {"",0},{"",0},{"",0},{"",0},{"",0},
-      {"_is_a",  &POA_IR::ExceptionDef::_is_a_skel},
-      {"_get_type", 	&POA_IR::ExceptionDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::ExceptionDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::ExceptionDef::_get_name_skel},
-      {"_get_id", 	&POA_IR::ExceptionDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ExceptionDef::_set_id_skel},
-      {"describe", 	&POA_IR::ExceptionDef::describe_skel},
-      {"destroy", 	&POA_IR::ExceptionDef::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::ExceptionDef::_get_def_kind_skel},
-      {"_get_version", 	&POA_IR::ExceptionDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ExceptionDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::ExceptionDef::_get_absolute_name_skel},
-      {"move", 	&POA_IR::ExceptionDef::move_skel},
-      {"_get_defined_in", 	&POA_IR::ExceptionDef::_get_defined_in_skel},
-      {"lookup_name", 	&POA_IR::ExceptionDef::lookup_name_skel},
-      {"lookup", 	&POA_IR::ExceptionDef::lookup_skel},
-      {"_get_members", 	&POA_IR::ExceptionDef::_get_members_skel},
-      {"_set_members", 	&POA_IR::ExceptionDef::_set_members_skel},
-      {"_non_existent",  &POA_IR::ExceptionDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ExceptionDef::_get_containing_repository_skel},
-      {"create_value", 	&POA_IR::ExceptionDef::create_value_skel},
-      {"create_module", 	&POA_IR::ExceptionDef::create_module_skel},
-      {"create_native", 	&POA_IR::ExceptionDef::create_native_skel},
-      {"describe_contents", 	&POA_IR::ExceptionDef::describe_contents_skel},
-      {"create_interface", 	&POA_IR::ExceptionDef::create_interface_skel},
-      {"create_union", 	&POA_IR::ExceptionDef::create_union_skel},
-      {"create_exception", 	&POA_IR::ExceptionDef::create_exception_skel},
-      {"contents", 	&POA_IR::ExceptionDef::contents_skel},
-      {"create_enum", 	&POA_IR::ExceptionDef::create_enum_skel},
-      {"create_alias", 	&POA_IR::ExceptionDef::create_alias_skel},
-      {"create_struct", 	&POA_IR::ExceptionDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::ExceptionDef::create_constant_skel},
-      {"create_value_box", 	&POA_IR::ExceptionDef::create_value_box_skel},
+      {"",0},{"",0},{"",0},{"",0},
+      {"move",  &POA_IR::AttributeDef::move_skel},
+      {"_is_a",  &POA_IR::AttributeDef::_is_a_skel},
+      {"_get_id",       &POA_IR::AttributeDef::_get_id_skel},
+      {"_set_id",       &POA_IR::AttributeDef::_set_id_skel},
+      {"describe",      &POA_IR::AttributeDef::describe_skel},
+      {"_get_type",     &POA_IR::AttributeDef::_get_type_skel},
+      {"_set_name",     &POA_IR::AttributeDef::_set_name_skel},
+      {"_get_name",     &POA_IR::AttributeDef::_get_name_skel},
+      {"_set_mode",     &POA_IR::AttributeDef::_set_mode_skel},
+      {"_get_mode",     &POA_IR::AttributeDef::_get_mode_skel},
+      {"_get_version",  &POA_IR::AttributeDef::_get_version_skel},
+      {"_set_version",  &POA_IR::AttributeDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::AttributeDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::AttributeDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::AttributeDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::AttributeDef::_get_absolute_name_skel},
+      {"_get_type_def",         &POA_IR::AttributeDef::_get_type_def_skel},
+      {"_set_type_def",         &POA_IR::AttributeDef::_set_type_def_skel},
+      {"_non_existent",  &POA_IR::AttributeDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::AttributeDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -1,  -1,  -1,  -6,  -3,   5,  -1,  -9,  -2, -57, -54,  11,  -1, -14, 
-       -2,  12,  13, -55,  16,  17,  18,  19,  -1,  -1, -21,  -2,  20, -54, 
-       23, -26,  -2,  24,  25, -55,  -1,  28,  29,  30,  -1,  -1,  -1,  31, 
-       -1,  32,  -1,  -1,  33,  34,  35,  -1,  36,  37, 
+       -6,  -2,  -9,  -5,   4,   5,  -1, -43,   8, -43, -14,  -2, -38,  16,
+       -1,  17,  -1,  18,  19,  -1,  -1, -20,  -2, -38,  -1,  -1,  -1,  -1,
+       22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -19052,38 +12941,37 @@
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_ExceptionDef_Perfect_Hash_OpTable tao_IR_ExceptionDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_AttributeDef_Perfect_Hash_OpTable tao_IR_AttributeDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker *POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::the_TAO_ExceptionDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker *POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::the_TAO_AttributeDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::_TAO_ExceptionDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::_TAO_AttributeDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::~_TAO_ExceptionDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::~_TAO_AttributeDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_ExceptionDef_Proxy_Impl&
-POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ExceptionDef *object,
+_TAO_AttributeDef_Proxy_Impl&
+POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::select_proxy (
+    IR_AttributeDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -19101,7 +12989,7 @@
 }
 
 void 
-POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -19115,7 +13003,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl,
+              _TAO_AttributeDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -19125,7 +13013,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ExceptionDef_Remote_Proxy_Impl,
+              _TAO_AttributeDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -19142,38 +13030,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ExceptionDef_Proxy_Broker *
-IR__TAO_ExceptionDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_AttributeDef_Proxy_Broker *
+_TAO_AttributeDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ExceptionDef_Strategized_Proxy_Broker::the_TAO_ExceptionDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::the_TAO_AttributeDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ExceptionDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_AttributeDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ExceptionDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ExceptionDef_Proxy_Broker_Factory_function;
+  _TAO_AttributeDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_AttributeDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ExceptionDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ExceptionDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ExceptionDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_AttributeDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_AttributeDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_AttributeDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::_TAO_ExceptionDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::_TAO_AttributeDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::~_TAO_AttributeDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::TypeCode_ptr POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::type (
+CORBA::TypeCode_ptr POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::type (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -19195,16 +13086,16 @@
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::ExceptionDef_ptr,
+      POA_IR::AttributeDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ExceptionDef:1.0"
+          "IDL:omg.org/IR/AttributeDef:1.0"
         )
     )->type (
         ACE_TRY_ENV
       );
 }
 
-IR::StructMemberSeq * POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::members (
+IR::IDLType_ptr POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::type_def (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -19212,7 +13103,7 @@
     CORBA::SystemException
   ))
 {
-    IR::StructMemberSeq_var _tao_retval;
+    IR_IDLType_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -19220,24 +13111,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "members",
+      "type_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::ExceptionDef_ptr,
+      POA_IR::AttributeDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ExceptionDef:1.0"
+          "IDL:omg.org/IR/AttributeDef:1.0"
         )
-    )->members (
+    )->type_def (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_ExceptionDef_ThruPOA_Proxy_Impl::members (
+void POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::type_def (
     CORBA_Object *_collocated_tao_target_,
-    const IR::StructMemberSeq & members,
+    IR_IDLType_ptr type_def,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -19250,289 +13141,284 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "members",
+      "type_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::ExceptionDef_ptr,
+      POA_IR::AttributeDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ExceptionDef:1.0"
+          "IDL:omg.org/IR/AttributeDef:1.0"
         )
-    )->members (
-        members,
+    )->type_def (
+        type_def,
         ACE_TRY_ENV
       );
   return;
 }
 
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::ExceptionDef::ExceptionDef (void)
-{
-  this->optable_ = &tao_IR_ExceptionDef_optable;
-}
-
-// copy ctor
-POA_IR::ExceptionDef::ExceptionDef (const ExceptionDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::ExceptionDef::~ExceptionDef (void)
-{
-}
-
-void POA_IR::ExceptionDef::_get_type_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::AttributeMode POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::mode (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *)_tao_object_reference;
+    IR_AttributeMode _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "mode",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::AttributeDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/AttributeDef:1.0"
+        )
+    )->mode (
+        ACE_TRY_ENV
+      );
+}
 
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+void POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::mode (
+    CORBA_Object *_collocated_tao_target_,
+    IR_AttributeMode mode,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_type_get ri (
-      "_get_type",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "mode",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::AttributeDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/AttributeDef:1.0"
+        )
+    )->mode (
+        mode,
+        ACE_TRY_ENV
+      );
+  return;
+}
+
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
+
+// skeleton constructor
+POA_IR::AttributeDef::AttributeDef (void)
+{
+  this->optable_ = &tao_IR_AttributeDef_optable;
+}
 
-      _tao_retval = _tao_impl->type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
+// copy ctor
+POA_IR::AttributeDef::AttributeDef (const AttributeDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
 
-TAO_INTERCEPTOR_CHECK;
+// skeleton destructor
+POA_IR::AttributeDef::~AttributeDef (void)
+{
+}
+
+void POA_IR::AttributeDef::_get_type_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
+
+  CORBA::TypeCode_var _tao_retval;
+
+  _tao_retval = _tao_impl->type (
+      ACE_TRY_ENV
+    );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ExceptionDef::_get_members_skel (
+void POA_IR::AttributeDef::_get_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *)_tao_object_reference;
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
 
-  IR::StructMemberSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->type_def (
+      ACE_TRY_ENV
     );
-  
-  POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_get ri (
-      "_get_members",
-      _tao_server_request.service_info (),
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::AttributeDef::_set_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
+
+  IR_IDLType_var type_def;
+  if (!(
+    (_tao_in >> type_def.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->type_def (
+      type_def.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->members (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::StructMemberSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::AttributeDef::_get_mode_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
 
-TAO_INTERCEPTOR_CHECK;
+  IR_AttributeMode _tao_retval;
+
+  _tao_retval = _tao_impl->mode (
+      ACE_TRY_ENV
+    );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
-    (_tao_out << _tao_retval.in ())
+    (_tao_out << _tao_retval)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ExceptionDef::_set_members_skel (
+void POA_IR::AttributeDef::_set_mode_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *)_tao_object_reference;
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::StructMemberSeq members;
+  IR_AttributeMode mode;
   if (!(
-    (_tao_in >> members)
+    (_tao_in >> mode)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_set ri (
-      "_set_members",
-      _tao_server_request.service_info (),
-      members,
+
+  _tao_impl->mode (
+      mode,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->members (
-          members,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::ExceptionDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::AttributeDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *) _tao_object_reference;
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::ExceptionDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::AttributeDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::ExceptionDef *_tao_impl = (POA_IR::ExceptionDef *) _tao_object_reference;
+  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::ExceptionDef::_is_a (
+CORBA::Boolean POA_IR::AttributeDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ExceptionDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/AttributeDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
       return 1;
@@ -19540,16 +13426,14 @@
       return 0;
 }
 
-void* POA_IR::ExceptionDef::_downcast (
+void* POA_IR::AttributeDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ExceptionDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ExceptionDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/AttributeDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::AttributeDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
-    return ACE_static_cast (POA_IR::Container_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
@@ -19557,18 +13441,18 @@
   return 0;
 }
 
-void POA_IR::ExceptionDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::AttributeDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::ExceptionDef::_interface_repository_id (void) const
+const char* POA_IR::AttributeDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/ExceptionDef:1.0";
+  return "IDL:omg.org/IR/AttributeDef:1.0";
 }
 
-IR::ExceptionDef*
-POA_IR::ExceptionDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::AttributeDef*
+POA_IR::AttributeDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -19581,149 +13465,21 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::ExceptionDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_type_get::TAO_ServerRequestInfo_IR_ExceptionDef_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_get::TAO_ServerRequestInfo_IR_ExceptionDef_members_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  return IR_AttributeDef::_unchecked_narrow (obj.in ());
 }
 
-void 
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_get::result (IR::StructMemberSeq * result)
+class TAO_IR_OperationDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_set::TAO_ServerRequestInfo_IR_ExceptionDef_members_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::StructMemberSeq & members,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    members_ (members)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_members = this->parameter_list_.length ();
-  this->parameter_list_.length (length_members + 1);
-  this->parameter_list_[length_members].argument <<=  this->members_;
-  
-  this->parameter_list_[length_members].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ExceptionDef::TAO_ServerRequestInfo_IR_ExceptionDef_members_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_AttributeDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:21 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_AttributeDef_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_AttributeDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:10 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_OperationDef_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_OperationDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
@@ -19741,10 +13497,10 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0, 10, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
+     37, 37, 15,  0, 10, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37,  0,  5,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 15, 37, 37, 37, 37, 10, 37,
+     37, 37,  0, 20, 37, 37, 37, 37, 10, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
@@ -19765,8 +13521,8 @@
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
      37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0, 10, 37, 37, 37, 37, 37, 37,  0,
-      0, 37, 37, 37, 37, 37, 15, 37, 37, 37,
+     15,  0, 10, 37, 37, 37, 37, 37, 37,  0,
+      5, 37, 37, 37, 37,  0, 20, 37, 37, 37,
      37, 10, 37, 37, 37, 37, 37, 37,
 #endif /* ACE_MVS */
     };
@@ -19774,49 +13530,48 @@
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_AttributeDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_OperationDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 20,
+      TOTAL_KEYWORDS = 26,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
       MAX_HASH_VALUE = 36,
       HASH_VALUE_RANGE = 33,
-      DUPLICATES = 8
+      DUPLICATES = 10
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::AttributeDef::move_skel},
-      {"_is_a",  &POA_IR::AttributeDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::AttributeDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::AttributeDef::_set_id_skel},
-      {"describe", 	&POA_IR::AttributeDef::describe_skel},
-      {"_get_type", 	&POA_IR::AttributeDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::AttributeDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::AttributeDef::_get_name_skel},
-      {"_set_mode", 	&POA_IR::AttributeDef::_set_mode_skel},
-      {"_get_mode", 	&POA_IR::AttributeDef::_get_mode_skel},
-      {"_get_version", 	&POA_IR::AttributeDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::AttributeDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::AttributeDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::AttributeDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::AttributeDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::AttributeDef::_get_absolute_name_skel},
-      {"_get_type_def", 	&POA_IR::AttributeDef::_get_type_def_skel},
-      {"_set_type_def", 	&POA_IR::AttributeDef::_set_type_def_skel},
-      {"_non_existent",  &POA_IR::AttributeDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::AttributeDef::_get_containing_repository_skel},
-    };
-
-  static const signed char lookup[] =
-    {
-       -6,  -2,  -9,  -5,   4,   5,  -1, -43,   8, -43, -14,  -2, -38,  16, 
-       -1,  17,  -1,  18,  19,  -1,  -1, -20,  -2, -38,  -1,  -1,  -1,  -1, 
-       22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23, 
+      {"move",  &POA_IR::OperationDef::move_skel},
+      {"_is_a",  &POA_IR::OperationDef::_is_a_skel},
+      {"_get_mode",     &POA_IR::OperationDef::_get_mode_skel},
+      {"_set_name",     &POA_IR::OperationDef::_set_name_skel},
+      {"_get_name",     &POA_IR::OperationDef::_get_name_skel},
+      {"_set_mode",     &POA_IR::OperationDef::_set_mode_skel},
+      {"_get_params",   &POA_IR::OperationDef::_get_params_skel},
+      {"_set_params",   &POA_IR::OperationDef::_set_params_skel},
+      {"_get_contexts",         &POA_IR::OperationDef::_get_contexts_skel},
+      {"_set_contexts",         &POA_IR::OperationDef::_set_contexts_skel},
+      {"_get_exceptions",       &POA_IR::OperationDef::_get_exceptions_skel},
+      {"_set_exceptions",       &POA_IR::OperationDef::_set_exceptions_skel},
+      {"_get_version",  &POA_IR::OperationDef::_get_version_skel},
+      {"_set_version",  &POA_IR::OperationDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::OperationDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::OperationDef::_get_defined_in_skel},
+      {"_get_id",       &POA_IR::OperationDef::_get_id_skel},
+      {"_set_id",       &POA_IR::OperationDef::_set_id_skel},
+      {"describe",      &POA_IR::OperationDef::describe_skel},
+      {"_get_result_def",       &POA_IR::OperationDef::_get_result_def_skel},
+      {"_set_result_def",       &POA_IR::OperationDef::_set_result_def_skel},
+      {"_get_def_kind",         &POA_IR::OperationDef::_get_def_kind_skel},
+      {"_get_result",   &POA_IR::OperationDef::_get_result_skel},
+      {"destroy",       &POA_IR::OperationDef::destroy_skel},
+      {"_non_existent",  &POA_IR::OperationDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::OperationDef::_get_containing_repository_skel},
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -19825,63 +13580,118 @@
 
       if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
         {
-          int slot = lookup[key];
-
-          if (slot >= 0 && slot < MAX_HASH_VALUE)
-            {
-              const char *s = wordlist[slot].opname_;
-
-              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-                return &wordlist[slot];
-            }
-          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
-            return 0;
-          else
             {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+              const class TAO_operation_db_entry   *resword;
 
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
+              switch (key)
+                {
+                case   4:
+                  resword = &wordlist[4]; break;
+                case   5:
+                  resword = &wordlist[5]; break;
+                case   9:
+                  resword = &wordlist[6];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[7];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[8];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[9];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  11:
+                  resword = &wordlist[10];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[11];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  13:
+                  resword = &wordlist[12];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[13];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  15:
+                  resword = &wordlist[14];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[15];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  17:
+                  resword = &wordlist[16];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[17];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  18:
+                  resword = &wordlist[18]; break;
+                case  20:
+                  resword = &wordlist[19]; break;
+                case  22:
+                  resword = &wordlist[20];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[21];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  23:
+                  resword = &wordlist[22]; break;
+                case  25:
+                  resword = &wordlist[23];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  resword = &wordlist[24];
+                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
+                  return 0;
+                case  28:
+                  resword = &wordlist[25]; break;
+                case  31:
+                  resword = &wordlist[26]; break;
+                case  32:
+                  resword = &wordlist[27]; break;
+                case  33:
+                  resword = &wordlist[28]; break;
+                case  36:
+                  resword = &wordlist[29]; break;
+                default: return 0;
+                }
+              if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1))
+                return resword;
+              return 0;
             }
         }
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_AttributeDef_Perfect_Hash_OpTable tao_IR_AttributeDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_OperationDef_Perfect_Hash_OpTable tao_IR_OperationDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker *POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::the_TAO_AttributeDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker *POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::the_TAO_OperationDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::_TAO_AttributeDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::_TAO_OperationDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::~_TAO_AttributeDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::~_TAO_OperationDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_AttributeDef_Proxy_Impl&
-POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::AttributeDef *object,
+_TAO_OperationDef_Proxy_Impl&
+POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::select_proxy (
+    IR_OperationDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -19899,7 +13709,7 @@
 }
 
 void 
-POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -19913,7 +13723,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl,
+              _TAO_OperationDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -19923,7 +13733,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_AttributeDef_Remote_Proxy_Impl,
+              _TAO_OperationDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -19940,38 +13750,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_AttributeDef_Proxy_Broker *
-IR__TAO_AttributeDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_OperationDef_Proxy_Broker *
+_TAO_OperationDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_AttributeDef_Strategized_Proxy_Broker::the_TAO_AttributeDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::the_TAO_OperationDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_AttributeDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_OperationDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_AttributeDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_AttributeDef_Proxy_Broker_Factory_function;
+  _TAO_OperationDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_OperationDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_AttributeDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_AttributeDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_AttributeDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_OperationDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_OperationDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_OperationDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::_TAO_AttributeDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::_TAO_OperationDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::~_TAO_OperationDef_ThruPOA_Proxy_Impl (void)
 {}
 
 // ThruPOA Implementation of the IDL interface methods
 
-CORBA::TypeCode_ptr POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::type (
+CORBA::TypeCode_ptr POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::result (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -19987,22 +13800,22 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "type",
+      "result",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::AttributeDef_ptr,
+      POA_IR::OperationDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AttributeDef:1.0"
+          "IDL:omg.org/IR/OperationDef:1.0"
         )
-    )->type (
+    )->result (
         ACE_TRY_ENV
       );
 }
 
-IR::IDLType_ptr POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::type_def (
+IR::IDLType_ptr POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::result_def (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -20010,7 +13823,7 @@
     CORBA::SystemException
   ))
 {
-    IR::IDLType_var _tao_retval;
+    IR_IDLType_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -20018,24 +13831,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "type_def",
+      "result_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::AttributeDef_ptr,
+      POA_IR::OperationDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AttributeDef:1.0"
+          "IDL:omg.org/IR/OperationDef:1.0"
         )
-    )->type_def (
+    )->result_def (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::type_def (
+void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::result_def (
     CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr type_def,
+    IR_IDLType_ptr result_def,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -20048,24 +13861,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "type_def",
+      "result_def",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::AttributeDef_ptr,
+      POA_IR::OperationDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AttributeDef:1.0"
+          "IDL:omg.org/IR/OperationDef:1.0"
         )
-    )->type_def (
-        type_def,
+    )->result_def (
+        result_def,
         ACE_TRY_ENV
       );
   return;
 }
 
-IR::AttributeMode POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::mode (
+IR::ParDescriptionSeq * POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::params (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -20073,7 +13886,7 @@
     CORBA::SystemException
   ))
 {
-    IR::AttributeMode _tao_retval;
+    IR_ParDescriptionSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -20081,24 +13894,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "mode",
+      "params",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN  (_tao_retval);
+      ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::AttributeDef_ptr,
+      POA_IR::OperationDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AttributeDef:1.0"
+          "IDL:omg.org/IR/OperationDef:1.0"
         )
-    )->mode (
+    )->params (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_AttributeDef_ThruPOA_Proxy_Impl::mode (
+void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::params (
     CORBA_Object *_collocated_tao_target_,
-    IR::AttributeMode mode,
+    const IR_ParDescriptionSeq & params,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -20111,413 +13924,561 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "mode",
+      "params",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::AttributeDef_ptr,
+      POA_IR::OperationDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/AttributeDef:1.0"
+          "IDL:omg.org/IR/OperationDef:1.0"
         )
-    )->mode (
-        mode,
+    )->params (
+        params,
         ACE_TRY_ENV
       );
   return;
 }
 
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::AttributeDef::AttributeDef (void)
-{
-  this->optable_ = &tao_IR_AttributeDef_optable;
-}
-
-// copy ctor
-POA_IR::AttributeDef::AttributeDef (const AttributeDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::AttributeDef::~AttributeDef (void)
-{
-}
-
-void POA_IR::AttributeDef::_get_type_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::OperationMode POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::mode (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
-
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_OperationMode _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_get ri (
-      "_get_type",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "mode",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::OperationDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/OperationDef:1.0"
+        )
+    )->mode (
+        ACE_TRY_ENV
+      );
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
+void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::mode (
+    CORBA_Object *_collocated_tao_target_,
+    IR_OperationMode mode,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "mode",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::OperationDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/OperationDef:1.0"
+        )
+    )->mode (
+        mode,
+        ACE_TRY_ENV
+      );
+  return;
+}
 
+IR::ContextIdSeq * POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::contexts (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    IR_ContextIdSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "contexts",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::OperationDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/OperationDef:1.0"
+        )
+    )->contexts (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::AttributeDef::_get_type_def_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::contexts (
+    CORBA_Object *_collocated_tao_target_,
+    const IR_ContextIdSeq & contexts,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "contexts",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::OperationDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/OperationDef:1.0"
+        )
+    )->contexts (
+        contexts,
+        ACE_TRY_ENV
+      );
+  return;
+}
 
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+IR::ExceptionDefSeq * POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::exceptions (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    IR_ExceptionDefSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get ri (
-      "_get_type_def",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "exceptions",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::OperationDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/OperationDef:1.0"
+        )
+    )->exceptions (
+        ACE_TRY_ENV
+      );
+}
 
-      _tao_retval = _tao_impl->type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
+void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::exceptions (
+    CORBA_Object *_collocated_tao_target_,
+    const IR_ExceptionDefSeq & exceptions,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "exceptions",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::OperationDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/OperationDef:1.0"
+        )
+    )->exceptions (
+        exceptions,
+        ACE_TRY_ENV
+      );
+  return;
+}
 
-TAO_INTERCEPTOR_CHECK;
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+// skeleton constructor
+POA_IR::OperationDef::OperationDef (void)
+{
+  this->optable_ = &tao_IR_OperationDef_optable;
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+// copy ctor
+POA_IR::OperationDef::OperationDef (const OperationDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
 
+// skeleton destructor
+POA_IR::OperationDef::~OperationDef (void)
+{
 }
 
-void POA_IR::AttributeDef::_set_type_def_skel (
+void POA_IR::OperationDef::_get_result_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var type_def;
-  if (!(
-    (_tao_in >> type_def.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+  CORBA::TypeCode_var _tao_retval;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_set ri (
-      "_set_type_def",
-      _tao_server_request.service_info (),
-      type_def.in (),
+  _tao_retval = _tao_impl->result (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->type_def (
-          type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::AttributeDef::_get_mode_skel (
+void POA_IR::OperationDef::_get_result_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
 
-  IR::AttributeMode _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_get ri (
-      "_get_mode",
-      _tao_server_request.service_info (),
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->result_def (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->mode (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::AttributeMode _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
-    (_tao_out << _tao_retval)
+    (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::AttributeDef::_set_mode_skel (
+void POA_IR::OperationDef::_set_result_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *)_tao_object_reference;
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::AttributeMode mode;
+  IR_IDLType_var result_def;
   if (!(
-    (_tao_in >> mode)
+    (_tao_in >> result_def.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_set ri (
-      "_set_mode",
-      _tao_server_request.service_info (),
-      mode,
+  _tao_impl->result_def (
+      result_def.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->mode (
-          mode,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::AttributeDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::OperationDef::_get_params_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_ParDescriptionSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->params (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::OperationDef::_set_params_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_ParDescriptionSeq params;
+  if (!(
+    (_tao_in >> params)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->params (
+      params,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::OperationDef::_get_mode_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_OperationMode _tao_retval;
+
+  _tao_retval = _tao_impl->mode (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::OperationDef::_set_mode_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_OperationMode mode;
+  if (!(
+    (_tao_in >> mode)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->mode (
+      mode,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::OperationDef::_get_contexts_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_ContextIdSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->contexts (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::OperationDef::_set_contexts_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_ContextIdSeq contexts;
+  if (!(
+    (_tao_in >> contexts)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->contexts (
+      contexts,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::OperationDef::_get_exceptions_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_ExceptionDefSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->exceptions (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+}
+
+void POA_IR::OperationDef::_set_exceptions_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+
+  IR_ExceptionDefSeq exceptions;
+  if (!(
+    (_tao_in >> exceptions)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->exceptions (
+      exceptions,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::OperationDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *) _tao_object_reference;
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::AttributeDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::OperationDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::AttributeDef *_tao_impl = (POA_IR::AttributeDef *) _tao_object_reference;
+  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::AttributeDef::_is_a (
+CORBA::Boolean POA_IR::OperationDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/AttributeDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/OperationDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
@@ -20526,12 +14487,12 @@
       return 0;
 }
 
-void* POA_IR::AttributeDef::_downcast (
+void* POA_IR::OperationDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/AttributeDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::AttributeDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/OperationDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::OperationDef_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
@@ -20541,18 +14502,18 @@
   return 0;
 }
 
-void POA_IR::AttributeDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::OperationDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::AttributeDef::_interface_repository_id (void) const
+const char* POA_IR::OperationDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/AttributeDef:1.0";
+  return "IDL:omg.org/IR/OperationDef:1.0";
 }
 
-IR::AttributeDef*
-POA_IR::AttributeDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::OperationDef*
+POA_IR::OperationDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -20565,325 +14526,136 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::AttributeDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_get::TAO_ServerRequestInfo_IR_AttributeDef_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  return IR_OperationDef::_unchecked_narrow (obj.in ());
 }
 
-void 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_get::result (IR::IDLType_ptr result)
+class TAO_IR_InterfaceDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_set::TAO_ServerRequestInfo_IR_AttributeDef_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    type_def_ (type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type_def + 1);
-  this->parameter_list_[length_type_def].argument <<=  this->type_def_;
-  
-  this->parameter_list_[length_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_get::TAO_ServerRequestInfo_IR_AttributeDef_mode_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_get::result (IR::AttributeMode result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_set::TAO_ServerRequestInfo_IR_AttributeDef_mode_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::AttributeMode & mode,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    mode_ (mode)
-{}
-
-Dynamic::ParameterList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_mode = this->parameter_list_.length ();
-  this->parameter_list_.length (length_mode + 1);
-  this->parameter_list_[length_mode].argument <<=  this->mode_;
-  
-  this->parameter_list_[length_mode].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::AttributeDef::TAO_ServerRequestInfo_IR_AttributeDef_mode_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_OperationDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:21 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_OperationDef_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_OperationDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:10 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_InterfaceDef_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_InterfaceDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37, 15,  0, 10, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37,  0,  5,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37,  0, 20, 37, 37, 37, 37, 10, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66,  0,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66,  0,
+     66, 20,  8,  0, 66, 66, 66, 10, 66, 66,
+     66, 66, 66, 66, 66, 66, 66,  0,  0,  5,
+     66,  0, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 10, 30, 66, 66, 66, 20, 25, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66,
 #else
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-     15,  0, 10, 37, 37, 37, 37, 37, 37,  0,
-      5, 37, 37, 37, 37,  0, 20, 37, 37, 37,
-     37, 10, 37, 37, 37, 37, 37, 37,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
+     66, 66, 66, 66, 66,  0, 66,  0, 66, 20,
+      8,  0, 66, 66, 66, 10, 66, 66,  0,  0,
+      5, 66,  0, 66, 66, 10, 30, 66, 66, 66,
+     20, 25, 66, 66, 66, 66, 66, 66,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_OperationDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_InterfaceDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 26,
+      TOTAL_KEYWORDS = 40,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 36,
-      HASH_VALUE_RANGE = 33,
-      DUPLICATES = 10
+      MAX_HASH_VALUE = 65,
+      HASH_VALUE_RANGE = 62,
+      DUPLICATES = 11
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::OperationDef::move_skel},
-      {"_is_a",  &POA_IR::OperationDef::_is_a_skel},
-      {"_get_mode", 	&POA_IR::OperationDef::_get_mode_skel},
-      {"_set_name", 	&POA_IR::OperationDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::OperationDef::_get_name_skel},
-      {"_set_mode", 	&POA_IR::OperationDef::_set_mode_skel},
-      {"_get_params", 	&POA_IR::OperationDef::_get_params_skel},
-      {"_set_params", 	&POA_IR::OperationDef::_set_params_skel},
-      {"_get_contexts", 	&POA_IR::OperationDef::_get_contexts_skel},
-      {"_set_contexts", 	&POA_IR::OperationDef::_set_contexts_skel},
-      {"_get_exceptions", 	&POA_IR::OperationDef::_get_exceptions_skel},
-      {"_set_exceptions", 	&POA_IR::OperationDef::_set_exceptions_skel},
-      {"_get_version", 	&POA_IR::OperationDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::OperationDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::OperationDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::OperationDef::_get_defined_in_skel},
-      {"_get_id", 	&POA_IR::OperationDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::OperationDef::_set_id_skel},
-      {"describe", 	&POA_IR::OperationDef::describe_skel},
-      {"_get_result_def", 	&POA_IR::OperationDef::_get_result_def_skel},
-      {"_set_result_def", 	&POA_IR::OperationDef::_set_result_def_skel},
-      {"_get_def_kind", 	&POA_IR::OperationDef::_get_def_kind_skel},
-      {"_get_result", 	&POA_IR::OperationDef::_get_result_skel},
-      {"destroy", 	&POA_IR::OperationDef::destroy_skel},
-      {"_non_existent",  &POA_IR::OperationDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::OperationDef::_get_containing_repository_skel},
+      {"move",  &POA_IR::InterfaceDef::move_skel},
+      {"_is_a",  &POA_IR::InterfaceDef::_is_a_skel},
+      {"lookup",        &POA_IR::InterfaceDef::lookup_skel},
+      {"_get_name",     &POA_IR::InterfaceDef::_get_name_skel},
+      {"_get_type",     &POA_IR::InterfaceDef::_get_type_skel},
+      {"_set_name",     &POA_IR::InterfaceDef::_set_name_skel},
+      {"lookup_name",   &POA_IR::InterfaceDef::lookup_name_skel},
+      {"_get_is_local",         &POA_IR::InterfaceDef::_get_is_local_skel},
+      {"_set_is_local",         &POA_IR::InterfaceDef::_set_is_local_skel},
+      {"is_a",  &POA_IR::InterfaceDef::is_a_skel},
+      {"_get_id",       &POA_IR::InterfaceDef::_get_id_skel},
+      {"_set_id",       &POA_IR::InterfaceDef::_set_id_skel},
+      {"describe",      &POA_IR::InterfaceDef::describe_skel},
+      {"_get_version",  &POA_IR::InterfaceDef::_get_version_skel},
+      {"_set_version",  &POA_IR::InterfaceDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::InterfaceDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::InterfaceDef::_get_defined_in_skel},
+      {"_get_def_kind",         &POA_IR::InterfaceDef::_get_def_kind_skel},
+      {"_get_base_interfaces",  &POA_IR::InterfaceDef::_get_base_interfaces_skel},
+      {"_set_base_interfaces",  &POA_IR::InterfaceDef::_set_base_interfaces_skel},
+      {"create_enum",   &POA_IR::InterfaceDef::create_enum_skel},
+      {"create_value",  &POA_IR::InterfaceDef::create_value_skel},
+      {"create_module",         &POA_IR::InterfaceDef::create_module_skel},
+      {"create_native",         &POA_IR::InterfaceDef::create_native_skel},
+      {"describe_contents",     &POA_IR::InterfaceDef::describe_contents_skel},
+      {"create_attribute",      &POA_IR::InterfaceDef::create_attribute_skel},
+      {"create_interface",      &POA_IR::InterfaceDef::create_interface_skel},
+      {"create_union",  &POA_IR::InterfaceDef::create_union_skel},
+      {"contents",      &POA_IR::InterfaceDef::contents_skel},
+      {"destroy",       &POA_IR::InterfaceDef::destroy_skel},
+      {"create_operation",      &POA_IR::InterfaceDef::create_operation_skel},
+      {"create_exception",      &POA_IR::InterfaceDef::create_exception_skel},
+      {"create_alias",  &POA_IR::InterfaceDef::create_alias_skel},
+      {"_non_existent",  &POA_IR::InterfaceDef::_non_existent_skel},
+      {"_get_is_abstract",      &POA_IR::InterfaceDef::_get_is_abstract_skel},
+      {"_set_is_abstract",      &POA_IR::InterfaceDef::_set_is_abstract_skel},
+      {"_get_containing_repository",    &POA_IR::InterfaceDef::_get_containing_repository_skel},
+      {"create_value_box",      &POA_IR::InterfaceDef::create_value_box_skel},
+      {"create_struct",         &POA_IR::InterfaceDef::create_struct_skel},
+      {"create_constant",       &POA_IR::InterfaceDef::create_constant_skel},
+    };
+
+  static const signed char lookup[] =
+    {
+       -11,   -2,  -14,   -2,    4,    5,    6,  -17,   -2,  103,   -1,   10,   -1,  -78,
+        13,  -78,   16,  -75,   19,   -1,   20,   21,  -22,   -2,  -26,   -2,  -29,   -2,
+       -34,   -2,  -73,   24,   25,  -74,   -1,   28,  -75,   31,   32,   -1,   33,  -78,
+        36,   37,  -38,   -2,  -67,   -7,   -3,   -1,   -1,   40,   -1,   -1,   -1,   -1,
+        41,   -1,   -1,   -1,   -1,   -1,   -1,   42,   -1,   43,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -20892,119 +14664,62 @@
 
       if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
         {
+          int slot = lookup[key];
+
+          if (slot >= 0 && slot < MAX_HASH_VALUE)
             {
-              const class TAO_operation_db_entry   *resword; 
+              const char *s = wordlist[slot].opname_;
 
-              switch (key)
-                {
-                case   4:
-                  resword = &wordlist[4]; break;
-                case   5:
-                  resword = &wordlist[5]; break;
-                case   9:
-                  resword = &wordlist[6];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[7];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[8];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[9];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  11:
-                  resword = &wordlist[10];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[11];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  13:
-                  resword = &wordlist[12];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[13];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  15:
-                  resword = &wordlist[14];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[15];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  17:
-                  resword = &wordlist[16];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[17];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  18:
-                  resword = &wordlist[18]; break;
-                case  20:
-                  resword = &wordlist[19]; break;
-                case  22:
-                  resword = &wordlist[20];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[21];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  23:
-                  resword = &wordlist[22]; break;
-                case  25:
-                  resword = &wordlist[23];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  resword = &wordlist[24];
-                  if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1)) return resword;
-                  return 0;
-                case  28:
-                  resword = &wordlist[25]; break;
-                case  31:
-                  resword = &wordlist[26]; break;
-                case  32:
-                  resword = &wordlist[27]; break;
-                case  33:
-                  resword = &wordlist[28]; break;
-                case  36:
-                  resword = &wordlist[29]; break;
-                default: return 0;
-                }
-              if (*str == *resword->opname_ && !strncmp (str + 1, resword->opname_ + 1, len - 1))
-                return resword;
-              return 0;
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+                return &wordlist[slot];
+            }
+          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
+            return 0;
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
             }
         }
     }
   return 0;
 }
-/* ending time is 10:26:21 */
-static TAO_IR_OperationDef_Perfect_Hash_OpTable tao_IR_OperationDef_optable;
-
+/* ending time is 11:23:10 */
+static TAO_IR_InterfaceDef_Perfect_Hash_OpTable tao_IR_InterfaceDef_optable;
 
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
 
 // Factory function Implementation.
-POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker *POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::the_TAO_OperationDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker *POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::the_TAO_InterfaceDef_Strategized_Proxy_Broker (void)
 {
-  static POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  static POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker strategized_proxy_broker;
   return &strategized_proxy_broker;
 }
 
-POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::_TAO_OperationDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::_TAO_InterfaceDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     this->proxy_cache_[i] = 0;
   
 }
 
-POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::~_TAO_OperationDef_Strategized_Proxy_Broker (void)
+POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::~_TAO_InterfaceDef_Strategized_Proxy_Broker (void)
 {
   for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
     delete this->proxy_cache_[i];
   
 }
 
-IR::_TAO_OperationDef_Proxy_Impl&
-POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::OperationDef *object,
+_TAO_InterfaceDef_Proxy_Impl&
+POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::select_proxy (
+    IR_InterfaceDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -21022,7 +14737,7 @@
 }
 
 void 
-POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::create_proxy (
+POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::create_proxy (
     TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -21036,7 +14751,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl,
+              _TAO_InterfaceDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -21046,7 +14761,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_OperationDef_Remote_Proxy_Impl,
+              _TAO_InterfaceDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -21063,69 +14778,41 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_OperationDef_Proxy_Broker *
-IR__TAO_OperationDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_InterfaceDef_Proxy_Broker *
+_TAO_InterfaceDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_OperationDef_Strategized_Proxy_Broker::the_TAO_OperationDef_Strategized_Proxy_Broker();
+  return ::POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::the_TAO_InterfaceDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_OperationDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_InterfaceDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_OperationDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_OperationDef_Proxy_Broker_Factory_function;
+  _TAO_InterfaceDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_InterfaceDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_OperationDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_OperationDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_OperationDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_InterfaceDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_InterfaceDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_InterfaceDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
 //                 ThruPOA Proxy  Implementation
 //
 
-POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::_TAO_OperationDef_ThruPOA_Proxy_Impl (void)
+POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::_TAO_InterfaceDef_ThruPOA_Proxy_Impl (void)
 {}
 
-// ThruPOA Implementation of the IDL interface methods
+POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::~_TAO_InterfaceDef_ThruPOA_Proxy_Impl (void)
+{}
 
-CORBA::TypeCode_ptr POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::result (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::TypeCode_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "result",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
-        )
-    )->result (
-        ACE_TRY_ENV
-      );
-}
+// ThruPOA Implementation of the IDL interface methods
 
-IR::IDLType_ptr POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::result_def (
+IR::InterfaceDefSeq * POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::base_interfaces (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -21133,7 +14820,7 @@
     CORBA::SystemException
   ))
 {
-    IR::IDLType_var _tao_retval;
+    IR_InterfaceDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -21141,24 +14828,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "result_def",
+      "base_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->result_def (
+    )->base_interfaces (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::result_def (
+void POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::base_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr result_def,
+    const IR_InterfaceDefSeq & base_interfaces,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -21171,24 +14858,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "result_def",
+      "base_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->result_def (
-        result_def,
+    )->base_interfaces (
+        base_interfaces,
         ACE_TRY_ENV
       );
   return;
 }
 
-IR::ParDescriptionSeq * POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::params (
+CORBA::Boolean POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_abstract (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -21196,7 +14883,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ParDescriptionSeq_var _tao_retval;
+    CORBA::Boolean _tao_retval = 0;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -21204,24 +14891,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "params",
+      "is_abstract",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN (0);
+      ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->params (
+    )->is_abstract (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::params (
+void POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_abstract (
     CORBA_Object *_collocated_tao_target_,
-    const IR::ParDescriptionSeq & params,
+    CORBA::Boolean is_abstract,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -21234,24 +14921,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "params",
+      "is_abstract",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->params (
-        params,
+    )->is_abstract (
+        is_abstract,
         ACE_TRY_ENV
       );
   return;
 }
 
-IR::OperationMode POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::mode (
+CORBA::Boolean POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_local (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -21259,7 +14946,7 @@
     CORBA::SystemException
   ))
 {
-    IR::OperationMode _tao_retval;
+    CORBA::Boolean _tao_retval = 0;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -21267,24 +14954,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "mode",
+      "is_local",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->mode (
+    )->is_local (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::mode (
+void POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_local (
     CORBA_Object *_collocated_tao_target_,
-    IR::OperationMode mode,
+    CORBA::Boolean is_local,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -21297,32 +14984,33 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "mode",
+      "is_local",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK;
     ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->mode (
-        mode,
+    )->is_local (
+        is_local,
         ACE_TRY_ENV
       );
   return;
 }
 
-IR::ContextIdSeq * POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::contexts (
+CORBA::Boolean POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_a (
     CORBA_Object *_collocated_tao_target_,
+    const char * interface_id,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ContextIdSeq_var _tao_retval;
+    CORBA::Boolean _tao_retval = 0;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -21330,62 +15018,38 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "contexts",
+      "is_a",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN (0);
+      ACE_CHECK_RETURN  (_tao_retval);
     return ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
-        )
-    )->contexts (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::contexts (
-    CORBA_Object *_collocated_tao_target_,
-    const IR::ContextIdSeq & contexts,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "contexts",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->contexts (
-        contexts,
+    )->is_a (
+        interface_id,
         ACE_TRY_ENV
       );
-  return;
 }
 
-IR::ExceptionDefSeq * POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::exceptions (
+IR::AttributeDef_ptr POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::create_attribute (
     CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_IDLType_ptr type,
+    IR_AttributeMode mode,
+    const IR_ExceptionDefSeq & get_exceptions,
+    const IR_ExceptionDefSeq & put_exceptions,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ExceptionDefSeq_var _tao_retval;
+    IR_AttributeDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -21393,51 +15057,73 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "exceptions",
+      "create_attribute",
       forward_to.out (),
       ACE_TRY_ENV
     );
       ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->exceptions (
+    )->create_attribute (
+        id,
+        name,
+        version,
+        type,
+        mode,
+        get_exceptions,
+        put_exceptions,
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_OperationDef_ThruPOA_Proxy_Impl::exceptions (
+IR::OperationDef_ptr POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::create_operation (
     CORBA_Object *_collocated_tao_target_,
-    const IR::ExceptionDefSeq & exceptions,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_IDLType_ptr result,
+    IR_OperationMode mode,
+    const IR_ParDescriptionSeq & params,
+    const IR_ExceptionDefSeq & exceptions,
+    const IR_ContextIdSeq & contexts,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
+    IR_OperationDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "exceptions",
+      "create_operation",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::OperationDef_ptr,
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::InterfaceDef_ptr,
       servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/OperationDef:1.0"
+          "IDL:omg.org/IR/InterfaceDef:1.0"
         )
-    )->exceptions (
+    )->create_operation (
+        id,
+        name,
+        version,
+        result,
+        mode,
+        params,
         exceptions,
+        contexts,
         ACE_TRY_ENV
       );
-  return;
 }
 
 //
@@ -21445,776 +15131,363 @@
 ///////////////////////////////////////////////////////////////////////
 
 // skeleton constructor
-POA_IR::OperationDef::OperationDef (void)
+POA_IR::InterfaceDef::InterfaceDef (void)
 {
-  this->optable_ = &tao_IR_OperationDef_optable;
+  this->optable_ = &tao_IR_InterfaceDef_optable;
 }
 
 // copy ctor
-POA_IR::OperationDef::OperationDef (const OperationDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+POA_IR::InterfaceDef::InterfaceDef (const InterfaceDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
     ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
     TAO_ServantBase (rhs)
 {}
 
 // skeleton destructor
-POA_IR::OperationDef::~OperationDef (void)
+POA_IR::InterfaceDef::~InterfaceDef (void)
 {
 }
 
-void POA_IR::OperationDef::_get_result_skel (
+void POA_IR::InterfaceDef::_get_base_interfaces_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_get ri (
-      "_get_result",
-      _tao_server_request.service_info (),
+  IR_InterfaceDefSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->base_interfaces (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->result (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::OperationDef::_get_result_def_skel (
+void POA_IR::InterfaceDef::_set_base_interfaces_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_get ri (
-      "_get_result_def",
-      _tao_server_request.service_info (),
+  IR_InterfaceDefSeq base_interfaces;
+  if (!(
+    (_tao_in >> base_interfaces)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->base_interfaces (
+      base_interfaces,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->result_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::OperationDef::_set_result_def_skel (
+void POA_IR::InterfaceDef::_get_is_abstract_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var result_def;
-  if (!(
-    (_tao_in >> result_def.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_set ri (
-      "_set_result_def",
-      _tao_server_request.service_info (),
-      result_def.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->result_def (
-          result_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-void POA_IR::OperationDef::_get_params_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
 
-  IR::ParDescriptionSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_get ri (
-      "_get_params",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->is_abstract (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->params (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ParDescriptionSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
-    (_tao_out << _tao_retval.in ())
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::OperationDef::_set_params_skel (
+void POA_IR::InterfaceDef::_set_is_abstract_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::ParDescriptionSeq params;
+  CORBA::Boolean is_abstract;
   if (!(
-    (_tao_in >> params)
+    (_tao_in >> CORBA::Any::to_boolean (is_abstract))
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_set ri (
-      "_set_params",
-      _tao_server_request.service_info (),
-      params,
+  _tao_impl->is_abstract (
+      is_abstract,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->params (
-          params,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::OperationDef::_get_mode_skel (
+void POA_IR::InterfaceDef::_get_is_local_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-  IR::OperationMode _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_get ri (
-      "_get_mode",
-      _tao_server_request.service_info (),
+  CORBA::Boolean _tao_retval = 0;
+
+  _tao_retval = _tao_impl->is_local (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->mode (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::OperationMode _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
-    (_tao_out << _tao_retval)
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::OperationDef::_set_mode_skel (
+void POA_IR::InterfaceDef::_set_is_local_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::OperationMode mode;
+  CORBA::Boolean is_local;
   if (!(
-    (_tao_in >> mode)
+    (_tao_in >> CORBA::Any::to_boolean (is_local))
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_set ri (
-      "_set_mode",
-      _tao_server_request.service_info (),
-      mode,
+  _tao_impl->is_local (
+      is_local,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->mode (
-          mode,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
-void POA_IR::OperationDef::_get_contexts_skel (
+void POA_IR::InterfaceDef::is_a_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-  IR::ContextIdSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_get ri (
-      "_get_contexts",
-      _tao_server_request.service_info (),
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var interface_id;
+  if (!(
+    (_tao_in >> interface_id.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_retval = _tao_impl->is_a (
+      interface_id.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->contexts (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ContextIdSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
-    (_tao_out << _tao_retval.in ())
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::OperationDef::_set_contexts_skel (
+void POA_IR::InterfaceDef::create_attribute_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::ContextIdSeq contexts;
+  IR_AttributeDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_IDLType_var type;
+  IR_AttributeMode mode;
+  IR_ExceptionDefSeq get_exceptions;
+  IR_ExceptionDefSeq put_exceptions;
   if (!(
-    (_tao_in >> contexts)
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> type.out ()) &&
+    (_tao_in >> mode) &&
+    (_tao_in >> get_exceptions) &&
+    (_tao_in >> put_exceptions)
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_set ri (
-      "_set_contexts",
-      _tao_server_request.service_info (),
-      contexts,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->contexts (
-          contexts,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::OperationDef::_get_exceptions_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+    ACE_THROW (CORBA::MARSHAL () );
 
-  IR::ExceptionDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get ri (
-      "_get_exceptions",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_attribute (
+      id.in (),
+      name.in (),
+      version.in (),
+      type.in (),
+      mode,
+      get_exceptions,
+      put_exceptions,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->exceptions (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ExceptionDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::OperationDef::_set_exceptions_skel (
+void POA_IR::InterfaceDef::create_operation_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *)_tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::ExceptionDefSeq exceptions;
+  IR_OperationDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_IDLType_var result;
+  IR_OperationMode mode;
+  IR_ParDescriptionSeq params;
+  IR_ExceptionDefSeq exceptions;
+  IR_ContextIdSeq contexts;
   if (!(
-    (_tao_in >> exceptions)
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> result.out ()) &&
+    (_tao_in >> mode) &&
+    (_tao_in >> params) &&
+    (_tao_in >> exceptions) &&
+    (_tao_in >> contexts)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_set ri (
-      "_set_exceptions",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_operation (
+      id.in (),
+      name.in (),
+      version.in (),
+      result.in (),
+      mode,
+      params,
       exceptions,
+      contexts,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->exceptions (
-          exceptions,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::OperationDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::InterfaceDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *) _tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::OperationDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+void POA_IR::InterfaceDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  POA_IR::OperationDef *_tao_impl = (POA_IR::OperationDef *) _tao_object_reference;
+  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Boolean POA_IR::OperationDef::_is_a (
+CORBA::Boolean POA_IR::InterfaceDef::_is_a (
     const char* value,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/OperationDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/InterfaceDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
       return 1;
@@ -22222,14 +15495,18 @@
       return 0;
 }
 
-void* POA_IR::OperationDef::_downcast (
+void* POA_IR::InterfaceDef::_downcast (
     const char* logical_type_id
   )
 {
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/OperationDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::OperationDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/InterfaceDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::InterfaceDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
+    return ACE_static_cast (POA_IR::Container_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
+    return ACE_static_cast (POA_IR::IDLType_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
     return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
@@ -22237,18 +15514,18 @@
   return 0;
 }
 
-void POA_IR::OperationDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+void POA_IR::InterfaceDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
   this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-const char* POA_IR::OperationDef::_interface_repository_id (void) const
+const char* POA_IR::InterfaceDef::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/IR/OperationDef:1.0";
+  return "IDL:omg.org/IR/InterfaceDef:1.0";
 }
 
-IR::OperationDef*
-POA_IR::OperationDef::_this (CORBA_Environment &ACE_TRY_ENV)
+IR::InterfaceDef*
+POA_IR::InterfaceDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
   TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
@@ -22261,600 +15538,811 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::OperationDef::_unchecked_narrow (obj.in ());
+  return IR_InterfaceDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_get::TAO_ServerRequestInfo_IR_OperationDef_result_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+class TAO_IR_ValueMemberDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+private:
+  unsigned int hash (const char *str, unsigned int len);
+public:
+ const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
+};
+/* starting time is 11:23:10 */
+/* C++ code produced by gperf version 2.8 (ACE version) */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ValueMemberDef_Perfect_Hash_OpTable -N lookup  */
+unsigned int
+TAO_IR_ValueMemberDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
-  // Generate the exception list on demand
-  return 0;
+  static const unsigned char asso_values[] =
+    {
+#if defined (ACE_MVS)
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
+     37, 37,  0,  0, 10, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37,  0, 15, 37, 37, 37, 37, 10, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37,
+#else
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
+     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
+      0,  0, 10, 37, 37, 37, 37, 37, 37,  0,
+      0, 37, 37, 37, 37,  0, 15, 37, 37, 37,
+     37, 10, 37, 37, 37, 37, 37, 37,
+#endif /* ACE_MVS */
+    };
+  return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+const class TAO_operation_db_entry *
+TAO_IR_ValueMemberDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  enum
+    {
+      TOTAL_KEYWORDS = 20,
+      MIN_WORD_LENGTH = 4,
+      MAX_WORD_LENGTH = 26,
+      MIN_HASH_VALUE = 4,
+      MAX_HASH_VALUE = 36,
+      HASH_VALUE_RANGE = 33,
+      DUPLICATES = 7
+    };
 
-void 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  static const class TAO_operation_db_entry  wordlist[] =
+    {
+      {"",0},{"",0},{"",0},{"",0},
+      {"move",  &POA_IR::ValueMemberDef::move_skel},
+      {"_is_a",  &POA_IR::ValueMemberDef::_is_a_skel},
+      {"_get_id",       &POA_IR::ValueMemberDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ValueMemberDef::_set_id_skel},
+      {"describe",      &POA_IR::ValueMemberDef::describe_skel},
+      {"_get_type",     &POA_IR::ValueMemberDef::_get_type_skel},
+      {"_set_name",     &POA_IR::ValueMemberDef::_set_name_skel},
+      {"_get_name",     &POA_IR::ValueMemberDef::_get_name_skel},
+      {"_get_access",   &POA_IR::ValueMemberDef::_get_access_skel},
+      {"_set_access",   &POA_IR::ValueMemberDef::_set_access_skel},
+      {"_get_version",  &POA_IR::ValueMemberDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ValueMemberDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::ValueMemberDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::ValueMemberDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::ValueMemberDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::ValueMemberDef::_get_absolute_name_skel},
+      {"_get_type_def",         &POA_IR::ValueMemberDef::_get_type_def_skel},
+      {"_set_type_def",         &POA_IR::ValueMemberDef::_set_type_def_skel},
+      {"_non_existent",  &POA_IR::ValueMemberDef::_non_existent_skel},
+      {"_get_containing_repository",    &POA_IR::ValueMemberDef::_get_containing_repository_skel},
+    };
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_get::TAO_ServerRequestInfo_IR_OperationDef_result_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  static const signed char lookup[] =
+    {
+      -12,  -2, -14,  -2,   4,   5,  -1,  53,   8,  46,  -1, -47, -46,  16,
+       -1,  17,  -1,  18,  19,  -9,  -3, -20,  -2, -38,  -6,  -2,  -1,  -1,
+       22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23,
+    };
 
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      unsigned int key = hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
+        {
+          int slot = lookup[key];
+
+          if (slot >= 0 && slot < MAX_HASH_VALUE)
+            {
+              const char *s = wordlist[slot].opname_;
+
+              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
+                return &wordlist[slot];
+            }
+          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
+            return 0;
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
+
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
+            }
+        }
+    }
   return 0;
 }
+/* ending time is 11:23:10 */
+static TAO_IR_ValueMemberDef_Perfect_Hash_OpTable tao_IR_ValueMemberDef_optable;
 
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
 
-  Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+// Factory function Implementation.
+POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker *POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::the_TAO_ValueMemberDef_Strategized_Proxy_Broker (void)
 {
-  // Generate the exception list on demand
-  return 0;
+  static POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::_TAO_ValueMemberDef_Strategized_Proxy_Broker (void)
 {
-  // Generate the result on demand
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
   
-  return &this->result_val_;
 }
 
-void 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_get::result (IR::IDLType_ptr result)
+POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::~_TAO_ValueMemberDef_Strategized_Proxy_Broker (void)
 {
-  // update the result 
-   this->result_ = result;
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
+  
 }
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_set::TAO_ServerRequestInfo_IR_OperationDef_result_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr result_def,
-    CORBA::Environment &
+_TAO_ValueMemberDef_Proxy_Impl&
+POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ValueMemberDef *object,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    result_def_ (result_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_result_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_result_def + 1);
-  this->parameter_list_[length_result_def].argument <<=  this->result_def_;
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
+  
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
   
-  this->parameter_list_[length_result_def].mode = Dynamic::PARAM_IN;
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
   
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_result_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
+  return *this->proxy_cache_[strategy];
   
-  return &this->result_val_;
 }
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_get::TAO_ServerRequestInfo_IR_OperationDef_params_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
+void 
+POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the result on demand
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
   
-  return &this->result_val_;
+  if (this->proxy_cache_[strategy] == 0)
+    {
+      switch (strategy)
+        {
+        case TAO_ORB_Core::THRU_POA_STRATEGY:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ValueMemberDef_ThruPOA_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+          
+        case TAO_ORB_Core::REMOTE_STRATEGY:
+        default:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ValueMemberDef_Remote_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+        
+      }
+    
+  }
 }
 
-void 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_get::result (IR::ParDescriptionSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_set::TAO_ServerRequestInfo_IR_OperationDef_params_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::ParDescriptionSeq & params,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    params_ (params)
-{}
+//
+//        End Strategized Proxy Broker Implementation
+///////////////////////////////////////////////////////////////////////
 
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_params = this->parameter_list_.length ();
-  this->parameter_list_.length (length_params + 1);
-  this->parameter_list_[length_params].argument <<=  this->params_;
-  
-  this->parameter_list_[length_params].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
 
-Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+_TAO_ValueMemberDef_Proxy_Broker *
+_TAO_ValueMemberDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
-  // Generate the exception list on demand
-  return 0;
+  ACE_UNUSED_ARG (obj);
+  return ::POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::the_TAO_ValueMemberDef_Strategized_Proxy_Broker();
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_params_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+int
+_TAO_ValueMemberDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
+  ACE_UNUSED_ARG (_dummy_);
+  
+  _TAO_ValueMemberDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ValueMemberDef_Proxy_Broker_Factory_function;
   
-  return &this->result_val_;
-}
-
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_get::TAO_ServerRequestInfo_IR_OperationDef_mode_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
   return 0;
 }
 
+static int _TAO_ValueMemberDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ValueMemberDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ValueMemberDef_Proxy_Broker_Factory_Initializer));
 
-  Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+///////////////////////////////////////////////////////////////////////
+//                 ThruPOA Proxy  Implementation
+//
 
-void 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_get::result (IR::OperationMode result)
-{
-  // update the result 
-   this->result_ = result;
-}
+POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl (void)
+{}
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_set::TAO_ServerRequestInfo_IR_OperationDef_mode_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::OperationMode & mode,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    mode_ (mode)
+POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::~_TAO_ValueMemberDef_ThruPOA_Proxy_Impl (void)
 {}
 
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_mode = this->parameter_list_.length ();
-  this->parameter_list_.length (length_mode + 1);
-  this->parameter_list_[length_mode].argument <<=  this->mode_;
-  
-  this->parameter_list_[length_mode].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+// ThruPOA Implementation of the IDL interface methods
 
-Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+CORBA::TypeCode_ptr POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::type (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    CORBA::TypeCode_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueMemberDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueMemberDef:1.0"
+        )
+    )->type (
+        ACE_TRY_ENV
+      );
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_mode_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+IR::IDLType_ptr POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::type_def (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+    IR_IDLType_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueMemberDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueMemberDef:1.0"
+        )
+    )->type_def (
+        ACE_TRY_ENV
+      );
 }
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_get::TAO_ServerRequestInfo_IR_OperationDef_contexts_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
+void POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::type_def (
+    CORBA_Object *_collocated_tao_target_,
+    IR_IDLType_ptr type_def,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  // Generate the arg list on demand
-  return 0;
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "type_def",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ValueMemberDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueMemberDef:1.0"
+        )
+    )->type_def (
+        type_def,
+        ACE_TRY_ENV
+      );
+  return;
 }
 
-
-  Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+CORBA::Visibility POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::access (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  // Generate the exception list on demand
-  return 0;
+    CORBA::Visibility _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "access",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueMemberDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueMemberDef:1.0"
+        )
+    )->access (
+        ACE_TRY_ENV
+      );
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::access (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Visibility access,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "access",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ValueMemberDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueMemberDef:1.0"
+        )
+    )->access (
+        access,
+        ACE_TRY_ENV
+      );
+  return;
 }
 
-void 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_get::result (IR::ContextIdSeq * result)
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
+
+// skeleton constructor
+POA_IR::ValueMemberDef::ValueMemberDef (void)
 {
-  // update the result 
-   this->result_ = result;
+  this->optable_ = &tao_IR_ValueMemberDef_optable;
 }
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_set::TAO_ServerRequestInfo_IR_OperationDef_contexts_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::ContextIdSeq & contexts,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    contexts_ (contexts)
+// copy ctor
+POA_IR::ValueMemberDef::ValueMemberDef (const ValueMemberDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
 {}
 
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+// skeleton destructor
+POA_IR::ValueMemberDef::~ValueMemberDef (void)
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_contexts = this->parameter_list_.length ();
-  this->parameter_list_.length (length_contexts + 1);
-  this->parameter_list_[length_contexts].argument <<=  this->contexts_;
-  
-  this->parameter_list_[length_contexts].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
 }
 
-Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueMemberDef::_get_type_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the exception list on demand
-  return 0;
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
+
+  CORBA::TypeCode_var _tao_retval;
+
+  _tao_retval = _tao_impl->type (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_contexts_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueMemberDef::_get_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  IR_IDLType_var _tao_retval;
 
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->type_def (
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueMemberDef::_set_type_def_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
 
-void 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_get::result (IR::ExceptionDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  IR_IDLType_var type_def;
+  if (!(
+    (_tao_in >> type_def.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_set::TAO_ServerRequestInfo_IR_OperationDef_exceptions_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::ExceptionDefSeq & exceptions,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    exceptions_ (exceptions)
-{}
+  _tao_impl->type_def (
+      type_def.in (),
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exceptions + 1);
-  this->parameter_list_[length_exceptions].argument <<=  this->exceptions_;
-  
-  this->parameter_list_[length_exceptions].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
 }
 
-CORBA::Any * 
-POA_IR::OperationDef::TAO_ServerRequestInfo_IR_OperationDef_exceptions_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueMemberDef::_get_access_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
+
+  CORBA::Visibility _tao_retval = 0;
+
+  _tao_retval = _tao_impl->access (
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_InterfaceDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
+void POA_IR::ValueMemberDef::_set_access_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
+
+  CORBA::Visibility access;
+  if (!(
+    (_tao_in >> access)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->access (
+      access,
+      ACE_TRY_ENV
+    );
+
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+}
+
+void POA_IR::ValueMemberDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
+
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
+}
+
+void POA_IR::ValueMemberDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
+}
+
+CORBA::Boolean POA_IR::ValueMemberDef::_is_a (
+    const char* value,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ValueMemberDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
+}
+
+void* POA_IR::ValueMemberDef::_downcast (
+    const char* logical_type_id
+  )
+{
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ValueMemberDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ValueMemberDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
+  return 0;
+}
+
+void POA_IR::ValueMemberDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
+{
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
+}
+
+const char* POA_IR::ValueMemberDef::_interface_repository_id (void) const
+{
+  return "IDL:omg.org/IR/ValueMemberDef:1.0";
+}
+
+IR::ValueMemberDef*
+POA_IR::ValueMemberDef::_this (CORBA_Environment &ACE_TRY_ENV)
+{
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
+  
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
+  
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
+  
+  CORBA::Object_var obj = tmp;
+  return IR_ValueMemberDef::_unchecked_narrow (obj.in ());
+}
+
+class TAO_IR_ValueDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
+{
+private:
   unsigned int hash (const char *str, unsigned int len);
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_InterfaceDef_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ValueDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
-TAO_IR_InterfaceDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
+TAO_IR_ValueDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
   static const unsigned char asso_values[] =
     {
 #if defined (ACE_MVS)
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66,  0,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66,  0,
-     66, 20,  8,  0, 66, 66, 66, 10, 66, 66,
-     66, 66, 66, 66, 66, 66, 66,  0,  0,  5,
-     66,  0, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 10, 30, 66, 66, 66, 20, 25, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86,  0,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86,  0,
+     86, 50, 35,  0, 86, 86, 86, 20, 86, 86,
+     86, 86, 86, 86, 86, 86, 86,  0,  0, 15,
+     86,  0, 86,  0, 86, 86, 86, 86, 86, 86,
+     86, 86, 20, 20, 86, 86, 86,  5,  5, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86,
 #else
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
-     66, 66, 66, 66, 66,  0, 66,  0, 66, 20,
-      8,  0, 66, 66, 66, 10, 66, 66,  0,  0,
-      5, 66,  0, 66, 66, 10, 30, 66, 66, 66,
-     20, 25, 66, 66, 66, 66, 66, 66,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
+     86, 86, 86, 86, 86,  0, 86,  0, 86, 50,
+     35,  0, 86, 86, 86, 20, 86, 86,  0,  0,
+     15, 86,  0, 86,  0, 20, 20, 86, 86, 86,
+      5,  5, 86, 86, 86, 86, 86, 86,
 #endif /* ACE_MVS */
     };
   return len + asso_values[str[len - 1]] + asso_values[str[0]];
 }
 
 const class TAO_operation_db_entry *
-TAO_IR_InterfaceDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
+TAO_IR_ValueDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
 {
   enum
     {
-      TOTAL_KEYWORDS = 40,
+      TOTAL_KEYWORDS = 49,
       MIN_WORD_LENGTH = 4,
       MAX_WORD_LENGTH = 26,
       MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 65,
-      HASH_VALUE_RANGE = 62,
-      DUPLICATES = 11
+      MAX_HASH_VALUE = 85,
+      HASH_VALUE_RANGE = 82,
+      DUPLICATES = 16
     };
 
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::InterfaceDef::move_skel},
-      {"_is_a",  &POA_IR::InterfaceDef::_is_a_skel},
-      {"lookup", 	&POA_IR::InterfaceDef::lookup_skel},
-      {"_get_name", 	&POA_IR::InterfaceDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::InterfaceDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::InterfaceDef::_set_name_skel},
-      {"lookup_name", 	&POA_IR::InterfaceDef::lookup_name_skel},
-      {"_get_is_local", 	&POA_IR::InterfaceDef::_get_is_local_skel},
-      {"_set_is_local", 	&POA_IR::InterfaceDef::_set_is_local_skel},
-      {"is_a", 	&POA_IR::InterfaceDef::is_a_skel},
-      {"_get_id", 	&POA_IR::InterfaceDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::InterfaceDef::_set_id_skel},
-      {"describe", 	&POA_IR::InterfaceDef::describe_skel},
-      {"_get_version", 	&POA_IR::InterfaceDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::InterfaceDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::InterfaceDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::InterfaceDef::_get_defined_in_skel},
-      {"_get_def_kind", 	&POA_IR::InterfaceDef::_get_def_kind_skel},
-      {"_get_base_interfaces", 	&POA_IR::InterfaceDef::_get_base_interfaces_skel},
-      {"_set_base_interfaces", 	&POA_IR::InterfaceDef::_set_base_interfaces_skel},
-      {"create_enum", 	&POA_IR::InterfaceDef::create_enum_skel},
-      {"create_value", 	&POA_IR::InterfaceDef::create_value_skel},
-      {"create_module", 	&POA_IR::InterfaceDef::create_module_skel},
-      {"create_native", 	&POA_IR::InterfaceDef::create_native_skel},
-      {"describe_contents", 	&POA_IR::InterfaceDef::describe_contents_skel},
-      {"create_attribute", 	&POA_IR::InterfaceDef::create_attribute_skel},
-      {"create_interface", 	&POA_IR::InterfaceDef::create_interface_skel},
-      {"create_union", 	&POA_IR::InterfaceDef::create_union_skel},
-      {"contents", 	&POA_IR::InterfaceDef::contents_skel},
-      {"destroy", 	&POA_IR::InterfaceDef::destroy_skel},
-      {"create_operation", 	&POA_IR::InterfaceDef::create_operation_skel},
-      {"create_exception", 	&POA_IR::InterfaceDef::create_exception_skel},
-      {"create_alias", 	&POA_IR::InterfaceDef::create_alias_skel},
-      {"_non_existent",  &POA_IR::InterfaceDef::_non_existent_skel},
-      {"_get_is_abstract", 	&POA_IR::InterfaceDef::_get_is_abstract_skel},
-      {"_set_is_abstract", 	&POA_IR::InterfaceDef::_set_is_abstract_skel},
-      {"_get_containing_repository", 	&POA_IR::InterfaceDef::_get_containing_repository_skel},
-      {"create_value_box", 	&POA_IR::InterfaceDef::create_value_box_skel},
-      {"create_struct", 	&POA_IR::InterfaceDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::InterfaceDef::create_constant_skel},
+      {"move",  &POA_IR::ValueDef::move_skel},
+      {"_is_a",  &POA_IR::ValueDef::_is_a_skel},
+      {"lookup",        &POA_IR::ValueDef::lookup_skel},
+      {"_get_name",     &POA_IR::ValueDef::_get_name_skel},
+      {"_get_type",     &POA_IR::ValueDef::_get_type_skel},
+      {"_set_name",     &POA_IR::ValueDef::_set_name_skel},
+      {"lookup_name",   &POA_IR::ValueDef::lookup_name_skel},
+      {"_get_is_custom",        &POA_IR::ValueDef::_get_is_custom_skel},
+      {"_set_is_custom",        &POA_IR::ValueDef::_set_is_custom_skel},
+      {"_get_base_value",       &POA_IR::ValueDef::_get_base_value_skel},
+      {"_set_base_value",       &POA_IR::ValueDef::_set_base_value_skel},
+      {"_get_absolute_name",    &POA_IR::ValueDef::_get_absolute_name_skel},
+      {"_get_is_truncatable",   &POA_IR::ValueDef::_get_is_truncatable_skel},
+      {"_set_is_truncatable",   &POA_IR::ValueDef::_set_is_truncatable_skel},
+      {"is_a",  &POA_IR::ValueDef::is_a_skel},
+      {"_get_version",  &POA_IR::ValueDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ValueDef::_set_version_skel},
+      {"_get_defined_in",       &POA_IR::ValueDef::_get_defined_in_skel},
+      {"_get_containing_repository",    &POA_IR::ValueDef::_get_containing_repository_skel},
+      {"_non_existent",  &POA_IR::ValueDef::_non_existent_skel},
+      {"_get_is_abstract",      &POA_IR::ValueDef::_get_is_abstract_skel},
+      {"_set_is_abstract",      &POA_IR::ValueDef::_set_is_abstract_skel},
+      {"_get_initializers",     &POA_IR::ValueDef::_get_initializers_skel},
+      {"_set_initializers",     &POA_IR::ValueDef::_set_initializers_skel},
+      {"_get_id",       &POA_IR::ValueDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ValueDef::_set_id_skel},
+      {"describe",      &POA_IR::ValueDef::describe_skel},
+      {"_get_supported_interfaces",     &POA_IR::ValueDef::_get_supported_interfaces_skel},
+      {"_set_abstract_base_values",     &POA_IR::ValueDef::_set_abstract_base_values_skel},
+      {"_get_abstract_base_values",     &POA_IR::ValueDef::_get_abstract_base_values_skel},
+      {"_set_supported_interfaces",     &POA_IR::ValueDef::_set_supported_interfaces_skel},
+      {"destroy",       &POA_IR::ValueDef::destroy_skel},
+      {"_get_def_kind",         &POA_IR::ValueDef::_get_def_kind_skel},
+      {"create_enum",   &POA_IR::ValueDef::create_enum_skel},
+      {"create_value",  &POA_IR::ValueDef::create_value_skel},
+      {"create_module",         &POA_IR::ValueDef::create_module_skel},
+      {"create_native",         &POA_IR::ValueDef::create_native_skel},
+      {"create_attribute",      &POA_IR::ValueDef::create_attribute_skel},
+      {"create_interface",      &POA_IR::ValueDef::create_interface_skel},
+      {"create_value_member",   &POA_IR::ValueDef::create_value_member_skel},
+      {"create_value_box",      &POA_IR::ValueDef::create_value_box_skel},
+      {"describe_contents",     &POA_IR::ValueDef::describe_contents_skel},
+      {"create_union",  &POA_IR::ValueDef::create_union_skel},
+      {"contents",      &POA_IR::ValueDef::contents_skel},
+      {"create_operation",      &POA_IR::ValueDef::create_operation_skel},
+      {"create_exception",      &POA_IR::ValueDef::create_exception_skel},
+      {"create_alias",  &POA_IR::ValueDef::create_alias_skel},
+      {"create_struct",         &POA_IR::ValueDef::create_struct_skel},
+      {"create_constant",       &POA_IR::ValueDef::create_constant_skel},
     };
 
   static const signed char lookup[] =
     {
-       -11,   -2,  -14,   -2,    4,    5,    6,  -17,   -2,  103,   -1,   10,   -1,  -78, 
-        13,  -78,   16,  -75,   19,   -1,   20,   21,  -22,   -2,  -26,   -2,  -29,   -2, 
-       -34,   -2,  -73,   24,   25,  -74,   -1,   28,  -75,   31,   32,   -1,   33,  -78, 
-        36,   37,  -38,   -2,  -67,   -7,   -3,   -1,   -1,   40,   -1,   -1,   -1,   -1, 
-        41,   -1,   -1,   -1,   -1,   -1,   -1,   42,   -1,   43, 
+       -1,  -1,  -7,  -3,   4,   5,   6, -11,  -2, -92,  -1,  10, -13,  -2,
+      -92, -88, -16,  -2,  15, -88,  -1,  -1,  -1,  -1,  18, -19,  -2, -87,
+      -24,  -2,  21,  22,  -1,  23, -26,  -2, -93, -88, -28,  -2, -31,  -4,
+      -89,  30,  -1, -90,  -1,  35,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1, -39,  -2,  37,  38, -89, -41,  -2, -87,  -1,  -1,  43,
+       -1,  44,  45,  -1,  -1,  -1,  -1,  46,  47, -48,  -2, -87,  50,  51,
+       -1,  52,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -22888,3382 +16376,130 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
-static TAO_IR_InterfaceDef_Perfect_Hash_OpTable tao_IR_InterfaceDef_optable;
-
-
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
-
-// Factory function Implementation.
-POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker *POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::the_TAO_InterfaceDef_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
-}
-
-POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::_TAO_InterfaceDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
-
-POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::~_TAO_InterfaceDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
-}
-
-IR::_TAO_InterfaceDef_Proxy_Impl&
-POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::InterfaceDef *object,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
-}
-
-void 
-POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
-  
-  if (this->proxy_cache_[strategy] == 0)
-    {
-      switch (strategy)
-        {
-        case TAO_ORB_Core::THRU_POA_STRATEGY:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-          
-        case TAO_ORB_Core::REMOTE_STRATEGY:
-        default:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              ::IR::_TAO_InterfaceDef_Remote_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-        
-      }
-    
-  }
-}
-
-
-//
-//        End Strategized Proxy Broker Implementation
-///////////////////////////////////////////////////////////////////////
-
-
-IR::_TAO_InterfaceDef_Proxy_Broker *
-IR__TAO_InterfaceDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
-{
-  ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_InterfaceDef_Strategized_Proxy_Broker::the_TAO_InterfaceDef_Strategized_Proxy_Broker();
-}
-
-int
-IR__TAO_InterfaceDef_Proxy_Broker_Factory_Initializer (long _dummy_)
-{
-  ACE_UNUSED_ARG (_dummy_);
-  
-  IR__TAO_InterfaceDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_InterfaceDef_Proxy_Broker_Factory_function;
-  
-  return 0;
-}
-
-static int IR__TAO_InterfaceDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_InterfaceDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_InterfaceDef_Proxy_Broker_Factory_Initializer));
-
-
-///////////////////////////////////////////////////////////////////////
-//                 ThruPOA Proxy  Implementation
-//
-
-POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::_TAO_InterfaceDef_ThruPOA_Proxy_Impl (void)
-{}
-
-// ThruPOA Implementation of the IDL interface methods
-
-IR::InterfaceDefSeq * POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::base_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::InterfaceDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "base_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->base_interfaces (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::base_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    const IR::InterfaceDefSeq & base_interfaces,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "base_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->base_interfaces (
-        base_interfaces,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-CORBA::Boolean POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_abstract (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::Boolean _tao_retval = 0;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_abstract",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN  (_tao_retval);
-    return ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->is_abstract (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_abstract (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Boolean is_abstract,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_abstract",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->is_abstract (
-        is_abstract,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-CORBA::Boolean POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_local (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::Boolean _tao_retval = 0;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_local",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN  (_tao_retval);
-    return ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->is_local (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_local (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Boolean is_local,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_local",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->is_local (
-        is_local,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-CORBA::Boolean POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::is_a (
-    CORBA_Object *_collocated_tao_target_,
-    const char * interface_id,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::Boolean _tao_retval = 0;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_a",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN  (_tao_retval);
-    return ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->is_a (
-        interface_id,
-        ACE_TRY_ENV
-      );
-}
-
-IR::AttributeDef_ptr POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::create_attribute (
-    CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    IR::AttributeMode mode,
-    const IR::ExceptionDefSeq & get_exceptions,
-    const IR::ExceptionDefSeq & put_exceptions,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::AttributeDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_attribute",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->create_attribute (
-        id,
-        name,
-        version,
-        type,
-        mode,
-        get_exceptions,
-        put_exceptions,
-        ACE_TRY_ENV
-      );
-}
-
-IR::OperationDef_ptr POA_IR::_TAO_InterfaceDef_ThruPOA_Proxy_Impl::create_operation (
-    CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr result,
-    IR::OperationMode mode,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
-    const IR::ContextIdSeq & contexts,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::OperationDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "create_operation",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::InterfaceDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/InterfaceDef:1.0"
-        )
-    )->create_operation (
-        id,
-        name,
-        version,
-        result,
-        mode,
-        params,
-        exceptions,
-        contexts,
-        ACE_TRY_ENV
-      );
-}
-
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::InterfaceDef::InterfaceDef (void)
-{
-  this->optable_ = &tao_IR_InterfaceDef_optable;
-}
-
-// copy ctor
-POA_IR::InterfaceDef::InterfaceDef (const InterfaceDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::InterfaceDef::~InterfaceDef (void)
-{
-}
-
-void POA_IR::InterfaceDef::_get_base_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-  IR::InterfaceDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get ri (
-      "_get_base_interfaces",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->base_interfaces (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InterfaceDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::InterfaceDef::_set_base_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::InterfaceDefSeq base_interfaces;
-  if (!(
-    (_tao_in >> base_interfaces)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_set ri (
-      "_set_base_interfaces",
-      _tao_server_request.service_info (),
-      base_interfaces,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->base_interfaces (
-          base_interfaces,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::InterfaceDef::_get_is_abstract_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get ri (
-      "_get_is_abstract",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_abstract (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::InterfaceDef::_set_is_abstract_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Boolean is_abstract;
-  if (!(
-    (_tao_in >> CORBA::Any::to_boolean (is_abstract))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_set ri (
-      "_set_is_abstract",
-      _tao_server_request.service_info (),
-      is_abstract,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->is_abstract (
-          is_abstract,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::InterfaceDef::_get_is_local_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get ri (
-      "_get_is_local",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_local (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::InterfaceDef::_set_is_local_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Boolean is_local;
-  if (!(
-    (_tao_in >> CORBA::Any::to_boolean (is_local))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_set ri (
-      "_set_is_local",
-      _tao_server_request.service_info (),
-      is_local,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->is_local (
-          is_local,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::InterfaceDef::is_a_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var interface_id;
-  if (!(
-    (_tao_in >> interface_id.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_a ri (
-      "is_a",
-      _tao_server_request.service_info (),
-      interface_id.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_a (
-          interface_id.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::InterfaceDef::create_attribute_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-  IR::AttributeDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::IDLType_var type;
-  IR::AttributeMode mode;
-  IR::ExceptionDefSeq get_exceptions;
-  IR::ExceptionDefSeq put_exceptions;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> type.out ()) &&
-    (_tao_in >> mode) &&
-    (_tao_in >> get_exceptions) &&
-    (_tao_in >> put_exceptions)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute ri (
-      "create_attribute",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      type.in (),
-      mode,
-      get_exceptions,
-      put_exceptions,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_attribute (
-          id.in (),
-          name.in (),
-          version.in (),
-          type.in (),
-          mode,
-          get_exceptions,
-          put_exceptions,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::AttributeDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::InterfaceDef::create_operation_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *)_tao_object_reference;
-
-  IR::OperationDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::IDLType_var result;
-  IR::OperationMode mode;
-  IR::ParDescriptionSeq params;
-  IR::ExceptionDefSeq exceptions;
-  IR::ContextIdSeq contexts;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> result.out ()) &&
-    (_tao_in >> mode) &&
-    (_tao_in >> params) &&
-    (_tao_in >> exceptions) &&
-    (_tao_in >> contexts)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation ri (
-      "create_operation",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      result.in (),
-      mode,
-      params,
-      exceptions,
-      contexts,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_operation (
-          id.in (),
-          name.in (),
-          version.in (),
-          result.in (),
-          mode,
-          params,
-          exceptions,
-          contexts,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::OperationDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::InterfaceDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
-
-void POA_IR::InterfaceDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::InterfaceDef *_tao_impl = (POA_IR::InterfaceDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
-
-CORBA::Boolean POA_IR::InterfaceDef::_is_a (
-    const char* value,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/InterfaceDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
-}
-
-void* POA_IR::InterfaceDef::_downcast (
-    const char* logical_type_id
-  )
-{
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/InterfaceDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::InterfaceDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
-    return ACE_static_cast (POA_IR::Container_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
-    return ACE_static_cast (POA_IR::Contained_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
-    return ACE_static_cast (POA_IR::IDLType_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
-}
-
-void POA_IR::InterfaceDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
-{
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
-}
-
-const char* POA_IR::InterfaceDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/InterfaceDef:1.0";
-}
-
-IR::InterfaceDef*
-POA_IR::InterfaceDef::_this (CORBA_Environment &ACE_TRY_ENV)
-{
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::InterfaceDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_get::result (IR::InterfaceDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_set::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::InterfaceDefSeq & base_interfaces,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    base_interfaces_ (base_interfaces)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_base_interfaces = this->parameter_list_.length ();
-  this->parameter_list_.length (length_base_interfaces + 1);
-  this->parameter_list_[length_base_interfaces].argument <<=  this->base_interfaces_;
-  
-  this->parameter_list_[length_base_interfaces].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_base_interfaces_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_set::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Boolean & is_abstract,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    is_abstract_ (is_abstract)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_is_abstract = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_abstract + 1);
-  this->parameter_list_[length_is_abstract].argument <<= CORBA::Any::from_boolean (this->is_abstract_);
-  this->parameter_list_[length_is_abstract].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_abstract_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_set::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Boolean & is_local,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    is_local_ (is_local)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_is_local = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_local + 1);
-  this->parameter_list_[length_is_local].argument <<= CORBA::Any::from_boolean (this->is_local_);
-  this->parameter_list_[length_is_local].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_local_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_a::TAO_ServerRequestInfo_IR_InterfaceDef_is_a (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * interface_id,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    interface_id_ (interface_id)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_a::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_interface_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_interface_id + 1);
-  this->parameter_list_[length_interface_id].argument <<= interface_id_;
-  this->parameter_list_[length_interface_id].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_a::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_a::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_is_a::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    IR::AttributeMode & mode,
-    const IR::ExceptionDefSeq & get_exceptions,
-    const IR::ExceptionDefSeq & put_exceptions,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    type_ (type),
-    mode_ (mode),
-    get_exceptions_ (get_exceptions),
-    put_exceptions_ (put_exceptions)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type + 1);
-  this->parameter_list_[length_type].argument <<=  this->type_;
-  
-  this->parameter_list_[length_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_mode = this->parameter_list_.length ();
-  this->parameter_list_.length (length_mode + 1);
-  this->parameter_list_[length_mode].argument <<=  this->mode_;
-  
-  this->parameter_list_[length_mode].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_get_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_get_exceptions + 1);
-  this->parameter_list_[length_get_exceptions].argument <<=  this->get_exceptions_;
-  
-  this->parameter_list_[length_get_exceptions].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_put_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_put_exceptions + 1);
-  this->parameter_list_[length_put_exceptions].argument <<=  this->put_exceptions_;
-  
-  this->parameter_list_[length_put_exceptions].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_attribute::result (IR::AttributeDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr result,
-    IR::OperationMode & mode,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
-    const IR::ContextIdSeq & contexts,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    result_ (result),
-    mode_ (mode),
-    params_ (params),
-    exceptions_ (exceptions),
-    contexts_ (contexts)
-{}
-
-Dynamic::ParameterList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_result = this->parameter_list_.length ();
-  this->parameter_list_.length (length_result + 1);
-  this->parameter_list_[length_result].argument <<=  this->result_;
-  
-  this->parameter_list_[length_result].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_mode = this->parameter_list_.length ();
-  this->parameter_list_.length (length_mode + 1);
-  this->parameter_list_[length_mode].argument <<=  this->mode_;
-  
-  this->parameter_list_[length_mode].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_params = this->parameter_list_.length ();
-  this->parameter_list_.length (length_params + 1);
-  this->parameter_list_[length_params].argument <<=  this->params_;
-  
-  this->parameter_list_[length_params].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exceptions + 1);
-  this->parameter_list_[length_exceptions].argument <<=  this->exceptions_;
-  
-  this->parameter_list_[length_exceptions].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_contexts = this->parameter_list_.length ();
-  this->parameter_list_.length (length_contexts + 1);
-  this->parameter_list_[length_contexts].argument <<=  this->contexts_;
-  
-  this->parameter_list_[length_contexts].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::InterfaceDef::TAO_ServerRequestInfo_IR_InterfaceDef_create_operation::result (IR::OperationDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ValueMemberDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:22 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ValueMemberDef_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_ValueMemberDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
-{
-  static const unsigned char asso_values[] =
-    {
-#if defined (ACE_MVS)
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37,  0,
-     37, 37,  0,  0, 10, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37,  0,  0,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37,  0, 15, 37, 37, 37, 37, 10, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37,
-#else
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
-     37, 37, 37, 37, 37,  0, 37,  0, 37, 37,
-      0,  0, 10, 37, 37, 37, 37, 37, 37,  0,
-      0, 37, 37, 37, 37,  0, 15, 37, 37, 37,
-     37, 10, 37, 37, 37, 37, 37, 37,
-#endif /* ACE_MVS */
-    };
-  return len + asso_values[str[len - 1]] + asso_values[str[0]];
-}
-
-const class TAO_operation_db_entry *
-TAO_IR_ValueMemberDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
-{
-  enum
-    {
-      TOTAL_KEYWORDS = 20,
-      MIN_WORD_LENGTH = 4,
-      MAX_WORD_LENGTH = 26,
-      MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 36,
-      HASH_VALUE_RANGE = 33,
-      DUPLICATES = 7
-    };
-
-  static const class TAO_operation_db_entry  wordlist[] =
-    {
-      {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ValueMemberDef::move_skel},
-      {"_is_a",  &POA_IR::ValueMemberDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::ValueMemberDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ValueMemberDef::_set_id_skel},
-      {"describe", 	&POA_IR::ValueMemberDef::describe_skel},
-      {"_get_type", 	&POA_IR::ValueMemberDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::ValueMemberDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::ValueMemberDef::_get_name_skel},
-      {"_get_access", 	&POA_IR::ValueMemberDef::_get_access_skel},
-      {"_set_access", 	&POA_IR::ValueMemberDef::_set_access_skel},
-      {"_get_version", 	&POA_IR::ValueMemberDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ValueMemberDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::ValueMemberDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::ValueMemberDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::ValueMemberDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::ValueMemberDef::_get_absolute_name_skel},
-      {"_get_type_def", 	&POA_IR::ValueMemberDef::_get_type_def_skel},
-      {"_set_type_def", 	&POA_IR::ValueMemberDef::_set_type_def_skel},
-      {"_non_existent",  &POA_IR::ValueMemberDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ValueMemberDef::_get_containing_repository_skel},
-    };
-
-  static const signed char lookup[] =
-    {
-      -12,  -2, -14,  -2,   4,   5,  -1,  53,   8,  46,  -1, -47, -46,  16, 
-       -1,  17,  -1,  18,  19,  -9,  -3, -20,  -2, -38,  -6,  -2,  -1,  -1, 
-       22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23, 
-    };
-
-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
-    {
-      unsigned int key = hash (str, len);
-
-      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
-        {
-          int slot = lookup[key];
-
-          if (slot >= 0 && slot < MAX_HASH_VALUE)
-            {
-              const char *s = wordlist[slot].opname_;
-
-              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-                return &wordlist[slot];
-            }
-          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
-            return 0;
-          else
-            {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
-
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
-            }
-        }
-    }
-  return 0;
-}
-/* ending time is 10:26:22 */
-static TAO_IR_ValueMemberDef_Perfect_Hash_OpTable tao_IR_ValueMemberDef_optable;
-
-
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
-
-// Factory function Implementation.
-POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker *POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::the_TAO_ValueMemberDef_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
-}
-
-POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::_TAO_ValueMemberDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
-
-POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::~_TAO_ValueMemberDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
-}
-
-IR::_TAO_ValueMemberDef_Proxy_Impl&
-POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ValueMemberDef *object,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
-}
-
-void 
-POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
-  
-  if (this->proxy_cache_[strategy] == 0)
-    {
-      switch (strategy)
-        {
-        case TAO_ORB_Core::THRU_POA_STRATEGY:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-          
-        case TAO_ORB_Core::REMOTE_STRATEGY:
-        default:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              ::IR::_TAO_ValueMemberDef_Remote_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-        
-      }
-    
-  }
-}
-
-
-//
-//        End Strategized Proxy Broker Implementation
-///////////////////////////////////////////////////////////////////////
-
-
-IR::_TAO_ValueMemberDef_Proxy_Broker *
-IR__TAO_ValueMemberDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
-{
-  ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ValueMemberDef_Strategized_Proxy_Broker::the_TAO_ValueMemberDef_Strategized_Proxy_Broker();
-}
-
-int
-IR__TAO_ValueMemberDef_Proxy_Broker_Factory_Initializer (long _dummy_)
-{
-  ACE_UNUSED_ARG (_dummy_);
-  
-  IR__TAO_ValueMemberDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ValueMemberDef_Proxy_Broker_Factory_function;
-  
-  return 0;
-}
-
-static int IR__TAO_ValueMemberDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ValueMemberDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ValueMemberDef_Proxy_Broker_Factory_Initializer));
-
-
-///////////////////////////////////////////////////////////////////////
-//                 ThruPOA Proxy  Implementation
-//
-
-POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl (void)
-{}
-
-// ThruPOA Implementation of the IDL interface methods
-
-CORBA::TypeCode_ptr POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::type (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::TypeCode_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "type",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueMemberDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueMemberDef:1.0"
-        )
-    )->type (
-        ACE_TRY_ENV
-      );
-}
-
-IR::IDLType_ptr POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::type_def (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::IDLType_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueMemberDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueMemberDef:1.0"
-        )
-    )->type_def (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::type_def (
-    CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr type_def,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "type_def",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueMemberDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueMemberDef:1.0"
-        )
-    )->type_def (
-        type_def,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-CORBA::Visibility POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::access (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    CORBA::Visibility _tao_retval = 0;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "access",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN  (_tao_retval);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueMemberDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueMemberDef:1.0"
-        )
-    )->access (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ValueMemberDef_ThruPOA_Proxy_Impl::access (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Visibility access,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "access",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueMemberDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueMemberDef:1.0"
-        )
-    )->access (
-        access,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::ValueMemberDef::ValueMemberDef (void)
-{
-  this->optable_ = &tao_IR_ValueMemberDef_optable;
-}
-
-// copy ctor
-POA_IR::ValueMemberDef::ValueMemberDef (const ValueMemberDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::ValueMemberDef::~ValueMemberDef (void)
-{
-}
-
-void POA_IR::ValueMemberDef::_get_type_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
-
-  CORBA::TypeCode_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get ri (
-      "_get_type",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ValueMemberDef::_get_type_def_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
-
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get ri (
-      "_get_type_def",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ValueMemberDef::_set_type_def_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var type_def;
-  if (!(
-    (_tao_in >> type_def.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_set ri (
-      "_set_type_def",
-      _tao_server_request.service_info (),
-      type_def.in (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->type_def (
-          type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ValueMemberDef::_get_access_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
-
-  CORBA::Visibility _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get ri (
-      "_get_access",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->access (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Visibility _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ValueMemberDef::_set_access_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Visibility access;
-  if (!(
-    (_tao_in >> access)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_set ri (
-      "_set_access",
-      _tao_server_request.service_info (),
-      access,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->access (
-          access,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ValueMemberDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
-
-void POA_IR::ValueMemberDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueMemberDef *_tao_impl = (POA_IR::ValueMemberDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
-
-CORBA::Boolean POA_IR::ValueMemberDef::_is_a (
-    const char* value,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ValueMemberDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
-}
-
-void* POA_IR::ValueMemberDef::_downcast (
-    const char* logical_type_id
-  )
-{
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ValueMemberDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ValueMemberDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
-    return ACE_static_cast (POA_IR::Contained_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
-}
-
-void POA_IR::ValueMemberDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
-{
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
-}
-
-const char* POA_IR::ValueMemberDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/ValueMemberDef:1.0";
-}
-
-IR::ValueMemberDef*
-POA_IR::ValueMemberDef::_this (CORBA_Environment &ACE_TRY_ENV)
-{
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::ValueMemberDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_get::result (CORBA::TypeCode_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_get::result (IR::IDLType_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_set::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    type_def_ (type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type_def + 1);
-  this->parameter_list_[length_type_def].argument <<=  this->type_def_;
-  
-  this->parameter_list_[length_type_def].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_get::result (CORBA::Visibility result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_set::TAO_ServerRequestInfo_IR_ValueMemberDef_access_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Visibility & access,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    access_ (access)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_access = this->parameter_list_.length ();
-  this->parameter_list_.length (length_access + 1);
-  this->parameter_list_[length_access].argument <<= access_;
-  this->parameter_list_[length_access].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueMemberDef::TAO_ServerRequestInfo_IR_ValueMemberDef_access_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
-class TAO_IR_ValueDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
-{
-private:
-  unsigned int hash (const char *str, unsigned int len);
-public:
- const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
-};
-/* starting time is 10:26:22 */
-/* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ValueDef_Perfect_Hash_OpTable -N lookup  */
-unsigned int
-TAO_IR_ValueDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
-{
-  static const unsigned char asso_values[] =
-    {
-#if defined (ACE_MVS)
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86,  0,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86,  0,
-     86, 50, 35,  0, 86, 86, 86, 20, 86, 86,
-     86, 86, 86, 86, 86, 86, 86,  0,  0, 15,
-     86,  0, 86,  0, 86, 86, 86, 86, 86, 86,
-     86, 86, 20, 20, 86, 86, 86,  5,  5, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86,
-#else
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
-     86, 86, 86, 86, 86,  0, 86,  0, 86, 50,
-     35,  0, 86, 86, 86, 20, 86, 86,  0,  0,
-     15, 86,  0, 86,  0, 20, 20, 86, 86, 86,
-      5,  5, 86, 86, 86, 86, 86, 86,
-#endif /* ACE_MVS */
-    };
-  return len + asso_values[str[len - 1]] + asso_values[str[0]];
-}
-
-const class TAO_operation_db_entry *
-TAO_IR_ValueDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
-{
-  enum
-    {
-      TOTAL_KEYWORDS = 49,
-      MIN_WORD_LENGTH = 4,
-      MAX_WORD_LENGTH = 26,
-      MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 85,
-      HASH_VALUE_RANGE = 82,
-      DUPLICATES = 16
-    };
-
-  static const class TAO_operation_db_entry  wordlist[] =
-    {
-      {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ValueDef::move_skel},
-      {"_is_a",  &POA_IR::ValueDef::_is_a_skel},
-      {"lookup", 	&POA_IR::ValueDef::lookup_skel},
-      {"_get_name", 	&POA_IR::ValueDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::ValueDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::ValueDef::_set_name_skel},
-      {"lookup_name", 	&POA_IR::ValueDef::lookup_name_skel},
-      {"_get_is_custom", 	&POA_IR::ValueDef::_get_is_custom_skel},
-      {"_set_is_custom", 	&POA_IR::ValueDef::_set_is_custom_skel},
-      {"_get_base_value", 	&POA_IR::ValueDef::_get_base_value_skel},
-      {"_set_base_value", 	&POA_IR::ValueDef::_set_base_value_skel},
-      {"_get_absolute_name", 	&POA_IR::ValueDef::_get_absolute_name_skel},
-      {"_get_is_truncatable", 	&POA_IR::ValueDef::_get_is_truncatable_skel},
-      {"_set_is_truncatable", 	&POA_IR::ValueDef::_set_is_truncatable_skel},
-      {"is_a", 	&POA_IR::ValueDef::is_a_skel},
-      {"_get_version", 	&POA_IR::ValueDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ValueDef::_set_version_skel},
-      {"_get_defined_in", 	&POA_IR::ValueDef::_get_defined_in_skel},
-      {"_get_containing_repository", 	&POA_IR::ValueDef::_get_containing_repository_skel},
-      {"_non_existent",  &POA_IR::ValueDef::_non_existent_skel},
-      {"_get_is_abstract", 	&POA_IR::ValueDef::_get_is_abstract_skel},
-      {"_set_is_abstract", 	&POA_IR::ValueDef::_set_is_abstract_skel},
-      {"_get_initializers", 	&POA_IR::ValueDef::_get_initializers_skel},
-      {"_set_initializers", 	&POA_IR::ValueDef::_set_initializers_skel},
-      {"_get_id", 	&POA_IR::ValueDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ValueDef::_set_id_skel},
-      {"describe", 	&POA_IR::ValueDef::describe_skel},
-      {"_get_supported_interfaces", 	&POA_IR::ValueDef::_get_supported_interfaces_skel},
-      {"_set_abstract_base_values", 	&POA_IR::ValueDef::_set_abstract_base_values_skel},
-      {"_get_abstract_base_values", 	&POA_IR::ValueDef::_get_abstract_base_values_skel},
-      {"_set_supported_interfaces", 	&POA_IR::ValueDef::_set_supported_interfaces_skel},
-      {"destroy", 	&POA_IR::ValueDef::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::ValueDef::_get_def_kind_skel},
-      {"create_enum", 	&POA_IR::ValueDef::create_enum_skel},
-      {"create_value", 	&POA_IR::ValueDef::create_value_skel},
-      {"create_module", 	&POA_IR::ValueDef::create_module_skel},
-      {"create_native", 	&POA_IR::ValueDef::create_native_skel},
-      {"create_attribute", 	&POA_IR::ValueDef::create_attribute_skel},
-      {"create_interface", 	&POA_IR::ValueDef::create_interface_skel},
-      {"create_value_member", 	&POA_IR::ValueDef::create_value_member_skel},
-      {"create_value_box", 	&POA_IR::ValueDef::create_value_box_skel},
-      {"describe_contents", 	&POA_IR::ValueDef::describe_contents_skel},
-      {"create_union", 	&POA_IR::ValueDef::create_union_skel},
-      {"contents", 	&POA_IR::ValueDef::contents_skel},
-      {"create_operation", 	&POA_IR::ValueDef::create_operation_skel},
-      {"create_exception", 	&POA_IR::ValueDef::create_exception_skel},
-      {"create_alias", 	&POA_IR::ValueDef::create_alias_skel},
-      {"create_struct", 	&POA_IR::ValueDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::ValueDef::create_constant_skel},
-    };
-
-  static const signed char lookup[] =
-    {
-       -1,  -1,  -7,  -3,   4,   5,   6, -11,  -2, -92,  -1,  10, -13,  -2, 
-      -92, -88, -16,  -2,  15, -88,  -1,  -1,  -1,  -1,  18, -19,  -2, -87, 
-      -24,  -2,  21,  22,  -1,  23, -26,  -2, -93, -88, -28,  -2, -31,  -4, 
-      -89,  30,  -1, -90,  -1,  35,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1, -39,  -2,  37,  38, -89, -41,  -2, -87,  -1,  -1,  43, 
-       -1,  44,  45,  -1,  -1,  -1,  -1,  46,  47, -48,  -2, -87,  50,  51, 
-       -1,  52, 
-    };
-
-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
-    {
-      unsigned int key = hash (str, len);
-
-      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
-        {
-          int slot = lookup[key];
-
-          if (slot >= 0 && slot < MAX_HASH_VALUE)
-            {
-              const char *s = wordlist[slot].opname_;
-
-              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
-                return &wordlist[slot];
-            }
-          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
-            return 0;
-          else
-            {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
-
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
-            }
-        }
-    }
-  return 0;
-}
-/* ending time is 10:26:22 */
-static TAO_IR_ValueDef_Perfect_Hash_OpTable tao_IR_ValueDef_optable;
-
-
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
-
-// Factory function Implementation.
-POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker *POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::the_TAO_ValueDef_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
-}
-
-POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::_TAO_ValueDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
-
-POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::~_TAO_ValueDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
-}
-
-IR::_TAO_ValueDef_Proxy_Impl&
-POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ValueDef *object,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
-}
-
-void 
-POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
-  
-  if (this->proxy_cache_[strategy] == 0)
-    {
-      switch (strategy)
-        {
-        case TAO_ORB_Core::THRU_POA_STRATEGY:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-          
-        case TAO_ORB_Core::REMOTE_STRATEGY:
-        default:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              ::IR::_TAO_ValueDef_Remote_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-        
-      }
-    
-  }
-}
-
-
-//
-//        End Strategized Proxy Broker Implementation
-///////////////////////////////////////////////////////////////////////
-
-
-IR::_TAO_ValueDef_Proxy_Broker *
-IR__TAO_ValueDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
-{
-  ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::the_TAO_ValueDef_Strategized_Proxy_Broker();
-}
-
-int
-IR__TAO_ValueDef_Proxy_Broker_Factory_Initializer (long _dummy_)
-{
-  ACE_UNUSED_ARG (_dummy_);
-  
-  IR__TAO_ValueDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ValueDef_Proxy_Broker_Factory_function;
-  
-  return 0;
-}
-
-static int IR__TAO_ValueDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ValueDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ValueDef_Proxy_Broker_Factory_Initializer));
-
-
-///////////////////////////////////////////////////////////////////////
-//                 ThruPOA Proxy  Implementation
-//
-
-POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::_TAO_ValueDef_ThruPOA_Proxy_Impl (void)
-{}
-
-// ThruPOA Implementation of the IDL interface methods
-
-IR::InterfaceDefSeq * POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::supported_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::InterfaceDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "supported_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->supported_interfaces (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::supported_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    const IR::InterfaceDefSeq & supported_interfaces,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "supported_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->supported_interfaces (
-        supported_interfaces,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-IR::InitializerSeq * POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::initializers (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::InitializerSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "initializers",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->initializers (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::initializers (
-    CORBA_Object *_collocated_tao_target_,
-    const IR::InitializerSeq & initializers,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "initializers",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->initializers (
-        initializers,
-        ACE_TRY_ENV
-      );
-  return;
-}
-
-IR::ValueDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::base_value (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::ValueDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "base_value",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->base_value (
-        ACE_TRY_ENV
-      );
+/* ending time is 11:23:11 */
+static TAO_IR_ValueDef_Perfect_Hash_OpTable tao_IR_ValueDef_optable;
+
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
+
+// Factory function Implementation.
+POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker *POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::the_TAO_ValueDef_Strategized_Proxy_Broker (void)
+{
+  static POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
 }
 
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::base_value (
-    CORBA_Object *_collocated_tao_target_,
-    IR::ValueDef_ptr base_value,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::_TAO_ValueDef_Strategized_Proxy_Broker (void)
 {
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "base_value",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->base_value (
-        base_value,
-        ACE_TRY_ENV
-      );
-  return;
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
+  
 }
 
-IR::ValueDefSeq * POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::abstract_base_values (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::~_TAO_ValueDef_Strategized_Proxy_Broker (void)
 {
-    IR::ValueDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "abstract_base_values",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->abstract_base_values (
-        ACE_TRY_ENV
-      );
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
+  
 }
 
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::abstract_base_values (
-    CORBA_Object *_collocated_tao_target_,
-    const IR::ValueDefSeq & abstract_base_values,
+_TAO_ValueDef_Proxy_Impl&
+POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ValueDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "abstract_base_values",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->abstract_base_values (
-        abstract_base_values,
-        ACE_TRY_ENV
-      );
-  return;
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
+  
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
+  
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
+  
+  return *this->proxy_cache_[strategy];
+  
 }
 
-CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_abstract (
-    CORBA_Object *_collocated_tao_target_,
+void 
+POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    CORBA::Boolean _tao_retval = 0;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_abstract",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN  (_tao_retval);
-    return ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->is_abstract (
-        ACE_TRY_ENV
-      );
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
+  
+  if (this->proxy_cache_[strategy] == 0)
+    {
+      switch (strategy)
+        {
+        case TAO_ORB_Core::THRU_POA_STRATEGY:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ValueDef_ThruPOA_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+          
+        case TAO_ORB_Core::REMOTE_STRATEGY:
+        default:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ValueDef_Remote_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+        
+      }
+    
+  }
 }
 
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_abstract (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Boolean is_abstract,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+
+//
+//        End Strategized Proxy Broker Implementation
+///////////////////////////////////////////////////////////////////////
+
+
+_TAO_ValueDef_Proxy_Broker *
+_TAO_ValueDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_abstract",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ValueDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ValueDef:1.0"
-        )
-    )->is_abstract (
-        is_abstract,
-        ACE_TRY_ENV
-      );
-  return;
+  ACE_UNUSED_ARG (obj);
+  return ::POA_IR::_TAO_ValueDef_Strategized_Proxy_Broker::the_TAO_ValueDef_Strategized_Proxy_Broker();
 }
 
-CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_custom (
+int
+_TAO_ValueDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+{
+  ACE_UNUSED_ARG (_dummy_);
+  
+  _TAO_ValueDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ValueDef_Proxy_Broker_Factory_function;
+  
+  return 0;
+}
+
+static int _TAO_ValueDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ValueDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ValueDef_Proxy_Broker_Factory_Initializer));
+
+
+///////////////////////////////////////////////////////////////////////
+//                 ThruPOA Proxy  Implementation
+//
+
+POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::_TAO_ValueDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::~_TAO_ValueDef_ThruPOA_Proxy_Impl (void)
+{}
+
+// ThruPOA Implementation of the IDL interface methods
+
+IR::InterfaceDefSeq * POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::supported_interfaces (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -26271,7 +16507,7 @@
     CORBA::SystemException
   ))
 {
-    CORBA::Boolean _tao_retval = 0;
+    IR_InterfaceDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -26279,24 +16515,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "is_custom",
+      "supported_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN  (_tao_retval);
+      ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
       POA_IR::ValueDef_ptr,
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->is_custom (
+    )->supported_interfaces (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_custom (
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::supported_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::Boolean is_custom,
+    const IR_InterfaceDefSeq & supported_interfaces,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -26309,7 +16545,7 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "is_custom",
+      "supported_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
@@ -26319,14 +16555,14 @@
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->is_custom (
-        is_custom,
+    )->supported_interfaces (
+        supported_interfaces,
         ACE_TRY_ENV
       );
   return;
 }
 
-CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_truncatable (
+IR::InitializerSeq * POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::initializers (
     CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -26334,7 +16570,7 @@
     CORBA::SystemException
   ))
 {
-    CORBA::Boolean _tao_retval = 0;
+    IR_InitializerSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -26342,24 +16578,24 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "is_truncatable",
+      "initializers",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN  (_tao_retval);
+      ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
       POA_IR::ValueDef_ptr,
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->is_truncatable (
+    )->initializers (
         ACE_TRY_ENV
       );
 }
 
-void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_truncatable (
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::initializers (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::Boolean is_truncatable,
+    const IR_InitializerSeq & initializers,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -26372,7 +16608,7 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "is_truncatable",
+      "initializers",
       forward_to.out (),
       ACE_TRY_ENV
     );
@@ -26382,23 +16618,22 @@
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->is_truncatable (
-        is_truncatable,
+    )->initializers (
+        initializers,
         ACE_TRY_ENV
       );
   return;
 }
 
-CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_a (
+IR::ValueDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::base_value (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    CORBA::Boolean _tao_retval = 0;
+    IR_ValueDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -26406,79 +16641,62 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "is_a",
+      "base_value",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN  (_tao_retval);
+      ACE_CHECK_RETURN (0);
     return ACE_reinterpret_cast (
       POA_IR::ValueDef_ptr,
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->is_a (
-        id,
+    )->base_value (
         ACE_TRY_ENV
       );
 }
 
-IR::ValueMemberDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::create_value_member (
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::base_value (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    CORBA::Visibility access,
+    IR_ValueDef_ptr base_value,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ValueMemberDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_value_member",
+      "base_value",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
+      ACE_CHECK;
+    ACE_reinterpret_cast (
       POA_IR::ValueDef_ptr,
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->create_value_member (
-        id,
-        name,
-        version,
-        type,
-        access,
+    )->base_value (
+        base_value,
         ACE_TRY_ENV
       );
+  return;
 }
 
-IR::AttributeDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::create_attribute (
+IR::ValueDefSeq * POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::abstract_base_values (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    IR::AttributeMode mode,
-    const IR::ExceptionDefSeq & get_exceptions,
-    const IR::ExceptionDefSeq & put_exceptions,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::AttributeDef_var _tao_retval;
+    IR_ValueDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -26486,7 +16704,7 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_attribute",
+      "abstract_base_values",
       forward_to.out (),
       ACE_TRY_ENV
     );
@@ -26496,2340 +16714,1061 @@
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->create_attribute (
-        id,
-        name,
-        version,
-        type,
-        mode,
-        get_exceptions,
-        put_exceptions,
+    )->abstract_base_values (
         ACE_TRY_ENV
       );
 }
 
-IR::OperationDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::create_operation (
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::abstract_base_values (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr result,
-    IR::OperationMode mode,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
-    const IR::ContextIdSeq & contexts,
+    const IR_ValueDefSeq & abstract_base_values,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::OperationDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_operation",
+      "abstract_base_values",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
+      ACE_CHECK;
+    ACE_reinterpret_cast (
       POA_IR::ValueDef_ptr,
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ValueDef:1.0"
         )
-    )->create_operation (
-        id,
-        name,
-        version,
-        result,
-        mode,
-        params,
-        exceptions,
-        contexts,
+    )->abstract_base_values (
+        abstract_base_values,
         ACE_TRY_ENV
       );
-}
-
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::ValueDef::ValueDef (void)
-{
-  this->optable_ = &tao_IR_ValueDef_optable;
-}
-
-// copy ctor
-POA_IR::ValueDef::ValueDef (const ValueDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::ValueDef::~ValueDef (void)
-{
-}
-
-void POA_IR::ValueDef::_get_supported_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  IR::InterfaceDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get ri (
-      "_get_supported_interfaces",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->supported_interfaces (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InterfaceDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ValueDef::_set_supported_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::InterfaceDefSeq supported_interfaces;
-  if (!(
-    (_tao_in >> supported_interfaces)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_set ri (
-      "_set_supported_interfaces",
-      _tao_server_request.service_info (),
-      supported_interfaces,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->supported_interfaces (
-          supported_interfaces,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ValueDef::_get_initializers_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  IR::InitializerSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_get ri (
-      "_get_initializers",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->initializers (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InitializerSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ValueDef::_set_initializers_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::InitializerSeq initializers;
-  if (!(
-    (_tao_in >> initializers)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_set ri (
-      "_set_initializers",
-      _tao_server_request.service_info (),
-      initializers,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->initializers (
-          initializers,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ValueDef::_get_base_value_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  IR::ValueDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_get ri (
-      "_get_base_value",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->base_value (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ValueDef::_set_base_value_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::ValueDef_var base_value;
-  if (!(
-    (_tao_in >> base_value.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+  return;
+}
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_abstract (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
+{
+    CORBA::Boolean _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_set ri (
-      "_set_base_value",
-      _tao_server_request.service_info (),
-      base_value.in (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_abstract",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->base_value (
-          base_value.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_abstract (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ValueDef::_get_abstract_base_values_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_abstract (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Boolean is_abstract,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  IR::ValueDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get ri (
-      "_get_abstract_base_values",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_abstract",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->abstract_base_values (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_abstract (
+        is_abstract,
+        ACE_TRY_ENV
+      );
+  return;
 }
 
-void POA_IR::ValueDef::_set_abstract_base_values_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_custom (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::ValueDefSeq abstract_base_values;
-  if (!(
-    (_tao_in >> abstract_base_values)
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    CORBA::Boolean _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_set ri (
-      "_set_abstract_base_values",
-      _tao_server_request.service_info (),
-      abstract_base_values,
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_custom",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->abstract_base_values (
-          abstract_base_values,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_custom (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ValueDef::_get_is_abstract_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_custom (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Boolean is_custom,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get ri (
-      "_get_is_abstract",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_custom",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_abstract (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_custom (
+        is_custom,
+        ACE_TRY_ENV
+      );
+  return;
 }
 
-void POA_IR::ValueDef::_set_is_abstract_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_truncatable (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Boolean is_abstract;
-  if (!(
-    (_tao_in >> CORBA::Any::to_boolean (is_abstract))
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    CORBA::Boolean _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_set ri (
-      "_set_is_abstract",
-      _tao_server_request.service_info (),
-      is_abstract,
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_truncatable",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->is_abstract (
-          is_abstract,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_truncatable (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ValueDef::_get_is_custom_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+void POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_truncatable (
+    CORBA_Object *_collocated_tao_target_,
+    CORBA::Boolean is_truncatable,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get ri (
-      "_get_is_custom",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_truncatable",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_custom (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK;
+    ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_truncatable (
+        is_truncatable,
+        ACE_TRY_ENV
+      );
+  return;
 }
 
-void POA_IR::ValueDef::_set_is_custom_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+CORBA::Boolean POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::is_a (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Boolean is_custom;
-  if (!(
-    (_tao_in >> CORBA::Any::to_boolean (is_custom))
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    CORBA::Boolean _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_set ri (
-      "_set_is_custom",
-      _tao_server_request.service_info (),
-      is_custom,
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_a",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->is_custom (
-          is_custom,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->is_a (
+        id,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ValueDef::_get_is_truncatable_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::ValueMemberDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::create_value_member (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_IDLType_ptr type,
+    CORBA::Visibility access,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_ValueMemberDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get ri (
-      "_get_is_truncatable",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_value_member",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_truncatable (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->create_value_member (
+        id,
+        name,
+        version,
+        type,
+        access,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ValueDef::_set_is_truncatable_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::AttributeDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::create_attribute (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_IDLType_ptr type,
+    IR_AttributeMode mode,
+    const IR_ExceptionDefSeq & get_exceptions,
+    const IR_ExceptionDefSeq & put_exceptions,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    CORBA::Boolean is_truncatable;
-  if (!(
-    (_tao_in >> CORBA::Any::to_boolean (is_truncatable))
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    IR_AttributeDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_set ri (
-      "_set_is_truncatable",
-      _tao_server_request.service_info (),
-      is_truncatable,
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_attribute",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->is_truncatable (
-          is_truncatable,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->create_attribute (
+        id,
+        name,
+        version,
+        type,
+        mode,
+        get_exceptions,
+        put_exceptions,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ValueDef::is_a_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::OperationDef_ptr POA_IR::_TAO_ValueDef_ThruPOA_Proxy_Impl::create_operation (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_IDLType_ptr result,
+    IR_OperationMode mode,
+    const IR_ParDescriptionSeq & params,
+    const IR_ExceptionDefSeq & exceptions,
+    const IR_ContextIdSeq & contexts,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var id;
-  if (!(
-    (_tao_in >> id.out ())
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    IR_OperationDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_a ri (
-      "is_a",
-      _tao_server_request.service_info (),
-      id.in (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_operation",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_a (
-          id.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ValueDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ValueDef:1.0"
+        )
+    )->create_operation (
+        id,
+        name,
+        version,
+        result,
+        mode,
+        params,
+        exceptions,
+        contexts,
+        ACE_TRY_ENV
+      );
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
 
+// skeleton constructor
+POA_IR::ValueDef::ValueDef (void)
+{
+  this->optable_ = &tao_IR_ValueDef_optable;
 }
 
-void POA_IR::ValueDef::create_value_member_skel (
+// copy ctor
+POA_IR::ValueDef::ValueDef (const ValueDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
+
+// skeleton destructor
+POA_IR::ValueDef::~ValueDef (void)
+{
+}
+
+void POA_IR::ValueDef::_get_supported_interfaces_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
-
-  IR::ValueMemberDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::IDLType_var type;
-  CORBA::Visibility access;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> type.out ()) &&
-    (_tao_in >> access)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_value_member ri (
-      "create_value_member",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      type.in (),
-      access,
+
+  IR_InterfaceDefSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->supported_interfaces (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_value_member (
-          id.in (),
-          name.in (),
-          version.in (),
-          type.in (),
-          access,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueMemberDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ValueDef::create_attribute_skel (
+void POA_IR::ValueDef::_set_supported_interfaces_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-  IR::AttributeDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::IDLType_var type;
-  IR::AttributeMode mode;
-  IR::ExceptionDefSeq get_exceptions;
-  IR::ExceptionDefSeq put_exceptions;
+  IR_InterfaceDefSeq supported_interfaces;
   if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> type.out ()) &&
-    (_tao_in >> mode) &&
-    (_tao_in >> get_exceptions) &&
-    (_tao_in >> put_exceptions)
+    (_tao_in >> supported_interfaces)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_attribute ri (
-      "create_attribute",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      type.in (),
-      mode,
-      get_exceptions,
-      put_exceptions,
+  _tao_impl->supported_interfaces (
+      supported_interfaces,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_attribute (
-          id.in (),
-          name.in (),
-          version.in (),
-          type.in (),
-          mode,
-          get_exceptions,
-          put_exceptions,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::AttributeDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::ValueDef::create_operation_skel (
+void POA_IR::ValueDef::_get_initializers_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-  IR::OperationDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::IDLType_var result;
-  IR::OperationMode mode;
-  IR::ParDescriptionSeq params;
-  IR::ExceptionDefSeq exceptions;
-  IR::ContextIdSeq contexts;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> result.out ()) &&
-    (_tao_in >> mode) &&
-    (_tao_in >> params) &&
-    (_tao_in >> exceptions) &&
-    (_tao_in >> contexts)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+  IR_InitializerSeq_var _tao_retval;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_operation ri (
-      "create_operation",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      result.in (),
-      mode,
-      params,
-      exceptions,
-      contexts,
+  _tao_retval = _tao_impl->initializers (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_operation (
-          id.in (),
-          name.in (),
-          version.in (),
-          result.in (),
-          mode,
-          params,
-          exceptions,
-          contexts,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::OperationDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ValueDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
+void POA_IR::ValueDef::_set_initializers_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
+
+  IR_InitializerSeq initializers;
+  if (!(
+    (_tao_in >> initializers)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
+
+  _tao_impl->initializers (
+      initializers,
+      ACE_TRY_ENV
+    );
+
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
 }
 
-void POA_IR::ValueDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
+void POA_IR::ValueDef::_get_base_value_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-CORBA::Boolean POA_IR::ValueDef::_is_a (
-    const char* value,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ValueDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
-}
+  IR_ValueDef_var _tao_retval;
 
-void* POA_IR::ValueDef::_downcast (
-    const char* logical_type_id
-  )
-{
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ValueDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ValueDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
-    return ACE_static_cast (POA_IR::Container_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
-    return ACE_static_cast (POA_IR::Contained_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
-    return ACE_static_cast (POA_IR::IDLType_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
-}
+  _tao_retval = _tao_impl->base_value (
+      ACE_TRY_ENV
+    );
 
-void POA_IR::ValueDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
-{
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
-}
+  ACE_CHECK;
 
-const char* POA_IR::ValueDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/ValueDef:1.0";
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-IR::ValueDef*
-POA_IR::ValueDef::_this (CORBA_Environment &ACE_TRY_ENV)
+void POA_IR::ValueDef::_set_base_value_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::ValueDef::_unchecked_narrow (obj.in ());
-}
-
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  IR_ValueDef_var base_value;
+  if (!(
+    (_tao_in >> base_value.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_impl->base_value (
+      base_value.in (),
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_get_abstract_base_values_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_get::result (IR::InterfaceDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  IR_ValueDefSeq_var _tao_retval;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_set::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::InterfaceDefSeq & supported_interfaces,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    supported_interfaces_ (supported_interfaces)
-{}
+  _tao_retval = _tao_impl->abstract_base_values (
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_supported_interfaces = this->parameter_list_.length ();
-  this->parameter_list_.length (length_supported_interfaces + 1);
-  this->parameter_list_[length_supported_interfaces].argument <<=  this->supported_interfaces_;
-  
-  this->parameter_list_[length_supported_interfaces].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_supported_interfaces_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_set_abstract_base_values_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_get::TAO_ServerRequestInfo_IR_ValueDef_initializers_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_ValueDefSeq abstract_base_values;
+  if (!(
+    (_tao_in >> abstract_base_values)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
+  _tao_impl->abstract_base_values (
+      abstract_base_values,
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
 }
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_get::result (IR::InitializerSeq * result)
+void POA_IR::ValueDef::_get_is_abstract_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_set::TAO_ServerRequestInfo_IR_ValueDef_initializers_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::InitializerSeq & initializers,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    initializers_ (initializers)
-{}
+  CORBA::Boolean _tao_retval = 0;
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_initializers = this->parameter_list_.length ();
-  this->parameter_list_.length (length_initializers + 1);
-  this->parameter_list_[length_initializers].argument <<=  this->initializers_;
-  
-  this->parameter_list_[length_initializers].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  _tao_retval = _tao_impl->is_abstract (
+      ACE_TRY_ENV
+    );
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_initializers_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_set_is_abstract_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_get::TAO_ServerRequestInfo_IR_ValueDef_base_value_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  CORBA::Boolean is_abstract;
+  if (!(
+    (_tao_in >> CORBA::Any::to_boolean (is_abstract))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_impl->is_abstract (
+      is_abstract,
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_get_is_custom_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_get::result (IR::ValueDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  CORBA::Boolean _tao_retval = 0;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_set::TAO_ServerRequestInfo_IR_ValueDef_base_value_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::ValueDef_ptr base_value,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    base_value_ (base_value)
-{}
+  _tao_retval = _tao_impl->is_custom (
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_base_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_base_value + 1);
-  this->parameter_list_[length_base_value].argument <<=  this->base_value_;
-  
-  this->parameter_list_[length_base_value].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_base_value_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_set_is_custom_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  CORBA::Boolean is_custom;
+  if (!(
+    (_tao_in >> CORBA::Any::to_boolean (is_custom))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_impl->is_custom (
+      is_custom,
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_get_is_truncatable_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_get::result (IR::ValueDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  CORBA::Boolean _tao_retval = 0;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_set::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::ValueDefSeq & abstract_base_values,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    abstract_base_values_ (abstract_base_values)
-{}
+  _tao_retval = _tao_impl->is_truncatable (
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_abstract_base_values = this->parameter_list_.length ();
-  this->parameter_list_.length (length_abstract_base_values + 1);
-  this->parameter_list_[length_abstract_base_values].argument <<=  this->abstract_base_values_;
-  
-  this->parameter_list_[length_abstract_base_values].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_abstract_base_values_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_set_is_truncatable_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  CORBA::Boolean is_truncatable;
+  if (!(
+    (_tao_in >> CORBA::Any::to_boolean (is_truncatable))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_impl->is_truncatable (
+      is_truncatable,
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var id;
+  if (!(
+    (_tao_in >> id.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_set::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Boolean & is_abstract,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    is_abstract_ (is_abstract)
-{}
+  _tao_retval = _tao_impl->is_a (
+      id.in (),
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_is_abstract = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_abstract + 1);
-  this->parameter_list_[length_is_abstract].argument <<= CORBA::Any::from_boolean (this->is_abstract_);
-  this->parameter_list_[length_is_abstract].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_abstract_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::create_value_member_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_ValueMemberDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_IDLType_var type;
+  CORBA::Visibility access;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> type.out ()) &&
+    (_tao_in >> access)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
+  _tao_retval = _tao_impl->create_value_member (
+      id.in (),
+      name.in (),
+      version.in (),
+      type.in (),
+      access,
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_get::result (CORBA::Boolean result)
+void POA_IR::ValueDef::create_attribute_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_set::TAO_ServerRequestInfo_IR_ValueDef_is_custom_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Boolean & is_custom,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    is_custom_ (is_custom)
-{}
+  IR_AttributeDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_IDLType_var type;
+  IR_AttributeMode mode;
+  IR_ExceptionDefSeq get_exceptions;
+  IR_ExceptionDefSeq put_exceptions;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> type.out ()) &&
+    (_tao_in >> mode) &&
+    (_tao_in >> get_exceptions) &&
+    (_tao_in >> put_exceptions)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_is_custom = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_custom + 1);
-  this->parameter_list_[length_is_custom].argument <<= CORBA::Any::from_boolean (this->is_custom_);
-  this->parameter_list_[length_is_custom].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  _tao_retval = _tao_impl->create_attribute (
+      id.in (),
+      name.in (),
+      version.in (),
+      type.in (),
+      mode,
+      get_exceptions,
+      put_exceptions,
+      ACE_TRY_ENV
+    );
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_custom_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::create_operation_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the arg list on demand
-  return 0;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *)_tao_object_reference;
 
+  IR_OperationDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_IDLType_var result;
+  IR_OperationMode mode;
+  IR_ParDescriptionSeq params;
+  IR_ExceptionDefSeq exceptions;
+  IR_ContextIdSeq contexts;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> result.out ()) &&
+    (_tao_in >> mode) &&
+    (_tao_in >> params) &&
+    (_tao_in >> exceptions) &&
+    (_tao_in >> contexts)
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-  Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->create_operation (
+      id.in (),
+      name.in (),
+      version.in (),
+      result.in (),
+      mode,
+      params,
+      exceptions,
+      contexts,
+      ACE_TRY_ENV
+    );
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  ACE_CHECK;
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_set::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const CORBA::Boolean & is_truncatable,
-    CORBA::Environment &
+void POA_IR::ValueDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    is_truncatable_ (is_truncatable)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_is_truncatable = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_truncatable + 1);
-  this->parameter_list_[length_is_truncatable].argument <<= CORBA::Any::from_boolean (this->is_truncatable_);
-  this->parameter_list_[length_is_truncatable].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_truncatable_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_a::TAO_ServerRequestInfo_IR_ValueDef_is_a (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    CORBA::Environment &
+void POA_IR::ValueDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_a::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  POA_IR::ValueDef *_tao_impl = (POA_IR::ValueDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_a::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_a::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+CORBA::Boolean POA_IR::ValueDef::_is_a (
+    const char* value,
+    CORBA::Environment &ACE_TRY_ENV
+  )
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ValueDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
 }
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_is_a::result (CORBA::Boolean result)
+void* POA_IR::ValueDef::_downcast (
+    const char* logical_type_id
+  )
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_value_member::TAO_ServerRequestInfo_IR_ValueDef_create_value_member (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    const CORBA::Visibility & access,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    type_ (type),
-    access_ (access)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_value_member::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type + 1);
-  this->parameter_list_[length_type].argument <<=  this->type_;
-  
-  this->parameter_list_[length_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_access = this->parameter_list_.length ();
-  this->parameter_list_.length (length_access + 1);
-  this->parameter_list_[length_access].argument <<= access_;
-  this->parameter_list_[length_access].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_value_member::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ValueDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ValueDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
+    return ACE_static_cast (POA_IR::Container_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
+    return ACE_static_cast (POA_IR::IDLType_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
 
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_value_member::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_value_member::result (IR::ValueMemberDef_ptr result)
+const char* POA_IR::ValueDef::_interface_repository_id (void) const
 {
-  // update the result 
-   this->result_ = result;
+  return "IDL:omg.org/IR/ValueDef:1.0";
 }
 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_attribute::TAO_ServerRequestInfo_IR_ValueDef_create_attribute (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr type,
-    IR::AttributeMode & mode,
-    const IR::ExceptionDefSeq & get_exceptions,
-    const IR::ExceptionDefSeq & put_exceptions,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    type_ (type),
-    mode_ (mode),
-    get_exceptions_ (get_exceptions),
-    put_exceptions_ (put_exceptions)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_attribute::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_type + 1);
-  this->parameter_list_[length_type].argument <<=  this->type_;
-  
-  this->parameter_list_[length_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_mode = this->parameter_list_.length ();
-  this->parameter_list_.length (length_mode + 1);
-  this->parameter_list_[length_mode].argument <<=  this->mode_;
-  
-  this->parameter_list_[length_mode].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_get_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_get_exceptions + 1);
-  this->parameter_list_[length_get_exceptions].argument <<=  this->get_exceptions_;
-  
-  this->parameter_list_[length_get_exceptions].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_put_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_put_exceptions + 1);
-  this->parameter_list_[length_put_exceptions].argument <<=  this->put_exceptions_;
-  
-  this->parameter_list_[length_put_exceptions].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_attribute::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_attribute::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+IR::ValueDef*
+POA_IR::ValueDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
-  // Generate the result on demand
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
   
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_attribute::result (IR::AttributeDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_operation::TAO_ServerRequestInfo_IR_ValueDef_create_operation (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::IDLType_ptr result,
-    IR::OperationMode & mode,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
-    const IR::ContextIdSeq & contexts,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    result_ (result),
-    mode_ (mode),
-    params_ (params),
-    exceptions_ (exceptions),
-    contexts_ (contexts)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_operation::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_result = this->parameter_list_.length ();
-  this->parameter_list_.length (length_result + 1);
-  this->parameter_list_[length_result].argument <<=  this->result_;
-  
-  this->parameter_list_[length_result].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_mode = this->parameter_list_.length ();
-  this->parameter_list_.length (length_mode + 1);
-  this->parameter_list_[length_mode].argument <<=  this->mode_;
-  
-  this->parameter_list_[length_mode].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_params = this->parameter_list_.length ();
-  this->parameter_list_.length (length_params + 1);
-  this->parameter_list_[length_params].argument <<=  this->params_;
-  
-  this->parameter_list_[length_params].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exceptions + 1);
-  this->parameter_list_[length_exceptions].argument <<=  this->exceptions_;
-  
-  this->parameter_list_[length_exceptions].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_contexts = this->parameter_list_.length ();
-  this->parameter_list_.length (length_contexts + 1);
-  this->parameter_list_[length_contexts].argument <<=  this->contexts_;
-  
-  this->parameter_list_[length_contexts].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_operation::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_operation::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
   
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ValueDef::TAO_ServerRequestInfo_IR_ValueDef_create_operation::result (IR::OperationDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
+  
+  CORBA::Object_var obj = tmp;
+  return IR_ValueDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_ValueBoxDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -28837,7 +17776,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ValueBoxDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -28908,31 +17847,31 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ValueBoxDef::move_skel},
+      {"move",  &POA_IR::ValueBoxDef::move_skel},
       {"_is_a",  &POA_IR::ValueBoxDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::ValueBoxDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ValueBoxDef::_set_id_skel},
-      {"describe", 	&POA_IR::ValueBoxDef::describe_skel},
-      {"_get_name", 	&POA_IR::ValueBoxDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::ValueBoxDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::ValueBoxDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::ValueBoxDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ValueBoxDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::ValueBoxDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::ValueBoxDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::ValueBoxDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::ValueBoxDef::_get_absolute_name_skel},
-      {"_get_original_type_def", 	&POA_IR::ValueBoxDef::_get_original_type_def_skel},
-      {"_set_original_type_def", 	&POA_IR::ValueBoxDef::_set_original_type_def_skel},
+      {"_get_id",       &POA_IR::ValueBoxDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ValueBoxDef::_set_id_skel},
+      {"describe",      &POA_IR::ValueBoxDef::describe_skel},
+      {"_get_name",     &POA_IR::ValueBoxDef::_get_name_skel},
+      {"_get_type",     &POA_IR::ValueBoxDef::_get_type_skel},
+      {"_set_name",     &POA_IR::ValueBoxDef::_set_name_skel},
+      {"_get_version",  &POA_IR::ValueBoxDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ValueBoxDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::ValueBoxDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::ValueBoxDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::ValueBoxDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::ValueBoxDef::_get_absolute_name_skel},
+      {"_get_original_type_def",        &POA_IR::ValueBoxDef::_get_original_type_def_skel},
+      {"_set_original_type_def",        &POA_IR::ValueBoxDef::_set_original_type_def_skel},
       {"_non_existent",  &POA_IR::ValueBoxDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ValueBoxDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::ValueBoxDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14, 
-       -1,  15,  -1,  16,  17,  -1, -18,  -2, -38,  20,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21, 
+       -6,  -2,  -9,  -3,   4,   5,  -1, -43,   8, -43, -12,  -2, -38,  14,
+       -1,  15,  -1,  16,  17,  -1, -18,  -2, -38,  20,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -28966,10 +17905,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_ValueBoxDef_Perfect_Hash_OpTable tao_IR_ValueBoxDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -28995,9 +17933,9 @@
   
 }
 
-IR::_TAO_ValueBoxDef_Proxy_Impl&
+_TAO_ValueBoxDef_Proxy_Impl&
 POA_IR::_TAO_ValueBoxDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ValueBoxDef *object,
+    IR_ValueBoxDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -29029,7 +17967,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ValueBoxDef_ThruPOA_Proxy_Impl,
+              _TAO_ValueBoxDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -29039,7 +17977,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ValueBoxDef_Remote_Proxy_Impl,
+              _TAO_ValueBoxDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -29056,26 +17994,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ValueBoxDef_Proxy_Broker *
-IR__TAO_ValueBoxDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ValueBoxDef_Proxy_Broker *
+_TAO_ValueBoxDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_ValueBoxDef_Strategized_Proxy_Broker::the_TAO_ValueBoxDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ValueBoxDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ValueBoxDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ValueBoxDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ValueBoxDef_Proxy_Broker_Factory_function;
+  _TAO_ValueBoxDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ValueBoxDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ValueBoxDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ValueBoxDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ValueBoxDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_ValueBoxDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ValueBoxDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ValueBoxDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -29085,6 +18023,9 @@
 POA_IR::_TAO_ValueBoxDef_ThruPOA_Proxy_Impl::_TAO_ValueBoxDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_ValueBoxDef_ThruPOA_Proxy_Impl::~_TAO_ValueBoxDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 IR::IDLType_ptr POA_IR::_TAO_ValueBoxDef_ThruPOA_Proxy_Impl::original_type_def (
@@ -29095,7 +18036,7 @@
     CORBA::SystemException
   ))
 {
-    IR::IDLType_var _tao_retval;
+    IR_IDLType_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -29120,7 +18061,7 @@
 
 void POA_IR::_TAO_ValueBoxDef_ThruPOA_Proxy_Impl::original_type_def (
     CORBA_Object *_collocated_tao_target_,
-    IR::IDLType_ptr original_type_def,
+    IR_IDLType_ptr original_type_def,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -29176,134 +18117,57 @@
 
 void POA_IR::ValueBoxDef::_get_original_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::ValueBoxDef *_tao_impl = (POA_IR::ValueBoxDef *)_tao_object_reference;
 
-  IR::IDLType_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get ri (
-      "_get_original_type_def",
-      _tao_server_request.service_info (),
+  IR_IDLType_var _tao_retval;
+
+  _tao_retval = _tao_impl->original_type_def (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->original_type_def (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::IDLType_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::ValueBoxDef::_set_original_type_def_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::ValueBoxDef *_tao_impl = (POA_IR::ValueBoxDef *)_tao_object_reference;
 
-_tao_server_request.argument_flag (0);
-    IR::IDLType_var original_type_def;
+  IR_IDLType_var original_type_def;
   if (!(
     (_tao_in >> original_type_def.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_set ri (
-      "_set_original_type_def",
-      _tao_server_request.service_info (),
+  _tao_impl->original_type_def (
       original_type_def.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->original_type_def (
-          original_type_def.in (),
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
 }
 
 void POA_IR::ValueBoxDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -29313,20 +18177,20 @@
   POA_IR::ValueBoxDef *_tao_impl = (POA_IR::ValueBoxDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::ValueBoxDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -29335,10 +18199,10 @@
   POA_IR::ValueBoxDef *_tao_impl = (POA_IR::ValueBoxDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -29370,128 +18234,41 @@
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
     return ACE_static_cast (POA_IR::Contained_ptr, this);
   if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
-    return ACE_static_cast (POA_IR::IDLType_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
-}
-
-void POA_IR::ValueBoxDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
-{
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
-}
-
-const char* POA_IR::ValueBoxDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/ValueBoxDef:1.0";
-}
-
-IR::ValueBoxDef*
-POA_IR::ValueBoxDef::_this (CORBA_Environment &ACE_TRY_ENV)
-{
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::ValueBoxDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
+    return ACE_static_cast (POA_IR::IDLType_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
 
-CORBA::Any * 
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ValueBoxDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-void 
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_get::result (IR::IDLType_ptr result)
+const char* POA_IR::ValueBoxDef::_interface_repository_id (void) const
 {
-  // update the result 
-   this->result_ = result;
+  return "IDL:omg.org/IR/ValueBoxDef:1.0";
 }
 
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_set::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    IR::IDLType_ptr original_type_def,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    original_type_def_ (original_type_def)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+IR::ValueBoxDef*
+POA_IR::ValueBoxDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_original_type_def = this->parameter_list_.length ();
-  this->parameter_list_.length (length_original_type_def + 1);
-  this->parameter_list_[length_original_type_def].argument <<=  this->original_type_def_;
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
   
-  this->parameter_list_[length_original_type_def].mode = Dynamic::PARAM_IN;
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
   
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ValueBoxDef::TAO_ServerRequestInfo_IR_ValueBoxDef_original_type_def_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
-  return &this->result_val_;
+  CORBA::Object_var obj = tmp;
+  return IR_ValueBoxDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_ProvidesDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -29499,7 +18276,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ProvidesDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -29570,29 +18347,29 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ProvidesDef::move_skel},
+      {"move",  &POA_IR::ProvidesDef::move_skel},
       {"_is_a",  &POA_IR::ProvidesDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::ProvidesDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ProvidesDef::_set_id_skel},
-      {"describe", 	&POA_IR::ProvidesDef::describe_skel},
-      {"_get_name", 	&POA_IR::ProvidesDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::ProvidesDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::ProvidesDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ProvidesDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::ProvidesDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::ProvidesDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::ProvidesDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::ProvidesDef::_get_absolute_name_skel},
-      {"_get_interface_type", 	&POA_IR::ProvidesDef::_get_interface_type_skel},
+      {"_get_id",       &POA_IR::ProvidesDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ProvidesDef::_set_id_skel},
+      {"describe",      &POA_IR::ProvidesDef::describe_skel},
+      {"_get_name",     &POA_IR::ProvidesDef::_get_name_skel},
+      {"_set_name",     &POA_IR::ProvidesDef::_set_name_skel},
+      {"_get_version",  &POA_IR::ProvidesDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ProvidesDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::ProvidesDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::ProvidesDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::ProvidesDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::ProvidesDef::_get_absolute_name_skel},
+      {"_get_interface_type",   &POA_IR::ProvidesDef::_get_interface_type_skel},
       {"_non_existent",  &POA_IR::ProvidesDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ProvidesDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::ProvidesDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       -1,  14,  -1,  15,  16,  17,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       -1,  14,  -1,  15,  16,  17,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -29626,10 +18403,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_ProvidesDef_Perfect_Hash_OpTable tao_IR_ProvidesDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -29655,9 +18431,9 @@
   
 }
 
-IR::_TAO_ProvidesDef_Proxy_Impl&
+_TAO_ProvidesDef_Proxy_Impl&
 POA_IR::_TAO_ProvidesDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ProvidesDef *object,
+    IR_ProvidesDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -29689,7 +18465,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ProvidesDef_ThruPOA_Proxy_Impl,
+              _TAO_ProvidesDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -29699,7 +18475,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ProvidesDef_Remote_Proxy_Impl,
+              _TAO_ProvidesDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -29716,26 +18492,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ProvidesDef_Proxy_Broker *
-IR__TAO_ProvidesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ProvidesDef_Proxy_Broker *
+_TAO_ProvidesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_ProvidesDef_Strategized_Proxy_Broker::the_TAO_ProvidesDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ProvidesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ProvidesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ProvidesDef_Proxy_Broker_Factory_function;
+  _TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ProvidesDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ProvidesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ProvidesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ProvidesDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_ProvidesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ProvidesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ProvidesDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -29745,6 +18521,9 @@
 POA_IR::_TAO_ProvidesDef_ThruPOA_Proxy_Impl::_TAO_ProvidesDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_ProvidesDef_ThruPOA_Proxy_Impl::~_TAO_ProvidesDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 IR::InterfaceDef_ptr POA_IR::_TAO_ProvidesDef_ThruPOA_Proxy_Impl::interface_type (
@@ -29755,7 +18534,7 @@
     CORBA::SystemException
   ))
 {
-    IR::InterfaceDef_var _tao_retval;
+    IR_InterfaceDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -29802,72 +18581,31 @@
 
 void POA_IR::ProvidesDef::_get_interface_type_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::ProvidesDef *_tao_impl = (POA_IR::ProvidesDef *)_tao_object_reference;
 
-  IR::InterfaceDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ProvidesDef::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get ri (
-      "_get_interface_type",
-      _tao_server_request.service_info (),
+  IR_InterfaceDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->interface_type (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->interface_type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::ProvidesDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -29877,20 +18615,20 @@
   POA_IR::ProvidesDef *_tao_impl = (POA_IR::ProvidesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::ProvidesDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -29899,10 +18637,10 @@
   POA_IR::ProvidesDef *_tao_impl = (POA_IR::ProvidesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -29960,53 +18698,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::ProvidesDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ProvidesDef::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ProvidesDef::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::ProvidesDef::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ProvidesDef::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  return IR_ProvidesDef::_unchecked_narrow (obj.in ());
 }
 
-void 
-POA_IR::ProvidesDef::TAO_ServerRequestInfo_IR_ProvidesDef_interface_type_get::result (IR::InterfaceDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_UsesDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -30014,7 +18708,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_UsesDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -30085,30 +18779,30 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::UsesDef::move_skel},
+      {"move",  &POA_IR::UsesDef::move_skel},
       {"_is_a",  &POA_IR::UsesDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::UsesDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::UsesDef::_set_id_skel},
-      {"describe", 	&POA_IR::UsesDef::describe_skel},
-      {"_get_name", 	&POA_IR::UsesDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::UsesDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::UsesDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::UsesDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::UsesDef::_get_def_kind_skel},
-      {"_get_defined_in", 	&POA_IR::UsesDef::_get_defined_in_skel},
-      {"_get_is_multiple", 	&POA_IR::UsesDef::_get_is_multiple_skel},
-      {"destroy", 	&POA_IR::UsesDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::UsesDef::_get_absolute_name_skel},
-      {"_get_interface_type", 	&POA_IR::UsesDef::_get_interface_type_skel},
+      {"_get_id",       &POA_IR::UsesDef::_get_id_skel},
+      {"_set_id",       &POA_IR::UsesDef::_set_id_skel},
+      {"describe",      &POA_IR::UsesDef::describe_skel},
+      {"_get_name",     &POA_IR::UsesDef::_get_name_skel},
+      {"_set_name",     &POA_IR::UsesDef::_set_name_skel},
+      {"_get_version",  &POA_IR::UsesDef::_get_version_skel},
+      {"_set_version",  &POA_IR::UsesDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::UsesDef::_get_def_kind_skel},
+      {"_get_defined_in",       &POA_IR::UsesDef::_get_defined_in_skel},
+      {"_get_is_multiple",      &POA_IR::UsesDef::_get_is_multiple_skel},
+      {"destroy",       &POA_IR::UsesDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::UsesDef::_get_absolute_name_skel},
+      {"_get_interface_type",   &POA_IR::UsesDef::_get_interface_type_skel},
       {"_non_existent",  &POA_IR::UsesDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::UsesDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::UsesDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       -1,  14,  15,  16,  17,  18,  -1,  -1,  -1,  19,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       -1,  14,  15,  16,  17,  18,  -1,  -1,  -1,  19,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -30142,10 +18836,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_UsesDef_Perfect_Hash_OpTable tao_IR_UsesDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -30171,9 +18864,9 @@
   
 }
 
-IR::_TAO_UsesDef_Proxy_Impl&
+_TAO_UsesDef_Proxy_Impl&
 POA_IR::_TAO_UsesDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::UsesDef *object,
+    IR_UsesDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -30205,7 +18898,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_UsesDef_ThruPOA_Proxy_Impl,
+              _TAO_UsesDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -30215,7 +18908,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_UsesDef_Remote_Proxy_Impl,
+              _TAO_UsesDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -30232,26 +18925,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_UsesDef_Proxy_Broker *
-IR__TAO_UsesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_UsesDef_Proxy_Broker *
+_TAO_UsesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_UsesDef_Strategized_Proxy_Broker::the_TAO_UsesDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_UsesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_UsesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_UsesDef_Proxy_Broker_Factory_function;
+  _TAO_UsesDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_UsesDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_UsesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_UsesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_UsesDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_UsesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_UsesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_UsesDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -30261,6 +18954,9 @@
 POA_IR::_TAO_UsesDef_ThruPOA_Proxy_Impl::_TAO_UsesDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_UsesDef_ThruPOA_Proxy_Impl::~_TAO_UsesDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 IR::InterfaceDef_ptr POA_IR::_TAO_UsesDef_ThruPOA_Proxy_Impl::interface_type (
@@ -30271,7 +18967,7 @@
     CORBA::SystemException
   ))
 {
-    IR::InterfaceDef_var _tao_retval;
+    IR_InterfaceDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -30349,137 +19045,56 @@
 
 void POA_IR::UsesDef::_get_interface_type_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::UsesDef *_tao_impl = (POA_IR::UsesDef *)_tao_object_reference;
 
-  IR::InterfaceDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get ri (
-      "_get_interface_type",
-      _tao_server_request.service_info (),
+  IR_InterfaceDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->interface_type (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->interface_type (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::UsesDef::_get_is_multiple_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::UsesDef *_tao_impl = (POA_IR::UsesDef *)_tao_object_reference;
 
   CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get ri (
-      "_get_is_multiple",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->is_multiple (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_multiple (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::UsesDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -30489,20 +19104,20 @@
   POA_IR::UsesDef *_tao_impl = (POA_IR::UsesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::UsesDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -30511,10 +19126,10 @@
   POA_IR::UsesDef *_tao_impl = (POA_IR::UsesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -30572,94 +19187,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::UsesDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_interface_type_get::result (IR::InterfaceDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::UsesDef::TAO_ServerRequestInfo_IR_UsesDef_is_multiple_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
+  return IR_UsesDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_EventDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -30667,7 +19197,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_EventDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -30738,30 +19268,30 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::EventDef::move_skel},
+      {"move",  &POA_IR::EventDef::move_skel},
       {"_is_a",  &POA_IR::EventDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::EventDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::EventDef::_set_id_skel},
-      {"describe", 	&POA_IR::EventDef::describe_skel},
-      {"_get_name", 	&POA_IR::EventDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::EventDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::EventDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::EventDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::EventDef::_get_def_kind_skel},
-      {"is_a", 	&POA_IR::EventDef::is_a_skel},
-      {"_get_defined_in", 	&POA_IR::EventDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::EventDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::EventDef::_get_absolute_name_skel},
-      {"_get_event", 	&POA_IR::EventDef::_get_event_skel},
+      {"_get_id",       &POA_IR::EventDef::_get_id_skel},
+      {"_set_id",       &POA_IR::EventDef::_set_id_skel},
+      {"describe",      &POA_IR::EventDef::describe_skel},
+      {"_get_name",     &POA_IR::EventDef::_get_name_skel},
+      {"_set_name",     &POA_IR::EventDef::_set_name_skel},
+      {"_get_version",  &POA_IR::EventDef::_get_version_skel},
+      {"_set_version",  &POA_IR::EventDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::EventDef::_get_def_kind_skel},
+      {"is_a",  &POA_IR::EventDef::is_a_skel},
+      {"_get_defined_in",       &POA_IR::EventDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::EventDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::EventDef::_get_absolute_name_skel},
+      {"_get_event",    &POA_IR::EventDef::_get_event_skel},
       {"_non_existent",  &POA_IR::EventDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::EventDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::EventDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -30795,10 +19325,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_EventDef_Perfect_Hash_OpTable tao_IR_EventDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -30824,9 +19353,9 @@
   
 }
 
-IR::_TAO_EventDef_Proxy_Impl&
+_TAO_EventDef_Proxy_Impl&
 POA_IR::_TAO_EventDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::EventDef *object,
+    IR_EventDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -30858,7 +19387,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_EventDef_ThruPOA_Proxy_Impl,
+              _TAO_EventDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -30868,7 +19397,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_EventDef_Remote_Proxy_Impl,
+              _TAO_EventDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -30885,26 +19414,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_EventDef_Proxy_Broker *
-IR__TAO_EventDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_EventDef_Proxy_Broker *
+_TAO_EventDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_EventDef_Strategized_Proxy_Broker::the_TAO_EventDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_EventDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_EventDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_EventDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_EventDef_Proxy_Broker_Factory_function;
+  _TAO_EventDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_EventDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_EventDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_EventDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_EventDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_EventDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_EventDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_EventDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -30914,6 +19443,9 @@
 POA_IR::_TAO_EventDef_ThruPOA_Proxy_Impl::_TAO_EventDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_EventDef_ThruPOA_Proxy_Impl::~_TAO_EventDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 CORBA::Boolean POA_IR::_TAO_EventDef_ThruPOA_Proxy_Impl::is_a (
@@ -30957,7 +19489,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ValueDef_var _tao_retval;
+    IR_ValueDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -31004,10 +19536,10 @@
 
 void POA_IR::EventDef::is_a_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::EventDef *_tao_impl = (POA_IR::EventDef *)_tao_object_reference;
@@ -31017,133 +19549,50 @@
   if (!(
     (_tao_in >> event_id.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_is_a ri (
-      "is_a",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->is_a (
       event_id.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_a (
-          event_id.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::EventDef::_get_event_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::EventDef *_tao_impl = (POA_IR::EventDef *)_tao_object_reference;
 
-  IR::ValueDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_event_get ri (
-      "_get_event",
-      _tao_server_request.service_info (),
+  IR_ValueDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->event (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->event (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::EventDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -31153,20 +19602,20 @@
   POA_IR::EventDef *_tao_impl = (POA_IR::EventDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::EventDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -31175,10 +19624,10 @@
   POA_IR::EventDef *_tao_impl = (POA_IR::EventDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -31191,145 +19640,54 @@
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/EventDef:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
-}
-
-void* POA_IR::EventDef::_downcast (
-    const char* logical_type_id
-  )
-{
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/EventDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::EventDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
-    return ACE_static_cast (POA_IR::Contained_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
-}
-
-void POA_IR::EventDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
-{
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
-}
-
-const char* POA_IR::EventDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/EventDef:1.0";
-}
-
-IR::EventDef*
-POA_IR::EventDef::_this (CORBA_Environment &ACE_TRY_ENV)
-{
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::EventDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_is_a::TAO_ServerRequestInfo_IR_EventDef_is_a (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * event_id,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    event_id_ (event_id)
-{}
-
-Dynamic::ParameterList *
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_is_a::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_event_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_event_id + 1);
-  this->parameter_list_[length_event_id].argument <<= event_id_;
-  this->parameter_list_[length_event_id].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_is_a::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_is_a::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_is_a::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
 }
 
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_event_get::TAO_ServerRequestInfo_IR_EventDef_event_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
+void* POA_IR::EventDef::_downcast (
+    const char* logical_type_id
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_event_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/EventDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::EventDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
 
-
-  Dynamic::ExceptionList *
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_event_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::EventDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
-  // Generate the exception list on demand
-  return 0;
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-CORBA::Any * 
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_event_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+const char* POA_IR::EventDef::_interface_repository_id (void) const
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  return "IDL:omg.org/IR/EventDef:1.0";
 }
 
-void 
-POA_IR::EventDef::TAO_ServerRequestInfo_IR_EventDef_event_get::result (IR::ValueDef_ptr result)
+IR::EventDef*
+POA_IR::EventDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
-  // update the result 
-   this->result_ = result;
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
+  
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
+  
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
+  
+  CORBA::Object_var obj = tmp;
+  return IR_EventDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_EmitsDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -31337,7 +19695,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_EmitsDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -31408,30 +19766,30 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::EmitsDef::move_skel},
+      {"move",  &POA_IR::EmitsDef::move_skel},
       {"_is_a",  &POA_IR::EmitsDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::EmitsDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::EmitsDef::_set_id_skel},
-      {"describe", 	&POA_IR::EmitsDef::describe_skel},
-      {"_get_name", 	&POA_IR::EmitsDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::EmitsDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::EmitsDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::EmitsDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::EmitsDef::_get_def_kind_skel},
-      {"is_a", 	&POA_IR::EmitsDef::is_a_skel},
-      {"_get_defined_in", 	&POA_IR::EmitsDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::EmitsDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::EmitsDef::_get_absolute_name_skel},
-      {"_get_event", 	&POA_IR::EmitsDef::_get_event_skel},
+      {"_get_id",       &POA_IR::EmitsDef::_get_id_skel},
+      {"_set_id",       &POA_IR::EmitsDef::_set_id_skel},
+      {"describe",      &POA_IR::EmitsDef::describe_skel},
+      {"_get_name",     &POA_IR::EmitsDef::_get_name_skel},
+      {"_set_name",     &POA_IR::EmitsDef::_set_name_skel},
+      {"_get_version",  &POA_IR::EmitsDef::_get_version_skel},
+      {"_set_version",  &POA_IR::EmitsDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::EmitsDef::_get_def_kind_skel},
+      {"is_a",  &POA_IR::EmitsDef::is_a_skel},
+      {"_get_defined_in",       &POA_IR::EmitsDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::EmitsDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::EmitsDef::_get_absolute_name_skel},
+      {"_get_event",    &POA_IR::EmitsDef::_get_event_skel},
       {"_non_existent",  &POA_IR::EmitsDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::EmitsDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::EmitsDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -31465,10 +19823,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_EmitsDef_Perfect_Hash_OpTable tao_IR_EmitsDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -31494,9 +19851,9 @@
   
 }
 
-IR::_TAO_EmitsDef_Proxy_Impl&
+_TAO_EmitsDef_Proxy_Impl&
 POA_IR::_TAO_EmitsDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::EmitsDef *object,
+    IR_EmitsDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -31528,7 +19885,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_EmitsDef_ThruPOA_Proxy_Impl,
+              _TAO_EmitsDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -31538,7 +19895,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_EmitsDef_Remote_Proxy_Impl,
+              _TAO_EmitsDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -31555,26 +19912,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_EmitsDef_Proxy_Broker *
-IR__TAO_EmitsDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_EmitsDef_Proxy_Broker *
+_TAO_EmitsDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_EmitsDef_Strategized_Proxy_Broker::the_TAO_EmitsDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_EmitsDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_EmitsDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_EmitsDef_Proxy_Broker_Factory_function;
+  _TAO_EmitsDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_EmitsDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_EmitsDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_EmitsDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_EmitsDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_EmitsDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_EmitsDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_EmitsDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -31584,6 +19941,9 @@
 POA_IR::_TAO_EmitsDef_ThruPOA_Proxy_Impl::_TAO_EmitsDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_EmitsDef_ThruPOA_Proxy_Impl::~_TAO_EmitsDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 //
@@ -31610,7 +19970,7 @@
 }
 
 void POA_IR::EmitsDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -31620,20 +19980,20 @@
   POA_IR::EmitsDef *_tao_impl = (POA_IR::EmitsDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::EmitsDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -31642,10 +20002,10 @@
   POA_IR::EmitsDef *_tao_impl = (POA_IR::EmitsDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -31706,12 +20066,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::EmitsDef::_unchecked_narrow (obj.in ());
+  return IR_EmitsDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_PublishesDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -31719,7 +20076,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_PublishesDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -31790,30 +20147,30 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::PublishesDef::move_skel},
+      {"move",  &POA_IR::PublishesDef::move_skel},
       {"_is_a",  &POA_IR::PublishesDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::PublishesDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::PublishesDef::_set_id_skel},
-      {"describe", 	&POA_IR::PublishesDef::describe_skel},
-      {"_get_name", 	&POA_IR::PublishesDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::PublishesDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::PublishesDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::PublishesDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::PublishesDef::_get_def_kind_skel},
-      {"is_a", 	&POA_IR::PublishesDef::is_a_skel},
-      {"_get_defined_in", 	&POA_IR::PublishesDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::PublishesDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::PublishesDef::_get_absolute_name_skel},
-      {"_get_event", 	&POA_IR::PublishesDef::_get_event_skel},
+      {"_get_id",       &POA_IR::PublishesDef::_get_id_skel},
+      {"_set_id",       &POA_IR::PublishesDef::_set_id_skel},
+      {"describe",      &POA_IR::PublishesDef::describe_skel},
+      {"_get_name",     &POA_IR::PublishesDef::_get_name_skel},
+      {"_set_name",     &POA_IR::PublishesDef::_set_name_skel},
+      {"_get_version",  &POA_IR::PublishesDef::_get_version_skel},
+      {"_set_version",  &POA_IR::PublishesDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::PublishesDef::_get_def_kind_skel},
+      {"is_a",  &POA_IR::PublishesDef::is_a_skel},
+      {"_get_defined_in",       &POA_IR::PublishesDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::PublishesDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::PublishesDef::_get_absolute_name_skel},
+      {"_get_event",    &POA_IR::PublishesDef::_get_event_skel},
       {"_non_existent",  &POA_IR::PublishesDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::PublishesDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::PublishesDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -31847,10 +20204,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_PublishesDef_Perfect_Hash_OpTable tao_IR_PublishesDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -31876,9 +20232,9 @@
   
 }
 
-IR::_TAO_PublishesDef_Proxy_Impl&
+_TAO_PublishesDef_Proxy_Impl&
 POA_IR::_TAO_PublishesDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::PublishesDef *object,
+    IR_PublishesDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -31910,7 +20266,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_PublishesDef_ThruPOA_Proxy_Impl,
+              _TAO_PublishesDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -31920,7 +20276,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_PublishesDef_Remote_Proxy_Impl,
+              _TAO_PublishesDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -31937,26 +20293,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_PublishesDef_Proxy_Broker *
-IR__TAO_PublishesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_PublishesDef_Proxy_Broker *
+_TAO_PublishesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_PublishesDef_Strategized_Proxy_Broker::the_TAO_PublishesDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_PublishesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_PublishesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_PublishesDef_Proxy_Broker_Factory_function;
+  _TAO_PublishesDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_PublishesDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_PublishesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_PublishesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_PublishesDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_PublishesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_PublishesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_PublishesDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -31966,6 +20322,9 @@
 POA_IR::_TAO_PublishesDef_ThruPOA_Proxy_Impl::_TAO_PublishesDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_PublishesDef_ThruPOA_Proxy_Impl::~_TAO_PublishesDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 //
@@ -31992,7 +20351,7 @@
 }
 
 void POA_IR::PublishesDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -32002,20 +20361,20 @@
   POA_IR::PublishesDef *_tao_impl = (POA_IR::PublishesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::PublishesDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -32024,10 +20383,10 @@
   POA_IR::PublishesDef *_tao_impl = (POA_IR::PublishesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -32088,12 +20447,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::PublishesDef::_unchecked_narrow (obj.in ());
+  return IR_PublishesDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_ConsumesDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -32101,7 +20457,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:22 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ConsumesDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -32172,30 +20528,30 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::ConsumesDef::move_skel},
+      {"move",  &POA_IR::ConsumesDef::move_skel},
       {"_is_a",  &POA_IR::ConsumesDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::ConsumesDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ConsumesDef::_set_id_skel},
-      {"describe", 	&POA_IR::ConsumesDef::describe_skel},
-      {"_get_name", 	&POA_IR::ConsumesDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::ConsumesDef::_set_name_skel},
-      {"_get_version", 	&POA_IR::ConsumesDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ConsumesDef::_set_version_skel},
-      {"_get_def_kind", 	&POA_IR::ConsumesDef::_get_def_kind_skel},
-      {"is_a", 	&POA_IR::ConsumesDef::is_a_skel},
-      {"_get_defined_in", 	&POA_IR::ConsumesDef::_get_defined_in_skel},
-      {"destroy", 	&POA_IR::ConsumesDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::ConsumesDef::_get_absolute_name_skel},
-      {"_get_event", 	&POA_IR::ConsumesDef::_get_event_skel},
+      {"_get_id",       &POA_IR::ConsumesDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ConsumesDef::_set_id_skel},
+      {"describe",      &POA_IR::ConsumesDef::describe_skel},
+      {"_get_name",     &POA_IR::ConsumesDef::_get_name_skel},
+      {"_set_name",     &POA_IR::ConsumesDef::_set_name_skel},
+      {"_get_version",  &POA_IR::ConsumesDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ConsumesDef::_set_version_skel},
+      {"_get_def_kind",         &POA_IR::ConsumesDef::_get_def_kind_skel},
+      {"is_a",  &POA_IR::ConsumesDef::is_a_skel},
+      {"_get_defined_in",       &POA_IR::ConsumesDef::_get_defined_in_skel},
+      {"destroy",       &POA_IR::ConsumesDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::ConsumesDef::_get_absolute_name_skel},
+      {"_get_event",    &POA_IR::ConsumesDef::_get_event_skel},
       {"_non_existent",  &POA_IR::ConsumesDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::ConsumesDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::ConsumesDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13, 
-       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -43,   8, -43, -11,  -2, -38,  13,
+       14,  15,  -1,  16,  17,  -1,  18,  -1,  -1,  19,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -32229,10 +20585,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:22 */
+/* ending time is 11:23:11 */
 static TAO_IR_ConsumesDef_Perfect_Hash_OpTable tao_IR_ConsumesDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -32258,9 +20613,9 @@
   
 }
 
-IR::_TAO_ConsumesDef_Proxy_Impl&
+_TAO_ConsumesDef_Proxy_Impl&
 POA_IR::_TAO_ConsumesDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ConsumesDef *object,
+    IR_ConsumesDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -32292,7 +20647,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_ConsumesDef_ThruPOA_Proxy_Impl,
+              _TAO_ConsumesDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -32302,7 +20657,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_ConsumesDef_Remote_Proxy_Impl,
+              _TAO_ConsumesDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -32319,26 +20674,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_ConsumesDef_Proxy_Broker *
-IR__TAO_ConsumesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_ConsumesDef_Proxy_Broker *
+_TAO_ConsumesDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_ConsumesDef_Strategized_Proxy_Broker::the_TAO_ConsumesDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_ConsumesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_ConsumesDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ConsumesDef_Proxy_Broker_Factory_function;
+  _TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ConsumesDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_ConsumesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ConsumesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ConsumesDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_ConsumesDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ConsumesDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ConsumesDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -32348,6 +20703,9 @@
 POA_IR::_TAO_ConsumesDef_ThruPOA_Proxy_Impl::_TAO_ConsumesDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_ConsumesDef_ThruPOA_Proxy_Impl::~_TAO_ConsumesDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 //
@@ -32374,7 +20732,7 @@
 }
 
 void POA_IR::ConsumesDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -32384,20 +20742,20 @@
   POA_IR::ConsumesDef *_tao_impl = (POA_IR::ConsumesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::ConsumesDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -32406,10 +20764,10 @@
   POA_IR::ConsumesDef *_tao_impl = (POA_IR::ConsumesDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -32470,12 +20828,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::ConsumesDef::_unchecked_narrow (obj.in ());
+  return IR_ConsumesDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_ComponentDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -32483,7 +20838,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:23 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_ComponentDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -32554,70 +20909,70 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"is_a", 	&POA_IR::ComponentDef::is_a_skel},
+      {"is_a",  &POA_IR::ComponentDef::is_a_skel},
       {"_is_a",  &POA_IR::ComponentDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::ComponentDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::ComponentDef::_set_id_skel},
-      {"_get_emits_events", 	&POA_IR::ComponentDef::_get_emits_events_skel},
-      {"_get_def_kind", 	&POA_IR::ComponentDef::_get_def_kind_skel},
-      {"_get_name", 	&POA_IR::ComponentDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::ComponentDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::ComponentDef::_set_name_skel},
-      {"_get_uses_interfaces", 	&POA_IR::ComponentDef::_get_uses_interfaces_skel},
-      {"_set_base_interfaces", 	&POA_IR::ComponentDef::_set_base_interfaces_skel},
-      {"_get_base_interfaces", 	&POA_IR::ComponentDef::_get_base_interfaces_skel},
-      {"_get_consumes_events", 	&POA_IR::ComponentDef::_get_consumes_events_skel},
-      {"_get_publishes_events", 	&POA_IR::ComponentDef::_get_publishes_events_skel},
-      {"describe_contents", 	&POA_IR::ComponentDef::describe_contents_skel},
-      {"describe", 	&POA_IR::ComponentDef::describe_skel},
-      {"_get_provides_interfaces", 	&POA_IR::ComponentDef::_get_provides_interfaces_skel},
-      {"_get_supported_interfaces", 	&POA_IR::ComponentDef::_get_supported_interfaces_skel},
-      {"_set_supported_interfaces", 	&POA_IR::ComponentDef::_set_supported_interfaces_skel},
-      {"_get_version", 	&POA_IR::ComponentDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::ComponentDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::ComponentDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::ComponentDef::_get_defined_in_skel},
+      {"_get_id",       &POA_IR::ComponentDef::_get_id_skel},
+      {"_set_id",       &POA_IR::ComponentDef::_set_id_skel},
+      {"_get_emits_events",     &POA_IR::ComponentDef::_get_emits_events_skel},
+      {"_get_def_kind",         &POA_IR::ComponentDef::_get_def_kind_skel},
+      {"_get_name",     &POA_IR::ComponentDef::_get_name_skel},
+      {"_get_type",     &POA_IR::ComponentDef::_get_type_skel},
+      {"_set_name",     &POA_IR::ComponentDef::_set_name_skel},
+      {"_get_uses_interfaces",  &POA_IR::ComponentDef::_get_uses_interfaces_skel},
+      {"_set_base_interfaces",  &POA_IR::ComponentDef::_set_base_interfaces_skel},
+      {"_get_base_interfaces",  &POA_IR::ComponentDef::_get_base_interfaces_skel},
+      {"_get_consumes_events",  &POA_IR::ComponentDef::_get_consumes_events_skel},
+      {"_get_publishes_events",         &POA_IR::ComponentDef::_get_publishes_events_skel},
+      {"describe_contents",     &POA_IR::ComponentDef::describe_contents_skel},
+      {"describe",      &POA_IR::ComponentDef::describe_skel},
+      {"_get_provides_interfaces",      &POA_IR::ComponentDef::_get_provides_interfaces_skel},
+      {"_get_supported_interfaces",     &POA_IR::ComponentDef::_get_supported_interfaces_skel},
+      {"_set_supported_interfaces",     &POA_IR::ComponentDef::_set_supported_interfaces_skel},
+      {"_get_version",  &POA_IR::ComponentDef::_get_version_skel},
+      {"_set_version",  &POA_IR::ComponentDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::ComponentDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::ComponentDef::_get_defined_in_skel},
       {"_non_existent",  &POA_IR::ComponentDef::_non_existent_skel},
-      {"_get_is_abstract", 	&POA_IR::ComponentDef::_get_is_abstract_skel},
-      {"_set_is_abstract", 	&POA_IR::ComponentDef::_set_is_abstract_skel},
-      {"destroy", 	&POA_IR::ComponentDef::destroy_skel},
-      {"contents", 	&POA_IR::ComponentDef::contents_skel},
-      {"_get_base_component", 	&POA_IR::ComponentDef::_get_base_component_skel},
-      {"create_uses", 	&POA_IR::ComponentDef::create_uses_skel},
-      {"create_emits", 	&POA_IR::ComponentDef::create_emits_skel},
-      {"create_alias", 	&POA_IR::ComponentDef::create_alias_skel},
-      {"_get_is_basic", 	&POA_IR::ComponentDef::_get_is_basic_skel},
-      {"move", 	&POA_IR::ComponentDef::move_skel},
-      {"create_provides", 	&POA_IR::ComponentDef::create_provides_skel},
-      {"create_consumes", 	&POA_IR::ComponentDef::create_consumes_skel},
-      {"create_publishes", 	&POA_IR::ComponentDef::create_publishes_skel},
-      {"_get_containing_repository", 	&POA_IR::ComponentDef::_get_containing_repository_skel},
-      {"create_value", 	&POA_IR::ComponentDef::create_value_skel},
-      {"create_module", 	&POA_IR::ComponentDef::create_module_skel},
-      {"create_native", 	&POA_IR::ComponentDef::create_native_skel},
-      {"create_attribute", 	&POA_IR::ComponentDef::create_attribute_skel},
-      {"create_interface", 	&POA_IR::ComponentDef::create_interface_skel},
-      {"create_union", 	&POA_IR::ComponentDef::create_union_skel},
-      {"_get_is_local", 	&POA_IR::ComponentDef::_get_is_local_skel},
-      {"_set_is_local", 	&POA_IR::ComponentDef::_set_is_local_skel},
-      {"create_operation", 	&POA_IR::ComponentDef::create_operation_skel},
-      {"create_exception", 	&POA_IR::ComponentDef::create_exception_skel},
-      {"create_struct", 	&POA_IR::ComponentDef::create_struct_skel},
-      {"create_constant", 	&POA_IR::ComponentDef::create_constant_skel},
-      {"lookup_name", 	&POA_IR::ComponentDef::lookup_name_skel},
-      {"create_enum", 	&POA_IR::ComponentDef::create_enum_skel},
-      {"create_value_box", 	&POA_IR::ComponentDef::create_value_box_skel},
-      {"lookup", 	&POA_IR::ComponentDef::lookup_skel},
+      {"_get_is_abstract",      &POA_IR::ComponentDef::_get_is_abstract_skel},
+      {"_set_is_abstract",      &POA_IR::ComponentDef::_set_is_abstract_skel},
+      {"destroy",       &POA_IR::ComponentDef::destroy_skel},
+      {"contents",      &POA_IR::ComponentDef::contents_skel},
+      {"_get_base_component",   &POA_IR::ComponentDef::_get_base_component_skel},
+      {"create_uses",   &POA_IR::ComponentDef::create_uses_skel},
+      {"create_emits",  &POA_IR::ComponentDef::create_emits_skel},
+      {"create_alias",  &POA_IR::ComponentDef::create_alias_skel},
+      {"_get_is_basic",         &POA_IR::ComponentDef::_get_is_basic_skel},
+      {"move",  &POA_IR::ComponentDef::move_skel},
+      {"create_provides",       &POA_IR::ComponentDef::create_provides_skel},
+      {"create_consumes",       &POA_IR::ComponentDef::create_consumes_skel},
+      {"create_publishes",      &POA_IR::ComponentDef::create_publishes_skel},
+      {"_get_containing_repository",    &POA_IR::ComponentDef::_get_containing_repository_skel},
+      {"create_value",  &POA_IR::ComponentDef::create_value_skel},
+      {"create_module",         &POA_IR::ComponentDef::create_module_skel},
+      {"create_native",         &POA_IR::ComponentDef::create_native_skel},
+      {"create_attribute",      &POA_IR::ComponentDef::create_attribute_skel},
+      {"create_interface",      &POA_IR::ComponentDef::create_interface_skel},
+      {"create_union",  &POA_IR::ComponentDef::create_union_skel},
+      {"_get_is_local",         &POA_IR::ComponentDef::_get_is_local_skel},
+      {"_set_is_local",         &POA_IR::ComponentDef::_set_is_local_skel},
+      {"create_operation",      &POA_IR::ComponentDef::create_operation_skel},
+      {"create_exception",      &POA_IR::ComponentDef::create_exception_skel},
+      {"create_struct",         &POA_IR::ComponentDef::create_struct_skel},
+      {"create_constant",       &POA_IR::ComponentDef::create_constant_skel},
+      {"lookup_name",   &POA_IR::ComponentDef::lookup_name_skel},
+      {"create_enum",   &POA_IR::ComponentDef::create_enum_skel},
+      {"create_value_box",      &POA_IR::ComponentDef::create_value_box_skel},
+      {"lookup",        &POA_IR::ComponentDef::lookup_skel},
     };
 
   static const signed char lookup[] =
     {
-        -1,   -1,   -6,   -2,    4,    5,  -10,   -3,  -13,   -4,  -21,   -2,  -91,  -23, 
-        -2,  -28,   -2,    8,    9,  -94,  -93,   17,   18,   19,   20,  -96,   -1,  -95, 
-        25,   -1,   26,  -34,   -2,   27,  -38,   -2, -102,   30,   31,   32,   -1,   33, 
-       -92,   36,   37,  -92,   40,  -43,   -2,  -45,   -2,   41,   42,  -87,  -48,   -2, 
-       -88,   47,  -85,  -50,   -2,  -83,   -1,   52,   -1,   53,   54,   -1,   -1,   -1, 
-        -1,   55,   -1,   -1,   -1,   -1,   56,   -1,   -1,   -1,   -1,   57, 
+        -1,   -1,   -6,   -2,    4,    5,  -10,   -3,  -13,   -4,  -21,   -2,  -91,  -23,
+        -2,  -28,   -2,    8,    9,  -94,  -93,   17,   18,   19,   20,  -96,   -1,  -95,
+        25,   -1,   26,  -34,   -2,   27,  -38,   -2, -102,   30,   31,   32,   -1,   33,
+       -92,   36,   37,  -92,   40,  -43,   -2,  -45,   -2,   41,   42,  -87,  -48,   -2,
+       -88,   47,  -85,  -50,   -2,  -83,   -1,   52,   -1,   53,   54,   -1,   -1,   -1,
+        -1,   55,   -1,   -1,   -1,   -1,   56,   -1,   -1,   -1,   -1,   57,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -32637,434 +20992,152 @@
             }
           else if (slot < 0 && slot >= -MAX_HASH_VALUE)
             return 0;
-          else
-            {
-              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
-              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
-              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
-
-              while (--ptr >= base)
-                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
-                  return ptr;
-            }
-        }
-    }
-  return 0;
-}
-/* ending time is 10:26:23 */
-static TAO_IR_ComponentDef_Perfect_Hash_OpTable tao_IR_ComponentDef_optable;
-
-
-///////////////////////////////////////////////////////////////////////
-//            Strategized Proxy Broker Implementation
-//
-
-// Factory function Implementation.
-POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker *POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::the_TAO_ComponentDef_Strategized_Proxy_Broker (void)
-{
-  static POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker strategized_proxy_broker;
-  return &strategized_proxy_broker;
-}
-
-POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::_TAO_ComponentDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    this->proxy_cache_[i] = 0;
-  
-}
-
-POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::~_TAO_ComponentDef_Strategized_Proxy_Broker (void)
-{
-  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
-    delete this->proxy_cache_[i];
-  
-}
-
-IR::_TAO_ComponentDef_Proxy_Impl&
-POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::ComponentDef *object,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
-    TAO_ORB_Core::collocation_strategy (object);
-  
-  if (this->proxy_cache_[strategy] != 0)
-    return *this->proxy_cache_[strategy];
-  
-  this->create_proxy (strategy, ACE_TRY_ENV);
-  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
-  
-  return *this->proxy_cache_[strategy];
-  
-}
-
-void 
-POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::create_proxy (
-    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
-  
-  if (this->proxy_cache_[strategy] == 0)
-    {
-      switch (strategy)
-        {
-        case TAO_ORB_Core::THRU_POA_STRATEGY:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-          
-        case TAO_ORB_Core::REMOTE_STRATEGY:
-        default:
-          ACE_NEW_THROW_EX (
-              this->proxy_cache_[strategy],
-              ::IR::_TAO_ComponentDef_Remote_Proxy_Impl,
-              CORBA::NO_MEMORY ()
-          );
-          ACE_CHECK;
-          break;
-        
-      }
-    
-  }
-}
-
-
-//
-//        End Strategized Proxy Broker Implementation
-///////////////////////////////////////////////////////////////////////
-
-
-IR::_TAO_ComponentDef_Proxy_Broker *
-IR__TAO_ComponentDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
-{
-  ACE_UNUSED_ARG (obj);
-  return ::POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::the_TAO_ComponentDef_Strategized_Proxy_Broker();
-}
-
-int
-IR__TAO_ComponentDef_Proxy_Broker_Factory_Initializer (long _dummy_)
-{
-  ACE_UNUSED_ARG (_dummy_);
-  
-  IR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_ComponentDef_Proxy_Broker_Factory_function;
-  
-  return 0;
-}
-
-static int IR__TAO_ComponentDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_ComponentDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_ComponentDef_Proxy_Broker_Factory_Initializer));
-
-
-///////////////////////////////////////////////////////////////////////
-//                 ThruPOA Proxy  Implementation
-//
-
-POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::_TAO_ComponentDef_ThruPOA_Proxy_Impl (void)
-{}
-
-// ThruPOA Implementation of the IDL interface methods
-
-IR::InterfaceDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::supported_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::InterfaceDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "supported_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->supported_interfaces (
-        ACE_TRY_ENV
-      );
-}
-
-void POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::supported_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    const IR::InterfaceDefSeq & supported_interfaces,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "supported_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK;
-    ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->supported_interfaces (
-        supported_interfaces,
-        ACE_TRY_ENV
-      );
-  return;
-}
+          else
+            {
+              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
+              const class TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
+              const class TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];
 
-IR::ComponentDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::base_component (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::ComponentDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "base_component",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->base_component (
-        ACE_TRY_ENV
-      );
+              while (--ptr >= base)
+                if (*str == *ptr->opname_ && !strncmp (str + 1, ptr->opname_ + 1, len - 1))
+                  return ptr;
+            }
+        }
+    }
+  return 0;
 }
+/* ending time is 11:23:11 */
+static TAO_IR_ComponentDef_Perfect_Hash_OpTable tao_IR_ComponentDef_optable;
 
-IR::ProvidesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::provides_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
-{
-    IR::ProvidesDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "provides_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->provides_interfaces (
-        ACE_TRY_ENV
-      );
-}
+///////////////////////////////////////////////////////////////////////
+//            Strategized Proxy Broker Implementation
+//
 
-IR::UsesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::uses_interfaces (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+// Factory function Implementation.
+POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker *POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::the_TAO_ComponentDef_Strategized_Proxy_Broker (void)
 {
-    IR::UsesDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "uses_interfaces",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->uses_interfaces (
-        ACE_TRY_ENV
-      );
+  static POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker strategized_proxy_broker;
+  return &strategized_proxy_broker;
 }
 
-IR::EmitsDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::emits_events (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::_TAO_ComponentDef_Strategized_Proxy_Broker (void)
 {
-    IR::EmitsDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "emits_events",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->emits_events (
-        ACE_TRY_ENV
-      );
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    this->proxy_cache_[i] = 0;
+  
 }
 
-IR::PublishesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::publishes_events (
-    CORBA_Object *_collocated_tao_target_,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
+POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::~_TAO_ComponentDef_Strategized_Proxy_Broker (void)
 {
-    IR::PublishesDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "publishes_events",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->publishes_events (
-        ACE_TRY_ENV
-      );
+  for (int i = 0; i < TAO_ORB_Core::COLLOCATION_STRATEGIES_NUM; ++i)
+    delete this->proxy_cache_[i];
+  
 }
 
-IR::ConsumesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::consumes_events (
-    CORBA_Object *_collocated_tao_target_,
+_TAO_ComponentDef_Proxy_Impl&
+POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::select_proxy (
+    IR_ComponentDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    IR::ConsumesDefSeq_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "consumes_events",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->consumes_events (
-        ACE_TRY_ENV
-      );
+  TAO_ORB_Core::TAO_Collocation_Strategies strategy =
+    TAO_ORB_Core::collocation_strategy (object);
+  
+  if (this->proxy_cache_[strategy] != 0)
+    return *this->proxy_cache_[strategy];
+  
+  this->create_proxy (strategy, ACE_TRY_ENV);
+  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
+  
+  return *this->proxy_cache_[strategy];
+  
 }
 
-CORBA::Boolean POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::is_basic (
-    CORBA_Object *_collocated_tao_target_,
+void 
+POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::create_proxy (
+    TAO_ORB_Core::TAO_Collocation_Strategies strategy,
     CORBA::Environment &ACE_TRY_ENV
   )
-  ACE_THROW_SPEC ((
-    CORBA::SystemException
-  ))
 {
-    CORBA::Boolean _tao_retval = 0;
-  ACE_UNUSED_ARG (_tao_retval);
-  TAO_Object_Adapter::Servant_Upcall servant_upcall (
-      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
-    );
-  CORBA::Object_var forward_to;
-  servant_upcall.prepare_for_upcall (
-      _collocated_tao_target_->_object_key (),
-      "is_basic",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN  (_tao_retval);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->is_basic (
-        ACE_TRY_ENV
-      );
+  ACE_GUARD (ACE_SYNCH_MUTEX, guard, this->mutex_);
+  
+  if (this->proxy_cache_[strategy] == 0)
+    {
+      switch (strategy)
+        {
+        case TAO_ORB_Core::THRU_POA_STRATEGY:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ComponentDef_ThruPOA_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+          
+        case TAO_ORB_Core::REMOTE_STRATEGY:
+        default:
+          ACE_NEW_THROW_EX (
+              this->proxy_cache_[strategy],
+              _TAO_ComponentDef_Remote_Proxy_Impl,
+              CORBA::NO_MEMORY ()
+          );
+          ACE_CHECK;
+          break;
+        
+      }
+    
+  }
 }
 
-IR::ProvidesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_provides (
+
+//
+//        End Strategized Proxy Broker Implementation
+///////////////////////////////////////////////////////////////////////
+
+
+_TAO_ComponentDef_Proxy_Broker *
+_TAO_ComponentDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+{
+  ACE_UNUSED_ARG (obj);
+  return ::POA_IR::_TAO_ComponentDef_Strategized_Proxy_Broker::the_TAO_ComponentDef_Strategized_Proxy_Broker();
+}
+
+int
+_TAO_ComponentDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+{
+  ACE_UNUSED_ARG (_dummy_);
+  
+  _TAO_ComponentDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_ComponentDef_Proxy_Broker_Factory_function;
+  
+  return 0;
+}
+
+static int _TAO_ComponentDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_ComponentDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_ComponentDef_Proxy_Broker_Factory_Initializer));
+
+
+///////////////////////////////////////////////////////////////////////
+//                 ThruPOA Proxy  Implementation
+//
+
+POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::_TAO_ComponentDef_ThruPOA_Proxy_Impl (void)
+{}
+
+POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::~_TAO_ComponentDef_ThruPOA_Proxy_Impl (void)
+{}
+
+// ThruPOA Implementation of the IDL interface methods
+
+IR::InterfaceDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::supported_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::InterfaceDef_ptr interface_type,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ProvidesDef_var _tao_retval;
+    IR_InterfaceDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -33072,7 +21145,7 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_provides",
+      "supported_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
@@ -33082,69 +21155,52 @@
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ComponentDef:1.0"
         )
-    )->create_provides (
-        id,
-        name,
-        version,
-        interface_type,
+    )->supported_interfaces (
         ACE_TRY_ENV
       );
 }
 
-IR::UsesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_uses (
+void POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::supported_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::InterfaceDef_ptr interface_type,
-    CORBA::Boolean is_multiple,
+    const IR_InterfaceDefSeq & supported_interfaces,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::UsesDef_var _tao_retval;
-  ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_uses",
+      "supported_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
+      ACE_CHECK;
+    ACE_reinterpret_cast (
       POA_IR::ComponentDef_ptr,
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ComponentDef:1.0"
         )
-    )->create_uses (
-        id,
-        name,
-        version,
-        interface_type,
-        is_multiple,
+    )->supported_interfaces (
+        supported_interfaces,
         ACE_TRY_ENV
       );
+  return;
 }
 
-IR::EmitsDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_emits (
+IR::ComponentDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::base_component (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr value,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::EmitsDef_var _tao_retval;
+    IR_ComponentDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -33152,7 +21208,7 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_emits",
+      "base_component",
       forward_to.out (),
       ACE_TRY_ENV
     );
@@ -33162,28 +21218,20 @@
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ComponentDef:1.0"
         )
-    )->create_emits (
-        id,
-        name,
-        version,
-        value,
+    )->base_component (
         ACE_TRY_ENV
       );
 }
 
-IR::PublishesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_publishes (
+IR::ProvidesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::provides_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr value,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::PublishesDef_var _tao_retval;
+    IR_ProvidesDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -33191,7 +21239,7 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_publishes",
+      "provides_interfaces",
       forward_to.out (),
       ACE_TRY_ENV
     );
@@ -33201,28 +21249,20 @@
       servant_upcall.servant ()->_downcast (
           "IDL:omg.org/IR/ComponentDef:1.0"
         )
-    )->create_publishes (
-        id,
-        name,
-        version,
-        value,
+    )->provides_interfaces (
         ACE_TRY_ENV
       );
 }
 
-IR::ConsumesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_consumes (
+IR::UsesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::uses_interfaces (
     CORBA_Object *_collocated_tao_target_,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr value,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::ConsumesDef_var _tao_retval;
+    IR_UsesDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -33230,1894 +21270,907 @@
   CORBA::Object_var forward_to;
   servant_upcall.prepare_for_upcall (
       _collocated_tao_target_->_object_key (),
-      "create_consumes",
-      forward_to.out (),
-      ACE_TRY_ENV
-    );
-      ACE_CHECK_RETURN (0);
-    return ACE_reinterpret_cast (
-      POA_IR::ComponentDef_ptr,
-      servant_upcall.servant ()->_downcast (
-          "IDL:omg.org/IR/ComponentDef:1.0"
-        )
-    )->create_consumes (
-        id,
-        name,
-        version,
-        value,
-        ACE_TRY_ENV
-      );
-}
-
-//
-//           End ThruPOA Proxy Implementation
-///////////////////////////////////////////////////////////////////////
-
-// skeleton constructor
-POA_IR::ComponentDef::ComponentDef (void)
-{
-  this->optable_ = &tao_IR_ComponentDef_optable;
-}
-
-// copy ctor
-POA_IR::ComponentDef::ComponentDef (const ComponentDef& rhs)
-  :   ACE_NESTED_CLASS (POA_IR,InterfaceDef) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
-    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
-    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
-    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
-    TAO_ServantBase (rhs)
-{}
-
-// skeleton destructor
-POA_IR::ComponentDef::~ComponentDef (void)
-{
-}
-
-void POA_IR::ComponentDef::_get_supported_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::InterfaceDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get ri (
-      "_get_supported_interfaces",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->supported_interfaces (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::InterfaceDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ComponentDef::_set_supported_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-_tao_server_request.argument_flag (0);
-    IR::InterfaceDefSeq supported_interfaces;
-  if (!(
-    (_tao_in >> supported_interfaces)
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_set ri (
-      "_set_supported_interfaces",
-      _tao_server_request.service_info (),
-      supported_interfaces,
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_impl->supported_interfaces (
-          supported_interfaces,
-          ACE_TRY_ENV
-        );
-      TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-}
-
-void POA_IR::ComponentDef::_get_base_component_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::ComponentDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get ri (
-      "_get_base_component",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->base_component (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ComponentDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
-}
-
-void POA_IR::ComponentDef::_get_provides_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::ProvidesDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get ri (
-      "_get_provides_interfaces",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->provides_interfaces (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ProvidesDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      "uses_interfaces",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->uses_interfaces (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::_get_uses_interfaces_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::EmitsDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::emits_events (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::UsesDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_EmitsDefSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get ri (
-      "_get_uses_interfaces",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "emits_events",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->uses_interfaces (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::UsesDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->emits_events (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::_get_emits_events_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::PublishesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::publishes_events (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::EmitsDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_PublishesDefSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get ri (
-      "_get_emits_events",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "publishes_events",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->emits_events (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::EmitsDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->publishes_events (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::_get_publishes_events_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::ConsumesDefSeq * POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::consumes_events (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::PublishesDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_ConsumesDefSeq_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get ri (
-      "_get_publishes_events",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "consumes_events",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->publishes_events (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::PublishesDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->consumes_events (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::_get_consumes_events_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+CORBA::Boolean POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::is_basic (
+    CORBA_Object *_collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::ConsumesDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    CORBA::Boolean _tao_retval = 0;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get ri (
-      "_get_consumes_events",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "is_basic",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->consumes_events (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ConsumesDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN  (_tao_retval);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->is_basic (
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::_get_is_basic_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::ProvidesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_provides (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_InterfaceDef_ptr interface_type,
     CORBA::Environment &ACE_TRY_ENV
   )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
+  ))
 {
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+    IR_ProvidesDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get ri (
-      "_get_is_basic",
-      _tao_server_request.service_info (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_provides",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_basic (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->create_provides (
+        id,
+        name,
+        version,
+        interface_type,
+        ACE_TRY_ENV
+      );
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
+IR::UsesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_uses (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_InterfaceDef_ptr interface_type,
+    CORBA::Boolean is_multiple,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+{
+    IR_UsesDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
+    );
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_uses",
+      forward_to.out (),
+      ACE_TRY_ENV
+    );
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->create_uses (
+        id,
+        name,
+        version,
+        interface_type,
+        is_multiple,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::create_provides_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::EmitsDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_emits (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_ValueDef_ptr value,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::ProvidesDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::InterfaceDef_var interface_type;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> interface_type.out ())
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    IR_EmitsDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_provides ri (
-      "create_provides",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      interface_type.in (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_emits",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_provides (
-          id.in (),
-          name.in (),
-          version.in (),
-          interface_type.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ProvidesDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->create_emits (
+        id,
+        name,
+        version,
+        value,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::create_uses_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::PublishesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_publishes (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_ValueDef_ptr value,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::UsesDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::InterfaceDef_var interface_type;
-  CORBA::Boolean is_multiple;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> interface_type.out ()) &&
-    (_tao_in >> CORBA::Any::to_boolean (is_multiple))
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    IR_PublishesDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_uses ri (
-      "create_uses",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      interface_type.in (),
-      is_multiple,
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_publishes",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_uses (
-          id.in (),
-          name.in (),
-          version.in (),
-          interface_type.in (),
-          is_multiple,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::UsesDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->create_publishes (
+        id,
+        name,
+        version,
+        value,
+        ACE_TRY_ENV
+      );
 }
 
-void POA_IR::ComponentDef::create_emits_skel (
-    TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+IR::ConsumesDef_ptr POA_IR::_TAO_ComponentDef_ThruPOA_Proxy_Impl::create_consumes (
+    CORBA_Object *_collocated_tao_target_,
+    const char * id,
+    const char * name,
+    const char * version,
+    IR_ValueDef_ptr value,
     CORBA::Environment &ACE_TRY_ENV
   )
-{
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
-
-  IR::EmitsDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::ValueDef_var value;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> value.out ())
+  ACE_THROW_SPEC ((
+    CORBA::SystemException
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
+{
+    IR_ConsumesDef_var _tao_retval;
+  ACE_UNUSED_ARG (_tao_retval);
+  TAO_Object_Adapter::Servant_Upcall servant_upcall (
+      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
     );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_emits ri (
-      "create_emits",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      value.in (),
+  CORBA::Object_var forward_to;
+  servant_upcall.prepare_for_upcall (
+      _collocated_tao_target_->_object_key (),
+      "create_consumes",
+      forward_to.out (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_emits (
-          id.in (),
-          name.in (),
-          version.in (),
-          value.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::EmitsDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
-  ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+      ACE_CHECK_RETURN (0);
+    return ACE_reinterpret_cast (
+      POA_IR::ComponentDef_ptr,
+      servant_upcall.servant ()->_downcast (
+          "IDL:omg.org/IR/ComponentDef:1.0"
+        )
+    )->create_consumes (
+        id,
+        name,
+        version,
+        value,
+        ACE_TRY_ENV
+      );
+}
 
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+//
+//           End ThruPOA Proxy Implementation
+///////////////////////////////////////////////////////////////////////
 
+// skeleton constructor
+POA_IR::ComponentDef::ComponentDef (void)
+{
+  this->optable_ = &tao_IR_ComponentDef_optable;
 }
 
-void POA_IR::ComponentDef::create_publishes_skel (
+// copy ctor
+POA_IR::ComponentDef::ComponentDef (const ComponentDef& rhs)
+  :   ACE_NESTED_CLASS (POA_IR,InterfaceDef) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Container) (rhs),
+    ACE_NESTED_CLASS (POA_IR,Contained) (rhs),
+    ACE_NESTED_CLASS (POA_IR,IDLType) (rhs),
+    ACE_NESTED_CLASS (POA_CORBA,IRObject) (rhs),
+    TAO_ServantBase (rhs)
+{}
+
+// skeleton destructor
+POA_IR::ComponentDef::~ComponentDef (void)
+{
+}
+
+void POA_IR::ComponentDef::_get_supported_interfaces_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-  IR::PublishesDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::ValueDef_var value;
-  if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> value.out ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
+  IR_InterfaceDefSeq_var _tao_retval;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes ri (
-      "create_publishes",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      value.in (),
+  _tao_retval = _tao_impl->supported_interfaces (
       ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_publishes (
-          id.in (),
-          name.in (),
-          version.in (),
-          value.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::PublishesDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+    );
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void POA_IR::ComponentDef::create_consumes_skel (
+void POA_IR::ComponentDef::_set_supported_interfaces_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-  IR::ConsumesDef_var _tao_retval;
-  CORBA::String_var id;
-  CORBA::String_var name;
-  CORBA::String_var version;
-  IR::ValueDef_var value;
+  IR_InterfaceDefSeq supported_interfaces;
   if (!(
-    (_tao_in >> id.out ()) &&
-    (_tao_in >> name.out ()) &&
-    (_tao_in >> version.out ()) &&
-    (_tao_in >> value.out ())
+    (_tao_in >> supported_interfaces)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes ri (
-      "create_consumes",
-      _tao_server_request.service_info (),
-      id.in (),
-      name.in (),
-      version.in (),
-      value.in (),
+  _tao_impl->supported_interfaces (
+      supported_interfaces,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_consumes (
-          id.in (),
-          name.in (),
-          version.in (),
-          value.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ConsumesDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(
-    (_tao_out << _tao_retval.in ())
-  ))
-    ACE_THROW (CORBA::MARSHAL());
-
 }
 
-void POA_IR::ComponentDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
+void POA_IR::ComponentDef::_get_base_component_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = 0;
-  CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
-    ACE_THROW (CORBA::MARSHAL ());
-  
-  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
-  ACE_CHECK;
-  
-  _tao_server_request.init_reply ();
-  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
-}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
+
+  IR_ComponentDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->base_component (
+      ACE_TRY_ENV
+    );
 
-void POA_IR::ComponentDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
-    void * _tao_object_reference,
-    void * /* context */,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *) _tao_object_reference;
-  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
-    ACE_THROW (CORBA::MARSHAL ());
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Boolean POA_IR::ComponentDef::_is_a (
-    const char* value,
+void POA_IR::ComponentDef::_get_provides_interfaces_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ComponentDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/InterfaceDef:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
-    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
-      return 1;
-    else
-      return 0;
-}
-
-void* POA_IR::ComponentDef::_downcast (
-    const char* logical_type_id
-  )
-{
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ComponentDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::ComponentDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/InterfaceDef:1.0") == 0)
-    return ACE_static_cast (POA_IR::InterfaceDef_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
-    return ACE_static_cast (POA_IR::Container_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
-    return ACE_static_cast (POA_IR::Contained_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
-    return ACE_static_cast (POA_IR::IDLType_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
-    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
-  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
-    return ACE_static_cast(PortableServer::Servant, this);
-  return 0;
-}
-
-void POA_IR::ComponentDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
-{
-  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
-}
-
-const char* POA_IR::ComponentDef::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/IR/ComponentDef:1.0";
-}
-
-IR::ComponentDef*
-POA_IR::ComponentDef::_this (CORBA_Environment &ACE_TRY_ENV)
+)
 {
-  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
-  ACE_CHECK_RETURN (0);
-  
-  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
-  
-  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
-  else
-    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
-  
-  CORBA::Object_var obj = tmp;
-  return ::IR::ComponentDef::_unchecked_narrow (obj.in ());
-}
-
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  IR_ProvidesDefSeq_var _tao_retval;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->provides_interfaces (
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ComponentDef::_get_uses_interfaces_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_get::result (IR::InterfaceDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  IR_UsesDefSeq_var _tao_retval;
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_set::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_set (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const IR::InterfaceDefSeq & supported_interfaces,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    supported_interfaces_ (supported_interfaces)
-{}
+  _tao_retval = _tao_impl->uses_interfaces (
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_set::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_supported_interfaces = this->parameter_list_.length ();
-  this->parameter_list_.length (length_supported_interfaces + 1);
-  this->parameter_list_[length_supported_interfaces].argument <<=  this->supported_interfaces_;
-  
-  this->parameter_list_[length_supported_interfaces].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_set::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_supported_interfaces_set::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ComponentDef::_get_emits_events_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  CORBA::TypeCode tc (CORBA::tk_void);
-  this->result_val_.type (&tc);
-  
-  return &this->result_val_;
-}
-
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_EmitsDefSeq_var _tao_retval;
 
+  _tao_retval = _tao_impl->emits_events (
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_base_component_get::result (IR::ComponentDef_ptr result)
+void POA_IR::ComponentDef::_get_publishes_events_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_PublishesDefSeq_var _tao_retval;
 
+  _tao_retval = _tao_impl->publishes_events (
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_provides_interfaces_get::result (IR::ProvidesDefSeq * result)
+void POA_IR::ComponentDef::_get_consumes_events_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_ConsumesDefSeq_var _tao_retval;
 
+  _tao_retval = _tao_impl->consumes_events (
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_uses_interfaces_get::result (IR::UsesDefSeq * result)
+void POA_IR::ComponentDef::_get_is_basic_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  CORBA::Boolean _tao_retval = 0;
 
+  _tao_retval = _tao_impl->is_basic (
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << CORBA::Any::from_boolean (_tao_retval))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_emits_events_get::result (IR::EmitsDefSeq * result)
+void POA_IR::ComponentDef::create_provides_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_ProvidesDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_InterfaceDef_var interface_type;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> interface_type.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
+  _tao_retval = _tao_impl->create_provides (
+      id.in (),
+      name.in (),
+      version.in (),
+      interface_type.in (),
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_publishes_events_get::result (IR::PublishesDefSeq * result)
+void POA_IR::ComponentDef::create_uses_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  IR_UsesDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_InterfaceDef_var interface_type;
+  CORBA::Boolean is_multiple;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> interface_type.out ()) &&
+    (_tao_in >> CORBA::Any::to_boolean (is_multiple))
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
+  _tao_retval = _tao_impl->create_uses (
+      id.in (),
+      name.in (),
+      version.in (),
+      interface_type.in (),
+      is_multiple,
+      ACE_TRY_ENV
+    );
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  ACE_CHECK;
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_consumes_events_get::result (IR::ConsumesDefSeq * result)
+void POA_IR::ComponentDef::create_emits_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // update the result 
-   this->result_ = result;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
+  IR_EmitsDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_ValueDef_var value;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> value.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->create_emits (
+      id.in (),
+      name.in (),
+      version.in (),
+      value.in (),
+      ACE_TRY_ENV
+    );
 
+  ACE_CHECK;
 
-  Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ComponentDef::create_publishes_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_is_basic_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  IR_PublishesDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_ValueDef_var value;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> value.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_provides::TAO_ServerRequestInfo_IR_ComponentDef_create_provides (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::InterfaceDef_ptr interface_type,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    interface_type_ (interface_type)
-{}
+  _tao_retval = _tao_impl->create_publishes (
+      id.in (),
+      name.in (),
+      version.in (),
+      value.in (),
+      ACE_TRY_ENV
+    );
 
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_provides::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_interface_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_interface_type + 1);
-  this->parameter_list_[length_interface_type].argument <<=  this->interface_type_;
-  
-  this->parameter_list_[length_interface_type].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  ACE_CHECK;
 
-Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_provides::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+ _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_provides::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ComponentDef::create_consumes_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void *_tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *)_tao_object_reference;
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_provides::result (IR::ProvidesDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
+  IR_ConsumesDef_var _tao_retval;
+  CORBA::String_var id;
+  CORBA::String_var name;
+  CORBA::String_var version;
+  IR_ValueDef_var value;
+  if (!(
+    (_tao_in >> id.out ()) &&
+    (_tao_in >> name.out ()) &&
+    (_tao_in >> version.out ()) &&
+    (_tao_in >> value.out ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_uses::TAO_ServerRequestInfo_IR_ComponentDef_create_uses (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::InterfaceDef_ptr interface_type,
-    const CORBA::Boolean & is_multiple,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    interface_type_ (interface_type),
-    is_multiple_ (is_multiple)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_uses::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_interface_type = this->parameter_list_.length ();
-  this->parameter_list_.length (length_interface_type + 1);
-  this->parameter_list_[length_interface_type].argument <<=  this->interface_type_;
-  
-  this->parameter_list_[length_interface_type].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_is_multiple = this->parameter_list_.length ();
-  this->parameter_list_.length (length_is_multiple + 1);
-  this->parameter_list_[length_is_multiple].argument <<= CORBA::Any::from_boolean (this->is_multiple_);
-  this->parameter_list_[length_is_multiple].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_uses::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
+  _tao_retval = _tao_impl->create_consumes (
+      id.in (),
+      name.in (),
+      version.in (),
+      value.in (),
+      ACE_TRY_ENV
+    );
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_uses::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  ACE_CHECK;
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_uses::result (IR::UsesDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!(
+    (_tao_out << _tao_retval.in ())
+  ))
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_emits::TAO_ServerRequestInfo_IR_ComponentDef_create_emits (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr value,
-    CORBA::Environment &
+void POA_IR::ComponentDef::_is_a_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    value_ (value)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_emits::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_value + 1);
-  this->parameter_list_[length_value].argument <<=  this->value_;
-  
-  this->parameter_list_[length_value].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
+  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = 0;
+  CORBA::String_var value;
+  if (!((_tao_in >> value.out ())))
+    ACE_THROW (CORBA::MARSHAL ());
 
-Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_emits::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
+  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
+  ACE_CHECK;
+
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_emits::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ComponentDef::_non_existent_skel (
+    TAO_ServerRequest &_tao_server_request,
+    void * _tao_object_reference,
+    void * /* context */,
+    CORBA::Environment &ACE_TRY_ENV
+  )
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
+  POA_IR::ComponentDef *_tao_impl = (POA_IR::ComponentDef *) _tao_object_reference;
+  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
+  ACE_CHECK;
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_emits::result (IR::EmitsDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  _tao_server_request.init_reply ();
+  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
+    ACE_THROW (CORBA::MARSHAL ());
 }
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr value,
-    CORBA::Environment &
+CORBA::Boolean POA_IR::ComponentDef::_is_a (
+    const char* value,
+    CORBA::Environment &ACE_TRY_ENV
   )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    value_ (value)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_value + 1);
-  this->parameter_list_[length_value].argument <<=  this->value_;
-  
-  this->parameter_list_[length_value].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
+  if (
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/ComponentDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/InterfaceDef:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Container:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/Contained:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/IR/IDLType:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (ACE_TRY_ENV))))
+      return 1;
+    else
+      return 0;
 }
 
-Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void* POA_IR::ComponentDef::_downcast (
+    const char* logical_type_id
+  )
 {
-  // Generate the exception list on demand
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/ComponentDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::ComponentDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/InterfaceDef:1.0") == 0)
+    return ACE_static_cast (POA_IR::InterfaceDef_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Container:1.0") == 0)
+    return ACE_static_cast (POA_IR::Container_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/Contained:1.0") == 0)
+    return ACE_static_cast (POA_IR::Contained_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/IR/IDLType:1.0") == 0)
+    return ACE_static_cast (POA_IR::IDLType_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/IRObject:1.0") == 0)
+    return ACE_static_cast (POA_CORBA::IRObject_ptr, this);
+  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
+    return ACE_static_cast(PortableServer::Servant, this);
   return 0;
 }
 
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+void POA_IR::ComponentDef::_dispatch (TAO_ServerRequest &req, void *context, CORBA::Environment &ACE_TRY_ENV)
 {
-  // Generate the result on demand
-  
-  return &this->result_val_;
+  this->synchronous_upcall_dispatch(req, context, this, ACE_TRY_ENV);
 }
 
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_publishes::result (IR::PublishesDef_ptr result)
+const char* POA_IR::ComponentDef::_interface_repository_id (void) const
 {
-  // update the result 
-   this->result_ = result;
+  return "IDL:omg.org/IR/ComponentDef:1.0";
 }
 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr value,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    value_ (value)
-{}
-
-Dynamic::ParameterList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
+IR::ComponentDef*
+POA_IR::ComponentDef::_this (CORBA_Environment &ACE_TRY_ENV)
 {
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_value = this->parameter_list_.length ();
-  this->parameter_list_.length (length_value + 1);
-  this->parameter_list_[length_value].argument <<=  this->value_;
+  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
+  ACE_CHECK_RETURN (0);
   
-  this->parameter_list_[length_value].mode = Dynamic::PARAM_IN;
+  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
   
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
+  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
+  else
+    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
-  return &this->result_val_;
-}
-
-void 
-POA_IR::ComponentDef::TAO_ServerRequestInfo_IR_ComponentDef_create_consumes::result (IR::ConsumesDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  CORBA::Object_var obj = tmp;
+  return IR_ComponentDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_PrimaryKeyDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -35125,7 +22178,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:23 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_PrimaryKeyDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -35196,30 +22249,30 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::PrimaryKeyDef::move_skel},
+      {"move",  &POA_IR::PrimaryKeyDef::move_skel},
       {"_is_a",  &POA_IR::PrimaryKeyDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::PrimaryKeyDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::PrimaryKeyDef::_set_id_skel},
-      {"describe", 	&POA_IR::PrimaryKeyDef::describe_skel},
-      {"_get_name", 	&POA_IR::PrimaryKeyDef::_get_name_skel},
-      {"_set_name", 	&POA_IR::PrimaryKeyDef::_set_name_skel},
-      {"destroy", 	&POA_IR::PrimaryKeyDef::destroy_skel},
-      {"_get_def_kind", 	&POA_IR::PrimaryKeyDef::_get_def_kind_skel},
-      {"is_a", 	&POA_IR::PrimaryKeyDef::is_a_skel},
-      {"_get_version", 	&POA_IR::PrimaryKeyDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::PrimaryKeyDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::PrimaryKeyDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::PrimaryKeyDef::_get_defined_in_skel},
-      {"_get_primary_key", 	&POA_IR::PrimaryKeyDef::_get_primary_key_skel},
+      {"_get_id",       &POA_IR::PrimaryKeyDef::_get_id_skel},
+      {"_set_id",       &POA_IR::PrimaryKeyDef::_set_id_skel},
+      {"describe",      &POA_IR::PrimaryKeyDef::describe_skel},
+      {"_get_name",     &POA_IR::PrimaryKeyDef::_get_name_skel},
+      {"_set_name",     &POA_IR::PrimaryKeyDef::_set_name_skel},
+      {"destroy",       &POA_IR::PrimaryKeyDef::destroy_skel},
+      {"_get_def_kind",         &POA_IR::PrimaryKeyDef::_get_def_kind_skel},
+      {"is_a",  &POA_IR::PrimaryKeyDef::is_a_skel},
+      {"_get_version",  &POA_IR::PrimaryKeyDef::_get_version_skel},
+      {"_set_version",  &POA_IR::PrimaryKeyDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::PrimaryKeyDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::PrimaryKeyDef::_get_defined_in_skel},
+      {"_get_primary_key",      &POA_IR::PrimaryKeyDef::_get_primary_key_skel},
       {"_non_existent",  &POA_IR::PrimaryKeyDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::PrimaryKeyDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::PrimaryKeyDef::_get_containing_repository_skel},
     };
 
   static const signed char lookup[] =
     {
-       -6,  -2,  -9,  -2,   4,   5,  -1, -38,   8, -38,  -1,  -1,  11,  12, 
-       13, -14,  -2, -33,  16,  -1,  17,  18,  -1,  19,  -1,  -1,  -1,  -1, 
-       -1,  -1,  -1,  20, 
+       -6,  -2,  -9,  -2,   4,   5,  -1, -38,   8, -38,  -1,  -1,  11,  12,
+       13, -14,  -2, -33,  16,  -1,  17,  18,  -1,  19,  -1,  -1,  -1,  -1,
+       -1,  -1,  -1,  20,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -35253,10 +22306,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:23 */
+/* ending time is 11:23:11 */
 static TAO_IR_PrimaryKeyDef_Perfect_Hash_OpTable tao_IR_PrimaryKeyDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -35282,9 +22334,9 @@
   
 }
 
-IR::_TAO_PrimaryKeyDef_Proxy_Impl&
+_TAO_PrimaryKeyDef_Proxy_Impl&
 POA_IR::_TAO_PrimaryKeyDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::PrimaryKeyDef *object,
+    IR_PrimaryKeyDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -35316,7 +22368,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl,
+              _TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -35326,7 +22378,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_PrimaryKeyDef_Remote_Proxy_Impl,
+              _TAO_PrimaryKeyDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -35343,26 +22395,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_PrimaryKeyDef_Proxy_Broker *
-IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_PrimaryKeyDef_Proxy_Broker *
+_TAO_PrimaryKeyDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_PrimaryKeyDef_Strategized_Proxy_Broker::the_TAO_PrimaryKeyDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_PrimaryKeyDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_function;
+  _TAO_PrimaryKeyDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_PrimaryKeyDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_PrimaryKeyDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_PrimaryKeyDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_PrimaryKeyDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_PrimaryKeyDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_PrimaryKeyDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -35372,6 +22424,9 @@
 POA_IR::_TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl::_TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl::~_TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 CORBA::Boolean POA_IR::_TAO_PrimaryKeyDef_ThruPOA_Proxy_Impl::is_a (
@@ -35415,7 +22470,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ValueDef_var _tao_retval;
+    IR_ValueDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -35462,10 +22517,10 @@
 
 void POA_IR::PrimaryKeyDef::is_a_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::PrimaryKeyDef *_tao_impl = (POA_IR::PrimaryKeyDef *)_tao_object_reference;
@@ -35475,133 +22530,50 @@
   if (!(
     (_tao_in >> primary_key_id.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a ri (
-      "is_a",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->is_a (
       primary_key_id.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_a (
-          primary_key_id.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::PrimaryKeyDef::_get_primary_key_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::PrimaryKeyDef *_tao_impl = (POA_IR::PrimaryKeyDef *)_tao_object_reference;
 
-  IR::ValueDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get ri (
-      "_get_primary_key",
-      _tao_server_request.service_info (),
+  IR_ValueDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->primary_key (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->primary_key (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::PrimaryKeyDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -35611,20 +22583,20 @@
   POA_IR::PrimaryKeyDef *_tao_impl = (POA_IR::PrimaryKeyDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::PrimaryKeyDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -35633,10 +22605,10 @@
   POA_IR::PrimaryKeyDef *_tao_impl = (POA_IR::PrimaryKeyDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -35694,100 +22666,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::PrimaryKeyDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * primary_key_id,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    primary_key_id_ (primary_key_id)
-{}
-
-Dynamic::ParameterList *
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_primary_key_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_primary_key_id + 1);
-  this->parameter_list_[length_primary_key_id].argument <<= primary_key_id_;
-  this->parameter_list_[length_primary_key_id].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_is_a::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::PrimaryKeyDef::TAO_ServerRequestInfo_IR_PrimaryKeyDef_primary_key_get::result (IR::ValueDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  return IR_PrimaryKeyDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_FactoryDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -35795,7 +22676,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:23 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_FactoryDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -35866,32 +22747,32 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::FactoryDef::move_skel},
+      {"move",  &POA_IR::FactoryDef::move_skel},
       {"_is_a",  &POA_IR::FactoryDef::_is_a_skel},
-      {"_get_mode", 	&POA_IR::FactoryDef::_get_mode_skel},
-      {"_set_name", 	&POA_IR::FactoryDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::FactoryDef::_get_name_skel},
-      {"_set_mode", 	&POA_IR::FactoryDef::_set_mode_skel},
-      {"_get_params", 	&POA_IR::FactoryDef::_get_params_skel},
-      {"_set_params", 	&POA_IR::FactoryDef::_set_params_skel},
-      {"_get_contexts", 	&POA_IR::FactoryDef::_get_contexts_skel},
-      {"_set_contexts", 	&POA_IR::FactoryDef::_set_contexts_skel},
-      {"_get_exceptions", 	&POA_IR::FactoryDef::_get_exceptions_skel},
-      {"_set_exceptions", 	&POA_IR::FactoryDef::_set_exceptions_skel},
-      {"_get_version", 	&POA_IR::FactoryDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::FactoryDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::FactoryDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::FactoryDef::_get_defined_in_skel},
-      {"_get_id", 	&POA_IR::FactoryDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::FactoryDef::_set_id_skel},
-      {"describe", 	&POA_IR::FactoryDef::describe_skel},
-      {"_get_result_def", 	&POA_IR::FactoryDef::_get_result_def_skel},
-      {"_set_result_def", 	&POA_IR::FactoryDef::_set_result_def_skel},
-      {"_get_def_kind", 	&POA_IR::FactoryDef::_get_def_kind_skel},
-      {"_get_result", 	&POA_IR::FactoryDef::_get_result_skel},
-      {"destroy", 	&POA_IR::FactoryDef::destroy_skel},
+      {"_get_mode",     &POA_IR::FactoryDef::_get_mode_skel},
+      {"_set_name",     &POA_IR::FactoryDef::_set_name_skel},
+      {"_get_name",     &POA_IR::FactoryDef::_get_name_skel},
+      {"_set_mode",     &POA_IR::FactoryDef::_set_mode_skel},
+      {"_get_params",   &POA_IR::FactoryDef::_get_params_skel},
+      {"_set_params",   &POA_IR::FactoryDef::_set_params_skel},
+      {"_get_contexts",         &POA_IR::FactoryDef::_get_contexts_skel},
+      {"_set_contexts",         &POA_IR::FactoryDef::_set_contexts_skel},
+      {"_get_exceptions",       &POA_IR::FactoryDef::_get_exceptions_skel},
+      {"_set_exceptions",       &POA_IR::FactoryDef::_set_exceptions_skel},
+      {"_get_version",  &POA_IR::FactoryDef::_get_version_skel},
+      {"_set_version",  &POA_IR::FactoryDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::FactoryDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::FactoryDef::_get_defined_in_skel},
+      {"_get_id",       &POA_IR::FactoryDef::_get_id_skel},
+      {"_set_id",       &POA_IR::FactoryDef::_set_id_skel},
+      {"describe",      &POA_IR::FactoryDef::describe_skel},
+      {"_get_result_def",       &POA_IR::FactoryDef::_get_result_def_skel},
+      {"_set_result_def",       &POA_IR::FactoryDef::_set_result_def_skel},
+      {"_get_def_kind",         &POA_IR::FactoryDef::_get_def_kind_skel},
+      {"_get_result",   &POA_IR::FactoryDef::_get_result_skel},
+      {"destroy",       &POA_IR::FactoryDef::destroy_skel},
       {"_non_existent",  &POA_IR::FactoryDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::FactoryDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::FactoryDef::_get_containing_repository_skel},
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -35901,7 +22782,7 @@
       if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
         {
             {
-              const class TAO_operation_db_entry   *resword; 
+              const class TAO_operation_db_entry   *resword;
 
               switch (key)
                 {
@@ -35981,10 +22862,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:23 */
+/* ending time is 11:23:11 */
 static TAO_IR_FactoryDef_Perfect_Hash_OpTable tao_IR_FactoryDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -36010,9 +22890,9 @@
   
 }
 
-IR::_TAO_FactoryDef_Proxy_Impl&
+_TAO_FactoryDef_Proxy_Impl&
 POA_IR::_TAO_FactoryDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::FactoryDef *object,
+    IR_FactoryDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -36044,7 +22924,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_FactoryDef_ThruPOA_Proxy_Impl,
+              _TAO_FactoryDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -36054,7 +22934,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_FactoryDef_Remote_Proxy_Impl,
+              _TAO_FactoryDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -36071,26 +22951,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_FactoryDef_Proxy_Broker *
-IR__TAO_FactoryDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_FactoryDef_Proxy_Broker *
+_TAO_FactoryDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_FactoryDef_Strategized_Proxy_Broker::the_TAO_FactoryDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_FactoryDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_FactoryDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_FactoryDef_Proxy_Broker_Factory_function;
+  _TAO_FactoryDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_FactoryDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_FactoryDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_FactoryDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_FactoryDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_FactoryDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_FactoryDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_FactoryDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -36100,6 +22980,9 @@
 POA_IR::_TAO_FactoryDef_ThruPOA_Proxy_Impl::_TAO_FactoryDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_FactoryDef_ThruPOA_Proxy_Impl::~_TAO_FactoryDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 //
@@ -36126,7 +23009,7 @@
 }
 
 void POA_IR::FactoryDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -36136,20 +23019,20 @@
   POA_IR::FactoryDef *_tao_impl = (POA_IR::FactoryDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::FactoryDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -36158,10 +23041,10 @@
   POA_IR::FactoryDef *_tao_impl = (POA_IR::FactoryDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -36222,12 +23105,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::FactoryDef::_unchecked_narrow (obj.in ());
+  return IR_FactoryDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_FinderDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -36235,7 +23115,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:23 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_FinderDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -36306,32 +23186,32 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"move", 	&POA_IR::FinderDef::move_skel},
+      {"move",  &POA_IR::FinderDef::move_skel},
       {"_is_a",  &POA_IR::FinderDef::_is_a_skel},
-      {"_get_mode", 	&POA_IR::FinderDef::_get_mode_skel},
-      {"_set_name", 	&POA_IR::FinderDef::_set_name_skel},
-      {"_get_name", 	&POA_IR::FinderDef::_get_name_skel},
-      {"_set_mode", 	&POA_IR::FinderDef::_set_mode_skel},
-      {"_get_params", 	&POA_IR::FinderDef::_get_params_skel},
-      {"_set_params", 	&POA_IR::FinderDef::_set_params_skel},
-      {"_get_contexts", 	&POA_IR::FinderDef::_get_contexts_skel},
-      {"_set_contexts", 	&POA_IR::FinderDef::_set_contexts_skel},
-      {"_get_exceptions", 	&POA_IR::FinderDef::_get_exceptions_skel},
-      {"_set_exceptions", 	&POA_IR::FinderDef::_set_exceptions_skel},
-      {"_get_version", 	&POA_IR::FinderDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::FinderDef::_set_version_skel},
-      {"_get_absolute_name", 	&POA_IR::FinderDef::_get_absolute_name_skel},
-      {"_get_defined_in", 	&POA_IR::FinderDef::_get_defined_in_skel},
-      {"_get_id", 	&POA_IR::FinderDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::FinderDef::_set_id_skel},
-      {"describe", 	&POA_IR::FinderDef::describe_skel},
-      {"_get_result_def", 	&POA_IR::FinderDef::_get_result_def_skel},
-      {"_set_result_def", 	&POA_IR::FinderDef::_set_result_def_skel},
-      {"_get_def_kind", 	&POA_IR::FinderDef::_get_def_kind_skel},
-      {"_get_result", 	&POA_IR::FinderDef::_get_result_skel},
-      {"destroy", 	&POA_IR::FinderDef::destroy_skel},
+      {"_get_mode",     &POA_IR::FinderDef::_get_mode_skel},
+      {"_set_name",     &POA_IR::FinderDef::_set_name_skel},
+      {"_get_name",     &POA_IR::FinderDef::_get_name_skel},
+      {"_set_mode",     &POA_IR::FinderDef::_set_mode_skel},
+      {"_get_params",   &POA_IR::FinderDef::_get_params_skel},
+      {"_set_params",   &POA_IR::FinderDef::_set_params_skel},
+      {"_get_contexts",         &POA_IR::FinderDef::_get_contexts_skel},
+      {"_set_contexts",         &POA_IR::FinderDef::_set_contexts_skel},
+      {"_get_exceptions",       &POA_IR::FinderDef::_get_exceptions_skel},
+      {"_set_exceptions",       &POA_IR::FinderDef::_set_exceptions_skel},
+      {"_get_version",  &POA_IR::FinderDef::_get_version_skel},
+      {"_set_version",  &POA_IR::FinderDef::_set_version_skel},
+      {"_get_absolute_name",    &POA_IR::FinderDef::_get_absolute_name_skel},
+      {"_get_defined_in",       &POA_IR::FinderDef::_get_defined_in_skel},
+      {"_get_id",       &POA_IR::FinderDef::_get_id_skel},
+      {"_set_id",       &POA_IR::FinderDef::_set_id_skel},
+      {"describe",      &POA_IR::FinderDef::describe_skel},
+      {"_get_result_def",       &POA_IR::FinderDef::_get_result_def_skel},
+      {"_set_result_def",       &POA_IR::FinderDef::_set_result_def_skel},
+      {"_get_def_kind",         &POA_IR::FinderDef::_get_def_kind_skel},
+      {"_get_result",   &POA_IR::FinderDef::_get_result_skel},
+      {"destroy",       &POA_IR::FinderDef::destroy_skel},
       {"_non_existent",  &POA_IR::FinderDef::_non_existent_skel},
-      {"_get_containing_repository", 	&POA_IR::FinderDef::_get_containing_repository_skel},
+      {"_get_containing_repository",    &POA_IR::FinderDef::_get_containing_repository_skel},
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -36341,7 +23221,7 @@
       if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
         {
             {
-              const class TAO_operation_db_entry   *resword; 
+              const class TAO_operation_db_entry   *resword;
 
               switch (key)
                 {
@@ -36421,10 +23301,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:23 */
+/* ending time is 11:23:11 */
 static TAO_IR_FinderDef_Perfect_Hash_OpTable tao_IR_FinderDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -36450,9 +23329,9 @@
   
 }
 
-IR::_TAO_FinderDef_Proxy_Impl&
+_TAO_FinderDef_Proxy_Impl&
 POA_IR::_TAO_FinderDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::FinderDef *object,
+    IR_FinderDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -36484,7 +23363,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_FinderDef_ThruPOA_Proxy_Impl,
+              _TAO_FinderDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -36494,7 +23373,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_FinderDef_Remote_Proxy_Impl,
+              _TAO_FinderDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -36511,26 +23390,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_FinderDef_Proxy_Broker *
-IR__TAO_FinderDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_FinderDef_Proxy_Broker *
+_TAO_FinderDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_FinderDef_Strategized_Proxy_Broker::the_TAO_FinderDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_FinderDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_FinderDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_FinderDef_Proxy_Broker_Factory_function;
+  _TAO_FinderDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_FinderDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_FinderDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_FinderDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_FinderDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_FinderDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_FinderDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_FinderDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -36540,6 +23419,9 @@
 POA_IR::_TAO_FinderDef_ThruPOA_Proxy_Impl::_TAO_FinderDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_FinderDef_ThruPOA_Proxy_Impl::~_TAO_FinderDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 //
@@ -36566,7 +23448,7 @@
 }
 
 void POA_IR::FinderDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -36576,20 +23458,20 @@
   POA_IR::FinderDef *_tao_impl = (POA_IR::FinderDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::FinderDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -36598,10 +23480,10 @@
   POA_IR::FinderDef *_tao_impl = (POA_IR::FinderDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -36662,12 +23544,9 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::FinderDef::_unchecked_narrow (obj.in ());
+  return IR_FinderDef::_unchecked_narrow (obj.in ());
 }
 
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-#endif /* TAO_HAS_INTERCEPTORS */
 class TAO_IR_HomeDef_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -36675,7 +23554,7 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 10:26:23 */
+/* starting time is 11:23:11 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
 /* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_IR_HomeDef_Perfect_Hash_OpTable -N lookup  */
 unsigned int
@@ -36746,66 +23625,66 @@
   static const class TAO_operation_db_entry  wordlist[] =
     {
       {"",0},{"",0},{"",0},{"",0},
-      {"is_a", 	&POA_IR::HomeDef::is_a_skel},
+      {"is_a",  &POA_IR::HomeDef::is_a_skel},
       {"_is_a",  &POA_IR::HomeDef::_is_a_skel},
-      {"_get_id", 	&POA_IR::HomeDef::_get_id_skel},
-      {"_set_id", 	&POA_IR::HomeDef::_set_id_skel},
-      {"lookup", 	&POA_IR::HomeDef::lookup_skel},
-      {"_get_def_kind", 	&POA_IR::HomeDef::_get_def_kind_skel},
-      {"_get_is_local", 	&POA_IR::HomeDef::_get_is_local_skel},
-      {"_set_is_local", 	&POA_IR::HomeDef::_set_is_local_skel},
-      {"_get_version", 	&POA_IR::HomeDef::_get_version_skel},
-      {"_set_version", 	&POA_IR::HomeDef::_set_version_skel},
-      {"_get_defined_in", 	&POA_IR::HomeDef::_get_defined_in_skel},
-      {"create_enum", 	&POA_IR::HomeDef::create_enum_skel},
-      {"_get_finders", 	&POA_IR::HomeDef::_get_finders_skel},
-      {"_get_is_basic", 	&POA_IR::HomeDef::_get_is_basic_skel},
-      {"_get_factories", 	&POA_IR::HomeDef::_get_factories_skel},
-      {"create_value_box", 	&POA_IR::HomeDef::create_value_box_skel},
-      {"describe_contents", 	&POA_IR::HomeDef::describe_contents_skel},
-      {"create_finder", 	&POA_IR::HomeDef::create_finder_skel},
-      {"_get_base_interfaces", 	&POA_IR::HomeDef::_get_base_interfaces_skel},
-      {"_set_base_interfaces", 	&POA_IR::HomeDef::_set_base_interfaces_skel},
-      {"create_union", 	&POA_IR::HomeDef::create_union_skel},
-      {"contents", 	&POA_IR::HomeDef::contents_skel},
-      {"create_operation", 	&POA_IR::HomeDef::create_operation_skel},
-      {"create_exception", 	&POA_IR::HomeDef::create_exception_skel},
-      {"create_alias", 	&POA_IR::HomeDef::create_alias_skel},
+      {"_get_id",       &POA_IR::HomeDef::_get_id_skel},
+      {"_set_id",       &POA_IR::HomeDef::_set_id_skel},
+      {"lookup",        &POA_IR::HomeDef::lookup_skel},
+      {"_get_def_kind",         &POA_IR::HomeDef::_get_def_kind_skel},
+      {"_get_is_local",         &POA_IR::HomeDef::_get_is_local_skel},
+      {"_set_is_local",         &POA_IR::HomeDef::_set_is_local_skel},
+      {"_get_version",  &POA_IR::HomeDef::_get_version_skel},
+      {"_set_version",  &POA_IR::HomeDef::_set_version_skel},
+      {"_get_defined_in",       &POA_IR::HomeDef::_get_defined_in_skel},
+      {"create_enum",   &POA_IR::HomeDef::create_enum_skel},
+      {"_get_finders",  &POA_IR::HomeDef::_get_finders_skel},
+      {"_get_is_basic",         &POA_IR::HomeDef::_get_is_basic_skel},
+      {"_get_factories",        &POA_IR::HomeDef::_get_factories_skel},
+      {"create_value_box",      &POA_IR::HomeDef::create_value_box_skel},
+      {"describe_contents",     &POA_IR::HomeDef::describe_contents_skel},
+      {"create_finder",         &POA_IR::HomeDef::create_finder_skel},
+      {"_get_base_interfaces",  &POA_IR::HomeDef::_get_base_interfaces_skel},
+      {"_set_base_interfaces",  &POA_IR::HomeDef::_set_base_interfaces_skel},
+      {"create_union",  &POA_IR::HomeDef::create_union_skel},
+      {"contents",      &POA_IR::HomeDef::contents_skel},
+      {"create_operation",      &POA_IR::HomeDef::create_operation_skel},
+      {"create_exception",      &POA_IR::HomeDef::create_exception_skel},
+      {"create_alias",  &POA_IR::HomeDef::create_alias_skel},
       {"_non_existent",  &POA_IR::HomeDef::_non_existent_skel},
-      {"_get_is_abstract", 	&POA_IR::HomeDef::_get_is_abstract_skel},
-      {"_set_is_abstract", 	&POA_IR::HomeDef::_set_is_abstract_skel},
-      {"move", 	&POA_IR::HomeDef::move_skel},
-      {"_get_managed_component", 	&POA_IR::HomeDef::_get_managed_component_skel},
-      {"describe", 	&POA_IR::HomeDef::describe_skel},
-      {"_get_name", 	&POA_IR::HomeDef::_get_name_skel},
-      {"_get_type", 	&POA_IR::HomeDef::_get_type_skel},
-      {"_set_name", 	&POA_IR::HomeDef::_set_name_skel},
-      {"create_struct", 	&POA_IR::HomeDef::create_struct_skel},
-      {"_get_base_home", 	&POA_IR::HomeDef::_get_base_home_skel},
-      {"create_constant", 	&POA_IR::HomeDef::create_constant_skel},
-      {"lookup_name", 	&POA_IR::HomeDef::lookup_name_skel},
-      {"destroy", 	&POA_IR::HomeDef::destroy_skel},
-      {"_get_absolute_name", 	&POA_IR::HomeDef::_get_absolute_name_skel},
-      {"_get_primary_key", 	&POA_IR::HomeDef::_get_primary_key_skel},
-      {"create_value", 	&POA_IR::HomeDef::create_value_skel},
-      {"create_module", 	&POA_IR::HomeDef::create_module_skel},
-      {"create_native", 	&POA_IR::HomeDef::create_native_skel},
-      {"create_attribute", 	&POA_IR::HomeDef::create_attribute_skel},
-      {"create_interface", 	&POA_IR::HomeDef::create_interface_skel},
-      {"_get_containing_repository", 	&POA_IR::HomeDef::_get_containing_repository_skel},
-      {"create_factory", 	&POA_IR::HomeDef::create_factory_skel},
-      {"create_primary_key", 	&POA_IR::HomeDef::create_primary_key_skel},
+      {"_get_is_abstract",      &POA_IR::HomeDef::_get_is_abstract_skel},
+      {"_set_is_abstract",      &POA_IR::HomeDef::_set_is_abstract_skel},
+      {"move",  &POA_IR::HomeDef::move_skel},
+      {"_get_managed_component",        &POA_IR::HomeDef::_get_managed_component_skel},
+      {"describe",      &POA_IR::HomeDef::describe_skel},
+      {"_get_name",     &POA_IR::HomeDef::_get_name_skel},
+      {"_get_type",     &POA_IR::HomeDef::_get_type_skel},
+      {"_set_name",     &POA_IR::HomeDef::_set_name_skel},
+      {"create_struct",         &POA_IR::HomeDef::create_struct_skel},
+      {"_get_base_home",        &POA_IR::HomeDef::_get_base_home_skel},
+      {"create_constant",       &POA_IR::HomeDef::create_constant_skel},
+      {"lookup_name",   &POA_IR::HomeDef::lookup_name_skel},
+      {"destroy",       &POA_IR::HomeDef::destroy_skel},
+      {"_get_absolute_name",    &POA_IR::HomeDef::_get_absolute_name_skel},
+      {"_get_primary_key",      &POA_IR::HomeDef::_get_primary_key_skel},
+      {"create_value",  &POA_IR::HomeDef::create_value_skel},
+      {"create_module",         &POA_IR::HomeDef::create_module_skel},
+      {"create_native",         &POA_IR::HomeDef::create_native_skel},
+      {"create_attribute",      &POA_IR::HomeDef::create_attribute_skel},
+      {"create_interface",      &POA_IR::HomeDef::create_interface_skel},
+      {"_get_containing_repository",    &POA_IR::HomeDef::_get_containing_repository_skel},
+      {"create_factory",        &POA_IR::HomeDef::create_factory_skel},
+      {"create_primary_key",    &POA_IR::HomeDef::create_primary_key_skel},
     };
 
   static const signed char lookup[] =
     {
-        -1,   -1,   -6,   -2,    4,    5,   -1,  -93,   -1,   -1,   -1,    8,   -1,    9, 
-        -1,   -1,  -10,   -2,  -90,   -1,  -12,   -2,  -90,  -22,   -2,   14,   15,   16, 
-        17,   18,   -1,   19,   20,   21,   -1, -100,   -1,   24,   25,  -26,   -2,  -90, 
-        28,   29,  -30,   -2,  -90,   -1,   -1,   32,  -35,   -3,   33,   34,  -92,   -1, 
-        -1,   -1,   38,   39,   40,   41,   42,   43,   -1,   -1,   -1,   -1,   -1,  -46, 
-        -2,   44,   45,  -92,  -48,   -2,  -90,   -1,   -1,   -1,   -1,   50,   -1,   -1, 
-        51,   -1,   -1,   -1,   52, 
+        -1,   -1,   -6,   -2,    4,    5,   -1,  -93,   -1,   -1,   -1,    8,   -1,    9,
+        -1,   -1,  -10,   -2,  -90,   -1,  -12,   -2,  -90,  -22,   -2,   14,   15,   16,
+        17,   18,   -1,   19,   20,   21,   -1, -100,   -1,   24,   25,  -26,   -2,  -90,
+        28,   29,  -30,   -2,  -90,   -1,   -1,   32,  -35,   -3,   33,   34,  -92,   -1,
+        -1,   -1,   38,   39,   40,   41,   42,   43,   -1,   -1,   -1,   -1,   -1,  -46,
+        -2,   44,   45,  -92,  -48,   -2,  -90,   -1,   -1,   -1,   -1,   50,   -1,   -1,
+        51,   -1,   -1,   -1,   52,
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
@@ -36839,10 +23718,9 @@
     }
   return 0;
 }
-/* ending time is 10:26:23 */
+/* ending time is 11:23:11 */
 static TAO_IR_HomeDef_Perfect_Hash_OpTable tao_IR_HomeDef_optable;
 
-
 ///////////////////////////////////////////////////////////////////////
 //            Strategized Proxy Broker Implementation
 //
@@ -36868,9 +23746,9 @@
   
 }
 
-IR::_TAO_HomeDef_Proxy_Impl&
+_TAO_HomeDef_Proxy_Impl&
 POA_IR::_TAO_HomeDef_Strategized_Proxy_Broker::select_proxy (
-    ::IR::HomeDef *object,
+    IR_HomeDef *object,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
@@ -36902,7 +23780,7 @@
         case TAO_ORB_Core::THRU_POA_STRATEGY:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              POA_IR::_TAO_HomeDef_ThruPOA_Proxy_Impl,
+              _TAO_HomeDef_ThruPOA_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -36912,7 +23790,7 @@
         default:
           ACE_NEW_THROW_EX (
               this->proxy_cache_[strategy],
-              ::IR::_TAO_HomeDef_Remote_Proxy_Impl,
+              _TAO_HomeDef_Remote_Proxy_Impl,
               CORBA::NO_MEMORY ()
           );
           ACE_CHECK;
@@ -36929,26 +23807,26 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-IR::_TAO_HomeDef_Proxy_Broker *
-IR__TAO_HomeDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
+_TAO_HomeDef_Proxy_Broker *
+_TAO_HomeDef_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
 {
   ACE_UNUSED_ARG (obj);
   return ::POA_IR::_TAO_HomeDef_Strategized_Proxy_Broker::the_TAO_HomeDef_Strategized_Proxy_Broker();
 }
 
 int
-IR__TAO_HomeDef_Proxy_Broker_Factory_Initializer (long _dummy_)
+_TAO_HomeDef_Proxy_Broker_Factory_Initializer (long _dummy_)
 {
   ACE_UNUSED_ARG (_dummy_);
   
-  IR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer = 
-    IR__TAO_HomeDef_Proxy_Broker_Factory_function;
+  _TAO_HomeDef_Proxy_Broker_Factory_function_pointer = 
+    _TAO_HomeDef_Proxy_Broker_Factory_function;
   
   return 0;
 }
 
-static int IR__TAO_HomeDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
-  IR__TAO_HomeDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, IR__TAO_HomeDef_Proxy_Broker_Factory_Initializer));
+static int _TAO_HomeDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
+  _TAO_HomeDef_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_HomeDef_Proxy_Broker_Factory_Initializer));
 
 
 ///////////////////////////////////////////////////////////////////////
@@ -36958,6 +23836,9 @@
 POA_IR::_TAO_HomeDef_ThruPOA_Proxy_Impl::_TAO_HomeDef_ThruPOA_Proxy_Impl (void)
 {}
 
+POA_IR::_TAO_HomeDef_ThruPOA_Proxy_Impl::~_TAO_HomeDef_ThruPOA_Proxy_Impl (void)
+{}
+
 // ThruPOA Implementation of the IDL interface methods
 
 IR::HomeDef_ptr POA_IR::_TAO_HomeDef_ThruPOA_Proxy_Impl::base_home (
@@ -36968,7 +23849,7 @@
     CORBA::SystemException
   ))
 {
-    IR::HomeDef_var _tao_retval;
+    IR_HomeDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -36999,7 +23880,7 @@
     CORBA::SystemException
   ))
 {
-    IR::ComponentDef_var _tao_retval;
+    IR_ComponentDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37030,7 +23911,7 @@
     CORBA::SystemException
   ))
 {
-    IR::PrimaryKeyDef_var _tao_retval;
+    IR_PrimaryKeyDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37061,7 +23942,7 @@
     CORBA::SystemException
   ))
 {
-    IR::FactoryDefSeq_var _tao_retval;
+    IR_FactoryDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37092,7 +23973,7 @@
     CORBA::SystemException
   ))
 {
-    IR::FinderDefSeq_var _tao_retval;
+    IR_FinderDefSeq_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37151,14 +24032,14 @@
     const char * id,
     const char * name,
     const char * version,
-    IR::ValueDef_ptr primary_key,
+    IR_ValueDef_ptr primary_key,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::PrimaryKeyDef_var _tao_retval;
+    IR_PrimaryKeyDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37190,15 +24071,15 @@
     const char * id,
     const char * name,
     const char * version,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
+    const IR_ParDescriptionSeq & params,
+    const IR_ExceptionDefSeq & exceptions,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::FactoryDef_var _tao_retval;
+    IR_FactoryDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37231,15 +24112,15 @@
     const char * id,
     const char * name,
     const char * version,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
+    const IR_ParDescriptionSeq & params,
+    const IR_ExceptionDefSeq & exceptions,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-    IR::FinderDef_var _tao_retval;
+    IR_FinderDef_var _tao_retval;
   ACE_UNUSED_ARG (_tao_retval);
   TAO_Object_Adapter::Servant_Upcall servant_upcall (
       _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
@@ -37294,502 +24175,211 @@
 
 void POA_IR::HomeDef::_get_base_home_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::HomeDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_base_home_get ri (
-      "_get_base_home",
-      _tao_server_request.service_info (),
+  IR_HomeDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->base_home (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->base_home (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::HomeDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::_get_managed_component_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::ComponentDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get ri (
-      "_get_managed_component",
-      _tao_server_request.service_info (),
+  IR_ComponentDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->managed_component (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->managed_component (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::ComponentDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-  _tao_server_request.init_reply ();
+  ACE_CHECK;
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::_get_primary_key_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::PrimaryKeyDef_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get ri (
-      "_get_primary_key",
-      _tao_server_request.service_info (),
+  IR_PrimaryKeyDef_var _tao_retval;
+
+  _tao_retval = _tao_impl->primary_key (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->primary_key (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::PrimaryKeyDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::_get_factories_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::FactoryDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_factories_get ri (
-      "_get_factories",
-      _tao_server_request.service_info (),
+  IR_FactoryDefSeq_var _tao_retval;
+
+  _tao_retval = _tao_impl->factories (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
-      _tao_retval = _tao_impl->factories (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::FactoryDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::_get_finders_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
-  POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
-
-  IR::FinderDefSeq_var _tao_retval;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_finders_get ri (
-      "_get_finders",
-      _tao_server_request.service_info (),
-      ACE_TRY_ENV
-    );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
+  POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-      _tao_retval = _tao_impl->finders (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::FinderDefSeq * _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
+  IR_FinderDefSeq_var _tao_retval;
 
-TAO_INTERCEPTOR_CHECK;
+  _tao_retval = _tao_impl->finders (
+      ACE_TRY_ENV
+    );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::_get_is_basic_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
   CORBA::Boolean _tao_retval = 0;
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get ri (
-      "_get_is_basic",
-      _tao_server_request.service_info (),
+
+  _tao_retval = _tao_impl->is_basic (
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->is_basic (
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      CORBA::Boolean _tao_retval_info = _tao_retval;
-      ri.result (_tao_retval_info);
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << CORBA::Any::from_boolean (_tao_retval))
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::create_primary_key_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::PrimaryKeyDef_var _tao_retval;
+  IR_PrimaryKeyDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::ValueDef_var primary_key;
+  IR_ValueDef_var primary_key;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
     (_tao_in >> version.out ()) &&
     (_tao_in >> primary_key.out ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key ri (
-      "create_primary_key",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_primary_key (
       id.in (),
       name.in (),
       version.in (),
       primary_key.in (),
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_primary_key (
-          id.in (),
-          name.in (),
-          version.in (),
-          primary_key.in (),
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::PrimaryKeyDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::create_factory_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::FactoryDef_var _tao_retval;
+  IR_FactoryDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::ParDescriptionSeq params;
-  IR::ExceptionDefSeq exceptions;
+  IR_ParDescriptionSeq params;
+  IR_ExceptionDefSeq exceptions;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
@@ -37797,16 +24387,9 @@
     (_tao_in >> params) &&
     (_tao_in >> exceptions)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_factory ri (
-      "create_factory",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_factory (
       id.in (),
       name.in (),
       version.in (),
@@ -37814,73 +24397,33 @@
       exceptions,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_factory (
-          id.in (),
-          name.in (),
-          version.in (),
-          params,
-          exceptions,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::FactoryDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::create_finder_skel (
     TAO_ServerRequest &_tao_server_request,
-    void *_tao_object_reference, 
-    void * /* context */, 
+    void *_tao_object_reference,
+    void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
-  )
+)
 {
   TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *)_tao_object_reference;
 
-  IR::FinderDef_var _tao_retval;
+  IR_FinderDef_var _tao_retval;
   CORBA::String_var id;
   CORBA::String_var name;
   CORBA::String_var version;
-  IR::ParDescriptionSeq params;
-  IR::ExceptionDefSeq exceptions;
+  IR_ParDescriptionSeq params;
+  IR_ExceptionDefSeq exceptions;
   if (!(
     (_tao_in >> id.out ()) &&
     (_tao_in >> name.out ()) &&
@@ -37888,16 +24431,9 @@
     (_tao_in >> params) &&
     (_tao_in >> exceptions)
   ))
-    ACE_THROW (CORBA::MARSHAL());
+    ACE_THROW (CORBA::MARSHAL () );
 
-#if (TAO_HAS_INTERCEPTORS == 1)
-  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
-      _tao_server_request.orb_core ()->server_request_interceptors ()
-    );
-  
-  POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_finder ri (
-      "create_finder",
-      _tao_server_request.service_info (),
+  _tao_retval = _tao_impl->create_finder (
       id.in (),
       name.in (),
       version.in (),
@@ -37905,59 +24441,19 @@
       exceptions,
       ACE_TRY_ENV
     );
-  
-  ACE_TRY
-    {
-      ri.request_id (_tao_server_request.request_id ());
-      _tao_vfr.receive_request (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-      _tao_retval = _tao_impl->create_finder (
-          id.in (),
-          name.in (),
-          version.in (),
-          params,
-          exceptions,
-          ACE_TRY_ENV
-        );
-      
-#if (TAO_HAS_INTERCEPTORS == 1)
-      IR::FinderDef_ptr _tao_retval_info = _tao_retval._retn ();
-      ri.result (_tao_retval_info);
-      _tao_retval = _tao_retval_info;
-#endif /* TAO_HAS_INTERCEPTORS */
-
-TAO_INTERCEPTOR_CHECK;
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-      _tao_vfr.send_reply (&ri, ACE_TRY_ENV);
-      TAO_INTERCEPTOR_CHECK;
-    }
-  ACE_CATCHANY
-    {
-      ri.exception (&ACE_ANY_EXCEPTION);
-      _tao_vfr.send_exception (
-          &ri,
-          ACE_TRY_ENV
-        );
-      ACE_RE_THROW;
-    }
-  ACE_ENDTRY;
+
   ACE_CHECK;
-#endif /* TAO_HAS_INTERCEPTORS */
 
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
   if (!(
     (_tao_out << _tao_retval.in ())
   ))
-    ACE_THROW (CORBA::MARSHAL());
-
+    ACE_THROW (CORBA::MARSHAL () );
 }
 
 void POA_IR::HomeDef::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -37967,20 +24463,20 @@
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = 0;
   CORBA::String_var value;
-  if (!(_tao_in >> value.out ()))
+  if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
 void POA_IR::HomeDef::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -37989,10 +24485,10 @@
   POA_IR::HomeDef *_tao_impl = (POA_IR::HomeDef *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply ();
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
-  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
+  if (!((_tao_out << CORBA::Any::from_boolean (_tao_retval))))
     ACE_THROW (CORBA::MARSHAL ());
 }
 
@@ -38059,467 +24555,6 @@
     ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
   
   CORBA::Object_var obj = tmp;
-  return ::IR::HomeDef::_unchecked_narrow (obj.in ());
-}
-
-
-#if (TAO_HAS_INTERCEPTORS == 1)
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_base_home_get::TAO_ServerRequestInfo_IR_HomeDef_base_home_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_base_home_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_base_home_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_base_home_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_base_home_get::result (IR::HomeDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_managed_component_get::result (IR::ComponentDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_primary_key_get::result (IR::PrimaryKeyDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_factories_get::TAO_ServerRequestInfo_IR_HomeDef_factories_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_factories_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_factories_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_factories_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_factories_get::result (IR::FactoryDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_finders_get::TAO_ServerRequestInfo_IR_HomeDef_finders_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_finders_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_finders_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_finders_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_finders_get::result (IR::FinderDefSeq * result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-  return 0;
-}
-
-
-  Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_is_basic_get::result (CORBA::Boolean result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    IR::ValueDef_ptr primary_key,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    primary_key_ (primary_key)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_primary_key = this->parameter_list_.length ();
-  this->parameter_list_.length (length_primary_key + 1);
-  this->parameter_list_[length_primary_key].argument <<=  this->primary_key_;
-  
-  this->parameter_list_[length_primary_key].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_primary_key::result (IR::PrimaryKeyDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_factory::TAO_ServerRequestInfo_IR_HomeDef_create_factory (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    params_ (params),
-    exceptions_ (exceptions)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_factory::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_params = this->parameter_list_.length ();
-  this->parameter_list_.length (length_params + 1);
-  this->parameter_list_[length_params].argument <<=  this->params_;
-  
-  this->parameter_list_[length_params].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exceptions + 1);
-  this->parameter_list_[length_exceptions].argument <<=  this->exceptions_;
-  
-  this->parameter_list_[length_exceptions].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_factory::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_factory::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_factory::result (IR::FactoryDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
-}
-
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_finder::TAO_ServerRequestInfo_IR_HomeDef_create_finder (
-    const char *_tao_operation,
-    IOP::ServiceContextList &_tao_service_context_list,
-    const char * id,
-    const char * name,
-    const char * version,
-    const IR::ParDescriptionSeq & params,
-    const IR::ExceptionDefSeq & exceptions,
-    CORBA::Environment &
-  )
-  : TAO_ServerRequestInfo (_tao_operation, _tao_service_context_list),
-    id_ (id),
-    name_ (name),
-    version_ (version),
-    params_ (params),
-    exceptions_ (exceptions)
-{}
-
-Dynamic::ParameterList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_finder::arguments (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the arg list on demand
-    CORBA::ULong length_id = this->parameter_list_.length ();
-  this->parameter_list_.length (length_id + 1);
-  this->parameter_list_[length_id].argument <<= id_;
-  this->parameter_list_[length_id].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_name = this->parameter_list_.length ();
-  this->parameter_list_.length (length_name + 1);
-  this->parameter_list_[length_name].argument <<= name_;
-  this->parameter_list_[length_name].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_version = this->parameter_list_.length ();
-  this->parameter_list_.length (length_version + 1);
-  this->parameter_list_[length_version].argument <<= version_;
-  this->parameter_list_[length_version].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_params = this->parameter_list_.length ();
-  this->parameter_list_.length (length_params + 1);
-  this->parameter_list_[length_params].argument <<=  this->params_;
-  
-  this->parameter_list_[length_params].mode = Dynamic::PARAM_IN;
-    CORBA::ULong length_exceptions = this->parameter_list_.length ();
-  this->parameter_list_.length (length_exceptions + 1);
-  this->parameter_list_[length_exceptions].argument <<=  this->exceptions_;
-  
-  this->parameter_list_[length_exceptions].mode = Dynamic::PARAM_IN;
-  
-  return &this->parameter_list_;
-}
-
-Dynamic::ExceptionList *
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_finder::exceptions (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the exception list on demand
-  return 0;
-}
-
-CORBA::Any * 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_finder::result (CORBA::Environment &)
-  ACE_THROW_SPEC ((CORBA::SystemException))
-{
-  // Generate the result on demand
-  
-  return &this->result_val_;
-}
-
-void 
-POA_IR::HomeDef::TAO_ServerRequestInfo_IR_HomeDef_create_finder::result (IR::FinderDef_ptr result)
-{
-  // update the result 
-   this->result_ = result;
+  return IR_HomeDef::_unchecked_narrow (obj.in ());
 }
 
-#endif /* TAO_HAS_INTERCEPTORS */
