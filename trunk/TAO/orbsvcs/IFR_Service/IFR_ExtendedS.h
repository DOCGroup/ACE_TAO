// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef TAO_IDL_IFR_EXTENDEDS_H
#define TAO_IDL_IFR_EXTENDEDS_H

#include "ace/pre.h"
#include "IFR_BasicS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

TAO_NAMESPACE  POA_CORBA
{
  class FixedDef;
  typedef FixedDef *FixedDef_ptr;
  // Forward Classes Declaration
  class _TAO_FixedDef_ThruPOA_Proxy_Impl;
  class _TAO_FixedDef_Strategized_Proxy_Broker;
  
  class  FixedDef : public virtual IDLType
  {
  protected:
    FixedDef (void);

  public:
    FixedDef (const FixedDef& rhs);
    virtual ~FixedDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual void _dispatch (
        TAO_ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    ::CORBA::FixedDef *_this (
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::UShort digits (
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_digits_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual void digits (
        CORBA::UShort digits,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_digits_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual CORBA::Short scale (
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_scale_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    virtual void scale (
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_scale_skel (
        TAO_ServerRequest &_tao_req, 
        void *_tao_obj, 
        void *_tao_context, 
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

    static void _get_type_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void destroy_skel (
        TAO_ServerRequest &req, 
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    
#if (TAO_HAS_INTERCEPTORS == 1)
    // Generation of interceptors related RequestInfo classes per operation.
    // This needed to be able to store the arguments, exceptions, contexts
    // and build the lists dynamically on demand so that unnecessary time overhead
    // of building these lists when they arent used is avoided.
    class TAO_ServerRequestInfo_CORBA_FixedDef_digits_get : public TAO_ServerRequestInfo
    {
    public:
      friend class POA_CORBA::FixedDef;
      TAO_ServerRequestInfo_CORBA_FixedDef_digits_get (
        TAO_ServerRequest &_tao_server_request,
        POA_CORBA::FixedDef *tao_impl,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

      virtual Dynamic::ParameterList * arguments (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual Dynamic::ExceptionList * exceptions (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Any * result (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual char * target_most_derived_interface (
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Boolean target_is_a (
          const char * id,
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
    private:
      TAO_ServerRequestInfo_CORBA_FixedDef_digits_get (const TAO_ServerRequestInfo_CORBA_FixedDef_digits_get &);
      void operator= (const TAO_ServerRequestInfo_CORBA_FixedDef_digits_get &);
      
    private:
      POA_CORBA::FixedDef *_tao_impl;
      void result (CORBA::UShort result);
      // update the result 
      CORBA::UShort _result;
    };
    
    class TAO_ServerRequestInfo_CORBA_FixedDef_digits_set : public TAO_ServerRequestInfo
    {
    public:
      friend class POA_CORBA::FixedDef;
      TAO_ServerRequestInfo_CORBA_FixedDef_digits_set (
        TAO_ServerRequest &_tao_server_request,
        POA_CORBA::FixedDef *tao_impl,
        const CORBA::UShort & digits,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

      virtual Dynamic::ParameterList * arguments (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual Dynamic::ExceptionList * exceptions (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Any * result (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual char * target_most_derived_interface (
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Boolean target_is_a (
          const char * id,
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
    private:
      TAO_ServerRequestInfo_CORBA_FixedDef_digits_set (const TAO_ServerRequestInfo_CORBA_FixedDef_digits_set &);
      void operator= (const TAO_ServerRequestInfo_CORBA_FixedDef_digits_set &);
      
    private:
      POA_CORBA::FixedDef *_tao_impl;
      const CORBA::UShort & digits_;
      
    };
    
    class TAO_ServerRequestInfo_CORBA_FixedDef_scale_get : public TAO_ServerRequestInfo
    {
    public:
      friend class POA_CORBA::FixedDef;
      TAO_ServerRequestInfo_CORBA_FixedDef_scale_get (
        TAO_ServerRequest &_tao_server_request,
        POA_CORBA::FixedDef *tao_impl,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

      virtual Dynamic::ParameterList * arguments (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual Dynamic::ExceptionList * exceptions (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Any * result (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual char * target_most_derived_interface (
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Boolean target_is_a (
          const char * id,
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
    private:
      TAO_ServerRequestInfo_CORBA_FixedDef_scale_get (const TAO_ServerRequestInfo_CORBA_FixedDef_scale_get &);
      void operator= (const TAO_ServerRequestInfo_CORBA_FixedDef_scale_get &);
      
    private:
      POA_CORBA::FixedDef *_tao_impl;
      void result (CORBA::Short result);
      // update the result 
      CORBA::Short _result;
    };
    
    class TAO_ServerRequestInfo_CORBA_FixedDef_scale_set : public TAO_ServerRequestInfo
    {
    public:
      friend class POA_CORBA::FixedDef;
      TAO_ServerRequestInfo_CORBA_FixedDef_scale_set (
        TAO_ServerRequest &_tao_server_request,
        POA_CORBA::FixedDef *tao_impl,
        const CORBA::Short & scale,
        CORBA::Environment &ACE_TRY_ENV = 
          TAO_default_environment ()
      );

      virtual Dynamic::ParameterList * arguments (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual Dynamic::ExceptionList * exceptions (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Any * result (
          CORBA::Environment &ACE_TRY_ENV =
            TAO_default_environment ()
        )
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual char * target_most_derived_interface (
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
      virtual CORBA::Boolean target_is_a (
          const char * id,
          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
        ACE_THROW_SPEC ((CORBA::SystemException));
      
    private:
      TAO_ServerRequestInfo_CORBA_FixedDef_scale_set (const TAO_ServerRequestInfo_CORBA_FixedDef_scale_set &);
      void operator= (const TAO_ServerRequestInfo_CORBA_FixedDef_scale_set &);
      
    private:
      POA_CORBA::FixedDef *_tao_impl;
      const CORBA::Short & scale_;
      
    };
    
    #endif /* TAO_HAS_INTERCEPTORS */

  };

  
  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration 
  //
  
  class  _TAO_FixedDef_Strategized_Proxy_Broker : public virtual ::_TAO_FixedDef_Proxy_Broker
  {
  public: 
    _TAO_FixedDef_Strategized_Proxy_Broker (void);
    
    virtual ~_TAO_FixedDef_Strategized_Proxy_Broker (void);
    
    virtual ::_TAO_FixedDef_Proxy_Impl &select_proxy (
      ::CORBA::FixedDef *object,
      CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
    );
  
  private:
  
  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
    void create_proxy (
      int strategy,
      CORBA::Environment &ACE_TRY_ENV
    );
  
  private:
    
    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::_TAO_FixedDef_Proxy_Impl
     *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
    
    TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.
  
  public:
    static _TAO_FixedDef_Strategized_Proxy_Broker *the_TAO_FixedDef_Strategized_Proxy_Broker (void);
  };
  
  
  //
  //            End Strategized Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////
  
  
///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_FixedDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_FixedDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_FixedDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_FixedDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::UShort digits (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void digits (
      CORBA_Object *_collocated_tao_target_,
      CORBA::UShort digits,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Short scale (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void scale (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Short scale,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  FixedDef_tie : public FixedDef
{
public:
  FixedDef_tie (T &t);
  // the T& ctor
  FixedDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  FixedDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  FixedDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~FixedDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::UShort digits (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void digits (
      CORBA::UShort digits,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Short scale (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void scale (
      CORBA::Short scale,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  FixedDef_tie (const FixedDef_tie &);
  void operator= (const FixedDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ValueMemberDef;
typedef ValueMemberDef *ValueMemberDef_ptr;
// Forward Classes Declaration
class _TAO_ValueMemberDef_ThruPOA_Proxy_Impl;
class _TAO_ValueMemberDef_Strategized_Proxy_Broker;

class  ValueMemberDef : public virtual Contained
{
protected:
  ValueMemberDef (void);

public:
  ValueMemberDef (const ValueMemberDef& rhs);
  virtual ~ValueMemberDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ValueMemberDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::IDLType_ptr type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void type_def (
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Visibility access (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_access_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void access (
      CORBA::Visibility access,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_access_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  
#if (TAO_HAS_INTERCEPTORS == 1)
  // Generation of interceptors related RequestInfo classes per operation.
  // This needed to be able to store the arguments, exceptions, contexts
  // and build the lists dynamically on demand so that unnecessary time overhead
  // of building these lists when they arent used is avoided.
  class TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueMemberDef;
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueMemberDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_get (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_get &);
    
  private:
    POA_CORBA::ValueMemberDef *_tao_impl;
    void result (CORBA::TypeCode_ptr result);
    // update the result 
    CORBA::TypeCode_ptr _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueMemberDef;
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueMemberDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_get (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_get &);
    
  private:
    POA_CORBA::ValueMemberDef *_tao_impl;
    void result (CORBA::IDLType_ptr result);
    // update the result 
    CORBA::IDLType_ptr _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueMemberDef;
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueMemberDef *tao_impl,
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_set (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_type_def_set &);
    
  private:
    POA_CORBA::ValueMemberDef *_tao_impl;
    CORBA::IDLType_ptr type_def_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueMemberDef;
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueMemberDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_get (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_get &);
    
  private:
    POA_CORBA::ValueMemberDef *_tao_impl;
    void result (CORBA::Visibility result);
    // update the result 
    CORBA::Visibility _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueMemberDef;
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueMemberDef *tao_impl,
      const CORBA::Visibility & access,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_set (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueMemberDef_access_set &);
    
  private:
    POA_CORBA::ValueMemberDef *_tao_impl;
    const CORBA::Visibility & access_;
    
  };
  
  #endif /* TAO_HAS_INTERCEPTORS */

};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ValueMemberDef_Strategized_Proxy_Broker : public virtual ::_TAO_ValueMemberDef_Proxy_Broker
{
public: 
  _TAO_ValueMemberDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ValueMemberDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ValueMemberDef_Proxy_Impl &select_proxy (
    ::CORBA::ValueMemberDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ValueMemberDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ValueMemberDef_Strategized_Proxy_Broker *the_TAO_ValueMemberDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ValueMemberDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ValueMemberDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ValueMemberDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ValueMemberDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::IDLType_ptr type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Visibility access (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void access (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Visibility access,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ValueMemberDef_tie : public ValueMemberDef
{
public:
  ValueMemberDef_tie (T &t);
  // the T& ctor
  ValueMemberDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ValueMemberDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ValueMemberDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ValueMemberDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::IDLType_ptr type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void type_def (
      CORBA::IDLType_ptr type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Visibility access (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void access (
      CORBA::Visibility access,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ValueMemberDef_tie (const ValueMemberDef_tie &);
  void operator= (const ValueMemberDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ValueDef;
typedef ValueDef *ValueDef_ptr;
// Forward Classes Declaration
class _TAO_ValueDef_ThruPOA_Proxy_Impl;
class _TAO_ValueDef_Strategized_Proxy_Broker;

class  ValueDef : public virtual Container, public virtual Contained, public virtual IDLType
{
protected:
  ValueDef (void);

public:
  ValueDef (const ValueDef& rhs);
  virtual ~ValueDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ValueDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::InterfaceDefSeq * supported_interfaces (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_supported_interfaces_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void supported_interfaces (
      const CORBA::InterfaceDefSeq & supported_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_supported_interfaces_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::InitializerSeq * initializers (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_initializers_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void initializers (
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_initializers_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ValueDef_ptr base_value (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_base_value_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void base_value (
      CORBA::ValueDef_ptr base_value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_base_value_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ValueDefSeq * abstract_base_values (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_abstract_base_values_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void abstract_base_values (
      const CORBA::ValueDefSeq & abstract_base_values,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_abstract_base_values_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Boolean is_abstract (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_is_abstract_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void is_abstract (
      CORBA::Boolean is_abstract,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_is_abstract_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Boolean is_custom (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_is_custom_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void is_custom (
      CORBA::Boolean is_custom,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_is_custom_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Boolean is_truncatable (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_is_truncatable_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void is_truncatable (
      CORBA::Boolean is_truncatable,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_is_truncatable_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::Boolean is_a (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void is_a_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ValueDef::FullValueDescription * describe_value (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void describe_value_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::ValueMemberDef_ptr create_value_member (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::Visibility access,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void create_value_member_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void create_attribute_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual CORBA::OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void create_operation_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void lookup_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void lookup_name_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_contents_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_module_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_constant_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_struct_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_union_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_enum_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_alias_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_value_box_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_exception_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_native_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_abstract_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void create_local_interface_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  
#if (TAO_HAS_INTERCEPTORS == 1)
  // Generation of interceptors related RequestInfo classes per operation.
  // This needed to be able to store the arguments, exceptions, contexts
  // and build the lists dynamically on demand so that unnecessary time overhead
  // of building these lists when they arent used is avoided.
  class TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_get (const TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::InterfaceDefSeq * result);
    // update the result 
    CORBA::InterfaceDefSeq * _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_set (const TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_supported_interfaces_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const CORBA::InterfaceDefSeq & supported_interfaces_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_initializers_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_initializers_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_initializers_get (const TAO_ServerRequestInfo_CORBA_ValueDef_initializers_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_initializers_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::InitializerSeq * result);
    // update the result 
    CORBA::InitializerSeq * _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_initializers_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_initializers_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_initializers_set (const TAO_ServerRequestInfo_CORBA_ValueDef_initializers_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_initializers_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const CORBA::InitializerSeq & initializers_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_base_value_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_base_value_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_base_value_get (const TAO_ServerRequestInfo_CORBA_ValueDef_base_value_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_base_value_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::ValueDef_ptr result);
    // update the result 
    CORBA::ValueDef_ptr _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_base_value_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_base_value_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::ValueDef_ptr base_value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_base_value_set (const TAO_ServerRequestInfo_CORBA_ValueDef_base_value_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_base_value_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    CORBA::ValueDef_ptr base_value_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_get (const TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::ValueDefSeq * result);
    // update the result 
    CORBA::ValueDefSeq * _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const CORBA::ValueDefSeq & abstract_base_values,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_set (const TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_abstract_base_values_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const CORBA::ValueDefSeq & abstract_base_values_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_get (const TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::Boolean result);
    // update the result 
    CORBA::Boolean _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const CORBA::Boolean & is_abstract,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_set (const TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_abstract_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const CORBA::Boolean & is_abstract_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_get (const TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::Boolean result);
    // update the result 
    CORBA::Boolean _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const CORBA::Boolean & is_custom,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_set (const TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_custom_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const CORBA::Boolean & is_custom_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_get (const TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_get &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::Boolean result);
    // update the result 
    CORBA::Boolean _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const CORBA::Boolean & is_truncatable,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_set (const TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_truncatable_set &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const CORBA::Boolean & is_truncatable_;
    
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_is_a : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_is_a (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_is_a (const TAO_ServerRequestInfo_CORBA_ValueDef_is_a &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_is_a &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const char * id_;
    void result (CORBA::Boolean result);
    // update the result 
    CORBA::Boolean _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_describe_value : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_describe_value (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_describe_value (const TAO_ServerRequestInfo_CORBA_ValueDef_describe_value &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_describe_value &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    void result (CORBA::ValueDef::FullValueDescription * result);
    // update the result 
    CORBA::ValueDef::FullValueDescription * _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_create_value_member : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_create_value_member (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Visibility & access,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_create_value_member (const TAO_ServerRequestInfo_CORBA_ValueDef_create_value_member &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_create_value_member &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const char * id_;
    const char * name_;
    const char * version_;
    CORBA::IDLType_ptr type_;
    const CORBA::Visibility & access_;
    void result (CORBA::ValueMemberDef_ptr result);
    // update the result 
    CORBA::ValueMemberDef_ptr _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_create_attribute : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_create_attribute (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode & mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_create_attribute (const TAO_ServerRequestInfo_CORBA_ValueDef_create_attribute &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_create_attribute &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const char * id_;
    const char * name_;
    const char * version_;
    CORBA::IDLType_ptr type_;
    const CORBA::AttributeMode & mode_;
    void result (CORBA::AttributeDef_ptr result);
    // update the result 
    CORBA::AttributeDef_ptr _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueDef_create_operation : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueDef;
    TAO_ServerRequestInfo_CORBA_ValueDef_create_operation (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueDef *tao_impl,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode & mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueDef_create_operation (const TAO_ServerRequestInfo_CORBA_ValueDef_create_operation &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueDef_create_operation &);
    
  private:
    POA_CORBA::ValueDef *_tao_impl;
    const char * id_;
    const char * name_;
    const char * version_;
    CORBA::IDLType_ptr result_;
    const CORBA::OperationMode & mode_;
    const CORBA::ParDescriptionSeq & params_;
    const CORBA::ExceptionDefSeq & exceptions_;
    const CORBA::ContextIdSeq & contexts_;
    void result (CORBA::OperationDef_ptr result);
    // update the result 
    CORBA::OperationDef_ptr _result;
  };
  
  #endif /* TAO_HAS_INTERCEPTORS */

};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ValueDef_Strategized_Proxy_Broker : public virtual ::_TAO_ValueDef_Proxy_Broker
{
public: 
  _TAO_ValueDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ValueDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ValueDef_Proxy_Impl &select_proxy (
    ::CORBA::ValueDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ValueDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ValueDef_Strategized_Proxy_Broker *the_TAO_ValueDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ValueDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ValueDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_Container_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_Contained_ThruPOA_Proxy_Impl, 
  public virtual ::POA_CORBA::_TAO_IDLType_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ValueDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ValueDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::InterfaceDefSeq * supported_interfaces (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void supported_interfaces (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::InitializerSeq * initializers (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void initializers (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueDef_ptr base_value (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void base_value (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ValueDef_ptr base_value,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueDefSeq * abstract_base_values (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void abstract_base_values (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::ValueDefSeq & abstract_base_values,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean is_abstract (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void is_abstract (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Boolean is_abstract,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean is_custom (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void is_custom (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Boolean is_custom,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean is_truncatable (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void is_truncatable (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Boolean is_truncatable,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean is_a (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueDef::FullValueDescription * describe_value (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::ValueMemberDef_ptr create_value_member (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::Visibility access,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AttributeDef_ptr create_attribute (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::OperationDef_ptr create_operation (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ValueDef_tie : public ValueDef
{
public:
  ValueDef_tie (T &t);
  // the T& ctor
  ValueDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ValueDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ValueDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ValueDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::InterfaceDefSeq * supported_interfaces (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void supported_interfaces (
      const CORBA::InterfaceDefSeq & supported_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InitializerSeq * initializers (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void initializers (
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr base_value (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void base_value (
      CORBA::ValueDef_ptr base_value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDefSeq * abstract_base_values (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void abstract_base_values (
      const CORBA::ValueDefSeq & abstract_base_values,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_abstract (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void is_abstract (
      CORBA::Boolean is_abstract,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_custom (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void is_custom (
      CORBA::Boolean is_custom,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_truncatable (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void is_truncatable (
      CORBA::Boolean is_truncatable,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Boolean is_a (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef::FullValueDescription * describe_value (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueMemberDef_ptr create_value_member (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::Visibility access,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      CORBA::AttributeMode mode,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA::ParDescriptionSeq & params,
      const CORBA::ExceptionDefSeq & exceptions,
      const CORBA::ContextIdSeq & contexts,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained_ptr lookup (
      const char * search_name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ContainedSeq * lookup_name (
      const char * search_name,
      CORBA::Long levels_to_search,
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container::DescriptionSeq * describe_contents (
      CORBA::DefinitionKind limit_type,
      CORBA::Boolean exclude_inherited,
      CORBA::Long max_returned_objs,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ModuleDef_ptr create_module (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ConstantDef_ptr create_constant (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr type,
      const CORBA::Any & value,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::StructDef_ptr create_struct (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::UnionDef_ptr create_union (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr discriminator_type,
      const CORBA::UnionMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::EnumDef_ptr create_enum (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::EnumMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AliasDef_ptr create_alias (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::InterfaceDef_ptr create_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueDef_ptr create_value (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Boolean is_custom,
      CORBA::Boolean is_abstract,
      CORBA::ValueDef_ptr base_value,
      CORBA::Boolean is_truncatable,
      const CORBA::ValueDefSeq & abstract_base_values,
      const CORBA::InterfaceDefSeq & supported_interfaces,
      const CORBA::InitializerSeq & initializers,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ValueBoxDef_ptr create_value_box (
      const char * id,
      const char * name,
      const char * version,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::ExceptionDef_ptr create_exception (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::StructMemberSeq & members,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::NativeDef_ptr create_native (
      const char * id,
      const char * name,
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::AbstractInterfaceDef_ptr create_abstract_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::AbstractInterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::LocalInterfaceDef_ptr create_local_interface (
      const char * id,
      const char * name,
      const char * version,
      const CORBA::InterfaceDefSeq & base_interfaces,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ValueDef_tie (const ValueDef_tie &);
  void operator= (const ValueDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

class ValueBoxDef;
typedef ValueBoxDef *ValueBoxDef_ptr;
// Forward Classes Declaration
class _TAO_ValueBoxDef_ThruPOA_Proxy_Impl;
class _TAO_ValueBoxDef_Strategized_Proxy_Broker;

class  ValueBoxDef : public virtual TypedefDef
{
protected:
  ValueBoxDef (void);

public:
  ValueBoxDef (const ValueBoxDef& rhs);
  virtual ~ValueBoxDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void _dispatch (
      TAO_ServerRequest &_tao_req,
      void *_tao_context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  ::CORBA::ValueBoxDef *_this (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::IDLType_ptr original_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _get_original_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  virtual void original_type_def (
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

  static void _set_original_type_def_skel (
      TAO_ServerRequest &_tao_req, 
      void *_tao_obj, 
      void *_tao_context, 
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void describe_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void move_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  static void destroy_skel (
      TAO_ServerRequest &req, 
      void *obj,
      void *context,
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    );

  
#if (TAO_HAS_INTERCEPTORS == 1)
  // Generation of interceptors related RequestInfo classes per operation.
  // This needed to be able to store the arguments, exceptions, contexts
  // and build the lists dynamically on demand so that unnecessary time overhead
  // of building these lists when they arent used is avoided.
  class TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_get : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueBoxDef;
    TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_get (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueBoxDef *tao_impl,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_get (const TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_get &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_get &);
    
  private:
    POA_CORBA::ValueBoxDef *_tao_impl;
    void result (CORBA::IDLType_ptr result);
    // update the result 
    CORBA::IDLType_ptr _result;
  };
  
  class TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_set : public TAO_ServerRequestInfo
  {
  public:
    friend class POA_CORBA::ValueBoxDef;
    TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_set (
      TAO_ServerRequest &_tao_server_request,
      POA_CORBA::ValueBoxDef *tao_impl,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
  private:
    TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_set (const TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_set &);
    void operator= (const TAO_ServerRequestInfo_CORBA_ValueBoxDef_original_type_def_set &);
    
  private:
    POA_CORBA::ValueBoxDef *_tao_impl;
    CORBA::IDLType_ptr original_type_def_;
    
  };
  
  #endif /* TAO_HAS_INTERCEPTORS */

};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

class  _TAO_ValueBoxDef_Strategized_Proxy_Broker : public virtual ::_TAO_ValueBoxDef_Proxy_Broker
{
public: 
  _TAO_ValueBoxDef_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_ValueBoxDef_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_ValueBoxDef_Proxy_Impl &select_proxy (
    ::CORBA::ValueBoxDef *object,
    CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
  );

private:

// Helper methods that takes care to create the proxy
// as soon as their use is necessary.
  void create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  );

private:
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_ValueBoxDef_Proxy_Impl
   *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
// This funxtion is used to get an handle to the unique instance
// of the Strategized Proxy Broker that is available for a given
// interface.

public:
  static _TAO_ValueBoxDef_Strategized_Proxy_Broker *the_TAO_ValueBoxDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_ValueBoxDef_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_ValueBoxDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::POA_CORBA::_TAO_TypedefDef_ThruPOA_Proxy_Impl
  
{
public:
  _TAO_ValueBoxDef_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_ValueBoxDef_ThruPOA_Proxy_Impl (void) { }
  
    virtual CORBA::IDLType_ptr original_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void original_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


#if defined (ACE_HAS_USING_KEYWORD)
// TIE class: Refer to CORBA v2.2, Section 20.34.4
template <class T>
class  ValueBoxDef_tie : public ValueBoxDef
{
public:
  ValueBoxDef_tie (T &t);
  // the T& ctor
  ValueBoxDef_tie (T &t, PortableServer::POA_ptr poa);
  // ctor taking a POA
  ValueBoxDef_tie (T *tp, CORBA::Boolean release=1);
  // ctor taking pointer and an ownership flag
  ValueBoxDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
  // ctor with T*, ownership flag and a POA
  ~ValueBoxDef_tie (void);
  // dtor
  
  // TIE specific functions
  T *_tied_object (void);
  // return the underlying object
  void _tied_object (T &obj);
  // set the underlying object
  void _tied_object (T *obj, CORBA::Boolean release=1);
  // set the underlying object and the ownership flag
  CORBA::Boolean _is_owner (void);
  // do we own it
  void _is_owner (CORBA::Boolean b);
  // set the ownership
  
  // overridden ServantBase operations
  PortableServer::POA_ptr _default_POA (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    );
  CORBA::IDLType_ptr original_type_def (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void original_type_def (
      CORBA::IDLType_ptr original_type_def,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * id (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void id (
      const char * id,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void name (
      const char * name,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * version (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void version (
      const char * version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Container_ptr defined_in (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  char * absolute_name (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Repository_ptr containing_repository (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::Contained::Description * describe (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void move (
      CORBA::Container_ptr new_container,
      const char * new_name,
      const char * new_version,
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::TypeCode_ptr type (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  CORBA::DefinitionKind def_kind (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  void destroy (
      CORBA::Environment &ACE_TRY_ENV = 
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

private:
  T *ptr_;
  PortableServer::POA_var poa_;
  CORBA::Boolean rel_;
  
  // copy and assignment are not allowed
  ValueBoxDef_tie (const ValueBoxDef_tie &);
  void operator= (const ValueBoxDef_tie &);
};

#endif /* ACE_HAS_USING_KEYWORD */

}
TAO_NAMESPACE_CLOSE

#include "IFR_ExtendedS_T.h"

#if defined (__ACE_INLINE__)
#include "IFR_ExtendedS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */
