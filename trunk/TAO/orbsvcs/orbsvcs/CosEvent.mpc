// $Id$

project (CosEvent) : orbsvcslib, core, minimum_corba, ec_typed_events {
  sharedname   = TAO_CosEvent

  idlflags    += -Wb,export_macro=TAO_Event_Export -Wb,export_include=orbsvcs/CosEvent/event_export.h

  IDL_Files {
    CosEventComm.idl
    CosEventChannelAdmin.idl
  }

  Source_Files {
    CosEventCommC.cpp
    CosEventChannelAdminC.cpp
  }

  Header_Files {
    CosEventCommC.h
    CosEventChannelAdminC.h
  }

  Inline_Files {
    CosEventCommC.inl
    CosEventChannelAdminC.inl
  }
}


project (CosEvent_Skel) : orbsvcslib, core, minimum_corba, event, ec_typed_events_skel {
  sharedname   = TAO_CosEvent_Skel

  IDL_Files {
  }

  Source_Files {
    CosEventCommS.cpp
    CosEventChannelAdminS.cpp
  }

  Header_Files {
    CosEventCommS.h
    CosEventChannelAdminS.h
  }

  Inline_Files {
    CosEventCommS.inl
    CosEventChannelAdminS.inl
  }
}


project (CosEvent_Serv) : orbsvcslib, core, minimum_corba, event_skel, ec_typed_events_serv, messaging, svc_utils {
  sharedname   = TAO_CosEvent_Serv

  dynamicflags = TAO_EVENT_BUILD_DLL

  tagchecks   += CosEvent

  IDL_Files {
  }

  Source_Files(ORBSVCS_COMPONENTS) {
    CosEvent {
      CosEvent/CEC_ConsumerAdmin.cpp
      CosEvent/CEC_ConsumerControl.cpp
      CosEvent/CEC_Default_Factory.cpp
      CosEvent/CEC_Dispatching.cpp
      CosEvent/CEC_Dispatching_Task.cpp
      CosEvent/CEC_EventChannel.cpp
      CosEvent/CEC_Event_Loader.cpp
      CosEvent/CEC_Factory.cpp
      CosEvent/CEC_MT_Dispatching.cpp
      CosEvent/CEC_ProxyPullConsumer.cpp
      CosEvent/CEC_ProxyPullSupplier.cpp
      CosEvent/CEC_ProxyPushConsumer.cpp
      CosEvent/CEC_ProxyPushSupplier.cpp
      CosEvent/CEC_Pulling_Strategy.cpp
      CosEvent/CEC_Reactive_ConsumerControl.cpp
      CosEvent/CEC_Reactive_Pulling_Strategy.cpp
      CosEvent/CEC_Reactive_SupplierControl.cpp
      CosEvent/CEC_SupplierAdmin.cpp
      CosEvent/CEC_SupplierControl.cpp
    }
  }
}
