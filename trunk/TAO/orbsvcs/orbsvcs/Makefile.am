##  Process this file with automake to create Makefile.in
##
## $Id$
##
## This file was generated by MPC.  Any changes made directly to
## this file will be lost the next time it is generated.
##
## MPC Command:
## ../bin/mwc.pl -type automake -noreldefs TAO.mwc

includedir = @includedir@/orbsvcs
pkgconfigdir = @libdir@/pkgconfig

ACE_BUILDDIR = $(top_builddir)/..
ACE_ROOT = $(top_srcdir)/..
TAO_BUILDDIR = $(top_builddir)
TAO_IDL = ACE_ROOT=$(ACE_ROOT) TAO_ROOT=$(TAO_ROOT) $(TAO_BUILDDIR)/TAO_IDL/tao_idl
TAO_IDL_DEP = $(TAO_BUILDDIR)/TAO_IDL/tao_idl
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) -I$(srcdir) -g $(ACE_BUILDDIR)/apps/gperf/src/ace_gperf
TAO_ROOT = $(top_srcdir)

lib_LTLIBRARIES =
pkgconfig_DATA =
CLEANFILES =
BUILT_SOURCES =

## Makefile.CosNaming_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosNamingC.cpp \
  CosNamingC.h \
  CosNamingC.inl \
  CosNamingS.cpp \
  CosNamingS.h \
  CosNamingS.inl

CLEANFILES += \
  CosNaming-stamp \
  CosNamingC.cpp \
  CosNamingC.h \
  CosNamingC.inl \
  CosNamingS.cpp \
  CosNamingS.h \
  CosNamingS.inl

CosNamingC.cpp CosNamingC.h CosNamingC.inl CosNamingS.cpp CosNamingS.h CosNamingS.inl: CosNaming-stamp

CosNaming-stamp: $(srcdir)/CosNaming.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Naming_Export -Wb,stub_export_include=orbsvcs/Naming/naming_export.h -Wb,skel_export_macro=TAO_Naming_Skel_Export -Wb,skel_export_include=orbsvcs/Naming/naming_skel_export.h $(srcdir)/CosNaming.idl
	@touch $@

nobase_include_HEADERS = \
  CosNaming.idl

endif BUILD_EXCEPTIONS

## Makefile.CosNaming.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosNaming.la

libTAO_CosNaming_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_NAMING_BUILD_DLL

libTAO_CosNaming_la_SOURCES = \
  CosNamingC.cpp \
  Naming/Naming_Client.cpp

libTAO_CosNaming_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNaming_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosNamingC.h \
  CosNamingC.inl \
  Naming/Naming_Client.h \
  Naming/naming_export.h

pkgconfig_DATA += \
  TAO_CosNaming.pc

CLEANFILES += \
  TAO_CosNaming.pc

TAO_CosNaming.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosNaming.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosNaming.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST = \
  CosNaming.rc \
  TAO_CosNaming.pc.in


## Makefile.CosProperty_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosPropertyC.cpp \
  CosPropertyC.h \
  CosPropertyC.inl \
  CosPropertyS.cpp \
  CosPropertyS.h \
  CosPropertyS.inl

CLEANFILES += \
  CosProperty-stamp \
  CosPropertyC.cpp \
  CosPropertyC.h \
  CosPropertyC.inl \
  CosPropertyS.cpp \
  CosPropertyS.h \
  CosPropertyS.inl

CosPropertyC.cpp CosPropertyC.h CosPropertyC.inl CosPropertyS.cpp CosPropertyS.h CosPropertyS.inl: CosProperty-stamp

CosProperty-stamp: $(srcdir)/CosProperty.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Property_Export -Wb,stub_export_include=orbsvcs/Property/property_export.h -Wb,skel_export_macro=TAO_Property_Skel_Export -Wb,skel_export_include=orbsvcs/Property/property_skel_export.h $(srcdir)/CosProperty.idl
	@touch $@

nobase_include_HEADERS += \
  CosProperty.idl

endif BUILD_EXCEPTIONS

## Makefile.CosProperty.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosProperty.la

libTAO_CosProperty_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_PROPERTY_BUILD_DLL

libTAO_CosProperty_la_SOURCES = \
  CosPropertyC.cpp

libTAO_CosProperty_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosProperty_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosPropertyC.h \
  CosPropertyC.inl \
  Property/property_export.h

pkgconfig_DATA += \
  TAO_CosProperty.pc

CLEANFILES += \
  TAO_CosProperty.pc

TAO_CosProperty.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosProperty.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosProperty.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_CosProperty.pc.in


## Makefile.CosProperty_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosProperty_Skel.la

libTAO_CosProperty_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_PROPERTY_SKEL_BUILD_DLL

libTAO_CosProperty_Skel_la_SOURCES = \
  CosPropertyS.cpp

libTAO_CosProperty_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosProperty_Skel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosProperty.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosPropertyS.h \
  CosPropertyS.inl \
  Property/property_skel_export.h

pkgconfig_DATA += \
  TAO_CosProperty_Skel.pc

CLEANFILES += \
  TAO_CosProperty_Skel.pc

TAO_CosProperty_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosProperty_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosProperty_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_CosProperty_Skel.pc.in


## Makefile.CosProperty_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosProperty_Serv.la

libTAO_CosProperty_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_PROPERTY_SERV_BUILD_DLL

libTAO_CosProperty_Serv_la_SOURCES = \
  Property/CosPropertyService_i.cpp

libTAO_CosProperty_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosProperty_Serv_la_LIBADD = \
  libTAO_CosProperty_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosProperty.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Property/CosPropertyService_i.h \
  Property/property_serv_export.h

pkgconfig_DATA += \
  TAO_CosProperty_Serv.pc

CLEANFILES += \
  TAO_CosProperty_Serv.pc

TAO_CosProperty_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosProperty_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosProperty_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_CosProperty_Serv.pc.in


## Makefile.AV.am

if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

BUILT_SOURCES += \
  AVStreamsC.cpp \
  AVStreamsC.h \
  AVStreamsC.inl \
  AVStreamsS.cpp \
  AVStreamsS.h \
  AVStreamsS.inl

CLEANFILES += \
  AVStreams-stamp \
  AVStreamsC.cpp \
  AVStreamsC.h \
  AVStreamsC.inl \
  AVStreamsS.cpp \
  AVStreamsS.h \
  AVStreamsS.inl

AVStreamsC.cpp AVStreamsC.h AVStreamsC.inl AVStreamsS.cpp AVStreamsS.h AVStreamsS.inl: AVStreams-stamp

AVStreams-stamp: $(srcdir)/AVStreams.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_AV_Export -Wb,export_include=orbsvcs/AV/AV_export.h $(srcdir)/AVStreams.idl
	@touch $@

BUILT_SOURCES += \
  Null_MediaCtrlC.cpp \
  Null_MediaCtrlC.h \
  Null_MediaCtrlC.inl \
  Null_MediaCtrlS.cpp \
  Null_MediaCtrlS.h \
  Null_MediaCtrlS.inl

CLEANFILES += \
  Null_MediaCtrl-stamp \
  Null_MediaCtrlC.cpp \
  Null_MediaCtrlC.h \
  Null_MediaCtrlC.inl \
  Null_MediaCtrlS.cpp \
  Null_MediaCtrlS.h \
  Null_MediaCtrlS.inl

Null_MediaCtrlC.cpp Null_MediaCtrlC.h Null_MediaCtrlC.inl Null_MediaCtrlS.cpp Null_MediaCtrlS.h Null_MediaCtrlS.inl: Null_MediaCtrl-stamp

Null_MediaCtrl-stamp: $(srcdir)/Null_MediaCtrl.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_AV_Export -Wb,export_include=orbsvcs/AV/AV_export.h $(srcdir)/Null_MediaCtrl.idl
	@touch $@

BUILT_SOURCES += \
  sfpC.cpp \
  sfpC.h \
  sfpC.inl \
  sfpS.cpp \
  sfpS.h \
  sfpS.inl

CLEANFILES += \
  sfp-stamp \
  sfpC.cpp \
  sfpC.h \
  sfpC.inl \
  sfpS.cpp \
  sfpS.h \
  sfpS.inl

sfpC.cpp sfpC.h sfpC.inl sfpS.cpp sfpS.h sfpS.inl: sfp-stamp

sfp-stamp: $(srcdir)/sfp.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_AV_Export -Wb,export_include=orbsvcs/AV/AV_export.h $(srcdir)/sfp.idl
	@touch $@

lib_LTLIBRARIES += libTAO_AV.la

libTAO_AV_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_AV_BUILD_DLL

libTAO_AV_la_SOURCES = \
  AV/AVStreams_i.cpp \
  AV/AV_Core.cpp \
  AV/Endpoint_Strategy.cpp \
  AV/Fill_ACE_QoS.cpp \
  AV/FlowSpec_Entry.cpp \
  AV/MCast.cpp \
  AV/Policy.cpp \
  AV/Protocol_Factory.cpp \
  AV/QoS_UDP.cpp \
  AV/RTCP.cpp \
  AV/RTCP_Channel.cpp \
  AV/RTCP_Packet.cpp \
  AV/RTP.cpp \
  AV/SCTP_SEQ.cpp \
  AV/TCP.cpp \
  AV/Transport.cpp \
  AV/UDP.cpp \
  AV/default_resource.cpp \
  AV/md5c.cpp \
  AV/media_timer.cpp \
  AV/sfp.cpp \
  AVStreamsC.cpp \
  AVStreamsS.cpp \
  Null_MediaCtrlC.cpp \
  Null_MediaCtrlS.cpp \
  sfpC.cpp \
  sfpS.cpp

libTAO_AV_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_AV_la_LIBADD = \
  libTAO_CosNaming.la \
  libTAO_CosProperty_Serv.la \
  libTAO_CosProperty_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosProperty.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  AV/AVStreams_i.h \
  AV/AVStreams_i.inl \
  AV/AV_Core.h \
  AV/AV_export.h \
  AV/Endpoint_Strategy.h \
  AV/Endpoint_Strategy_T.cpp \
  AV/Endpoint_Strategy_T.h \
  AV/Fill_ACE_QoS.h \
  AV/FlowSpec_Entry.h \
  AV/FlowSpec_Entry.inl \
  AV/Flows_T.cpp \
  AV/Flows_T.h \
  AV/MCast.h \
  AV/MCast.inl \
  AV/Policy.h \
  AV/Policy.inl \
  AV/Protocol_Factory.h \
  AV/QoS_UDP.h \
  AV/QoS_UDP.inl \
  AV/RTCP.h \
  AV/RTCP_Channel.h \
  AV/RTCP_Packet.h \
  AV/RTP.h \
  AV/Resource_Factory.h \
  AV/SCTP_SEQ.h \
  AV/TCP.h \
  AV/Transport.h \
  AV/Transport.inl \
  AV/UDP.h \
  AV/UDP.inl \
  AV/default_resource.h \
  AV/global.h \
  AV/md5.h \
  AV/media_timer.h \
  AV/ntp-time.h \
  AV/sfp.h \
  AVStreams.idl \
  AVStreamsC.h \
  AVStreamsC.inl \
  AVStreamsS.h \
  AVStreamsS.inl \
  Null_MediaCtrl.idl \
  Null_MediaCtrlC.h \
  Null_MediaCtrlC.inl \
  Null_MediaCtrlS.h \
  Null_MediaCtrlS.inl \
  sfp.idl \
  sfpC.h \
  sfpC.inl \
  sfpS.h \
  sfpS.inl

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  AV.rc


## Makefile.CosConcurrency_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosConcurrencyControlC.cpp \
  CosConcurrencyControlC.h \
  CosConcurrencyControlC.inl \
  CosConcurrencyControlS.cpp \
  CosConcurrencyControlS.h \
  CosConcurrencyControlS.inl

CLEANFILES += \
  CosConcurrencyControl-stamp \
  CosConcurrencyControlC.cpp \
  CosConcurrencyControlC.h \
  CosConcurrencyControlC.inl \
  CosConcurrencyControlS.cpp \
  CosConcurrencyControlS.h \
  CosConcurrencyControlS.inl

CosConcurrencyControlC.cpp CosConcurrencyControlC.h CosConcurrencyControlC.inl CosConcurrencyControlS.cpp CosConcurrencyControlS.h CosConcurrencyControlS.inl: CosConcurrencyControl-stamp

CosConcurrencyControl-stamp: $(srcdir)/CosConcurrencyControl.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Concurrency_Export -Wb,stub_export_include=orbsvcs/Concurrency/concurrency_export.h -Wb,skel_export_macro=TAO_Concurrency_Skel_Export -Wb,skel_export_include=orbsvcs/Concurrency/concurrency_skel_export.h $(srcdir)/CosConcurrencyControl.idl
	@touch $@

nobase_include_HEADERS += \
  CosConcurrencyControl.idl

endif BUILD_EXCEPTIONS

## Makefile.CosConcurrency.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosConcurrency.la

libTAO_CosConcurrency_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_CONCURRENCY_BUILD_DLL

libTAO_CosConcurrency_la_SOURCES = \
  CosConcurrencyControlC.cpp

libTAO_CosConcurrency_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosConcurrency_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Concurrency/concurrency_export.h \
  CosConcurrencyControlC.h \
  CosConcurrencyControlC.inl

pkgconfig_DATA += \
  TAO_CosConcurrency.pc

CLEANFILES += \
  TAO_CosConcurrency.pc

TAO_CosConcurrency.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosConcurrency.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosConcurrency.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_CosConcurrency.pc.in


## Makefile.CosConcurrency_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosConcurrency_Skel.la

libTAO_CosConcurrency_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_CONCURRENCY_SKEL_BUILD_DLL

libTAO_CosConcurrency_Skel_la_SOURCES = \
  CosConcurrencyControlS.cpp

libTAO_CosConcurrency_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosConcurrency_Skel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosConcurrency.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Concurrency/concurrency_skel_export.h \
  CosConcurrencyControlS.h \
  CosConcurrencyControlS.inl

pkgconfig_DATA += \
  TAO_CosConcurrency_Skel.pc

CLEANFILES += \
  TAO_CosConcurrency_Skel.pc

TAO_CosConcurrency_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosConcurrency_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosConcurrency_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_CosConcurrency_Skel.pc.in


## Makefile.CosConcurrency_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosConcurrency_Serv.la

libTAO_CosConcurrency_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_CONCURRENCY_SERV_BUILD_DLL

libTAO_CosConcurrency_Serv_la_SOURCES = \
  Concurrency/CC_Lock.cpp \
  Concurrency/CC_LockSet.cpp \
  Concurrency/CC_LockSetFactory.cpp \
  Concurrency/Concurrency_Loader.cpp \
  Concurrency/Concurrency_Utils.cpp

libTAO_CosConcurrency_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosConcurrency_Serv_la_LIBADD = \
  libTAO_CosConcurrency_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosConcurrency.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Concurrency/CC_Lock.h \
  Concurrency/CC_LockSet.h \
  Concurrency/CC_LockSetFactory.h \
  Concurrency/Concurrency_Loader.h \
  Concurrency/Concurrency_Utils.h \
  Concurrency/concurrency_serv_export.h

pkgconfig_DATA += \
  TAO_CosConcurrency_Serv.pc

CLEANFILES += \
  TAO_CosConcurrency_Serv.pc

TAO_CosConcurrency_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosConcurrency_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosConcurrency_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_CosConcurrency_Serv.pc.in


## Makefile.CosEvent_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosTypedEventCommC.cpp \
  CosTypedEventCommC.h \
  CosTypedEventCommC.inl \
  CosTypedEventCommS.cpp \
  CosTypedEventCommS.h \
  CosTypedEventCommS.inl \
  CosTypedEventCommS_T.cpp \
  CosTypedEventCommS_T.h

CLEANFILES += \
  CosTypedEventComm-stamp \
  CosTypedEventCommC.cpp \
  CosTypedEventCommC.h \
  CosTypedEventCommC.inl \
  CosTypedEventCommS.cpp \
  CosTypedEventCommS.h \
  CosTypedEventCommS.inl \
  CosTypedEventCommS_T.cpp \
  CosTypedEventCommS_T.h

CosTypedEventCommC.cpp CosTypedEventCommC.h CosTypedEventCommC.inl CosTypedEventCommS.cpp CosTypedEventCommS.h CosTypedEventCommS.inl CosTypedEventCommS_T.cpp CosTypedEventCommS_T.h: CosTypedEventComm-stamp

CosTypedEventComm-stamp: $(srcdir)/CosTypedEventComm.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -GT -Wb,stub_export_macro=TAO_Event_Export -Wb,stub_export_include=orbsvcs/CosEvent/event_export.h -Wb,skel_export_macro=TAO_Event_Skel_Export -Wb,skel_export_include=orbsvcs/CosEvent/event_skel_export.h $(srcdir)/CosTypedEventComm.idl
	@touch $@

BUILT_SOURCES += \
  CosTypedEventChannelAdminC.cpp \
  CosTypedEventChannelAdminC.h \
  CosTypedEventChannelAdminC.inl \
  CosTypedEventChannelAdminS.cpp \
  CosTypedEventChannelAdminS.h \
  CosTypedEventChannelAdminS.inl \
  CosTypedEventChannelAdminS_T.cpp \
  CosTypedEventChannelAdminS_T.h

CLEANFILES += \
  CosTypedEventChannelAdmin-stamp \
  CosTypedEventChannelAdminC.cpp \
  CosTypedEventChannelAdminC.h \
  CosTypedEventChannelAdminC.inl \
  CosTypedEventChannelAdminS.cpp \
  CosTypedEventChannelAdminS.h \
  CosTypedEventChannelAdminS.inl \
  CosTypedEventChannelAdminS_T.cpp \
  CosTypedEventChannelAdminS_T.h

CosTypedEventChannelAdminC.cpp CosTypedEventChannelAdminC.h CosTypedEventChannelAdminC.inl CosTypedEventChannelAdminS.cpp CosTypedEventChannelAdminS.h CosTypedEventChannelAdminS.inl CosTypedEventChannelAdminS_T.cpp CosTypedEventChannelAdminS_T.h: CosTypedEventChannelAdmin-stamp

CosTypedEventChannelAdmin-stamp: $(srcdir)/CosTypedEventChannelAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -GT -Wb,stub_export_macro=TAO_Event_Export -Wb,stub_export_include=orbsvcs/CosEvent/event_export.h -Wb,skel_export_macro=TAO_Event_Skel_Export -Wb,skel_export_include=orbsvcs/CosEvent/event_skel_export.h $(srcdir)/CosTypedEventChannelAdmin.idl
	@touch $@

BUILT_SOURCES += \
  CosEventCommC.cpp \
  CosEventCommC.h \
  CosEventCommC.inl \
  CosEventCommS.cpp \
  CosEventCommS.h \
  CosEventCommS.inl \
  CosEventCommS_T.cpp \
  CosEventCommS_T.h

CLEANFILES += \
  CosEventComm-stamp \
  CosEventCommC.cpp \
  CosEventCommC.h \
  CosEventCommC.inl \
  CosEventCommS.cpp \
  CosEventCommS.h \
  CosEventCommS.inl \
  CosEventCommS_T.cpp \
  CosEventCommS_T.h

CosEventCommC.cpp CosEventCommC.h CosEventCommC.inl CosEventCommS.cpp CosEventCommS.h CosEventCommS.inl CosEventCommS_T.cpp CosEventCommS_T.h: CosEventComm-stamp

CosEventComm-stamp: $(srcdir)/CosEventComm.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GT -Wb,stub_export_macro=TAO_Event_Export -Wb,stub_export_include=orbsvcs/CosEvent/event_export.h -Wb,skel_export_macro=TAO_Event_Skel_Export -Wb,skel_export_include=orbsvcs/CosEvent/event_skel_export.h $(srcdir)/CosEventComm.idl
	@touch $@

BUILT_SOURCES += \
  CosEventChannelAdminC.cpp \
  CosEventChannelAdminC.h \
  CosEventChannelAdminC.inl \
  CosEventChannelAdminS.cpp \
  CosEventChannelAdminS.h \
  CosEventChannelAdminS.inl \
  CosEventChannelAdminS_T.cpp \
  CosEventChannelAdminS_T.h

CLEANFILES += \
  CosEventChannelAdmin-stamp \
  CosEventChannelAdminC.cpp \
  CosEventChannelAdminC.h \
  CosEventChannelAdminC.inl \
  CosEventChannelAdminS.cpp \
  CosEventChannelAdminS.h \
  CosEventChannelAdminS.inl \
  CosEventChannelAdminS_T.cpp \
  CosEventChannelAdminS_T.h

CosEventChannelAdminC.cpp CosEventChannelAdminC.h CosEventChannelAdminC.inl CosEventChannelAdminS.cpp CosEventChannelAdminS.h CosEventChannelAdminS.inl CosEventChannelAdminS_T.cpp CosEventChannelAdminS_T.h: CosEventChannelAdmin-stamp

CosEventChannelAdmin-stamp: $(srcdir)/CosEventChannelAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GT -Wb,stub_export_macro=TAO_Event_Export -Wb,stub_export_include=orbsvcs/CosEvent/event_export.h -Wb,skel_export_macro=TAO_Event_Skel_Export -Wb,skel_export_include=orbsvcs/CosEvent/event_skel_export.h $(srcdir)/CosEventChannelAdmin.idl
	@touch $@

nobase_include_HEADERS += \
  CosEventChannelAdmin.idl \
  CosEventComm.idl \
  CosTypedEventChannelAdmin.idl \
  CosTypedEventComm.idl

endif BUILD_EXCEPTIONS

## Makefile.CosEvent.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosEvent.la

libTAO_CosEvent_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_EVENT_BUILD_DLL

libTAO_CosEvent_la_SOURCES = \
  CosEventChannelAdminC.cpp \
  CosEventCommC.cpp \
  CosTypedEventChannelAdminC.cpp \
  CosTypedEventCommC.cpp

libTAO_CosEvent_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosEvent_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosEvent/event_export.h \
  CosEventChannelAdminC.h \
  CosEventChannelAdminC.inl \
  CosEventCommC.h \
  CosEventCommC.inl \
  CosTypedEventChannelAdminC.h \
  CosTypedEventChannelAdminC.inl \
  CosTypedEventCommC.h \
  CosTypedEventCommC.inl

pkgconfig_DATA += \
  TAO_CosEvent.pc

CLEANFILES += \
  TAO_CosEvent.pc

TAO_CosEvent.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosEvent.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosEvent.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosEvent.rc \
  TAO_CosEvent.pc.in


## Makefile.Svc_Utils.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  TimeBaseC.cpp \
  TimeBaseC.h \
  TimeBaseC.inl \
  TimeBaseS.cpp \
  TimeBaseS.h \
  TimeBaseS.inl

CLEANFILES += \
  TimeBase-stamp \
  TimeBaseC.cpp \
  TimeBaseC.h \
  TimeBaseC.inl \
  TimeBaseS.cpp \
  TimeBaseS.h \
  TimeBaseS.inl

TimeBaseC.cpp TimeBaseC.h TimeBaseC.inl TimeBaseS.cpp TimeBaseS.h TimeBaseS.inl: TimeBase-stamp

TimeBase-stamp: $(srcdir)/TimeBase.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Svc_Utils_Export -Wb,export_include=orbsvcs/svc_utils_export.h $(srcdir)/TimeBase.idl
	@touch $@

BUILT_SOURCES += \
  RtecBaseC.cpp \
  RtecBaseC.h \
  RtecBaseC.inl \
  RtecBaseS.cpp \
  RtecBaseS.h \
  RtecBaseS.inl

CLEANFILES += \
  RtecBase-stamp \
  RtecBaseC.cpp \
  RtecBaseC.h \
  RtecBaseC.inl \
  RtecBaseS.cpp \
  RtecBaseS.h \
  RtecBaseS.inl

RtecBaseC.cpp RtecBaseC.h RtecBaseC.inl RtecBaseS.cpp RtecBaseS.h RtecBaseS.inl: RtecBase-stamp

RtecBase-stamp: $(srcdir)/RtecBase.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Svc_Utils_Export -Wb,export_include=orbsvcs/svc_utils_export.h $(srcdir)/RtecBase.idl
	@touch $@

lib_LTLIBRARIES += libTAO_Svc_Utils.la

libTAO_Svc_Utils_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_SVC_UTILS_BUILD_DLL

libTAO_Svc_Utils_la_SOURCES = \
  IOR_Multicast.cpp \
  RtecBaseC.cpp \
  RtecBaseS.cpp \
  Shutdown_Utilities.cpp \
  TimeBaseC.cpp \
  TimeBaseS.cpp \
  Time_Utilities.cpp

libTAO_Svc_Utils_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_Svc_Utils_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  IOR_Multicast.h \
  RtecBase.idl \
  RtecBaseC.h \
  RtecBaseC.inl \
  RtecBaseS.h \
  RtecBaseS.inl \
  Shutdown_Utilities.h \
  TimeBase.idl \
  TimeBaseC.h \
  TimeBaseC.inl \
  TimeBaseS.h \
  TimeBaseS.inl \
  Time_Utilities.h \
  Time_Utilities.inl \
  svc_utils_export.h

pkgconfig_DATA += \
  TAO_Svc_Utils.pc

CLEANFILES += \
  TAO_Svc_Utils.pc

TAO_Svc_Utils.pc: ${top_builddir}/config.status ${srcdir}/TAO_Svc_Utils.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_Svc_Utils.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  Svc_Utils.rc \
  TAO_Svc_Utils.pc.in


## Makefile.CosEvent_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosEvent_Skel.la

libTAO_CosEvent_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_EVENT_SKEL_BUILD_DLL

libTAO_CosEvent_Skel_la_SOURCES = \
  CosEventChannelAdminS.cpp \
  CosEventCommS.cpp \
  CosTypedEventChannelAdminS.cpp \
  CosTypedEventCommS.cpp

libTAO_CosEvent_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosEvent_Skel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosEvent.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosEvent/event_skel_export.h \
  CosEventChannelAdminS.h \
  CosEventChannelAdminS.inl \
  CosEventChannelAdminS_T.cpp \
  CosEventChannelAdminS_T.h \
  CosEventCommS.h \
  CosEventCommS.inl \
  CosEventCommS_T.cpp \
  CosEventCommS_T.h \
  CosTypedEventChannelAdminS.h \
  CosTypedEventChannelAdminS.inl \
  CosTypedEventChannelAdminS_T.cpp \
  CosTypedEventChannelAdminS_T.h \
  CosTypedEventCommS.h \
  CosTypedEventCommS.inl \
  CosTypedEventCommS_T.cpp \
  CosTypedEventCommS_T.h

pkgconfig_DATA += \
  TAO_CosEvent_Skel.pc

CLEANFILES += \
  TAO_CosEvent_Skel.pc

TAO_CosEvent_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosEvent_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosEvent_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosEvent_Skel.rc \
  TAO_CosEvent_Skel.pc.in


## Makefile.CosEvent_Serv.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosEvent_Serv.la

libTAO_CosEvent_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_EVENT_SERV_BUILD_DLL

libTAO_CosEvent_Serv_la_SOURCES = \
  CosEvent/CEC_ConsumerAdmin.cpp \
  CosEvent/CEC_ConsumerControl.cpp \
  CosEvent/CEC_Default_Factory.cpp \
  CosEvent/CEC_Dispatching.cpp \
  CosEvent/CEC_Dispatching_Task.cpp \
  CosEvent/CEC_DynamicImplementation.cpp \
  CosEvent/CEC_EventChannel.cpp \
  CosEvent/CEC_Event_Loader.cpp \
  CosEvent/CEC_Factory.cpp \
  CosEvent/CEC_MT_Dispatching.cpp \
  CosEvent/CEC_ProxyPullConsumer.cpp \
  CosEvent/CEC_ProxyPullSupplier.cpp \
  CosEvent/CEC_ProxyPushConsumer.cpp \
  CosEvent/CEC_ProxyPushSupplier.cpp \
  CosEvent/CEC_Pulling_Strategy.cpp \
  CosEvent/CEC_Reactive_ConsumerControl.cpp \
  CosEvent/CEC_Reactive_Pulling_Strategy.cpp \
  CosEvent/CEC_Reactive_SupplierControl.cpp \
  CosEvent/CEC_SupplierAdmin.cpp \
  CosEvent/CEC_SupplierControl.cpp \
  CosEvent/CEC_TypedConsumerAdmin.cpp \
  CosEvent/CEC_TypedEvent.cpp \
  CosEvent/CEC_TypedEventChannel.cpp \
  CosEvent/CEC_TypedProxyPushConsumer.cpp \
  CosEvent/CEC_TypedSupplierAdmin.cpp

libTAO_CosEvent_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosEvent_Serv_la_LIBADD = \
  libTAO_Svc_Utils.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_IFR_Client.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicInterface.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosEvent_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosEvent.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosEvent/CEC_ConsumerAdmin.h \
  CosEvent/CEC_ConsumerAdmin.inl \
  CosEvent/CEC_ConsumerControl.h \
  CosEvent/CEC_Default_Factory.h \
  CosEvent/CEC_Default_Factory.inl \
  CosEvent/CEC_Defaults.h \
  CosEvent/CEC_Dispatching.h \
  CosEvent/CEC_Dispatching_Task.h \
  CosEvent/CEC_Dispatching_Task.inl \
  CosEvent/CEC_DynamicImplementation.h \
  CosEvent/CEC_DynamicImplementation.inl \
  CosEvent/CEC_EventChannel.h \
  CosEvent/CEC_EventChannel.inl \
  CosEvent/CEC_Event_Loader.h \
  CosEvent/CEC_Factory.h \
  CosEvent/CEC_MT_Dispatching.h \
  CosEvent/CEC_ProxyPullConsumer.h \
  CosEvent/CEC_ProxyPullConsumer.inl \
  CosEvent/CEC_ProxyPullSupplier.h \
  CosEvent/CEC_ProxyPullSupplier.inl \
  CosEvent/CEC_ProxyPushConsumer.h \
  CosEvent/CEC_ProxyPushConsumer.inl \
  CosEvent/CEC_ProxyPushSupplier.h \
  CosEvent/CEC_ProxyPushSupplier.inl \
  CosEvent/CEC_Pulling_Strategy.h \
  CosEvent/CEC_Reactive_ConsumerControl.h \
  CosEvent/CEC_Reactive_ConsumerControl.inl \
  CosEvent/CEC_Reactive_Pulling_Strategy.h \
  CosEvent/CEC_Reactive_Pulling_Strategy.inl \
  CosEvent/CEC_Reactive_SupplierControl.h \
  CosEvent/CEC_Reactive_SupplierControl.inl \
  CosEvent/CEC_SupplierAdmin.h \
  CosEvent/CEC_SupplierAdmin.inl \
  CosEvent/CEC_SupplierControl.h \
  CosEvent/CEC_TypedConsumerAdmin.h \
  CosEvent/CEC_TypedConsumerAdmin.inl \
  CosEvent/CEC_TypedEvent.h \
  CosEvent/CEC_TypedEvent.inl \
  CosEvent/CEC_TypedEventChannel.h \
  CosEvent/CEC_TypedEventChannel.inl \
  CosEvent/CEC_TypedProxyPushConsumer.h \
  CosEvent/CEC_TypedProxyPushConsumer.inl \
  CosEvent/CEC_TypedSupplierAdmin.h \
  CosEvent/CEC_TypedSupplierAdmin.inl \
  CosEvent/event_serv_export.h

pkgconfig_DATA += \
  TAO_CosEvent_Serv.pc

CLEANFILES += \
  TAO_CosEvent_Serv.pc

TAO_CosEvent_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosEvent_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosEvent_Serv.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  CosEvent_Serv.rc \
  TAO_CosEvent_Serv.pc.in


## Makefile.CosLifeCycle.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosLifeCycleC.cpp \
  CosLifeCycleC.h \
  CosLifeCycleC.inl \
  CosLifeCycleS.cpp \
  CosLifeCycleS.h \
  CosLifeCycleS.inl

CLEANFILES += \
  CosLifeCycle-stamp \
  CosLifeCycleC.cpp \
  CosLifeCycleC.h \
  CosLifeCycleC.inl \
  CosLifeCycleS.cpp \
  CosLifeCycleS.h \
  CosLifeCycleS.inl

CosLifeCycleC.cpp CosLifeCycleC.h CosLifeCycleC.inl CosLifeCycleS.cpp CosLifeCycleS.h CosLifeCycleS.inl: CosLifeCycle-stamp

CosLifeCycle-stamp: $(srcdir)/CosLifeCycle.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_LifeCycle_Export -Wb,export_include=orbsvcs/LifeCycle/lifecycle_export.h $(srcdir)/CosLifeCycle.idl
	@touch $@

BUILT_SOURCES += \
  LifeCycleServiceC.cpp \
  LifeCycleServiceC.h \
  LifeCycleServiceC.inl \
  LifeCycleServiceS.cpp \
  LifeCycleServiceS.h \
  LifeCycleServiceS.inl

CLEANFILES += \
  LifeCycleService-stamp \
  LifeCycleServiceC.cpp \
  LifeCycleServiceC.h \
  LifeCycleServiceC.inl \
  LifeCycleServiceS.cpp \
  LifeCycleServiceS.h \
  LifeCycleServiceS.inl

LifeCycleServiceC.cpp LifeCycleServiceC.h LifeCycleServiceC.inl LifeCycleServiceS.cpp LifeCycleServiceS.h LifeCycleServiceS.inl: LifeCycleService-stamp

LifeCycleService-stamp: $(srcdir)/LifeCycleService.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_LifeCycle_Export -Wb,export_include=orbsvcs/LifeCycle/lifecycle_export.h $(srcdir)/LifeCycleService.idl
	@touch $@

lib_LTLIBRARIES += libTAO_CosLifeCycle.la

libTAO_CosLifeCycle_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_LIFECYCLE_BUILD_DLL

libTAO_CosLifeCycle_la_SOURCES = \
  CosLifeCycleC.cpp \
  CosLifeCycleS.cpp \
  LifeCycleServiceC.cpp \
  LifeCycleServiceS.cpp

libTAO_CosLifeCycle_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosLifeCycle_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosLifeCycle.idl \
  CosLifeCycleC.h \
  CosLifeCycleC.inl \
  CosLifeCycleS.h \
  CosLifeCycleS.inl \
  LifeCycleService.idl \
  LifeCycleServiceC.h \
  LifeCycleServiceC.inl \
  LifeCycleServiceS.h \
  LifeCycleServiceS.inl

pkgconfig_DATA += \
  TAO_CosLifeCycle.pc

CLEANFILES += \
  TAO_CosLifeCycle.pc

TAO_CosLifeCycle.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosLifeCycle.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosLifeCycle.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosLifeCycle.rc \
  TAO_CosLifeCycle.pc.in


## Makefile.PortableGroup.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  miopC.cpp \
  miopC.h \
  miopC.inl \
  miopS.cpp \
  miopS.h \
  miopS.inl

CLEANFILES += \
  miop-stamp \
  miopC.cpp \
  miopC.h \
  miopC.inl \
  miopS.cpp \
  miopS.h \
  miopS.inl

miopC.cpp miopC.h miopC.inl miopS.cpp miopS.h miopS.inl: miop-stamp

miop-stamp: $(srcdir)/miop.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_PortableGroup_Export -Wb,export_include=orbsvcs/PortableGroup/portablegroup_export.h $(srcdir)/miop.idl
	@touch $@

BUILT_SOURCES += \
  PortableGroup_Simple_DSC.cpp \
  PortableGroup_Simple_DSC.h \
  PortableGroup_Simple_DSC.inl \
  PortableGroup_Simple_DSS.inl

CLEANFILES += \
  PortableGroup_Simple_DS-stamp \
  PortableGroup_Simple_DSC.cpp \
  PortableGroup_Simple_DSC.h \
  PortableGroup_Simple_DSC.inl \
  PortableGroup_Simple_DSS.inl

PortableGroup_Simple_DSC.cpp PortableGroup_Simple_DSC.h PortableGroup_Simple_DSC.inl PortableGroup_Simple_DSS.inl: PortableGroup_Simple_DS-stamp

PortableGroup_Simple_DS-stamp: $(srcdir)/PortableGroup_Simple_DS.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_PortableGroup_Export -Wb,export_include=orbsvcs/PortableGroup/portablegroup_export.h $(srcdir)/PortableGroup_Simple_DS.idl
	@touch $@

BUILT_SOURCES += \
  PortableGroupC.cpp \
  PortableGroupC.h \
  PortableGroupC.inl \
  PortableGroupS.cpp \
  PortableGroupS.h \
  PortableGroupS.inl

CLEANFILES += \
  PortableGroup-stamp \
  PortableGroupC.cpp \
  PortableGroupC.h \
  PortableGroupC.inl \
  PortableGroupS.cpp \
  PortableGroupS.h \
  PortableGroupS.inl

PortableGroupC.cpp PortableGroupC.h PortableGroupC.inl PortableGroupS.cpp PortableGroupS.h PortableGroupS.inl: PortableGroup-stamp

PortableGroup-stamp: $(srcdir)/PortableGroup.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_PortableGroup_Export -Wb,export_include=orbsvcs/PortableGroup/portablegroup_export.h -GC $(srcdir)/PortableGroup.idl
	@touch $@

lib_LTLIBRARIES += libTAO_PortableGroup.la

libTAO_PortableGroup_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_PORTABLEGROUP_BUILD_DLL

libTAO_PortableGroup_la_SOURCES = \
  PortableGroup/GOA.cpp \
  PortableGroup/MIOP.cpp \
  PortableGroup/PG_Default_Property_Validator.cpp \
  PortableGroup/PG_FactoryRegistry.cpp \
  PortableGroup/PG_GenericFactory.cpp \
  PortableGroup/PG_Group_Factory.cpp \
  PortableGroup/PG_Group_Guard.cpp \
  PortableGroup/PG_Location_Equal_To.cpp \
  PortableGroup/PG_Location_Hash.cpp \
  PortableGroup/PG_MemberInfo.cpp \
  PortableGroup/PG_Null_Property_Validator.cpp \
  PortableGroup/PG_ObjectGroupManager.cpp \
  PortableGroup/PG_Object_Adapter_Factory.cpp \
  PortableGroup/PG_Object_Group.cpp \
  PortableGroup/PG_Object_Group_Manipulator.cpp \
  PortableGroup/PG_Operators.cpp \
  PortableGroup/PG_Properties_Encoder.cpp \
  PortableGroup/PG_Properties_Support.cpp \
  PortableGroup/PG_PropertyManager.cpp \
  PortableGroup/PG_Property_Set.cpp \
  PortableGroup/PG_Property_Utils.cpp \
  PortableGroup/PG_Servant_Dispatcher.cpp \
  PortableGroup/PG_Utils.cpp \
  PortableGroup/PortableGroup_Acceptor_Registry.cpp \
  PortableGroup/PortableGroup_Loader.cpp \
  PortableGroup/PortableGroup_ORBInitializer.cpp \
  PortableGroup/PortableGroup_Request_Dispatcher.cpp \
  PortableGroup/Portable_Group_Map.cpp \
  PortableGroup/UIPMC_Acceptor.cpp \
  PortableGroup/UIPMC_Connection_Handler.cpp \
  PortableGroup/UIPMC_Connector.cpp \
  PortableGroup/UIPMC_Endpoint.cpp \
  PortableGroup/UIPMC_Factory.cpp \
  PortableGroup/UIPMC_Mcast_Connection_Handler.cpp \
  PortableGroup/UIPMC_Message_Block_Data_Iterator.cpp \
  PortableGroup/UIPMC_Profile.cpp \
  PortableGroup/UIPMC_Transport.cpp \
  PortableGroup/UIPMC_Wait_Never.cpp \
  PortableGroupC.cpp \
  PortableGroupS.cpp \
  PortableGroup_Simple_DSC.cpp \
  miopC.cpp \
  miopS.cpp

libTAO_PortableGroup_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_PortableGroup_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  PortableGroup.idl \
  PortableGroup/GOA.h \
  PortableGroup/MIOP.h \
  PortableGroup/PG_Default_Property_Validator.h \
  PortableGroup/PG_FactoryRegistry.h \
  PortableGroup/PG_GenericFactory.h \
  PortableGroup/PG_Group_Factory.h \
  PortableGroup/PG_Group_Guard.h \
  PortableGroup/PG_Location_Equal_To.h \
  PortableGroup/PG_Location_Equal_To.inl \
  PortableGroup/PG_Location_Hash.h \
  PortableGroup/PG_Location_Hash.inl \
  PortableGroup/PG_MemberInfo.h \
  PortableGroup/PG_Null_Property_Validator.h \
  PortableGroup/PG_ObjectGroupManager.h \
  PortableGroup/PG_Object_Adapter_Factory.h \
  PortableGroup/PG_Object_Group.h \
  PortableGroup/PG_Object_Group_Manipulator.h \
  PortableGroup/PG_Operators.h \
  PortableGroup/PG_Properties_Encoder.h \
  PortableGroup/PG_Properties_Encoder.inl \
  PortableGroup/PG_Properties_Support.h \
  PortableGroup/PG_PropertyManager.h \
  PortableGroup/PG_Property_Set.h \
  PortableGroup/PG_Property_Utils.h \
  PortableGroup/PG_Servant_Dispatcher.h \
  PortableGroup/PG_Utils.h \
  PortableGroup/PortableGroup_Acceptor_Registry.h \
  PortableGroup/PortableGroup_Loader.h \
  PortableGroup/PortableGroup_ORBInitializer.h \
  PortableGroup/PortableGroup_Request_Dispatcher.h \
  PortableGroup/Portable_Group_Map.h \
  PortableGroup/UIPMC_Acceptor.h \
  PortableGroup/UIPMC_Acceptor.inl \
  PortableGroup/UIPMC_Connection_Handler.h \
  PortableGroup/UIPMC_Connector.h \
  PortableGroup/UIPMC_Endpoint.h \
  PortableGroup/UIPMC_Endpoint.inl \
  PortableGroup/UIPMC_Factory.h \
  PortableGroup/UIPMC_Mcast_Connection_Handler.h \
  PortableGroup/UIPMC_Message_Block_Data_Iterator.h \
  PortableGroup/UIPMC_Profile.h \
  PortableGroup/UIPMC_Transport.h \
  PortableGroup/UIPMC_Wait_Never.h \
  PortableGroup/portablegroup_export.h \
  PortableGroupC.h \
  PortableGroupC.inl \
  PortableGroupS.h \
  PortableGroupS.inl \
  PortableGroup_Simple_DS.idl \
  PortableGroup_Simple_DSC.h \
  PortableGroup_Simple_DSC.inl \
  PortableGroup_Simple_DSS.inl \
  miop.idl \
  miopC.h \
  miopC.inl \
  miopS.h \
  miopS.inl

pkgconfig_DATA += \
  TAO_PortableGroup.pc

CLEANFILES += \
  TAO_PortableGroup.pc

TAO_PortableGroup.pc: ${top_builddir}/config.status ${srcdir}/TAO_PortableGroup.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_PortableGroup.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  PortableGroup.rc \
  TAO_PortableGroup.pc.in


## Makefile.CosLoadBalancing.am

if BUILD_AMI
if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosLoadBalancingC.cpp \
  CosLoadBalancingC.h \
  CosLoadBalancingC.inl \
  CosLoadBalancingS.cpp \
  CosLoadBalancingS.h \
  CosLoadBalancingS.inl

CLEANFILES += \
  CosLoadBalancing-stamp \
  CosLoadBalancingC.cpp \
  CosLoadBalancingC.h \
  CosLoadBalancingC.inl \
  CosLoadBalancingS.cpp \
  CosLoadBalancingS.h \
  CosLoadBalancingS.inl

CosLoadBalancingC.cpp CosLoadBalancingC.h CosLoadBalancingC.inl CosLoadBalancingS.cpp CosLoadBalancingS.h CosLoadBalancingS.inl: CosLoadBalancing-stamp

CosLoadBalancing-stamp: $(srcdir)/CosLoadBalancing.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -GC -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_LoadBalancing_Export -Wb,export_include=orbsvcs/LoadBalancing/LoadBalancing_export.h $(srcdir)/CosLoadBalancing.idl
	@touch $@

BUILT_SOURCES += \
  LB_ORTC.cpp \
  LB_ORTC.h \
  LB_ORTC.inl \
  LB_ORTS.h \
  LB_ORTS.inl

CLEANFILES += \
  LB_ORT-stamp \
  LB_ORTC.cpp \
  LB_ORTC.h \
  LB_ORTC.inl \
  LB_ORTS.h \
  LB_ORTS.inl

LB_ORTC.cpp LB_ORTC.h LB_ORTC.inl LB_ORTS.h LB_ORTS.inl: LB_ORT-stamp

LB_ORT-stamp: $(srcdir)/LB_ORT.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -GC -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_LoadBalancing_Export -Wb,export_include=orbsvcs/LoadBalancing/LoadBalancing_export.h $(srcdir)/LB_ORT.idl
	@touch $@

lib_LTLIBRARIES += libTAO_CosLoadBalancing.la

libTAO_CosLoadBalancing_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_LOADBALANCING_BUILD_DLL

libTAO_CosLoadBalancing_la_SOURCES = \
  CosLoadBalancingC.cpp \
  CosLoadBalancingS.cpp \
  LB_ORTC.cpp \
  LoadBalancing/LB_CPU_Load_Average_Monitor.cpp \
  LoadBalancing/LB_CPU_Utilization_Monitor.cpp \
  LoadBalancing/LB_ClientComponent.cpp \
  LoadBalancing/LB_ClientORBInitializer.cpp \
  LoadBalancing/LB_ClientRequestInterceptor.cpp \
  LoadBalancing/LB_Component.cpp \
  LoadBalancing/LB_IORInterceptor.cpp \
  LoadBalancing/LB_LeastLoaded.cpp \
  LoadBalancing/LB_LoadAlert.cpp \
  LoadBalancing/LB_LoadAlertInfo.cpp \
  LoadBalancing/LB_LoadAlert_Handler.cpp \
  LoadBalancing/LB_LoadAverage.cpp \
  LoadBalancing/LB_LoadManager.cpp \
  LoadBalancing/LB_LoadMinimum.cpp \
  LoadBalancing/LB_MemberLocator.cpp \
  LoadBalancing/LB_ORBInitializer.cpp \
  LoadBalancing/LB_ObjectReferenceFactory.cpp \
  LoadBalancing/LB_Pull_Handler.cpp \
  LoadBalancing/LB_Random.cpp \
  LoadBalancing/LB_RoundRobin.cpp \
  LoadBalancing/LB_ServerRequestInterceptor.cpp

libTAO_CosLoadBalancing_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosLoadBalancing_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_IORInterceptor.la \
  $(TAO_BUILDDIR)/tao/libTAO_ObjRefTemplate.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI_Server.la \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosLoadBalancing.idl \
  CosLoadBalancingC.h \
  CosLoadBalancingC.inl \
  CosLoadBalancingS.h \
  CosLoadBalancingS.inl \
  LB_ORT.idl \
  LB_ORTC.h \
  LB_ORTC.inl \
  LB_ORTS.h \
  LB_ORTS.inl \
  LoadBalancing/LB_CPU_Load_Average_Monitor.h \
  LoadBalancing/LB_CPU_Utilization_Monitor.h \
  LoadBalancing/LB_ClientComponent.h \
  LoadBalancing/LB_ClientORBInitializer.h \
  LoadBalancing/LB_ClientRequestInterceptor.h \
  LoadBalancing/LB_Component.h \
  LoadBalancing/LB_IORInterceptor.h \
  LoadBalancing/LB_LeastLoaded.h \
  LoadBalancing/LB_LeastLoaded.inl \
  LoadBalancing/LB_LoadAlert.h \
  LoadBalancing/LB_LoadAlert.inl \
  LoadBalancing/LB_LoadAlertInfo.h \
  LoadBalancing/LB_LoadAlert_Handler.h \
  LoadBalancing/LB_LoadAverage.h \
  LoadBalancing/LB_LoadAverage.inl \
  LoadBalancing/LB_LoadManager.h \
  LoadBalancing/LB_LoadMinimum.h \
  LoadBalancing/LB_LoadMinimum.inl \
  LoadBalancing/LB_MemberLocator.h \
  LoadBalancing/LB_ORBInitializer.h \
  LoadBalancing/LB_ObjectReferenceFactory.h \
  LoadBalancing/LB_Pull_Handler.h \
  LoadBalancing/LB_Random.h \
  LoadBalancing/LB_RoundRobin.h \
  LoadBalancing/LB_ServerRequestInterceptor.h

pkgconfig_DATA += \
  TAO_CosLoadBalancing.pc

CLEANFILES += \
  TAO_CosLoadBalancing.pc

TAO_CosLoadBalancing.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosLoadBalancing.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosLoadBalancing.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING
endif BUILD_AMI

EXTRA_DIST += \
  CosLoadBalancing.rc \
  TAO_CosLoadBalancing.pc.in


## Makefile.CosNaming_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosNaming_Skel.la

libTAO_CosNaming_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_NAMING_SKEL_BUILD_DLL

libTAO_CosNaming_Skel_la_SOURCES = \
  CosNamingS.cpp

libTAO_CosNaming_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNaming_Skel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosNamingS.h \
  CosNamingS.inl \
  Naming/naming_skel_export.h

pkgconfig_DATA += \
  TAO_CosNaming_Skel.pc

CLEANFILES += \
  TAO_CosNaming_Skel.pc

TAO_CosNaming_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosNaming_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosNaming_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosNaming_Skel.rc \
  TAO_CosNaming_Skel.pc.in


## Makefile.CosNaming_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosNaming_Serv.la

libTAO_CosNaming_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_NAMING_SERV_BUILD_DLL

libTAO_CosNaming_Serv_la_SOURCES = \
  Naming/Entries.cpp \
  Naming/Flat_File_Persistence.cpp \
  Naming/Hash_Naming_Context.cpp \
  Naming/Naming_Context_Interface.cpp \
  Naming/Naming_Loader.cpp \
  Naming/Naming_Server.cpp \
  Naming/Persistent_Context_Index.cpp \
  Naming/Persistent_Entries.cpp \
  Naming/Persistent_Naming_Context.cpp \
  Naming/Storable.cpp \
  Naming/Storable_Naming_Context.cpp \
  Naming/Storable_Naming_Context_Activator.cpp \
  Naming/Transient_Naming_Context.cpp

libTAO_CosNaming_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNaming_Serv_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_IORTable.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Naming/Entries.h \
  Naming/Flat_File_Persistence.h \
  Naming/Hash_Naming_Context.h \
  Naming/Naming_Context_Interface.h \
  Naming/Naming_Loader.h \
  Naming/Naming_Server.h \
  Naming/Persistent_Context_Index.h \
  Naming/Persistent_Entries.h \
  Naming/Persistent_Naming_Context.h \
  Naming/Storable.h \
  Naming/Storable.inl \
  Naming/Storable_Naming_Context.h \
  Naming/Storable_Naming_Context_Activator.h \
  Naming/Transient_Naming_Context.h \
  Naming/naming_serv_export.h \
  Naming/nsconf.h

pkgconfig_DATA += \
  TAO_CosNaming_Serv.pc

CLEANFILES += \
  TAO_CosNaming_Serv.pc

TAO_CosNaming_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosNaming_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosNaming_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosNaming_Serv.rc \
  TAO_CosNaming_Serv.pc.in


## Makefile.CosNotification_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosNotificationC.cpp \
  CosNotificationC.h \
  CosNotificationC.inl \
  CosNotificationS.cpp \
  CosNotificationS.h \
  CosNotificationS.inl

CLEANFILES += \
  CosNotification-stamp \
  CosNotificationC.cpp \
  CosNotificationC.h \
  CosNotificationC.inl \
  CosNotificationS.cpp \
  CosNotificationS.h \
  CosNotificationS.inl

CosNotificationC.cpp CosNotificationC.h CosNotificationC.inl CosNotificationS.cpp CosNotificationS.h CosNotificationS.inl: CosNotification-stamp

CosNotification-stamp: $(srcdir)/CosNotification.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h $(srcdir)/CosNotification.idl
	@touch $@

BUILT_SOURCES += \
  CosNotifyCommC.cpp \
  CosNotifyCommC.h \
  CosNotifyCommC.inl \
  CosNotifyCommS.cpp \
  CosNotifyCommS.h \
  CosNotifyCommS.inl

CLEANFILES += \
  CosNotifyComm-stamp \
  CosNotifyCommC.cpp \
  CosNotifyCommC.h \
  CosNotifyCommC.inl \
  CosNotifyCommS.cpp \
  CosNotifyCommS.h \
  CosNotifyCommS.inl

CosNotifyCommC.cpp CosNotifyCommC.h CosNotifyCommC.inl CosNotifyCommS.cpp CosNotifyCommS.h CosNotifyCommS.inl: CosNotifyComm-stamp

CosNotifyComm-stamp: $(srcdir)/CosNotifyComm.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h $(srcdir)/CosNotifyComm.idl
	@touch $@

BUILT_SOURCES += \
  CosNotifyFilterC.cpp \
  CosNotifyFilterC.h \
  CosNotifyFilterC.inl \
  CosNotifyFilterS.cpp \
  CosNotifyFilterS.h \
  CosNotifyFilterS.inl

CLEANFILES += \
  CosNotifyFilter-stamp \
  CosNotifyFilterC.cpp \
  CosNotifyFilterC.h \
  CosNotifyFilterC.inl \
  CosNotifyFilterS.cpp \
  CosNotifyFilterS.h \
  CosNotifyFilterS.inl

CosNotifyFilterC.cpp CosNotifyFilterC.h CosNotifyFilterC.inl CosNotifyFilterS.cpp CosNotifyFilterS.h CosNotifyFilterS.inl: CosNotifyFilter-stamp

CosNotifyFilter-stamp: $(srcdir)/CosNotifyFilter.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h $(srcdir)/CosNotifyFilter.idl
	@touch $@

BUILT_SOURCES += \
  CosNotifyChannelAdminC.cpp \
  CosNotifyChannelAdminC.h \
  CosNotifyChannelAdminC.inl \
  CosNotifyChannelAdminS.cpp \
  CosNotifyChannelAdminS.h \
  CosNotifyChannelAdminS.inl

CLEANFILES += \
  CosNotifyChannelAdmin-stamp \
  CosNotifyChannelAdminC.cpp \
  CosNotifyChannelAdminC.h \
  CosNotifyChannelAdminC.inl \
  CosNotifyChannelAdminS.cpp \
  CosNotifyChannelAdminS.h \
  CosNotifyChannelAdminS.inl

CosNotifyChannelAdminC.cpp CosNotifyChannelAdminC.h CosNotifyChannelAdminC.inl CosNotifyChannelAdminS.cpp CosNotifyChannelAdminS.h CosNotifyChannelAdminS.inl: CosNotifyChannelAdmin-stamp

CosNotifyChannelAdmin-stamp: $(srcdir)/CosNotifyChannelAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h $(srcdir)/CosNotifyChannelAdmin.idl
	@touch $@

BUILT_SOURCES += \
  NotifyExtC.cpp \
  NotifyExtC.h \
  NotifyExtC.inl \
  NotifyExtS.cpp \
  NotifyExtS.h \
  NotifyExtS.inl

CLEANFILES += \
  NotifyExt-stamp \
  NotifyExtC.cpp \
  NotifyExtC.h \
  NotifyExtC.inl \
  NotifyExtS.cpp \
  NotifyExtS.h \
  NotifyExtS.inl

NotifyExtC.cpp NotifyExtC.h NotifyExtC.inl NotifyExtS.cpp NotifyExtS.h NotifyExtS.inl: NotifyExt-stamp

NotifyExt-stamp: $(srcdir)/NotifyExt.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h $(srcdir)/NotifyExt.idl
	@touch $@

BUILT_SOURCES += \
  Event_ForwarderC.cpp \
  Event_ForwarderC.h \
  Event_ForwarderC.inl \
  Event_ForwarderS.cpp \
  Event_ForwarderS.h \
  Event_ForwarderS.inl

CLEANFILES += \
  Event_Forwarder-stamp \
  Event_ForwarderC.cpp \
  Event_ForwarderC.h \
  Event_ForwarderC.inl \
  Event_ForwarderS.cpp \
  Event_ForwarderS.h \
  Event_ForwarderS.inl

Event_ForwarderC.cpp Event_ForwarderC.h Event_ForwarderC.inl Event_ForwarderS.cpp Event_ForwarderS.h Event_ForwarderS.inl: Event_Forwarder-stamp

Event_Forwarder-stamp: $(srcdir)/Event_Forwarder.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h $(srcdir)/Event_Forwarder.idl
	@touch $@

nobase_include_HEADERS += \
  CosNotification.idl \
  CosNotifyChannelAdmin.idl \
  CosNotifyComm.idl \
  CosNotifyFilter.idl \
  Event_Forwarder.idl \
  NotifyExt.idl

endif BUILD_EXCEPTIONS

## Makefile.CosNotification.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosNotification.la

libTAO_CosNotification_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFY_BUILD_DLL

libTAO_CosNotification_la_SOURCES = \
  CosNotificationC.cpp \
  CosNotifyChannelAdminC.cpp \
  CosNotifyCommC.cpp \
  CosNotifyFilterC.cpp \
  Event_ForwarderC.cpp \
  Notify/Notify_Extensions.cpp \
  NotifyExtC.cpp

libTAO_CosNotification_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNotification_la_LIBADD = \
  libTAO_CosEvent.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosNotificationC.h \
  CosNotificationC.inl \
  CosNotifyChannelAdminC.h \
  CosNotifyChannelAdminC.inl \
  CosNotifyCommC.h \
  CosNotifyCommC.inl \
  CosNotifyFilterC.h \
  CosNotifyFilterC.inl \
  Event_ForwarderC.h \
  Event_ForwarderC.inl \
  Notify/Notify_Extensions.h \
  Notify/notify_export.h \
  NotifyExtC.h \
  NotifyExtC.inl

pkgconfig_DATA += \
  TAO_CosNotification.pc

CLEANFILES += \
  TAO_CosNotification.pc

TAO_CosNotification.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosNotification.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosNotification.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosNotification.rc \
  TAO_CosNotification.pc.in


## Makefile.CosNotification_MC.am

if BUILD_EXCEPTIONS
if !BUILD_WINCE

BUILT_SOURCES += \
  Notify/MonitorControl/NotificationServiceMCC.cpp \
  Notify/MonitorControl/NotificationServiceMCC.h \
  Notify/MonitorControl/NotificationServiceMCC.inl \
  Notify/MonitorControl/NotificationServiceMCS.cpp \
  Notify/MonitorControl/NotificationServiceMCS.h \
  Notify/MonitorControl/NotificationServiceMCS.inl

CLEANFILES += \
  Notify/MonitorControl/NotificationServiceMC-stamp \
  Notify/MonitorControl/NotificationServiceMCC.cpp \
  Notify/MonitorControl/NotificationServiceMCC.h \
  Notify/MonitorControl/NotificationServiceMCC.inl \
  Notify/MonitorControl/NotificationServiceMCS.cpp \
  Notify/MonitorControl/NotificationServiceMCS.h \
  Notify/MonitorControl/NotificationServiceMCS.inl

Notify/MonitorControl/NotificationServiceMCC.cpp Notify/MonitorControl/NotificationServiceMCC.h Notify/MonitorControl/NotificationServiceMCC.inl Notify/MonitorControl/NotificationServiceMCS.cpp Notify/MonitorControl/NotificationServiceMCS.h Notify/MonitorControl/NotificationServiceMCS.inl: Notify/MonitorControl/NotificationServiceMC-stamp

Notify/MonitorControl/NotificationServiceMC-stamp: $(srcdir)/Notify/MonitorControl/NotificationServiceMC.idl $(TAO_IDL_DEP)
	mkdir -p Notify/MonitorControl
	$(TAO_IDL) $(TAO_IDLFLAGS) -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -I$(TAO_ROOT)/orbsvcs -o Notify/MonitorControl -Wb,export_macro=TAO_Notify_MC_Export -Wb,export_include=orbsvcs/Notify/MonitorControl/notify_mc_export.h $(srcdir)/Notify/MonitorControl/NotificationServiceMC.idl
	@touch $@

lib_LTLIBRARIES += libTAO_CosNotification_MC.la

libTAO_CosNotification_MC_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_NOTIFY_MC_BUILD_DLL

libTAO_CosNotification_MC_la_SOURCES = \
  Notify/MonitorControl/Control.cpp \
  Notify/MonitorControl/Control_Registry.cpp \
  Notify/MonitorControl/MonitorManager.cpp \
  Notify/MonitorControl/NotificationServiceMCC.cpp \
  Notify/MonitorControl/NotificationServiceMCS.cpp \
  Notify/MonitorControl/NotificationServiceMonitor_i.cpp \
  Notify/MonitorControl/Timestamp_Monitor.cpp

libTAO_CosNotification_MC_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNotification_MC_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_IORTable.la \
  $(TAO_BUILDDIR)/tao/libTAO_Monitor.la \
  $(ACE_BUILDDIR)/ace/Monitor_Control/libACE_Monitor_Control.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Notify/MonitorControl/Control.h \
  Notify/MonitorControl/Control_Registry.h \
  Notify/MonitorControl/MonitorManager.h \
  Notify/MonitorControl/NotificationServiceMC.idl \
  Notify/MonitorControl/NotificationServiceMCC.h \
  Notify/MonitorControl/NotificationServiceMCC.inl \
  Notify/MonitorControl/NotificationServiceMCS.h \
  Notify/MonitorControl/NotificationServiceMCS.inl \
  Notify/MonitorControl/NotificationServiceMonitor_i.h \
  Notify/MonitorControl/Timestamp_Monitor.h \
  Notify/MonitorControl/notify_mc_export.h

endif !BUILD_WINCE
endif BUILD_EXCEPTIONS

## Makefile.CosNotification_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosNotification_Skel.la

libTAO_CosNotification_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFY_SKEL_BUILD_DLL

libTAO_CosNotification_Skel_la_SOURCES = \
  CosNotificationS.cpp \
  CosNotifyChannelAdminS.cpp \
  CosNotifyCommS.cpp \
  CosNotifyFilterS.cpp \
  Event_ForwarderS.cpp \
  NotifyExtS.cpp

libTAO_CosNotification_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNotification_Skel_la_LIBADD = \
  libTAO_CosEvent_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosNotification.la \
  libTAO_CosEvent.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosNotificationS.h \
  CosNotificationS.inl \
  CosNotifyChannelAdminS.h \
  CosNotifyChannelAdminS.inl \
  CosNotifyCommS.h \
  CosNotifyCommS.inl \
  CosNotifyFilterS.h \
  CosNotifyFilterS.inl \
  Event_ForwarderS.h \
  Event_ForwarderS.inl \
  Notify/notify_skel_export.h \
  NotifyExtS.h \
  NotifyExtS.inl

pkgconfig_DATA += \
  TAO_CosNotification_Skel.pc

CLEANFILES += \
  TAO_CosNotification_Skel.pc

TAO_CosNotification_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosNotification_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosNotification_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosNotification_Skel.rc \
  TAO_CosNotification_Skel.pc.in


## Makefile.CosNotification_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosNotification_Serv.la

libTAO_CosNotification_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFY_SERV_BUILD_DLL

libTAO_CosNotification_Serv_la_SOURCES = \
  Notify/Admin.cpp \
  Notify/AdminProperties.cpp \
  Notify/Any/AnyEvent.cpp \
  Notify/Any/CosEC_ProxyPushConsumer.cpp \
  Notify/Any/CosEC_ProxyPushSupplier.cpp \
  Notify/Any/ProxyPushConsumer.cpp \
  Notify/Any/ProxyPushSupplier.cpp \
  Notify/Any/PushConsumer.cpp \
  Notify/Any/PushSupplier.cpp \
  Notify/Bit_Vector.cpp \
  Notify/Buffering_Strategy.cpp \
  Notify/Builder.cpp \
  Notify/Consumer.cpp \
  Notify/ConsumerAdmin.cpp \
  Notify/CosNotify_Initializer.cpp \
  Notify/CosNotify_Service.cpp \
  Notify/Default_Factory.cpp \
  Notify/Delivery_Request.cpp \
  Notify/ETCL_Filter.cpp \
  Notify/ETCL_FilterFactory.cpp \
  Notify/Event.cpp \
  Notify/EventChannel.cpp \
  Notify/EventChannelFactory.cpp \
  Notify/EventType.cpp \
  Notify/EventTypeSeq.cpp \
  Notify/Event_Manager.cpp \
  Notify/Event_Persistence_Factory.cpp \
  Notify/FilterAdmin.cpp \
  Notify/ID_Factory.cpp \
  Notify/Method_Request.cpp \
  Notify/Method_Request_Dispatch.cpp \
  Notify/Method_Request_Event.cpp \
  Notify/Method_Request_Lookup.cpp \
  Notify/Method_Request_Shutdown.cpp \
  Notify/Method_Request_Updates.cpp \
  Notify/Name_Value_Pair.cpp \
  Notify/Notify_Constraint_Interpreter.cpp \
  Notify/Notify_Constraint_Visitors.cpp \
  Notify/Notify_Default_CO_Factory.cpp \
  Notify/Notify_Default_Collection_Factory.cpp \
  Notify/Notify_Default_EMO_Factory.cpp \
  Notify/Notify_Default_POA_Factory.cpp \
  Notify/Notify_EventChannelFactory_i.cpp \
  Notify/Object.cpp \
  Notify/POA_Helper.cpp \
  Notify/Peer.cpp \
  Notify/Persistent_File_Allocator.cpp \
  Notify/Properties.cpp \
  Notify/PropertySeq.cpp \
  Notify/Property_Boolean.cpp \
  Notify/Proxy.cpp \
  Notify/ProxyConsumer.cpp \
  Notify/ProxySupplier.cpp \
  Notify/QoSProperties.cpp \
  Notify/Random_File.cpp \
  Notify/Reactive_Task.cpp \
  Notify/Reconnection_Registry.cpp \
  Notify/Refcountable.cpp \
  Notify/Routing_Slip.cpp \
  Notify/Routing_Slip_Persistence_Manager.cpp \
  Notify/Routing_Slip_Queue.cpp \
  Notify/Sequence/SequenceProxyPushConsumer.cpp \
  Notify/Sequence/SequenceProxyPushSupplier.cpp \
  Notify/Sequence/SequencePushConsumer.cpp \
  Notify/Sequence/SequencePushSupplier.cpp \
  Notify/Service.cpp \
  Notify/Standard_Event_Persistence.cpp \
  Notify/Structured/StructuredEvent.cpp \
  Notify/Structured/StructuredProxyPushConsumer.cpp \
  Notify/Structured/StructuredProxyPushSupplier.cpp \
  Notify/Structured/StructuredPushConsumer.cpp \
  Notify/Structured/StructuredPushSupplier.cpp \
  Notify/Subscription_Change_Worker.cpp \
  Notify/Supplier.cpp \
  Notify/SupplierAdmin.cpp \
  Notify/ThreadPool_Task.cpp \
  Notify/Timer_Queue.cpp \
  Notify/Timer_Reactor.cpp \
  Notify/Topology_Loader.cpp \
  Notify/Topology_Object.cpp \
  Notify/Topology_Saver.cpp \
  Notify/Validate_Client_Task.cpp \
  Notify/Worker_Task.cpp

libTAO_CosNotification_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNotification_Serv_la_LIBADD = \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNotification_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_CosNotification.la \
  libTAO_CosEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Notify/Admin.h \
  Notify/Admin.inl \
  Notify/AdminProperties.h \
  Notify/AdminProperties.inl \
  Notify/Any/AnyEvent.h \
  Notify/Any/CosEC_ProxyPushConsumer.h \
  Notify/Any/CosEC_ProxyPushSupplier.h \
  Notify/Any/ProxyPushConsumer.h \
  Notify/Any/ProxyPushSupplier.h \
  Notify/Any/PushConsumer.h \
  Notify/Any/PushSupplier.h \
  Notify/Bit_Vector.h \
  Notify/Buffering_Strategy.h \
  Notify/Builder.h \
  Notify/Consumer.h \
  Notify/Consumer.inl \
  Notify/ConsumerAdmin.h \
  Notify/CosNotify_Initializer.h \
  Notify/CosNotify_Service.h \
  Notify/Default_Factory.h \
  Notify/Delivery_Request.h \
  Notify/Delivery_Request.inl \
  Notify/ETCL_Filter.h \
  Notify/ETCL_FilterFactory.h \
  Notify/Event.h \
  Notify/Event.inl \
  Notify/EventChannel.h \
  Notify/EventChannelFactory.h \
  Notify/EventType.h \
  Notify/EventType.inl \
  Notify/EventTypeSeq.h \
  Notify/Event_Manager.h \
  Notify/Event_Persistence_Factory.h \
  Notify/FilterAdmin.h \
  Notify/FilterAdmin.inl \
  Notify/ID_Factory.h \
  Notify/ID_Factory.inl \
  Notify/Method_Request.h \
  Notify/Method_Request_Dispatch.h \
  Notify/Method_Request_Event.h \
  Notify/Method_Request_Lookup.h \
  Notify/Method_Request_Shutdown.h \
  Notify/Method_Request_Updates.h \
  Notify/Method_Request_Updates_T.cpp \
  Notify/Name_Value_Pair.h \
  Notify/Notify_Constraint_Interpreter.h \
  Notify/Notify_Constraint_Visitors.h \
  Notify/Notify_Default_CO_Factory.h \
  Notify/Notify_Default_Collection_Factory.h \
  Notify/Notify_Default_EMO_Factory.h \
  Notify/Notify_Default_POA_Factory.h \
  Notify/Notify_EventChannelFactory_i.h \
  Notify/Object.h \
  Notify/Object.inl \
  Notify/POA_Helper.h \
  Notify/POA_Helper.inl \
  Notify/Peer.h \
  Notify/Persistent_File_Allocator.h \
  Notify/Properties.h \
  Notify/Properties.inl \
  Notify/PropertySeq.h \
  Notify/PropertySeq.inl \
  Notify/Property_Boolean.h \
  Notify/Property_Boolean.inl \
  Notify/Proxy.h \
  Notify/Proxy.inl \
  Notify/ProxyConsumer.h \
  Notify/ProxyConsumer.inl \
  Notify/ProxyConsumer_T.cpp \
  Notify/ProxySupplier.h \
  Notify/ProxySupplier.inl \
  Notify/ProxySupplier_T.cpp \
  Notify/Proxy_T.cpp \
  Notify/QoSProperties.h \
  Notify/QoSProperties.inl \
  Notify/Random_File.h \
  Notify/Reactive_Task.h \
  Notify/Reactive_Task.inl \
  Notify/Reconnection_Registry.h \
  Notify/Refcountable.h \
  Notify/Routing_Slip.h \
  Notify/Routing_Slip_Persistence_Manager.h \
  Notify/Routing_Slip_Queue.h \
  Notify/Sequence/SequenceProxyPushConsumer.h \
  Notify/Sequence/SequenceProxyPushSupplier.h \
  Notify/Sequence/SequencePushConsumer.h \
  Notify/Sequence/SequencePushSupplier.h \
  Notify/Service.h \
  Notify/Standard_Event_Persistence.h \
  Notify/Structured/StructuredEvent.h \
  Notify/Structured/StructuredProxyPushConsumer.h \
  Notify/Structured/StructuredProxyPushSupplier.h \
  Notify/Structured/StructuredPushConsumer.h \
  Notify/Structured/StructuredPushSupplier.h \
  Notify/Subscription_Change_Worker.h \
  Notify/Supplier.h \
  Notify/Supplier.inl \
  Notify/SupplierAdmin.h \
  Notify/ThreadPool_Task.h \
  Notify/Timer_Queue.h \
  Notify/Timer_Reactor.h \
  Notify/Topology_Loader.h \
  Notify/Topology_Object.h \
  Notify/Topology_Object.inl \
  Notify/Topology_Saver.h \
  Notify/Validate_Client_Task.h \
  Notify/Worker_Task.h \
  Notify/notify_serv_export.h

pkgconfig_DATA += \
  TAO_CosNotification_Serv.pc

CLEANFILES += \
  TAO_CosNotification_Serv.pc

TAO_CosNotification_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosNotification_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosNotification_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosNotification_Serv.rc \
  TAO_CosNotification_Serv.pc.in


## Makefile.CosNotification_MC_Ext.am

if BUILD_EXCEPTIONS
if !BUILD_WINCE

BUILT_SOURCES += \
  Notify/MonitorControlExt/NotifyMonitoringExtC.cpp \
  Notify/MonitorControlExt/NotifyMonitoringExtC.h \
  Notify/MonitorControlExt/NotifyMonitoringExtC.inl \
  Notify/MonitorControlExt/NotifyMonitoringExtS.cpp \
  Notify/MonitorControlExt/NotifyMonitoringExtS.h \
  Notify/MonitorControlExt/NotifyMonitoringExtS.inl

CLEANFILES += \
  Notify/MonitorControlExt/NotifyMonitoringExt-stamp \
  Notify/MonitorControlExt/NotifyMonitoringExtC.cpp \
  Notify/MonitorControlExt/NotifyMonitoringExtC.h \
  Notify/MonitorControlExt/NotifyMonitoringExtC.inl \
  Notify/MonitorControlExt/NotifyMonitoringExtS.cpp \
  Notify/MonitorControlExt/NotifyMonitoringExtS.h \
  Notify/MonitorControlExt/NotifyMonitoringExtS.inl

Notify/MonitorControlExt/NotifyMonitoringExtC.cpp Notify/MonitorControlExt/NotifyMonitoringExtC.h Notify/MonitorControlExt/NotifyMonitoringExtC.inl Notify/MonitorControlExt/NotifyMonitoringExtS.cpp Notify/MonitorControlExt/NotifyMonitoringExtS.h Notify/MonitorControlExt/NotifyMonitoringExtS.inl: Notify/MonitorControlExt/NotifyMonitoringExt-stamp

Notify/MonitorControlExt/NotifyMonitoringExt-stamp: $(srcdir)/Notify/MonitorControlExt/NotifyMonitoringExt.idl $(TAO_IDL_DEP)
	mkdir -p Notify/MonitorControlExt
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -o Notify/MonitorControlExt -Wb,export_macro=TAO_Notify_MC_Ext_Export -Wb,export_include=orbsvcs/Notify/MonitorControlExt/notify_mc_ext_export.h $(srcdir)/Notify/MonitorControlExt/NotifyMonitoringExt.idl
	@touch $@

lib_LTLIBRARIES += libTAO_CosNotification_MC_Ext.la

libTAO_CosNotification_MC_Ext_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFY_MC_EXT_BUILD_DLL

libTAO_CosNotification_MC_Ext_la_SOURCES = \
  Notify/MonitorControlExt/MC_Default_Factory.cpp \
  Notify/MonitorControlExt/MC_Notify_Service.cpp \
  Notify/MonitorControlExt/MonitorConsumerAdmin.cpp \
  Notify/MonitorControlExt/MonitorEventChannel.cpp \
  Notify/MonitorControlExt/MonitorEventChannelFactory.cpp \
  Notify/MonitorControlExt/MonitorSupplierAdmin.cpp \
  Notify/MonitorControlExt/NotifyMonitoringExtC.cpp \
  Notify/MonitorControlExt/NotifyMonitoringExtS.cpp

libTAO_CosNotification_MC_Ext_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosNotification_MC_Ext_la_LIBADD = \
  libTAO_CosNotification_MC.la \
  $(TAO_BUILDDIR)/tao/libTAO_Monitor.la \
  $(ACE_BUILDDIR)/ace/Monitor_Control/libACE_Monitor_Control.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORTable.la \
  libTAO_CosNotification_Serv.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  libTAO_CosNotification_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_CosNotification.la \
  libTAO_CosEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Notify/MonitorControlExt/MC_Default_Factory.h \
  Notify/MonitorControlExt/MC_Notify_Service.h \
  Notify/MonitorControlExt/MonitorConsumerAdmin.h \
  Notify/MonitorControlExt/MonitorEventChannel.h \
  Notify/MonitorControlExt/MonitorEventChannelFactory.h \
  Notify/MonitorControlExt/MonitorSupplierAdmin.h \
  Notify/MonitorControlExt/NotifyMonitoringExt.idl \
  Notify/MonitorControlExt/NotifyMonitoringExtC.h \
  Notify/MonitorControlExt/NotifyMonitoringExtC.inl \
  Notify/MonitorControlExt/NotifyMonitoringExtS.h \
  Notify/MonitorControlExt/NotifyMonitoringExtS.inl \
  Notify/MonitorControlExt/notify_mc_ext_export.h

endif !BUILD_WINCE
endif BUILD_EXCEPTIONS

## Makefile.CosNotification_Persist.am

if BUILD_ACEXML
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_CosNotification_Persist.la

libTAO_CosNotification_Persist_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -I$(ACE_ROOT)/ACEXML/common \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFY_PERSIST_BUILD_DLL

if BUILD_ZLIB
if BUILD_ZZIP
libTAO_CosNotification_Persist_la_CPPFLAGS += \
  $(ACE_ZZIP_CPPFLAGS) \
  $(ACE_ZLIB_CPPFLAGS)
endif BUILD_ZZIP
endif BUILD_ZLIB

libTAO_CosNotification_Persist_la_SOURCES = \
  Notify/XML_Loader.cpp \
  Notify/XML_Saver.cpp \
  Notify/XML_Topology_Factory.cpp

libTAO_CosNotification_Persist_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

if BUILD_ZLIB
if BUILD_ZZIP
libTAO_CosNotification_Persist_la_LDFLAGS += \
  $(ACE_ZZIP_LDFLAGS) \
  $(ACE_ZLIB_LDFLAGS)
endif BUILD_ZZIP
endif BUILD_ZLIB

libTAO_CosNotification_Persist_la_LIBADD = \
  $(ACE_BUILDDIR)/ACEXML/parser/parser/libACEXML_Parser.la \
  $(ACE_BUILDDIR)/ACEXML/common/libACEXML.la \
  libTAO_CosNotification_Serv.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  libTAO_CosNotification_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_CosNotification.la \
  libTAO_CosEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

if BUILD_ZLIB
if BUILD_ZZIP
libTAO_CosNotification_Persist_la_LIBADD += \
  $(ACE_ZZIP_LIBS) \
  $(ACE_ZLIB_LIBS)
endif BUILD_ZZIP
endif BUILD_ZLIB

nobase_include_HEADERS += \
  Notify/XML_Loader.h \
  Notify/XML_Saver.h \
  Notify/XML_Topology_Factory.h \
  Notify/notify_persist_export.h

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_ACEXML

## Makefile.CosTime.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  TimeServiceC.cpp \
  TimeServiceC.h \
  TimeServiceC.inl \
  TimeServiceS.cpp \
  TimeServiceS.h \
  TimeServiceS.inl

CLEANFILES += \
  TimeService-stamp \
  TimeServiceC.cpp \
  TimeServiceC.h \
  TimeServiceC.inl \
  TimeServiceS.cpp \
  TimeServiceS.h \
  TimeServiceS.inl

TimeServiceC.cpp TimeServiceC.h TimeServiceC.inl TimeServiceS.cpp TimeServiceS.h TimeServiceS.inl: TimeService-stamp

TimeService-stamp: $(srcdir)/TimeService.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Time_Export -Wb,export_include=orbsvcs/Time/time_export.h $(srcdir)/TimeService.idl
	@touch $@

lib_LTLIBRARIES += libTAO_CosTime.la

libTAO_CosTime_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_TIME_BUILD_DLL

libTAO_CosTime_la_SOURCES = \
  Time/TAO_TIO.cpp \
  Time/TAO_Time_Service_Clerk.cpp \
  Time/TAO_Time_Service_Server.cpp \
  Time/TAO_UTO.cpp \
  Time/Timer_Helper.cpp \
  TimeServiceC.cpp \
  TimeServiceS.cpp

libTAO_CosTime_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosTime_la_LIBADD = \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Time/TAO_TIO.h \
  Time/TAO_Time_Service_Clerk.h \
  Time/TAO_Time_Service_Server.h \
  Time/TAO_UTO.h \
  Time/Timer_Helper.h \
  Time/time_export.h \
  TimeService.idl \
  TimeServiceC.h \
  TimeServiceC.inl \
  TimeServiceS.h \
  TimeServiceS.inl

pkgconfig_DATA += \
  TAO_CosTime.pc

CLEANFILES += \
  TAO_CosTime.pc

TAO_CosTime.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosTime.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosTime.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosTime.rc \
  TAO_CosTime.pc.in


## Makefile.CosTrading_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  CosTradingC.cpp \
  CosTradingC.h \
  CosTradingC.inl \
  CosTradingS.cpp \
  CosTradingS.h \
  CosTradingS.inl

CLEANFILES += \
  CosTrading-stamp \
  CosTradingC.cpp \
  CosTradingC.h \
  CosTradingC.inl \
  CosTradingS.cpp \
  CosTradingS.h \
  CosTradingS.inl

CosTradingC.cpp CosTradingC.h CosTradingC.inl CosTradingS.cpp CosTradingS.h CosTradingS.inl: CosTrading-stamp

CosTrading-stamp: $(srcdir)/CosTrading.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Trading_Export -Wb,stub_export_include=orbsvcs/Trader/trading_export.h -Wb,skel_export_macro=TAO_Trading_Skel_Export -Wb,skel_export_include=orbsvcs/Trader/trading_skel_export.h $(srcdir)/CosTrading.idl
	@touch $@

BUILT_SOURCES += \
  CosTradingReposC.cpp \
  CosTradingReposC.h \
  CosTradingReposC.inl \
  CosTradingReposS.cpp \
  CosTradingReposS.h \
  CosTradingReposS.inl

CLEANFILES += \
  CosTradingRepos-stamp \
  CosTradingReposC.cpp \
  CosTradingReposC.h \
  CosTradingReposC.inl \
  CosTradingReposS.cpp \
  CosTradingReposS.h \
  CosTradingReposS.inl

CosTradingReposC.cpp CosTradingReposC.h CosTradingReposC.inl CosTradingReposS.cpp CosTradingReposS.h CosTradingReposS.inl: CosTradingRepos-stamp

CosTradingRepos-stamp: $(srcdir)/CosTradingRepos.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Trading_Export -Wb,stub_export_include=orbsvcs/Trader/trading_export.h -Wb,skel_export_macro=TAO_Trading_Skel_Export -Wb,skel_export_include=orbsvcs/Trader/trading_skel_export.h $(srcdir)/CosTradingRepos.idl
	@touch $@

BUILT_SOURCES += \
  CosTradingDynamicC.cpp \
  CosTradingDynamicC.h \
  CosTradingDynamicC.inl \
  CosTradingDynamicS.cpp \
  CosTradingDynamicS.h \
  CosTradingDynamicS.inl

CLEANFILES += \
  CosTradingDynamic-stamp \
  CosTradingDynamicC.cpp \
  CosTradingDynamicC.h \
  CosTradingDynamicC.inl \
  CosTradingDynamicS.cpp \
  CosTradingDynamicS.h \
  CosTradingDynamicS.inl

CosTradingDynamicC.cpp CosTradingDynamicC.h CosTradingDynamicC.inl CosTradingDynamicS.cpp CosTradingDynamicS.h CosTradingDynamicS.inl: CosTradingDynamic-stamp

CosTradingDynamic-stamp: $(srcdir)/CosTradingDynamic.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Trading_Export -Wb,stub_export_include=orbsvcs/Trader/trading_export.h -Wb,skel_export_macro=TAO_Trading_Skel_Export -Wb,skel_export_include=orbsvcs/Trader/trading_skel_export.h $(srcdir)/CosTradingDynamic.idl
	@touch $@

nobase_include_HEADERS += \
  CosTrading.idl \
  CosTradingDynamic.idl \
  CosTradingRepos.idl

endif BUILD_EXCEPTIONS

## Makefile.CosTrading.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosTrading.la

libTAO_CosTrading_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_TRADING_BUILD_DLL

libTAO_CosTrading_la_SOURCES = \
  CosTradingC.cpp \
  CosTradingDynamicC.cpp \
  CosTradingReposC.cpp

libTAO_CosTrading_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosTrading_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosTradingC.h \
  CosTradingC.inl \
  CosTradingDynamicC.h \
  CosTradingDynamicC.inl \
  CosTradingReposC.h \
  CosTradingReposC.inl \
  Trader/trading_export.h

pkgconfig_DATA += \
  TAO_CosTrading.pc

CLEANFILES += \
  TAO_CosTrading.pc

TAO_CosTrading.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosTrading.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosTrading.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosTrading.rc \
  TAO_CosTrading.pc.in


## Makefile.CosTrading_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosTrading_Skel.la

libTAO_CosTrading_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_TRADING_SKEL_BUILD_DLL

libTAO_CosTrading_Skel_la_SOURCES = \
  CosTradingDynamicS.cpp \
  CosTradingReposS.cpp \
  CosTradingS.cpp

libTAO_CosTrading_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosTrading_Skel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosTrading.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CosTradingDynamicS.h \
  CosTradingDynamicS.inl \
  CosTradingReposS.h \
  CosTradingReposS.inl \
  CosTradingS.h \
  CosTradingS.inl \
  Trader/trading_skel_export.h

pkgconfig_DATA += \
  TAO_CosTrading_Skel.pc

CLEANFILES += \
  TAO_CosTrading_Skel.pc

TAO_CosTrading_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosTrading_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosTrading_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosTrading_Skel.rc \
  TAO_CosTrading_Skel.pc.in


## Makefile.CosTrading_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_CosTrading_Serv.la

libTAO_CosTrading_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_TRADING_SERV_BUILD_DLL

libTAO_CosTrading_Serv_la_SOURCES = \
  Trader/Constraint_Interpreter.cpp \
  Trader/Constraint_Nodes.cpp \
  Trader/Constraint_Visitors.cpp \
  Trader/Constraint_l.cpp \
  Trader/Constraint_y.cpp \
  Trader/Interpreter.cpp \
  Trader/Interpreter_Utils.cpp \
  Trader/Offer_Database.cpp \
  Trader/Offer_Iterators.cpp \
  Trader/Service_Type_Repository.cpp \
  Trader/Trader.cpp \
  Trader/Trader_Constraint_Visitors.cpp \
  Trader/Trader_Interfaces.cpp \
  Trader/Trader_Utils.cpp \
  Trader/Trading_Loader.cpp

libTAO_CosTrading_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_CosTrading_Serv_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_IORTable.la \
  $(TAO_BUILDDIR)/tao/libTAO_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosTrading_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosTrading.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Trader/Constraint_Interpreter.h \
  Trader/Constraint_Nodes.h \
  Trader/Constraint_Nodes.inl \
  Trader/Constraint_Visitors.h \
  Trader/Interpreter.h \
  Trader/Interpreter_Utils.h \
  Trader/Interpreter_Utils_T.cpp \
  Trader/Offer_Database.h \
  Trader/Offer_Iterators.h \
  Trader/Offer_Iterators_T.cpp \
  Trader/Service_Type_Repository.h \
  Trader/Trader.h \
  Trader/Trader_Constraint_Visitors.h \
  Trader/Trader_Interfaces.h \
  Trader/Trader_T.cpp \
  Trader/Trader_Utils.h \
  Trader/Trading_Loader.h \
  Trader/trading_serv_export.h

pkgconfig_DATA += \
  TAO_CosTrading_Serv.pc

CLEANFILES += \
  TAO_CosTrading_Serv.pc

TAO_CosTrading_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_CosTrading_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_CosTrading_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  CosTrading_Serv.rc \
  TAO_CosTrading_Serv.pc.in


## Makefile.DsLogAdmin_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  DsLogAdminC.cpp \
  DsLogAdminC.h \
  DsLogAdminC.inl \
  DsLogAdminS.cpp \
  DsLogAdminS.h \
  DsLogAdminS.inl

CLEANFILES += \
  DsLogAdmin-stamp \
  DsLogAdminC.cpp \
  DsLogAdminC.h \
  DsLogAdminC.inl \
  DsLogAdminS.cpp \
  DsLogAdminS.h \
  DsLogAdminS.inl

DsLogAdminC.cpp DsLogAdminC.h DsLogAdminC.inl DsLogAdminS.cpp DsLogAdminS.h DsLogAdminS.inl: DsLogAdmin-stamp

DsLogAdmin-stamp: $(srcdir)/DsLogAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Log_Export -Wb,stub_export_include=orbsvcs/Log/log_export.h -Wb,skel_export_macro=TAO_Log_Skel_Export -Wb,skel_export_include=orbsvcs/Log/log_skel_export.h $(srcdir)/DsLogAdmin.idl
	@touch $@

BUILT_SOURCES += \
  DsLogNotificationC.cpp \
  DsLogNotificationC.h \
  DsLogNotificationC.inl \
  DsLogNotificationS.cpp \
  DsLogNotificationS.h \
  DsLogNotificationS.inl

CLEANFILES += \
  DsLogNotification-stamp \
  DsLogNotificationC.cpp \
  DsLogNotificationC.h \
  DsLogNotificationC.inl \
  DsLogNotificationS.cpp \
  DsLogNotificationS.h \
  DsLogNotificationS.inl

DsLogNotificationC.cpp DsLogNotificationC.h DsLogNotificationC.inl DsLogNotificationS.cpp DsLogNotificationS.h DsLogNotificationS.inl: DsLogNotification-stamp

DsLogNotification-stamp: $(srcdir)/DsLogNotification.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_Log_Export -Wb,stub_export_include=orbsvcs/Log/log_export.h -Wb,skel_export_macro=TAO_Log_Skel_Export -Wb,skel_export_include=orbsvcs/Log/log_skel_export.h $(srcdir)/DsLogNotification.idl
	@touch $@

nobase_include_HEADERS += \
  DsLogAdmin.idl \
  DsLogNotification.idl

endif BUILD_EXCEPTIONS

## Makefile.DsLogAdmin.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsLogAdmin.la

libTAO_DsLogAdmin_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_LOG_BUILD_DLL

libTAO_DsLogAdmin_la_SOURCES = \
  DsLogAdminC.cpp \
  DsLogNotificationC.cpp

libTAO_DsLogAdmin_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsLogAdmin_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  DsLogAdminC.h \
  DsLogAdminC.inl \
  DsLogNotificationC.h \
  DsLogNotificationC.inl \
  Log/log_export.h

pkgconfig_DATA += \
  TAO_DsLogAdmin.pc

CLEANFILES += \
  TAO_DsLogAdmin.pc

TAO_DsLogAdmin.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsLogAdmin.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsLogAdmin.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  DsLogAdmin.rc \
  TAO_DsLogAdmin.pc.in


## Makefile.DsEventLogAdmin_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  DsEventLogAdminC.cpp \
  DsEventLogAdminC.h \
  DsEventLogAdminC.inl \
  DsEventLogAdminS.cpp \
  DsEventLogAdminS.h \
  DsEventLogAdminS.inl

CLEANFILES += \
  DsEventLogAdmin-stamp \
  DsEventLogAdminC.cpp \
  DsEventLogAdminC.h \
  DsEventLogAdminC.inl \
  DsEventLogAdminS.cpp \
  DsEventLogAdminS.h \
  DsEventLogAdminS.inl

DsEventLogAdminC.cpp DsEventLogAdminC.h DsEventLogAdminC.inl DsEventLogAdminS.cpp DsEventLogAdminS.h DsEventLogAdminS.inl: DsEventLogAdmin-stamp

DsEventLogAdmin-stamp: $(srcdir)/DsEventLogAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_EventLog_Export -Wb,stub_export_include=orbsvcs/Log/eventlog_export.h -Wb,skel_export_macro=TAO_EventLog_Skel_Export -Wb,skel_export_include=orbsvcs/Log/eventlog_skel_export.h $(srcdir)/DsEventLogAdmin.idl
	@touch $@

nobase_include_HEADERS += \
  DsEventLogAdmin.idl

endif BUILD_EXCEPTIONS

## Makefile.DsEventLogAdmin.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsEventLogAdmin.la

libTAO_DsEventLogAdmin_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_EVENTLOG_BUILD_DLL

libTAO_DsEventLogAdmin_la_SOURCES = \
  DsEventLogAdminC.cpp

libTAO_DsEventLogAdmin_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsEventLogAdmin_la_LIBADD = \
  libTAO_CosEvent.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  DsEventLogAdminC.h \
  DsEventLogAdminC.inl \
  Log/eventlog_export.h

pkgconfig_DATA += \
  TAO_DsEventLogAdmin.pc

CLEANFILES += \
  TAO_DsEventLogAdmin.pc

TAO_DsEventLogAdmin.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsEventLogAdmin.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsEventLogAdmin.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  DsEventLogAdmin.rc \
  TAO_DsEventLogAdmin.pc.in


## Makefile.DsLogAdmin_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsLogAdmin_Skel.la

libTAO_DsLogAdmin_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_LOG_SKEL_BUILD_DLL

libTAO_DsLogAdmin_Skel_la_SOURCES = \
  DsLogAdminS.cpp \
  DsLogNotificationS.cpp

libTAO_DsLogAdmin_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsLogAdmin_Skel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  DsLogAdminS.h \
  DsLogAdminS.inl \
  DsLogNotificationS.h \
  DsLogNotificationS.inl \
  Log/log_skel_export.h

pkgconfig_DATA += \
  TAO_DsLogAdmin_Skel.pc

CLEANFILES += \
  TAO_DsLogAdmin_Skel.pc

TAO_DsLogAdmin_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsLogAdmin_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsLogAdmin_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_DsLogAdmin_Skel.pc.in


## Makefile.DsLogAdmin_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsLogAdmin_Serv.la

libTAO_DsLogAdmin_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_LOG_SERV_BUILD_DLL

libTAO_DsLogAdmin_Serv_la_SOURCES = \
  Log/BasicLogFactory_i.cpp \
  Log/BasicLog_i.cpp \
  Log/Hash_Iterator_i.cpp \
  Log/Hash_LogRecordStore.cpp \
  Log/Hash_LogStore.cpp \
  Log/Hash_Persistence_Strategy.cpp \
  Log/Iterator_i.cpp \
  Log/LogActivator.cpp \
  Log/LogMgr_i.cpp \
  Log/LogNotification.cpp \
  Log/LogRecordStore.cpp \
  Log/Log_Compaction_Handler.cpp \
  Log/Log_Constraint_Interpreter.cpp \
  Log/Log_Constraint_Visitors.cpp \
  Log/Log_Flush_Handler.cpp \
  Log/Log_i.cpp

libTAO_DsLogAdmin_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsLogAdmin_Serv_la_LIBADD = \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_DsLogAdmin_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Log/BasicLogFactory_i.h \
  Log/BasicLog_i.h \
  Log/Hash_Iterator_i.h \
  Log/Hash_LogRecordStore.h \
  Log/Hash_LogStore.h \
  Log/Hash_Persistence_Strategy.h \
  Log/Iterator_i.h \
  Log/LogActivator.h \
  Log/LogMgr_i.h \
  Log/LogNotification.h \
  Log/LogRecordStore.h \
  Log/LogStore.h \
  Log/Log_Compaction_Handler.h \
  Log/Log_Constraint_Interpreter.h \
  Log/Log_Constraint_Visitors.h \
  Log/Log_Flush_Handler.h \
  Log/Log_Persistence_Strategy.h \
  Log/Log_i.h \
  Log/log_serv_export.h

pkgconfig_DATA += \
  TAO_DsLogAdmin_Serv.pc

CLEANFILES += \
  TAO_DsLogAdmin_Serv.pc

TAO_DsLogAdmin_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsLogAdmin_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsLogAdmin_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_DsLogAdmin_Serv.pc.in


## Makefile.DsEventLogAdmin_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsEventLogAdmin_Skel.la

libTAO_DsEventLogAdmin_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_EVENTLOG_SKEL_BUILD_DLL

libTAO_DsEventLogAdmin_Skel_la_SOURCES = \
  DsEventLogAdminS.cpp

libTAO_DsEventLogAdmin_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsEventLogAdmin_Skel_la_LIBADD = \
  libTAO_CosEvent_Skel.la \
  libTAO_DsLogAdmin_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_DsEventLogAdmin.la \
  libTAO_CosEvent.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  DsEventLogAdminS.h \
  DsEventLogAdminS.inl \
  Log/eventlog_skel_export.h

pkgconfig_DATA += \
  TAO_DsEventLogAdmin_Skel.pc

CLEANFILES += \
  TAO_DsEventLogAdmin_Skel.pc

TAO_DsEventLogAdmin_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsEventLogAdmin_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsEventLogAdmin_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_DsEventLogAdmin_Skel.pc.in


## Makefile.DsEventLogAdmin_Serv.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsEventLogAdmin_Serv.la

libTAO_DsEventLogAdmin_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_EVENTLOG_SERV_BUILD_DLL

libTAO_DsEventLogAdmin_Serv_la_SOURCES = \
  Log/EventLogConsumer.cpp \
  Log/EventLogFactory_i.cpp \
  Log/EventLogNotification.cpp \
  Log/EventLog_i.cpp

libTAO_DsEventLogAdmin_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsEventLogAdmin_Serv_la_LIBADD = \
  libTAO_CosEvent_Serv.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_IFR_Client.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicInterface.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  libTAO_DsLogAdmin_Serv.la \
  $(TAO_BUILDDIR)/tao/libTAO_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  libTAO_Svc_Utils.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_DsEventLogAdmin_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_DsLogAdmin_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_DsEventLogAdmin.la \
  libTAO_CosEvent.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Log/EventLogConsumer.h \
  Log/EventLogFactory_i.h \
  Log/EventLogNotification.h \
  Log/EventLog_i.h \
  Log/eventlog_serv_export.h

pkgconfig_DATA += \
  TAO_DsEventLogAdmin_Serv.pc

CLEANFILES += \
  TAO_DsEventLogAdmin_Serv.pc

TAO_DsEventLogAdmin_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsEventLogAdmin_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsEventLogAdmin_Serv.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  TAO_DsEventLogAdmin_Serv.pc.in


## Makefile.DsNotifyLogAdmin_IDL.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  DsNotifyLogAdminC.cpp \
  DsNotifyLogAdminC.h \
  DsNotifyLogAdminC.inl \
  DsNotifyLogAdminS.cpp \
  DsNotifyLogAdminS.h \
  DsNotifyLogAdminS.inl

CLEANFILES += \
  DsNotifyLogAdmin-stamp \
  DsNotifyLogAdminC.cpp \
  DsNotifyLogAdminC.h \
  DsNotifyLogAdminC.inl \
  DsNotifyLogAdminS.cpp \
  DsNotifyLogAdminS.h \
  DsNotifyLogAdminS.inl

DsNotifyLogAdminC.cpp DsNotifyLogAdminC.h DsNotifyLogAdminC.inl DsNotifyLogAdminS.cpp DsNotifyLogAdminS.h DsNotifyLogAdminS.inl: DsNotifyLogAdmin-stamp

DsNotifyLogAdmin-stamp: $(srcdir)/DsNotifyLogAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_NotifyLog_Export -Wb,stub_export_include=orbsvcs/Log/notifylog_export.h -Wb,skel_export_macro=TAO_NotifyLog_Skel_Export -Wb,skel_export_include=orbsvcs/Log/notifylog_skel_export.h $(srcdir)/DsNotifyLogAdmin.idl
	@touch $@

nobase_include_HEADERS += \
  DsNotifyLogAdmin.idl

endif BUILD_EXCEPTIONS

## Makefile.DsNotifyLogAdmin.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsNotifyLogAdmin.la

libTAO_DsNotifyLogAdmin_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFYLOG_BUILD_DLL

libTAO_DsNotifyLogAdmin_la_SOURCES = \
  DsNotifyLogAdminC.cpp

libTAO_DsNotifyLogAdmin_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsNotifyLogAdmin_la_LIBADD = \
  libTAO_CosNotification.la \
  libTAO_DsEventLogAdmin.la \
  libTAO_CosEvent.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  DsNotifyLogAdminC.h \
  DsNotifyLogAdminC.inl \
  Log/notifylog_export.h

pkgconfig_DATA += \
  TAO_DsNotifyLogAdmin.pc

CLEANFILES += \
  TAO_DsNotifyLogAdmin.pc

TAO_DsNotifyLogAdmin.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsNotifyLogAdmin.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsNotifyLogAdmin.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  DsNotifyLogAdmin.rc \
  TAO_DsNotifyLogAdmin.pc.in


## Makefile.DsNotifyLogAdmin_Skel.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsNotifyLogAdmin_Skel.la

libTAO_DsNotifyLogAdmin_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFYLOG_SKEL_BUILD_DLL

libTAO_DsNotifyLogAdmin_Skel_la_SOURCES = \
  DsNotifyLogAdminS.cpp

libTAO_DsNotifyLogAdmin_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsNotifyLogAdmin_Skel_la_LIBADD = \
  libTAO_CosNotification_Skel.la \
  libTAO_DsEventLogAdmin_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_DsLogAdmin_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_DsNotifyLogAdmin.la \
  libTAO_CosNotification.la \
  libTAO_DsEventLogAdmin.la \
  libTAO_CosEvent.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  DsNotifyLogAdminS.h \
  DsNotifyLogAdminS.inl \
  Log/notifylog_skel_export.h

pkgconfig_DATA += \
  TAO_DsNotifyLogAdmin_Skel.pc

CLEANFILES += \
  TAO_DsNotifyLogAdmin_Skel.pc

TAO_DsNotifyLogAdmin_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsNotifyLogAdmin_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsNotifyLogAdmin_Skel.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_DsNotifyLogAdmin_Skel.pc.in


## Makefile.DsNotifyLogAdmin_Serv.am

if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_DsNotifyLogAdmin_Serv.la

libTAO_DsNotifyLogAdmin_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_NOTIFYLOG_SERV_BUILD_DLL

libTAO_DsNotifyLogAdmin_Serv_la_SOURCES = \
  Log/NotifyLogConsumer.cpp \
  Log/NotifyLogFactory_i.cpp \
  Log/NotifyLogNotification.cpp \
  Log/NotifyLog_i.cpp

libTAO_DsNotifyLogAdmin_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_DsNotifyLogAdmin_Serv_la_LIBADD = \
  libTAO_DsLogAdmin_Serv.la \
  $(TAO_BUILDDIR)/tao/libTAO_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  libTAO_Svc_Utils.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_DsNotifyLogAdmin_Skel.la \
  libTAO_CosNotification_Skel.la \
  libTAO_DsEventLogAdmin_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_DsLogAdmin_Skel.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_DsNotifyLogAdmin.la \
  libTAO_CosNotification.la \
  libTAO_DsEventLogAdmin.la \
  libTAO_CosEvent.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Log/NotifyLogConsumer.h \
  Log/NotifyLogFactory_i.h \
  Log/NotifyLogNotification.h \
  Log/NotifyLog_i.h \
  Log/notifylog_serv_export.h

pkgconfig_DATA += \
  TAO_DsNotifyLogAdmin_Serv.pc

CLEANFILES += \
  TAO_DsNotifyLogAdmin_Serv.pc

TAO_DsNotifyLogAdmin_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_DsNotifyLogAdmin_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_DsNotifyLogAdmin_Serv.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  TAO_DsNotifyLogAdmin_Serv.pc.in


## Makefile.FTORB_Utils.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  FT_CORBA_ORBC.cpp \
  FT_CORBA_ORBC.h \
  FT_CORBA_ORBC.inl \
  FT_CORBA_ORBS.cpp \
  FT_CORBA_ORBS.h \
  FT_CORBA_ORBS.inl

CLEANFILES += \
  FT_CORBA_ORB-stamp \
  FT_CORBA_ORBC.cpp \
  FT_CORBA_ORBC.h \
  FT_CORBA_ORBC.inl \
  FT_CORBA_ORBS.cpp \
  FT_CORBA_ORBS.h \
  FT_CORBA_ORBS.inl

FT_CORBA_ORBC.cpp FT_CORBA_ORBC.h FT_CORBA_ORBC.inl FT_CORBA_ORBS.cpp FT_CORBA_ORBS.h FT_CORBA_ORBS.inl: FT_CORBA_ORB-stamp

FT_CORBA_ORB-stamp: $(srcdir)/FT_CORBA_ORB.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,skel_export_include=tao/PortableServer/PolicyS.h -Wb,export_macro=TAO_FT_ORB_Utils_Export -Wb,export_include=orbsvcs/FaultTolerance/FT_ORB_Utils_export.h $(srcdir)/FT_CORBA_ORB.idl
	@touch $@

lib_LTLIBRARIES += libTAO_FTORB_Utils.la

libTAO_FTORB_Utils_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_FT_ORB_UTILS_BUILD_DLL

libTAO_FTORB_Utils_la_SOURCES = \
  FT_CORBA_ORBC.cpp \
  FT_CORBA_ORBS.cpp \
  FaultTolerance/FT_IOGR_Property.cpp

libTAO_FTORB_Utils_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FTORB_Utils_la_LIBADD = \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Channel_Clients_T.cpp \
  FT_CORBA_ORB.idl \
  FT_CORBA_ORBC.h \
  FT_CORBA_ORBC.inl \
  FT_CORBA_ORBS.h \
  FT_CORBA_ORBS.inl \
  FaultTolerance/FT_IOGR_Property.h \
  FaultTolerance/FT_IOGR_Property.inl \
  FaultTolerance/FT_ORB_Utils_export.h

pkgconfig_DATA += \
  TAO_FTORB_Utils.pc

CLEANFILES += \
  TAO_FTORB_Utils.pc

TAO_FTORB_Utils.pc: ${top_builddir}/config.status ${srcdir}/TAO_FTORB_Utils.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_FTORB_Utils.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  TAO_FTORB_Utils.pc.in


## Makefile.FTRT_ClientORB.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_FTRT_ClientORB.la

libTAO_FTRT_ClientORB_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_FTRT_BUILD_DLL

libTAO_FTRT_ClientORB_la_SOURCES = \
  FtRtEvent/ClientORB/FTRT_ClientORB_Initializer.cpp \
  FtRtEvent/ClientORB/FTRT_ClientORB_Interceptor.cpp \
  FtRtEvent/ClientORB/FTRT_ClientORB_Loader.cpp

libTAO_FTRT_ClientORB_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FTRT_ClientORB_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  FtRtEvent/ClientORB/FTRT_ClientORB_Initializer.h \
  FtRtEvent/ClientORB/FTRT_ClientORB_Interceptor.h \
  FtRtEvent/ClientORB/FTRT_ClientORB_Loader.h

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

## Makefile.RTEvent.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  RtecDefaultEventDataC.cpp \
  RtecDefaultEventDataC.h \
  RtecDefaultEventDataC.inl \
  RtecDefaultEventDataS_T.cpp

CLEANFILES += \
  RtecDefaultEventData-stamp \
  RtecDefaultEventDataC.cpp \
  RtecDefaultEventDataC.h \
  RtecDefaultEventDataC.inl \
  RtecDefaultEventDataS_T.cpp

RtecDefaultEventDataC.cpp RtecDefaultEventDataC.h RtecDefaultEventDataC.inl RtecDefaultEventDataS_T.cpp: RtecDefaultEventData-stamp

RtecDefaultEventData-stamp: $(srcdir)/RtecDefaultEventData.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GT -Wb,stub_export_macro=TAO_RTEvent_Export -Wb,stub_export_include=orbsvcs/Event/event_export.h -Wb,skel_export_macro=TAO_RTEvent_Skel_Export -Wb,skel_export_include=orbsvcs/Event/event_skel_export.h $(srcdir)/RtecDefaultEventData.idl
	@touch $@

BUILT_SOURCES += \
  RtecEventCommC.cpp \
  RtecEventCommC.h \
  RtecEventCommC.inl \
  RtecEventCommS_T.cpp

CLEANFILES += \
  RtecEventComm-stamp \
  RtecEventCommC.cpp \
  RtecEventCommC.h \
  RtecEventCommC.inl \
  RtecEventCommS_T.cpp

RtecEventCommC.cpp RtecEventCommC.h RtecEventCommC.inl RtecEventCommS_T.cpp: RtecEventComm-stamp

RtecEventComm-stamp: $(srcdir)/RtecEventComm.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GT -Wb,stub_export_macro=TAO_RTEvent_Export -Wb,stub_export_include=orbsvcs/Event/event_export.h -Wb,skel_export_macro=TAO_RTEvent_Skel_Export -Wb,skel_export_include=orbsvcs/Event/event_skel_export.h $(srcdir)/RtecEventComm.idl
	@touch $@

BUILT_SOURCES += \
  RtecEventChannelAdminC.cpp \
  RtecEventChannelAdminC.h \
  RtecEventChannelAdminC.inl \
  RtecEventChannelAdminS_T.cpp

CLEANFILES += \
  RtecEventChannelAdmin-stamp \
  RtecEventChannelAdminC.cpp \
  RtecEventChannelAdminC.h \
  RtecEventChannelAdminC.inl \
  RtecEventChannelAdminS_T.cpp

RtecEventChannelAdminC.cpp RtecEventChannelAdminC.h RtecEventChannelAdminC.inl RtecEventChannelAdminS_T.cpp: RtecEventChannelAdmin-stamp

RtecEventChannelAdmin-stamp: $(srcdir)/RtecEventChannelAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GT -Wb,stub_export_macro=TAO_RTEvent_Export -Wb,stub_export_include=orbsvcs/Event/event_export.h -Wb,skel_export_macro=TAO_RTEvent_Skel_Export -Wb,skel_export_include=orbsvcs/Event/event_skel_export.h $(srcdir)/RtecEventChannelAdmin.idl
	@touch $@

BUILT_SOURCES += \
  RtecUDPAdminC.cpp \
  RtecUDPAdminC.h \
  RtecUDPAdminC.inl \
  RtecUDPAdminS_T.cpp

CLEANFILES += \
  RtecUDPAdmin-stamp \
  RtecUDPAdminC.cpp \
  RtecUDPAdminC.h \
  RtecUDPAdminC.inl \
  RtecUDPAdminS_T.cpp

RtecUDPAdminC.cpp RtecUDPAdminC.h RtecUDPAdminC.inl RtecUDPAdminS_T.cpp: RtecUDPAdmin-stamp

RtecUDPAdmin-stamp: $(srcdir)/RtecUDPAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GT -Wb,stub_export_macro=TAO_RTEvent_Export -Wb,stub_export_include=orbsvcs/Event/event_export.h -Wb,skel_export_macro=TAO_RTEvent_Skel_Export -Wb,skel_export_include=orbsvcs/Event/event_skel_export.h $(srcdir)/RtecUDPAdmin.idl
	@touch $@

lib_LTLIBRARIES += libTAO_RTEvent.la

libTAO_RTEvent_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTEVENT_BUILD_DLL

libTAO_RTEvent_la_SOURCES = \
  Event_Utilities.cpp \
  RtecDefaultEventDataC.cpp \
  RtecEventChannelAdminC.cpp \
  RtecEventCommC.cpp \
  RtecUDPAdminC.cpp

libTAO_RTEvent_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTEvent_la_LIBADD = \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Event/event_export.h \
  Event/event_skel_export.h \
  Event_Utilities.h \
  Event_Utilities.inl \
  RtecDefaultEventData.idl \
  RtecDefaultEventDataC.h \
  RtecDefaultEventDataC.inl \
  RtecEventChannelAdmin.idl \
  RtecEventChannelAdminC.h \
  RtecEventChannelAdminC.inl \
  RtecEventComm.idl \
  RtecEventCommC.h \
  RtecEventCommC.inl \
  RtecUDPAdmin.idl \
  RtecUDPAdminC.h \
  RtecUDPAdminC.inl

pkgconfig_DATA += \
  TAO_RTEvent.pc

CLEANFILES += \
  TAO_RTEvent.pc

TAO_RTEvent.pc: ${top_builddir}/config.status ${srcdir}/TAO_RTEvent.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_RTEvent.pc.in

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  RTEvent.rc \
  TAO_RTEvent.pc.in


## Makefile.RTEvent_Skel.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_RTEvent_Skel.la

libTAO_RTEvent_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTEVENT_SKEL_BUILD_DLL

libTAO_RTEvent_Skel_la_SOURCES = \
  RtecDefaultEventDataS.cpp \
  RtecEventChannelAdminS.cpp \
  RtecEventCommS.cpp \
  RtecUDPAdminS.cpp

libTAO_RTEvent_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTEvent_Skel_la_LIBADD = \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Event/event_skel_export.h \
  RtecDefaultEventDataS.h \
  RtecDefaultEventDataS.inl \
  RtecEventChannelAdminS.h \
  RtecEventChannelAdminS.inl \
  RtecEventCommS.h \
  RtecEventCommS.inl \
  RtecUDPAdminS.h \
  RtecUDPAdminS.inl

pkgconfig_DATA += \
  TAO_RTEvent_Skel.pc

CLEANFILES += \
  TAO_RTEvent_Skel.pc

TAO_RTEvent_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_RTEvent_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_RTEvent_Skel.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  RTEvent_Skel.rc \
  TAO_RTEvent_Skel.pc.in


## Makefile.RTEvent_Serv.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_RTEvent_Serv.la

libTAO_RTEvent_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTEVENT_SERV_BUILD_DLL

libTAO_RTEvent_Serv_la_SOURCES = \
  Event/ECG_Adapters.cpp \
  Event/ECG_CDR_Message_Receiver.cpp \
  Event/ECG_CDR_Message_Sender.cpp \
  Event/ECG_Complex_Address_Server.cpp \
  Event/ECG_ConsumerEC_Control.cpp \
  Event/ECG_Mcast_EH.cpp \
  Event/ECG_Mcast_Gateway.cpp \
  Event/ECG_Reactive_ConsumerEC_Control.cpp \
  Event/ECG_Reconnect_ConsumerEC_Control.cpp \
  Event/ECG_Simple_Address_Server.cpp \
  Event/ECG_Simple_Mcast_EH.cpp \
  Event/ECG_UDP_EH.cpp \
  Event/ECG_UDP_Out_Endpoint.cpp \
  Event/ECG_UDP_Receiver.cpp \
  Event/ECG_UDP_Sender.cpp \
  Event/EC_And_Filter.cpp \
  Event/EC_Basic_Factory.cpp \
  Event/EC_Basic_Filter_Builder.cpp \
  Event/EC_Bitmask_Filter.cpp \
  Event/EC_Channel_Destroyer.cpp \
  Event/EC_Conjunction_Filter.cpp \
  Event/EC_ConsumerAdmin.cpp \
  Event/EC_ConsumerControl.cpp \
  Event/EC_Default_Factory.cpp \
  Event/EC_Default_ProxyConsumer.cpp \
  Event/EC_Default_ProxySupplier.cpp \
  Event/EC_Disjunction_Filter.cpp \
  Event/EC_Dispatching.cpp \
  Event/EC_Dispatching_Task.cpp \
  Event/EC_Event_Channel.cpp \
  Event/EC_Event_Channel_Base.cpp \
  Event/EC_Factory.cpp \
  Event/EC_Filter.cpp \
  Event/EC_Filter_Builder.cpp \
  Event/EC_Gateway.cpp \
  Event/EC_Gateway_IIOP.cpp \
  Event/EC_Gateway_IIOP_Factory.cpp \
  Event/EC_Group_Scheduling.cpp \
  Event/EC_Lifetime_Utils.cpp \
  Event/EC_MT_Dispatching.cpp \
  Event/EC_Masked_Type_Filter.cpp \
  Event/EC_Negation_Filter.cpp \
  Event/EC_Null_Factory.cpp \
  Event/EC_Null_Scheduling.cpp \
  Event/EC_ObserverStrategy.cpp \
  Event/EC_Per_Supplier_Filter.cpp \
  Event/EC_Prefix_Filter_Builder.cpp \
  Event/EC_ProxyConsumer.cpp \
  Event/EC_ProxySupplier.cpp \
  Event/EC_Proxy_Disconnector.cpp \
  Event/EC_QOS_Info.cpp \
  Event/EC_Reactive_ConsumerControl.cpp \
  Event/EC_Reactive_Dispatching.cpp \
  Event/EC_Reactive_SupplierControl.cpp \
  Event/EC_Reactive_Timeout_Generator.cpp \
  Event/EC_Scheduling_Strategy.cpp \
  Event/EC_SupplierAdmin.cpp \
  Event/EC_SupplierControl.cpp \
  Event/EC_Supplier_Filter.cpp \
  Event/EC_Supplier_Filter_Builder.cpp \
  Event/EC_TPC_Dispatching.cpp \
  Event/EC_TPC_Dispatching_Task.cpp \
  Event/EC_TPC_Factory.cpp \
  Event/EC_TPC_ProxyConsumer.cpp \
  Event/EC_TPC_ProxySupplier.cpp \
  Event/EC_Thread_Flags.cpp \
  Event/EC_Timeout_Filter.cpp \
  Event/EC_Timeout_Generator.cpp \
  Event/EC_Trivial_Supplier_Filter.cpp \
  Event/EC_Type_Filter.cpp \
  Event/EC_UDP_Admin.cpp

libTAO_RTEvent_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTEvent_Serv_la_LIBADD = \
  libTAO_RTEvent_Skel.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Channel_Clients_T.cpp \
  Channel_Clients_T.h \
  Channel_Clients_T.inl \
  Event/ECG_Adapters.h \
  Event/ECG_CDR_Message_Receiver.h \
  Event/ECG_CDR_Message_Receiver.inl \
  Event/ECG_CDR_Message_Sender.h \
  Event/ECG_CDR_Message_Sender.inl \
  Event/ECG_Complex_Address_Server.h \
  Event/ECG_Complex_Address_Server.inl \
  Event/ECG_ConsumerEC_Control.h \
  Event/ECG_Mcast_EH.h \
  Event/ECG_Mcast_EH.inl \
  Event/ECG_Mcast_Gateway.h \
  Event/ECG_Mcast_Gateway.inl \
  Event/ECG_Reactive_ConsumerEC_Control.h \
  Event/ECG_Reconnect_ConsumerEC_Control.h \
  Event/ECG_Simple_Address_Server.h \
  Event/ECG_Simple_Address_Server.inl \
  Event/ECG_Simple_Mcast_EH.h \
  Event/ECG_UDP_EH.h \
  Event/ECG_UDP_EH.inl \
  Event/ECG_UDP_Out_Endpoint.h \
  Event/ECG_UDP_Out_Endpoint.inl \
  Event/ECG_UDP_Receiver.h \
  Event/ECG_UDP_Receiver.inl \
  Event/ECG_UDP_Sender.h \
  Event/ECG_UDP_Sender.inl \
  Event/EC_And_Filter.h \
  Event/EC_Basic_Factory.h \
  Event/EC_Basic_Filter_Builder.h \
  Event/EC_Basic_Filter_Builder.inl \
  Event/EC_Bitmask_Filter.h \
  Event/EC_Busy_Lock.cpp \
  Event/EC_Busy_Lock.h \
  Event/EC_Busy_Lock.inl \
  Event/EC_Channel_Destroyer.h \
  Event/EC_Conjunction_Filter.h \
  Event/EC_ConsumerAdmin.h \
  Event/EC_ConsumerControl.h \
  Event/EC_Default_Factory.h \
  Event/EC_Default_Factory.inl \
  Event/EC_Default_ProxyConsumer.h \
  Event/EC_Default_ProxySupplier.h \
  Event/EC_Disjunction_Filter.h \
  Event/EC_Dispatching.h \
  Event/EC_Dispatching_Task.h \
  Event/EC_Dispatching_Task.inl \
  Event/EC_Event_Channel.h \
  Event/EC_Event_Channel_Base.h \
  Event/EC_Event_Channel_Base.inl \
  Event/EC_Factory.h \
  Event/EC_Filter.h \
  Event/EC_Filter.inl \
  Event/EC_Filter_Builder.h \
  Event/EC_Filter_Builder.inl \
  Event/EC_Gateway.h \
  Event/EC_Gateway_IIOP.h \
  Event/EC_Gateway_IIOP_Factory.h \
  Event/EC_Gateway_IIOP_Factory.inl \
  Event/EC_Group_Scheduling.h \
  Event/EC_Group_Scheduling.inl \
  Event/EC_Lifetime_Utils.h \
  Event/EC_Lifetime_Utils.inl \
  Event/EC_Lifetime_Utils_T.cpp \
  Event/EC_Lifetime_Utils_T.h \
  Event/EC_Lifetime_Utils_T.inl \
  Event/EC_MT_Dispatching.h \
  Event/EC_Masked_Type_Filter.h \
  Event/EC_Negation_Filter.h \
  Event/EC_Null_Factory.h \
  Event/EC_Null_Scheduling.h \
  Event/EC_Null_Scheduling.inl \
  Event/EC_ObserverStrategy.h \
  Event/EC_ObserverStrategy.inl \
  Event/EC_Per_Supplier_Filter.h \
  Event/EC_Per_Supplier_Filter.inl \
  Event/EC_Prefix_Filter_Builder.h \
  Event/EC_Prefix_Filter_Builder.inl \
  Event/EC_ProxyConsumer.h \
  Event/EC_ProxyConsumer.inl \
  Event/EC_ProxySupplier.h \
  Event/EC_ProxySupplier.inl \
  Event/EC_Proxy_Disconnector.h \
  Event/EC_QOS_Info.h \
  Event/EC_QOS_Info.inl \
  Event/EC_Reactive_ConsumerControl.h \
  Event/EC_Reactive_ConsumerControl.inl \
  Event/EC_Reactive_Dispatching.h \
  Event/EC_Reactive_SupplierControl.h \
  Event/EC_Reactive_SupplierControl.inl \
  Event/EC_Reactive_Timeout_Generator.h \
  Event/EC_Scheduling_Strategy.h \
  Event/EC_SupplierAdmin.h \
  Event/EC_SupplierControl.h \
  Event/EC_Supplier_Filter.h \
  Event/EC_Supplier_Filter.inl \
  Event/EC_Supplier_Filter_Builder.h \
  Event/EC_TPC_Dispatching.h \
  Event/EC_TPC_Dispatching_Task.h \
  Event/EC_TPC_Factory.h \
  Event/EC_TPC_ProxyConsumer.h \
  Event/EC_TPC_ProxySupplier.h \
  Event/EC_TPC_ProxySupplier.inl \
  Event/EC_Thread_Flags.h \
  Event/EC_Timeout_Filter.h \
  Event/EC_Timeout_Filter.inl \
  Event/EC_Timeout_Generator.h \
  Event/EC_Timeout_Generator.inl \
  Event/EC_Trivial_Supplier_Filter.h \
  Event/EC_Type_Filter.h \
  Event/EC_UDP_Admin.h

pkgconfig_DATA += \
  TAO_RTEvent_Serv.pc

CLEANFILES += \
  TAO_RTEvent_Serv.pc

TAO_RTEvent_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_RTEvent_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_RTEvent_Serv.pc.in

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  RTEvent_Serv.rc \
  TAO_RTEvent_Serv.pc.in


## Makefile.FtRtEvent.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

BUILT_SOURCES += \
  FTRTC.cpp \
  FTRTC.h \
  FTRTC.inl \
  FTRTS.cpp \
  FTRTS.h \
  FTRTS.inl

CLEANFILES += \
  FTRT-stamp \
  FTRTC.cpp \
  FTRTC.h \
  FTRTC.inl \
  FTRTS.cpp \
  FTRTS.h \
  FTRTS.inl

FTRTC.cpp FTRTC.h FTRTC.inl FTRTS.cpp FTRTS.h FTRTS.inl: FTRT-stamp

FTRT-stamp: $(srcdir)/FTRT.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FtRtEvent_Export -Wb,export_include=orbsvcs/FtRtEvent/Utils/ftrtevent_export.h -GC $(srcdir)/FTRT.idl
	@touch $@

BUILT_SOURCES += \
  FtRtecEventCommC.cpp \
  FtRtecEventCommC.h \
  FtRtecEventCommC.inl \
  FtRtecEventCommS.cpp \
  FtRtecEventCommS.h \
  FtRtecEventCommS.inl

CLEANFILES += \
  FtRtecEventComm-stamp \
  FtRtecEventCommC.cpp \
  FtRtecEventCommC.h \
  FtRtecEventCommC.inl \
  FtRtecEventCommS.cpp \
  FtRtecEventCommS.h \
  FtRtecEventCommS.inl

FtRtecEventCommC.cpp FtRtecEventCommC.h FtRtecEventCommC.inl FtRtecEventCommS.cpp FtRtecEventCommS.h FtRtecEventCommS.inl: FtRtecEventComm-stamp

FtRtecEventComm-stamp: $(srcdir)/FtRtecEventComm.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FtRtEvent_Export -Wb,export_include=orbsvcs/FtRtEvent/Utils/ftrtevent_export.h -GC $(srcdir)/FtRtecEventComm.idl
	@touch $@

BUILT_SOURCES += \
  FTRT_GroupManagerC.cpp \
  FTRT_GroupManagerC.h \
  FTRT_GroupManagerC.inl \
  FTRT_GroupManagerS.cpp \
  FTRT_GroupManagerS.h \
  FTRT_GroupManagerS.inl

CLEANFILES += \
  FTRT_GroupManager-stamp \
  FTRT_GroupManagerC.cpp \
  FTRT_GroupManagerC.h \
  FTRT_GroupManagerC.inl \
  FTRT_GroupManagerS.cpp \
  FTRT_GroupManagerS.h \
  FTRT_GroupManagerS.inl

FTRT_GroupManagerC.cpp FTRT_GroupManagerC.h FTRT_GroupManagerC.inl FTRT_GroupManagerS.cpp FTRT_GroupManagerS.h FTRT_GroupManagerS.inl: FTRT_GroupManager-stamp

FTRT_GroupManager-stamp: $(srcdir)/FTRT_GroupManager.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FtRtEvent_Export -Wb,export_include=orbsvcs/FtRtEvent/Utils/ftrtevent_export.h -GC $(srcdir)/FTRT_GroupManager.idl
	@touch $@

BUILT_SOURCES += \
  FtRtecEventChannelAdminC.cpp \
  FtRtecEventChannelAdminC.h \
  FtRtecEventChannelAdminC.inl \
  FtRtecEventChannelAdminS.cpp \
  FtRtecEventChannelAdminS.h \
  FtRtecEventChannelAdminS.inl

CLEANFILES += \
  FtRtecEventChannelAdmin-stamp \
  FtRtecEventChannelAdminC.cpp \
  FtRtecEventChannelAdminC.h \
  FtRtecEventChannelAdminC.inl \
  FtRtecEventChannelAdminS.cpp \
  FtRtecEventChannelAdminS.h \
  FtRtecEventChannelAdminS.inl

FtRtecEventChannelAdminC.cpp FtRtecEventChannelAdminC.h FtRtecEventChannelAdminC.inl FtRtecEventChannelAdminS.cpp FtRtecEventChannelAdminS.h FtRtecEventChannelAdminS.inl: FtRtecEventChannelAdmin-stamp

FtRtecEventChannelAdmin-stamp: $(srcdir)/FtRtecEventChannelAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FtRtEvent_Export -Wb,export_include=orbsvcs/FtRtEvent/Utils/ftrtevent_export.h $(srcdir)/FtRtecEventChannelAdmin.idl
	@touch $@

lib_LTLIBRARIES += libTAO_FtRtEvent.la

libTAO_FtRtEvent_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_FTRTEVENT_BUILD_DLL

libTAO_FtRtEvent_la_SOURCES = \
  FTRTC.cpp \
  FTRTS.cpp \
  FTRT_GroupManagerC.cpp \
  FTRT_GroupManagerS.cpp \
  FtRtEvent/Utils/FTEC_Gateway.cpp \
  FtRtEvent/Utils/Log.cpp \
  FtRtEvent/Utils/Safe_InputCDR.cpp \
  FtRtEvent/Utils/UUID.cpp \
  FtRtecEventChannelAdminC.cpp \
  FtRtecEventChannelAdminS.cpp \
  FtRtecEventCommC.cpp \
  FtRtecEventCommS.cpp

libTAO_FtRtEvent_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FtRtEvent_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PI_Server.la \
  libTAO_RTEvent_Serv.la \
  libTAO_RTEvent_Skel.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  libTAO_FTORB_Utils.la \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  FTRT.idl \
  FTRTC.h \
  FTRTC.inl \
  FTRTS.h \
  FTRTS.inl \
  FTRT_GroupManager.idl \
  FTRT_GroupManagerC.h \
  FTRT_GroupManagerC.inl \
  FTRT_GroupManagerS.h \
  FTRT_GroupManagerS.inl \
  FtRtEvent/Utils/FTEC_Gateway.h \
  FtRtEvent/Utils/FTEC_Gateway.inl \
  FtRtEvent/Utils/Log.h \
  FtRtEvent/Utils/Log.inl \
  FtRtEvent/Utils/Safe_InputCDR.h \
  FtRtEvent/Utils/Safe_InputCDR.inl \
  FtRtEvent/Utils/UUID.h \
  FtRtEvent/Utils/UUID.inl \
  FtRtecEventChannelAdmin.idl \
  FtRtecEventChannelAdminC.h \
  FtRtecEventChannelAdminC.inl \
  FtRtecEventChannelAdminS.h \
  FtRtecEventChannelAdminS.inl \
  FtRtecEventComm.idl \
  FtRtecEventCommC.h \
  FtRtecEventCommC.inl \
  FtRtecEventCommS.h \
  FtRtecEventCommS.inl

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

## Makefile.FTRT_EventChannel.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_FTRT_EventChannel.la

libTAO_FTRT_EventChannel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_FTRTEC_BUILD_DLL

libTAO_FTRT_EventChannel_la_SOURCES = \
  FtRtEvent/EventChannel/AMI_Primary_Replication_Strategy.cpp \
  FtRtEvent/EventChannel/AMI_Replication_Strategy.cpp \
  FtRtEvent/EventChannel/Basic_Replication_Strategy.cpp \
  FtRtEvent/EventChannel/Dynamic_Bitset.cpp \
  FtRtEvent/EventChannel/FTEC_Become_Primary_Listener.cpp \
  FtRtEvent/EventChannel/FTEC_ConsumerAdmin.cpp \
  FtRtEvent/EventChannel/FTEC_Event_Channel.cpp \
  FtRtEvent/EventChannel/FTEC_Event_Channel_Impl.cpp \
  FtRtEvent/EventChannel/FTEC_Factory.cpp \
  FtRtEvent/EventChannel/FTEC_Group_Manager.cpp \
  FtRtEvent/EventChannel/FTEC_ORBInitializer.cpp \
  FtRtEvent/EventChannel/FTEC_ProxyConsumer.cpp \
  FtRtEvent/EventChannel/FTEC_ProxySupplier.cpp \
  FtRtEvent/EventChannel/FTEC_SupplierAdmin.cpp \
  FtRtEvent/EventChannel/FT_ProxyAdmin_Base.cpp \
  FtRtEvent/EventChannel/Fault_Detector.cpp \
  FtRtEvent/EventChannel/Fault_Detector_Loader.cpp \
  FtRtEvent/EventChannel/ForwardCtrlServerInterceptor.cpp \
  FtRtEvent/EventChannel/FtEventServiceInterceptor.cpp \
  FtRtEvent/EventChannel/GroupInfoPublisher.cpp \
  FtRtEvent/EventChannel/IOGR_Maker.cpp \
  FtRtEvent/EventChannel/Identification_Service.cpp \
  FtRtEvent/EventChannel/ObjectGroupManagerHandler.cpp \
  FtRtEvent/EventChannel/ProxyConsumerStateWorker.cpp \
  FtRtEvent/EventChannel/ProxySupplierStateWorker.cpp \
  FtRtEvent/EventChannel/Replication_Service.cpp \
  FtRtEvent/EventChannel/Replication_Strategy.cpp \
  FtRtEvent/EventChannel/Request_Context_Repository.cpp \
  FtRtEvent/EventChannel/SCTP_Fault_Detector.cpp \
  FtRtEvent/EventChannel/Set_Update_Interceptor.cpp \
  FtRtEvent/EventChannel/Update_Manager.cpp \
  FtRtEvent/EventChannel/UpdateableHandler.cpp \
  FtRtEvent/EventChannel/create_persistent_poa.cpp \
  FtRtEvent/EventChannel/replace_key.cpp

libTAO_FTRT_EventChannel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FTRT_EventChannel_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_Utils.la \
  libTAO_FtRtEvent.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI_Server.la \
  libTAO_RTEvent_Serv.la \
  libTAO_RTEvent_Skel.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  libTAO_FTORB_Utils.la \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  FtRtEvent/EventChannel/AMI_Primary_Replication_Strategy.h \
  FtRtEvent/EventChannel/AMI_Replication_Strategy.h \
  FtRtEvent/EventChannel/Basic_Replication_Strategy.h \
  FtRtEvent/EventChannel/ConnectionHandler_T.cpp \
  FtRtEvent/EventChannel/ConnectionHandler_T.h \
  FtRtEvent/EventChannel/Dynamic_Bitset.h \
  FtRtEvent/EventChannel/Dynamic_Bitset.inl \
  FtRtEvent/EventChannel/FTEC_Become_Primary_Listener.h \
  FtRtEvent/EventChannel/FTEC_ConsumerAdmin.h \
  FtRtEvent/EventChannel/FTEC_Event_Channel.h \
  FtRtEvent/EventChannel/FTEC_Event_Channel_Impl.h \
  FtRtEvent/EventChannel/FTEC_Factory.h \
  FtRtEvent/EventChannel/FTEC_Group_Manager.h \
  FtRtEvent/EventChannel/FTEC_ORBInitializer.h \
  FtRtEvent/EventChannel/FTEC_ProxyConsumer.h \
  FtRtEvent/EventChannel/FTEC_ProxySupplier.h \
  FtRtEvent/EventChannel/FTEC_SupplierAdmin.h \
  FtRtEvent/EventChannel/FT_ProxyAdmin_Base.h \
  FtRtEvent/EventChannel/FT_ProxyAdmin_T.cpp \
  FtRtEvent/EventChannel/FT_ProxyAdmin_T.h \
  FtRtEvent/EventChannel/Fault_Detector.h \
  FtRtEvent/EventChannel/Fault_Detector_Loader.h \
  FtRtEvent/EventChannel/Fault_Detector_T.cpp \
  FtRtEvent/EventChannel/Fault_Detector_T.h \
  FtRtEvent/EventChannel/ForwardCtrlServerInterceptor.h \
  FtRtEvent/EventChannel/FtEventServiceInterceptor.h \
  FtRtEvent/EventChannel/GroupInfoPublisher.h \
  FtRtEvent/EventChannel/IOGR_Maker.h \
  FtRtEvent/EventChannel/Identification_Service.h \
  FtRtEvent/EventChannel/ObjectGroupManagerHandler.h \
  FtRtEvent/EventChannel/ProxyConsumerStateWorker.h \
  FtRtEvent/EventChannel/ProxySupplierStateWorker.h \
  FtRtEvent/EventChannel/Replication_Service.h \
  FtRtEvent/EventChannel/Replication_Strategy.h \
  FtRtEvent/EventChannel/Request_Context_Repository.h \
  FtRtEvent/EventChannel/SCTP_Fault_Detector.h \
  FtRtEvent/EventChannel/Set_Update_Interceptor.h \
  FtRtEvent/EventChannel/Update_Manager.h \
  FtRtEvent/EventChannel/UpdateableHandler.h \
  FtRtEvent/EventChannel/create_persistent_poa.h \
  FtRtEvent/EventChannel/ftrtec_export.h

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

## Makefile.FT_ClientORB.am

if BUILD_ACE_UUID
if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if BUILD_INTERCEPTORS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_FT_ClientORB.la

libTAO_FT_ClientORB_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_FT_CLIENTORB_BUILD_DLL

libTAO_FT_ClientORB_la_SOURCES = \
  FaultTolerance/FT_ClientORBInitializer.cpp \
  FaultTolerance/FT_ClientPolicyFactory.cpp \
  FaultTolerance/FT_ClientPolicy_i.cpp \
  FaultTolerance/FT_ClientRequest_Interceptor.cpp \
  FaultTolerance/FT_ClientService_Activate.cpp \
  FaultTolerance/FT_Endpoint_Selector_Factory.cpp \
  FaultTolerance/FT_Invocation_Endpoint_Selectors.cpp \
  FaultTolerance/FT_Service_Callbacks.cpp

libTAO_FT_ClientORB_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FT_ClientORB_la_LIBADD = \
  libTAO_FTORB_Utils.la \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  FaultTolerance/FT_ClientORBInitializer.h \
  FaultTolerance/FT_ClientPolicyFactory.h \
  FaultTolerance/FT_ClientPolicy_i.h \
  FaultTolerance/FT_ClientPolicy_i.inl \
  FaultTolerance/FT_ClientRequest_Interceptor.h \
  FaultTolerance/FT_ClientService_Activate.h \
  FaultTolerance/FT_Endpoint_Selector_Factory.h \
  FaultTolerance/FT_Invocation_Endpoint_Selectors.h \
  FaultTolerance/FT_Service_Callbacks.h

pkgconfig_DATA += \
  TAO_FT_ClientORB.pc

CLEANFILES += \
  TAO_FT_ClientORB.pc

TAO_FT_ClientORB.pc: ${top_builddir}/config.status ${srcdir}/TAO_FT_ClientORB.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_FT_ClientORB.pc.in

endif !BUILD_ACE_FOR_TAO
endif BUILD_INTERCEPTORS
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING
endif BUILD_ACE_UUID

EXTRA_DIST += \
  TAO_FT_ClientORB.pc.in


## Makefile.FT_ServerORB.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if BUILD_INTERCEPTORS

lib_LTLIBRARIES += libTAO_FT_ServerORB.la

libTAO_FT_ServerORB_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_FT_SERVERORB_BUILD_DLL

libTAO_FT_ServerORB_la_SOURCES = \
  FaultTolerance/FT_ServerORBInitializer.cpp \
  FaultTolerance/FT_ServerPolicyFactory.cpp \
  FaultTolerance/FT_ServerPolicy_i.cpp \
  FaultTolerance/FT_ServerRequest_Interceptor.cpp \
  FaultTolerance/FT_ServerService_Activate.cpp

libTAO_FT_ServerORB_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FT_ServerORB_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PI_Server.la \
  libTAO_FTORB_Utils.la \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  FaultTolerance/FT_ServerORBInitializer.h \
  FaultTolerance/FT_ServerPolicyFactory.h \
  FaultTolerance/FT_ServerPolicy_i.h \
  FaultTolerance/FT_ServerPolicy_i.inl \
  FaultTolerance/FT_ServerRequest_Interceptor.h \
  FaultTolerance/FT_ServerService_Activate.h

pkgconfig_DATA += \
  TAO_FT_ServerORB.pc

CLEANFILES += \
  TAO_FT_ServerORB.pc

TAO_FT_ServerORB.pc: ${top_builddir}/config.status ${srcdir}/TAO_FT_ServerORB.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_FT_ServerORB.pc.in

endif BUILD_INTERCEPTORS
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  TAO_FT_ServerORB.pc.in


## Makefile.FaultTolerance.am

if BUILD_ACE_UUID
if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if BUILD_INTERCEPTORS
if !BUILD_ACE_FOR_TAO

BUILT_SOURCES += \
  FT_CORBAC.cpp \
  FT_CORBAC.h \
  FT_CORBAC.inl \
  FT_CORBAS.cpp \
  FT_CORBAS.h \
  FT_CORBAS.inl

CLEANFILES += \
  FT_CORBA-stamp \
  FT_CORBAC.cpp \
  FT_CORBAC.h \
  FT_CORBAC.inl \
  FT_CORBAS.cpp \
  FT_CORBAS.h \
  FT_CORBAS.inl

FT_CORBAC.cpp FT_CORBAC.h FT_CORBAC.inl FT_CORBAS.cpp FT_CORBAS.h FT_CORBAS.inl: FT_CORBA-stamp

FT_CORBA-stamp: $(srcdir)/FT_CORBA.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FT_Export -Wb,export_include=orbsvcs/FaultTolerance/fault_tol_export.h -Wb,skel_export_include=tao/PortableServer/PolicyS.h $(srcdir)/FT_CORBA.idl
	@touch $@

BUILT_SOURCES += \
  FT_ReplicaC.cpp \
  FT_ReplicaC.h \
  FT_ReplicaC.inl \
  FT_ReplicaS.cpp \
  FT_ReplicaS.h \
  FT_ReplicaS.inl

CLEANFILES += \
  FT_Replica-stamp \
  FT_ReplicaC.cpp \
  FT_ReplicaC.h \
  FT_ReplicaC.inl \
  FT_ReplicaS.cpp \
  FT_ReplicaS.h \
  FT_ReplicaS.inl

FT_ReplicaC.cpp FT_ReplicaC.h FT_ReplicaC.inl FT_ReplicaS.cpp FT_ReplicaS.h FT_ReplicaS.inl: FT_Replica-stamp

FT_Replica-stamp: $(srcdir)/FT_Replica.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FT_Export -Wb,export_include=orbsvcs/FaultTolerance/fault_tol_export.h -Wb,skel_export_include=tao/PortableServer/PolicyS.h $(srcdir)/FT_Replica.idl
	@touch $@

BUILT_SOURCES += \
  FT_NotifierC.cpp \
  FT_NotifierC.h \
  FT_NotifierC.inl \
  FT_NotifierS.cpp \
  FT_NotifierS.h \
  FT_NotifierS.inl

CLEANFILES += \
  FT_Notifier-stamp \
  FT_NotifierC.cpp \
  FT_NotifierC.h \
  FT_NotifierC.inl \
  FT_NotifierS.cpp \
  FT_NotifierS.h \
  FT_NotifierS.inl

FT_NotifierC.cpp FT_NotifierC.h FT_NotifierC.inl FT_NotifierS.cpp FT_NotifierS.h FT_NotifierS.inl: FT_Notifier-stamp

FT_Notifier-stamp: $(srcdir)/FT_Notifier.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FT_Export -Wb,export_include=orbsvcs/FaultTolerance/fault_tol_export.h -Wb,skel_export_include=tao/PortableServer/PolicyS.h $(srcdir)/FT_Notifier.idl
	@touch $@

BUILT_SOURCES += \
  FT_FaultDetectorFactoryC.cpp \
  FT_FaultDetectorFactoryC.h \
  FT_FaultDetectorFactoryC.inl \
  FT_FaultDetectorFactoryS.cpp \
  FT_FaultDetectorFactoryS.h \
  FT_FaultDetectorFactoryS.inl

CLEANFILES += \
  FT_FaultDetectorFactory-stamp \
  FT_FaultDetectorFactoryC.cpp \
  FT_FaultDetectorFactoryC.h \
  FT_FaultDetectorFactoryC.inl \
  FT_FaultDetectorFactoryS.cpp \
  FT_FaultDetectorFactoryS.h \
  FT_FaultDetectorFactoryS.inl

FT_FaultDetectorFactoryC.cpp FT_FaultDetectorFactoryC.h FT_FaultDetectorFactoryC.inl FT_FaultDetectorFactoryS.cpp FT_FaultDetectorFactoryS.h FT_FaultDetectorFactoryS.inl: FT_FaultDetectorFactory-stamp

FT_FaultDetectorFactory-stamp: $(srcdir)/FT_FaultDetectorFactory.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FT_Export -Wb,export_include=orbsvcs/FaultTolerance/fault_tol_export.h -Wb,skel_export_include=tao/PortableServer/PolicyS.h $(srcdir)/FT_FaultDetectorFactory.idl
	@touch $@

BUILT_SOURCES += \
  FT_ReplicationManagerC.cpp \
  FT_ReplicationManagerC.h \
  FT_ReplicationManagerC.inl \
  FT_ReplicationManagerS.cpp \
  FT_ReplicationManagerS.h \
  FT_ReplicationManagerS.inl

CLEANFILES += \
  FT_ReplicationManager-stamp \
  FT_ReplicationManagerC.cpp \
  FT_ReplicationManagerC.h \
  FT_ReplicationManagerC.inl \
  FT_ReplicationManagerS.cpp \
  FT_ReplicationManagerS.h \
  FT_ReplicationManagerS.inl

FT_ReplicationManagerC.cpp FT_ReplicationManagerC.h FT_ReplicationManagerC.inl FT_ReplicationManagerS.cpp FT_ReplicationManagerS.h FT_ReplicationManagerS.inl: FT_ReplicationManager-stamp

FT_ReplicationManager-stamp: $(srcdir)/FT_ReplicationManager.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_FT_Export -Wb,export_include=orbsvcs/FaultTolerance/fault_tol_export.h -Wb,skel_export_include=tao/PortableServer/PolicyS.h $(srcdir)/FT_ReplicationManager.idl
	@touch $@

lib_LTLIBRARIES += libTAO_FaultTolerance.la

libTAO_FaultTolerance_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_FT_BUILD_DLL

libTAO_FaultTolerance_la_SOURCES = \
  FT_CORBAC.cpp \
  FT_CORBAS.cpp \
  FT_FaultDetectorFactoryC.cpp \
  FT_FaultDetectorFactoryS.cpp \
  FT_NotifierC.cpp \
  FT_NotifierS.cpp \
  FT_ReplicaC.cpp \
  FT_ReplicaS.cpp \
  FT_ReplicationManagerC.cpp \
  FT_ReplicationManagerS.cpp

libTAO_FaultTolerance_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_FaultTolerance_la_LIBADD = \
  libTAO_FT_ServerORB.la \
  libTAO_FT_ClientORB.la \
  libTAO_FTORB_Utils.la \
  libTAO_PortableGroup.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_IORManip.la \
  libTAO_CosNotification.la \
  libTAO_CosEvent.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI_Server.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  FT_CORBA.idl \
  FT_CORBAC.h \
  FT_CORBAC.inl \
  FT_CORBAS.h \
  FT_CORBAS.inl \
  FT_FaultDetectorFactory.idl \
  FT_FaultDetectorFactoryC.h \
  FT_FaultDetectorFactoryC.inl \
  FT_FaultDetectorFactoryS.h \
  FT_FaultDetectorFactoryS.inl \
  FT_Notifier.idl \
  FT_NotifierC.h \
  FT_NotifierC.inl \
  FT_NotifierS.h \
  FT_NotifierS.inl \
  FT_Replica.idl \
  FT_ReplicaC.h \
  FT_ReplicaC.inl \
  FT_ReplicaS.h \
  FT_ReplicaS.inl \
  FT_ReplicationManager.idl \
  FT_ReplicationManagerC.h \
  FT_ReplicationManagerC.inl \
  FT_ReplicationManagerS.h \
  FT_ReplicationManagerS.inl \
  FaultTolerance/fault_tol_export.h

pkgconfig_DATA += \
  TAO_FaultTolerance.pc

CLEANFILES += \
  TAO_FaultTolerance.pc

TAO_FaultTolerance.pc: ${top_builddir}/config.status ${srcdir}/TAO_FaultTolerance.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_FaultTolerance.pc.in

endif !BUILD_ACE_FOR_TAO
endif BUILD_INTERCEPTORS
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING
endif BUILD_ACE_UUID

EXTRA_DIST += \
  FaultTolerance.rc \
  TAO_FaultTolerance.pc.in


## Makefile.HTIOP.am

if BUILD_ACE_UUID
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

BUILT_SOURCES += \
  HTIOPC.cpp \
  HTIOPC.h \
  HTIOPC.inl \
  HTIOPS.h

CLEANFILES += \
  HTIOP-stamp \
  HTIOPC.cpp \
  HTIOPC.h \
  HTIOPC.inl \
  HTIOPS.h

HTIOPC.cpp HTIOPC.h HTIOPC.inl HTIOPS.h: HTIOP-stamp

HTIOP-stamp: $(srcdir)/HTIOP.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=HTIOP_Export -Wb,export_include=orbsvcs/HTIOP/HTIOP_Export.h -SS $(srcdir)/HTIOP.idl
	@touch $@

BUILT_SOURCES += \
  HTIOP/htiop_endpointsC.cpp \
  HTIOP/htiop_endpointsC.h \
  HTIOP/htiop_endpointsS.h

CLEANFILES += \
  HTIOP/htiop_endpoints-stamp \
  HTIOP/htiop_endpointsC.cpp \
  HTIOP/htiop_endpointsC.h \
  HTIOP/htiop_endpointsS.h

HTIOP/htiop_endpointsC.cpp HTIOP/htiop_endpointsC.h HTIOP/htiop_endpointsS.h: HTIOP/htiop_endpoints-stamp

HTIOP/htiop_endpoints-stamp: $(srcdir)/HTIOP/htiop_endpoints.pidl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=HTIOP_Export -Wb,export_include=orbsvcs/HTIOP/HTIOP_Export.h -SS -Sci -Gp -Gd -Sa -Sorb -o HTIOP $(srcdir)/HTIOP/htiop_endpoints.pidl
	@touch $@

lib_LTLIBRARIES += libTAO_HTIOP.la

libTAO_HTIOP_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(ACE_ROOT)/protocols \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DHTIOP_BUILD_DLL

libTAO_HTIOP_la_SOURCES = \
  HTIOP/HTIOP_Acceptor.cpp \
  HTIOP/HTIOP_Acceptor_Impl.cpp \
  HTIOP/HTIOP_Completion_Handler.cpp \
  HTIOP/HTIOP_Connection_Handler.cpp \
  HTIOP/HTIOP_Connector.cpp \
  HTIOP/HTIOP_Connector_Impl.cpp \
  HTIOP/HTIOP_Endpoint.cpp \
  HTIOP/HTIOP_Factory.cpp \
  HTIOP/HTIOP_Profile.cpp \
  HTIOP/HTIOP_Transport.cpp \
  HTIOP/htiop_endpointsC.cpp \
  HTIOPC.cpp

libTAO_HTIOP_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_HTIOP_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/protocols/ace/HTBP/libACE_HTBP.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Channel_Clients_T.cpp \
  HTIOP.idl \
  HTIOP/HTIOP_Acceptor.h \
  HTIOP/HTIOP_Acceptor.inl \
  HTIOP/HTIOP_Acceptor_Impl.h \
  HTIOP/HTIOP_Completion_Handler.h \
  HTIOP/HTIOP_Connection_Handler.h \
  HTIOP/HTIOP_Connector.h \
  HTIOP/HTIOP_Connector_Impl.h \
  HTIOP/HTIOP_Endpoint.h \
  HTIOP/HTIOP_Endpoint.inl \
  HTIOP/HTIOP_Factory.h \
  HTIOP/HTIOP_Profile.h \
  HTIOP/HTIOP_Transport.h \
  HTIOP/htiop_endpoints.pidl \
  HTIOP/htiop_endpointsC.h \
  HTIOP/htiop_endpointsS.h \
  HTIOPC.h \
  HTIOPC.inl \
  HTIOPS.h

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_ACE_UUID

## Makefile.IFRService.am

if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_IFRService.la

libTAO_IFRService_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_IFRSERVICE_BUILD_DLL

libTAO_IFRService_la_SOURCES = \
  IFRService/AbstractInterfaceDef_i.cpp \
  IFRService/AliasDef_i.cpp \
  IFRService/ArrayDef_i.cpp \
  IFRService/AttributeDef_i.cpp \
  IFRService/ComponentContainer_i.cpp \
  IFRService/ComponentDef_i.cpp \
  IFRService/ComponentModuleDef_i.cpp \
  IFRService/ComponentRepository_i.cpp \
  IFRService/ConstantDef_i.cpp \
  IFRService/ConsumesDef_i.cpp \
  IFRService/Contained_i.cpp \
  IFRService/Container_i.cpp \
  IFRService/EmitsDef_i.cpp \
  IFRService/EnumDef_i.cpp \
  IFRService/EventDef_i.cpp \
  IFRService/EventPortDef_i.cpp \
  IFRService/ExceptionDef_i.cpp \
  IFRService/ExtAbstractInterfaceDef_i.cpp \
  IFRService/ExtAttributeDef_i.cpp \
  IFRService/ExtInterfaceDef_i.cpp \
  IFRService/ExtLocalInterfaceDef_i.cpp \
  IFRService/ExtValueDef_i.cpp \
  IFRService/FactoryDef_i.cpp \
  IFRService/FinderDef_i.cpp \
  IFRService/FixedDef_i.cpp \
  IFRService/HomeDef_i.cpp \
  IFRService/IDLType_i.cpp \
  IFRService/IFR_BaseS.cpp \
  IFRService/IFR_BasicS.cpp \
  IFRService/IFR_ComponentsS.cpp \
  IFRService/IFR_ExtendedS.cpp \
  IFRService/IFR_Service_Loader.cpp \
  IFRService/IFR_Service_Utils.cpp \
  IFRService/IRObject_i.cpp \
  IFRService/InterfaceAttrExtension_i.cpp \
  IFRService/InterfaceDef_i.cpp \
  IFRService/LocalInterfaceDef_i.cpp \
  IFRService/ModuleDef_i.cpp \
  IFRService/NativeDef_i.cpp \
  IFRService/OperationDef_i.cpp \
  IFRService/Options.cpp \
  IFRService/PrimitiveDef_i.cpp \
  IFRService/ProvidesDef_i.cpp \
  IFRService/PublishesDef_i.cpp \
  IFRService/RecursDef_i.cpp \
  IFRService/Repository_i.cpp \
  IFRService/SequenceDef_i.cpp \
  IFRService/StringDef_i.cpp \
  IFRService/StructDef_i.cpp \
  IFRService/TypedefDef_i.cpp \
  IFRService/UnionDef_i.cpp \
  IFRService/UsesDef_i.cpp \
  IFRService/ValueBoxDef_i.cpp \
  IFRService/ValueDef_i.cpp \
  IFRService/ValueMemberDef_i.cpp \
  IFRService/WstringDef_i.cpp

libTAO_IFRService_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_IFRService_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_IORTable.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_TypeCodeFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_IFR_Client.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  IFRService/AbstractInterfaceDef_i.h \
  IFRService/AliasDef_i.h \
  IFRService/ArrayDef_i.h \
  IFRService/AttributeDef_i.h \
  IFRService/ComponentContainer_i.h \
  IFRService/ComponentDef_i.h \
  IFRService/ComponentModuleDef_i.h \
  IFRService/ComponentRepository_i.h \
  IFRService/ConstantDef_i.h \
  IFRService/ConsumesDef_i.h \
  IFRService/Contained_i.h \
  IFRService/Container_i.h \
  IFRService/EmitsDef_i.h \
  IFRService/EnumDef_i.h \
  IFRService/EventDef_i.h \
  IFRService/EventPortDef_i.h \
  IFRService/ExceptionDef_i.h \
  IFRService/ExtAbstractInterfaceDef_i.h \
  IFRService/ExtAttributeDef_i.h \
  IFRService/ExtInterfaceDef_i.h \
  IFRService/ExtLocalInterfaceDef_i.h \
  IFRService/ExtValueDef_i.h \
  IFRService/FactoryDef_i.h \
  IFRService/FinderDef_i.h \
  IFRService/FixedDef_i.h \
  IFRService/HomeDef_i.h \
  IFRService/IDLType_i.h \
  IFRService/IFR_BaseS.h \
  IFRService/IFR_BaseS.inl \
  IFRService/IFR_BaseS_T.cpp \
  IFRService/IFR_BaseS_T.h \
  IFRService/IFR_BaseS_T.inl \
  IFRService/IFR_BasicS.h \
  IFRService/IFR_BasicS.inl \
  IFRService/IFR_BasicS_T.cpp \
  IFRService/IFR_BasicS_T.h \
  IFRService/IFR_BasicS_T.inl \
  IFRService/IFR_ComponentsS.h \
  IFRService/IFR_ComponentsS.inl \
  IFRService/IFR_ComponentsS_T.cpp \
  IFRService/IFR_ComponentsS_T.h \
  IFRService/IFR_ComponentsS_T.inl \
  IFRService/IFR_ExtendedS.h \
  IFRService/IFR_ExtendedS.inl \
  IFRService/IFR_ExtendedS_T.cpp \
  IFRService/IFR_ExtendedS_T.h \
  IFRService/IFR_ExtendedS_T.inl \
  IFRService/IFR_Service_Loader.h \
  IFRService/IFR_Service_Utils.h \
  IFRService/IFR_Service_Utils_T.cpp \
  IFRService/IFR_Service_Utils_T.h \
  IFRService/IFR_macro.h \
  IFRService/IRObject_i.h \
  IFRService/InterfaceAttrExtension_i.h \
  IFRService/InterfaceDef_i.h \
  IFRService/LocalInterfaceDef_i.h \
  IFRService/ModuleDef_i.h \
  IFRService/NativeDef_i.h \
  IFRService/OperationDef_i.h \
  IFRService/Options.h \
  IFRService/PrimitiveDef_i.h \
  IFRService/ProvidesDef_i.h \
  IFRService/PublishesDef_i.h \
  IFRService/RecursDef_i.h \
  IFRService/Repository_i.h \
  IFRService/SequenceDef_i.h \
  IFRService/StringDef_i.h \
  IFRService/StructDef_i.h \
  IFRService/TypedefDef_i.h \
  IFRService/UnionDef_i.h \
  IFRService/UsesDef_i.h \
  IFRService/ValueBoxDef_i.h \
  IFRService/ValueDef_i.h \
  IFRService/ValueMemberDef_i.h \
  IFRService/WstringDef_i.h \
  IFRService/concrete_classes.h \
  IFRService/ifr_service_export.h

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  IFRService.rc


## Makefile.RTCORBAEvent.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if BUILD_RT_CORBA
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_RTCORBAEvent.la

libTAO_RTCORBAEvent_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTCORBAEVENT_BUILD_DLL

libTAO_RTCORBAEvent_la_SOURCES = \
  Event/EC_RTCORBA_Dispatching.cpp \
  Event/EC_RTCORBA_Factory.cpp

libTAO_RTCORBAEvent_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTCORBAEvent_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_RTPortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_RTCORBA.la \
  libTAO_RTEvent_Serv.la \
  libTAO_RTEvent_Skel.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Event/EC_RTCORBA_Dispatching.h \
  Event/EC_RTCORBA_Factory.h

endif !BUILD_ACE_FOR_TAO
endif BUILD_RT_CORBA
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

## Makefile.RTEventLogAdmin_IDL.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  RTEventLogAdminC.cpp \
  RTEventLogAdminC.h \
  RTEventLogAdminC.inl \
  RTEventLogAdminS.cpp \
  RTEventLogAdminS.h \
  RTEventLogAdminS.inl

CLEANFILES += \
  RTEventLogAdmin-stamp \
  RTEventLogAdminC.cpp \
  RTEventLogAdminC.h \
  RTEventLogAdminC.inl \
  RTEventLogAdminS.cpp \
  RTEventLogAdminS.h \
  RTEventLogAdminS.inl

RTEventLogAdminC.cpp RTEventLogAdminC.h RTEventLogAdminC.inl RTEventLogAdminS.cpp RTEventLogAdminS.h RTEventLogAdminS.inl: RTEventLogAdmin-stamp

RTEventLogAdmin-stamp: $(srcdir)/RTEventLogAdmin.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,stub_export_macro=TAO_RTEventLog_Export -Wb,stub_export_include=orbsvcs/Log/rteventlog_export.h -Wb,skel_export_macro=TAO_RTEventLog_Skel_Export -Wb,skel_export_include=orbsvcs/Log/rteventlog_skel_export.h $(srcdir)/RTEventLogAdmin.idl
	@touch $@

nobase_include_HEADERS += \
  RTEventLogAdmin.idl

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

## Makefile.RTEventLogAdmin.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_RTEventLogAdmin.la

libTAO_RTEventLogAdmin_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTEVENTLOG_BUILD_DLL

libTAO_RTEventLogAdmin_la_SOURCES = \
  RTEventLogAdminC.cpp

libTAO_RTEventLogAdmin_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTEventLogAdmin_la_LIBADD = \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Log/rteventlog_export.h \
  RTEventLogAdminC.h \
  RTEventLogAdminC.inl

pkgconfig_DATA += \
  TAO_RTEventLogAdmin.pc

CLEANFILES += \
  TAO_RTEventLogAdmin.pc

TAO_RTEventLogAdmin.pc: ${top_builddir}/config.status ${srcdir}/TAO_RTEventLogAdmin.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_RTEventLogAdmin.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  TAO_RTEventLogAdmin.pc.in


## Makefile.RTSched.am

if BUILD_EXCEPTIONS

BUILT_SOURCES += \
  RtecSchedulerC.cpp \
  RtecSchedulerC.h \
  RtecSchedulerC.inl \
  RtecSchedulerS.cpp \
  RtecSchedulerS.h \
  RtecSchedulerS.inl

CLEANFILES += \
  RtecScheduler-stamp \
  RtecSchedulerC.cpp \
  RtecSchedulerC.h \
  RtecSchedulerC.inl \
  RtecSchedulerS.cpp \
  RtecSchedulerS.h \
  RtecSchedulerS.inl

RtecSchedulerC.cpp RtecSchedulerC.h RtecSchedulerC.inl RtecSchedulerS.cpp RtecSchedulerS.h RtecSchedulerS.inl: RtecScheduler-stamp

RtecScheduler-stamp: $(srcdir)/RtecScheduler.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_RTSched_Export -Wb,export_include=orbsvcs/Sched/sched_export.h $(srcdir)/RtecScheduler.idl
	@touch $@

lib_LTLIBRARIES += libTAO_RTSched.la

libTAO_RTSched_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTSCHED_BUILD_DLL

libTAO_RTSched_la_SOURCES = \
  RtecSchedulerC.cpp \
  RtecSchedulerS.cpp \
  Runtime_Scheduler.cpp \
  Sched/Config_Scheduler.cpp \
  Sched/DynSched.cpp \
  Sched/Reconfig_Sched_Utils.cpp \
  Sched/SchedEntry.cpp \
  Sched/Scheduler.cpp \
  Sched/Scheduler_Generic.cpp \
  Sched/Strategy_Scheduler.cpp \
  Scheduler_Factory.cpp \
  Scheduler_Utilities.cpp

libTAO_RTSched_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTSched_la_LIBADD = \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  libTAO_CosNaming.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  RtecScheduler.idl \
  RtecSchedulerC.h \
  RtecSchedulerC.inl \
  RtecSchedulerS.h \
  RtecSchedulerS.inl \
  Runtime_Scheduler.h \
  Sched/Config_Scheduler.h \
  Sched/DynSched.h \
  Sched/DynSched.inl \
  Sched/Reconfig_Sched_Utils.h \
  Sched/Reconfig_Sched_Utils_T.cpp \
  Sched/SchedEntry.h \
  Sched/SchedEntry.inl \
  Sched/Scheduler.h \
  Sched/Scheduler_Generic.h \
  Sched/Strategy_Scheduler.h \
  Scheduler_Factory.h \
  Scheduler_Factory.inl \
  Scheduler_Utilities.h \
  Scheduler_Utilities.inl

endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  RTSched.rc


## Makefile.RTEventLogAdmin_Skel.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS

lib_LTLIBRARIES += libTAO_RTEventLogAdmin_Skel.la

libTAO_RTEventLogAdmin_Skel_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTEVENTLOG_SKEL_BUILD_DLL

libTAO_RTEventLogAdmin_Skel_la_SOURCES = \
  RTEventLogAdminS.cpp

libTAO_RTEventLogAdmin_Skel_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTEventLogAdmin_Skel_la_LIBADD = \
  libTAO_RTEvent_Skel.la \
  libTAO_DsLogAdmin_Skel.la \
  libTAO_RTEventLogAdmin.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Log/rteventlog_skel_export.h \
  RTEventLogAdminS.h \
  RTEventLogAdminS.inl

pkgconfig_DATA += \
  TAO_RTEventLogAdmin_Skel.pc

CLEANFILES += \
  TAO_RTEventLogAdmin_Skel.pc

TAO_RTEventLogAdmin_Skel.pc: ${top_builddir}/config.status ${srcdir}/TAO_RTEventLogAdmin_Skel.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_RTEventLogAdmin_Skel.pc.in

endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  TAO_RTEventLogAdmin_Skel.pc.in


## Makefile.RTEventLogAdmin_Serv.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_RTEventLogAdmin_Serv.la

libTAO_RTEventLogAdmin_Serv_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTEVENTLOG_SERV_BUILD_DLL

libTAO_RTEventLogAdmin_Serv_la_SOURCES = \
  Log/RTEventLogConsumer.cpp \
  Log/RTEventLogFactory_i.cpp \
  Log/RTEventLogNotification.cpp \
  Log/RTEventLog_i.cpp

libTAO_RTEventLogAdmin_Serv_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTEventLogAdmin_Serv_la_LIBADD = \
  libTAO_RTSched.la \
  libTAO_CosNaming.la \
  libTAO_RTEvent_Serv.la \
  libTAO_DsLogAdmin_Serv.la \
  $(TAO_BUILDDIR)/tao/libTAO_Utils.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  libTAO_RTEventLogAdmin_Skel.la \
  libTAO_RTEvent_Skel.la \
  libTAO_DsLogAdmin_Skel.la \
  libTAO_RTEventLogAdmin.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  libTAO_DsLogAdmin.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Log/RTEventLogConsumer.h \
  Log/RTEventLogFactory_i.h \
  Log/RTEventLogNotification.h \
  Log/RTEventLog_i.h \
  Log/rteventlog_serv_export.h

pkgconfig_DATA += \
  TAO_RTEventLogAdmin_Serv.pc

CLEANFILES += \
  TAO_RTEventLogAdmin_Serv.pc

TAO_RTEventLogAdmin_Serv.pc: ${top_builddir}/config.status ${srcdir}/TAO_RTEventLogAdmin_Serv.pc.in
	${top_builddir}/config.status --file $@:${srcdir}/TAO_RTEventLogAdmin_Serv.pc.in

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  TAO_RTEventLogAdmin_Serv.pc.in


## Makefile.RTKokyuEvent.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_RTKokyuEvent.la

libTAO_RTKokyuEvent_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -I$(ACE_ROOT)/Kokyu \
  -DTAO_RTKOKYUEVENT_BUILD_DLL

libTAO_RTKokyuEvent_la_SOURCES = \
  Event/EC_Kokyu_Dispatching.cpp \
  Event/EC_Kokyu_Factory.cpp \
  Event/EC_Kokyu_Filter.cpp \
  Event/EC_Kokyu_Filter_Builder.cpp \
  Event/EC_Kokyu_Scheduling.cpp

libTAO_RTKokyuEvent_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTKokyuEvent_la_LIBADD = \
  $(ACE_BUILDDIR)/Kokyu/libKokyu.la \
  libTAO_RTSched.la \
  libTAO_CosNaming.la \
  libTAO_RTEvent_Serv.la \
  libTAO_RTEvent_Skel.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Event/EC_Kokyu_Dispatching.h \
  Event/EC_Kokyu_Dispatching.inl \
  Event/EC_Kokyu_Factory.h \
  Event/EC_Kokyu_Factory.inl \
  Event/EC_Kokyu_Filter.h \
  Event/EC_Kokyu_Filter_Builder.h \
  Event/EC_Kokyu_Filter_Builder.inl \
  Event/EC_Kokyu_Scheduling.h \
  Event/EC_Kokyu_Scheduling.inl

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

## Makefile.RTSchedEvent.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if !BUILD_ACE_FOR_TAO

lib_LTLIBRARIES += libTAO_RTSchedEvent.la

libTAO_RTSchedEvent_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_RTSCHEDEVENT_BUILD_DLL

libTAO_RTSchedEvent_la_SOURCES = \
  Event/EC_Gateway_Sched.cpp \
  Event/EC_Priority_Dispatching.cpp \
  Event/EC_Priority_Scheduling.cpp \
  Event/EC_Sched_Factory.cpp \
  Event/EC_Sched_Filter.cpp \
  Event/EC_Sched_Filter_Builder.cpp

libTAO_RTSchedEvent_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RTSchedEvent_la_LIBADD = \
  libTAO_RTSched.la \
  libTAO_CosNaming.la \
  libTAO_RTEvent_Serv.la \
  libTAO_RTEvent_Skel.la \
  libTAO_RTEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_Messaging.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Event/EC_Gateway_Sched.h \
  Event/EC_Priority_Dispatching.h \
  Event/EC_Priority_Scheduling.h \
  Event/EC_Priority_Scheduling.inl \
  Event/EC_Sched_Factory.h \
  Event/EC_Sched_Factory.inl \
  Event/EC_Sched_Filter.h \
  Event/EC_Sched_Filter_Builder.h \
  Event/EC_Sched_Filter_Builder.inl

endif !BUILD_ACE_FOR_TAO
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  RTSchedEvent.rc


## Makefile.RT_Notification.am

if BUILD_EXCEPTIONS
if BUILD_RT_CORBA

lib_LTLIBRARIES += libTAO_RT_Notification.la

libTAO_RT_Notification_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_HAS_TYPED_EVENT_CHANNEL \
  -DTAO_RT_NOTIFY_BUILD_DLL

libTAO_RT_Notification_la_SOURCES = \
  Notify/RT_Builder.cpp \
  Notify/RT_Factory.cpp \
  Notify/RT_Notify_Service.cpp \
  Notify/RT_POA_Helper.cpp \
  Notify/RT_Properties.cpp \
  Notify/Structured/RT_StructuredProxyPushSupplier.cpp

libTAO_RT_Notification_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_RT_Notification_la_LIBADD = \
  libTAO_CosNotification_Serv.la \
  $(TAO_BUILDDIR)/tao/libTAO_DynamicAny.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL_Parser.la \
  $(TAO_BUILDDIR)/tao/ETCL/libTAO_ETCL.la \
  $(ACE_BUILDDIR)/ace/ETCL/libACE_ETCL.la \
  libTAO_CosNotification_Skel.la \
  libTAO_CosEvent_Skel.la \
  libTAO_CosNotification.la \
  libTAO_CosEvent.la \
  libTAO_Svc_Utils.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_RTCORBA.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  Notify/RT_Builder.h \
  Notify/RT_Factory.h \
  Notify/RT_Notify_Service.h \
  Notify/RT_POA_Helper.h \
  Notify/RT_Properties.h \
  Notify/RT_Properties.inl \
  Notify/Structured/RT_StructuredProxyPushSupplier.h

endif BUILD_RT_CORBA
endif BUILD_EXCEPTIONS

EXTRA_DIST += \
  RT_Notification.rc


## Makefile.Security.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if BUILD_INTERCEPTORS

BUILT_SOURCES += \
  CSIC.cpp \
  CSIC.h \
  CSIC.inl \
  CSIS.inl

CLEANFILES += \
  CSI-stamp \
  CSIC.cpp \
  CSIC.h \
  CSIC.inl \
  CSIS.inl

CSIC.cpp CSIC.h CSIC.inl CSIS.inl: CSI-stamp

CSI-stamp: $(srcdir)/CSI.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/CSI.idl
	@touch $@

BUILT_SOURCES += \
  CSIIOPC.cpp \
  CSIIOPC.h \
  CSIIOPC.inl \
  CSIIOPS.inl

CLEANFILES += \
  CSIIOP-stamp \
  CSIIOPC.cpp \
  CSIIOPC.h \
  CSIIOPC.inl \
  CSIIOPS.inl

CSIIOPC.cpp CSIIOPC.h CSIIOPC.inl CSIIOPS.inl: CSIIOP-stamp

CSIIOP-stamp: $(srcdir)/CSIIOP.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/CSIIOP.idl
	@touch $@

BUILT_SOURCES += \
  GSSUPC.cpp \
  GSSUPC.h \
  GSSUPC.inl \
  GSSUPS.inl

CLEANFILES += \
  GSSUP-stamp \
  GSSUPC.cpp \
  GSSUPC.h \
  GSSUPC.inl \
  GSSUPS.inl

GSSUPC.cpp GSSUPC.h GSSUPC.inl GSSUPS.inl: GSSUP-stamp

GSSUP-stamp: $(srcdir)/GSSUP.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/GSSUP.idl
	@touch $@

BUILT_SOURCES += \
  SecurityC.cpp \
  SecurityC.h \
  SecurityC.inl \
  SecurityS.cpp \
  SecurityS.h \
  SecurityS.inl

CLEANFILES += \
  Security-stamp \
  SecurityC.cpp \
  SecurityC.h \
  SecurityC.inl \
  SecurityS.cpp \
  SecurityS.h \
  SecurityS.inl

SecurityC.cpp SecurityC.h SecurityC.inl SecurityS.cpp SecurityS.h SecurityS.inl: Security-stamp

Security-stamp: $(srcdir)/Security.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/Security.idl
	@touch $@

BUILT_SOURCES += \
  SecurityLevel1C.cpp \
  SecurityLevel1C.h \
  SecurityLevel1C.inl \
  SecurityLevel1S.cpp \
  SecurityLevel1S.h \
  SecurityLevel1S.inl

CLEANFILES += \
  SecurityLevel1-stamp \
  SecurityLevel1C.cpp \
  SecurityLevel1C.h \
  SecurityLevel1C.inl \
  SecurityLevel1S.cpp \
  SecurityLevel1S.h \
  SecurityLevel1S.inl

SecurityLevel1C.cpp SecurityLevel1C.h SecurityLevel1C.inl SecurityLevel1S.cpp SecurityLevel1S.h SecurityLevel1S.inl: SecurityLevel1-stamp

SecurityLevel1-stamp: $(srcdir)/SecurityLevel1.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/SecurityLevel1.idl
	@touch $@

BUILT_SOURCES += \
  SecurityLevel2C.cpp \
  SecurityLevel2C.h \
  SecurityLevel2C.inl \
  SecurityLevel2S.cpp \
  SecurityLevel2S.h \
  SecurityLevel2S.inl

CLEANFILES += \
  SecurityLevel2-stamp \
  SecurityLevel2C.cpp \
  SecurityLevel2C.h \
  SecurityLevel2C.inl \
  SecurityLevel2S.cpp \
  SecurityLevel2S.h \
  SecurityLevel2S.inl

SecurityLevel2C.cpp SecurityLevel2C.h SecurityLevel2C.inl SecurityLevel2S.cpp SecurityLevel2S.h SecurityLevel2S.inl: SecurityLevel2-stamp

SecurityLevel2-stamp: $(srcdir)/SecurityLevel2.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/SecurityLevel2.idl
	@touch $@

BUILT_SOURCES += \
  SecurityLevel3C.cpp \
  SecurityLevel3C.h \
  SecurityLevel3C.inl \
  SecurityLevel3S.inl

CLEANFILES += \
  SecurityLevel3-stamp \
  SecurityLevel3C.cpp \
  SecurityLevel3C.h \
  SecurityLevel3C.inl \
  SecurityLevel3S.inl

SecurityLevel3C.cpp SecurityLevel3C.h SecurityLevel3C.inl SecurityLevel3S.inl: SecurityLevel3-stamp

SecurityLevel3-stamp: $(srcdir)/SecurityLevel3.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_Security_Export -Wb,export_include=orbsvcs/Security/security_export.h $(srcdir)/SecurityLevel3.idl
	@touch $@

lib_LTLIBRARIES += libTAO_Security.la

libTAO_Security_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DTAO_SECURITY_BUILD_DLL

libTAO_Security_la_SOURCES = \
  CSIC.cpp \
  CSIIOPC.cpp \
  GSSUPC.cpp \
  Security/CSI_Utils.cpp \
  Security/SL2_EstablishTrustPolicy.cpp \
  Security/SL2_QOPPolicy.cpp \
  Security/SL2_SecurityManager.cpp \
  Security/SL3_ContextEstablishmentPolicy.cpp \
  Security/SL3_CredentialsAcquirerFactory.cpp \
  Security/SL3_CredentialsCurator.cpp \
  Security/SL3_ObjectCredentialsPolicy.cpp \
  Security/SL3_PolicyFactory.cpp \
  Security/SL3_SecurityCurrent.cpp \
  Security/SL3_SecurityCurrent_Impl.cpp \
  Security/SL3_SecurityManager.cpp \
  Security/Security_Current.cpp \
  Security/Security_Current_Impl.cpp \
  Security/Security_ORBInitializer.cpp \
  Security/Security_PolicyFactory.cpp \
  SecurityC.cpp \
  SecurityLevel1C.cpp \
  SecurityLevel1S.cpp \
  SecurityLevel2C.cpp \
  SecurityLevel2S.cpp \
  SecurityLevel3C.cpp \
  SecurityS.cpp

libTAO_Security_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@

libTAO_Security_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la

nobase_include_HEADERS += \
  CSI.idl \
  CSIC.h \
  CSIC.inl \
  CSIIOP.idl \
  CSIIOPC.h \
  CSIIOPC.inl \
  CSIIOPS.inl \
  CSIS.inl \
  GSSUP.idl \
  GSSUPC.h \
  GSSUPC.inl \
  GSSUPS.inl \
  Security.idl \
  Security/CSI_Utils.h \
  Security/SL2_EstablishTrustPolicy.h \
  Security/SL2_QOPPolicy.h \
  Security/SL2_SecurityManager.h \
  Security/SL3_ContextEstablishmentPolicy.h \
  Security/SL3_CredentialsAcquirerFactory.h \
  Security/SL3_CredentialsCurator.h \
  Security/SL3_ObjectCredentialsPolicy.h \
  Security/SL3_PolicyFactory.h \
  Security/SL3_SecurityCurrent.h \
  Security/SL3_SecurityCurrent.inl \
  Security/SL3_SecurityCurrent_Impl.h \
  Security/SL3_SecurityManager.h \
  Security/Security_Current.h \
  Security/Security_Current.inl \
  Security/Security_Current_Impl.h \
  Security/Security_ORBInitializer.h \
  Security/Security_PolicyFactory.h \
  Security/security_export.h \
  SecurityC.h \
  SecurityC.inl \
  SecurityLevel1.idl \
  SecurityLevel1C.h \
  SecurityLevel1C.inl \
  SecurityLevel1S.h \
  SecurityLevel1S.inl \
  SecurityLevel2.idl \
  SecurityLevel2C.h \
  SecurityLevel2C.inl \
  SecurityLevel2S.h \
  SecurityLevel2S.inl \
  SecurityLevel3.idl \
  SecurityLevel3C.h \
  SecurityLevel3C.inl \
  SecurityLevel3S.inl \
  SecurityS.h \
  SecurityS.inl

endif BUILD_INTERCEPTORS
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  Security.rc


## Makefile.SSLIOP.am

if BUILD_CORBA_MESSAGING
if BUILD_EXCEPTIONS
if BUILD_INTERCEPTORS
if BUILD_SSL

BUILT_SOURCES += \
  SSLIOPC.cpp \
  SSLIOPC.h \
  SSLIOPC.inl \
  SSLIOPS.h

CLEANFILES += \
  SSLIOP-stamp \
  SSLIOPC.cpp \
  SSLIOPC.h \
  SSLIOPC.inl \
  SSLIOPS.h

SSLIOPC.cpp SSLIOPC.h SSLIOPC.inl SSLIOPS.h: SSLIOP-stamp

SSLIOP-stamp: $(srcdir)/SSLIOP.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_SSLIOP_Export -Wb,export_include=orbsvcs/SSLIOP/SSLIOP_Export.h -SS $(srcdir)/SSLIOP.idl
	@touch $@

BUILT_SOURCES += \
  SSLIOP/ssl_endpointsC.cpp \
  SSLIOP/ssl_endpointsC.h \
  SSLIOP/ssl_endpointsS.h

CLEANFILES += \
  SSLIOP/ssl_endpoints-stamp \
  SSLIOP/ssl_endpointsC.cpp \
  SSLIOP/ssl_endpointsC.h \
  SSLIOP/ssl_endpointsS.h

SSLIOP/ssl_endpointsC.cpp SSLIOP/ssl_endpointsC.h SSLIOP/ssl_endpointsS.h: SSLIOP/ssl_endpoints-stamp

SSLIOP/ssl_endpoints-stamp: $(srcdir)/SSLIOP/ssl_endpoints.pidl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -I$(TAO_ROOT)/orbsvcs -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -Wb,export_macro=TAO_SSLIOP_Export -Wb,export_include=orbsvcs/SSLIOP/SSLIOP_Export.h -SS -Sci -Gp -Gd -Sa -Sorb -o SSLIOP $(srcdir)/SSLIOP/ssl_endpoints.pidl
	@touch $@

lib_LTLIBRARIES += libTAO_SSLIOP.la

libTAO_SSLIOP_la_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR) \
  -I$(TAO_ROOT) \
  -I$(TAO_BUILDDIR) \
  -I$(TAO_ROOT)/orbsvcs \
  -I$(TAO_BUILDDIR)/orbsvcs \
  -DACE_HAS_SSL=1 \
  @ACE_TLS_CPPFLAGS@ \
  -DTAO_SSLIOP_BUILD_DLL

libTAO_SSLIOP_la_SOURCES = \
  ./SSLIOP/IIOP_SSL_Acceptor.cpp \
  ./SSLIOP/IIOP_SSL_Connection_Handler.cpp \
  ./SSLIOP/IIOP_SSL_Connector.cpp \
  ./SSLIOP/IIOP_SSL_Transport.cpp \
  ./SSLIOP/SSLIOP_Accept_Strategy.cpp \
  ./SSLIOP/SSLIOP_Acceptor.cpp \
  ./SSLIOP/SSLIOP_ClientCredentials.cpp \
  ./SSLIOP/SSLIOP_Connection_Handler.cpp \
  ./SSLIOP/SSLIOP_Connector.cpp \
  ./SSLIOP/SSLIOP_Credentials.cpp \
  ./SSLIOP/SSLIOP_CredentialsAcquirer.cpp \
  ./SSLIOP/SSLIOP_CredentialsAcquirerFactory.cpp \
  ./SSLIOP/SSLIOP_Current.cpp \
  ./SSLIOP/SSLIOP_Current_Impl.cpp \
  ./SSLIOP/SSLIOP_EVP_PKEY.cpp \
  ./SSLIOP/SSLIOP_Endpoint.cpp \
  ./SSLIOP/SSLIOP_Factory.cpp \
  ./SSLIOP/SSLIOP_Invocation_Interceptor.cpp \
  ./SSLIOP/SSLIOP_ORBInitializer.cpp \
  ./SSLIOP/SSLIOP_OwnCredentials.cpp \
  ./SSLIOP/SSLIOP_Profile.cpp \
  ./SSLIOP/SSLIOP_TargetCredentials.cpp \
  ./SSLIOP/SSLIOP_Transport.cpp \
  ./SSLIOP/SSLIOP_Util.cpp \
  ./SSLIOP/params_dup.c \
  ./SSLIOP/ssl_endpointsC.cpp \
  SSLIOPC.cpp

libTAO_SSLIOP_la_LDFLAGS = \
 -version-number @TAO_MAJOR@:@TAO_MINOR@:@TAO_BETA@ @ACE_TLS_LDFLAGS@

libTAO_SSLIOP_la_LIBADD = \
  $(TAO_BUILDDIR)/tao/libTAO_PI_Server.la \
  $(ACE_BUILDDIR)/ace/SSL/libACE_SSL.la \
  libTAO_Security.la \
  $(TAO_BUILDDIR)/tao/libTAO_PI.la \
  $(TAO_BUILDDIR)/tao/libTAO_CodecFactory.la \
  $(TAO_BUILDDIR)/tao/libTAO_Valuetype.la \
  $(TAO_BUILDDIR)/tao/libTAO_PortableServer.la \
  $(TAO_BUILDDIR)/tao/libTAO_AnyTypeCode.la \
  $(TAO_BUILDDIR)/tao/libTAO.la \
  $(ACE_BUILDDIR)/ace/libACE.la \
  @ACE_TLS_LIBS@

nobase_include_HEADERS += \
  ./SSLIOP/IIOP_SSL_Acceptor.h \
  ./SSLIOP/IIOP_SSL_Connection_Handler.h \
  ./SSLIOP/IIOP_SSL_Connection_Handler.inl \
  ./SSLIOP/IIOP_SSL_Connector.h \
  ./SSLIOP/IIOP_SSL_Transport.h \
  ./SSLIOP/SSLIOP_Accept_Strategy.h \
  ./SSLIOP/SSLIOP_Acceptor.h \
  ./SSLIOP/SSLIOP_Acceptor.inl \
  ./SSLIOP/SSLIOP_ClientCredentials.h \
  ./SSLIOP/SSLIOP_Connection_Handler.h \
  ./SSLIOP/SSLIOP_Connection_Handler.inl \
  ./SSLIOP/SSLIOP_Connector.h \
  ./SSLIOP/SSLIOP_Credentials.h \
  ./SSLIOP/SSLIOP_Credentials.inl \
  ./SSLIOP/SSLIOP_CredentialsAcquirer.h \
  ./SSLIOP/SSLIOP_CredentialsAcquirerFactory.h \
  ./SSLIOP/SSLIOP_Current.h \
  ./SSLIOP/SSLIOP_Current.inl \
  ./SSLIOP/SSLIOP_Current_Impl.h \
  ./SSLIOP/SSLIOP_Current_Impl.inl \
  ./SSLIOP/SSLIOP_EVP_PKEY.h \
  ./SSLIOP/SSLIOP_Endpoint.h \
  ./SSLIOP/SSLIOP_Endpoint.inl \
  ./SSLIOP/SSLIOP_Export.h \
  ./SSLIOP/SSLIOP_Factory.h \
  ./SSLIOP/SSLIOP_Invocation_Interceptor.h \
  ./SSLIOP/SSLIOP_ORBInitializer.h \
  ./SSLIOP/SSLIOP_OpenSSL_st_T.cpp \
  ./SSLIOP/SSLIOP_OpenSSL_st_T.h \
  ./SSLIOP/SSLIOP_OpenSSL_st_T.inl \
  ./SSLIOP/SSLIOP_OwnCredentials.h \
  ./SSLIOP/SSLIOP_Profile.h \
  ./SSLIOP/SSLIOP_SSL.h \
  ./SSLIOP/SSLIOP_TargetCredentials.h \
  ./SSLIOP/SSLIOP_Transport.h \
  ./SSLIOP/SSLIOP_Util.h \
  ./SSLIOP/SSLIOP_X509.h \
  ./SSLIOP/params_dup.h \
  SSLIOP.idl \
  SSLIOP/ssl_endpoints.pidl \
  SSLIOP/ssl_endpointsC.h \
  SSLIOP/ssl_endpointsS.h \
  SSLIOPC.h \
  SSLIOPC.inl \
  SSLIOPS.h

endif BUILD_SSL
endif BUILD_INTERCEPTORS
endif BUILD_EXCEPTIONS
endif BUILD_CORBA_MESSAGING

EXTRA_DIST += \
  SSLIOP.rc


## Clean up template repositories, etc.
clean-local:
	-rm -f *~ *.bak *.rpo *.sym lib*.*_pure_* core core.*
	-rm -f gcctemp.c gcctemp so_locations *.ics
	-rm -rf cxx_repository ptrepository ti_files
	-rm -rf templateregistry ir.out
	-rm -rf ptrepository SunWS_cache Templates.DB
