/* -*- C++ -*- */
// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO/orbsvcs/orbsvcs/IFR_Service
//
// = FILENAME
//    IFR_Service_Utils.h
//
// = DESCRIPTION
//      Implement wrappers useful to IFR Service clients and servers.
//
// = AUTHORS
//    Jeff Parsons <parsons@cs.wustl.edu>
//    Jaiganesh Balasubramanian <jai@doc.ece.uci.edu>
//    Priyanka Gontla <pgontla@doc.ece.uci.edu>
//
// ============================================================================

#ifndef TAO_IFR_SERVICE_UTILS_H
#define TAO_IFR_SERVICE_UTILS_H
#include "ace/pre.h"

#include "tao/corba.h"
#include "tao/PortableServer/PortableServerC.h"
#include "tao/ORB.h"

// Forward decl;
class IFR_ServantLocator;
class TAO_IOR_Multicast;
class ACE_Configuration;
class TAO_Repository_i;

class TAO_IFR_Service_Export TAO_IFR_Server
{
public:
  TAO_IFR_Server (void);
  // Default constructor.
 
  int init_with_orb (int argc,
                     ACE_TCHAR *argv [],
                     CORBA::ORB_ptr orb);
  // Initialize the IFR Service with the command line arguments and
  // the ORB.

  int fini (void);
  // Destroy the child POA created in <init_with_orb>

  ~TAO_Naming_Server (void);
  // Destructor.

protected:
  int init_new_naming (CORBA::ORB_ptr orb,
                       PortableServer::POA_ptr root_poa,
                       const ACE_TCHAR *persistence_location,
                       void *base_addr,
                       size_t context_size,
                       int enable_multicast,
                       int use_storable_context);
  // Helper method: create Naming Service locally.
  // Make the root context of size
  // <context_size>, register it under the <root_poa>, and make the Naming
  // Service persistent if <persistence_location> is not 0.
  // (<persistence_location> specifies name of the file to use for
  // persistent storage).
  // If <enable_multicast> is not zero then the service will respond
  // to multicast location queries.

  int parse_args (int argc, ACE_TCHAR *argv[]);
  // parses the arguments.

  CosNaming::NamingContext_var naming_context_;
  // Root NamingContext_ptr.

  TAO_IOR_Multicast *ior_multicast_;
  // The ior_multicast event handler.

  CORBA::String_var naming_service_ior_;
  // The IOR string of the root naming context.

  TAO_Persistent_Context_Index *context_index_;
  // Pointer to the object used to create/initialize
  // the Naming Service when local persistent Naming Service is
  // desired.

  CORBA::ORB_var orb_;
  // The ORB

  PortableServer::POA_var root_poa_;
  // The Root POA.

  PortableServer::POA_var ns_poa_;
  // The Naming Service POA.

  FILE *ior_output_file_;
  // File to output the Naming Service IOR.

  const ACE_TCHAR *pid_file_name_;
  // File to output the process id.

  size_t context_size_;
  // Size of the hash_table allocated upon the creation of the Naming
  // Service context (if one is created).  Note: all the contexts
  // created under the given context will use the same size for their
  // initial hash table allocations.

  const ACE_TCHAR *persistence_file_name_;
  // Path to the file to be used to store/read in Naming Service
  // persistent state.

  void *base_address_;
  // Address to be used for memory mapping Naming Service state file,
  // identified by the <persistence_file_name_>.

  size_t time_;
  // After how long the server should stop listening to requests (in
  // seconds).

  int multicast_;
  // If not zero multicast is enabled.

  int use_storable_context_;
  // If not zero use flat file persistence
};

class TAO_Naming_Export TAO_Naming_Client
{
  // = TITLE
  //    This class is intended to simplify programs that want to play
  //    the role of Naming Service clients.
  //
  // = DESCRIPTION
  //    Wrapper class that locates the root Naming Context.  It also
  //    defines the operator-> so that <NamingContext> functions like
  //    <resolve>, etc. can be directly called on a
  //    <TAO_Naming_Client> object, and will be forwarded to the root
  //    Naming Context.
public:
  // = Initialization and termination methods.

  TAO_Naming_Client (void);
  // Default constructor.

  int init (CORBA::ORB_ptr orb,
            ACE_Time_Value *timeout = 0);
  // Look for a Naming Service for a period of <timeout> using
  // <resolve_initial_references>.  Return 0 if Naming Service is
  // successfully located, and -1 on failure.

  ~TAO_Naming_Client (void);
  // Destructor.

  CosNaming::NamingContext_ptr operator-> (void) const;
  // Returns a pointer to the root Naming Context.

  CosNaming::NamingContext_ptr get_context (void) const;
  // Returns a pointer to the root Naming Context.  This ptr is
  // duplicated via <_duplicate> so that it can be stored into a
  // <*_var>.

protected:
  CosNaming::NamingContext_var naming_context_;
  // Reference to the root Naming Context.
};

#include "ace/post.h"
#endif /* TAO_NAMING_UTILS_H */
