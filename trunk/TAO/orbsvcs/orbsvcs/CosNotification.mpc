// -*- MPC -*-
// $Id$

project(CosNotification_IDL) : orbsvcslib, core, event, tao_versioning_idl_defaults {
  custom_only = 1
  idlflags   += -Wb,stub_export_macro=TAO_Notify_Export -Wb,stub_export_include=orbsvcs/Notify/notify_export.h -Wb,skel_export_macro=TAO_Notify_Skel_Export -Wb,skel_export_include=orbsvcs/Notify/notify_skel_export.h

  IDL_Files {
    CosNotification.idl
    CosNotifyComm.idl
    CosNotifyFilter.idl
    CosNotifyChannelAdmin.idl
    NotifyExt.idl
    Event_Forwarder.idl
  }
}

project(CosNotification) : orbsvcslib, core, event {
  sharedname   = TAO_CosNotification
  dynamicflags = TAO_NOTIFY_BUILD_DLL
  tagchecks   += Notify
  after       += CosNotification_IDL

  IDL_Files {
  }

  Source_Files {
    CosNotificationC.cpp
    CosNotifyCommC.cpp
    CosNotifyFilterC.cpp
    CosNotifyChannelAdminC.cpp
    NotifyExtC.cpp
    Event_ForwarderC.cpp
    Notify/Notify_Extensions.cpp
  }

  Header_Files {
    CosNotificationC.h
    CosNotifyCommC.h
    CosNotifyFilterC.h
    CosNotifyChannelAdminC.h
    NotifyExtC.h
    Event_ForwarderC.h
    Notify/Notify_Extensions.h
    Notify/notify_export.h
  }

  Inline_Files {
    CosNotificationC.inl
    CosNotifyCommC.inl
    CosNotifyFilterC.inl
    CosNotifyChannelAdminC.inl
    NotifyExtC.inl
    Event_ForwarderC.inl
  }

  Template_Files {
  }

  Resource_Files {
    CosNotification.rc
  }

  Pkgconfig_Files {
    TAO_CosNotification.pc.in
  }
}


project(CosNotification_Skel) : orbsvcslib, core, notification, event_skel, portableserver {
  sharedname   = TAO_CosNotification_Skel
  dynamicflags = TAO_NOTIFY_SKEL_BUILD_DLL
  tagchecks   += Notify

  IDL_Files {
  }

  Source_Files {
    CosNotificationS.cpp
    CosNotifyCommS.cpp
    CosNotifyFilterS.cpp
    CosNotifyChannelAdminS.cpp
    NotifyExtS.cpp
    Event_ForwarderS.cpp
  }

  Header_Files {
    CosNotificationS.h
    CosNotifyCommS.h
    CosNotifyFilterS.h
    CosNotifyChannelAdminS.h
    NotifyExtS.h
    Event_ForwarderS.h

    CosNotificationS_T.h
    CosNotifyCommS_T.h
    CosNotifyFilterS_T.h
    CosNotifyChannelAdminS_T.h
    NotifyExtS_T.h
    Event_ForwarderS_T.h

    Notify/notify_skel_export.h
  }

  Inline_Files {
    CosNotificationS.inl
    CosNotifyCommS.inl
    CosNotifyFilterS.inl
    CosNotifyChannelAdminS.inl
    NotifyExtS.inl
    Event_ForwarderS.inl

    CosNotificationS_T.inl
    CosNotifyCommS_T.inl
    CosNotifyFilterS_T.inl
    CosNotifyChannelAdminS_T.inl
    NotifyExtS_T.inl
    Event_ForwarderS_T.inl
  }

  Template_Files {
    CosNotificationS_T.cpp
    CosNotifyCommS_T.cpp
    CosNotifyFilterS_T.cpp
    CosNotifyChannelAdminS_T.cpp
    NotifyExtS_T.cpp
    Event_ForwarderS_T.cpp
  }

  Pkgconfig_Files {
    TAO_CosNotification_Skel.pc.in
  }
}

project(CosNotification_Serv) : orbsvcslib, svc_utils, core, notification_skel, dynamicany, etcl{
  sharedname   = TAO_CosNotification_Serv
  dynamicflags = TAO_NOTIFY_SERV_BUILD_DLL
  tagchecks   += Notify

  IDL_Files {
  }

  // The following could be simplified if RT stuff was
  // put into another subdirectory.

  Source_Files {
    Notify/Admin.cpp
    Notify/AdminProperties.cpp
    Notify/Bit_Vector.cpp
    Notify/Buffering_Strategy.cpp
    Notify/Builder.cpp
    Notify/Consumer.cpp
    Notify/ConsumerAdmin.cpp
    Notify/CosNotify_Initializer.cpp
    Notify/CosNotify_Service.cpp
    Notify/Default_Factory.cpp
    Notify/Delivery_Request.cpp
    Notify/ETCL_Filter.cpp
    Notify/ETCL_FilterFactory.cpp
    Notify/Event.cpp
    Notify/EventChannel.cpp
    Notify/EventChannelFactory.cpp
    Notify/EventType.cpp
    Notify/EventTypeSeq.cpp
    Notify/Event_Manager.cpp
    Notify/Event_Persistence_Factory.cpp
    Notify/FilterAdmin.cpp
    Notify/ID_Factory.cpp
    Notify/Method_Request.cpp
    Notify/Method_Request_Dispatch.cpp
    Notify/Method_Request_Event.cpp
    Notify/Method_Request_Lookup.cpp
    Notify/Method_Request_Shutdown.cpp
    Notify/Method_Request_Updates.cpp
    Notify/Name_Value_Pair.cpp
    Notify/Notify_Constraint_Interpreter.cpp
    Notify/Notify_Constraint_Visitors.cpp
    Notify/Notify_Default_Collection_Factory.cpp
    Notify/Notify_Default_CO_Factory.cpp
    Notify/Notify_Default_EMO_Factory.cpp
    Notify/Notify_Default_POA_Factory.cpp
    Notify/Notify_EventChannelFactory_i.cpp
    Notify/Object.cpp
    Notify/Peer.cpp
    Notify/Persistent_File_Allocator.cpp
    Notify/POA_Helper.cpp
    Notify/Properties.cpp
    Notify/PropertySeq.cpp
    Notify/Property_Boolean.cpp
    Notify/Proxy.cpp
    Notify/ProxyConsumer.cpp
    Notify/ProxySupplier.cpp
    Notify/QoSProperties.cpp
    Notify/Random_File.cpp
    Notify/Reactive_Task.cpp
    Notify/Refcountable.cpp
    Notify/Reconnection_Registry.cpp
    Notify/Routing_Slip.cpp
    Notify/Routing_Slip_Persistence_Manager.cpp
    Notify/Routing_Slip_Queue.cpp
    Notify/Service.cpp
    Notify/Subscription_Change_Worker.cpp
    Notify/Supplier.cpp
    Notify/SupplierAdmin.cpp
    Notify/Standard_Event_Persistence.cpp
    Notify/ThreadPool_Task.cpp
    Notify/Timer_Queue.cpp
    Notify/Timer_Reactor.cpp
    Notify/Topology_Loader.cpp
    Notify/Topology_Object.cpp
    Notify/Topology_Saver.cpp
    Notify/Worker_Task.cpp
    Notify/Any/AnyEvent.cpp
    Notify/Any/CosEC_ProxyPushConsumer.cpp
    Notify/Any/CosEC_ProxyPushSupplier.cpp
    Notify/Any/ProxyPushConsumer.cpp
    Notify/Any/ProxyPushSupplier.cpp
    Notify/Any/PushConsumer.cpp
    Notify/Any/PushSupplier.cpp
    Notify/Sequence/SequenceProxyPushConsumer.cpp
    Notify/Sequence/SequenceProxyPushSupplier.cpp
    Notify/Sequence/SequencePushConsumer.cpp
    Notify/Sequence/SequencePushSupplier.cpp
    Notify/Structured/StructuredEvent.cpp
    Notify/Structured/StructuredProxyPushConsumer.cpp
    Notify/Structured/StructuredProxyPushSupplier.cpp
    Notify/Structured/StructuredPushConsumer.cpp
    Notify/Structured/StructuredPushSupplier.cpp
  }

  Header_Files {
    Notify/notify_serv_export.h
  }

  Inline_Files {
  }

  Template_Files {
  }

  Pkgconfig_Files {
    TAO_CosNotification_Serv.pc.in
  }

}

project(CosNotification_Persist) : notification_serv, core, acexml {
  sharedname   = TAO_CosNotification_Persist
  dynamicflags = TAO_NOTIFY_PERSIST_BUILD_DLL

  IDL_Files {
  }

  Source_Files {
    Notify/XML_*.cpp
  }

  Header_Files {
    Notify/notify_persist_export.h
  }

  Inline_Files {
  }

  Template_Files {
  }
}
