// $Id:

CONTENT

This directory contains files implementing CosNaming idl interface
from CORBA COSS, as well as a few utilities.


ARCHITECTURE

The architecture of the Naming Service (i.e., CosNaming)
implementation follows the Bridge pattern.
Below is the list of player classes:

 * TAO_Naming_Context (in Naming_Context.h) - this class inherits from
   POA skeleton, and plays the role of 'Abstraction' (aka 'Interface') -
   it forwards all client requests to a 'ConcreteImplementor' through an
   'Implementor' pointer.

 * TAO_Naming_Context_Impl (in Naming_Context.h) - this is an abstract base class for all
   concrete implementations of NamingContext functionality (i.e., 'Implementor').

 * TAO_Hash_Naming_Context (in Hash_Naming_Context.h) - this
   class inherits from TAO_Naming_Context_Impl.  It is a
   'ConcreteImplementor' which uses ACE_Hash_Map_Manager to implement
   NamingContext functionality.

 * A set of classes implementing a persistent version of the Naming
   Context functionality.  These are the classes in
   Shared_Hash_Map_T.{h, cpp}, and Persistent* files.

The class structure described above makes it easy to:

1) Create and plug different Naming Service implementations by
   subclassing TAO_Naming_Context_Impl.

2) Dynamically load an appropriate Naming Service implementation at
   run-time based on the config file entry by making TAO_Naming_Context_Impl
   inherit from ACE_Service_Object, etc.


PERSISTENCE

The first version of Persistent Naming implementation is here!
It is based on the memory-mapped files.  Directions on how to use the
Persistent version of the Naming Service can be found in
TAO/orbsvcs/Naming_Service/README (by using a command-line option).

The current set of classes implementing persistent version of the
Naming Service will be restructured for one of the upcoming releases
(to factor out commonality, get rid of unnecessary generality, etc.),
at which time more documentation will be available in this README file
and in the source code.



TO-DO

- settle templates on all the compilers, check <destroy> test.

- Make binding iterators observers of their corresponding Naming
  Context, so they die once the Naming Context dies (use either
  ref. counted locks or delayed death)

- Factor out initialization of a NamingContext into a static function
  on an appropriate class.

- Factor out Naming_Util initialization code into a factory

- Check for proper destruction of contexts

- code review/comments of Entries, Persistent_Entries,
  Persistent_Context_Index, Naming_Utils, Bindings_Iterator

- Update README file

- Add example for persistent Naming Service
- migrate ACE_Shared_Map to ACE and use in ACE Naming Service
- update Naming Service slides
- do code review of Simple_Naming
