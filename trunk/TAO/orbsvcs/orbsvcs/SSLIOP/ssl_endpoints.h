// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:150

#ifndef _TAO_IDL_SSL_ENDPOINTSC_H_
#define _TAO_IDL_SSL_ENDPOINTSC_H_

#include /**/ "ace/pre.h"

#include "tao/ORB.h"


#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/CDR.h"
#include "tao/Environment.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "orbsvcs/SSLIOPC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_SSLIOP_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_SSLIOP_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:101

#if !defined (_TAO_SSLENDPOINTSEQUENCE_CH_)
#define _TAO_SSLENDPOINTSEQUENCE_CH_

class TAO_SSLEndpointSequence;

typedef
  TAO_FixedSeq_Var_T<
      TAO_SSLEndpointSequence,
      SSLIOP::SSL
    >
  TAO_SSLEndpointSequence_var;

typedef
  TAO_Seq_Out_T<
      TAO_SSLEndpointSequence,
      TAO_SSLEndpointSequence_var,
      SSLIOP::SSL
    >
  TAO_SSLEndpointSequence_out;

class TAO_SSLIOP_Export TAO_SSLEndpointSequence
  : public
      TAO_Unbounded_Sequence<
          SSLIOP::SSL
        >
{
public:
  TAO_SSLEndpointSequence (void);
  TAO_SSLEndpointSequence (CORBA::ULong max);
  TAO_SSLEndpointSequence (
      CORBA::ULong max,
      CORBA::ULong length,
      SSLIOP::SSL* buffer,
      CORBA::Boolean release = 0
    );
  TAO_SSLEndpointSequence (const TAO_SSLEndpointSequence &);
  ~TAO_SSLEndpointSequence (void);

  static void _tao_any_destructor (void *);

  typedef TAO_SSLEndpointSequence_var _var_type;
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:44

extern TAO_SSLIOP_Export ::CORBA::TypeCode_ptr  _tc_TAO_SSLEndpointSequence;

TAO_SSLIOP_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const TAO_SSLEndpointSequence &
  );
TAO_SSLIOP_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    TAO_SSLEndpointSequence &
  );

// TAO_IDL - Generated from
// be/be_visitor_root/cdr_op.cpp:64


// TAO_IDL - Generated from
// be/be_codegen.cpp:911

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include /**/ "ace/post.h"

#endif /* ifndef */
