// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington 
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#include "RtecSchedulerC.h"

#if !defined (__ACE_INLINE__)
#include "RtecSchedulerC.i"
#endif // !defined INLINE

static const CORBA::Long _oc_RtecScheduler_Time[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
  5, 0x54696d65, 0x0,  // name = Time
  CORBA::tk_double,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_Time (CORBA::tk_alias, sizeof (_oc_RtecScheduler_Time), (unsigned char *) &_oc_RtecScheduler_Time, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Time = &_tc__tc_RtecScheduler_Time;

static const CORBA::Long _oc_RtecScheduler_Period[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  29, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5065, 0x72696f64, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Period:1.0
  7, 0x50657269, 0x6f640000,  // name = Period
  CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_Period (CORBA::tk_alias, sizeof (_oc_RtecScheduler_Period), (unsigned char *) &_oc_RtecScheduler_Period, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Period = &_tc__tc_RtecScheduler_Period;

static const CORBA::Long _oc_RtecScheduler_Quantum[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5175, 0x616e7475, 0x6d3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Quantum:1.0
  8, 0x5175616e, 0x74756d00,  // name = Quantum
  CORBA::tk_alias, // typecode kind for typedefs
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
    5, 0x54696d65, 0x0,  // name = Time
    CORBA::tk_double,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_Quantum (CORBA::tk_alias, sizeof (_oc_RtecScheduler_Quantum), (unsigned char *) &_oc_RtecScheduler_Quantum, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Quantum = &_tc__tc_RtecScheduler_Quantum;

const CORBA::Long RtecScheduler::NO_QUANTUM = 0;


static const CORBA::Long _oc_RtecScheduler_Importance[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  33, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f496d, 0x706f7274, 0x616e6365, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Importance:1.0
  11, 0x496d706f, 0x7274616e, 0x63650000,  // name = Importance
  5, // member count
    9, 0x56455259, 0x5f4c4f57, 0x0,  // name = VERY_LOW
    4, 0x4c4f5700,  // name = LOW
    7, 0x4d454449, 0x554d0000,  // name = MEDIUM
    5, 0x48494748, 0x0,  // name = HIGH
    10, 0x56455259, 0x5f484947, 0x48000000,  // name = VERY_HIGH
};
static CORBA::TypeCode _tc__tc_RtecScheduler_Importance (CORBA::tk_enum, sizeof (_oc_RtecScheduler_Importance), (unsigned char *) &_oc_RtecScheduler_Importance, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Importance = &_tc__tc_RtecScheduler_Importance;

static const CORBA::Long _oc_RtecScheduler_handle_t[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
  9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
  CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_handle_t (CORBA::tk_alias, sizeof (_oc_RtecScheduler_handle_t), (unsigned char *) &_oc_RtecScheduler_handle_t, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_handle_t = &_tc__tc_RtecScheduler_handle_t;

static const CORBA::Long _oc_RtecScheduler_Dependency_Info[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  38, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Dependency_Info:1.0
  16, 0x44657065, 0x6e64656e, 0x63795f49, 0x6e666f00,  // name = Dependency_Info
  2, // member count
    16, 0x6e756d62, 0x65725f6f, 0x665f6361, 0x6c6c7300,  // name = number_of_calls
    CORBA::tk_long,

    8, 0x72745f69, 0x6e666f00,  // name = rt_info
    CORBA::tk_alias, // typecode kind for typedefs
    60, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
      9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
      CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_Dependency_Info (CORBA::tk_struct, sizeof (_oc_RtecScheduler_Dependency_Info), (unsigned char *) &_oc_RtecScheduler_Dependency_Info, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Dependency_Info = &_tc__tc_RtecScheduler_Dependency_Info;

// *************************************************************
// class RtecScheduler::_tao__seq_Dependency_Set
// *************************************************************

// copy constructor
RtecScheduler::_tao__seq_Dependency_Set::_tao__seq_Dependency_Set (const RtecScheduler::_tao__seq_Dependency_Set &seq)
	: maximum_ (seq.maximum_),
	  length_ (seq.length_),
	  buffer_ (RtecScheduler::_tao__seq_Dependency_Set::allocbuf (seq.maximum_)),
	  release_ (1) // we always own it
{
  for (CORBA::ULong i=0; i < seq.length_; i++)
  	this->buffer_[i] = seq.buffer_[i];
}

// destructor
RtecScheduler::_tao__seq_Dependency_Set::~_tao__seq_Dependency_Set (void)
{
  if (this->release_) // we own the buffer
  {
    RtecScheduler::_tao__seq_Dependency_Set::freebuf (this->buffer_);
  }
}

// assignment operator
RtecScheduler::_tao__seq_Dependency_Set& 
RtecScheduler::_tao__seq_Dependency_Set::operator= (const RtecScheduler::_tao__seq_Dependency_Set &seq)
{
  if (this == &seq) return *this;
  if (this->release_)
  {
    RtecScheduler::_tao__seq_Dependency_Set::freebuf (this->buffer_);
  }
  this->length_ = seq.length_;
  this->maximum_ = seq.maximum_;
  this->buffer_ = RtecScheduler::_tao__seq_Dependency_Set::allocbuf (seq.maximum_),
  this->release_ =1; // we always own it
  for (CORBA::ULong i=0; i < seq.length_; i++)
  	this->buffer_[i] = seq.buffer_[i];
  return *this;
}

void
RtecScheduler::_tao__seq_Dependency_Set::length (CORBA::ULong length)
{
  if (length > this->maximum_)
  {
    RtecScheduler::Dependency_Info *tmp = RtecScheduler::_tao__seq_Dependency_Set::allocbuf (length);
    if (tmp == 0)
      return;
    for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp[i] = this->buffer_[i];
    }
    if (this->release_)
      RtecScheduler::_tao__seq_Dependency_Set::freebuf (this->buffer_);
    this->buffer_ = tmp;
    this->release_ = 1;
    this->maximum_ = length;
  }
this->length_ = length;
}

static const CORBA::Long _oc_RtecScheduler__tao__seq_Dependency_Set[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
  176, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Dependency_Info:1.0
    16, 0x44657065, 0x6e64656e, 0x63795f49, 0x6e666f00,  // name = Dependency_Info
    2, // member count
      16, 0x6e756d62, 0x65725f6f, 0x665f6361, 0x6c6c7300,  // name = number_of_calls
      CORBA::tk_long,

      8, 0x72745f69, 0x6e666f00,  // name = rt_info
      CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
        9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
        CORBA::tk_long,

    0,
};
static CORBA::TypeCode _tc__tc_RtecScheduler__tao__seq_Dependency_Set (CORBA::tk_sequence, sizeof (_oc_RtecScheduler__tao__seq_Dependency_Set), (unsigned char *) &_oc_RtecScheduler__tao__seq_Dependency_Set, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc__tao__seq_Dependency_Set = &_tc__tc_RtecScheduler__tao__seq_Dependency_Set;

static const CORBA::Long _oc_RtecScheduler_Dependency_Set[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  37, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f536574, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Dependency_Set:1.0
  15, 0x44657065, 0x6e64656e, 0x63795f53, 0x65740000,  // name = Dependency_Set
  CORBA::tk_sequence, // typecode kind
  200, // encapsulation length
  TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
  176, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Dependency_Info:1.0
    16, 0x44657065, 0x6e64656e, 0x63795f49, 0x6e666f00,  // name = Dependency_Info
    2, // member count
      16, 0x6e756d62, 0x65725f6f, 0x665f6361, 0x6c6c7300,  // name = number_of_calls
      CORBA::tk_long,

      8, 0x72745f69, 0x6e666f00,  // name = rt_info
      CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
        9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
        CORBA::tk_long,

    0,
};
static CORBA::TypeCode _tc__tc_RtecScheduler_Dependency_Set (CORBA::tk_alias, sizeof (_oc_RtecScheduler_Dependency_Set), (unsigned char *) &_oc_RtecScheduler_Dependency_Set, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Dependency_Set = &_tc__tc_RtecScheduler_Dependency_Set;

static const CORBA::Long _oc_RtecScheduler_OS_Priority[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  34, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4f53, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/OS_Priority:1.0
  12, 0x4f535f50, 0x72696f72, 0x69747900,  // name = OS_Priority
  CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_OS_Priority (CORBA::tk_alias, sizeof (_oc_RtecScheduler_OS_Priority), (unsigned char *) &_oc_RtecScheduler_OS_Priority, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_OS_Priority = &_tc__tc_RtecScheduler_OS_Priority;

static const CORBA::Long _oc_RtecScheduler_Sub_Priority[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  35, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5375, 0x625f5072, 0x696f7269, 0x74793a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Sub_Priority:1.0
  13, 0x5375625f, 0x5072696f, 0x72697479, 0x0,  // name = Sub_Priority
  CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_Sub_Priority (CORBA::tk_alias, sizeof (_oc_RtecScheduler_Sub_Priority), (unsigned char *) &_oc_RtecScheduler_Sub_Priority, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Sub_Priority = &_tc__tc_RtecScheduler_Sub_Priority;

static const CORBA::Long _oc_RtecScheduler_Preemption_Priority[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  42, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5072, 0x65656d70, 0x74696f6e, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Preemption_Priority:1.0
  20, 0x50726565, 0x6d707469, 0x6f6e5f50, 0x72696f72, 0x69747900,  // name = Preemption_Priority
  CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_Preemption_Priority (CORBA::tk_alias, sizeof (_oc_RtecScheduler_Preemption_Priority), (unsigned char *) &_oc_RtecScheduler_Preemption_Priority, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Preemption_Priority = &_tc__tc_RtecScheduler_Preemption_Priority;

static const CORBA::Long _oc_RtecScheduler_RT_Info[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5254, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/RT_Info:1.0
  8, 0x52545f49, 0x6e666f00,  // name = RT_Info
  13, // member count
    12, 0x656e7472, 0x795f706f, 0x696e7400,  // name = entry_point
    CORBA::tk_string, 
    0, // string length
        7, 0x68616e64, 0x6c650000,  // name = handle
    CORBA::tk_alias, // typecode kind for typedefs
    60, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
      9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
      CORBA::tk_long,

    26, 0x776f7273, 0x745f6361, 0x73655f65, 0x78656375, 0x74696f6e, 0x5f74696d, 0x65000000,  // name = worst_case_execution_time
    CORBA::tk_alias, // typecode kind for typedefs
    52, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
      5, 0x54696d65, 0x0,  // name = Time
      CORBA::tk_double,

    23, 0x74797069, 0x63616c5f, 0x65786563, 0x7574696f, 0x6e5f7469, 0x6d650000,  // name = typical_execution_time
    CORBA::tk_alias, // typecode kind for typedefs
    52, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
      5, 0x54696d65, 0x0,  // name = Time
      CORBA::tk_double,

    22, 0x63616368, 0x65645f65, 0x78656375, 0x74696f6e, 0x5f74696d, 0x65000000,  // name = cached_execution_time
    CORBA::tk_alias, // typecode kind for typedefs
    52, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
      5, 0x54696d65, 0x0,  // name = Time
      CORBA::tk_double,

    7, 0x70657269, 0x6f640000,  // name = period
    CORBA::tk_alias, // typecode kind for typedefs
    56, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      29, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5065, 0x72696f64, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Period:1.0
      7, 0x50657269, 0x6f640000,  // name = Period
      CORBA::tk_long,

    11, 0x696d706f, 0x7274616e, 0x63650000,  // name = importance
    CORBA::tk_enum, // typecode kind
    128, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f496d, 0x706f7274, 0x616e6365, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Importance:1.0
    11, 0x496d706f, 0x7274616e, 0x63650000,  // name = Importance
    5, // member count
      9, 0x56455259, 0x5f4c4f57, 0x0,  // name = VERY_LOW
      4, 0x4c4f5700,  // name = LOW
      7, 0x4d454449, 0x554d0000,  // name = MEDIUM
      5, 0x48494748, 0x0,  // name = HIGH
      10, 0x56455259, 0x5f484947, 0x48000000,  // name = VERY_HIGH
    8, 0x7175616e, 0x74756d00,  // name = quantum
    CORBA::tk_alias, // typecode kind for typedefs
    112, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5175, 0x616e7475, 0x6d3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Quantum:1.0
      8, 0x5175616e, 0x74756d00,  // name = Quantum
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

    8, 0x74687265, 0x61647300,  // name = threads
    CORBA::tk_long,

    13, 0x64657065, 0x6e64656e, 0x63696573, 0x0,  // name = dependencies
    CORBA::tk_alias, // typecode kind for typedefs
    268, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      37, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f536574, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Dependency_Set:1.0
      15, 0x44657065, 0x6e64656e, 0x63795f53, 0x65740000,  // name = Dependency_Set
      CORBA::tk_sequence, // typecode kind
      200, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
      176, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        38, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Dependency_Info:1.0
        16, 0x44657065, 0x6e64656e, 0x63795f49, 0x6e666f00,  // name = Dependency_Info
        2, // member count
          16, 0x6e756d62, 0x65725f6f, 0x665f6361, 0x6c6c7300,  // name = number_of_calls
          CORBA::tk_long,

          8, 0x72745f69, 0x6e666f00,  // name = rt_info
          CORBA::tk_alias, // typecode kind for typedefs
          60, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
            9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
            CORBA::tk_long,

            0,
    9, 0x7072696f, 0x72697479, 0x0,  // name = priority
    CORBA::tk_alias, // typecode kind for typedefs
    64, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4f53, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/OS_Priority:1.0
      12, 0x4f535f50, 0x72696f72, 0x69747900,  // name = OS_Priority
      CORBA::tk_long,

    12, 0x73756270, 0x72696f72, 0x69747900,  // name = subpriority
    CORBA::tk_alias, // typecode kind for typedefs
    68, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5375, 0x625f5072, 0x696f7269, 0x74793a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Sub_Priority:1.0
      13, 0x5375625f, 0x5072696f, 0x72697479, 0x0,  // name = Sub_Priority
      CORBA::tk_long,

    20, 0x70726565, 0x6d707469, 0x6f6e5f70, 0x72696f72, 0x69747900,  // name = preemption_priority
    CORBA::tk_alias, // typecode kind for typedefs
    80, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      42, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5072, 0x65656d70, 0x74696f6e, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Preemption_Priority:1.0
      20, 0x50726565, 0x6d707469, 0x6f6e5f50, 0x72696f72, 0x69747900,  // name = Preemption_Priority
      CORBA::tk_long,

};
static CORBA::TypeCode _tc__tc_RtecScheduler_RT_Info (CORBA::tk_struct, sizeof (_oc_RtecScheduler_RT_Info), (unsigned char *) &_oc_RtecScheduler_RT_Info, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_RT_Info = &_tc__tc_RtecScheduler_RT_Info;

static const CORBA::Long _oc_RtecScheduler_DUPLICATE_NAME[] =
{
  0, // byte order
  37, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4455, 0x504c4943, 0x4154455f, 0x4e414d45, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/DUPLICATE_NAME:1.0
  15, 0x4455504c, 0x49434154, 0x455f4e41, 0x4d450000,  // name = DUPLICATE_NAME
  0, // member count
};
static CORBA::TypeCode _tc__tc_RtecScheduler_DUPLICATE_NAME (CORBA::tk_struct, sizeof (_oc_RtecScheduler_DUPLICATE_NAME), (unsigned char *) &_oc_RtecScheduler_DUPLICATE_NAME, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_DUPLICATE_NAME = &_tc__tc_RtecScheduler_DUPLICATE_NAME;

static const CORBA::Long _oc_RtecScheduler_UNKNOWN_TASK[] =
{
  0, // byte order
  35, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f554e, 0x4b4e4f57, 0x4e5f5441, 0x534b3a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/UNKNOWN_TASK:1.0
  13, 0x554e4b4e, 0x4f574e5f, 0x5441534b, 0x0,  // name = UNKNOWN_TASK
  0, // member count
};
static CORBA::TypeCode _tc__tc_RtecScheduler_UNKNOWN_TASK (CORBA::tk_struct, sizeof (_oc_RtecScheduler_UNKNOWN_TASK), (unsigned char *) &_oc_RtecScheduler_UNKNOWN_TASK, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_UNKNOWN_TASK = &_tc__tc_RtecScheduler_UNKNOWN_TASK;

static const CORBA::Long _oc_RtecScheduler_NOT_SCHEDULED[] =
{
  0, // byte order
  36, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4e4f, 0x545f5343, 0x48454455, 0x4c45443a, 0x312e3000,  // repository ID = IDL:RtecScheduler/NOT_SCHEDULED:1.0
  14, 0x4e4f545f, 0x53434845, 0x44554c45, 0x44000000,  // name = NOT_SCHEDULED
  0, // member count
};
static CORBA::TypeCode _tc__tc_RtecScheduler_NOT_SCHEDULED (CORBA::tk_struct, sizeof (_oc_RtecScheduler_NOT_SCHEDULED), (unsigned char *) &_oc_RtecScheduler_NOT_SCHEDULED, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_NOT_SCHEDULED = &_tc__tc_RtecScheduler_NOT_SCHEDULED;

static const CORBA::Long _oc_RtecScheduler_UTILIZATION_BOUND_EXCEEDED[] =
{
  0, // byte order
  49, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5554, 0x494c495a, 0x4154494f, 0x4e5f424f, 0x554e445f, 0x45584345, 0x45444544, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/UTILIZATION_BOUND_EXCEEDED:1.0
  27, 0x5554494c, 0x495a4154, 0x494f4e5f, 0x424f554e, 0x445f4558, 0x43454544, 0x45440000,  // name = UTILIZATION_BOUND_EXCEEDED
  0, // member count
};
static CORBA::TypeCode _tc__tc_RtecScheduler_UTILIZATION_BOUND_EXCEEDED (CORBA::tk_struct, sizeof (_oc_RtecScheduler_UTILIZATION_BOUND_EXCEEDED), (unsigned char *) &_oc_RtecScheduler_UTILIZATION_BOUND_EXCEEDED, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_UTILIZATION_BOUND_EXCEEDED = &_tc__tc_RtecScheduler_UTILIZATION_BOUND_EXCEEDED;

static const CORBA::Long _oc_RtecScheduler_INSUFFICIENT_THREAD_PRIORITY_LEVELS[] =
{
  0, // byte order
  58, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f494e, 0x53554646, 0x49434945, 0x4e545f54, 0x48524541, 0x445f5052, 0x494f5249, 0x54595f4c, 0x4556454c, 0x533a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/INSUFFICIENT_THREAD_PRIORITY_LEVELS:1.0
  36, 0x494e5355, 0x46464943, 0x49454e54, 0x5f544852, 0x4541445f, 0x5052494f, 0x52495459, 0x5f4c4556, 0x454c5300,  // name = INSUFFICIENT_THREAD_PRIORITY_LEVELS
  0, // member count
};
static CORBA::TypeCode _tc__tc_RtecScheduler_INSUFFICIENT_THREAD_PRIORITY_LEVELS (CORBA::tk_struct, sizeof (_oc_RtecScheduler_INSUFFICIENT_THREAD_PRIORITY_LEVELS), (unsigned char *) &_oc_RtecScheduler_INSUFFICIENT_THREAD_PRIORITY_LEVELS, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_INSUFFICIENT_THREAD_PRIORITY_LEVELS = &_tc__tc_RtecScheduler_INSUFFICIENT_THREAD_PRIORITY_LEVELS;

static const CORBA::Long _oc_RtecScheduler_TASK_COUNT_MISMATCH[] =
{
  0, // byte order
  42, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5441, 0x534b5f43, 0x4f554e54, 0x5f4d4953, 0x4d415443, 0x483a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/TASK_COUNT_MISMATCH:1.0
  20, 0x5441534b, 0x5f434f55, 0x4e545f4d, 0x49534d41, 0x54434800,  // name = TASK_COUNT_MISMATCH
  0, // member count
};
static CORBA::TypeCode _tc__tc_RtecScheduler_TASK_COUNT_MISMATCH (CORBA::tk_struct, sizeof (_oc_RtecScheduler_TASK_COUNT_MISMATCH), (unsigned char *) &_oc_RtecScheduler_TASK_COUNT_MISMATCH, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_TASK_COUNT_MISMATCH = &_tc__tc_RtecScheduler_TASK_COUNT_MISMATCH;

// *************************************************************
// class RtecScheduler::_tao__seq_RT_Info_Set
// *************************************************************

// copy constructor
RtecScheduler::_tao__seq_RT_Info_Set::_tao__seq_RT_Info_Set (const RtecScheduler::_tao__seq_RT_Info_Set &seq)
	: maximum_ (seq.maximum_),
	  length_ (seq.length_),
	  buffer_ (RtecScheduler::_tao__seq_RT_Info_Set::allocbuf (seq.maximum_)),
	  release_ (1) // we always own it
{
  for (CORBA::ULong i=0; i < seq.length_; i++)
  	this->buffer_[i] = seq.buffer_[i];
}

// destructor
RtecScheduler::_tao__seq_RT_Info_Set::~_tao__seq_RT_Info_Set (void)
{
  if (this->release_) // we own the buffer
  {
    RtecScheduler::_tao__seq_RT_Info_Set::freebuf (this->buffer_);
  }
}

// assignment operator
RtecScheduler::_tao__seq_RT_Info_Set& 
RtecScheduler::_tao__seq_RT_Info_Set::operator= (const RtecScheduler::_tao__seq_RT_Info_Set &seq)
{
  if (this == &seq) return *this;
  if (this->release_)
  {
    RtecScheduler::_tao__seq_RT_Info_Set::freebuf (this->buffer_);
  }
  this->length_ = seq.length_;
  this->maximum_ = seq.maximum_;
  this->buffer_ = RtecScheduler::_tao__seq_RT_Info_Set::allocbuf (seq.maximum_),
  this->release_ =1; // we always own it
  for (CORBA::ULong i=0; i < seq.length_; i++)
  	this->buffer_[i] = seq.buffer_[i];
  return *this;
}

void
RtecScheduler::_tao__seq_RT_Info_Set::length (CORBA::ULong length)
{
  if (length > this->maximum_)
  {
    RtecScheduler::RT_Info *tmp = RtecScheduler::_tao__seq_RT_Info_Set::allocbuf (length);
    if (tmp == 0)
      return;
    for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp[i] = this->buffer_[i];
    }
    if (this->release_)
      RtecScheduler::_tao__seq_RT_Info_Set::freebuf (this->buffer_);
    this->buffer_ = tmp;
    this->release_ = 1;
    this->maximum_ = length;
  }
this->length_ = length;
}

static const CORBA::Long _oc_RtecScheduler__tao__seq_RT_Info_Set[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
  1392, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5254, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/RT_Info:1.0
    8, 0x52545f49, 0x6e666f00,  // name = RT_Info
    13, // member count
      12, 0x656e7472, 0x795f706f, 0x696e7400,  // name = entry_point
      CORBA::tk_string, 
      0, // string length
            7, 0x68616e64, 0x6c650000,  // name = handle
      CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
        9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
        CORBA::tk_long,

      26, 0x776f7273, 0x745f6361, 0x73655f65, 0x78656375, 0x74696f6e, 0x5f74696d, 0x65000000,  // name = worst_case_execution_time
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

      23, 0x74797069, 0x63616c5f, 0x65786563, 0x7574696f, 0x6e5f7469, 0x6d650000,  // name = typical_execution_time
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

      22, 0x63616368, 0x65645f65, 0x78656375, 0x74696f6e, 0x5f74696d, 0x65000000,  // name = cached_execution_time
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

      7, 0x70657269, 0x6f640000,  // name = period
      CORBA::tk_alias, // typecode kind for typedefs
      56, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        29, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5065, 0x72696f64, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Period:1.0
        7, 0x50657269, 0x6f640000,  // name = Period
        CORBA::tk_long,

      11, 0x696d706f, 0x7274616e, 0x63650000,  // name = importance
      CORBA::tk_enum, // typecode kind
      128, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      33, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f496d, 0x706f7274, 0x616e6365, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Importance:1.0
      11, 0x496d706f, 0x7274616e, 0x63650000,  // name = Importance
      5, // member count
        9, 0x56455259, 0x5f4c4f57, 0x0,  // name = VERY_LOW
        4, 0x4c4f5700,  // name = LOW
        7, 0x4d454449, 0x554d0000,  // name = MEDIUM
        5, 0x48494748, 0x0,  // name = HIGH
        10, 0x56455259, 0x5f484947, 0x48000000,  // name = VERY_HIGH
      8, 0x7175616e, 0x74756d00,  // name = quantum
      CORBA::tk_alias, // typecode kind for typedefs
      112, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5175, 0x616e7475, 0x6d3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Quantum:1.0
        8, 0x5175616e, 0x74756d00,  // name = Quantum
        CORBA::tk_alias, // typecode kind for typedefs
        52, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
          5, 0x54696d65, 0x0,  // name = Time
          CORBA::tk_double,

      8, 0x74687265, 0x61647300,  // name = threads
      CORBA::tk_long,

      13, 0x64657065, 0x6e64656e, 0x63696573, 0x0,  // name = dependencies
      CORBA::tk_alias, // typecode kind for typedefs
      268, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        37, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f536574, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Dependency_Set:1.0
        15, 0x44657065, 0x6e64656e, 0x63795f53, 0x65740000,  // name = Dependency_Set
        CORBA::tk_sequence, // typecode kind
        200, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
                CORBA::tk_struct, // typecode kind
        176, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          38, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Dependency_Info:1.0
          16, 0x44657065, 0x6e64656e, 0x63795f49, 0x6e666f00,  // name = Dependency_Info
          2, // member count
            16, 0x6e756d62, 0x65725f6f, 0x665f6361, 0x6c6c7300,  // name = number_of_calls
            CORBA::tk_long,

            8, 0x72745f69, 0x6e666f00,  // name = rt_info
            CORBA::tk_alias, // typecode kind for typedefs
            60, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
              9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
              CORBA::tk_long,

                0,
      9, 0x7072696f, 0x72697479, 0x0,  // name = priority
      CORBA::tk_alias, // typecode kind for typedefs
      64, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4f53, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/OS_Priority:1.0
        12, 0x4f535f50, 0x72696f72, 0x69747900,  // name = OS_Priority
        CORBA::tk_long,

      12, 0x73756270, 0x72696f72, 0x69747900,  // name = subpriority
      CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5375, 0x625f5072, 0x696f7269, 0x74793a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Sub_Priority:1.0
        13, 0x5375625f, 0x5072696f, 0x72697479, 0x0,  // name = Sub_Priority
        CORBA::tk_long,

      20, 0x70726565, 0x6d707469, 0x6f6e5f70, 0x72696f72, 0x69747900,  // name = preemption_priority
      CORBA::tk_alias, // typecode kind for typedefs
      80, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        42, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5072, 0x65656d70, 0x74696f6e, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Preemption_Priority:1.0
        20, 0x50726565, 0x6d707469, 0x6f6e5f50, 0x72696f72, 0x69747900,  // name = Preemption_Priority
        CORBA::tk_long,

    0,
};
static CORBA::TypeCode _tc__tc_RtecScheduler__tao__seq_RT_Info_Set (CORBA::tk_sequence, sizeof (_oc_RtecScheduler__tao__seq_RT_Info_Set), (unsigned char *) &_oc_RtecScheduler__tao__seq_RT_Info_Set, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc__tao__seq_RT_Info_Set = &_tc__tc_RtecScheduler__tao__seq_RT_Info_Set;

static const CORBA::Long _oc_RtecScheduler_RT_Info_Set[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  34, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5254, 0x5f496e66, 0x6f5f5365, 0x743a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/RT_Info_Set:1.0
  12, 0x52545f49, 0x6e666f5f, 0x53657400,  // name = RT_Info_Set
  CORBA::tk_sequence, // typecode kind
  1416, // encapsulation length
  TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
  1392, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5254, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/RT_Info:1.0
    8, 0x52545f49, 0x6e666f00,  // name = RT_Info
    13, // member count
      12, 0x656e7472, 0x795f706f, 0x696e7400,  // name = entry_point
      CORBA::tk_string, 
      0, // string length
            7, 0x68616e64, 0x6c650000,  // name = handle
      CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
        9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
        CORBA::tk_long,

      26, 0x776f7273, 0x745f6361, 0x73655f65, 0x78656375, 0x74696f6e, 0x5f74696d, 0x65000000,  // name = worst_case_execution_time
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

      23, 0x74797069, 0x63616c5f, 0x65786563, 0x7574696f, 0x6e5f7469, 0x6d650000,  // name = typical_execution_time
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

      22, 0x63616368, 0x65645f65, 0x78656375, 0x74696f6e, 0x5f74696d, 0x65000000,  // name = cached_execution_time
      CORBA::tk_alias, // typecode kind for typedefs
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
        5, 0x54696d65, 0x0,  // name = Time
        CORBA::tk_double,

      7, 0x70657269, 0x6f640000,  // name = period
      CORBA::tk_alias, // typecode kind for typedefs
      56, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        29, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5065, 0x72696f64, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Period:1.0
        7, 0x50657269, 0x6f640000,  // name = Period
        CORBA::tk_long,

      11, 0x696d706f, 0x7274616e, 0x63650000,  // name = importance
      CORBA::tk_enum, // typecode kind
      128, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      33, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f496d, 0x706f7274, 0x616e6365, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Importance:1.0
      11, 0x496d706f, 0x7274616e, 0x63650000,  // name = Importance
      5, // member count
        9, 0x56455259, 0x5f4c4f57, 0x0,  // name = VERY_LOW
        4, 0x4c4f5700,  // name = LOW
        7, 0x4d454449, 0x554d0000,  // name = MEDIUM
        5, 0x48494748, 0x0,  // name = HIGH
        10, 0x56455259, 0x5f484947, 0x48000000,  // name = VERY_HIGH
      8, 0x7175616e, 0x74756d00,  // name = quantum
      CORBA::tk_alias, // typecode kind for typedefs
      112, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5175, 0x616e7475, 0x6d3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Quantum:1.0
        8, 0x5175616e, 0x74756d00,  // name = Quantum
        CORBA::tk_alias, // typecode kind for typedefs
        52, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          27, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5469, 0x6d653a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Time:1.0
          5, 0x54696d65, 0x0,  // name = Time
          CORBA::tk_double,

      8, 0x74687265, 0x61647300,  // name = threads
      CORBA::tk_long,

      13, 0x64657065, 0x6e64656e, 0x63696573, 0x0,  // name = dependencies
      CORBA::tk_alias, // typecode kind for typedefs
      268, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        37, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f536574, 0x3a312e30, 0x0,  // repository ID = IDL:RtecScheduler/Dependency_Set:1.0
        15, 0x44657065, 0x6e64656e, 0x63795f53, 0x65740000,  // name = Dependency_Set
        CORBA::tk_sequence, // typecode kind
        200, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
                CORBA::tk_struct, // typecode kind
        176, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          38, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4465, 0x70656e64, 0x656e6379, 0x5f496e66, 0x6f3a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Dependency_Info:1.0
          16, 0x44657065, 0x6e64656e, 0x63795f49, 0x6e666f00,  // name = Dependency_Info
          2, // member count
            16, 0x6e756d62, 0x65725f6f, 0x665f6361, 0x6c6c7300,  // name = number_of_calls
            CORBA::tk_long,

            8, 0x72745f69, 0x6e666f00,  // name = rt_info
            CORBA::tk_alias, // typecode kind for typedefs
            60, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              31, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f6861, 0x6e646c65, 0x5f743a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/handle_t:1.0
              9, 0x68616e64, 0x6c655f74, 0x0,  // name = handle_t
              CORBA::tk_long,

                0,
      9, 0x7072696f, 0x72697479, 0x0,  // name = priority
      CORBA::tk_alias, // typecode kind for typedefs
      64, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f4f53, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/OS_Priority:1.0
        12, 0x4f535f50, 0x72696f72, 0x69747900,  // name = OS_Priority
        CORBA::tk_long,

      12, 0x73756270, 0x72696f72, 0x69747900,  // name = subpriority
      CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5375, 0x625f5072, 0x696f7269, 0x74793a31, 0x2e300000,  // repository ID = IDL:RtecScheduler/Sub_Priority:1.0
        13, 0x5375625f, 0x5072696f, 0x72697479, 0x0,  // name = Sub_Priority
        CORBA::tk_long,

      20, 0x70726565, 0x6d707469, 0x6f6e5f70, 0x72696f72, 0x69747900,  // name = preemption_priority
      CORBA::tk_alias, // typecode kind for typedefs
      80, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        42, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5072, 0x65656d70, 0x74696f6e, 0x5f507269, 0x6f726974, 0x793a312e, 0x30000000,  // repository ID = IDL:RtecScheduler/Preemption_Priority:1.0
        20, 0x50726565, 0x6d707469, 0x6f6e5f50, 0x72696f72, 0x69747900,  // name = Preemption_Priority
        CORBA::tk_long,

    0,
};
static CORBA::TypeCode _tc__tc_RtecScheduler_RT_Info_Set (CORBA::tk_alias, sizeof (_oc_RtecScheduler_RT_Info_Set), (unsigned char *) &_oc_RtecScheduler_RT_Info_Set, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_RT_Info_Set = &_tc__tc_RtecScheduler_RT_Info_Set;

RtecScheduler::Scheduler_ptr RtecScheduler::Scheduler::_duplicate (RtecScheduler::Scheduler_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();
  
  return obj;
} // end of _duplicate

RtecScheduler::Scheduler_ptr RtecScheduler::Scheduler::_narrow (CORBA::Object_ptr obj, CORBA::Environment &env)
{
  if (CORBA::is_nil (obj)) return RtecScheduler::Scheduler::_nil ();
  if (obj->_is_a ("IDL:RtecScheduler/Scheduler:1.0", env))
  {
    STUB_Object *istub;
    RtecScheduler::Scheduler_ptr new_obj; // to be returned 
    if (obj->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
      return RtecScheduler::Scheduler::_nil ();
    
    obj->Release (); // need this since QueryIntf bumped our refcount
    new_obj = new RtecScheduler::Scheduler (istub); // construct obj ref using the stub object
    return new_obj;
  } // end of if
  return RtecScheduler::Scheduler::_nil (); // _narrow failed
} // end of _narrow

RtecScheduler::Scheduler_ptr RtecScheduler::Scheduler::_nil (void)
{
  return (RtecScheduler::Scheduler_ptr)NULL;
} // end of _nil

RtecScheduler::Scheduler_ptr RtecScheduler::Scheduler::_bind (const char *host, CORBA::UShort port, const char *key, CORBA::Environment &env)
{
  CORBA::Object_ptr objref = CORBA::Object::_nil ();
  IIOP_Object *data = new IIOP_Object (host, port, key);
  if (!data) return RtecScheduler::Scheduler::_nil ();
  // get the object_ptr using Query Interface
  if (data->QueryInterface (IID_CORBA_Object, (void **)&objref) != NOERROR)
  {
  	env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
  	return RtecScheduler::Scheduler::_nil ();
  }
  data->Release (); // QueryInterface had bumped up our count
  if (CORBA::is_nil (objref))
  	return RtecScheduler::Scheduler::_nil ();
  else // narrow it
  	return RtecScheduler::Scheduler::_narrow (objref, env);
}

static const TAO_Param_Data RtecScheduler_Scheduler_create_paramdata [] = 
{
  {RtecScheduler::_tc_handle_t, PARAM_RETURN, 0},
  {CORBA::_tc_string, PARAM_IN, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_create_calldata = 
{"create", 1, 2, RtecScheduler_Scheduler_create_paramdata, 0, 0};

RtecScheduler::handle_t  RtecScheduler::Scheduler::create (const char * entry_point, CORBA::Environment &env)
{
  RtecScheduler::handle_t retval;
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return retval;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_create_calldata, &retval, &entry_point);
  return retval;
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_lookup_paramdata [] = 
{
  {RtecScheduler::_tc_handle_t, PARAM_RETURN, 0},
  {CORBA::_tc_string, PARAM_IN, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_lookup_calldata = 
{"lookup", 1, 2, RtecScheduler_Scheduler_lookup_paramdata, 0, 0};

RtecScheduler::handle_t  RtecScheduler::Scheduler::lookup (const char * entry_point, CORBA::Environment &env)
{
  RtecScheduler::handle_t retval;
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return retval;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_lookup_calldata, &retval, &entry_point);
  return retval;
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_get_paramdata [] = 
{
  {RtecScheduler::_tc_RT_Info, PARAM_RETURN, 0},
  {RtecScheduler::_tc_handle_t, PARAM_IN, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_get_calldata = 
{"get", 1, 2, RtecScheduler_Scheduler_get_paramdata, 0, 0};

RtecScheduler::RT_Info * RtecScheduler::Scheduler::get (RtecScheduler::handle_t handle, CORBA::Environment &env)
{
  RtecScheduler::RT_Info *retval;
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return 0;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_get_calldata, &retval, &handle);
  return retval;
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_set_paramdata [] = 
{
  {CORBA::_tc_void, PARAM_RETURN, 0},
  {RtecScheduler::_tc_handle_t, PARAM_IN, 0},
  {RtecScheduler::_tc_Time, PARAM_IN, 0},
  {RtecScheduler::_tc_Time, PARAM_IN, 0},
  {RtecScheduler::_tc_Time, PARAM_IN, 0},
  {RtecScheduler::_tc_Period, PARAM_IN, 0},
  {RtecScheduler::_tc_Importance, PARAM_IN, 0},
  {RtecScheduler::_tc_Quantum, PARAM_IN, 0},
  {CORBA::_tc_long, PARAM_IN, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_set_calldata = 
{"set", 1, 9, RtecScheduler_Scheduler_set_paramdata, 0, 0};

void  RtecScheduler::Scheduler::set (RtecScheduler::handle_t handle, RtecScheduler::Time time, RtecScheduler::Time typical_time, RtecScheduler::Time cached_time, RtecScheduler::Period period, RtecScheduler::Importance importance, RtecScheduler::Quantum quantum, CORBA::Long threads, CORBA::Environment &env)
{
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_set_calldata, 0, &handle, &time, &typical_time, &cached_time, &period, &importance, &quantum, &threads);
  return; // no value
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_add_dependency_paramdata [] = 
{
  {CORBA::_tc_void, PARAM_RETURN, 0},
  {RtecScheduler::_tc_handle_t, PARAM_IN, 0},
  {RtecScheduler::_tc_handle_t, PARAM_IN, 0},
  {CORBA::_tc_long, PARAM_IN, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_add_dependency_calldata = 
{"add_dependency", 1, 4, RtecScheduler_Scheduler_add_dependency_paramdata, 0, 0};

void  RtecScheduler::Scheduler::add_dependency (RtecScheduler::handle_t handle, RtecScheduler::handle_t dependency, CORBA::Long number_of_calls, CORBA::Environment &env)
{
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_add_dependency_calldata, 0, &handle, &dependency, &number_of_calls);
  return; // no value
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_priority_paramdata [] = 
{
  {CORBA::_tc_void, PARAM_RETURN, 0},
  {RtecScheduler::_tc_handle_t, PARAM_IN, 0},
  {RtecScheduler::_tc_OS_Priority, PARAM_OUT, 0},
  {RtecScheduler::_tc_Sub_Priority, PARAM_OUT, 0},
  {RtecScheduler::_tc_Preemption_Priority, PARAM_OUT, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_priority_calldata = 
{"priority", 1, 5, RtecScheduler_Scheduler_priority_paramdata, 0, 0};

void  RtecScheduler::Scheduler::priority (RtecScheduler::handle_t handle, RtecScheduler::OS_Priority_out priority, RtecScheduler::Sub_Priority_out subpriority, RtecScheduler::Preemption_Priority_out p_priority, CORBA::Environment &env)
{
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_priority_calldata, 0, &handle, &priority, &subpriority, &p_priority);
  return; // no value
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_entry_point_priority_paramdata [] = 
{
  {CORBA::_tc_void, PARAM_RETURN, 0},
  {CORBA::_tc_string, PARAM_IN, 0},
  {RtecScheduler::_tc_OS_Priority, PARAM_OUT, 0},
  {RtecScheduler::_tc_Sub_Priority, PARAM_OUT, 0},
  {RtecScheduler::_tc_Preemption_Priority, PARAM_OUT, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_entry_point_priority_calldata = 
{"entry_point_priority", 1, 5, RtecScheduler_Scheduler_entry_point_priority_paramdata, 0, 0};

void  RtecScheduler::Scheduler::entry_point_priority (const char * entry_point, RtecScheduler::OS_Priority_out priority, RtecScheduler::Sub_Priority_out subpriority, RtecScheduler::Preemption_Priority_out p_priority, CORBA::Environment &env)
{
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_call (env, &RtecScheduler_Scheduler_entry_point_priority_calldata, 0, &entry_point, &priority, &subpriority, &p_priority);
  return; // no value
  
}

static const TAO_Param_Data RtecScheduler_Scheduler_compute_scheduling_paramdata [] = 
{
  {CORBA::_tc_void, PARAM_RETURN, 0},
  {CORBA::_tc_long, PARAM_IN, 0},
  {CORBA::_tc_long, PARAM_IN, 0},
  {RtecScheduler::_tc_RT_Info_Set, PARAM_OUT, 0}
};

static const TAO_Call_Data RtecScheduler_Scheduler_compute_scheduling_calldata = 
{"compute_scheduling", 1, 4, RtecScheduler_Scheduler_compute_scheduling_paramdata, 0, 0};

void  RtecScheduler::Scheduler::compute_scheduling (CORBA::Long minimum_priority, CORBA::Long maximum_priority, RtecScheduler::RT_Info_Set_out infos, CORBA::Environment &env)
{
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != NOERROR)
  {
    env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
    return;
  }
  this->Release (); // QueryInterface has bumped up our refcount
  RtecScheduler::RT_Info_Set *_tao_base_infos = new RtecScheduler::RT_Info_Set;
  istub->do_call (env, &RtecScheduler_Scheduler_compute_scheduling_calldata, 0, &minimum_priority, &maximum_priority, _tao_base_infos);
  infos = _tao_base_infos;
  return; // no value
  
}

static const CORBA::Long _oc_RtecScheduler_Scheduler[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  32, 0x49444c3a, 0x52746563, 0x53636865, 0x64756c65, 0x722f5363, 0x68656475, 0x6c65723a, 0x312e3000,  // repository ID = IDL:RtecScheduler/Scheduler:1.0
  10, 0x53636865, 0x64756c65, 0x72000000,  // name = Scheduler,
};
static CORBA::TypeCode _tc__tc_RtecScheduler_Scheduler (CORBA::tk_objref, sizeof (_oc_RtecScheduler_Scheduler), (unsigned char *) &_oc_RtecScheduler_Scheduler, CORBA::B_FALSE);
CORBA::TypeCode_ptr RtecScheduler::_tc_Scheduler = &_tc__tc_RtecScheduler_Scheduler;

