// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington 
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::AlreadyConnected
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::AlreadyConnected::AlreadyConnected (void)
  : CORBA_UserException (_tc_AlreadyConnected)
{
}

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::TypeError
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::TypeError::TypeError (void)
  : CORBA_UserException (_tc_TypeError)
{
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::Dependency_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::Dependency_var::Dependency_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
RtecEventChannelAdmin::Dependency_var::Dependency_var (RtecEventChannelAdmin::Dependency *p)
	: ptr_ (p)
{}

ACE_INLINE
RtecEventChannelAdmin::Dependency_var::Dependency_var (const RtecEventChannelAdmin::Dependency_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new RtecEventChannelAdmin::Dependency(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::Dependency_var::~Dependency_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency_var &
RtecEventChannelAdmin::Dependency_var::operator= (RtecEventChannelAdmin::Dependency *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::Dependency_var &
RtecEventChannelAdmin::Dependency_var::operator= (const RtecEventChannelAdmin::Dependency_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new RtecEventChannelAdmin::Dependency (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const RtecEventChannelAdmin::Dependency *
RtecEventChannelAdmin::Dependency_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency *
RtecEventChannelAdmin::Dependency_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::Dependency_var::operator const RtecEventChannelAdmin::Dependency &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::Dependency_var::operator RtecEventChannelAdmin::Dependency &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::Dependency_var::operator RtecEventChannelAdmin::Dependency &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const RtecEventChannelAdmin::Dependency &
RtecEventChannelAdmin::Dependency_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency &
RtecEventChannelAdmin::Dependency_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE RtecEventChannelAdmin::Dependency &
RtecEventChannelAdmin::Dependency_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency
RtecEventChannelAdmin::Dependency_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency *
RtecEventChannelAdmin::Dependency_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency *
RtecEventChannelAdmin::_tao__seq_DependencySet::allocbuf (CORBA::ULong nelems)
{
  return new RtecEventChannelAdmin::Dependency[nelems]; // allocate from heap
}

ACE_INLINE void
RtecEventChannelAdmin::_tao__seq_DependencySet::freebuf (RtecEventChannelAdmin::Dependency *seq)
{
  delete [] seq;
}

//default constructor
ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet::_tao__seq_DependencySet (void)
	: maximum_ (0),
	  length_ (0),
	  buffer_ (0),
	  release_ (0) // does not own
{}

// constructor for unbounded seq
ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet::_tao__seq_DependencySet(CORBA::ULong max )
	: maximum_ (max),
	  length_ (0),
	  buffer_ (RtecEventChannelAdmin::_tao__seq_DependencySet::allocbuf (max)),
	  release_ (1) // owns
{}

// constructor from data buffer
ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet::_tao__seq_DependencySet (CORBA::ULong max, CORBA::ULong length, 
	RtecEventChannelAdmin::Dependency *value, CORBA::Boolean release)
	: maximum_ (max),
	  length_ (length),
	  buffer_ (value),
	  release_ (release) // ownership depends on release
{}

ACE_INLINE CORBA::ULong
RtecEventChannelAdmin::_tao__seq_DependencySet::maximum (void) const
{
  return this->maximum_;
}

ACE_INLINE CORBA::ULong
RtecEventChannelAdmin::_tao__seq_DependencySet::length  (void) const
{
  return this->length_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency &
RtecEventChannelAdmin::_tao__seq_DependencySet::operator[] (CORBA::ULong index) // read/write
{
  return this->buffer_[index];
}

ACE_INLINE const RtecEventChannelAdmin::Dependency &
RtecEventChannelAdmin::_tao__seq_DependencySet::operator[] (CORBA::ULong index) const // read
{
  return this->buffer_[index];
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::_tao__seq_DependencySet_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_var::_tao__seq_DependencySet_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_var::_tao__seq_DependencySet_var (RtecEventChannelAdmin::_tao__seq_DependencySet_ptr p)
	: ptr_ (p)
{}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_var::_tao__seq_DependencySet_var (const RtecEventChannelAdmin::_tao__seq_DependencySet_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new RtecEventChannelAdmin::_tao__seq_DependencySet(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_var::~_tao__seq_DependencySet_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet_var &
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator= (RtecEventChannelAdmin::_tao__seq_DependencySet *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet_var &
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator= (const RtecEventChannelAdmin::_tao__seq_DependencySet_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new RtecEventChannelAdmin::_tao__seq_DependencySet (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const RtecEventChannelAdmin::_tao__seq_DependencySet *
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet *
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator const RtecEventChannelAdmin::_tao__seq_DependencySet &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator RtecEventChannelAdmin::_tao__seq_DependencySet &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator RtecEventChannelAdmin::_tao__seq_DependencySet &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency&
RtecEventChannelAdmin::_tao__seq_DependencySet_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const RtecEventChannelAdmin::_tao__seq_DependencySet &
RtecEventChannelAdmin::_tao__seq_DependencySet_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet &
RtecEventChannelAdmin::_tao__seq_DependencySet_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet *&
RtecEventChannelAdmin::_tao__seq_DependencySet_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet *
RtecEventChannelAdmin::_tao__seq_DependencySet_var::_retn (void)
{
  RtecEventChannelAdmin::_tao__seq_DependencySet *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet *
RtecEventChannelAdmin::_tao__seq_DependencySet_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::_tao__seq_DependencySet_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_out::_tao__seq_DependencySet_out (RtecEventChannelAdmin::_tao__seq_DependencySet *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_out::_tao__seq_DependencySet_out (RtecEventChannelAdmin::_tao__seq_DependencySet_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_DependencySet_out::_tao__seq_DependencySet_out (RtecEventChannelAdmin::_tao__seq_DependencySet_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet_out &
RtecEventChannelAdmin::_tao__seq_DependencySet_out::operator= (RtecEventChannelAdmin::_tao__seq_DependencySet_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet_out &
RtecEventChannelAdmin::_tao__seq_DependencySet_out::operator= (RtecEventChannelAdmin::_tao__seq_DependencySet *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_DependencySet_out::operator RtecEventChannelAdmin::_tao__seq_DependencySet *&() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet *&
RtecEventChannelAdmin::_tao__seq_DependencySet_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_DependencySet *
RtecEventChannelAdmin::_tao__seq_DependencySet_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Dependency& 
RtecEventChannelAdmin::_tao__seq_DependencySet_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ConsumerQOS_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_var::ConsumerQOS_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_var::ConsumerQOS_var (RtecEventChannelAdmin::ConsumerQOS *p)
	: ptr_ (p)
{}

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_var::ConsumerQOS_var (const RtecEventChannelAdmin::ConsumerQOS_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new RtecEventChannelAdmin::ConsumerQOS(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_var::~ConsumerQOS_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS_var &
RtecEventChannelAdmin::ConsumerQOS_var::operator= (RtecEventChannelAdmin::ConsumerQOS *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS_var &
RtecEventChannelAdmin::ConsumerQOS_var::operator= (const RtecEventChannelAdmin::ConsumerQOS_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new RtecEventChannelAdmin::ConsumerQOS (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const RtecEventChannelAdmin::ConsumerQOS *
RtecEventChannelAdmin::ConsumerQOS_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS *
RtecEventChannelAdmin::ConsumerQOS_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerQOS_var::operator const RtecEventChannelAdmin::ConsumerQOS &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerQOS_var::operator RtecEventChannelAdmin::ConsumerQOS &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerQOS_var::operator RtecEventChannelAdmin::ConsumerQOS &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const RtecEventChannelAdmin::ConsumerQOS &
RtecEventChannelAdmin::ConsumerQOS_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS &
RtecEventChannelAdmin::ConsumerQOS_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE RtecEventChannelAdmin::ConsumerQOS *&
RtecEventChannelAdmin::ConsumerQOS_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS *
RtecEventChannelAdmin::ConsumerQOS_var::_retn (void)
{
  RtecEventChannelAdmin::ConsumerQOS *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ConsumerQOS_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_out::ConsumerQOS_out (RtecEventChannelAdmin::ConsumerQOS *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_out::ConsumerQOS_out (RtecEventChannelAdmin::ConsumerQOS_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::ConsumerQOS_out::ConsumerQOS_out (RtecEventChannelAdmin::ConsumerQOS_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS_out &
RtecEventChannelAdmin::ConsumerQOS_out::operator= (RtecEventChannelAdmin::ConsumerQOS_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS_out &
RtecEventChannelAdmin::ConsumerQOS_out::operator= (RtecEventChannelAdmin::ConsumerQOS *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerQOS_out::operator RtecEventChannelAdmin::ConsumerQOS *&() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS *&
RtecEventChannelAdmin::ConsumerQOS_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerQOS *
RtecEventChannelAdmin::ConsumerQOS_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::Publication_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::Publication_var::Publication_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
RtecEventChannelAdmin::Publication_var::Publication_var (RtecEventChannelAdmin::Publication *p)
	: ptr_ (p)
{}

ACE_INLINE
RtecEventChannelAdmin::Publication_var::Publication_var (const RtecEventChannelAdmin::Publication_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new RtecEventChannelAdmin::Publication(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::Publication_var::~Publication_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication_var &
RtecEventChannelAdmin::Publication_var::operator= (RtecEventChannelAdmin::Publication *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::Publication_var &
RtecEventChannelAdmin::Publication_var::operator= (const RtecEventChannelAdmin::Publication_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new RtecEventChannelAdmin::Publication (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const RtecEventChannelAdmin::Publication *
RtecEventChannelAdmin::Publication_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication *
RtecEventChannelAdmin::Publication_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::Publication_var::operator const RtecEventChannelAdmin::Publication &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::Publication_var::operator RtecEventChannelAdmin::Publication &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::Publication_var::operator RtecEventChannelAdmin::Publication &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const RtecEventChannelAdmin::Publication &
RtecEventChannelAdmin::Publication_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication &
RtecEventChannelAdmin::Publication_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE RtecEventChannelAdmin::Publication &
RtecEventChannelAdmin::Publication_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication
RtecEventChannelAdmin::Publication_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication *
RtecEventChannelAdmin::Publication_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication *
RtecEventChannelAdmin::_tao__seq_PublicationSet::allocbuf (CORBA::ULong nelems)
{
  return new RtecEventChannelAdmin::Publication[nelems]; // allocate from heap
}

ACE_INLINE void
RtecEventChannelAdmin::_tao__seq_PublicationSet::freebuf (RtecEventChannelAdmin::Publication *seq)
{
  delete [] seq;
}

//default constructor
ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet::_tao__seq_PublicationSet (void)
	: maximum_ (0),
	  length_ (0),
	  buffer_ (0),
	  release_ (0) // does not own
{}

// constructor for unbounded seq
ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet::_tao__seq_PublicationSet(CORBA::ULong max )
	: maximum_ (max),
	  length_ (0),
	  buffer_ (RtecEventChannelAdmin::_tao__seq_PublicationSet::allocbuf (max)),
	  release_ (1) // owns
{}

// constructor from data buffer
ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet::_tao__seq_PublicationSet (CORBA::ULong max, CORBA::ULong length, 
	RtecEventChannelAdmin::Publication *value, CORBA::Boolean release)
	: maximum_ (max),
	  length_ (length),
	  buffer_ (value),
	  release_ (release) // ownership depends on release
{}

ACE_INLINE CORBA::ULong
RtecEventChannelAdmin::_tao__seq_PublicationSet::maximum (void) const
{
  return this->maximum_;
}

ACE_INLINE CORBA::ULong
RtecEventChannelAdmin::_tao__seq_PublicationSet::length  (void) const
{
  return this->length_;
}

ACE_INLINE RtecEventChannelAdmin::Publication &
RtecEventChannelAdmin::_tao__seq_PublicationSet::operator[] (CORBA::ULong index) // read/write
{
  return this->buffer_[index];
}

ACE_INLINE const RtecEventChannelAdmin::Publication &
RtecEventChannelAdmin::_tao__seq_PublicationSet::operator[] (CORBA::ULong index) const // read
{
  return this->buffer_[index];
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::_tao__seq_PublicationSet_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::_tao__seq_PublicationSet_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::_tao__seq_PublicationSet_var (RtecEventChannelAdmin::_tao__seq_PublicationSet_ptr p)
	: ptr_ (p)
{}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::_tao__seq_PublicationSet_var (const RtecEventChannelAdmin::_tao__seq_PublicationSet_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new RtecEventChannelAdmin::_tao__seq_PublicationSet(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::~_tao__seq_PublicationSet_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet_var &
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator= (RtecEventChannelAdmin::_tao__seq_PublicationSet *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet_var &
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator= (const RtecEventChannelAdmin::_tao__seq_PublicationSet_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new RtecEventChannelAdmin::_tao__seq_PublicationSet (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const RtecEventChannelAdmin::_tao__seq_PublicationSet *
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet *
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator const RtecEventChannelAdmin::_tao__seq_PublicationSet &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator RtecEventChannelAdmin::_tao__seq_PublicationSet &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator RtecEventChannelAdmin::_tao__seq_PublicationSet &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication&
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const RtecEventChannelAdmin::_tao__seq_PublicationSet &
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet &
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet *&
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet *
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::_retn (void)
{
  RtecEventChannelAdmin::_tao__seq_PublicationSet *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet *
RtecEventChannelAdmin::_tao__seq_PublicationSet_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::_tao__seq_PublicationSet_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::_tao__seq_PublicationSet_out (RtecEventChannelAdmin::_tao__seq_PublicationSet *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::_tao__seq_PublicationSet_out (RtecEventChannelAdmin::_tao__seq_PublicationSet_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::_tao__seq_PublicationSet_out (RtecEventChannelAdmin::_tao__seq_PublicationSet_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet_out &
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::operator= (RtecEventChannelAdmin::_tao__seq_PublicationSet_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet_out &
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::operator= (RtecEventChannelAdmin::_tao__seq_PublicationSet *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::operator RtecEventChannelAdmin::_tao__seq_PublicationSet *&() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet *&
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::_tao__seq_PublicationSet *
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::Publication& 
RtecEventChannelAdmin::_tao__seq_PublicationSet_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::SupplierQOS_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_var::SupplierQOS_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_var::SupplierQOS_var (RtecEventChannelAdmin::SupplierQOS *p)
	: ptr_ (p)
{}

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_var::SupplierQOS_var (const RtecEventChannelAdmin::SupplierQOS_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new RtecEventChannelAdmin::SupplierQOS(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_var::~SupplierQOS_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS_var &
RtecEventChannelAdmin::SupplierQOS_var::operator= (RtecEventChannelAdmin::SupplierQOS *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS_var &
RtecEventChannelAdmin::SupplierQOS_var::operator= (const RtecEventChannelAdmin::SupplierQOS_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new RtecEventChannelAdmin::SupplierQOS (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const RtecEventChannelAdmin::SupplierQOS *
RtecEventChannelAdmin::SupplierQOS_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS *
RtecEventChannelAdmin::SupplierQOS_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierQOS_var::operator const RtecEventChannelAdmin::SupplierQOS &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierQOS_var::operator RtecEventChannelAdmin::SupplierQOS &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierQOS_var::operator RtecEventChannelAdmin::SupplierQOS &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const RtecEventChannelAdmin::SupplierQOS &
RtecEventChannelAdmin::SupplierQOS_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS &
RtecEventChannelAdmin::SupplierQOS_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE RtecEventChannelAdmin::SupplierQOS *&
RtecEventChannelAdmin::SupplierQOS_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS *
RtecEventChannelAdmin::SupplierQOS_var::_retn (void)
{
  RtecEventChannelAdmin::SupplierQOS *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::SupplierQOS_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_out::SupplierQOS_out (RtecEventChannelAdmin::SupplierQOS *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_out::SupplierQOS_out (RtecEventChannelAdmin::SupplierQOS_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
RtecEventChannelAdmin::SupplierQOS_out::SupplierQOS_out (RtecEventChannelAdmin::SupplierQOS_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS_out &
RtecEventChannelAdmin::SupplierQOS_out::operator= (RtecEventChannelAdmin::SupplierQOS_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS_out &
RtecEventChannelAdmin::SupplierQOS_out::operator= (RtecEventChannelAdmin::SupplierQOS *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierQOS_out::operator RtecEventChannelAdmin::SupplierQOS *&() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS *&
RtecEventChannelAdmin::SupplierQOS_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierQOS *
RtecEventChannelAdmin::SupplierQOS_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer::~ProxyPushConsumer (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPUSHCONSUMER___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPUSHCONSUMER___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPushConsumer_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_var::ProxyPushConsumer_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPushConsumer::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_var::ProxyPushConsumer_var (RtecEventChannelAdmin::ProxyPushConsumer_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr 
RtecEventChannelAdmin::ProxyPushConsumer_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_var::ProxyPushConsumer_var (const RtecEventChannelAdmin::ProxyPushConsumer_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPushConsumer::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_var::~ProxyPushConsumer_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_var &
RtecEventChannelAdmin::ProxyPushConsumer_var::operator= (RtecEventChannelAdmin::ProxyPushConsumer_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_var &
RtecEventChannelAdmin::ProxyPushConsumer_var::operator= (const RtecEventChannelAdmin::ProxyPushConsumer_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::ProxyPushConsumer::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPushConsumer_var::operator const RtecEventChannelAdmin::ProxyPushConsumer_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPushConsumer_var::operator RtecEventChannelAdmin::ProxyPushConsumer_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr 
RtecEventChannelAdmin::ProxyPushConsumer_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr
RtecEventChannelAdmin::ProxyPushConsumer_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr &
RtecEventChannelAdmin::ProxyPushConsumer_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr &
RtecEventChannelAdmin::ProxyPushConsumer_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPushConsumer::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr 
RtecEventChannelAdmin::ProxyPushConsumer_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::ProxyPushConsumer_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::ProxyPushConsumer::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPUSHCONSUMER___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPUSHCONSUMER___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPushConsumer_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_out::ProxyPushConsumer_out (RtecEventChannelAdmin::ProxyPushConsumer_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPushConsumer::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_out::ProxyPushConsumer_out (RtecEventChannelAdmin::ProxyPushConsumer_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPushConsumer::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushConsumer_out::ProxyPushConsumer_out (RtecEventChannelAdmin::ProxyPushConsumer_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_out &
RtecEventChannelAdmin::ProxyPushConsumer_out::operator= (RtecEventChannelAdmin::ProxyPushConsumer_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_out &
RtecEventChannelAdmin::ProxyPushConsumer_out::operator= (const RtecEventChannelAdmin::ProxyPushConsumer_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPushConsumer::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_out &
RtecEventChannelAdmin::ProxyPushConsumer_out::operator= (RtecEventChannelAdmin::ProxyPushConsumer_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPushConsumer_out::operator RtecEventChannelAdmin::ProxyPushConsumer_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr &
RtecEventChannelAdmin::ProxyPushConsumer_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushConsumer_ptr 
RtecEventChannelAdmin::ProxyPushConsumer_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier::ProxyPullSupplier (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier::ProxyPullSupplier (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier::~ProxyPullSupplier (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPULLSUPPLIER___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPULLSUPPLIER___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPullSupplier_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_var::ProxyPullSupplier_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPullSupplier::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_var::ProxyPullSupplier_var (RtecEventChannelAdmin::ProxyPullSupplier_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr 
RtecEventChannelAdmin::ProxyPullSupplier_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_var::ProxyPullSupplier_var (const RtecEventChannelAdmin::ProxyPullSupplier_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPullSupplier::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_var::~ProxyPullSupplier_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_var &
RtecEventChannelAdmin::ProxyPullSupplier_var::operator= (RtecEventChannelAdmin::ProxyPullSupplier_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_var &
RtecEventChannelAdmin::ProxyPullSupplier_var::operator= (const RtecEventChannelAdmin::ProxyPullSupplier_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::ProxyPullSupplier::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPullSupplier_var::operator const RtecEventChannelAdmin::ProxyPullSupplier_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPullSupplier_var::operator RtecEventChannelAdmin::ProxyPullSupplier_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr 
RtecEventChannelAdmin::ProxyPullSupplier_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr
RtecEventChannelAdmin::ProxyPullSupplier_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr &
RtecEventChannelAdmin::ProxyPullSupplier_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr &
RtecEventChannelAdmin::ProxyPullSupplier_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPullSupplier::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr 
RtecEventChannelAdmin::ProxyPullSupplier_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::ProxyPullSupplier_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::ProxyPullSupplier::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPULLSUPPLIER___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPULLSUPPLIER___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPullSupplier_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_out::ProxyPullSupplier_out (RtecEventChannelAdmin::ProxyPullSupplier_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPullSupplier::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_out::ProxyPullSupplier_out (RtecEventChannelAdmin::ProxyPullSupplier_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPullSupplier::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullSupplier_out::ProxyPullSupplier_out (RtecEventChannelAdmin::ProxyPullSupplier_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_out &
RtecEventChannelAdmin::ProxyPullSupplier_out::operator= (RtecEventChannelAdmin::ProxyPullSupplier_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_out &
RtecEventChannelAdmin::ProxyPullSupplier_out::operator= (const RtecEventChannelAdmin::ProxyPullSupplier_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPullSupplier::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_out &
RtecEventChannelAdmin::ProxyPullSupplier_out::operator= (RtecEventChannelAdmin::ProxyPullSupplier_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPullSupplier_out::operator RtecEventChannelAdmin::ProxyPullSupplier_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr &
RtecEventChannelAdmin::ProxyPullSupplier_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullSupplier_ptr 
RtecEventChannelAdmin::ProxyPullSupplier_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer::ProxyPullConsumer (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer::ProxyPullConsumer (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer::~ProxyPullConsumer (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPULLCONSUMER___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPULLCONSUMER___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPullConsumer_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_var::ProxyPullConsumer_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPullConsumer::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_var::ProxyPullConsumer_var (RtecEventChannelAdmin::ProxyPullConsumer_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr 
RtecEventChannelAdmin::ProxyPullConsumer_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_var::ProxyPullConsumer_var (const RtecEventChannelAdmin::ProxyPullConsumer_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPullConsumer::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_var::~ProxyPullConsumer_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_var &
RtecEventChannelAdmin::ProxyPullConsumer_var::operator= (RtecEventChannelAdmin::ProxyPullConsumer_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_var &
RtecEventChannelAdmin::ProxyPullConsumer_var::operator= (const RtecEventChannelAdmin::ProxyPullConsumer_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::ProxyPullConsumer::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPullConsumer_var::operator const RtecEventChannelAdmin::ProxyPullConsumer_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPullConsumer_var::operator RtecEventChannelAdmin::ProxyPullConsumer_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr 
RtecEventChannelAdmin::ProxyPullConsumer_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr
RtecEventChannelAdmin::ProxyPullConsumer_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr &
RtecEventChannelAdmin::ProxyPullConsumer_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr &
RtecEventChannelAdmin::ProxyPullConsumer_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPullConsumer::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr 
RtecEventChannelAdmin::ProxyPullConsumer_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::ProxyPullConsumer_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::ProxyPullConsumer::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPULLCONSUMER___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPULLCONSUMER___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPullConsumer_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_out::ProxyPullConsumer_out (RtecEventChannelAdmin::ProxyPullConsumer_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPullConsumer::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_out::ProxyPullConsumer_out (RtecEventChannelAdmin::ProxyPullConsumer_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPullConsumer::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPullConsumer_out::ProxyPullConsumer_out (RtecEventChannelAdmin::ProxyPullConsumer_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_out &
RtecEventChannelAdmin::ProxyPullConsumer_out::operator= (RtecEventChannelAdmin::ProxyPullConsumer_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_out &
RtecEventChannelAdmin::ProxyPullConsumer_out::operator= (const RtecEventChannelAdmin::ProxyPullConsumer_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPullConsumer::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_out &
RtecEventChannelAdmin::ProxyPullConsumer_out::operator= (RtecEventChannelAdmin::ProxyPullConsumer_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPullConsumer_out::operator RtecEventChannelAdmin::ProxyPullConsumer_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr &
RtecEventChannelAdmin::ProxyPullConsumer_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPullConsumer_ptr 
RtecEventChannelAdmin::ProxyPullConsumer_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier::~ProxyPushSupplier (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPUSHSUPPLIER___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPUSHSUPPLIER___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPushSupplier_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_var::ProxyPushSupplier_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPushSupplier::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_var::ProxyPushSupplier_var (RtecEventChannelAdmin::ProxyPushSupplier_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr 
RtecEventChannelAdmin::ProxyPushSupplier_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_var::ProxyPushSupplier_var (const RtecEventChannelAdmin::ProxyPushSupplier_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::ProxyPushSupplier::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_var::~ProxyPushSupplier_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_var &
RtecEventChannelAdmin::ProxyPushSupplier_var::operator= (RtecEventChannelAdmin::ProxyPushSupplier_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_var &
RtecEventChannelAdmin::ProxyPushSupplier_var::operator= (const RtecEventChannelAdmin::ProxyPushSupplier_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::ProxyPushSupplier::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPushSupplier_var::operator const RtecEventChannelAdmin::ProxyPushSupplier_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPushSupplier_var::operator RtecEventChannelAdmin::ProxyPushSupplier_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr 
RtecEventChannelAdmin::ProxyPushSupplier_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr
RtecEventChannelAdmin::ProxyPushSupplier_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr &
RtecEventChannelAdmin::ProxyPushSupplier_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr &
RtecEventChannelAdmin::ProxyPushSupplier_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPushSupplier::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr 
RtecEventChannelAdmin::ProxyPushSupplier_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::ProxyPushSupplier_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::ProxyPushSupplier::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_PROXYPUSHSUPPLIER___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_PROXYPUSHSUPPLIER___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ProxyPushSupplier_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_out::ProxyPushSupplier_out (RtecEventChannelAdmin::ProxyPushSupplier_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPushSupplier::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_out::ProxyPushSupplier_out (RtecEventChannelAdmin::ProxyPushSupplier_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ProxyPushSupplier::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ProxyPushSupplier_out::ProxyPushSupplier_out (RtecEventChannelAdmin::ProxyPushSupplier_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_out &
RtecEventChannelAdmin::ProxyPushSupplier_out::operator= (RtecEventChannelAdmin::ProxyPushSupplier_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_out &
RtecEventChannelAdmin::ProxyPushSupplier_out::operator= (const RtecEventChannelAdmin::ProxyPushSupplier_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::ProxyPushSupplier::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_out &
RtecEventChannelAdmin::ProxyPushSupplier_out::operator= (RtecEventChannelAdmin::ProxyPushSupplier_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ProxyPushSupplier_out::operator RtecEventChannelAdmin::ProxyPushSupplier_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr &
RtecEventChannelAdmin::ProxyPushSupplier_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ProxyPushSupplier_ptr 
RtecEventChannelAdmin::ProxyPushSupplier_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin::ConsumerAdmin (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin::ConsumerAdmin (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin::~ConsumerAdmin (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_CONSUMERADMIN___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_CONSUMERADMIN___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ConsumerAdmin_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_var::ConsumerAdmin_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::ConsumerAdmin::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_var::ConsumerAdmin_var (RtecEventChannelAdmin::ConsumerAdmin_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr 
RtecEventChannelAdmin::ConsumerAdmin_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_var::ConsumerAdmin_var (const RtecEventChannelAdmin::ConsumerAdmin_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::ConsumerAdmin::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_var::~ConsumerAdmin_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_var &
RtecEventChannelAdmin::ConsumerAdmin_var::operator= (RtecEventChannelAdmin::ConsumerAdmin_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_var &
RtecEventChannelAdmin::ConsumerAdmin_var::operator= (const RtecEventChannelAdmin::ConsumerAdmin_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::ConsumerAdmin::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerAdmin_var::operator const RtecEventChannelAdmin::ConsumerAdmin_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerAdmin_var::operator RtecEventChannelAdmin::ConsumerAdmin_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr 
RtecEventChannelAdmin::ConsumerAdmin_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr
RtecEventChannelAdmin::ConsumerAdmin_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr &
RtecEventChannelAdmin::ConsumerAdmin_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr &
RtecEventChannelAdmin::ConsumerAdmin_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ConsumerAdmin::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr 
RtecEventChannelAdmin::ConsumerAdmin_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::ConsumerAdmin_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::ConsumerAdmin::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_CONSUMERADMIN___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_CONSUMERADMIN___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::ConsumerAdmin_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_out::ConsumerAdmin_out (RtecEventChannelAdmin::ConsumerAdmin_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::ConsumerAdmin::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_out::ConsumerAdmin_out (RtecEventChannelAdmin::ConsumerAdmin_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::ConsumerAdmin::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::ConsumerAdmin_out::ConsumerAdmin_out (RtecEventChannelAdmin::ConsumerAdmin_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_out &
RtecEventChannelAdmin::ConsumerAdmin_out::operator= (RtecEventChannelAdmin::ConsumerAdmin_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_out &
RtecEventChannelAdmin::ConsumerAdmin_out::operator= (const RtecEventChannelAdmin::ConsumerAdmin_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::ConsumerAdmin::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_out &
RtecEventChannelAdmin::ConsumerAdmin_out::operator= (RtecEventChannelAdmin::ConsumerAdmin_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::ConsumerAdmin_out::operator RtecEventChannelAdmin::ConsumerAdmin_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr &
RtecEventChannelAdmin::ConsumerAdmin_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::ConsumerAdmin_ptr 
RtecEventChannelAdmin::ConsumerAdmin_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin::SupplierAdmin (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin::SupplierAdmin (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin::~SupplierAdmin (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_SUPPLIERADMIN___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_SUPPLIERADMIN___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::SupplierAdmin_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_var::SupplierAdmin_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::SupplierAdmin::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_var::SupplierAdmin_var (RtecEventChannelAdmin::SupplierAdmin_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr 
RtecEventChannelAdmin::SupplierAdmin_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_var::SupplierAdmin_var (const RtecEventChannelAdmin::SupplierAdmin_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::SupplierAdmin::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_var::~SupplierAdmin_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_var &
RtecEventChannelAdmin::SupplierAdmin_var::operator= (RtecEventChannelAdmin::SupplierAdmin_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_var &
RtecEventChannelAdmin::SupplierAdmin_var::operator= (const RtecEventChannelAdmin::SupplierAdmin_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::SupplierAdmin::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierAdmin_var::operator const RtecEventChannelAdmin::SupplierAdmin_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierAdmin_var::operator RtecEventChannelAdmin::SupplierAdmin_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr 
RtecEventChannelAdmin::SupplierAdmin_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr
RtecEventChannelAdmin::SupplierAdmin_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr &
RtecEventChannelAdmin::SupplierAdmin_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr &
RtecEventChannelAdmin::SupplierAdmin_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::SupplierAdmin::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr 
RtecEventChannelAdmin::SupplierAdmin_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::SupplierAdmin_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::SupplierAdmin::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_SUPPLIERADMIN___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_SUPPLIERADMIN___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::SupplierAdmin_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_out::SupplierAdmin_out (RtecEventChannelAdmin::SupplierAdmin_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::SupplierAdmin::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_out::SupplierAdmin_out (RtecEventChannelAdmin::SupplierAdmin_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::SupplierAdmin::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::SupplierAdmin_out::SupplierAdmin_out (RtecEventChannelAdmin::SupplierAdmin_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_out &
RtecEventChannelAdmin::SupplierAdmin_out::operator= (RtecEventChannelAdmin::SupplierAdmin_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_out &
RtecEventChannelAdmin::SupplierAdmin_out::operator= (const RtecEventChannelAdmin::SupplierAdmin_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::SupplierAdmin::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_out &
RtecEventChannelAdmin::SupplierAdmin_out::operator= (RtecEventChannelAdmin::SupplierAdmin_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::SupplierAdmin_out::operator RtecEventChannelAdmin::SupplierAdmin_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr &
RtecEventChannelAdmin::SupplierAdmin_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::SupplierAdmin_ptr 
RtecEventChannelAdmin::SupplierAdmin_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
RtecEventChannelAdmin::EventChannel::EventChannel (void) // default constructor
{}

ACE_INLINE
RtecEventChannelAdmin::EventChannel::EventChannel (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
RtecEventChannelAdmin::EventChannel::~EventChannel (void) // destructor
{}


#if !defined (_RTECEVENTCHANNELADMIN_EVENTCHANNEL___VAR_CI_)
#define _RTECEVENTCHANNELADMIN_EVENTCHANNEL___VAR_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::EventChannel_var
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::EventChannel_var::EventChannel_var (void) // default constructor
	: ptr_ (RtecEventChannelAdmin::EventChannel::_nil ())
{}

ACE_INLINE
RtecEventChannelAdmin::EventChannel_var::EventChannel_var (RtecEventChannelAdmin::EventChannel_ptr p)
	: ptr_ (p)
{}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr 
RtecEventChannelAdmin::EventChannel_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
RtecEventChannelAdmin::EventChannel_var::EventChannel_var (const RtecEventChannelAdmin::EventChannel_var &p) // copy constructor
	: ptr_ (RtecEventChannelAdmin::EventChannel::_duplicate (p.ptr ()))
{}

ACE_INLINE
RtecEventChannelAdmin::EventChannel_var::~EventChannel_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_var &
RtecEventChannelAdmin::EventChannel_var::operator= (RtecEventChannelAdmin::EventChannel_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_var &
RtecEventChannelAdmin::EventChannel_var::operator= (const RtecEventChannelAdmin::EventChannel_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = RtecEventChannelAdmin::EventChannel::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::EventChannel_var::operator const RtecEventChannelAdmin::EventChannel_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
RtecEventChannelAdmin::EventChannel_var::operator RtecEventChannelAdmin::EventChannel_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr 
RtecEventChannelAdmin::EventChannel_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr
RtecEventChannelAdmin::EventChannel_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr &
RtecEventChannelAdmin::EventChannel_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr &
RtecEventChannelAdmin::EventChannel_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::EventChannel::_nil ();
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr 
RtecEventChannelAdmin::EventChannel_var::_retn (void)
{
  // yield ownership of managed obj reference
  RtecEventChannelAdmin::EventChannel_ptr val = this->ptr_;
  this->ptr_ = RtecEventChannelAdmin::EventChannel::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_RTECEVENTCHANNELADMIN_EVENTCHANNEL___OUT_CI_)
#define _RTECEVENTCHANNELADMIN_EVENTCHANNEL___OUT_CI_

// *************************************************************
// Inline operations for class RtecEventChannelAdmin::EventChannel_out
// *************************************************************

ACE_INLINE
RtecEventChannelAdmin::EventChannel_out::EventChannel_out (RtecEventChannelAdmin::EventChannel_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = RtecEventChannelAdmin::EventChannel::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::EventChannel_out::EventChannel_out (RtecEventChannelAdmin::EventChannel_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = RtecEventChannelAdmin::EventChannel::_nil ();
}

ACE_INLINE
RtecEventChannelAdmin::EventChannel_out::EventChannel_out (RtecEventChannelAdmin::EventChannel_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE RtecEventChannelAdmin::EventChannel_out &
RtecEventChannelAdmin::EventChannel_out::operator= (RtecEventChannelAdmin::EventChannel_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_out &
RtecEventChannelAdmin::EventChannel_out::operator= (const RtecEventChannelAdmin::EventChannel_var &p)
{
  this->ptr_ = RtecEventChannelAdmin::EventChannel::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_out &
RtecEventChannelAdmin::EventChannel_out::operator= (RtecEventChannelAdmin::EventChannel_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
RtecEventChannelAdmin::EventChannel_out::operator RtecEventChannelAdmin::EventChannel_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr &
RtecEventChannelAdmin::EventChannel_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE RtecEventChannelAdmin::EventChannel_ptr 
RtecEventChannelAdmin::EventChannel_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::SYNCHRONIZATION_ERROR (void)
  : CORBA_UserException (_tc_SYNCHRONIZATION_ERROR)
{
}

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::EventChannel::QOS_ERROR
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::EventChannel::QOS_ERROR::QOS_ERROR (void)
  : CORBA_UserException (_tc_QOS_ERROR)
{
}

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::SUBSCRIPTION_ERROR (void)
  : CORBA_UserException (_tc_SUBSCRIPTION_ERROR)
{
}

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::CORRELATION_ERROR (void)
  : CORBA_UserException (_tc_CORRELATION_ERROR)
{
}

// *************************************************************
// Inline operations for exception RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR
// *************************************************************

// default constructor
ACE_INLINE
RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::DISPATCH_ERROR (void)
  : CORBA_UserException (_tc_DISPATCH_ERROR)
{
}

