// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington 
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#if !defined (_TAO_IDL_RTECSCHEDULERS_H_)
#define _TAO_IDL_RTECSCHEDULERS_H_

#include "RtecSchedulerC.h"

class POA_RtecScheduler
{
public:
  class Scheduler;
  typedef Scheduler *Scheduler_ptr;
  class Scheduler : public virtual RtecScheduler::Scheduler
  {
  protected:
    Scheduler (const char *obj_name = 0);
    virtual ~Scheduler (void);
  public:
    virtual RtecScheduler::handle_t create (const char * entry_point,  CORBA::Environment &env) = 0; // pure virtual
    static void create_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual RtecScheduler::handle_t lookup (const char * entry_point,  CORBA::Environment &env) = 0; // pure virtual
    static void lookup_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual RtecScheduler::RT_Info * get (RtecScheduler::handle_t handle,  CORBA::Environment &env) = 0; // pure virtual
    static void get_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual void set (RtecScheduler::handle_t handle, RtecScheduler::Time time, RtecScheduler::Time typical_time, RtecScheduler::Time cached_time, RtecScheduler::Period period, RtecScheduler::Importance importance, RtecScheduler::Quantum quantum, CORBA::Long threads,  CORBA::Environment &env) = 0; // pure virtual
    static void set_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual void add_dependency (RtecScheduler::handle_t handle, RtecScheduler::handle_t dependency, CORBA::Long number_of_calls,  CORBA::Environment &env) = 0; // pure virtual
    static void add_dependency_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual void priority (RtecScheduler::handle_t handle, RtecScheduler::OS_Priority_out priority, RtecScheduler::Sub_Priority_out subpriority, RtecScheduler::Preemption_Priority_out p_priority,  CORBA::Environment &env) = 0; // pure virtual
    static void priority_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual void entry_point_priority (const char * entry_point, RtecScheduler::OS_Priority_out priority, RtecScheduler::Sub_Priority_out subpriority, RtecScheduler::Preemption_Priority_out p_priority,  CORBA::Environment &env) = 0; // pure virtual
    static void entry_point_priority_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    virtual void compute_scheduling (CORBA::Long minimum_priority, CORBA::Long maximum_priority, RtecScheduler::RT_Info_Set_out infos,  CORBA::Environment &env) = 0; // pure virtual
    static void compute_scheduling_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

    static void _is_a_skel (CORBA::ServerRequest &req, CORBA::Object_ptr obj, CORBA::Environment &env);

  };

};


#if defined (__ACE_INLINE__)
#include "RtecSchedulerS.i"
#endif // defined INLINE


#endif // if !defined
