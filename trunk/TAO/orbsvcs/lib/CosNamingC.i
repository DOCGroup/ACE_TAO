// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington 
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for class CosNaming::NameComponent_var
// *************************************************************

ACE_INLINE
CosNaming::NameComponent_var::NameComponent_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
CosNaming::NameComponent_var::NameComponent_var (CosNaming::NameComponent *p)
	: ptr_ (p)
{}

ACE_INLINE
CosNaming::NameComponent_var::NameComponent_var (const CosNaming::NameComponent_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new CosNaming::NameComponent(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
CosNaming::NameComponent_var::~NameComponent_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CosNaming::NameComponent_var &
CosNaming::NameComponent_var::operator= (CosNaming::NameComponent *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::NameComponent_var &
CosNaming::NameComponent_var::operator= (const CosNaming::NameComponent_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CosNaming::NameComponent (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CosNaming::NameComponent *
CosNaming::NameComponent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NameComponent *
CosNaming::NameComponent_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::NameComponent_var::operator const CosNaming::NameComponent &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::NameComponent_var::operator CosNaming::NameComponent &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::NameComponent_var::operator CosNaming::NameComponent &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CosNaming::NameComponent &
CosNaming::NameComponent_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CosNaming::NameComponent &
CosNaming::NameComponent_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CosNaming::NameComponent *&
CosNaming::NameComponent_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CosNaming::NameComponent *
CosNaming::NameComponent_var::_retn (void)
{
  CosNaming::NameComponent *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

// *************************************************************
// Inline operations for class CosNaming::NameComponent_out
// *************************************************************

ACE_INLINE
CosNaming::NameComponent_out::NameComponent_out (CosNaming::NameComponent *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::NameComponent_out::NameComponent_out (CosNaming::NameComponent_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::NameComponent_out::NameComponent_out (CosNaming::NameComponent_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::NameComponent_out &
CosNaming::NameComponent_out::operator= (CosNaming::NameComponent_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::NameComponent_out &
CosNaming::NameComponent_out::operator= (CosNaming::NameComponent *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::NameComponent_out::operator CosNaming::NameComponent *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NameComponent *&
CosNaming::NameComponent_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NameComponent *
CosNaming::NameComponent_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NameComponent *
CosNaming::Name::allocbuf (CORBA::ULong nelems)
{
  return new CosNaming::NameComponent[nelems]; // allocate from heap
}

ACE_INLINE void
CosNaming::Name::freebuf (CosNaming::NameComponent *seq)
{
  delete [] seq;
}

//default constructor
ACE_INLINE 
CosNaming::Name::Name (void)
	: maximum_ (0),
	  length_ (0),
	  buffer_ (0),
	  release_ (0) // does not own
{}

// constructor for unbounded seq
ACE_INLINE 
CosNaming::Name::Name(CORBA::ULong max )
	: maximum_ (max),
	  length_ (0),
	  buffer_ (CosNaming::Name::allocbuf (max)),
	  release_ (1) // owns
{}

// constructor from data buffer
ACE_INLINE 
CosNaming::Name::Name (CORBA::ULong max, CORBA::ULong length, 
	CosNaming::NameComponent *value, CORBA::Boolean release)
	: maximum_ (max),
	  length_ (length),
	  buffer_ (value),
	  release_ (release) // ownership depends on release
{}

ACE_INLINE CORBA::ULong
CosNaming::Name::maximum (void) const
{
  return this->maximum_;
}

ACE_INLINE CORBA::ULong
CosNaming::Name::length  (void) const
{
  return this->length_;
}

ACE_INLINE void
CosNaming::Name::length (CORBA::ULong length)
{
  this->length_ = length;
}

ACE_INLINE CosNaming::NameComponent &
CosNaming::Name::operator[] (CORBA::ULong index) // read/write
{
  return this->buffer_[index];
}

ACE_INLINE const CosNaming::NameComponent &
CosNaming::Name::operator[] (CORBA::ULong index) const // read
{
  return this->buffer_[index];
}

// *************************************************************
// Inline operations for class CosNaming::Name_var
// *************************************************************

ACE_INLINE
CosNaming::Name_var::Name_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
CosNaming::Name_var::Name_var (CosNaming::Name_ptr p)
	: ptr_ (p)
{}

ACE_INLINE
CosNaming::Name_var::Name_var (const CosNaming::Name_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new CosNaming::Name(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
CosNaming::Name_var::~Name_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CosNaming::Name_var &
CosNaming::Name_var::operator= (CosNaming::Name *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::Name_var &
CosNaming::Name_var::operator= (const CosNaming::Name_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CosNaming::Name (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CosNaming::Name *
CosNaming::Name_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Name *
CosNaming::Name_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::Name_var::operator const CosNaming::Name &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::Name_var::operator CosNaming::Name &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::Name_var::operator CosNaming::Name &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CosNaming::NameComponent&
CosNaming::Name_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CosNaming::Name &
CosNaming::Name_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CosNaming::Name &
CosNaming::Name_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CosNaming::Name *&
CosNaming::Name_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CosNaming::Name *
CosNaming::Name_var::_retn (void)
{
  CosNaming::Name *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CosNaming::Name *
CosNaming::Name_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CosNaming::Name_out
// *************************************************************

ACE_INLINE
CosNaming::Name_out::Name_out (CosNaming::Name *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::Name_out::Name_out (CosNaming::Name_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::Name_out::Name_out (CosNaming::Name_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::Name_out &
CosNaming::Name_out::operator= (CosNaming::Name_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::Name_out &
CosNaming::Name_out::operator= (CosNaming::Name *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::Name_out::operator CosNaming::Name *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Name *&
CosNaming::Name_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Name *
CosNaming::Name_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NameComponent& 
CosNaming::Name_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

// *************************************************************
// Inline operations for class CosNaming::Binding_var
// *************************************************************

ACE_INLINE
CosNaming::Binding_var::Binding_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
CosNaming::Binding_var::Binding_var (CosNaming::Binding *p)
	: ptr_ (p)
{}

ACE_INLINE
CosNaming::Binding_var::Binding_var (const CosNaming::Binding_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new CosNaming::Binding(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
CosNaming::Binding_var::~Binding_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CosNaming::Binding_var &
CosNaming::Binding_var::operator= (CosNaming::Binding *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::Binding_var &
CosNaming::Binding_var::operator= (const CosNaming::Binding_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CosNaming::Binding (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CosNaming::Binding *
CosNaming::Binding_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Binding *
CosNaming::Binding_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::Binding_var::operator const CosNaming::Binding &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::Binding_var::operator CosNaming::Binding &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::Binding_var::operator CosNaming::Binding &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE const CosNaming::Binding &
CosNaming::Binding_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CosNaming::Binding &
CosNaming::Binding_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CosNaming::Binding *&
CosNaming::Binding_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CosNaming::Binding *
CosNaming::Binding_var::_retn (void)
{
  CosNaming::Binding *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

// *************************************************************
// Inline operations for class CosNaming::Binding_out
// *************************************************************

ACE_INLINE
CosNaming::Binding_out::Binding_out (CosNaming::Binding *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::Binding_out::Binding_out (CosNaming::Binding_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::Binding_out::Binding_out (CosNaming::Binding_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::Binding_out &
CosNaming::Binding_out::operator= (CosNaming::Binding_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::Binding_out &
CosNaming::Binding_out::operator= (CosNaming::Binding *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::Binding_out::operator CosNaming::Binding *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Binding *&
CosNaming::Binding_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Binding *
CosNaming::Binding_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Binding *
CosNaming::BindingList::allocbuf (CORBA::ULong nelems)
{
  return new CosNaming::Binding[nelems]; // allocate from heap
}

ACE_INLINE void
CosNaming::BindingList::freebuf (CosNaming::Binding *seq)
{
  delete [] seq;
}

//default constructor
ACE_INLINE 
CosNaming::BindingList::BindingList (void)
	: maximum_ (0),
	  length_ (0),
	  buffer_ (0),
	  release_ (0) // does not own
{}

// constructor for unbounded seq
ACE_INLINE 
CosNaming::BindingList::BindingList(CORBA::ULong max )
	: maximum_ (max),
	  length_ (0),
	  buffer_ (CosNaming::BindingList::allocbuf (max)),
	  release_ (1) // owns
{}

// constructor from data buffer
ACE_INLINE 
CosNaming::BindingList::BindingList (CORBA::ULong max, CORBA::ULong length, 
	CosNaming::Binding *value, CORBA::Boolean release)
	: maximum_ (max),
	  length_ (length),
	  buffer_ (value),
	  release_ (release) // ownership depends on release
{}

ACE_INLINE CORBA::ULong
CosNaming::BindingList::maximum (void) const
{
  return this->maximum_;
}

ACE_INLINE CORBA::ULong
CosNaming::BindingList::length  (void) const
{
  return this->length_;
}

ACE_INLINE void
CosNaming::BindingList::length (CORBA::ULong length)
{
  this->length_ = length;
}

ACE_INLINE CosNaming::Binding &
CosNaming::BindingList::operator[] (CORBA::ULong index) // read/write
{
  return this->buffer_[index];
}

ACE_INLINE const CosNaming::Binding &
CosNaming::BindingList::operator[] (CORBA::ULong index) const // read
{
  return this->buffer_[index];
}

// *************************************************************
// Inline operations for class CosNaming::BindingList_var
// *************************************************************

ACE_INLINE
CosNaming::BindingList_var::BindingList_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
CosNaming::BindingList_var::BindingList_var (CosNaming::BindingList_ptr p)
	: ptr_ (p)
{}

ACE_INLINE
CosNaming::BindingList_var::BindingList_var (const CosNaming::BindingList_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new CosNaming::BindingList(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
CosNaming::BindingList_var::~BindingList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE CosNaming::BindingList_var &
CosNaming::BindingList_var::operator= (CosNaming::BindingList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::BindingList_var &
CosNaming::BindingList_var::operator= (const CosNaming::BindingList_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new CosNaming::BindingList (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const CosNaming::BindingList *
CosNaming::BindingList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingList *
CosNaming::BindingList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::BindingList_var::operator const CosNaming::BindingList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::BindingList_var::operator CosNaming::BindingList &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
CosNaming::BindingList_var::operator CosNaming::BindingList &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CosNaming::Binding&
CosNaming::BindingList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CosNaming::BindingList &
CosNaming::BindingList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE CosNaming::BindingList &
CosNaming::BindingList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE CosNaming::BindingList *&
CosNaming::BindingList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingList *
CosNaming::BindingList_var::_retn (void)
{
  CosNaming::BindingList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE CosNaming::BindingList *
CosNaming::BindingList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class CosNaming::BindingList_out
// *************************************************************

ACE_INLINE
CosNaming::BindingList_out::BindingList_out (CosNaming::BindingList *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::BindingList_out::BindingList_out (CosNaming::BindingList_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CosNaming::BindingList_out::BindingList_out (CosNaming::BindingList_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::BindingList_out &
CosNaming::BindingList_out::operator= (CosNaming::BindingList_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::BindingList_out &
CosNaming::BindingList_out::operator= (CosNaming::BindingList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::BindingList_out::operator CosNaming::BindingList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingList *&
CosNaming::BindingList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingList *
CosNaming::BindingList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::Binding& 
CosNaming::BindingList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#if !defined (_COSNAMING_BINDINGITERATOR___VAR_CI_)
#define _COSNAMING_BINDINGITERATOR___VAR_CI_

// *************************************************************
// Inline operations for class CosNaming::BindingIterator_var
// *************************************************************

ACE_INLINE
CosNaming::BindingIterator_var::BindingIterator_var (void) // default constructor
	: ptr_ (CosNaming::BindingIterator::_nil ())
{}

ACE_INLINE
CosNaming::BindingIterator_var::BindingIterator_var (CosNaming::BindingIterator_ptr p)
	: ptr_ (p)
{}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CosNaming::BindingIterator_var::BindingIterator_var (const CosNaming::BindingIterator_var &p) // copy constructor
	: ptr_ (CosNaming::BindingIterator::_duplicate (p.ptr ()))
{}

ACE_INLINE
CosNaming::BindingIterator_var::~BindingIterator_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CosNaming::BindingIterator_var &
CosNaming::BindingIterator_var::operator= (CosNaming::BindingIterator_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::BindingIterator_var &
CosNaming::BindingIterator_var::operator= (const CosNaming::BindingIterator_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CosNaming::BindingIterator::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CosNaming::BindingIterator_var::operator const CosNaming::BindingIterator_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::BindingIterator_var::operator CosNaming::BindingIterator_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr
CosNaming::BindingIterator_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr &
CosNaming::BindingIterator_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr &
CosNaming::BindingIterator_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CosNaming::BindingIterator::_nil ();
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_var::_retn (void)
{
  // yield ownership of managed obj reference
  CosNaming::BindingIterator_ptr val = this->ptr_;
  this->ptr_ = CosNaming::BindingIterator::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_COSNAMING_BINDINGITERATOR___OUT_CI_)
#define _COSNAMING_BINDINGITERATOR___OUT_CI_

// *************************************************************
// Inline operations for class CosNaming::BindingIterator_out
// *************************************************************

ACE_INLINE
CosNaming::BindingIterator_out::BindingIterator_out (CosNaming::BindingIterator_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = CosNaming::BindingIterator::_nil ();
}

ACE_INLINE
CosNaming::BindingIterator_out::BindingIterator_out (CosNaming::BindingIterator_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CosNaming::BindingIterator::_nil ();
}

ACE_INLINE
CosNaming::BindingIterator_out::BindingIterator_out (CosNaming::BindingIterator_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::BindingIterator_out &
CosNaming::BindingIterator_out::operator= (CosNaming::BindingIterator_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::BindingIterator_out &
CosNaming::BindingIterator_out::operator= (const CosNaming::BindingIterator_var &p)
{
  this->ptr_ = CosNaming::BindingIterator::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CosNaming::BindingIterator_out &
CosNaming::BindingIterator_out::operator= (CosNaming::BindingIterator_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::BindingIterator_out::operator CosNaming::BindingIterator_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr &
CosNaming::BindingIterator_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

ACE_INLINE
CosNaming::NamingContext::NamingContext (void) // default constructor
{}

ACE_INLINE
CosNaming::NamingContext::NamingContext (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
CosNaming::NamingContext::~NamingContext (void) // destructor
{}


#if !defined (_COSNAMING_NAMINGCONTEXT___VAR_CI_)
#define _COSNAMING_NAMINGCONTEXT___VAR_CI_

// *************************************************************
// Inline operations for class CosNaming::NamingContext_var
// *************************************************************

ACE_INLINE
CosNaming::NamingContext_var::NamingContext_var (void) // default constructor
	: ptr_ (CosNaming::NamingContext::_nil ())
{}

ACE_INLINE
CosNaming::NamingContext_var::NamingContext_var (CosNaming::NamingContext_ptr p)
	: ptr_ (p)
{}

ACE_INLINE CosNaming::NamingContext_ptr 
CosNaming::NamingContext_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CosNaming::NamingContext_var::NamingContext_var (const CosNaming::NamingContext_var &p) // copy constructor
	: ptr_ (CosNaming::NamingContext::_duplicate (p.ptr ()))
{}

ACE_INLINE
CosNaming::NamingContext_var::~NamingContext_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CosNaming::NamingContext_var &
CosNaming::NamingContext_var::operator= (CosNaming::NamingContext_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::NamingContext_var &
CosNaming::NamingContext_var::operator= (const CosNaming::NamingContext_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CosNaming::NamingContext::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CosNaming::NamingContext_var::operator const CosNaming::NamingContext_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::NamingContext_var::operator CosNaming::NamingContext_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr 
CosNaming::NamingContext_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr
CosNaming::NamingContext_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr &
CosNaming::NamingContext_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr &
CosNaming::NamingContext_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CosNaming::NamingContext::_nil ();
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr 
CosNaming::NamingContext_var::_retn (void)
{
  // yield ownership of managed obj reference
  CosNaming::NamingContext_ptr val = this->ptr_;
  this->ptr_ = CosNaming::NamingContext::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_COSNAMING_NAMINGCONTEXT___OUT_CI_)
#define _COSNAMING_NAMINGCONTEXT___OUT_CI_

// *************************************************************
// Inline operations for class CosNaming::NamingContext_out
// *************************************************************

ACE_INLINE
CosNaming::NamingContext_out::NamingContext_out (CosNaming::NamingContext_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = CosNaming::NamingContext::_nil ();
}

ACE_INLINE
CosNaming::NamingContext_out::NamingContext_out (CosNaming::NamingContext_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CosNaming::NamingContext::_nil ();
}

ACE_INLINE
CosNaming::NamingContext_out::NamingContext_out (CosNaming::NamingContext_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::NamingContext_out &
CosNaming::NamingContext_out::operator= (CosNaming::NamingContext_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::NamingContext_out &
CosNaming::NamingContext_out::operator= (const CosNaming::NamingContext_var &p)
{
  this->ptr_ = CosNaming::NamingContext::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CosNaming::NamingContext_out &
CosNaming::NamingContext_out::operator= (CosNaming::NamingContext_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::NamingContext_out::operator CosNaming::NamingContext_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr &
CosNaming::NamingContext_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::NamingContext_ptr 
CosNaming::NamingContext_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

// *************************************************************
// Inline operations for exception CosNaming::NamingContext::NotFound
// *************************************************************

// default constructor
ACE_INLINE
CosNaming::NamingContext::NotFound::NotFound (void)
  : CORBA_UserException (_tc_NotFound)
{
}

// *************************************************************
// Inline operations for exception CosNaming::NamingContext::CannotProceed
// *************************************************************

// default constructor
ACE_INLINE
CosNaming::NamingContext::CannotProceed::CannotProceed (void)
  : CORBA_UserException (_tc_CannotProceed)
{
}

// *************************************************************
// Inline operations for exception CosNaming::NamingContext::InvalidName
// *************************************************************

// default constructor
ACE_INLINE
CosNaming::NamingContext::InvalidName::InvalidName (void)
  : CORBA_UserException (_tc_InvalidName)
{
}

// *************************************************************
// Inline operations for exception CosNaming::NamingContext::AlreadyBound
// *************************************************************

// default constructor
ACE_INLINE
CosNaming::NamingContext::AlreadyBound::AlreadyBound (void)
  : CORBA_UserException (_tc_AlreadyBound)
{
}

// *************************************************************
// Inline operations for exception CosNaming::NamingContext::NotEmpty
// *************************************************************

// default constructor
ACE_INLINE
CosNaming::NamingContext::NotEmpty::NotEmpty (void)
  : CORBA_UserException (_tc_NotEmpty)
{
}

ACE_INLINE
CosNaming::BindingIterator::BindingIterator (void) // default constructor
{}

ACE_INLINE
CosNaming::BindingIterator::BindingIterator (STUB_Object *objref) // constructor
	: ACE_CORBA_1 (Object) (objref)
{}

ACE_INLINE
CosNaming::BindingIterator::~BindingIterator (void) // destructor
{}


#if !defined (_COSNAMING_BINDINGITERATOR___VAR_CI_)
#define _COSNAMING_BINDINGITERATOR___VAR_CI_

// *************************************************************
// Inline operations for class CosNaming::BindingIterator_var
// *************************************************************

ACE_INLINE
CosNaming::BindingIterator_var::BindingIterator_var (void) // default constructor
	: ptr_ (CosNaming::BindingIterator::_nil ())
{}

ACE_INLINE
CosNaming::BindingIterator_var::BindingIterator_var (CosNaming::BindingIterator_ptr p)
	: ptr_ (p)
{}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
CosNaming::BindingIterator_var::BindingIterator_var (const CosNaming::BindingIterator_var &p) // copy constructor
	: ptr_ (CosNaming::BindingIterator::_duplicate (p.ptr ()))
{}

ACE_INLINE
CosNaming::BindingIterator_var::~BindingIterator_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE CosNaming::BindingIterator_var &
CosNaming::BindingIterator_var::operator= (CosNaming::BindingIterator_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE CosNaming::BindingIterator_var &
CosNaming::BindingIterator_var::operator= (const CosNaming::BindingIterator_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = CosNaming::BindingIterator::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
CosNaming::BindingIterator_var::operator const CosNaming::BindingIterator_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
CosNaming::BindingIterator_var::operator CosNaming::BindingIterator_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr
CosNaming::BindingIterator_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr &
CosNaming::BindingIterator_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr &
CosNaming::BindingIterator_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = CosNaming::BindingIterator::_nil ();
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_var::_retn (void)
{
  // yield ownership of managed obj reference
  CosNaming::BindingIterator_ptr val = this->ptr_;
  this->ptr_ = CosNaming::BindingIterator::_nil ();
  return val;
}


#endif // end #if !defined


#if !defined (_COSNAMING_BINDINGITERATOR___OUT_CI_)
#define _COSNAMING_BINDINGITERATOR___OUT_CI_

// *************************************************************
// Inline operations for class CosNaming::BindingIterator_out
// *************************************************************

ACE_INLINE
CosNaming::BindingIterator_out::BindingIterator_out (CosNaming::BindingIterator_ptr &p)
	: ptr_ (p)
{
  this->ptr_ = CosNaming::BindingIterator::_nil ();
}

ACE_INLINE
CosNaming::BindingIterator_out::BindingIterator_out (CosNaming::BindingIterator_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = CosNaming::BindingIterator::_nil ();
}

ACE_INLINE
CosNaming::BindingIterator_out::BindingIterator_out (CosNaming::BindingIterator_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE CosNaming::BindingIterator_out &
CosNaming::BindingIterator_out::operator= (CosNaming::BindingIterator_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE CosNaming::BindingIterator_out &
CosNaming::BindingIterator_out::operator= (const CosNaming::BindingIterator_var &p)
{
  this->ptr_ = CosNaming::BindingIterator::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE CosNaming::BindingIterator_out &
CosNaming::BindingIterator_out::operator= (CosNaming::BindingIterator_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
CosNaming::BindingIterator_out::operator CosNaming::BindingIterator_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr &
CosNaming::BindingIterator_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE CosNaming::BindingIterator_ptr 
CosNaming::BindingIterator_out::operator-> (void)
{
  return this->ptr_;
}


#endif // end #if !defined

