// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:338


#include "Kokyu_qosC.h"
#include "tao/ORB_Core.h"
#include "tao/Typecode.h"
#include "tao/Any_Dual_Impl_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "Kokyu_qosC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:62

// Arg traits specializations.
namespace TAO
{
};

// TAO_IDL - Generated from 
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_KOKYU_GUIDTYPE_CS_)
#define _KOKYU_GUIDTYPE_CS_

Kokyu::GuidType::GuidType (void)
{}

Kokyu::GuidType::GuidType (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (max)
{}

Kokyu::GuidType::GuidType (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Octet * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (max, length, buffer, release)
{}

Kokyu::GuidType::GuidType (
    const GuidType &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (seq)
{}

Kokyu::GuidType::~GuidType (void)
{}

void Kokyu::GuidType::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  GuidType * _tao_tmp_pointer =
    ACE_static_cast (GuidType *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Kokyu_GuidType[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x4b6f6b79), 
  ACE_NTOHL (0x752f4775), 
  ACE_NTOHL (0x69645479), 
  ACE_NTOHL (0x70653a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Kokyu/GuidType:1.0
    9,
  ACE_NTOHL (0x47756964), 
  ACE_NTOHL (0x54797065), 
  ACE_NTOHL (0x0),  // name = GuidType
    CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Kokyu_GuidType (
    CORBA::tk_alias,
    sizeof (_oc_Kokyu_GuidType),
    (char *) &_oc_Kokyu_GuidType,
    0,
    sizeof (Kokyu::GuidType)
  );

namespace Kokyu
{
  ::CORBA::TypeCode_ptr _tc_GuidType =
    &_tc_TAO_tc_Kokyu_GuidType;
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Kokyu_Svc_Ctxt_DSRT_QoS[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x4b6f6b79), 
  ACE_NTOHL (0x752f5376), 
  ACE_NTOHL (0x635f4374), 
  ACE_NTOHL (0x78745f44), 
  ACE_NTOHL (0x5352545f), 
  ACE_NTOHL (0x516f533a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Kokyu/Svc_Ctxt_DSRT_QoS:1.0
    18,
  ACE_NTOHL (0x5376635f), 
  ACE_NTOHL (0x43747874), 
  ACE_NTOHL (0x5f445352), 
  ACE_NTOHL (0x545f516f), 
  ACE_NTOHL (0x53000000),  // name = Svc_Ctxt_DSRT_QoS
  6, // member count
    5,
  ACE_NTOHL (0x67756964), 
  ACE_NTOHL (0x0),  // name = guid
    CORBA::tk_alias, // typecode kind for typedefs
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x4b6f6b79), 
    ACE_NTOHL (0x752f4775), 
    ACE_NTOHL (0x69645479), 
    ACE_NTOHL (0x70653a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Kokyu/GuidType:1.0
        9,
    ACE_NTOHL (0x47756964), 
    ACE_NTOHL (0x54797065), 
    ACE_NTOHL (0x0),  // name = GuidType
        CORBA::tk_sequence, // typecode kind
    12, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_octet,

      0U,


  11,
  ACE_NTOHL (0x696d706f), 
  ACE_NTOHL (0x7274616e), 
  ACE_NTOHL (0x63650000),  // name = importance
    CORBA::tk_long,

  12,
  ACE_NTOHL (0x63726974), 
  ACE_NTOHL (0x6963616c), 
  ACE_NTOHL (0x69747900),  // name = criticality
    CORBA::tk_long,

  17,
  ACE_NTOHL (0x64657369), 
  ACE_NTOHL (0x7265645f), 
  ACE_NTOHL (0x7072696f), 
  ACE_NTOHL (0x72697479), 
  ACE_NTOHL (0x0),  // name = desired_priority
    CORBA::tk_alias, // typecode kind for typedefs
  64, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x5254434f), 
    ACE_NTOHL (0x5242412f), 
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/RTCORBA/Priority:1.0
        9,
    ACE_NTOHL (0x5072696f), 
    ACE_NTOHL (0x72697479), 
    ACE_NTOHL (0x0),  // name = Priority
        CORBA::tk_short,


  9,
  ACE_NTOHL (0x64656164), 
  ACE_NTOHL (0x6c696e65), 
  ACE_NTOHL (0x0),  // name = deadline
    CORBA::tk_alias, // typecode kind for typedefs
  56, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x42617365), 
    ACE_NTOHL (0x2f54696d), 
    ACE_NTOHL (0x65543a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/TimeBase/TimeT:1.0
        6,
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x54000000),  // name = TimeT
        CORBA::tk_ulonglong,


  33,
  ACE_NTOHL (0x65737469), 
  ACE_NTOHL (0x6d617465), 
  ACE_NTOHL (0x645f696e), 
  ACE_NTOHL (0x69746961), 
  ACE_NTOHL (0x6c5f6578), 
  ACE_NTOHL (0x65637574), 
  ACE_NTOHL (0x696f6e5f), 
  ACE_NTOHL (0x74696d65), 
  ACE_NTOHL (0x0),  // name = estimated_initial_execution_time
    CORBA::tk_alias, // typecode kind for typedefs
  56, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x42617365), 
    ACE_NTOHL (0x2f54696d), 
    ACE_NTOHL (0x65543a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/TimeBase/TimeT:1.0
        6,
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x54000000),  // name = TimeT
        CORBA::tk_ulonglong,


};

static CORBA::TypeCode _tc_TAO_tc_Kokyu_Svc_Ctxt_DSRT_QoS (
    CORBA::tk_struct,
    sizeof (_oc_Kokyu_Svc_Ctxt_DSRT_QoS),
    (char *) &_oc_Kokyu_Svc_Ctxt_DSRT_QoS,
    0,
    sizeof (Kokyu::Svc_Ctxt_DSRT_QoS)
  );

namespace Kokyu
{
  ::CORBA::TypeCode_ptr _tc_Svc_Ctxt_DSRT_QoS =
    &_tc_TAO_tc_Kokyu_Svc_Ctxt_DSRT_QoS;
}

// TAO_IDL - Generated from 
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:66

void 
Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Svc_Ctxt_DSRT_QoS *_tao_tmp_pointer =
    ACE_static_cast (Svc_Ctxt_DSRT_QoS *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Kokyu::GuidType &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Kokyu::GuidType>::insert_copy (
      _tao_any,
      Kokyu::GuidType::_tao_any_destructor,
      Kokyu::_tc_GuidType,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Kokyu::GuidType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Kokyu::GuidType>::insert (
      _tao_any,
      Kokyu::GuidType::_tao_any_destructor,
      Kokyu::_tc_GuidType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Kokyu::GuidType *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const Kokyu::GuidType *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Kokyu::GuidType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Kokyu::GuidType>::extract (
        _tao_any,
        Kokyu::GuidType::_tao_any_destructor,
        Kokyu::_tc_GuidType,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Kokyu::Svc_Ctxt_DSRT_QoS &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Kokyu::Svc_Ctxt_DSRT_QoS>::insert_copy (
      _tao_any,
      Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
      Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Kokyu::Svc_Ctxt_DSRT_QoS *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Kokyu::Svc_Ctxt_DSRT_QoS>::insert (
      _tao_any,
      Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
      Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Kokyu::Svc_Ctxt_DSRT_QoS *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const Kokyu::Svc_Ctxt_DSRT_QoS *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Kokyu::Svc_Ctxt_DSRT_QoS *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Kokyu::Svc_Ctxt_DSRT_QoS>::extract (
        _tao_any,
        Kokyu::Svc_Ctxt_DSRT_QoS::_tao_any_destructor,
        Kokyu::_tc_Svc_Ctxt_DSRT_QoS,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_Kokyu_GuidType_CPP_
#define _TAO_CDR_OP_Kokyu_GuidType_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Kokyu::GuidType &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      {
        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
          ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (Kokyu::GuidType *)&_tao_sequence);
        if (oseq->mb ())
          return strm.write_octet_array_mb (oseq->mb ());
        else
          return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
      }
      
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Kokyu::GuidType &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      if (ACE_BIT_DISABLED (strm.start ()->flags (),
      ACE_Message_Block::DONT_DELETE))
      {
        TAO_ORB_Core* orb_core = strm.orb_core ();
        if (orb_core != 0 &&
        strm.orb_core ()->resource_factory ()->
        input_cdr_allocator_type_locked () == 1)
        {
          TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
            ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
          oseq->replace (_tao_seq_len, strm.start ());
          oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
          strm.skip_bytes (_tao_seq_len);
          return 1;
        }
      }
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_Kokyu_GuidType_CPP_ */

