$Id$

Documentation for the Simulator

Purpose: To show how the event service can be used to as a media to 
         transport monitoring events including data. 

Application: The events contain C++ structs with avionics information.
             They are supllied by sensors of an avionic and are
             consumed by an JAVA applet running on a different machine and/or
             location.

Implementation: A C++ Supplier pushes events containing a
            navigation or weapons struct to the Event Service.
            The Event Service dispatches the events to any number of
            Consumers which are implemented in JAVA. The JAVA
            consumer extracts the data of the structs and dispatches
            it to various display components.


Requirements: 
           C++ compiler, TAO environment, Visibroker 3.2 for JAVA

!!RELEASE CHANGES: 
	- Visibroker 3.2 instead of 3.1 (new naming conventions)
	- No more customization of the RtecEventCommC.h file (bug is fixed)
        - A different Weapons struct is now used, but it does not influence
          the functionality.

Files:
     Common:
        ss   - restart Naming Service, connect the Event Service and
               Scheduling service with this Naming Service
        NavWeap.idl - IDL definition of the Weapons and Navigation struct
        README - this readme file

     Supplier:
        Event_Sup.cpp - Event Supplier
        Event_Sup.h   - Event Supplier class definition
        Makefile      - Event Supplier Makefile
        (Event_Con.cpp, Event_Con.h - Event Consumer for testing)
	svc.conf - helper file


     Consumer, Simulator:
        Display.java  - Simulation core class 
        Display_Client.java - Main Entry point of the Simulation
        Display_Consumer.java - Event Consumer Administrator
	Display_Push_Consumer.java - Actual Event Consumer
        Display_Object.java - Interface for an Display_Object
        Display_Weapons.java - Implementation of an Display_Object
        Display_Art_Horizon.java - Implementation of an Display_Object
        Display_Object_Factory.java - Factory Object for Display_Objects
        Graph.java - Simulation
        Graph_Panel.java - Simulation
        NS_Resolve.java - Resolving the inital reference to the Naming Service
        Queue.java - Simulation
        Sim_Panel.java - Simulation
        Border_Panel.java - Simulation



Compiling:
    Supplier: in directory  $TAO_ROOT/orbsvcs/tests/Simulator/Event_Supplier/

       cp ../NavWeap.idl .

       "make sure that the following definition is in the 
          $TAO_ROOT/orbsvcs/orbsvcs/RtecEventComm.idl"
              
           struct EventData {
                long x;
                long y;
                any any_value;
            };

       "compile $TAO_ROOT/orbsvcs/orbsvcs"
       "compile $TAO_ROOT/orbsvcs/Event_Service"
       "compile $TAO_ROOT/orbsvcs/Naming_Service"
       "compile $TAO_ROOT/orbsvcs/Scheduling_Service"

       make




    DOVE Browser: in directory $TAO/orbsvcs/tests/Simulator/Sim_Display/.)
       cp ../NavWeap.idl .
       cp $TAO_ROOT/orbsvcs/orbsvcs/CosNaming.idl .
       cp $TAO_ROOT/orbsvcs/orbsvcs/CosTimeBase.idl . 
       cp $TAO_ROOT/orbsvcs/orbsvcs/RtecEventChannelAdmin.idl . 
       cp $TAO_ROOT/orbsvcs/orbsvcs/RtecEventComm.idl . 
       cp $TAO_ROOT/orbsvcs/orbsvcs/RtecScheduler.idl .
       idl2java NavWeap.idl
       idl2java CosNaming.idl
       idl2java CosTimeBase.idl
       idl2java RtecEventChannelAdmin.idl
       idl2java RtecEventComm.idl
       idl2java RtecScheduler.idl

       vbjc *.java
       

Starting:

     Supplier:
       Event_Sup -ORBport 10040 -f MLF.dat -m 1000
		// -m 1000 for 1000 events sent by the supplier
		// -f MLF.dat to read scheduling data from this file as input 

     DOVE Browser:
       vbj Display_Client 
