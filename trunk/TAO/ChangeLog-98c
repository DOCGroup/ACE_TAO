Wed Aug  5 11:21:29 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

	* tests/Cubit/TAO/MT_Cubit/server.cpp: 
	  Fixed couple of minor bugs: assignment of a <const char*> to a
	  <char*> and a misplaced close paren.

	* tests/Cubit/TAO/DII_Cubit/client.cpp: 
	  Removed EGCS warning about implicit use of & with function
	  pointers. 

Tue Aug  4 22:23:47 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tests/Cubit/TAO/MT_Cubit/server.cpp: Cleaned up some of the code
	  and the comments.

Tue Aug  4 21:20:35 1998  Nagarajan Surendrany  <naga@cs.wustl.edu>

	* tests/Cubit/TAO/MT_Cubit/server.cpp : 
	  Replaced 3*BUFSIZ with ACE_DEFAULT_ARGV_BUFSIZ and
	  allocated memory after calculating the length.

Tue Aug  4 20:00:59 1998  Jeff Parsons <jp4@cs.wustl.edu>

	* Param_Test/ub_any_seq.{h,cpp}:
	  Added non-_var members for DII OUT arg and 
	  return value. Test now works for DII and SII.

Tue Aug  4 18:10:16 1998  Jeff Parsons <jp4@cs.wustl.edu>

	* Param_Test/ub_short_seq.{h,cpp}:
	  Param_Test/ub_long_seq.{h.cpp}:
	  Param_Test/ub_str_seq.{h,cpp}:
	  Param_Test/ub_struct_seq.{h,cpp}:
	  Added non-_var members for DII OUT args and
	  return values. Tests now work for DII and SII.

Tue Aug  4 17:32:30 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

	* orbsvcs/tests/Logger/Logging_Test_i.cpp: 
	* orbsvcs/Logging_Service/Logging_Service_i.cpp: 
	  Added some debugging code to test the <make_logger> hashing feature.
	
	* orbsvcs/orbsvcs/Log/Logger_i.{h,cpp}: Added ACE_Hash_Map
	  code. Now calls to make_logger will use the <name> parameter as a
	  hash key to return either a new Logger or a preexisting one. Added 
	  some debugging code to the hash-relevant portions.	

Tue Aug  4 17:23:31 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* orbsvcs/tests/Trading/export_test.cpp,
 	  orbsvcs/tests/Trading/Trading_Service.cpp: Changed all uses of
 	  TAO_OBJID_TRADINGSERVICE to "TradingService" to be compliant
 	  with the CORBA specification.

Tue Aug 04 16:42:50 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/Multiple_Inheritance: This module is used as a test for
 	  IDL interfaces that inherit from multiple interfaces.  The
 	  "diamond of death" inheritance hierarchy is used in this example
 	  where there is a common base class (A), two classes deriving
 	  from the common base class (B and C) and then a final derived
 	  class (D) that inherits from both B and C.

	  The client starts off with CORBA Object, narrows to interface A,
 	  then B, then C, and finally D. It calls all the methods on each
 	  interface.

Tue Aug  4 16:00:16 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

	* TAO-INSTALL.html: Added a section on the use of <corba.h>
	  instead of <tao/corba.h>.  Also cleaned up some other
	  sections about TAOACE.dsw and adding a IDL file to a MSVC
	  project.

Tue Aug  4 15:56:34 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

	* tests/Cubit/TAO/MT_Cubit/server.cpp : Changed BUFSIZ to
	  3*BUFSIZ to fit the arguments. Made the default base orb port
	  as 0.

Tue Aug 4 14:52:12 1998 Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Param_Test/bd_struct_seq.{h,cpp}:
          Same changes as other bounded sequence tests
          checked in yesterday (non _var members for DII
          OUT arg and return value). Test now works for DII
          as well as SII.

Tue Aug  4 12:55:06 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

	* orbsvcs/tests/Logger/run_test.pl: Revised test script to call
	  the executables in the correct directories.

Tue Aug  4 12:11:55 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

	* docs/releasenotes/index.html: Added logging service section

Tue Aug 04 11:08:56 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

	* TAO_IDL/GenExportH.BAT: Moved it to where it really belong,
 	  $ACE_ROOT/bin/.

Mon Aug 3 19:46:55 1998 Jeff Parsons <jp4@cs.wuslt.edu>

        * tao_idl/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
          moved buffer allocation in default constructor from body to
          base class call - prevents debug assertion in param tests.

        * tao/Sequence_T.i:
          change corresponding to the above

        * TAO/tests/Param_Test/bd_short_seq.{h,cpp}:
          TAO/tests/Param_Test/bd_long_seq.{h,cpp}:
          TAO/tests/Param_Test/bd_str_seq.{h,cpp}:
          created non-_var members for OUT args and return values,
          changed add_args and check_validity accordingly. These
          param tests now work for SII and DII.

Mon Aug  3 17:21:42 1998  Gonzalo Diethelm  <gonzo@tango.cs.wustl.edu>

	* IIOP/test/clnt.cpp: 
	* IIOP/test/cubit.cpp: 
	* IIOP/test/cubitC.cpp: 
	* IIOP/test/cubitS.cpp: 
	* IIOP/test/cubit_i.cpp: 
	* IIOP/test/svr.cpp: 
	* IIOP/test/test1.cpp: 
	* IIOP/test/test1_clnt.cpp: 
	* IIOP/test/test1_svr.cpp: 
	* IIOP/test/Orbeline/base_server/Profile_Timer.cpp: 
	* IIOP/test/Orbeline/base_server/cubit_impl.cpp: 
	* IIOP/test/Orbeline/base_server/server.cpp: 
	* IIOP/test/Orbeline/client/Profile_Timer.cpp: 
	* IIOP/test/Orbeline/client/client.cpp: 
	* IIOP/test/Orbix/base_server/cubitC.cpp: 
	* IIOP/test/Orbix/base_server/cubitS.cpp: 
	* IIOP/test/Orbix/base_server/cubit_impl.cpp: 
	* IIOP/test/Orbix/base_server/server.cpp: 
	* IIOP/test/Orbix/base_server/tpr.cpp: 
	* IIOP/test/Orbix/client/client.cpp: 
	* IIOP/test/Orbix/client/cubitC.cpp: 
	* IIOP/test/Orbix/factory_client/client.cpp: 
	* IIOP/test/Orbix/factory_client/cubitC.cpp: 
	* IIOP/test/Orbix/factory_client/cubitS.cpp: 
	* IIOP/test/Orbix/tpool/cubitC.cpp: 
	* IIOP/test/Orbix/tpool/cubitS.cpp: 
	* IIOP/test/Orbix/tpool/cubit_impl.cpp: 
	* IIOP/test/Orbix/tpool/server.cpp: 
	* IIOP/test/Orbix/tpool/tpool.cpp: 
	* IIOP/test/Orbix/tpr/cubitC.cpp: 
	* IIOP/test/Orbix/tpr/cubitS.cpp: 
	* IIOP/test/Orbix/tpr/cubit_impl.cpp: 
	* IIOP/test/Orbix/tpr/server.cpp: 
	* IIOP/test/Orbix/tpr/tpr.cpp: 
	* IIOP/test/Orbix/tps/cubitC.cpp: 
	* IIOP/test/Orbix/tps/cubitS.cpp: 
	* IIOP/test/Orbix/tps/cubit_impl.cpp: 
	* IIOP/test/Orbix/tps/server.cpp: 
	* IIOP/test/Orbix/tps/tps.cpp: 
	* IIOP/tests/Cubit/Orbix/base_server/cubitC.cpp: 
	* IIOP/tests/Cubit/Orbix/base_server/cubitS.cpp: 
	* IIOP/tests/Cubit/Orbix/base_server/cubit_impl.cpp: 
	* IIOP/tests/Cubit/Orbix/base_server/server.cpp: 
	* IIOP/tests/Cubit/Orbix/base_server/tpr.cpp: 
	* IIOP/tests/Cubit/Orbix/client/client.cpp: 
	* IIOP/tests/Cubit/Orbix/client/cubitC.cpp: 
	* IIOP/tests/Cubit/Orbix/factory_client/client.cpp: 
	* IIOP/tests/Cubit/Orbix/factory_client/cubitC.cpp: 
	* IIOP/tests/Cubit/Orbix/factory_client/cubitS.cpp: 
	* IIOP/tests/Cubit/Orbix/tpool/cubitC.cpp: 
	* IIOP/tests/Cubit/Orbix/tpool/cubitS.cpp: 
	* IIOP/tests/Cubit/Orbix/tpool/cubit_impl.cpp: 
	* IIOP/tests/Cubit/Orbix/tpool/server.cpp: 
	* IIOP/tests/Cubit/Orbix/tpool/tpool.cpp: 
	* IIOP/tests/Cubit/Orbix/tpr/cubitC.cpp: 
	* IIOP/tests/Cubit/Orbix/tpr/cubitS.cpp: 
	* IIOP/tests/Cubit/Orbix/tpr/cubit_impl.cpp: 
	* IIOP/tests/Cubit/Orbix/tpr/server.cpp: 
	* IIOP/tests/Cubit/Orbix/tpr/tpr.cpp: 
	* IIOP/tests/Cubit/Orbix/tps/cubitC.cpp: 
	* IIOP/tests/Cubit/Orbix/tps/cubitS.cpp: 
	* IIOP/tests/Cubit/Orbix/tps/cubit_impl.cpp: 
	* IIOP/tests/Cubit/Orbix/tps/tps.cpp: 
	* IIOP/tests/Cubit/TAO/clnt.cpp: 
	* IIOP/tests/Cubit/TAO/cubit.cpp: 
	* IIOP/tests/Cubit/TAO/cubitC.cpp: 
	* IIOP/tests/Cubit/TAO/cubitS.cpp: 
	* IIOP/tests/Cubit/TAO/cubit_i.cpp: 
	* IIOP/tests/Cubit/TAO/svr.cpp: 
	* IIOP/tests/Cubit/TAO/test1.cpp: 
	* IIOP/tests/Cubit/TAO/test1_clnt.cpp: 
	* IIOP/tests/Cubit/TAO/test1_svr.cpp: 
	* IIOP/tests/Cubit/VisiBroker/base_server/Profile_Timer.cpp: 
	* IIOP/tests/Cubit/VisiBroker/base_server/cubit_impl.cpp: 
	* IIOP/tests/Cubit/VisiBroker/base_server/server.cpp: 
	* IIOP/tests/Cubit/VisiBroker/client/Profile_Timer.cpp: 
	* IIOP/tests/Cubit/VisiBroker/client/client.cpp: 
	* IIOP/tests/Thruput_test/client.cpp: 
	* IIOP/tests/Thruput_test/server.cpp: 
	* IIOP/tests/Thruput_test/ttcpC.cpp: 
	* IIOP/tests/Thruput_test/ttcpS.cpp: 
	* IIOP/tests/Thruput_test/ttcp_i.cpp: 
	* IIOP/tests/Thruput_test/utils.cpp: 
	Added ACE_RCSID to these files.

Mon Aug  3 16:49:45 1998  Gonzalo Diethelm  <gonzo@tango.cs.wustl.edu>

	* TAO_IDL/Makefile: 
	We don't attempt to traverse any subdirectories now.
	
	* TAO_IDL/ast/Makefile: 
	* TAO_IDL/be/Makefile: 
	* TAO_IDL/be/be_state.cpp: 
	* TAO_IDL/be/be_state_argument.cpp: 
	* TAO_IDL/be/be_state_array.cpp: 
	* TAO_IDL/be/be_state_attribute.cpp: 
	* TAO_IDL/be/be_state_exception.cpp: 
	* TAO_IDL/be/be_state_operation.cpp: 
	* TAO_IDL/be/be_state_sequence.cpp: 
	* TAO_IDL/be/be_state_structure.cpp: 
	* TAO_IDL/be/be_state_typedef.cpp: 
	* TAO_IDL/be/be_state_union.cpp: 
	* TAO_IDL/driver/Makefile: 
	* TAO_IDL/fe/Makefile: 
	* TAO_IDL/narrow/Makefile: 
	* TAO_IDL/util/Makefile: 
	Erased these now useless files.

	* Benchmark/Marshal_Test/Orbix/marshal.h: 
	Added a RCS Id.

	* Benchmark/Marshal_Test/Orbix/client.cpp: 
	* Benchmark/Marshal_Test/Orbix/marshal.h: 
	* Benchmark/Marshal_Test/Orbix/orbix_marshal_client.cpp: 
	* Benchmark/Marshal_Test/Orbix/orbix_marshal_impl.cpp: 
	* Benchmark/Marshal_Test/Orbix/orbix_marshal_server.cpp: 
	* Benchmark/Marshal_Test/Orbix/server.cpp: 
	* Benchmark/Marshal_Test/TAO/client.cpp: 
	* Benchmark/Marshal_Test/TAO/marshalC.cpp: 
	* Benchmark/Marshal_Test/TAO/marshalS.cpp: 
	* Benchmark/Marshal_Test/TAO/server.cpp: 
	* Benchmark/Marshal_Test/TAO/tao_marshal_client.cpp: 
	* Benchmark/Marshal_Test/TAO/tao_marshal_impl.cpp: 
	* Benchmark/Marshal_Test/TAO/tao_marshal_server.cpp: 
	* Benchmark/Marshal_Test/VisiBroker/client.cpp: 
	* Benchmark/Marshal_Test/VisiBroker/server.cpp: 
	* Benchmark/Marshal_Test/VisiBroker/visi_marshal_client.cpp: 
	* Benchmark/Marshal_Test/VisiBroker/visi_marshal_impl.cpp: 
	* Benchmark/Marshal_Test/VisiBroker/visi_marshal_server.cpp: 
	* Benchmark/benchmark/driver.cpp: 
	* Benchmark/benchmark/marshal_options.cpp: 
	* Benchmark/benchmark/marshal_proxy.cpp: 
	* Benchmark/benchmark/marshal_results.cpp: 
	Added ACE_RCSID to these files.

Mon Aug  3 15:05:39 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

	* orbsvcs/tests/AVStreams/mpeg/Makefile: Added this Makefile
	which compiles the AVStreams mpeg application.

Mon Aug  3 14:23:22 1998  Gonzalo Diethelm  <gonzo@tango.cs.wustl.edu>

	* tests/CDR/basic_types.cpp: 
	* tests/CDR/growth.cpp: 
	* tests/CDR/tc.cpp: 
	* tests/Cubit/COOL/IDL_Cubit/client.cpp: 
	* tests/Cubit/COOL/IDL_Cubit/cubit_i.cpp: 
	* tests/Cubit/COOL/IDL_Cubit/server.cpp: 
	* tests/Cubit/COOL/IDL_Cubit/tmplinst.cpp: 
	* tests/Cubit/COOL/MT_Cubit/Task_Client.cpp: 
	* tests/Cubit/COOL/MT_Cubit/Util_Thread.cpp: 
	* tests/Cubit/COOL/MT_Cubit/client.cpp: 
	* tests/Cubit/COOL/MT_Cubit/cubit_impl.cpp: 
	* tests/Cubit/COOL/MT_Cubit/pccTimer.cpp: 
	* tests/Cubit/COOL/MT_Cubit/server.cpp: 
	* tests/Cubit/CORBAplus/IDL_Cubit/clnt.cpp: 
	* tests/Cubit/CORBAplus/IDL_Cubit/cubit_i.cpp: 
	* tests/Cubit/CORBAplus/IDL_Cubit/svr.cpp: 
	* tests/Cubit/CORBAplus/MT_Cubit/client/Task_Client.cpp: 
	* tests/Cubit/CORBAplus/MT_Cubit/client/client.cpp: 
	* tests/Cubit/CORBAplus/MT_Cubit/server/cubit_i.cpp: 
	* tests/Cubit/CORBAplus/MT_Cubit/server/svr.cpp: 
	* tests/Cubit/Hardpack/IDL_Cubit/client.cpp: 
	* tests/Cubit/Hardpack/IDL_Cubit/client_i.cpp: 
	* tests/Cubit/Hardpack/IDL_Cubit/server.cpp: 
	* tests/Cubit/Hardpack/IDL_Cubit/server_i.cpp: 
	* tests/Cubit/Orbix/base_server/cubit_impl.cpp: 
	* tests/Cubit/Orbix/base_server/server.cpp: 
	* tests/Cubit/Orbix/client/client.cpp: 
	* tests/Cubit/Orbix/client/cubitC.cpp: 
	* tests/Cubit/Orbix/factory_client/client.cpp: 
	* tests/Cubit/Orbix/factory_client/cubitC.cpp: 
	* tests/Cubit/Orbix/factory_client/cubitS.cpp: 
	* tests/Cubit/Orbix/tpool/cubitC.cpp: 
	* tests/Cubit/Orbix/tpool/cubitS.cpp: 
	* tests/Cubit/Orbix/tpool/cubit_impl.cpp: 
	* tests/Cubit/Orbix/tpool/server.cpp: 
	* tests/Cubit/Orbix/tpool/tpool.cpp: 
	* tests/Cubit/Orbix/tpr/cubitC.cpp: 
	* tests/Cubit/Orbix/tpr/cubitS.cpp: 
	* tests/Cubit/Orbix/tpr/cubit_impl.cpp: 
	* tests/Cubit/Orbix/tpr/server.cpp: 
	* tests/Cubit/Orbix/tpr/tpr.cpp: 
	* tests/Cubit/Orbix/tps/cubitC.cpp: 
	* tests/Cubit/Orbix/tps/cubitS.cpp: 
	* tests/Cubit/Orbix/tps/cubit_impl.cpp: 
	* tests/Cubit/Orbix/tps/tps.cpp: 
	* tests/Cubit/TAO/DII_Cubit/client.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/IDL_Cubit_Test.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/client.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/client_i.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/collocation_test.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/cubit_i.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/server.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/server_i.cpp: 
	* tests/Cubit/TAO/IDL_Cubit/tmplinst.cpp: 
	* tests/Cubit/TAO/MT_Cubit/Task_Client.cpp: 
	* tests/Cubit/TAO/MT_Cubit/Util_Thread.cpp: 
	* tests/Cubit/TAO/MT_Cubit/client.cpp: 
	* tests/Cubit/TAO/MT_Cubit/cubit_i.cpp: 
	* tests/Cubit/TAO/MT_Cubit/pccTimer.cpp: 
	* tests/Cubit/TAO/MT_Cubit/server.cpp: 
	* tests/Cubit/TAO/MT_Cubit/tmplinst.cpp: 
	* tests/Cubit/VisiBroker/base_server/Profile_Timer.cpp: 
	* tests/Cubit/VisiBroker/base_server/cubit_impl.cpp: 
	* tests/Cubit/VisiBroker/base_server/server.cpp: 
	* tests/Cubit/VisiBroker/client/Profile_Timer.cpp: 
	* tests/Cubit/VisiBroker/client/client.cpp: 
	* tests/Demux_Test/client.cpp: 
	* tests/Demux_Test/server.cpp: 
	* tests/Demux_Test/CodeGen/client.cpp: 
	* tests/Demux_Test/CodeGen/gen.cpp: 
	* tests/Demux_Test/CodeGen/impl.cpp: 
	* tests/Demux_Test/CodeGen/objcreate.cpp: 
	* tests/Demux_Test/CodeGen/perf.cpp: 
	* tests/Demux_Test/CodeGen/skel.cpp: 
	* tests/Demux_Test/CodeGen/stub.cpp: 
	* tests/Demux_Test/CodeGen/tao.cpp: 
	* tests/NestedUpcall/MT_Client_Test/MT_Object_Impl.cpp: 
	* tests/NestedUpcall/MT_Client_Test/client.cpp: 
	* tests/NestedUpcall/MT_Client_Test/local_server.cpp: 
	* tests/NestedUpcall/MT_Client_Test/server.cpp: 
	* tests/NestedUpcall/Reactor/NestedUpCalls_Test.cpp: 
	* tests/NestedUpcall/Reactor/client.cpp: 
	* tests/NestedUpcall/Reactor/eh_i.cpp: 
	* tests/NestedUpcall/Reactor/reactor_i.cpp: 
	* tests/NestedUpcall/Reactor/server.cpp: 
	* tests/NestedUpcall/Triangle_Test/Initiator_Impl.cpp: 
	* tests/NestedUpcall/Triangle_Test/Object_A_Impl.cpp: 
	* tests/NestedUpcall/Triangle_Test/Object_B_Impl.cpp: 
	* tests/NestedUpcall/Triangle_Test/initiator.cpp: 
	* tests/NestedUpcall/Triangle_Test/server_A.cpp: 
	* tests/NestedUpcall/Triangle_Test/server_B.cpp: 
	* tests/OctetSeq/OctetSeq.cpp: 
	* tests/POA/DSI/Database_i.cpp: 
	* tests/POA/DSI/client.cpp: 
	* tests/POA/DSI/server.cpp: 
	* tests/POA/Default_Servant/File_i.cpp: 
	* tests/POA/Default_Servant/client.cpp: 
	* tests/POA/Default_Servant/server.cpp: 
	* tests/POA/Explicit_Activation/server.cpp: 
	* tests/POA/FindPOA/FindPOA.cpp: 
	* tests/POA/Forwarding/MyFooServant.cpp: 
	* tests/POA/Forwarding/Servant_Locator.cpp: 
	* tests/POA/Forwarding/client.cpp: 
	* tests/POA/Forwarding/server.cpp: 
	* tests/POA/Generic_Servant/MyFooServant.cpp: 
	* tests/POA/Generic_Servant/client.cpp: 
	* tests/POA/NewPOA/NewPOA.cpp: 
	* tests/POA/On_Demand_Activation/Servant_Activator.cpp: 
	* tests/POA/On_Demand_Activation/Servant_Locator.cpp: 
	* tests/POA/On_Demand_Activation/server.cpp: 
	* tests/POA/RootPOA/RootPOA.cpp: 
	* tests/POA/TIE/Foo_i.cpp: 
	* tests/POA/TIE/client.cpp: 
	* tests/POA/TIE/server.cpp: 
	* tests/POA/locking/locking.cpp: 
	* tests/Param_Test/any.cpp: 
	* tests/Param_Test/bd_long_seq.cpp: 
	* tests/Param_Test/bd_short_seq.cpp: 
	* tests/Param_Test/bd_str_seq.cpp: 
	* tests/Param_Test/bd_string.cpp: 
	* tests/Param_Test/bd_struct_seq.cpp: 
	* tests/Param_Test/client.cpp: 
	* tests/Param_Test/driver.cpp: 
	* tests/Param_Test/fixed_array.cpp: 
	* tests/Param_Test/fixed_struct.cpp: 
	* tests/Param_Test/helper.cpp: 
	* tests/Param_Test/nested_struct.cpp: 
	* tests/Param_Test/objref.cpp: 
	* tests/Param_Test/options.cpp: 
	* tests/Param_Test/param_test_i.cpp: 
	* tests/Param_Test/results.cpp: 
	* tests/Param_Test/server.cpp: 
	* tests/Param_Test/short.cpp: 
	* tests/Param_Test/tmplinst.cpp: 
	* tests/Param_Test/typecode.cpp: 
	* tests/Param_Test/ub_any_seq.cpp: 
	* tests/Param_Test/ub_long_seq.cpp: 
	* tests/Param_Test/ub_objref_seq.cpp: 
	* tests/Param_Test/ub_short_seq.cpp: 
	* tests/Param_Test/ub_str_seq.cpp: 
	* tests/Param_Test/ub_string.cpp: 
	* tests/Param_Test/ub_struct_seq.cpp: 
	* tests/Param_Test/var_array.cpp: 
	* tests/Param_Test/var_struct.cpp: 
	* tests/Quoter/Factory_Finder.cpp: 
	* tests/Quoter/Factory_Finder_Impl.cpp: 
	* tests/Quoter/Generic_Factory.cpp: 
	* tests/Quoter/Generic_Factory_Impl.cpp: 
	* tests/Quoter/Quoter_Impl.cpp: 
	* tests/Quoter/client.cpp: 
	* tests/Quoter/server.cpp: 
	* tests/Simple/client.cpp: 
	* tests/Simple/client_impl.cpp: 
	* tests/Simple/server.cpp: 
	* tests/Simple/server_impl.cpp: 
	* tests/Simple/simple_object_impl.cpp: 
	* tests/Thruput/COOL/client.cpp: 
	* tests/Thruput/COOL/server.cpp: 
	* tests/Thruput/COOL/ttcp_i.cpp: 
	* tests/Thruput/COOL/utils.cpp: 
	* tests/Thruput/CORBAplus/client.cpp: 
	* tests/Thruput/CORBAplus/server.cpp: 
	* tests/Thruput/CORBAplus/ttcp_i.cpp: 
	* tests/Thruput/CORBAplus/utils.cpp: 
	* tests/Thruput/Orbix/Client.cpp: 
	* tests/Thruput/Orbix/Srv_Main.cpp: 
	* tests/Thruput/Orbix/ttcp_i.cpp: 
	* tests/Thruput/Orbix/utils.cpp: 
	* tests/Thruput/TAO/client.cpp: 
	* tests/Thruput/TAO/server.cpp: 
	* tests/Thruput/TAO/tmplinst.cpp: 
	* tests/Thruput/TAO/ttcp_i.cpp: 
	* tests/Thruput/TAO/utils.cpp: 
	Added ACE_RCSID to these files.

Mon Aug  3 13:51:27 1998  Gonzalo Diethelm  <gonzo@tango.cs.wustl.edu>

	* orbsvcs/Makefile: 
	* orbsvcs/Concurrency_Service/Concurrency_Service.cpp: 
	* orbsvcs/Dump_Schedule/Dump_Schedule.cpp: 
	* orbsvcs/Event_Service/Event_Service.cpp: 
	* orbsvcs/LifeCycle_Service/Criteria_Evaluator.cpp: 
	* orbsvcs/LifeCycle_Service/Factory_Trader.cpp: 
	* orbsvcs/LifeCycle_Service/Life_Cycle_Service.cpp: 
	* orbsvcs/LifeCycle_Service/Life_Cycle_Service_Impl.cpp: 
	* orbsvcs/Logging_Service/Logging_Service.cpp: 
	* orbsvcs/Logging_Service/Logging_Service_i.cpp: 
	* orbsvcs/Naming_Service/Naming_Service.cpp: 
	* orbsvcs/Scheduling_Service/Scheduling_Service.cpp: 
	* orbsvcs/Trading_Service/Trading_Service.cpp: 
	* orbsvcs/orbsvcs/Channel_Clients.cpp: 
	* orbsvcs/orbsvcs/Channel_Clients_T.cpp: 
	* orbsvcs/orbsvcs/Event_Utilities.cpp: 
	* orbsvcs/orbsvcs/IOR_Multicast.cpp: 
	* orbsvcs/orbsvcs/Runtime_Scheduler.cpp: 
	* orbsvcs/orbsvcs/Scheduler_Factory.cpp: 
	* orbsvcs/orbsvcs/Scheduler_Utilities.cpp: 
	* orbsvcs/orbsvcs/Time_Utilities.cpp: 
	* orbsvcs/orbsvcs/tmplinst-orbsvcs.cpp: 
	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp: 
	* orbsvcs/orbsvcs/AV/Endpoint_Strategy.cpp: 
	* orbsvcs/orbsvcs/Concurrency/CC_Lock.cpp: 
	* orbsvcs/orbsvcs/Concurrency/CC_LockSet.cpp: 
	* orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.cpp: 
	* orbsvcs/orbsvcs/Concurrency/Concurrency_Utils.cpp: 
	* orbsvcs/orbsvcs/Event/BCU.cpp: 
	* orbsvcs/orbsvcs/Event/CORBA_Utils_T.cpp: 
	* orbsvcs/orbsvcs/Event/Dispatching_Modules.cpp: 
	* orbsvcs/orbsvcs/Event/EC_Gateway.cpp: 
	* orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp: 
	* orbsvcs/orbsvcs/Event/Event_Channel.cpp: 
	* orbsvcs/orbsvcs/Event/GPlot_File.cpp: 
	* orbsvcs/orbsvcs/Event/Local_ESTypes.cpp: 
	* orbsvcs/orbsvcs/Event/Memory_Pools.cpp: 
	* orbsvcs/orbsvcs/Event/Module_Factory.cpp: 
	* orbsvcs/orbsvcs/Event/RT_Task.cpp: 
	* orbsvcs/orbsvcs/Event/ReactorTask.cpp: 
	* orbsvcs/orbsvcs/Event/Task_Manager.cpp: 
	* orbsvcs/orbsvcs/Log/Logger_i.cpp: 
	* orbsvcs/orbsvcs/Naming/CosNaming_i.cpp: 
	* orbsvcs/orbsvcs/Naming/Entries.cpp: 
	* orbsvcs/orbsvcs/Naming/Naming_Utils.cpp: 
	* orbsvcs/orbsvcs/Property/CosPropertyService_i.cpp: 
	* orbsvcs/orbsvcs/Sched/Config_Scheduler.cpp: 
	* orbsvcs/orbsvcs/Sched/DynSched.cpp: 
	* orbsvcs/orbsvcs/Sched/SchedEntry.cpp: 
	* orbsvcs/orbsvcs/Sched/Scheduler.cpp: 
	* orbsvcs/orbsvcs/Sched/Scheduler_Generic.cpp: 
	* orbsvcs/orbsvcs/Sched/Strategy_Scheduler.cpp: 
	* orbsvcs/orbsvcs/Trader/Constraint_Interpreter.cpp: 
	* orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp: 
	* orbsvcs/orbsvcs/Trader/Constraint_Visitors.cpp: 
	* orbsvcs/orbsvcs/Trader/Offer_Database.cpp: 
	* orbsvcs/orbsvcs/Trader/Offer_Iterators.cpp: 
	* orbsvcs/orbsvcs/Trader/Offer_Iterators_T.cpp: 
	* orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp: 
	* orbsvcs/orbsvcs/Trader/Trader.cpp: 
	* orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp: 
	* orbsvcs/orbsvcs/Trader/Trader_T.cpp: 
	* orbsvcs/orbsvcs/Trader/Trader_Utils.cpp: 
	* orbsvcs/tests/AVStreams/benchmark/child.cpp: 
	* orbsvcs/tests/AVStreams/benchmark/client.cpp: 
	* orbsvcs/tests/AVStreams/benchmark/server.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/client/vcr.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/24bit.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/2x2.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/Command_Handler.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/ab.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/audio.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/ctr.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/decoders.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/file.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/fs2.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/fs2fast.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/fs4.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/global.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/gray.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/hybrid.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/hybriderr.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/info.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/jrevdct.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/mb_ordered.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/mono.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/motionvector.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/ordered.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/ordered2.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/para.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/parseblock.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/prog.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/ui.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/util.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/util32.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/vb.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/vd.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/video.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/vp.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibButton.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibDrawArea.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibFrame.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibLabel.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibList.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibMenu.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibRadioBox.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibScale.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibScrollBar.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibTextBig.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibTextBox.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibToggle.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/mibload.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Audio_Control_State.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Audio_Control_i.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Audio_Server.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Globals.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Video_Control_State.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Video_Control_i.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Video_Server.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/as.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/las.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/lvs.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/vs.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/com.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/fileio.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/filters.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/routine.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/sendpt.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/Machine_Properties.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/Property_Exporter.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/Video_Repository.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/as.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/augmented_server.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/server.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/vcrs.cpp: 
	* orbsvcs/tests/AVStreams/mpeg/source/server/vs.cpp: 
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery.cpp: 
	* orbsvcs/tests/AVStreams/server_discovery/Trader_Client.cpp: 
	* orbsvcs/tests/AVStreams/server_discovery/main.cpp: 
	* orbsvcs/tests/AVStreams/sfp/client.cpp: 
	* orbsvcs/tests/Concurrency/CC_client.cpp: 
	* orbsvcs/tests/Concurrency/CC_command.cpp: 
	* orbsvcs/tests/Concurrency/CC_naming_service.cpp: 
	* orbsvcs/tests/Concurrency/CC_test_utils.cpp: 
	* orbsvcs/tests/Concurrency/CC_tests.cpp: 
	* orbsvcs/tests/Concurrency/NS_client.cpp: 
	* orbsvcs/tests/Concurrency/tmplinst.cpp: 
	* orbsvcs/tests/CosPropertyService/client.cpp: 
	* orbsvcs/tests/CosPropertyService/main.cpp: 
	* orbsvcs/tests/CosPropertyService/server.cpp: 
	* orbsvcs/tests/EC_Mcast/EC_Mcast.cpp: 
	* orbsvcs/tests/EC_Multiple/EC_Multiple.cpp: 
	* orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp: 
	* orbsvcs/tests/EC_Throughput/ECT_Data.cpp: 
	* orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp: 
	* orbsvcs/tests/Event_Latency/Event_Latency.cpp: 
	* orbsvcs/tests/ImplRepo/client.cpp: 
	* orbsvcs/tests/ImplRepo/client_impl.cpp: 
	* orbsvcs/tests/ImplRepo/ir_server.cpp: 
	* orbsvcs/tests/ImplRepo/ir_server_impl.cpp: 
	* orbsvcs/tests/ImplRepo/ir_simple_object_impl.cpp: 
	* orbsvcs/tests/ImplRepo/server.cpp: 
	* orbsvcs/tests/ImplRepo/server_impl.cpp: 
	* orbsvcs/tests/ImplRepo/simple_object_impl.cpp: 
	* orbsvcs/tests/Logger/Logging_Test.cpp: 
	* orbsvcs/tests/Logger/Logging_Test_i.cpp: 
	* orbsvcs/tests/Logger/client.cpp: 
	* orbsvcs/tests/Logger/client_i.cpp: 
	* orbsvcs/tests/Logger/server.cpp: 
	* orbsvcs/tests/Logger/server_i.cpp: 
	* orbsvcs/tests/Naming/ns_tree.cpp: 
	* orbsvcs/tests/Property/client.cpp: 
	* orbsvcs/tests/Property/main.cpp: 
	* orbsvcs/tests/Property/server.cpp: 
	* orbsvcs/tests/Sched/DynSched_Test.cpp: 
	* orbsvcs/tests/Sched_Conf/Sched_Conf.cpp: 
	* orbsvcs/tests/Simple_Naming/client.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/AnyAnalyser.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/DOVEMIB.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/Node.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/PrintVisitor.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/any_test_i.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/clnt.cpp: 
	* orbsvcs/tests/Simulator/DOVEMIB/svr.cpp: 
	* orbsvcs/tests/Simulator/Event_Supplier/DOVE_Supplier.cpp: 
	* orbsvcs/tests/Simulator/Event_Supplier/Event_Con.cpp: 
	* orbsvcs/tests/Simulator/Event_Supplier/Event_Sup.cpp: 
	* orbsvcs/tests/Trading/Offer_Exporter.cpp: 
	* orbsvcs/tests/Trading/Offer_Importer.cpp: 
	* orbsvcs/tests/Trading/Service_Type_Exporter.cpp: 
	* orbsvcs/tests/Trading/Simple_Dynamic.cpp: 
	* orbsvcs/tests/Trading/TT_Info.cpp: 
	* orbsvcs/tests/Trading/colocated_test.cpp: 
	* orbsvcs/tests/Trading/export_test.cpp: 
	* orbsvcs/tests/Trading/import_test.cpp: 
	Added ACE_RCSID to these files.

Mon Aug  3 12:08:15 1998  Gonzalo Diethelm  <gonzo@tango.cs.wustl.edu>

	* TAO_IDL/tao_idl.cpp: 
	* TAO_IDL/ast/ast_argument.cpp: 
	* TAO_IDL/ast/ast_array.cpp: 
	* TAO_IDL/ast/ast_attribute.cpp: 
	* TAO_IDL/ast/ast_check.cpp: 
	* TAO_IDL/ast/ast_concrete_type.cpp: 
	* TAO_IDL/ast/ast_constant.cpp: 
	* TAO_IDL/ast/ast_decl.cpp: 
	* TAO_IDL/ast/ast_enum.cpp: 
	* TAO_IDL/ast/ast_enum_val.cpp: 
	* TAO_IDL/ast/ast_exception.cpp: 
	* TAO_IDL/ast/ast_expression.cpp: 
	* TAO_IDL/ast/ast_field.cpp: 
	* TAO_IDL/ast/ast_generator.cpp: 
	* TAO_IDL/ast/ast_interface.cpp: 
	* TAO_IDL/ast/ast_interface_fwd.cpp: 
	* TAO_IDL/ast/ast_module.cpp: 
	* TAO_IDL/ast/ast_native.cpp: 
	* TAO_IDL/ast/ast_operation.cpp: 
	* TAO_IDL/ast/ast_predefined_type.cpp: 
	* TAO_IDL/ast/ast_recursive.cpp: 
	* TAO_IDL/ast/ast_redef.cpp: 
	* TAO_IDL/ast/ast_root.cpp: 
	* TAO_IDL/ast/ast_sequence.cpp: 
	* TAO_IDL/ast/ast_string.cpp: 
	* TAO_IDL/ast/ast_structure.cpp: 
	* TAO_IDL/ast/ast_type.cpp: 
	* TAO_IDL/ast/ast_typedef.cpp: 
	* TAO_IDL/ast/ast_union.cpp: 
	* TAO_IDL/ast/ast_union_branch.cpp: 
	* TAO_IDL/ast/ast_union_label.cpp: 
	* TAO_IDL/be/be_args.cpp: 
	* TAO_IDL/be/be_argument.cpp: 
	* TAO_IDL/be/be_array.cpp: 
	* TAO_IDL/be/be_attribute.cpp: 
	* TAO_IDL/be/be_codegen.cpp: 
	* TAO_IDL/be/be_constant.cpp: 
	* TAO_IDL/be/be_decl.cpp: 
	* TAO_IDL/be/be_enum.cpp: 
	* TAO_IDL/be/be_enum_val.cpp: 
	* TAO_IDL/be/be_exception.cpp: 
	* TAO_IDL/be/be_expression.cpp: 
	* TAO_IDL/be/be_factory.cpp: 
	* TAO_IDL/be/be_field.cpp: 
	* TAO_IDL/be/be_generator.cpp: 
	* TAO_IDL/be/be_helper.cpp: 
	* TAO_IDL/be/be_init.cpp: 
	* TAO_IDL/be/be_interface.cpp: 
	* TAO_IDL/be/be_interface_fwd.cpp: 
	* TAO_IDL/be/be_interpretive.cpp: 
	* TAO_IDL/be/be_module.cpp: 
	* TAO_IDL/be/be_native.cpp: 
	* TAO_IDL/be/be_operation.cpp: 
	* TAO_IDL/be/be_predefined_type.cpp: 
	* TAO_IDL/be/be_produce.cpp: 
	* TAO_IDL/be/be_root.cpp: 
	* TAO_IDL/be/be_scope.cpp: 
	* TAO_IDL/be/be_sequence.cpp: 
	* TAO_IDL/be/be_state.cpp: 
	* TAO_IDL/be/be_state_argument.cpp: 
	* TAO_IDL/be/be_state_array.cpp: 
	* TAO_IDL/be/be_state_attribute.cpp: 
	* TAO_IDL/be/be_state_exception.cpp: 
	* TAO_IDL/be/be_state_operation.cpp: 
	* TAO_IDL/be/be_state_sequence.cpp: 
	* TAO_IDL/be/be_state_structure.cpp: 
	* TAO_IDL/be/be_state_typedef.cpp: 
	* TAO_IDL/be/be_state_union.cpp: 
	* TAO_IDL/be/be_string.cpp: 
	* TAO_IDL/be/be_structure.cpp: 
	* TAO_IDL/be/be_sunsoft.cpp: 
	* TAO_IDL/be/be_type.cpp: 
	* TAO_IDL/be/be_typedef.cpp: 
	* TAO_IDL/be/be_union.cpp: 
	* TAO_IDL/be/be_union_branch.cpp: 
	* TAO_IDL/be/be_union_label.cpp: 
	* TAO_IDL/be/be_visitor.cpp: 
	* TAO_IDL/be/be_visitor_argument.cpp: 
	* TAO_IDL/be/be_visitor_array.cpp: 
	* TAO_IDL/be/be_visitor_attribute.cpp: 
	* TAO_IDL/be/be_visitor_constant.cpp: 
	* TAO_IDL/be/be_visitor_context.cpp: 
	* TAO_IDL/be/be_visitor_decl.cpp: 
	* TAO_IDL/be/be_visitor_enum.cpp: 
	* TAO_IDL/be/be_visitor_exception.cpp: 
	* TAO_IDL/be/be_visitor_field.cpp: 
	* TAO_IDL/be/be_visitor_interface.cpp: 
	* TAO_IDL/be/be_visitor_interface_fwd.cpp: 
	* TAO_IDL/be/be_visitor_module.cpp: 
	* TAO_IDL/be/be_visitor_operation.cpp: 
	* TAO_IDL/be/be_visitor_root.cpp: 
	* TAO_IDL/be/be_visitor_scope.cpp: 
	* TAO_IDL/be/be_visitor_sequence.cpp: 
	* TAO_IDL/be/be_visitor_structure.cpp: 
	* TAO_IDL/be/be_visitor_typecode.cpp: 
	* TAO_IDL/be/be_visitor_typedef.cpp: 
	* TAO_IDL/be/be_visitor_union.cpp: 
	* TAO_IDL/be/be_visitor_union_branch.cpp: 
	* TAO_IDL/be/be_visitor_argument/arglist.cpp: 
	* TAO_IDL/be/be_visitor_argument/argument.cpp: 
	* TAO_IDL/be/be_visitor_argument/docall_cs.cpp: 
	* TAO_IDL/be/be_visitor_argument/marshal_ss.cpp: 
	* TAO_IDL/be/be_visitor_argument/post_docall_cs.cpp: 
	* TAO_IDL/be/be_visitor_argument/post_marshal_ss.cpp: 
	* TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp: 
	* TAO_IDL/be/be_visitor_argument/pre_docall_cs.cpp: 
	* TAO_IDL/be/be_visitor_argument/pre_upcall_ss.cpp: 
	* TAO_IDL/be/be_visitor_argument/upcall_ss.cpp: 
	* TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp: 
	* TAO_IDL/be/be_visitor_array/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_array/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_array/array.cpp: 
	* TAO_IDL/be/be_visitor_array/array_ch.cpp: 
	* TAO_IDL/be/be_visitor_array/array_ci.cpp: 
	* TAO_IDL/be/be_visitor_array/array_cs.cpp: 
	* TAO_IDL/be/be_visitor_attribute/attribute.cpp: 
	* TAO_IDL/be/be_visitor_constant/constant_ch.cpp: 
	* TAO_IDL/be/be_visitor_constant/constant_cs.cpp: 
	* TAO_IDL/be/be_visitor_enum/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_enum/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_enum/enum_ch.cpp: 
	* TAO_IDL/be/be_visitor_enum/enum_cs.cpp: 
	* TAO_IDL/be/be_visitor_exception/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_exception/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_exception/ctor_assign.cpp: 
	* TAO_IDL/be/be_visitor_exception/exception.cpp: 
	* TAO_IDL/be/be_visitor_exception/exception_ch.cpp: 
	* TAO_IDL/be/be_visitor_exception/exception_ci.cpp: 
	* TAO_IDL/be/be_visitor_exception/exception_cs.cpp: 
	* TAO_IDL/be/be_visitor_exception/exception_ctor.cpp: 
	* TAO_IDL/be/be_visitor_field/field_ch.cpp: 
	* TAO_IDL/be/be_visitor_field/field_ci.cpp: 
	* TAO_IDL/be/be_visitor_field/field_cs.cpp: 
	* TAO_IDL/be/be_visitor_interface/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_interface/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_interface/collocated_sh.cpp: 
	* TAO_IDL/be/be_visitor_interface/collocated_ss.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface_ch.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface_ci.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface_cs.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface_si.cpp: 
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp: 
	* TAO_IDL/be/be_visitor_interface/tie_sh.cpp: 
	* TAO_IDL/be/be_visitor_interface/tie_si.cpp: 
	* TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp: 
	* TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ci.cpp: 
	* TAO_IDL/be/be_visitor_module/any_op.cpp: 
	* TAO_IDL/be/be_visitor_module/module.cpp: 
	* TAO_IDL/be/be_visitor_module/module_ch.cpp: 
	* TAO_IDL/be/be_visitor_module/module_sh.cpp: 
	* TAO_IDL/be/be_visitor_operation/arglist.cpp: 
	* TAO_IDL/be/be_visitor_operation/argument.cpp: 
	* TAO_IDL/be/be_visitor_operation/collocated_sh.cpp: 
	* TAO_IDL/be/be_visitor_operation/collocated_ss.cpp: 
	* TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/operation_ch.cpp: 
	* TAO_IDL/be/be_visitor_operation/operation_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/operation_sh.cpp: 
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_assign_ss.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_docall_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_post_docall_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_post_upcall_ss.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_pre_docall_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp: 
	* TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp: 
	* TAO_IDL/be/be_visitor_operation/tie_sh.cpp: 
	* TAO_IDL/be/be_visitor_operation/tie_si.cpp: 
	* TAO_IDL/be/be_visitor_root/any_op.cpp: 
	* TAO_IDL/be/be_visitor_root/root.cpp: 
	* TAO_IDL/be/be_visitor_root/root_ch.cpp: 
	* TAO_IDL/be/be_visitor_root/root_ci.cpp: 
	* TAO_IDL/be/be_visitor_root/root_cs.cpp: 
	* TAO_IDL/be/be_visitor_root/root_sh.cpp: 
	* TAO_IDL/be/be_visitor_root/root_si.cpp: 
	* TAO_IDL/be/be_visitor_root/root_ss.cpp: 
	* TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_sequence/buffer_type.cpp: 
	* TAO_IDL/be/be_visitor_sequence/elemtype.cpp: 
	* TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/gen_object_manager_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/sequence_base.cpp: 
	* TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp: 
	* TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp: 
	* TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp: 
	* TAO_IDL/be/be_visitor_structure/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_structure/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_structure/structure.cpp: 
	* TAO_IDL/be/be_visitor_structure/structure_ch.cpp: 
	* TAO_IDL/be/be_visitor_structure/structure_ci.cpp: 
	* TAO_IDL/be/be_visitor_structure/structure_cs.cpp: 
	* TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp: 
	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp: 
	* TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_typedef/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_typedef/typedef.cpp: 
	* TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp: 
	* TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp: 
	* TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp: 
	* TAO_IDL/be/be_visitor_union/any_op_ch.cpp: 
	* TAO_IDL/be/be_visitor_union/any_op_cs.cpp: 
	* TAO_IDL/be/be_visitor_union/discriminant_ch.cpp: 
	* TAO_IDL/be/be_visitor_union/discriminant_ci.cpp: 
	* TAO_IDL/be/be_visitor_union/discriminant_cs.cpp: 
	* TAO_IDL/be/be_visitor_union/union.cpp: 
	* TAO_IDL/be/be_visitor_union/union_ch.cpp: 
	* TAO_IDL/be/be_visitor_union/union_ci.cpp: 
	* TAO_IDL/be/be_visitor_union/union_cs.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/private_ch.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/public_access_cs.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/public_ch.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/public_ci.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/public_cs.cpp: 
	* TAO_IDL/be/be_visitor_union_branch/public_reset_cs.cpp: 
	* TAO_IDL/driver/drv_args.cpp: 
	* TAO_IDL/driver/drv_fork.cpp: 
	* TAO_IDL/driver/drv_init.cpp: 
	* TAO_IDL/driver/drv_link.cpp: 
	* TAO_IDL/driver/drv_preproc.cpp: 
	* TAO_IDL/driver/drv_private.cpp: 
	* TAO_IDL/fe/fe_declarator.cpp: 
	* TAO_IDL/fe/fe_extern.cpp: 
	* TAO_IDL/fe/fe_init.cpp: 
	* TAO_IDL/fe/fe_interface_header.cpp: 
	* TAO_IDL/fe/fe_private.cpp: 
	* TAO_IDL/narrow/narrow.cpp: 
	* TAO_IDL/util/utl_decllist.cpp: 
	* TAO_IDL/util/utl_error.cpp: 
	* TAO_IDL/util/utl_exceptlist.cpp: 
	* TAO_IDL/util/utl_exprlist.cpp: 
	* TAO_IDL/util/utl_global.cpp: 
	* TAO_IDL/util/utl_identifier.cpp: 
	* TAO_IDL/util/utl_idlist.cpp: 
	* TAO_IDL/util/utl_indenter.cpp: 
	* TAO_IDL/util/utl_labellist.cpp: 
	* TAO_IDL/util/utl_list.cpp: 
	* TAO_IDL/util/utl_namelist.cpp: 
	* TAO_IDL/util/utl_scope.cpp: 
	* TAO_IDL/util/utl_stack.cpp: 
	* TAO_IDL/util/utl_string.cpp: 
	* TAO_IDL/util/utl_strlist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_decllist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_exceptlist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_exprlist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_idlist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_labellist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_list.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_namelist.cpp: 
	* TAO_IDL/util/utl_tmpl/utl_strlist.cpp: 
	Added ACE_RCSID to these files.

Mon Aug  3 09:27:46 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

	* TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp: 
	  Bounded octet sequences do not have the Message_Block
	  constructor, but we were generating it. Thanks to John Geiss
	  <kim_john@sprynet.com> for reporting this problem.

Fri Jul 31 20:34:27 1998  Gonzalo Diethelm  <gonzo@tango.cs.wustl.edu>

	* tao/Any.cpp: 
	* tao/CDR.cpp: 
	* tao/Client_Strategy_Factory.cpp: 
	* tao/Connect.cpp: 
	* tao/CurrentC.cpp: 
	* tao/CurrentS.cpp: 
	* tao/Exception.cpp: 
	* tao/Forwarding_Servant.cpp: 
	* tao/GIOP.cpp: 
	* tao/IIOP_Interpreter.cpp: 
	* tao/IIOP_ORB.cpp: 
	* tao/IIOP_Object.cpp: 
	* tao/Invocation.cpp: 
	* tao/Marshal.cpp: 
	* tao/NVList.cpp: 
	* tao/ORB.cpp: 
	* tao/ORB_Core.cpp: 
	* tao/ORB_Strategies_T.cpp: 
	* tao/Object.cpp: 
	* tao/Object_KeyC.cpp: 
	* tao/Object_Table.cpp: 
	* tao/Operation_Table.cpp: 
	* tao/POA.cpp: 
	* tao/POAC.cpp: 
	* tao/POAS.cpp: 
	* tao/PolicyC.cpp: 
	* tao/PolicyS.cpp: 
	* tao/Principal.cpp: 
	* tao/Request.cpp: 
	* tao/Sequence.cpp: 
	* tao/Sequence_T.cpp: 
	* tao/Servant_Base.cpp: 
	* tao/Server_Request.cpp: 
	* tao/Server_Strategy_Factory.cpp: 
	* tao/Stub.cpp: 
	* tao/TAO.cpp: 
	* tao/TAO_Internal.cpp: 
	* tao/Typecode.cpp: 
	* tao/Typecode_Constants.cpp: 
	* tao/Union.cpp: 
	* tao/append.cpp: 
	* tao/debug.cpp: 
	* tao/decode.cpp: 
	* tao/deep_free.cpp: 
	* tao/default_client.cpp: 
	* tao/default_server.cpp: 
	* tao/encode.cpp: 
	* tao/params.cpp: 
	* tao/poa_T.cpp: 
	* tao/skip.cpp: 
	* tao/t-sizes.cpp: 
	Added ACE_RCSID to these files.

Fri Jul 31 15:34:55 1998 Jeff Parsons <jp4@cs.wustl.edu>

      * Param_Test/bd_string.cpp:
      * Param_test/ub_string.cpp:
        I had been playing around and left the files in a state
        where dii wouldn't work - undid my oversight.

Fri Jul 31 15:10:12 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

	* tao/Any.h: 
	* tao/Any.cpp: 
	* tao/decode.cpp: 
	  When decoding Any's the ORB was not releasing the memory already
	  held by the Any.

Fri Jul 31 13:51:46 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

	* orbsvcs/tests/AVStreams/mpeg/source/server/Machine_Properties.cpp:
	* orbsvcs/tests/AVStreams/mpeg/source/server/Property_Exporter.cpp:
	* orbsvcs/tests/AVStreams/mpeg/source/server/Video_Repository.cpp:
	* orbsvcs/tests/AVStreams/mpeg/source/server/Video_Repository.h:
	* orbsvcs/tests/AVStreams/mpeg/source/server/Video_Repository.idl:
	* orbsvcs/tests/AVStreams/mpeg/source/server/augmented_server.cpp:
	* orbsvcs/tests/AVStreams/mpeg/source/server/augmented_server.h:
	Added comments and made other cosmetic changes.
	
	* orbsvcs/tests/AVStreams/server_discovery/Makefile:
	* orbsvcs/tests/AVStreams/server_discovery/Queue.java:
	* orbsvcs/tests/AVStreams/server_discovery/README:
	* orbsvcs/tests/AVStreams/server_discovery/Server_0005fDiscovery_0005fUtil.h:
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery.cpp:
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery.java:
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery_Browser.java:
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery_Perf.java:
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery_Selection.java:
	* orbsvcs/tests/AVStreams/server_discovery/Server_Discovery_Util.java:
	* orbsvcs/tests/AVStreams/server_discovery/Strip_Chart.java:
	* orbsvcs/tests/AVStreams/server_discovery/Trader_Client.cpp:
	* orbsvcs/tests/AVStreams/server_discovery/Trader_Client.h:
	* orbsvcs/tests/AVStreams/server_discovery/main.cpp:
	This is the A/V Demo on the client side. The README file in this
	directory details its design and current status, and includes a
	description of the work that remains.
	
Fri Jul 31 14:06:22 1998  Jeff Parsons <jp4@cs.wustl.edu>
         
        * tao_idl/be/be_visitor_argument/post_upcal_ss.cpp:
          added an action to visit_predefined_type for the 
          PT_pseudo case (OUT arg) that fixes the typecode 
          sii param test.

Fri Jul 31 07:58:36 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* TAO_IDL/be/be_visitor_union_branch/{public_ci,
	public_assign_cs}.cpp: The code for string members was using an
	incorrect, undefined type for a _var variable. We now use
	CORBA::String_var instead. Thanks to Kirk Ellett <kellet@mdc.com>
	for reporting this problem.

	* doc/releasenotes/index.html: Updated to indicate that anonymous
	arrays are suppored inside structs but not inside unions.

Thu Jul 30 17:05:09 1998  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * TAO version 0.2.1 released.

Thu Jul 30 16:40:10 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

	* orbsvcs/tests/EC_Multiple/run_test.pl:
	* orbsvcs/tests/EC_Throughput/run_test.pl:
	* orbsvcs/tests/Event_Latency/run_test.pl:
	* orbsvcs/tests/Simple_Naming/run_test.pl:
	* tests/Cubit/TAO/DII_Cubit/run_test.pl:
	* tests/Cubit/TAO/IDL_Cubit/run_test.pl:
	* tests/Cubit/TAO/MT_Cubit/run_test.pl:
	* tests/NestedUpcall/MT_Client_Test/run_test.pl:
	* tests/NestedUpcall/Triangle_Test/run_test.pl:
	* tests/Param_Test/run_test.pl:
	* tests/Quoter/run_test.pl:
	* tests/Simple/run_test.pl:
	  Removed the last calls to system("del") and minor cosmetic
	  fixes.

Thu Jul 30 15:38:52 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

	* orbsvcs/orbsvcs/Naming/Naming_Utils.cpp
	* orbsvcs/orbsvcs/Naming/CosNaming_i.cpp:
	* orbsvcs/orbsvcs/IOR_Multicast.cpp:
	* tao/ORB.cpp
	  Made some debugging messages dependent on
	  TAO_debug_level.

Thu Jul 30 13:46:38 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

	* orbsvcs/tests/Concurrency/Makefile:
	  The CC_command.tab.{h,cpp} and lex.CC_command.cpp files are
	  distributed in the TAO release, there is no need for the users
	  to generate them. We do include targets to warn of potentially
	  outdated files, but this is only for our own purposes.

	* orbsvcs/tests/Concurrency/CC_command.y:
	* orbsvcs/tests/Concurrency/CC_command.tab.h:
	* orbsvcs/tests/Concurrency/CC_command.tab.cpp:
	* orbsvcs/tests/Concurrency/CC_command.tab.cpp.diff:
	  Generated using a modified version of yacc, that produces more
	  portable code.

Thu Jul 30 13:07:00 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

	* orbsvcs/Makefile:
	* orbsvcs/Logging_Service/Makefile: New file. Makefile for the
	Logging service.

	* orbsvcs/Logging_Service/Logging_Service_i.{h,cpp}: New files,
	renamed from tests/Logger/server_i.{h,cpp}. Migrated from a test
	to a service. Added ability to name the factory from the command
	line.

	* orbsvcs/tests/Logger/Makefile: Eliminated server
	compilation. Changed client name to Logging_Test

	* orbsvcs/tests/Logger/Logging_Test_i.cpp: New file, renamed from
	tests/Logger/client_i.cpp. Altered includes to reflect transition
	of server from test server to actual service.

	* orbsvcs/tests/Logger/Logging_Test_i.h: New file, renamed from
	tests/Logger/client_i.h. Added multiple include protection.

	* orbsvcs/tests/Logger/Logging_Test.cpp: New file, renamed from
	tests/Logger/server.cpp. Removed some debugging code.

	* orbsvcs/tests/Logger/Logging_Test.cpp: New file, renamed from
	tests/Logger/client.cpp. Edited to reflect changed filenames.


Thu Jul 30 00:39:10 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* orbsvcs/tests/Concurrency/{CC_command.tab,lex.CC_command}.cpp.diff:
 	  Updated these files to prevent complains from lex and yacc.
  	  Thanks to J. Russell Noseworthy <rnosewor@objectsciences.com>
 	  for reporting this fix.

Wed Jul 29 18:46:46 1998  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * orbsvcs/tests/Concurrency: Touched the lex and yacc files so
 	  that Make won't try to remake their *.cpp files.  This is just a
 	  temporary fix until we get this working correctly.  Thanks to
 	  J. Russell Noseworthy <rnosewor@objectsciences.com> for
 	  reporting this and to Carlos for suggesting the fix.

Wed Jul 29 18:46:46 1998  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * TAO version 0.2 released.

Wed Jul 29 13:55:20 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao/Connect.cpp: Fixed indentation.

	* tao/TAO_Internal.cpp (close_services): service_open_count_
 	  should be reduced by one.

Wed Jul 29 12:32:48 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

	* tests/Param_Test/run_test.pl:
	* tests/NestedUpcall/Triangle_Test/run_test.pl:
	* tests/NestedUpcall/MT_Client_Test/run_test.pl:
	* tests/Simple/run_test.pl:
	* tests/Cubit/TAO/IDL_Cubit/run_test.pl:
	* tests/Cubit/TAO/DII_Cubit/run_test.pl:
	  Use unlink instead of system("rm") or system("del").

	* tests/Cubit/TAO/Makefile:
	* tests/Cubit/TAO/DII_Cubit/Makefile:
	  Added DII_Cubit to the default compilation.

	* tests/Cubit/TAO/MT_Cubit/run_test.pl:
	  Added a one-button test.

	* tests/NestedUpcall/MT_Client_Test/client.h:
	* tests/NestedUpcall/MT_Client_Test/client.cpp:
	  Instead of using the thread id to decide which server we use
	  each client thread is assigned a number, even threads choose the
	  first server, odd threads the second one.  The thread id
	  approach was non-portable.

	* tests/POA/RootPOA/README:
	* tests/POA/FindPOA/README:
	* tests/POA/NewPOA/README:
	  Updated this files, the tests don't print warning messages about
	  the svc.conf file anymore (actually the ORB doesn't).

Wed Jul 29 08:58:01 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/{field_ci, field_cs}.cpp: Added code
        to handle arrays. I had forgotten to invoke the code generator for
        arrays that are struct members. I had only handled the header file
        but not the inline file and the implementation file. The visitor
        that does this was already done, but it was not getting
        invoked. Thanks to Andreas Geisler
        <andreas.geisler@erls.siemens.de> for reporting this problem.

Wed Jul 29 06:45:54 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/NestedUpcall/MT_Client_Test/ local_server.cpp (MT_Server):
          reordered initializers to match declaration order.

        * orbsvcs/tests/EC_Multiple/EC_Multiple.h: allow up to 1024 each
          consumers and suppliers.

        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp (main): dynamically
          allocate the Test_ECG instance so that a large stack space isn't
          required.

        * orbsvcs/tests/EC_Multiple/Scheduler_Runtime_Dynamic.h,
          run_dynamic,gen_dynamic,dyn_plot:  added 1000 low-priority
          consumers.  Used these versions for DASC-98 paper.

Tue Jul 28 23:01:21 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * orbsvcs/tests/Logger/runtests.pl: Removed this since it has been
          replaced.

        * orbsvcs/tests/Logger/run_test.pl: Cleaned this script up by
          removing the code that wasn't needed.

Tue Jul 28 16:54:00 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Param_Test/bd_struct_seq.cpp: Sequence length
          initialization didn't work, so zero-length sequence always
          returned "correct" results in sii call. Fixed it so the
          sequence length is actually initialized, gets correct results
          in sii test, correct with dii as well, but request crashes on
          release, same as for var_struct. Still looking into that.

Tue Jul 28 16:43:22 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/tests/Event_Latency/run_test.pl:
        * orbsvcs/tests/EC_Multiple/run_test.pl:
        * orbsvcs/tests/EC_Throughput/run_test.pl:
        * orbsvcs/tests/Simple_Naming/run_test.pl:
          Added and updated the one-button tests for this directories.

        * tests/Param_Test/bd_string.cpp:
          The name of the test was wrong.

Tue Jul 28 16:25:11 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * tao/Sequence_T.i : Reversed the order of 2 args in
          the base class call of one of the
          constructors for TAO_Bounded_Sequence<T,MAX> and added a line to
          this and to the default constructor for TAO_Bounded_Sequence<T,MAX>
          to allocate the buffer to MAX size upon instantiation.

        * tao_idl/be/be_visitor/gen_bounded_sequence_ch.cpp:
        * tao_idl/be/be_visitor/gen_bounded_str_sequence_ch.cpp:
        * tao_idl/be/be_visitor/gen_bounded_obj_sequence_ch.cpp:
          Made the changes corresponding to the changes above in
          Sequence_T.i.

Tue Jul 28 16:22:28 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/EC_Multiple/Scheduler_Runtime_Dynamic.h:
          removed ACE_Scheduler_Factory::use_runtime () call, so that
          this header can be included by EC_Multiple.cpp even for
          local (config) runs.

        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp: added
          ACE_Scheduler_Factory::use_runtime () calls, when in
          runtime mode only.  Also, added printouts just before
          registering each supplier and consumer, to help debugging.

        * tests/NestedUpcall/MT_Client_Test/client.cpp (init): use of
          ACE_thread_t as an unsigned long requires a reinterpret_cast.

Tue Jul 28 15:07:32 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/Hardpack/IDL_Cubit/cubit.idl:
                Added cube_oneway and cube_void operations.
        * tests/Cubit/Hardpack/IDL_Cubit/cubit_impl.{h,cpp}:
        * tests/Cubit/Hardpack/IDL_Cubit/client_i.{h,cpp}:
                Added implementation code for cube_oneway and cube_void.

Tue Jul 28 13:49:01 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tests/NestedUpcall/Makefile:
          Added MT_Client_Test.

        * tests/NestedUpcall/MT_Client_Test/Makefile:
          Updated dependencies.

Tue Jul 28 11:09:35 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.cpp :
                Removed unnecessary commented code.
        * tests/Cubit/TAO/MT_Cubit/Task_Client.cpp:
                Added argument processing code for option "-r" which
                enables the thread-per-rate test.
        * tests/Cubit/TAO/MT_Cubit/client.cpp:
                Added code so that the main thread waits on a condition
                variable after activating the CB_20_HZ_CONSUMER thread so
                that it finishes the argument processing.

Tue Jul 28 10:17:18 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/EC_Multiple/Scheduler_Runtime_Dynamic.h:
          removed static storage class qualifier from declaration of
          scheduler_factory_setup.  It's the right thing to do, but
          with it, DEC cxx complains about an unused variable.

        * orbsvcs/orbsvcs/Scheduler_Factory.cpp (footer): removed
          "static" storage class qualifier so that it's not inserted
          into generated code.

Tue Jul 28 10:08:33 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/LifeCycle_service/Factory_Trader.cpp:
          Addressed one cxx and one g++ error.

Mon Jul 27 15:23:33 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/ORB.cpp (open): Changed the open_called_ flag from an atomic
          op to a normal int. Also added the open_lock_ mutex to protect
          the entire open routine. Now we do a double check instead of
          checking the simply check the open_called_ atomic op.

          (create_stub_object): Added a new method to the ORB that makes
          sure that the open routine has been called before creating any
          stubs.

        * tao/ORB_Core.cpp (init): There is no need to call ORB::open if
          the port is 0.  It will automagically be called when the first
          stub is created.

        * tao/Servant_Base.cpp (_create_stub): Made sure to call the new
          ORB method when creating stubs.

        * tao/orbconf.h (TAO_DEFAULT_SERVER_PORT): Changed the default
          port to 0.

        * tests/NestedUpcall/Reactor/client.cpp (run):
        * tests/NestedUpcall/MT_Client_Test/local_server.cpp (run_ORB_briefly):
        * tests/NestedUpcall/Triangle_Test/initiator.cpp (run):

          No need to call orb->run (ACE_Time_Value::zero)

Mon Jul 27 17:30:53 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * orbsvcs/LifeCycle_Service/Factory_Trader.{h,cpp}: Enabled all
          the functionality by default since the Trading Service is now
          in good shape.

        * tests/Quoter/client.cpp:
        * tests/Quoter/Generic_Factory.cpp:
        * tests/Quoter/run_test.pl:
          Enabled all the LifeCycle functionality and all looks good on
          NT.

        * TAO_IDL/tao_idl.dsp: Release version now has debug information
          in a separate file (or else it doesn't work at all), and the
          Release version of the compiler is placed in the Release
          subdirectory.  This will most likely be teh format we will use
          for executables: the debug version in .\ and the release in
          .\Release\ (both with the same name).

Mon Jul 27 16:59:14 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * orbsvcs/orbsvcs/Naming/Naming_Utils.{h,cpp}: Added minor
          formating changes
        * orbsvcs/tests/Logger/README: Added minor formatting changes
        * orbsvcs/tests/Logger/client.cpp: Added minor formatting changes
        * orbsvcs/tests/Logger/server.cpp: Added minor formatting changes
        * orbscvs/tests/Logger/client_i.{h,cpp}: Added minor formatting
          changes
        * orbsvcs/tests/Logger/server_i.{h,cpp}: Added minor formatting
          changes
        * orbsvcs/tests/Logger/run_test.pl: Fixed a small error where
          script tried to kill a non-existant process.

Mon Jul 27 17:15:25 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/EC_Multiple/dyn_plot: added this perl script,
          which was used to generate plots for the DASC '98 paper.

Mon Jul 27 17:11:07 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trader_T.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Constraint_Visitor.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.cpp:
          Fixed compiler errors with g++ 2.7.2. Thanks to good ol' Sergio
          <sergiof@microsoft.com> for pointing this out.

Mon Jul 27 16:55:18 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tests/NestedUpcall/MT_Client_Test/run_test.pl:
        * tests/NestedUpcall/Reactor/run_test.pl:
        * tests/NestedUpcall/Triangle_Test/run_test.pl:
        * tests/Simple/run_test.pl:
        * tests/Cubit/TAO/DII_Cubit/run_test.pl:
        * tests/Cubit/TAO/IDL_Cubit/run_test.pl:
          Capture the client status and return it, also wait (or kill) the
          server before exit.

        * tests/Param_Test/results.h:
        * tests/Param_Test/results.cpp:
        * tests/Param_Test/client.cpp:
          Print the test name *before* attempting to run it, so the output
          is visible even on a crash. Also print an easy to grep message
          on test failure.

        * tests/Param_Test/run_test.pl:
          By default use ORBport 0 and run the tests 5 times (just for
          luck).

        * orbsvcs/orbsvcs/Event/Event_Channel.h:
          Made the push() methods on the Supplier_Module and the
          Consumer_Module virtual, so users can provide their own.

Mon Jul 27 1:26:44 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Param_Test/var_struct{.h,.cpp}: Committed my
          changes so far so others can check it out. DII version
          doesn't work yet.

Mon Jul 27 12:44:12 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Invocation.cpp (start): Modified the code in
          TAO_ARL_USES_SAME_CONNECTOR_PORT so the connector always binds
          to the host IP address specified in the ORB Core.  Thanks to
          Fred Kuhns <fredk@arl.wustl.edu> for pointing this out.

Sun Jul 26 21:01:09 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.cpp:
        * tests/Cubit/TAO/MT_Cubit/client.cpp:
                Added preliminary argument processing code so
        that we can allocate memory for data structures for the
        number of threads specified on the command line.

Sun Jul 26 16:58:54 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.cpp : Fixed the argument
        processing of  low priority servants.

Sun Jul 26 16:02:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/ORB_Core.cpp: Removed a line in unset_leader_wake_up_follower
          which did not belong there any more.

Sun Jul 26 13:50:20 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/tests/Concurrency/Makefile:
        * orbsvcs/tests/Logger/Makefile:
        * orbsvcs/tests/Simple_Naming/Makefile:
        * orbsvcs/tests/Trading/Makefile:
        * tests/NestedUpcall/Reactor/Makefile:
        * tests/NestedUpcall/Triangle_Test/Makefile:
        * tests/POA/Default_Servant/Makefile:
        * tests/POA/Generic_Servant/Makefile:
          The realclean target was not removing all the files.

Sun Jul 26 10:11:07 1998  Carlos O'Ryan  <coryan@JIG>

        * orbsvcs/Trading_Service/Trading_Service.cpp:
        * orbsvcs/tests/Trading/colocated_test.cpp:
          MSVC++ and std::auto_ptr don't like implicit conversions from
          the pointer type to the auto_ptr, this is (I believe) the
          standard behavior.

        * orbsvcs/tests/Logger/server.dsp:
        * orbsvcs/tests/Logger/client.dsp:
          Added missing files to the project.

Sun Jul 26 09:17:58 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/EC_Multiple/EC_Multiple.h: increased
          MAX_CONSUMERS and MAX_SUPPLIERS to 100.

        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp: 1) added support
          for dynamic scheduling test (ECM3).  2) In config runs, dump
          the schedule before shutting the test down.  An exception is
          usually thrown when shutting the test down, for all but the
          first EC.  This change allows the schedule to still be dumped.

        * orbsvcs/tests/EC_Multiple/{Scheduler_Runtime_Dynamic.h,
          run_dynamic,gen_dynamic}: added support for dynamic
          scheduling test.  Currently, it requires that TAO
          be build with the CCFLAGS: -DTAO_USES_STRATEGY_SCHEDULER
          -DTAO_USES_MUF_SCHEDULING -DTAO_MIN_CRITICAL_PRIORITY=0.

        * orbsvcs/tests/EC_Multiple/run_{latency,overhead,schedule,
          throughput,utilization}: use ORBport 0 instead of hard-coded port.
          For NameService, use $NameServicePort if it is defined in the
          user's environment.

Sat Jul 25 15:21:45 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
          The condition for imported vs. main file changed after the
          addition of the #line directive.

Sat Jul 25 14:15:46 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Scheduler.cpp: removed
          ACE_{Read,Write)_Guard<ACE_SYNCH_MUTEX> template instantiations
          because they're in libTAO.

Sat Jul 25 13:56:45 1998  Carlos O'Ryan  <coryan@JIG>

        * TAO_IDL/driver/drv_preproc.cpp:
          Generate a #line directive which is accepted by more compilers.

Fri Jul 24 21:44:09 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Exception.i:
        * tao/Exception.cpp:
          ExceptionList was not releasing the TypeCodes in its destructor,
          this produced a memory leak at shutdown, because there is a list
          with the standard exceptions typecodes.
          A similar problem ocurred with the CORBA::_tc_* exceptions.
          NOTE: Purify-4.0.1 on Solaris 2.5 gets confused by these fixes
          and reports bogus FNH and memory leak problems. The bug is
          triggered by an interaction with TAO's use of the Service
          Configurator to dynamically load libTAO, apparently when using
          Purify the library static constructors are called two times; the
          problem does not ocurr when *not* using purify or when not
          loading the library. To test the latter just run a TAO test
          (like $TAO_ROOT/tests/Param_Test) with and without the option
          "-ORBsvcconf /dev/null".  Verifying the purify confusion
          requires more work, try stopping in one of the static
          constructors (like TypeCodes), then set a breakpoint for the
          same constructor at the same address and continue the program,
          when TAO loads the library you will see the constructor executed
          again; this will *not* happen when running without purify.

        * tao/Object_Table.h:
        * tao/Object_Table.cpp:
          Removed static object, now it is a member of the class.

        * tao/Typecode.cpp:
          Removed outdated comments.

        * tests/Param_Test/svc.conf:
          Removed obsolete comments, the web page describes the options in
          more detail.

        * orbsvcs/orbsvcs/Event/Event_Channel.cpp:
          Fixed delete of (void*). Thanks to John Mulhern
          <9107@mn3.lawson.lawson.com> for reporting this.

        * tests/Param_Test/any.cpp:
          Fixed ambiguous call to >>= also reported by John Mulhern

        * orbsvcs/orbsvcs/Makefile:
          The maintaince of the .PRECIOUS directives for IDL generated
          files was becoming a nightmare, it is automated now.
          Some IDL files include others, we need to add an explicit
          dependency in those cases.

        * TAO_IDL/driver/drv_preproc.cpp:
          Added a #lineno "filename" directive to the temporary files, so
          the IDL compiler can generate better error messages.

Fri Jul 24 17:00:09 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Event/Dispatching_Modules.cpp (open_queue):
          set period of dispatch queue to its period, rather than 0,
          so that the scheduler will handle it properly.

Fri Jul 24 16:15:08 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Offer_Database.cpp:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.h:
          Fixed template trait problems with HP/UX 11. Thanks to
          John Mulhern <9107@mn3.lawson.lawson.com> for reporting this.

Fri Jul 24 15:16:28 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * orbsvcs/tests/Concurrency/CC_command.tab.cpp,
          orbsvcs/tests/Concurrency/CC_command.tab.y: Fixed a couple of
          minor inconsistencies that showed up on HP/UX 11.  Thanks to
          John Mulhern <9107@mn3.lawson.lawson.com> for reporting this.

Fri Jul 24 09:56:27 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tests/Simple/client_impl.cpp:
          On UNIX you close() the handle, not the file name.

        * tests/Makefile:
        * tests/Simple/Makefile:
          Added $TAO_ROOT/tests/Simple to the compilation.

Fri Jul 24 01:40:53 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/CDR.cpp:
          The check for memory ownership of the Message_Block was
          inverted, thanks to Dave Meyer <dmeyer@std.saic.com> for
          catching this one.

        * release.chk:
          Updated the file to include the new platforms, the new tests in
          Param_Test and to remove the old info (that is probably
          outdated)

Thu Jul 23 23:15:33 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.cpp (start_servants):
          fixed some signed/unsigned comparisons.  (main): removed
          unused local "temp_ptr".

Thu Jul 23 19:59:31 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.cpp: Added code so that -ORB
        arguments are passed to the low priority thread as well. Also now
        the high priority threads checks the -p and -h arguments before
        ORB_init so that it uses the port specified on the command line.

Thu Jul 23 16:54:59 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Server_Request.cpp:
          Care must be exercised when transferring the exception from the
          Environment to the Any (in set_exception()): both believe that
          they own the Exception so the refcnt() must be increased.

        * tao/Any.cpp:
          The Any owns the top-level memory for the objects it contains,
          we delete it now.

        * tao/Typecode.h:
        * tao/Typecode.cpp:
          Fixed memory leaks in the private_member_name_list and in
          Typecodes created on the stack (not owned by the ORB, yes there
          are some).

        * orbsvcs/Trading_Service/Makefile:
        * orbsvcs/tests/Trading/Makefile:
          Updated dependencies.

Thu Jul 23 13:06:10 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
          Removed excesive unindentation, the generated code was
          unreadable, but correct, it just happens that I have to debug it
          every so often.

        * TAO_IDL/be/be_helper.cpp:
          Never accept negative indentation values.

Thu Jul 23 12:18:04 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.cpp: added
          ACE_Singleton<Globals, ACE_Null_Mutex> template instantiation.

Wed Jul 22 19:18:03 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/ORB_Core.cpp (inherit_from_parent_thread): Added the
          inheritance of the Acceptor, Reactor, and the Connector to the
          newly created thread.

Wed Jul 22 17:33:36 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/compat/initguid.h:
        * tao/compat/objbase.h:
          This files are not used anymore, in fact, I thought I had
          removed them already.

Wed Jul 22 16:37:56 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.{h,cpp}: Added a new Globals
        class which is used as a singleton by the various threads for
        accessing the global parameters. Also added code so that the
        server accepts -ORB arguments on the command line.

Wed Jul 22 16:26:34 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Makefile:
        * tao/Marshal.h:
        * tao/Marshal.i:
        * tao/deep_copy.cpp:
          The deep_copy methods are not used any more, Anys using
          marshalling instead.

        * tao/ORB.h:
        * tao/NVList.h:
        * tao/NVList.i:
        * tao/Request.h:
        * tao/Request.i:
          Added T_var and T_out classes for NVList, NamedValue and
          Request.

        * tao/Object.i:
        * tao/Object.cpp:
          All the Object_out and Object_var methods are defined as inline
          methods.

        * tests/Param_Test/client.cpp:
          Use the new CORBA::Request_var class.

        * tests/Param_Test/any.cpp:
        * tests/Param_Test/any.h:
        * tests/Param_Test/bd_long_seq.cpp:
        * tests/Param_Test/bd_long_seq.h:
        * tests/Param_Test/bd_short_seq.cpp:
        * tests/Param_Test/bd_short_seq.h:
        * tests/Param_Test/bd_str_seq.cpp:
        * tests/Param_Test/bd_str_seq.h:
        * tests/Param_Test/bd_string.cpp:
        * tests/Param_Test/bd_string.h:
        * tests/Param_Test/bd_struct_seq.cpp:
        * tests/Param_Test/bd_struct_seq.h:
        * tests/Param_Test/fixed_array.cpp:
        * tests/Param_Test/fixed_array.h:
        * tests/Param_Test/fixed_struct.cpp:
        * tests/Param_Test/fixed_struct.h:
        * tests/Param_Test/nested_struct.cpp:
        * tests/Param_Test/nested_struct.h:
        * tests/Param_Test/objref.cpp:
        * tests/Param_Test/objref.h:
        * tests/Param_Test/short.cpp:
        * tests/Param_Test/short.h:
        * tests/Param_Test/typecode.cpp:
        * tests/Param_Test/typecode.h:
        * tests/Param_Test/ub_any_seq.cpp:
        * tests/Param_Test/ub_any_seq.h:
        * tests/Param_Test/ub_long_seq.cpp:
        * tests/Param_Test/ub_long_seq.h:
        * tests/Param_Test/ub_objref_seq.cpp:
        * tests/Param_Test/ub_objref_seq.h:
        * tests/Param_Test/ub_short_seq.cpp:
        * tests/Param_Test/ub_short_seq.h:
        * tests/Param_Test/ub_str_seq.cpp:
        * tests/Param_Test/ub_str_seq.h:
        * tests/Param_Test/ub_string.cpp:
        * tests/Param_Test/ub_string.h:
        * tests/Param_Test/ub_struct_seq.cpp:
        * tests/Param_Test/ub_struct_seq.h:
        * tests/Param_Test/var_array.cpp:
        * tests/Param_Test/var_array.h:
        * tests/Param_Test/var_struct.cpp:
        * tests/Param_Test/var_struct.h:
          The add_args() method receives NVList_ptr parameters instead of
          NVList_ptr& otherwise it is too hard to use a NVList_var.

Wed Jul 22 15:58:11 1998  David L. Levine  <levine@cs.wustl.edu>

        * TAO version 0.1.41 released.

Wed Jul 22 15:00:00 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * orbsvcs/tests/Logger/client_i.cpp: Did a little cleaning up,
        that's all.

        * orbsvcs/orbsvcs/Log/Logger_i.cpp: Adjusted the
        <Logger_i::verbosity_conversion> method to work properly.


Wed Jul 22 14:16:53 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * Makefile: Removed the reference to "client.h" which was
        confusing the compiler and causing all sorts of mayhem (since
        client.h has been removed). Huzzah.

Wed Jul 22 14:12:34 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Cubit/TAO/DII_Cubit/client.cpp
          Changed ACE_OS::strdup () in constructor initializations to
          CORBA::string_dup () and added corresponding CORBA::string_free ()
          in destructor.

Wed Jul 22 13:43:15 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Param_Test/options.{h,cpp}:
          fixed -f option in parse_args so a #define MAX_BUFFER_LENGTH
          is no longer needed. Added private member function read_ior
          which uses ACE_Read_Buffer.

Wed Jul 22 12:41:22 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp:
        * orbsvcs/orbsvcs/Trader/Offer_Database.h:
        * orbsvcs/orbsvcs/Trader/Offer_Iterators.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_T.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.{h,cpp}:
          Used CORBA::is_nil consistently. Fixed purify warning.

Wed Jul 22 11:55:35 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Any.cpp:
          Removed uses == operator for TypeCode_var and TypeCode_ptr,
          NT does not like this (it is ambigous) and the semantics are
          also broken, we use TypeCode::equal() instead; thanks to Darrell
          Brunsch for reporting this.

        * tao/Server_Request.cpp:
        * tao/NVList.cpp:
          We were passing a TypeCode_var without calling .in() first,
          thansk to Seth B. Widoff for catching up this one.

Wed Jul 22 11:18:51 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * Makefile: Updated the Makefile to include the server_i and
        client_i. This should fix failing compiles. I should have done
        this in my previous commit. Gomen  ^_^

Wed Jul 22 11:15:07 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Config_Scheduler.cpp (compute_scheduling):
          dereference infos (with ptr ()) before comparing it with 0.
          No more visits from Mr. SIGSEGV.

Wed Jul 22 11:09:55 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_si.cpp:
          The in_multiple_inheritance() method was generated for the wrong
          class.

Wed Jul 22 10:07:17 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Any.cpp:
        * tao/CurrentC.cpp:
        * tao/IIOP_Object.cpp:
        * tao/NVList.cpp:
        * tao/POAC.cpp:
        * tao/Server_Request.cpp:
        * tao/append.cpp:
        * tao/decode.cpp:
        * tao/deep_copy.cpp:
        * tao/deep_free.cpp:
        * tao/encode.cpp:
        * tao/skip.cpp:
          Callers to Any::type should be careful to release the
          TypeCode_ptr it returns.

        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
          The >>= was using Any::type() but not realeasing the memory that
          method returns.  We stick the result into a _var.  I also added
          a small optimization: for some types the >>= operator uses
          replace() to change the contents of the Any (thus minimizing
          future memory allocation and demarshalling), but it reused the
          Any typecode, usually obtained from the wire; now we use the
          global Typecode, in an attempt to free memory ASAP inside the
          ORB.

        * docs/Options.html:
          The info about the -ORBpoalock default value was wrong.

Wed Jul 22 08:56:34 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

        * TAO_IDL/be_include/be_interface.h
          TAO_IDL/be/be_interface.cpp:

        Added a data member (called in_mult_inheritance_) and
        corresponding set/get methods for determining if an
        interface node is involved in some form of multiple inheritance
        either directly or indirectly thru its ancestors. We make use of
        the template method "traverse_inheritance_graph" by passing a new
        helper method called "in_mult_inheritance_helper".

        * TAO_IDL/be_visitor_interface/{interface_sh, interface_si}.cpp:
        Added code to generate the inline method on the skeleton class
        that indicates if we are directly or indirectly involved in some
        form of multiple inheritance.

Wed Jul 22 00:29:32 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Invocation.cpp:
          Fixed problem in TIMEPROBE initialization.

Tue Jul 21 22:05:15 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/ Task_Client.cpp: added
          ACE_Condition<ACE_SYNCH_MUTEX> template instantiation.

Tue Jul 21 21:12:31 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * orbsvcs/orbsvcs/Log/Logger_i.{h,cpp}:Added 2 new methods to get and
        set the verbosity level

        * orbsvcs/orbsvcs/Logger.idl: Enabled the verbosity method

        * orbsvcs/tests/Logger/run_test.pl: Renamed from
        runtests.pl. Removed nameservice code

        * orbsvcs/tests/Logger/README: Edited to provide more detail

        * orbsvcs/tests/Logger/client_i.{h,cpp}: New files. Interface and
        implementation of the <Logger_Client> class

        * orbsvcs/tests/Logger/server_i.{h,cpp}: New files. Interface and
        implementation of the <Logger_Server> class.

        * orbsvcs/tests/Logger/client.cpp: Restructured the code. Moved
        most of the work onto the <Logger_Client> class defined in
        client_i.h. main () is now rather stripped down

        * orbsvcs/tests/Logger/server.cpp: Restructured the code. Moved
        most of the work onto the <Logger_Server> class defined in
        server_i.h. main () is now rather stripped down.

Tue Jul 21 17:29:15 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * orbsvcs/orbsvcs/orbsvcs_lib.dsp:
        * orbsvcs/orbsvcs/orbsvcs.dsw
          Removed orbsvcs_lib since it isn't needed anymore and it is
          very out-of-date.

        * tests/Cubit/TAO/IDL_Cubit/IDL_Cubit.dsp:
          tests/Cubit/TAO/IDL_Cubit/IDL_Cubit.dsw:
          The perl script run_tests.pl replaces the executable.

        * TAOACE.dsw:
          Added Naming Service to the list, since it is used by many
          tests (and I was forgetting to rebuild it all the time).

        * tests/Simple/run_test.pl:
        * tests/Quoter/run_test.pl:
        * tests/Cubit/TAO/IDL_Cubit/run_test.pl:
          Uses common Uniqueid now.

        * tests/Cubit/TAO/DII_Cubit/DII_Cubit.dsw:
          The included project was renamed.

        * tests/TAO_Tests.dsw:
          New Workspace that includes all the project files for TAO tests.

        * orbsvcs/orbsvcs.dsw:
          Moved some tests out and some servers in.

        * TAO_IDL/tao_idl.dsp
        * orbsvcs/Concurrency_Service/Concurrency_Service.dsp:
        * orbsvcs/Dump_Schedule/Dump_Schedule.dsp:
        * orbsvcs/Event_Service/Event_Service.dsp:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.dsp:
        * orbsvcs/Naming_Service/Naming_Service.dsp:
        * orbsvcs/Scheduling_Service/Scheduling_Service.dsp:
        * orbsvcs/Trading_Service/Trading_Service.dsp:
        * orbsvcs/orbsvcs/orbsvcs.dsp:
        * orbsvcs/tests/Concurrency/CC_client.dsp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.dsp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.dsp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.dsp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.dsp:
        * orbsvcs/tests/Event_Latency/Event_Latency.dsp:
        * orbsvcs/tests/Logger/client.dsp:
        * orbsvcs/tests/Logger/server.dsp:
        * orbsvcs/tests/Sched_Conf/Sched_Conf.dsp:
        * orbsvcs/tests/Simple_Naming/client.dsp:
        * orbsvcs/tests/Simulator/DOVEMIB/DOVEMIB.dsp:
        * orbsvcs/tests/Simulator/DOVEMIB/DOVEMIBx.dsp:
        * orbsvcs/tests/Simulator/DOVEMIB/TestClient.dsp:
        * orbsvcs/tests/Simulator/Event_Supplier/Event_Sup.dsp:
        * orbsvcs/tests/Trading/Colocated_Test.dsp:
        * orbsvcs/tests/Trading/Export_Test.dsp:
        * orbsvcs/tests/Trading/Import_Test.dsp:
        * orbsvcs/tests/Trading/TradingLib.dsp:
        * tao/TAO.dsp:
        * tests/CDR/basic_types.dsp:
        * tests/CDR/growth.dsp:
        * tests/CDR/tc.dsp:
        * tests/Cubit/TAO/DII_Cubit/client.dsp:
        * tests/Cubit/TAO/IDL_Cubit/client.dsp:
        * tests/Cubit/TAO/IDL_Cubit/collocation_test.dsp:
        * tests/Cubit/TAO/IDL_Cubit/server.dsp:
        * tests/Cubit/TAO/MT_Cubit/client.dsp:
        * tests/Cubit/TAO/MT_Cubit/server.dsp:
        * tests/NestedUpcall/MT_Client_Test/client.dsp:
        * tests/NestedUpcall/MT_Client_Test/server.dsp:
        * tests/NestedUpcall/Reactor/client.dsp:
        * tests/NestedUpcall/Reactor/server.dsp:
        * tests/NestedUpcall/Triangle_Test/initiator.dsp:
        * tests/NestedUpcall/Triangle_Test/server_A.dsp:
        * tests/NestedUpcall/Triangle_Test/server_B.dsp:
        * tests/OctetSeq/OctetSeq.dsp:
        * tests/POA/DSI/client.dsp:
        * tests/POA/DSI/server.dsp:
        * tests/POA/Default_Servant/client.dsp:
        * tests/POA/Default_Servant/server.dsp:
        * tests/POA/Explicit_Activation/server.dsp:
        * tests/POA/FindPOA/FindPOA.dsp:
        * tests/POA/Forwarding/client.dsp:
        * tests/POA/Forwarding/server.dsp:
        * tests/POA/Generic_Servant/client.dsp:
        * tests/POA/Generic_Servant/server.dsp:
        * tests/POA/NewPOA/NewPOA.dsp:
        * tests/POA/On_Demand_Activation/server.dsp:
        * tests/POA/RootPOA/RootPOA.dsp:
        * tests/POA/TIE/client.dsp:
        * tests/POA/TIE/server.dsp:
        * tests/POA/locking/locking.dsp:
        * tests/Param_Test/client.dsp:
        * tests/Param_Test/server.dsp:
        * tests/Quoter/Factory_Finder.dsp:
        * tests/Quoter/Generic_Factory.dsp:
        * tests/Quoter/client.dsp:
        * tests/Quoter/server.dsp:
        * tests/Simple/client.dsp:
        * tests/Simple/server.dsp:
          Changed the libraries to use the *d.dll naming convention so
          all the projects needed to be changed.  While I was there,
          also cleaned things up by adding some folders and added the
          dependency to the tao_idl compiler, so if the compiler changes,
          the idl files get recompiled.

          In the future I'll work on the release versions of the projects
          to set them up correctly.  Until now, most often the release
          version in the project was ignored since it was a major hassle
          to test it.

Tue Jul 21 17:41:26 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp
        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_T.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.cpp:
          Since according to Carlos' last ChangeLog entry the call to
          CORBA::Any::type () returns a duplicated typecode, I've ensured
          calls to type () are matched with CORBA::TypeCode::release ()s.

        * tao/Any.cpp (type): needed return statement.

Tue Jul 21 17:29:18 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Any.cpp:
          The type() method has to return a copy (per the spec).
          The replace() method first duplicate its TypeCode arg and *then*
          releases the internal TypeCode, this protect us in case both are
          the same thing.
          We still have to fix some problems in the IDL generated
          operator>>=.

Tue Jul 21 16:57:07 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/IIOP_ORB.cpp (iiop_string_to_object): Don't decrement the
          ref count on the IIOP_Object since the policy has changed such
          that the CORBA_Object is taking ownership of the IIOP_Object.

Tue Jul 21 15:49:34 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/server.{h,cpp}: Added a new Server
          class and moved all the static functions and variables to that
          class.

Tue Jul 21 15:46:49 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/Task_Client.cpp (svc): changed
          char*const* argv to char **argv so that it compiles on platforms
          like IRIX . Thanks to Carlos for reporting this.

Tue Jul 21 14:53:09 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/EC_Multiple/README: use ORBport 0 with
          EC_Multiple.

Tue Jul 21 14:19:28 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * General pass though memory managment:
          + Added the pseudo-object mandatory methods (T::_duplicate,
          T::_nil()) missing in several classes.
          + Normalized the use of reference counting, all the classes
          follow the same protocol.
          + Added locks to protect reference counting mechanisms.
          + Fixed problems in STUB_Object memory managment.
          + The CORBA::release(), CORBA::is_nil(), T::_nil() and
          T::_duplicate() methods are on the .i files now.

        * tao/Any.h:
        * tao/Any.i:
        * tao/Any.cpp:
          Anys don't need reference counting, they are regular C++ object
          and (per the spec) their contents are deep copied by the copy
          ctor, the assignment operator and other methods.
          Also fixed several methods that did *not* duplicate the
          TypeCode, per the spec, they have to do it; we use
          TypeCode::_duplicate() for that purpose, not the (propietary)
          _incr_refcnt()

        * tao/Server_Request.h:
        * tao/Server_Request.i:
        * tao/Server_Request.cpp:
          The CORBA::release(), CORBA::is_nil(), T::_nil() and
          T::_duplicate() methods are on the .i files now.
          NOTE: Server_Request objects in TAO are magical, the
          _duplicate() method returns 0 and release() does nothing.
          The problem starts because Server_Request is allocated from the
          stack (to speed up things), hence reference counting would be
          useless. Adding a clone() method will work better, but the
          Server_Request holds pointers to several positions in the CDR
          stream, we could clone the CDR stream, but a normal
          Server_Request does not own it....  In our opinion (Carlos and
          Irfan) we need not worry about this until we find a use case for
          it.

        * tao/Typecode_Constants.cpp:
          Use CORBA::release() instead of calling the delete operator
          directly, this removed some nasty FMR and FMW problems at
          shutdown.

        * TAO_IDL/be/be_visitor_argument/post_upcall_ss.cpp:
          The generated code leaked object references passed as
          inout arguments.

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
          The generated code did not manage STUB_Object memory properly.

        * tao/IIOP_Object.h:
        * tao/IIOP_Object.i:
        * tao/IIOP_Object.cpp:
          Refcount follows the same pattern as for the pseudo-objects, it
          starts at 1, it is stored in a CORBA::ULong and delete happens
          when count reaches 0.

        * tao/NVList.h:
        * tao/NVList.i:
        * tao/NVList.cpp:
        * tao/ORB.h:
        * tao/ORB.i:
        * tao/ORB.cpp:
        * tao/Exception.h:
        * tao/Exception.cpp:
          Pseudo object methods revision.

        * tao/Object.h:
        * tao/Object.i:
        * tao/Object.cpp:
          Added locking to the reference count; this should *not* affect
          the critical path, hence it is a *good* change.

        * tao/CurrentC.cpp:
        * tao/POAC.cpp:
        * tao/PolicyC.cpp:
          Hand crafted the changes in the IDL compiler (mostly fixes to
          STUB_Object memory managment).

        * tao/Principal.h:
        * tao/Principal.i:
        * tao/Principal.cpp:
        * tao/Request.h:
        * tao/Request.i:
        * tao/Request.cpp:
          Completed the pseudo object support for this class.

        * tao/Typecode.h:
        * tao/Typecode.i:
        * tao/Typecode.cpp:
          ORB owned typecodes follow the same memory rules as normal
          ones. Since the ORB always holds a reference to them they just
          survive for a longer time.

        * tao/decode.cpp:
          Corrections to the memory managment of STUB_Objects; the
          CORBA_Object does release them, but it does not increase the
          refcnt on the ctor.

        * tao/deep_copy.cpp:
          Used T::_duplicate instead of the (propietary)
          object->_incr_refcnt().

        * tests/Param_Test/param_test_i.cpp:
          The objref test was not releasing its inout argument before
          changing it.

Tue Jul 21 12:09:40 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * tests/NestedUpcall/MT_Client_Test/run_test.pl:
        * tests/NestedUpcall/Reactor/run_test.pl:
        * tests/NestedUpcall/Triangle_Test/run_test.pl:
          Added new perl scripts for the tests.

Tue Jul 21 12:02:41 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/Task_Client.cpp :
          Added code so that the client can accept -ORB arguments on
          the command line. The main thread blocks on a condition
          variable until the high priority thread does the argument
          parsing and changes the global Task_State . The main
          thread then creates the low priority threads.

        * tests/Cubit/TAO/MT_Cubit/client.cpp (do_priority_inversion_test):
          Added code for the main thread to block on a condition
          variable after activating the high priority thread until the high
          priority thread wakes it up.

Tue Jul 21 10:00:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/Connect.cpp: Improved the location forwarding, now we check
          the environment for exceptions and the Server Request.

        * tao/ORB.{h,cpp}: Moved the leader_follower model variables form
          the ORB_Core to in here. The ORB_Core has methods to access
          all the variables.

        * tao/ORB_Core.{h,cpp}: Removed the leader_follower model variables
          but kept the accessing methods.

        * tao/Server_Request.{h,cpp}: Changed the exception handling slightly.
          A forwarding exception has the type USER_EXCEPTION now.
          Also, two accessor methods were added to get the forward location
          and the exception type. This is all used in the Server_Connection_Handler.

Mon Jul 20 23:09:21 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * docs/release_notes.html: Updated the status on the Audio/Video
        streaming service.

Mon Jul 20 23:10:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * docs/locate_request.html: Locate request documentation.

        * docs/releasenotes/index.html: Added a reference to the
          locate request documentation.

Mon Jul 20 21:10:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tests/Cubit/TAO/IDL_Cubit/IDL_Cubit_Client.java:
          A class to access the IDL_Cubit server via the JavaIDL
          ORB.

        * tests/Cubit/TAO/IDL_Cubit/README: Documented how to
          use the aforementioned Java class.

Mon Jul 20 19:06:57 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/Invocation.cpp (invoke): wrapped final return statement
          with ACE_NOTREACHED.

        * orbsvcs/tests/Trading/Makefile: moved -lorbsvcs and -lTAO
          from LDLIBS to LIBS, so that the libTTest.so build will link
          against them.

Mon Jul 20 18:17:02 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        * docs/releasenotes/index.html: Updated the IDL compiler entry
        (GPERF-IDL integration).

Mon Jul 20 17:51:01 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Offer_Iterators.h:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.h:
        * orbsvcd/tests/Trading/import_test.cpp:
          Fixed another g++ linker error and one compile-time error.

Mon Jul 20 17:30:49 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp (gen_perfect_hash_methods): Changed
        the absolute path for gperf to $ACE/bin.

Mon Jul 20 16:55:54 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp (copy_ctor_helper):
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp (visit_interface):
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp (visit_interface):
        * TAO_IDL/be_include/be_interface.h (copy_ctor_helper):
          To alleviate the g++ linker's confusion in the face of profuse
          virtual inheritence in the skeletons, the IDL compiler now
          explicitly generates a copy constructor in each skeleton
          class. The copy constructor calls the copy constructor of each
          superclass in the skeleton's inheritence hierarchy.

Mon Jul 20 15:08:11 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        * TAO_IDL/driver/drv_args.cpp (DRV_parse_args):  Added a "#if
          !defined (ACE_HAS_GPERF)" so that IDL Compiler will use Dynamic
          Hashing if gperf is not found but -P option is specified.

        * TAO_IDL/be/be_interface.cpp (gen_perfect_hash_methods): Fixed
          the ACE_Process' command line to use absolute path
          <$ACE/apps/gperf/src/gperf>.

Mon Jul 20 13:00:41 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tests/Cubit/TAO/IDL_Cubit/Makefile:
        * tests/Cubit/TAO/IDL_Cubit/client_i.h:
        * tests/Cubit/TAO/IDL_Cubit/client_i.cpp:
          Added options to just run the VOID or the ONEWAY test.

Mon Jul 20 12:27:29 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * docs/releasenotes/index.html:
          Added a reference to trader.html in the Trading Service portion
          of the releasenotes.

        * docs/releasenotes/trader.html:
          Minor editorial changes to the trader documentation.

Mon Jul 20 11:46:04 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/corba.h:
          TAO_THROW_SPEC is a little different than ACE_THROW_SPEC, not
          only we need support for exceptions in the platform, we also
          would need them in the IDL compiler.
          Plus it gives a lot of warnings in MSVC++ 5.0

Mon Jul 20 11:15:52 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trader.cpp:
          Eliminated superfluous template instantiation
          ACE_Unbounded_Queue<CosTrading::Admin::OctetSeq>.

Mon Jul 20 10:57:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/Connect.cpp: Changed the handle_locate method completely
          to try to upcall to the non_existent method. This method
          is not part of the standard, is TAO internal. We know
          that this method is supported by each TAO Object. So
          if we fail we know the object is not there. If we succeed,
          the object is available and if we get forward_request
          exception we will forward the call.

        * tao/IIOP_Object.{h,i,cpp}: Added code to branch to do a conditonal
          locate request, depending on two flags. One tells to
          use it at all the other tells if it is the first call-
          because we want to do it only on the first call.

        * tao/Invocation.{h,i,cpp}: Added code to the start method,
          which branches into different CDR stream generation,
          depending on the kind of message we want to send. The two
          options right now are: Request and LocateRequest.
          A new subclass has been introduces: TAO_GIOP_
          LocateRequest_Invocation, which is similar to the
          Twoway subclass but does a locate request. It has its own
          invoke method and does not call the common invoke method.
          Closing of a connection is the same in all the three cases
          (oneway, twoway, locate_request), I factored the code out
          into a close_connection method.

        * tao/Object.{h,cpp}: Added a method call to activate
          the locate request on the first call after the activation.
          The locate request will be done only once unless it is activated
          a second time.

        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp: Changed
          the code generation of the non_existent method. It accepts
          only one parameter, not two. So I changed the param_count
          from 2 to 1.

Mon Jul 20 10:35:33 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.{h,cpp},
          Offer_Iterators_T.cpp:
          wrapped TAO_THROW_SPEC arguments with double parens.

        * orbsvcs/orbsvcs/Trader/Offer_Iterators.h: moved = 0 (for pure
          virtual) to after the exceptions spec.

        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp,Trader_Utils.cpp:
          fixed exceptions specs to match declarations in .h files.

        * orbsvcs/tests/Trading/TT_Info.cpp (dump_properties): changed
          types of locals "seq_length" and "i" from CORBA::ULong to
          CORBA::Long to avoid signed/unsigned comparison.

Mon Jul 20 10:20:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * docs/releasenotes/index.html: Added a reference to the
          global resources and leader-follower model documentation.

        * docs/leader_follower.html: Documentation about the leader-follower
          model used for global resources, especially for one Reactor
          accessed by multiple threads.

Mon Jul 20 06:52:02 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

        * TAO_IDL/be/be_visitor_array/{array_ch, array_ci, array_cs}.cpp:
          Added support for anonymous arrays. This is yet to be tested

        * TAO_IDL/be/be_visitor_field/field_ch.cpp: Handled anonymous
          array declaration in structures.

          *Note* that although the above changes were made a couple of weeks
          back I have not been able to test them.

Sun Jul 19 22:58:45 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trader.cpp: added
          ACE_Unbounded_Queue<CosTrading::Admin::OctetSeq *>, etc., template
          instantiations.

        * tao/corba.h: define TAO_THROW_SPEC using ACE_THROW_SPEC.

Sat Jul 18 23:01:51 1998  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * TAO version 0.1.40 released.

Sat Jul 18 22:16:14 1998  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * TAO version 0.1.39 released.

Sat Jul 18 20:22:19 1998  Michael Kircher <mk1@cs.wustl.edu>

        * tests/Quoter/run_test.sh: Removed this file,
          all the functionality is provided by the
          run_test.pl script.

        * tao/Server_Request.{h,cpp}: Added a new constructor,
          which does not need an input CDR stream. It is going
          to be used for locate requests. When we invoke
          the non_existend method on the object to see if it
          is there, forwarded or not existent.

        * orbsvcs/tests/Simulator/DOVEBrowser/PushConsumer.java.JDK1.2:
          Adopted to the new interfaces for the Event Service.

Sat Jul 18 19:37:19 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * orbsvcs/tests/Simple_Naming/client.cpp: The ORB now looks
          at argv and argc before the client does.

        * orbsvcs/tests/Simple_Naming/run_test.pl: New Perl script
          for testing.

Sat Jul 18 17:31:29 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * tests/Cubit/Hardpack/IDL_Cubit/cubit.idl:
        * tests/Cubit/Hardpack/IDL_Cubit/cubit_impl.{hh,cc}:
        * tests/Cubit/Hardpack/IDL_Cubit/client_i.{h,cpp}:
        * tests/Cubit/Hardpack/IDL_Cubit/server_i.{h,cpp}:
        * tests/Cubit/Hardpack/IDL_Cubit/client.cpp:
        * tests/Cubit/Hardpack/IDL_Cubit/server.cpp:
        * tests/Cubit/Hardpack/IDL_Cubit/Makefile:
        * tests/Cubit/Hardpack/IDL_Cubit/README:
        * tests/Cubit/Hardpack/IDL_Cubit/initref.cfg:
          Added these files for the IDL_Cubit test for the Hardpack
          ORB.

Sat Jul 18 15:44:59 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Trader/Offer_Database.*:
        * orbsvcs/orbsvcs/Trader/Offer_Iterators.*:
        * orbsvcs/orbsvcs/Trader/Offer_Iterators_T.cpp:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp:
        * orbsvcs/orbsvcs/Trader/Trader.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.*:
        * orbsvcs/orbsvcs/Trader/Trader_T.cpp
        * orbsvcs/orbsvcs/Trader/Trader_Utils.*:
        * orbsvcs/tests/Trading/Offer_Exporter.*:
        * orbsvcs/tests/Trading/Service_Type_Exporter.*:
        * orbsvcs/tests/Trading/Offer_Importer.*:
        * orbsvcs/tests/Trading/export_test.cpp:
        * orbsvcs/tests/Trading/import_test.cpp:
        * orbsvcs/tests/Trading/collocated_test.cpp:
        * orbsvcs/tests/Trading/Makefile:
        * orbsvcs/Trading_Service/Trading_Service.cpp:
        * orbsvcs/Trading_Service/Makefile:

          Fixed g++ 2.7.2 compilation warnings/errors. Note: the tests and
          applications, although they compile now with g++ 2.7.2, don't link
          properly because the g++ linker is baffled by the profuse
          virtual/multiple inheritance in the skeletons generated from the
          CosTrading.idl file, and can't find the copy constructors it
          autogenerated. The solution is to have the IDL compiler generate
          explicit copy constructors for these skeleton classes.

Sat Jul 18 15:39:42 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * orbsvcs/tests/Simple_Naming/client.dsp: Updated this MSVC
          project file to use the latest changes to the Simple
          Naming test.

Sat Jul 18 15:30:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * docs/forwarding.html: Added some optimization
          suggestions.

Sat Jul 18 14:19:48 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * tao/orbconf.h:
        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/CosTrading.idl:
          Moved the definition of TAO_HAS_OBJECT_IN_STRUCT_MARSHAL_BUG into
          orbconf.h and CosTrading.idl, and out of the orbsvcs Makefile.

Sat Jul 18 14:12:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tests/Cubit/TAO/IDL_Cubit/svc.conf: Added the
          ORBiiopprofilelock switch to the client configuration to
          switch off the lock needed for forwarding. We know, we
          do not need it, so we use a null lock instead. This
          should improve the performance a little bit.

        * tao/Connect.cpp: Added code for handle_locate, which is still
          commented, because not tested.
          The TAO_ORB_Core_instance is now cached in send_request and
          handle_input.

Sat Jul 18 14:00:38 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * tests/Cubit/TAO/IDL_Cubit/Makefile: Always try to
          generate perfect hash functions for the operation
          dispatching by enabling the -P flag.

Sat Jul 18 11:29:43 1998  Chris Gill  <cdgill@cs.wustl.edu>

        * orbsvcs/orbsvcs/Event/RT_Task.h
          orbsvcs/orbsvcs/Event/Dispatching_Modules.cpp

          Changed to always typedef ACE_ES_QUEUE as the base
          template class ACE_Message_Queue<ACE_SYNCH> and
          explicitly construct dynamic message queues as needed.

Sat Jul 18 10:19:37 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/Logger/client.cpp (nesting_test): added return 0
          at end. (init): removed unused local factory_ref2.

Sat Jul 18 08:19:24 1998  Douglas C. Schmidt  <schmidt@lambada.cs.wustl.edu>

        * orbsvcs/tests/Simple_Naming/client.cpp: Beefed up this test so
          that it illustrates how to bind(), resolve(), and unbind() an
          object reference to a remote Naming Context.  This is an
          important test to make sure that things are working properly.

        * orbsvcs/orbsvcs/Naming/Naming_Utils: Added an init() method to
          this class to begin to factor out common code for being a client
          of a Naming Service.

        * TAO/orbsvcs/tests/Naming/ns_tree.cpp (main): Cleaned up the
          formatting for this test.

        * orbsvcs/tests/Simple_Naming: Renamed clnt.* to client.* to
          be more consistent.

        * tests/Cubit/TAO/IDL_Cubit/svc.conf: Changed the default ORB
          concurrency model from reactive to thread-per-connection since
          the latter is considerably faster.

Fri Jul 17 17:42:27 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * docs/Options.html: Added documentation for the TAO environment
          variables.

        * tao/ORB.cpp (resolve_trading_service): Changed the environment
          variable for NameService and TradingService to NameServiceIOR
          and TradingServiceIOR to be more consistent.

        * orbsvcs/orbsvcs/Naming/Naming_Utils.h: Started adding the new
          TAO_Naming_Client class, which will simplify the initialization
          and access to a NamingContext.

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp: Changed the
          capitalization of GetNamingContext() to get_naming_context(),
          which is consistent w/TAO programming style.

        * tao/skip.cpp: Replaced uses of old-style C casts with a
          static_cast.

Fri Jul 17 19:34:11 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * tao/ORB.cpp: The return value for acceptor ().enable () is no
          longer being checked for -1, since platforms that don't
          support it (like NT) will return -1.

Fri Jul 17 18:46:17 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * orbsvcs/orbsvcs/Log/Logger_i.h: Added new fields for verbosity
        * orbsvcs/orbsvcs/Log/Logger_i.cpp: Adjusted for new fields
        * orbsvcs/tests/client.h: Added new methods- resolve_name () &
          nesting_test ()
        * orbsvcs/tests/client.cpp: Compacted code somewhat. Broke run () and
          init () into smaller functions
        * orbsvcs/orbsvcs/Logger.idl: Adjusted TAO_MAXLOGMSGLEN
        * orbsvcs/tests/server.cpp: Partialy incomplete incorporation of
          name service

Fri Jul 17 17:58:37 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * docs/implrepo.html: Addressed some more comments.

Fri Jul 17 11:47:42 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/IIOP_Object.cpp (do_static_call,put_params): on sparcs
          with g++ prior to 2.8, e.g., 2.7.2.3, only; added an awful
          hack to two-way va_arg processing.  The hack throws away
          the first var arg.  Apparently, g++ 2.7.2.3 provides a bogus
          arg to the first va_arg call by mistake.  This ugliness
          works around that problem.  We haven't seen this elsewhere
          with va_arg, or with later versions of g++.

        * orbsvcs/tests/Event_Latency/Event_Latency.cpp:
          fixed supplier id (it was the same for all suppliers) and other
          very minor cleanup.

        * orbsvcs/tests/Event_Latency/run_tests.sh: added.

Fri Jul 17 11:02:29 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * tao/POAC.h: unclosed comments.

        * orbsvcs/tests/AVStreams/source/mpeg/server/Machine_Properties.{h,cpp}:
        * orbsvcs/tests/AVStreams/source/mpeg/server/Video_Repository.{h,cpp}:
        * orbsvcs/tests/AVStreams/source/mpeg/server/Property_Exporter.{h,cpp}:
        * orbsvcs/tests/AVStreams/source/mpeg/server/augmented_server.{h,cpp}:
        Updated these files in light of recent changes to the Trading Service.

Fri Jul 17 09:46:56 1998  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * tao/POAC.h: Replaced #endif // ... with #endif /* ... */ since
          this is more portable...

        * tao/POAC.h: Changed CORBA::Policy to ACE_CORBA_1 (Policy) to
          work around friggin' bugs with MSVC++ 4.2.  Thanks to Ernesto
          Guisado <eguisado@saincotrafico.com> for reporting this.

Fri Jul 17 08:28:55 1998  David L. Levine  <levine@cs.wustl.edu>

        * Makefile (CONTROLLED_FILES): added TAO-inheritance.{pdf,ps}.gz
          to distribution.

Thu Jul 16 15:20:12 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Connect.cpp:
        * tao/ORB.cpp:
          Set the close-on-exec flag using the new IPC_SAP interfaces.

        * tao/ORB_Core.cpp:
        * orbsvcs/orbsvcs/Event/RT_Task.h:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.h:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.h:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
          Use ACE_SYNCH_CONDITION instead of
          ACE_Condition<ACE_Thread_Mutex> some template instantiations are
          removed.

Thu Jul 16 15:15:46 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/Makefile:
        * orbsvcs/tests/Makefile:
        * orbsvcs/orbsvcs/Makefile:
        Trading Service now compiles by default! Let the mayhem begin!

Thu Jul 16 12:55:54 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Connect.cpp:
          Added the close-on-exec flag the Client and Server
          Connection_Handlers, this avoid resource leaks in the event of
          fork/execs.

Thu Jul 16 12:57:08 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * tao/ORB_Core.cpp: Fixed explicit template instantiation of
        ACE_Thread_Condition and ACE_Condition on IRIX.

Thu Jul 16 11:50:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/ORB_Core.{h,cpp}: Due to merging a cvs branch
          to the main trunk, the following changes went away, and
          where now reintroduced:

Thu Jul 16 00:00:20 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * Removed all the COM madness, TAO no longer uses the IUnknown
          classes, QueryInterface(), AddRef() or Release(). The new
          reference counting methods are called _incr_refcnt and
          _decr_refcnt (the leading underscore is necessary for CORBA
          complaince, but it breaks ANSI/C or ANSI/C++ complaince, yuk!).
          This change save a few microseconds on the critical path,
          because QueryInterface() was used in remote method invocation,
          invoking many virtual methods, increasing the refcnt and then
          decreasing it again; but the real motivations are:
          + It was confusing to users it what way did TAO support COM (it
          does not, yet).
          + Removing QueryInterface() and the ref counting from the
          critical path will allow us to protect the ref counts with
          mutexes (strategized, of course).

        * tao/Any.cpp:
        * tao/Any.h:
        * tao/CurrentC.cpp:
        * tao/Exception.cpp:
        * tao/Exception.h:
        * tao/IIOP_ORB.cpp:
        * tao/IIOP_Object.cpp:
        * tao/IIOP_Object.h:
        * tao/Invocation.cpp:
        * tao/Makefile:
        * tao/Marshal.i:
        * tao/NVList.cpp:
        * tao/NVList.h:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORB.i:
        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Object.i:
        * tao/POAC.cpp:
        * tao/PolicyC.cpp:
        * tao/Principal.cpp:
        * tao/Principal.h:
        * tao/Request.cpp:
        * tao/Request.h:
        * tao/Server_Request.cpp:
        * tao/Server_Request.h:
        * tao/Server_Request.i:
        * tao/Stub.h:
        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/append.cpp:
        * tao/corba.h:
        * tao/decode.cpp:
        * tao/deep_copy.cpp:
        * tao/encode.cpp:
        * tao/skip.cpp:
          This are the files affected by the change.

        * tao/compat/initguid.h:
        * tao/compat/objbase.h:
          Removed! COM is gone from TAO.

        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
          Generate the new CORBA_Object methods to gain access to the
          STUB_Object, we don't generate the old COM methods.

        * taoconfig.mk:
          Removed -I$(TAO_ROOT)/tao/compat

        * Makefiles:
          Updated the dependencies in all the Makfiles of TAO (due to the
          removal of objbase.h & friends). Also fixed many problems in the
          Makefiles, like missing SRC or LSRC lists, removed the
          -I$(TAO_ROOT)/tao/compat includes, added missing TAO_ROOT
          definitions, etc.

        * docs/releasenotes/ec.html:
          Added the latest changes.

        * tests/Cubit/TAO/IDL_Cubit/client_i.cpp:
          Fixed mismatched memory free (new vs. malloc).

        * orbsvcs/tests/Logger/client.h:
          Fixed method declaration.

Wed Jul 15 22:17:20 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/ORB_Core.cpp: added ACE_Unbounded_Set<ACE_SYNCH_CONDITION *>,
          etc., template instantiations.  Added ACE_Thread_Condition and
          ACE_Condition instantiations, w/o ACE_HAS_TEMPLATE_TYPEDEFS.

Wed Jul 15 21:16:19 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * orbsvcs/Trading_Service/Trading_Service.{dsp,dsw}:
        * orbsvcs/tests/Trading/Trading.dsw:
        * orbsvcs/tests/Trading/Colocated_Test.dsp:
        * orbsvcs/tests/Trading/Export_Test.dsp:
        * orbsvcs/tests/Trading/Import_Test.dsp:
        * orbsvcs/tests/Trading/TradingLib.dsp:
          Project files for the Trading service for MSVC.

Wed Jul 15 20:12:47 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * tao/ORB_Core.cpp: Changed the warnings that occur when
          a conf file is not found to be debug warnings (only show
          up with -ORBdebug)

Wed Jul 15 19:28:51 1998  Seth Widoff  <sbw1@cs.wuslt.edu>

        * orbsvcs/orbsvcs/orbsvcs.dsp: Added trader files.

Wed Jul 15 18:00:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/Invocation.cpp: Made sure, that all control paths
          resume the handler - checking invoke methods.

Wed Jul 15 16:27:01 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * tests/Simple: Added a new test that is just a simple test
          which can be used as a basis for new tests or just to see
          the basics of a CORBA client and server.

Wed Jul 15 16:00:39 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * client.cpp: Changed a few cast statments; added comments

        * runtests.pl: New script to automate running of tests

Wed Jul 15 15:44:10 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * tao/Invocation.cpp: Carlos corrected his omission of code to
          invoke before waiting for a reply.

Wed Jul 15 12:40:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/Connect.{h,cpp}: Changed handle_input and send_request
          of the Client Connection Handler to support global
          resources and multiple threads. It is achieved through
          the leader follower model.

        * tao/Invocation.cpp: The suspended Client Connection Handler
          from Connect.cpp get resumed (TAO_GIOP_Invocation::invoke).

        * tao/ORB.{h,cpp}: The run method conforms to the rules
          of the leader follower model.

        * tao/ORB_Core.{h,cpp}: The ORB Core now supports all
          the variables for the leader follower model.

Wed Jul 15 12:07:15 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Servant_Base.cpp:
          Added timeprobes in operation lookup.

        * tests/Cubit/TAO/IDL_Cubit/client.cpp:
        * tests/Cubit/TAO/IDL_Cubit/server.cpp:
          Added TIMEPROBE_PRINT at the end.

Wed Jul 15 12:11:01 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * orbsvcs/tests/Property/Makefile:
          Removed unnecessary STL dependencies.

Wed Jul 15 11:44:57 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        * orbsvcs/tests/CosPropertyService/Makefile: Removed STL stuff and
          did a make depend.

Wed Jul 15 10:55:33 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Quoter/run_tests.pl: removed hard-coded perl path.

Wed Jul 15 09:47:17 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/orbsvcs/Event/Module_Factory.cpp:
          Removed a bogus include file.

        * orbsvcs/orbsvcs/Makefile:
          Updated dependencies again.

Tue Jul 14 21:56:30 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile (FILES): updated dependencies.

Tue Jul 14 21:50:04 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Quoter/run_test.sh: use sh instead of ksh, $login
          instead of mk1, and $ps_opts.

        * orbsvcs/tests/start_services: bash doesn't always supply $USER,
          so use $login with it also.

Tue Jul 14 21:25:19 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/tests/Trading/Makefile:
        * orbsvcs/tests/Trading/Offer_Exporter.{h,cpp}:
        * orbsvcs/tests/Trading/Offer_Importer.{h,cpp}:
        * orbsvcs/tests/Trading/Offer_Importer.h:
        * orbsvcs/tests/Trading/Service_Type_Exporter.{h,cpp}:
        * orbsvcs/tests/Trading/TT_Info.{h,cpp}:
        * orbsvcs/tests/Trading/colocated_test.cpp:
        * orbsvcs/tests/Trading/export_test.cpp:
        * orbsvcs/tests/Tradingimport_test.cpp:
          These tests now copmile with egcs. In addition, Added modify and
          withdraw_using_constraint tests, and the "quiet" flag, which will
          staunch the usual barrage of output by not printing the contents
          of offers and service types.

        * orbsvcs/Trading_Service/Trading_Service.cpp: compiles with
          egcs.

        * orbsvcs/orbsvcs/Trader/*.*: Compiles with egcs. Improved the
          modify method.

Tue Jul 14 19:15:41 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/Event/Module_Factory.h:
        * orbsvcs/orbsvcs/Event/Module_Factory.cpp:
        * orbsvcs/orbsvcs/Event/Fast_Reactor.h:
        * orbsvcs/orbsvcs/Event/Dispatching_Modules.h:
        * orbsvcs/orbsvcs/Event/Dispatching_Modules.cpp:
        * orbsvcs/orbsvcs/Event/Event_Channel.h:
        * orbsvcs/orbsvcs/Event/Event_Channel.cpp:
          The Event Channel modules are constructed using a Factory class,
          that will simplify configuration of the EC, like using RTU or
          FIFO dispatching, disabling correlation, or filtering, etc.

Tue Jul 14 18:35:56 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
          The generated replace() method released the buffer twice.

Tue Jul 14 15:56:46 1998  Nagarajan Surendran  <naga@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Machine_Properties.{h,cpp}:
        * orbsvcs/tests/AVStreams/Property_Exporter.{h,cpp}:
          Removed as they are moved to
          orbsvcs/tests/AVStreams/mpeg/source/server.

        * orbsvcs/tests/AVStreams/Makefile:
        * orbsvcs/tests/AVStreams/server.{h,cpp}:
          Removed as they are outdated.

Tue Jul 14 15:28:44 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
          Added support for arrays inside structures. Anonymous arrays do
          *not* work. Thanks to Eric Powers <powerg@deltanet.com> for this
          patch.

Tue Jul 14 14:40:36 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/Event_Latency/Event_Latency.cpp (print_stats):
          when short-circuiting, don't print out time breakdowns to/in/from EC.

Tue Jul 14 13:30:01 1998  Chris Gill  <cdgill@cs.wustl.edu>

        * orbsvcs/orbsvcs/Event/Dispatching_Modules.cpp
          orbsvcs/orbsvcs/Event/RT_Task.h:

          Added conditional compilation logic to cause EC to use dynamic queues
          with appropriate dispatching strategies when the MUF, EDF, or MLF
          strategies are defined.  This is a temporary measure to allow
          testing of the EC performance with the dynamic queues, and will
          be relaced with a better configuration mechanism, based on the results
          of the off-line scheduling run, in the very near future.

Tue Jul 14 12:00:18 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/be_interface.cpp:
          Added server side support for CORBA::Object::_non_existent, in
          the future it could be implemented in the POA, saving an
          operation lookup and reducing the footprint somewhat.

        * orbsvcs/orbsvcs/Concurrency/CC_LockSet.h:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSet.cpp:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.h:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.cpp:
          Replaced ACE_Thread_Mutex with ACE_SYNCH_MUTEX so it compiles in
          platforms without threads, not that it will work though.

Tue Jul 14 12:30:45 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Cubit/TAO/MT_Cubit/client.cpp (do_priority_inversion_test):
          removed dependence on local context_switch on platforms that don't
          have ACE_HAS_PRUSAGE_T and ACE_HAS_GETRUSAGE.  Thanks to
          Arturo Montes <mitosys@colomsat.net.co> for reporting this.  Also,
          removed csw on those platforms, because it was no longer being used.

Tue Jul 14 11:48:23 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/ORB_Core.{h,cpp} (arl_same_port_connect):  Added the new
          member function to ORB_Core to check if we want the client to
          initiate a connection using the same local port number as
          server's.

        * tao/Invocation.cpp (start): Added code to specify the following:

          This change is only for ARL only and to enable the feature, you
          must add

             #if defined (TAO_ARL_USES_SAME_CONNECTOR_PORT)

          to your $ACE_ROOT/ace/config.h.  Add the command line option

             -ORBarlsameportconnect yes

          when starting the client.

          *** This is not for the general audience of TAO.  Don't use
          it. ***

Tue Jul 14 11:34:02 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/IIOP_Object.cpp (do_static_call): commented out unused
          local "status".

Mon Jul 13 18:35:22 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_sequence.cpp:
          Code generation for sequences of octets was incorrect in
          platforms that do not support automatic template
          instantiation. Thanks to Eric Powers <powerg@deltanet.com> for
          pointing this out.

Mon Jul 13 17:50:35 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/TAO.dsp:  Added Invocation.cpp into project.


        The following two changes were made per Carlos' instructions.
        (I was just typing.)

        * tao/deep_free.cpp (DEEP_FREE): Commented out 'delete source' in
          case of CORBA::tk_struct.

        * tao/Any.cpp (operator=, ~CORBA_Any, replace): Added delete
          this->value after DEEP_FREEing.

Mon Jul 13 17:37:01 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Object.cpp:
          Fixed some problems in the implementation of _non_existent(),
          thanks to Dave Meyer <dmeyer@std.saic.com>

Mon Jul 13 16:20:30 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/corba.h:
        * tao/Makefile:
        * tao/Invocation.h:
        * tao/Invocation.i:
        * tao/Invocation.cpp:
        * tao/GIOP.h:
        * tao/GIOP.i:
        * tao/GIOP.cpp:
        * tao/IIOP_Object.h:
        * tao/IIOP_Object.cpp:
          On the client side we can optimize memory allocation for
          oneway requests by not allocating the response
          buffer. But to do this and take as much memory as possible from
          the stack also requires to follow different execution paths for
          the oneway vs. two way tests.
          With this changes the memory allocations are:
          + For oneways:
            1 on the client side (can be TSS allocator).
            3 on the server side (one can be TSS allocator).
          + For twoway:
            3 on the client side (1 can be a TSS allocator).
            3 on the server side (1 can be TSS allocator).


        * tests/Cubit/TAO/IDL_Cubit/cubit.idl:
        * tests/Cubit/TAO/IDL_Cubit/client_i.h:
        * tests/Cubit/TAO/IDL_Cubit/client_i.cpp:
        * tests/Cubit/TAO/IDL_Cubit/cubit_i.h:
        * tests/Cubit/TAO/IDL_Cubit/cubit_i.cpp:
          Added simple tests with no arguments or return values, also
          added a oneway test.

        * orbsvcs/Dump_Schedule/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/LifeCycle_Service/Makefile:
        * orbsvcs/Naming_Service/Makefile:
        * orbsvcs/Scheduling_Service/Makefile:
        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/tests/EC_Mcast/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/Event_Latency/Makefile:
        * orbsvcs/tests/Logger/Makefile:
        * orbsvcs/tests/Simple_Naming/Makefile:
        * tests/CDR/Makefile:
        * tests/Cubit/TAO/IDL_Cubit/Makefile:
        * tests/Cubit/TAO/MT_Cubit/Makefile:
        * tests/NestedUpcall/Reactor/Makefile:
        * tests/NestedUpcall/Triangle_Test/Makefile:
        * tests/OctetSeq/Makefile:
        * tests/POA/Default_Servant/Makefile:
        * tests/POA/Explicit_Activation/Makefile:
        * tests/POA/FindPOA/Makefile:
        * tests/POA/Generic_Servant/Makefile:
        * tests/POA/NewPOA/Makefile:
        * tests/POA/On_Demand_Activation/Makefile:
        * tests/POA/RootPOA/Makefile:
        * tests/Param_Test/Makefile:
        * tests/Quoter/Makefile:
        * tests/Thruput/TAO/Makefile:
          The new files in the tao library changed the dependencies.

        * orbsvcs/Dump_Schedule/Makefile:
          Sources were listed in the wrong macro.

Mon Jul 13 14:37:06 1998  David L. Levine  <levine@cs.wustl.edu>

        * Event_Latency.cpp: use ACE_CU64_TO_CU32 to convert const
          64-bit u_ints to 32-bits happily with Sun C++.  Also, replaced
          a function-style cast and some other old casts with ACE
          ANSI-style casts.

Mon Jul 13 13:59:08 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tests/Param_Test/run_test.pl:
          Fixed a few (minor) perl warnings.

Mon Jul 13 11:49:29 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * tao/Marshall.i: Now setting freed string pointer to zero.

        * tao/deep_free.cpp: Although the struct fields were being freed,
          the memory for the struct itself wasn't. Note: other types may
          also have this problem.

Sun Jul 12 19:47:34 1998  Seth Widoff  <sbw1@cs.wustl.edu>

        * docs/releasenotes/trader.html:
          Finished the initial draft of the Trading Service documentation.

Sun Jul 12 13:45:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tests/NestedUpcalls/MT_Client_Test/*:
          Added a new test for testing multiple threads accessing
          global resources, which means, one ORB and one Reactor.
          It also tests for proper nested upcalls.

Sun Jul 12 01:40:58 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * Fixed several problems reported by John Mulhern
          <9107@mn3.lawson.lawson.com>, that fix portability problems to
          HP/aCC.

        * tao/Typecode.cpp:
          Declared a temporary buffer as CORBA::Octet* instead of void*,
          otherwise HP/aCC balks.

        * TAO_IDL/be_include/be_sequence.h:
        * TAO_IDL/be/be_sequence.cpp:
          fe_add_sequence() was redefined with different arguments and
          return value. It was not the intention and it triggered warnings
          on several compilers (HP/aCC, SGI/CC).

        * TAO_IDL/fe/y.tab.cpp:
          Removed indent pragma.
          Declared tao_yyerror as taking a const char*, it is not used
          anyway.

        * TAO_IDL/be/be_visitor_operation/tie_si.cpp:
          Tie delegation is similar to collocated upcalls, the arguments
          are T_ptr objects and not T_var, hence, no .in () calls are
          needed.

        * TAO_IDL/fe/fe_extern.cpp:
        * TAO_IDL/driver/drv_preproc.cpp:
          Changed old C-style cast to reinterpret_cast, that should make
          HP/aCC compiler happy. This is just because SunCFE uses File* as
          a compilation barrier for FILE*, IMHO a waste of time.

Sat Jul 11 10:17:35 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/tests/Makefile:
          Added EC_Mcast to the list of tests.

Fri Jul 10 22:25:44 1998  David L. Levine  <levine@cs.wustl.edu>

        * TAO version 0.1.38 released.

Fri Jul 10 22:06:16 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/CDR.i (do_byte_swap): added explicit int return type.

Fri Jul 10 17:51:13 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * Param_Test/bd_str_seq.cpp:
        * Param_Test/ub_str_seq.cpp:
          DII tests now work.

        * Param_Test/bd_short_seq.cpp:
        * Param_Test/ub_short_seq.cpp:
        * Param_Test/bd_long_seq.cpp:
        * Param_Test/ub_long_seq.cpp:
          Minor changes in notation - no new functionality.

Fri Jul 10 17:29:25 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/tests/EC_Mcast/Makefile:
        * orbsvcs/tests/EC_Mcast/svc.conf:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.h:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.h:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp:
          Added the first implementation of a UDP/Mcast based gateway to
          the EC. The current classes require a lot of manual
          configuration.
          Also implemented a small test to show the usage.

        * tao/CDR.h:
        * tao/CDR.i:
        * tao/CDR.cpp:
          Give access to external users of the swap_<n> methods, also
          provide an accesor for the byte swapping flag in OutputCDRs.

        * tao/GIOP.cpp:
          Use the new byte swap accessor.

        * orbsvcs/orbsvcs/Event/Event_Channel.h:
        * orbsvcs/orbsvcs/Event/Event_Channel.i:
        * orbsvcs/orbsvcs/Event/Event_Channel.cpp:
          Completed support for gateways that are interested in the
          supplier list changes. It is now possible to add Gateways
          *after* the consumer or supplier list has stabilized.

        * orbsvcs/orbsvcs/Event/EC_Gateway.cpp:
          Do nothing if receive a supplier update.

        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
          Destroy the Event Channel *after* the consumers unsubscribe from
          it.

        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/Event_Service/Event_Service.cpp:
          Before a normal exit we unbind the Event Service (and, if local,
          the Scheduling Service) from the Naming Service.

Fri Jul 10 17:03:11 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp:
        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Trader/Offer_Database.cpp:
        * orbsvcs/orbsvcs/Trader/Offer_Iterators.cpp:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp:
        * orbsvcs/orbsvcs/Trader/Trader.{h, cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_T.h:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.{h,cpp}:
          Addressed a number of memory leaks in the Trading
          Service. However, typecodes still leak oodles of memory.

        * orbsvcs/Trading_Service/Trading_Service.cpp:
          Cleans self up properly after catching SIGINT.

        * orbsvcs/tests/Trading/TT_Info.cpp:
        * orbsvcs/tests/Trading/Service_Type_Exporter.cpp:
        * orbsvcs/tests/Trading/export_test.cpp:
          Aesthetic changes.

Fri Jul 10 16:35:21 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Param_Test/client.cpp:
          Fixed bug in DII arg list creation.

        * TAO/tests/Param_Test/bd_short_seq.cpp:
        * TAO/tests/Param_Test/bd_long_seq.cpp:
        * TAO/tests/Param_Test/ub_short_seq.cpp:
        * TAO/tests/Param_Test/ub_long_seq.cpp:
          DII tests now work.

        * TAO/tests/Param_Test/any.cpp:
          Made some changes - not done yet. DII test still doesn't work.

Fri Jul 10 15:32:42 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * docs/implrepo.html: Another pass.

Fri Jul 10 12:21:18 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
          Fixed errors and warnings reported by David.

Fri Jul 10 00:32:51 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
          The skeletons were not releasing the strings allocated while
          demarshalling the arguments.

        * docs/implrepo.html:
          Another pass at the design document.

Thu Jul 09 23:02:48 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/POA.cpp (create_internal_lock): Change method to watch out
          for platforms without threads.  Thanks to Hongyin Quan
          <hq1@arl.wustl.edu> for pointing this out.

Thu Jul  9 17:48:37 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * docs/implrepo.html: Carlos's comments have been addressed.

Thu Jul  9 15:12:35 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * tao/deep_free.cpp: wasn't freeing string fields of structs.

        * tests/Quoter/Makefile: removed STL vestige.

Wed Jul  8 21:08:53 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * docs/implrepo.html:
          Quick revision and added comments with remaining issues.

Wed Jul  8 19:01:02 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * docs/implrepo.html: Another big revision of the paper.

Wed Jul  8 17:13:00 1998  Jeff Parsons  <jp4@cs.wustl.edu>

        * TAO/tests/Cubit/TAO/DII_Cubit/client.cpp,
          TAO/tests/Cubit/TAO/DII_Cubit/client.h,
          TAO/tests/Cubit/TAO/DII_Cubit/DII_Cubit.dsw,
          TAO/tests/Cubit/TAO/DII_Cubit/DII_Cubit_Test.cpp,
          TAO/tests/Cubit/TAO/DII_Cubit/DII_Cubit_Test.dsp,
          TAO/tests/Cubit/TAO/DII_Cubit/README,
          TAO/tests/Cubit/TAO/DII_Cubit/Makefile:
          Combined client.h and client.cpp into one file,
          initialized the return variables in all the Cubit
          operations (to get rid of some UMRs in Purify),
          removed the one-button test file DII_Cubit_Test.cpp
          and the corresponding project file in VC (the perl
          script does the same thing and more safely), updated
          the DII_Cubit.dsw, Makefile and README files.

Tue Jul  8 14:00:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * orbsvcs/orbsvcs/orbsvcs.dsp: When changing the RtecEventComm.id
          file or the RtecScheduler.idl file, it is needed to
          recompile the RtecEventChannelAdmin.idl file. This is a common
          problem. So the programmer has to take care that the
          dependencies in the Makefile or VC++ project file
          are set properly.

        * orbsvcs/tests/Simulator/Event_Supplier/DOVE_Supplier.cpp,
          orbsvcs/tests/Simulator/DOVEBrowser/PushConsumer.java,
          orbsvcs/tests/Simulator/DOVEBrowser/PushConsumer.java.JDK1.2,
          orbsvcs/tests/Simulator/README:
          Simplified the event data.

Tue Jul  7 22:11:17 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trader.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_T.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.{h,cpp}:
          Fixed DEC cxx errors, addressed a memory leak.

Tue Jul  7 20:48:37 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Connect.{h,cpp}:  Revert my previous changes.

Tue Jul  7 19:47:15 198   Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tao/Request.cpp: Slight modification (Andy's
          suggestion) to send_oneway (), getting rid of an
          error message when shutting down the Cubit server
          via DII.

Tue Jul  7 19:25:55 1998  Jeff Parsons <jp4@cs.wustl.edu>

        * tests/Cubit/TAO/DII_Cubit/DII_Cubit_Test.cpp:
          New file that implements a "one-button" DII Cubit test.
        * DII_Cubit/Makefile: Added a build for dii_cubit_test.exe.
        * DII_Cubit/DII_Cubit_Test.dsp: New project in the workspace.
        * DII_Cubit/DII_Cubit.dsw: Updated workspace (new project).

Tue Jul  7 08:21:41 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * TAO_IDL/Makefile:
        * orbsvcs/Dump_Schedule/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/LifeCycle_Service/Makefile:
        * orbsvcs/Naming_Service/Makefile:
        * orbsvcs/Scheduling_Service/Makefile:
        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/tests/Concurrency/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/Event_Latency/Makefile:
        * orbsvcs/tests/Logger/Makefile:
        * orbsvcs/tests/Simple_Naming/Makefile:
        * tao/Makefile:
        * tests/CDR/Makefile:
        * tests/Cubit/TAO/IDL_Cubit/Makefile:
        * tests/Cubit/TAO/MT_Cubit/Makefile:
        * tests/OctetSeq/Makefile:
        * tests/POA/Default_Servant/Makefile:
        * tests/POA/Explicit_Activation/Makefile:
        * tests/POA/FindPOA/Makefile:
        * tests/POA/Generic_Servant/Makefile:
        * tests/POA/NewPOA/Makefile:
        * tests/POA/On_Demand_Activation/Makefile:
        * tests/POA/RootPOA/Makefile:
        * tests/Param_Test/Makefile:
        * tests/Quoter/Makefile:
        * tests/Thruput/TAO/Makefile:
        * tests/NestedUpcall/Reactor/Makefile:
        * tests/NestedUpcall/Triangle_Test/Makefile:
          Updated dependencies.

Tue Jul 07 07:36:36 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/compat/objbase.h: use #if 0 instead of // to comment out a
          multiline #define, to avoid warning about a multiline comment.

        * tests/Param_Test/results.{h,cpp}: added trailing $ to Id string.

Mon Jul  6 19:33:54 1998  Jeff Parsons  <jp4@cs.wustl,edu>

        * TAO/tests/Cubit/TAO/DII_Cubit/client.cpp:
          Made the shutdown request DII instead of SII. Everything
          works on NT except for the shutdown option. Unix is OK.
          Also, changed the parse_args call to come after initializing
          the orb, so other orb-specific args can be used and not
          confuse parse_args.

Mon Jul  6 19:17:00 1998  Michael Kircher <mk1@cs.wustl.edu>

        * docs/Options.html: Added documentation about the
          -ORBiiopprofilelock switch.

Mon Jul  6 17:00:00 1998  Jeff Parsons   <jp4@cs.wustl.edu>

        * TAO/tests/Cubit/TAO/DII_Cubit/client.{h,cpp}:
          Added a DII request on the naming service to get the
          Cubit factory IOR, plus code to implement all the
          command line options. Built with SunCC, it works on Unix,
          but not yet on NT.

Mon Jul  6 15:46:35 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/decode.cpp:
          Strings contain a nested CDR with the bounds for it, the
          demarshalling code in that case was invoking the TypeCode
          constructor with the wrong parameters, hence the bounds were
          invalid.  The problem only shows up now because we were ignoring
          the bounds in previous releases.

Mon Jul  6 15:24:21 1998  Matthew J Braun  <mjb2@cec.wustl.edu>

        * tests/Logger/client.h
        * tests/Logger/client.cpp
        * orbsvcs/orbsvcs/Log/Logger_i.h
        * orbsvcs/orbsvcs/Log/Logger_i.cpp
        * orbsvcs/orbsvcs/Logger.idl

          Routine checkin. Ignore the man behind that curtain....
          Fully working version complete, but not yet Purified.

Mon Jul 06 15:13:11 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/compat/initguid.h: Reordered some stuff.

        * tao/corba.h: Don't include in "compat/initguid.h" anymore.

Mon Jul  6 15:10:30 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/Naming_Service/Makefile:
          Updated dependencies.

        * orbsvcs/tests/EC_Throughput/ECT_Data.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
          The CDR size was wrong, this resulted in all kind of strange
          errors n the client side. This is another reminder that an octet
          sequence only uses a single Message_Block, not a chain of them.

Mon Jul 06 14:58:14 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/IIOP_Object.{h,cpp}:
        * tao/Object.{h,i,cpp}:
        * tao/Server_Request.{h,cpp}:
        * tao/compat/objbase.h: Renamed REFIID to TAO_REFIID and
          DEFINE_GUID to TAO_DEFINE_GUID to avoid conflict with MSVC's
          COM.  We don't support COM at this moment.

        * tao/compat/objbase.h: Disable the definition of TAO_VARENUM.  It
          is not used currently.  Thanks to Maximilian Hoferer
          <mhoferer@krones.de> for noticing this.

Mon Jul 06 09:07:36 1998  Steve Huston  <shuston@riverace.com>

        * tao/ORB_Core.{i cpp}: Removed redundant preprocessing token
          concatentations - HP-UX aCC warned about them.

        * tao/Connect.h: Added #include "tao/corba.h" so the defs are visible
          at template instantiation on AIX xlC.

Mon Jul  6 04:45:02 1998  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Connect.h (TAO_Client_Connect_Handler): Added a new data
          member <reactive_> to trace whether this client connection is
          running reactively or in a separate thread (other than the main
          thread.)

        * tao/Connect.cpp (open,close,send_request): Check to see if the
          client is going to run in a separate thread (by comparing its
          thread id with that of reactor's.)  If so, the handler won't try
          to register itself with the reactor and simply block on the
          socket IO calls.  This change enables the NestedUpcall/Reactor
          example to use the thread-per-connection strategy.

Sun Jul  5 21:22:42 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * tao/orbconf.h: Undid the change I made on July 3.  Although it
          fixed the one problem I was looking at, it broke everything
          else.  Oops.

        * TAO_IDL/be/be_codegen.cpp: Changed the TAO_EXPORT_MACRO
          definition to override any that came before.  Without this the
          ordering of includes (putting corba.h before an orbsvc, such as
          CosNamingC.h) would break in certain configurations.  Also moved
          it after the includes so it shouldn't affect included files.

Sat Jul  4 01:18:21 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.cpp:
        * orbsvcs/orbsvcs/Trader/Constraint_Visitor.cpp:
        * orbsvcs/orbsvcs/Trader/Constraint_l.cpp:
        * orbsvcs/orbsvcs/Trader/Offer_Interpreters.cpp:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp:
        * orbsvcs/orbsvcs/Trader/Trader.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.cpp:
          Addressed warnings/errors on IRIX.

Fri Jul 03 21:51:44 1998  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp (parse_args):
          reset n_suppliers_ to 1, if <= 0, before the ACE_ERROR_RETURN
          instead of after.  (supplier_task): cast event_count_ to
          CORBA::ULong to avoid signed/unsigned comparison.

        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp (push_consumer):
          commented out unused local "ID".

Fri Jul  3 19:54:03 1998  Darrell Brunsch <brunsch@cs.wustl.edu>

        * tao/orbconf.h: Changed the TAO_NAMESPACE_STORAGE_CLASS macros to
          work better with namespaces on MSVC.

Fri Jul  3 18:40:46 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.{h,cpp}:
          Debugged and tested directed queries.

        * orbsvcs/tests/Trading/Offer_Importer.{h,cpp}:
        * orbsvcs/tests/Trading/import_test.cpp:
          Added code to test directed queries.

Fri Jul 03 17:30:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * orbsvcs/tests/Simulator/README: Added more documentation.

        * orbsvcs/tests/Simulator/DOVEBrowser/PushConsumer.java: Register
          now only for notification events.

        * orbsvcs/tests/Simulator/DOVEMIB/AnyAnalyser.{h,cpp}: support time stamps.

        * orbsvcs/tests/Simulator/DOVEMIB/DOVEMIB.{h,cpp}: support time stamps.

        * orbsvcs/tests/Simulator/DOVEMIB/PrintVisitor.{h,cpp}: support time stamps

        * orbsvcs/tests/Simulator/Event_Supplier/Event_Sup.{h, cpp}: moved
          a lot of connection management into the new DOVE Supplier.

        * orbsvcs/tests/Simulator/Event_Supplier/Event_Sup.dsp: Added the DOVE
          Suplier files.

        * orbsvcs/tests/Simulator/Event_Supplier/DOVE_Supplier.{h,cpp}: All
          the connection management with the event service is done here.
          A standardized interface is now supported, thanks to
          Kevin Stanley <kstanley1@mdc.com>.

Fri Jul 03 16:38:12 1998  Steve Huston  <shuston@riverace.com>

        * tao/Sequence.h (TAO_Unbounded_Sequence<CORBA::Octet>) Removed the
          template type specification from constructor names so that this
          compiles on AIX xlC as well as Sun C++ and HPUX aCC.

Fri Jul 03 13:58:08 1998  David L. Levine  <levine@cs.wustl.edu>

        * TAO version 0.1.37 released.

Fri Jul  3 13:05:01 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/tests/EC_Throughput/ECT_Data.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
          Fixed template instantiations.

Fri Jul 03 11:36:04 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Param_Test/Makefile,
          tests/Cubit/TAO/IDL_Cubit/Makefile: disabled perfect
          hashing until we can stabilize its use.

Fri Jul 03 11:34:38 1998  Carlos O'Ryan  <coryan@JIG>

        * orbsvcs/tests/EC_Throughput/Makefile:
          Added new object files to the Makefile.

        * orbsvcs/orbsvcs/Event/EC_Gateway.cpp:
          Protected against null publication or subscription list.

        * orbsvcs/orbsvcs/Event/Event_Channel.cpp:
          Removed a possible race condition in consumer
          disconnections. Thanks to Thomas Venturella <tventurell@mdc.com>
          for the last two fixes.

Fri Jul 03 08:40:28 1998  Steve Huston  <shuston@riverace.com>

        * tao/corba.h: Reordered some includes to get it to compile clean on
          HP-UX aCC.

Fri Jul 03 02:03:23 1998  Carlos O'Ryan  <coryan@JIG>

        * orbsvcs/tests/EC_Throughput/ECT_Data.h:
        * orbsvcs/tests/EC_Throughput/ECT_Data.cpp:
        * orbsvcs/tests/EC_Throughput/data.idl:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
          Added an example on how to send C++ data across the wire.

        * orbsvcs/orbsvcs.dsw:
        * orbsvcs/tests/EC_Throughput/EC_Throughput.dsw:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.dsp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.dsp:
          Added MSVC++ project files for the new test.

        * tao/CDR.h:
          Fixed typo in a extraction operator for InputCDR and strings, it
          was declared as operator>>.

Fri Jul  3 00:39:03 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.{h,cpp}:
          Added code to sort by preference the merged result sequence of a
          federated query.

Thu Jul  2 19:41:46 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        * tests/Param_Test/Makefile:
        * tests/Cubit/TAO/IDL_Cubit/Makefile: Added TAO_IDLFLAGS -P to enable
          Perfect-hashed-operation-lookup strategy for the idl compiler.

Thu Jul  2 19:22:24 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/tests/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/EC_Throughput/svc.conf:
        * orbsvcs/tests/EC_Throughput/data.idl:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.h:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.h:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
          This test shows how to use the EC for custom marshalling, later
          it will be adapted to measure throughput in the EC.

        * orbsvcs/orbsvcs/RtecEventComm.idl:
          Added some padding so the payload (an encapsulated CDR) is
          always properly aligned.

        * orbsvcs/tests/EC_Throughput/README:
        * docs/releasenotes/ec.html:
          Included some info about this new test.

Thu Jul  2 14:28:01 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

        * TAO_IDL/be/be_array.cpp: We were generating incorrect code for
        the out () and _retn () methods of the Array_var class.

        * TAO_IDL/be_include/be.h: Missing #include for Process.h added.

        * TAO_IDL/Makefile: Ran make depend

        * tests/Param_Test/README: Added description for the array tests.

Thu Jul  2 12:36:28 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trader[_T].{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.{h,cpp}:
          For the 'in' operator in the standard OMG constraint language, the
          Constraint Interpreter needs to identify and extract from Anys
          sequences of primitive types, regardless of how many times the
          sequence has been typedef'd. Added code to do this.

        * orbsvcs/tests/Trading/TTest.idl:
        * orbsvcs/tests/Trading/TT_Info.cpp:
        * orbsvcs/tests/Trading/Service_Type_Exporter.cpp:
        * orbsvcs/tests/Trading/Offer_Exporter.cpp:
          Now sends aliased sequences to the Trader to test the above
          enhancement.

Thu Jul  2 12:29:10 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        The Next round of changes for GPERF + TAO_IDL integration. NT
        related stuff have been taken care of. attributes also should work
        now.
        * TAO_IDL/driver/drv_args.cpp:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_helper.cpp:
        * TAO_IDL/be/be_codegen.cpp:

Thu Jul 02 09:17:57 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/CDR/growth.cpp (main),
          tests/OctetSeq/OctetSeq.cpp (run): replaced
          ACE_hrtime_t-to-ACE_INT32 static casts with ACE_U64_TO_U32
          for compatibility with ACE_U_LongLong.

        * tests/NestedUpcall/Triangle_Test/Object_A_Impl.cpp: added
          newline at end of file.

        * tests/POA/On_Demand_Activation/Servant_Locator.cpp (postinvoke):
          added ACE_UNUSED_ARG (my_servant) to avoid compile warning about
          unused variable with ACE_NDEBUG.

        * tests/Cubit/TAO/MT_Cubit/Task_Client (run_tests): use
          ACE_OS::fprintf instead of fprintf, and fixed the format
          specifier to match the argument type.

        * Makefile (release): use $(MAKE) instead of make for
          recursive make.

Thu Jul 02 01:50:58 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/POA: Renamed TAO_POA_Locking to Synchronization.  Also
          renamed the related enums to not use the USE_ prefix.

Wed Jul  1 22:42:13 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/CosTrading.idl:
          Merged Sequences.idl into CosTrading.idl.

        * orbsvcs/orbsvcs/Trader/Trader.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_T.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.{h,cpp}:
          Addressed DEC cxx warnings/errors. Hopefully solved some, probbaly
          introduced more.

Wed Jul 01 21:14:11 1998  David L. Levine  <levine@cs.wustl.edu>

        * tests/Param_Test/any.cpp: commented out unused static
          any_table.

        * tests/Param_Test/fixed_array.cpp (check_validity): commented
          out unused local ret.

        * tests/Param_Test/{bd,ub}_str_seq.cpp (init_parameters):
          commented out unused local gen.

Wed Jul  1 19:20:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * orbsvcs/LifeCycle_Service/Makefile: I hopefully
          fixed the complains of the DEC cxx compiler.

Wed Jul  1 15:50:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/ORB.cpp: Fixed a memory leak in the initial
          references code. The pointers (name_service_ and trading_service_)
          were not properly reused and not properly released.

        * tao/Operation_Table.h: Fixed a spelling problem with
          TAO_operation_db_entry.

Wed Jul  1 13:59:30 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * orbsvcs/LifeCycle_Service/Makefile: Removed STL flags.

        * tao/TAO.{h,cpp}: Passing in argc to the TAO_ORB_Manager by
          reference, since ORB_init takes argc by reference.

        * orbsvcs/Trading_Service/Trading_Service.{h,cpp}:
        * orbsvcs/Trading_Service/Makefile:
          Made Trading Service app resemble other orbsvcs apps. Accepts -TS*
          command line arguments. Has the ability to form a complete graph
          federation with other traders on the same multicast network.

        * orbsvcs/tests/Trading/Offer_Exporter.{h,cpp}:
        * orbsvcs/tests/Trading/Offer_Importer.{h,cpp}:
        * orbsvcs/tests/Trading/Service_Type_Exporter.{h,cpp}:
        * orbsvcs/tests/Trading/export_test.cpp:
        * orbsvcs/tests/Trading/Makfile:
          export_test will now export service types and offers to all
          traders linked to the multicast-enabled trader, so import_test
          will test federated queries.

        * orbsvcs/orbsvcs/IOR_Multicast.{h,cpp}: Added an init method for
          initialization outside the constructor.

        * orbsvcs/orbsvcs/Makefile: Changed macro name from
          TAO_HAS_DYNAMIC_PROPERTY_BUG to TAO_HAS_OBJECT_IN_STRUCT_MARSHAL_BUG.

        * orbsvcs/orbsvcs/Trader/*.*:
          o  Hopefully fixed DEC cxx errors/warnings.
          o  Added command-line configuration of trader policies, interfaces,
             and multithreading support.
          o  Debugged link interface and federated queries.
          o  Added explicit template specialization.

Wed Jul  1 1:55:23 1998 Jeff Parsons <jp4@cs.wustl.edu>

        * TAO/tests/Cubit/TAO/DII_Cubit/Makefile: It works, at least with
          SunCC. It builds the DII client and also the IDL server if
          necessary (since we run it before running client.exe) -thanks
          to David Levine for that.
        * TAO/tests/Cubit/TAO/DII_Cubit/client.h, cpp: Now builds and
          executes on Unix and NT. Also added some macros for the
          environment checking inside the operations.

Wed Jul  1 10:28:07 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        * TAO_IDL/be_include/be_interface.h (be_type): Fixed the warnings
          in g++.

Wed Jul  1 06:36:11 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp: For the copying
          version of the <<= operator, we were not doing a copy. Thanks to
          Seth Widoff for pointing this out.

Tue Jun 30 22:08:38 1998  David L. Levine  <levine@cs.wustl.edu>

        * TAO_IDL/be/be_codegen.cpp (lookup_strategy): added full
          qualification of TAO_CodeGen::LOOKUP_STRATEGY return type.

Tue Jun 30 18:27:49 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Sequence_T.i:
          Another ACE_CAST_CONST problem, thanks to Seth Widoff
          (sbw1@cs.wustl.edu) for catching this one.

Tue Jun 30 18:21:04 1998  Seth Benjamin Widoff  <sbw1@waltz.cs.wustl.edu>

        * tests/Quoter/Makefile:
          Removed STL includes --- no longer needed for Trading Service.

Tue Jun 30 16:50:12 1998  Alexander Babu Arulanthu  <alex@cs.wustl.edu>

        First round of changes for GPERF + TAO_IDL integration. Execute
        tao_idl with -P option to enable PERFECT_HASH operation lookup
        strategy.

        IDL-Attributes are not supported yet.

        * TAO_IDL/driver/drv_args.cpp: Added option -P to enable
          PERFECT_HASH operation lookup strategy.

        * TAO_IDL/be_include/be_interface.h: Added methods to generate
          perfect hashing operation lookup table in the server skeleton
          code.

        * TAO_IDL/be_include/be_helper.h (class TAO_OutStream): Added a
          new stream type GPERF_INPUT to indicate the outstream is for
          gperf's input file.

        * TAO_IDL/be_include/be_codegen.h (class TAO_CodeGen):  Added <enum
          LOOKUP_STRATEGY {...}> to indicate various lookup
          strategies. Added the member and access methods that keeps track
          of the TAO_OutStream that corresponds to the gperf's input file.

        * TAO_IDL/be_include/be.h: Included "ace/Process.h".

        * TAO_IDL/be/be_interface.cpp:

        * TAO_IDL/be/be_helper.cpp:

        * TAO_IDL/be/be_codegen.cpp:

        * tao/Operation_Table.h (TAO_Perfect_Hash_OpTable):
        * tao/Operation_Table.cpp :
          Defined the class TAO_Perfect_Hash_OpTable, the factory
          class for Perfect_Hashing-Operation_Lookup strategy.

Tue Jun 30 13:23:59 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/orbsvcs/Scheduler_Factory.cpp:
          Workaround Sun/CC problem when compiling with -O (but not
          -fast). Apparently it does not like to use static (file) scope
          symbols in the definition of a template.

Tue Jun 30 10:40:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * docs/configurations.html: Added documentation about the
          -ORBiiopprofilelock switch.

        * tao/Client_Strategy_Factory.{h,cpp}: Added the create_iiop_profile_lock (void)

        * tao/GIOP.cpp: Use ACE_Lock instead of ACE_SYNCH_MUTEX.

        * tao/IIOP_Object.cpp: Added the initialization of the fwd_profile_lock_ptr to
          the constructor.

        * tao/IIOP_Object.h: Changed the forward profile lock to a pointer to a lock.

        * tao/IIOP_Object.i: Added the initialization of the fwd_profile_lock_ptr to
          the constructor.

        * tao/default_client.{h,cpp}: Added the parsing of "-ORBportiiopproflielock" to
          the parse_args method. "thread" (default) means to use a mutex lock
          on the access of the forwarding iiop profile. "null" means, use a null
          mutex, which is faster, but does not provide any protection.
          Added also the function create_iiop_profile_lock () to allow
          others to create a new lock, depending on the above mentioned switch.

Tue Jun 30 00:58:57 1998  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

        * TAO version 0.1.36 released.

Mon Jun 29 14:43:17 1998  David L. Levine  <levine@cs.wustl.edu>

        * TAO_IDL/be/be_array.cpp (gen_forany_defn): changed
          declaration of friend CORBA::Any to friend class CORBA_Any,
          to keep DEC cxx from complaining.  Also, commented out
          the declaration, because it doesn't appear to be necessary.

        * tests/OctetSeq/OctetSeq.cpp (main): cast sizeof to int
          to avoid egcs warning about signed/unsigned comparison.

Mon Jun 29 11:05:03 1998  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/encode.cpp:
          Removed unused variable.

Mon Jun 29 11:00:26 1998  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:

          After the call to do_static_call, we were not checking if some
          exception was raised. This was causing major problems if there was
          any post do_static_call processing such as narrowing to be
          done. Thanks to Seth Widoff for reporting the problem.

Sun Jun 28 21:33:48 1998  David L. Levine  <levine@cs.wustl.edu>

        * tao/GIOP.cpp: replaced ACE_SYNCH_RW_MUTEX with
          ACE_SYNCH_MUTEX so that it will compile with g++
          (and be correct :-).

        * tests/OctetSeq/OctetSeq.cpp (main): changed loop index
          i from u_int to int to avoid signed/unsigned comparison.

Sun Jun 28 16:10:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tests/NestedUpcalls/Triangle_Test/Makefile: Added
          this Makefile for use on Unix machines.

Sun Jun 28 15:30:00 1998  Michael Kircher  <mk1@cs.wustl.edu>

        * tao/GIOP.cpp: In method location_forwarding, removed
          the explicit release of the IIOP_Object. It is implicitly
          released by the release of the CORBA::OBject pointer.

        * tests/Quoter/Generic_Factory_Impl.{h,cpp}: Splitted
          the create_object method into two parts.

Sat Jun 27 18:13:05 1998  Irfan Pyarali  <irfan@cs.wustl.edu>

        * TAO/tests/POA/Explicit_Activation/server.cpp (main): Changed
          #include "ace/Timeprobes.h" to #include "tao/Timeprobes.h".
