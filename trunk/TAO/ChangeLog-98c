Fri Oct 17 15:43:04 1997    <nw1@CHA-CHA>

	* tao/connect.h: Added template instantiation supression directive
 	  for Win32.  VC was complaining about duplicate symbols definition.

Fri Oct 17 06:25:23 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/{boa,roa}.*: Merged class ROA into class
 	CORBA_BOA. Hopefully everything still works ;-)

	* docs/releasenotes.html: Quick update for new TODO list.  Will be
 	updated within the next day or so with dates, too.

	* tao/{server_factory,orbobj,Orb_Core}.cpp: Corrected incorrect
 	explicit template instantiations and added missing ones.

Thu Oct 16 23:48:04 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.12, released Thu Oct 16 23:48:04 1997.

Thu Oct 16 11:15:00 1997  Brian R. Mendel <brian.r.mendel@boeing.com>

        * tao/server_factory.cpp: Added instantiation pragma for VxWorks for
          ACE_Acceptor.  Added the template to the specialization section, also.
        
        * tao/orbobj.cpp: Added instantiation pragma for VxWorks for
          ACE_Cached_Connect_Strategy and ACE_Hash_Map_Manager for 
          ACE_Null_Mutex instantiations.  Also, added these to the template
          specialization sections.

        * tests/Cubit/Build/default.bld: Added TAO_PLATFORM_SVC_CONF_FILE_NOTSUP
          to defines section of GHS build file.

Tue Oct 14 21:11:20 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* tao/xdr.h: Changed int _fd to ACE_HANDLE _fd to work on NT.
  	  Thanks to Satheesh Kumar <satheesh@aspectdv.com> for reporting
 	  this.

Tue Oct 14 02:48:21 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.11, released Tue Oct 14 02:48:21 1997.

Mon Oct 13 23:30:16 1997    <irfan@TWOSTEP>

	* tao/connect.h: If we are using TSS, there is no reason to use
 	  locking in the connector. Therefore, I added a new typedef that
 	  defines the type of lock that should be used for the
 	  cached_connect_strategy.  It is ACE_SYNCH_RW_MUTEX in the
 	  non-TSS case, and ACE_SYNCH_NULL_MUTEX in the TSS case.

Mon Oct 13 21:34:00 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* tao/svrrqst.cpp (oa): Cleaned up the coding style a bit.

Sun Oct 12 15:38:35 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* tao/client_factory: Gutted the client factory code related to
 	  the Strategy_Connector so that it's either in the TAO_Orb_Core.

	* tao/default_client.h: Removed the connector() from the
 	  Default_Client_Factory entirely since it's all been put into the
 	  TAO_ORB_Core now.

	* tao/giop.cpp (start): Hacked up the code so that we extract our
 	  connector from thread-specific storage if we're using the
 	  thread-per-rate concurrency model.  This needs to be integrated
 	  more cleverly in the ORB.

	* tao/orbobj.h: Put an instance of the TAO_CONNECTOR into each
 	  TAO_ORB_Core object so that we don't have to share these things
 	  among all of the threads in a process, but instead can have them
 	  be located in thread-specific storage.

	* tao/orbobj.cpp (perform_work): Updated the run() and
 	  perform_work() methods to take optional ACE_Time_Value *'s (so
 	  they can return from timeouts) and to return error flags if
 	  things go wrong.

	* tao/orbobj.h (CORBA_ORB): Changed the set_up_for_listening()
 	  call to open(), which is more consistent with other usage in
 	  ACE/TAO.

	* tao/orbobj: Changed the name client_acceptor_ to peer_acceptor_
 	  to reflect the fact that the connection model is more generic
 	  than the notion of client/server interactions (which really take
 	  place as the result of particular communication roles).

	* tao/corba.h: Moved the order of #includes around so that
	  "connect.h" is included before "client_factory.h"

	* tao/connect.h: Moved the typedef of the ACE_Strategy_Connector<>
 	  from the TAO_Client_Strategy_Factory into the global space and
 	  renamed it TAO_CONNECTOR file so that it will be equivalent with
 	  the TAO_ACCEPTOR.

Thu Oct  9 23:17:37 1997  Douglas C. Schmidt  <schmidt@merengue.cs.wustl.edu>

	* tao/giop.cpp (invoke): If an error occurs, make sure to mark the
 	  handler_ as no longer being in use before we set it to 0.

	* tao/giop.cpp (TAO_GIOP_Invocation): We need to make sure that
 	  handler_ isn't 0 before we mark it as no longer being in use.

Thu Oct  9 11:33:46 1997  Carlos O'Ryan  <coryan@macarena.cs.wustl.edu>

	* tao/giop.cpp: 
	  There was a minor sintax error.

Tue Oct 07 09:34:35 1997    <brian.r.mendel@boeing.com>

        * tao/Orb_Core.h{cpp}: Added ACE_Svc_Export label to global
        TAO_ORB_Core_instance() method.  Needed for DLL support on NT.i

        * default.bld, tao.bld: Modified VxWorks build files to add new files.

Tue Oct 07 07:05:38 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.10, released Tue Oct 07 07:05:38 1997.

Mon Oct 06 22:11:40 1997    <nw1@CHA-CHA>

	* tests/Cubit/TAO/cubit_i.cpp (Cubit_please_exit): 
	* tests/Cubit/TAO/cubitS.cpp (_skel_Cubit): Changed to use the new
	  TAO_ORB_CORE_instance () global function.

Mon Oct  6 20:06:05 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/{boa.h,connect.cpp,giop.cpp,giop.h,roa.cpp,roa.h}:
 	Eliminated unused methods and code.

	* tao/Orb_Core.*: Created new global function called
 	TAO_ORB_Core_instance() which will return the correct instance of
 	the ORB Core state.  This had previously been accessed using
 	TAO_ORB_CORE::instance(), but Win32s linking procedures made the
 	template for TAO_ORB_CORE expand in both the application and the
 	library/DLL, thus creating two singletons.  Bad scene.  The
 	function should force the expansion of the template to only be in
 	the DLL.

	* tao/{connect,default_client,default_server,orbobj,roa}.cpp:
 	Changed references to TAO_ORB_CORE::instance() to
 	TAO_ORB_Core_instance().

	* tao/singletons.h: Removed definition of TAO_ORB_CORE.

Sat Oct  4 20:08:57 1997  Nanbor Wang  <nw1@cumbia.cs.wustl.edu>

	* tao/TAO.{dsp,dsw}: Added tao_internals.cpp into project file
	  list. 

	* tao/tao_internals.h (TAO_Internal): Added ACE_Svc_Export and
	  $ I d $.

	* tao/tao_internals.i (open_services): Added default return value
	  0. 

	* tao/tao_internals.cpp: Added #include "tao/tao_internals.h" and
	  the CVS $ I d $ field.  Also, we should include inline (.i) file
	  for inline code.

Fri Oct  3 09:29:05 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* tests/multiCubit/svr.cpp: Changed the key naming scheme back to
 	not be unique throughout the process.  Process-unique code is
 	still there, but conditionally compiled mutually-exclusive to the
 	other scheme.

	* tao/server_factory.*: The object_lookup_strategy method is gone
 	and is replaced by the create_object_table factor method.  See
 	more information below.

	* tao/default_server.*: The server factory no longer holds on to a
 	single pointer for the object lookup strategy.  In previous
 	incarnations of TAO, this didn't cause problems, but the advent of
 	ORB-per-thread highlighted the inherent badness in this
 	implementation choice.  Gone is the object_lookup_strategy method,
 	and in comes the create_object_table factory method, which creates
 	and returns (and doesn't hold onto) an object table in accordance
 	with parameters such as size and search algorithm.

	* tao/roa.cpp: Changed to use the create_object_table method.

Thu Oct  2 13:48:31 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* tests/multiCubit/svr.cpp: Modified the key generation scheme to
 	include thread ID.  This works around a current shortcoming in the
 	ORB Core in which the object table is shared throughout all object
 	adapters (yes, this is being fixed).

	* tao/tao_internals.*: Added new class to scope static operations
 	and data completely internal to the ORB.

	* tao/orbobj.{i,cpp}: Moved CORBA_ORB DTOR into cpp file.  Finally
 	got rid of icky static mutex in ORB_init().  Moved service config
 	initialization into TAO_Internal method.

	* tao/Orb_Core.h: Added comments.

Wed Oct  1 12:51:48 1997  Nanbor Wang  <nw1@cumbia.cs.wustl.edu>

	* tao/corbacom.h: Removed CORBA:: name resolution from the class
	  String_out which is itself defined in class CORBA.  MSVC doesn't
	  like that.

Wed Oct  1 10:44:55 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* tao/varout.h: Fixed some template errors in class
	TAO_Object_out. This was pointed to me by Carlos as he was
	compiling TAO in SGI. 

Wed Oct  1 09:10:38 1997  Carlos O'Ryan  <coryan@macarena.cs.wustl.edu>

	* docs/releasenotes.html: 
	  Updated information on the Event Channel, the use of the Naming
	  Service is no longer a plan, it is done already.

Tue Sep 30 20:14:29 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.9, released Tue Sep 30 20:14:29 1997.

Tue Sep 30 19:42:09 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

        * Makefile: Removed "docs" from DIRS so we don't try to run
	make in this directory.

Tue Sep 30 17:27:00 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* <RELEASE>: Tagged a release for limited consumption until the
 	Service Configurator bug is fixed.
	
	* tests/multiCubit/svr.cpp: Added code to properly release CORBA
 	objects.  Delays between task activations simply aid in debugging
 	and are not necessary.

	* tao/singletons.h: Made TAO_ORB_Core's singleton type
 	compile-time selectable via the TAO_HAS_TSS_ORBCORE compiler flag.

	* tao/orbobj.cpp: Corrected an incorrect shift count, and the ORB
 	Core now defaults to using the host name of the local host.

	* tao/Orb_Core.[hi]: Added explicit CTOR.

	* tao/Orb_Core.cpp: Insured that the correct template type was
 	instantiated.

	* tao/Makefile: Added -DTAO_HAS_TSS_ORBCORE to CPPFLAGS.

Tue Sep 30 16:43:12 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* docs/releasenotes.html: Added some notes on the ORB Core.

Mon Sep 29 14:39:51 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* docs/{index,components,releasenotes}.html: Added additional
 	documentation.

Mon Sep 29 13:50:34 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* TAO ORB changes:

	any.*: Added _var and _out classes.
	
	corbacom.{h,i} : Added _out types for primitive types, added _out and
	updated _var classes for String. Added corbacom.i for implementing
	the String's _var and _out classes

	sequence.{h,i}: Added a number of templates for _var and _out
	classes. However, these are yet to be used and tested.

	* Alpha release of TAO IDL compiler added to this release. This is
	an alpha release and we are currently putting it to rigorous
	test. A large amount of code for the back end is added under the 
	TAO/TAO_IDL/be_include and TAO/TAO_IDL/be/ directories.

	In addition, some amount of ACEification done to methods belonging
	to the TAO/TAO_IDL/utils/ classes.

	A few errors in the IDL grammar have been fixed in
	fe/idl.yy. These had to do with the valid types for parameters and
	operation return types. There are still some errors recognizing
	unions which will be fixed later. The scanner (fe/idl.l) was
	modified to recognize the OMG IDL data type "any".

	* The ChangeLog file under TAO/TAO_IDL is removed and its contents
	are inserted appropriately in this ChangeLog file

Sun Sep 28 17:01:27 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tests/multiCubit: Added a multi-threaded version of Cubit.

	* tao/orbobj.cpp: At long last, Andy has his wish for not having
 	to provide a "-ORBhost <me>" argument to a server.  It now uses
 	ACE_OS::hostname() to determine the canonical hostname, and
 	listens on that address.

	* tao/singletons.h: Changed the ORB Core singleton to be a TSS
 	singleton; this will eventually be conditionally compiled in
 	(before release).  Also added comments and "safety defines".

	* tao/except.cpp: Changed some usage of fputs() in
 	print_exception() to use ACE_DEBUG.

Sun Sep 28 03:18:24 1997  Nanbor Wang  <nw1@cumbia.cs.wustl.edu>

	* tests/Cubit/TAO/cubitC.h (Object): Changed references of base
	  class from "CORBA::Object" to "CORBA_Object."  MSVC doesn't
	  allow this.

	* tao/Orb_Core.h: Added ACE_Svc_Export to TAO_Orb_Core class.

	* tao/corbacom.h: Added ACE_Svc_Export to all IID constants.
	  Notice that we must put ACE_Svc_Export _after_ extern "C".

Sat Sep 27 09:31:42 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/Orb_Core.h: Fixed the friend declaration for
 	CORBA::ORB_init().

	* tests/Cubit/TAO/svr.cpp: Modified to use ORB::run() for event
 	loop and eliminated code cruft.

	* tao/orbobj.*: Added stubs for 4 methods on the ORB from the
 	POA spec: work_pending, perform_work, run, and shutdown.  Of all
 	of these, only run is reasonably implemented, and there not even
 	according to the spec (because the way the spec works isn't really
 	good for our purposes...need to work on that).  See the docs for
 	information.

	Moved the initialization of the Acceptor into its own method,
 	set_up_for_listening (which is a one-shot style method), and
 	placed a call to this within the aforementioned run method.

	* tao/default_client.h: Miscellaneous comments added.

	* tao/connect.cpp: Corrected an errant ACE_DEBUG () call.

	* tao/Orb_Core.*: Added private methods to allow setting of the
 	orb and extended the laurel of friendship to CORBA::ORB_init().

Fri Sep 26 10:20:06 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/orbobj.*: Added acceptor initialization code to CORBA_ORB
 	CTOR.  (We still need to find a way to NOT do this on the client
 	side.)  Moved CORBA_ORB CTOR into .cpp to avoid nasty
 	interdependencies caused when it was in the .i file.  Moved the
 	specification of host and port to be ORB parameters rather than OA
 	parameters, i.e., -OAhost is now -ORBhost and -OAport is now
 	-ORBport.

	* tao/roa.*: Removed server-side connection endpoint
 	initialization (Acceptor stuff) and put it into the ORB.

	* tao/connect.h: Renamed ROA_Acceptor to TAO_Acceptor (since it's
 	not related to the OA any longer), and restored explicit inclusion
 	of ace headers to avoid having to include "corba.h".

	* tao/boa.h: Removed unneeded get_addr() method.

	* tests/Cubit/TAO/cubitS.cpp: Updates to support changes in ORB
 	Core.

Thu Sep 25 12:28:02 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/params.*: Added explicit CTOR & DTOR for
 	TAO_{OA,ORB}_Parameters classes that somehow got removed in the
 	previous round of attacks.  Also specified all methods which go
 	into the .i file as "LOCAL_INLINE" within the header.  This avoids
 	having to unravel ugly, complex order interdependencies.

Thu Sep 25 03:48:02 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* docs/Options.html: Terse documentation on options available for
 	the abstract factories.

	* tao/Orb_Core.*: Added this class (TAO_ORB_Core) to hold the
 	"state" of an ORB.  The intent is that as we move towards
 	different concurrency models, this can be thrown into
 	thread-specific storage and remain a singleton, essentially
 	allowing the running of an ORB-per-thread.

	* tao/singletons.h: Added this file to contain type definitions
 	for *ALL* ACE_Singleton<> types used within TAO.  This was
 	motivated by a desire to eliminate the multitude of warnings
 	generated by g++ regarding methods being called before declared
 	inline, and the only way to eliminate this was to insure that all
 	inlined methods were seen by the compiler before the
 	ACE_Singleton<> definition.  Thus, corba.h includes singleton.h as
 	the very last thing that it does.

	* tao/params.*: TAO_OA_Parameters is no longer a singleton, and
 	because of new recognition of associations in the object model for
 	an ORB, lots of data members and their methods have been shuffled
 	to other places or eliminated.  addr() now belongs in
 	TAO_ORB_Parameters, and root_poa_ is in TAO_ORB_Core.  The
 	using_threads_, thread_flags_, upcall_, and forwarder_ members
 	have been eliminated and their roles taken over by the Concurrency
 	Strategies and the new Dispatch call chain implemented in my last
 	round of changes.

	* tao/orbobj.cpp: Changed references to the ORB singleton to go
 	through TAO_ORB_CORE::instance().  Also eliminated an unnecessary
 	global function (_orb()).

	* tao/marshal.h: Moved all ACE_Singleton<> typedefs into
 	singleton.h.  See comment on tao/corba.h for more information.

	* tao/iioporb.h: Removed unnecessary TAO_ORB singleton.  This is
 	now assumed by TAO_ORB_Core instances.

	* tao/corbacom.h: Added CORBA::POA_ptr for upward compatibility.

	* tao/corba.h: Added Orb_Core.[hi] to the appropriate places.
  	Moved iiop{orb,obj}.i inclusions around and moved typedef'ing of
 	all ACE_Singletons into singletons.h, which must be #included
 	AFTER all the inline files.  This eliminated all of the
 	used-before-declared-inline warnings.

	* tao/{connect,default_client,default_server,roa}.*: Updated
 	singleton usages to go through the TAO_ORB_CORE singleton.

	* tests/Cubit/TAO/{cubitS,cubit_i}.cpp: Updated singleton usages
 	to go through the TAO_ORB_CORE singleton.

Wed Sep 17 12:26:56 1997  Nanbor Wang  <nw1@CHA-CHA>

	* tao/TAO.dsp: Updated source file list.

Mon Sep 15 16:52:28 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* tests/Cubit/TAO/{cubitS,cubit_i}.cpp: Updated references to oa()
 	to root_pos().

	* tao/orbobj.cpp: Corrected some adjustments made for Service
 	Configurator rework.

	* tao/giop.h: Moved the def for TAO_GIOP_EndOfFile out of the
 	range of valid GIOP messages.

	* tao/connect.cpp: Added special case for TAO_GIOP_Reply to break
 	out, and distinguished TAO_GIOP_EndOfFile from other errors by
 	setting errno.

	* tao/boa.cpp: The complete reply header is now stuck into the
 	response stream...what a novel concept!

Fri Sep 12 05:40:50 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* params.h: Renamed oa() method to be root_poa() in preparation
 	for the future.

	* orbobj.cpp: Adjusted the FAKE_SVC_ENTRY macro to catch up to
 	recent changes in ACE.

	* giop.*: Major surgery including elimination of GIOP as a giant
 	namespace (now only static methods are in it).  Changed names of
 	things to TAO_*.

	* {encode,decode,iiopobj,invoke,roa}.*: Name changes resulting
 	from giop.cpp surgery.

	* corbacom.h: Moved TAO_opaque decl into here.

	* corba.h: Re-ordered the inline #includes so that the stuff that
 	is ALWAYS inlined is included prior to the stuff that's only
 	inlined when __ACE_INLINE__ is turned on.

	* connect.*: Modified handle_input() substantially.  Added 3
 	template methods: read_message, handle_message, and send_response.

	* {cdr,marshal,object,typecode}.h: Removed the old "always include
 	inlines" hackery.

	* boa.*: Added handle_request() method.

Wed Sep 03 06:15:00 1997  Brian Mendel  <brian.r.mendel@boeing.com>

	* tao/default_client.cpp:  Added conditional sections around the code for setting the
	socket options for VxWorks.  VxWorks does not support a 64K buffer size.

Tue Sep 02 18:32:12 1997  Brian Mendel  <brian.r.mendel@boeing.com>

	* tao/orbobj.cpp:  Added include for Service_Repository.h to orbobj.h
   
	* tao/debug.cpp: Removed the TAO_NEEDS_UNUSED_VARIABLES #defines
 	around the debug_stream declaration.  debug_stream is used by
 	dmsg_filter in debug.cpp.  Changed SYSTEM_EXCEPTION to
 	CORBA::SYSTEM_EXCEPTION.

	* tao/default_client.cpp: Removed extra parameter from
 	ACE_Hash_Map_Entry #pragma instantiate statement.

	* tao/objtable.cpp: Deleted pragmas for instantiating ACE_Guard,
 	ACE_Read_Guard, and ACE_Write_Guard to eliminate duplicate
 	instantiations.  Also, removed the instantiations from
 	ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION for the same reason.

	* tao/orbobj.cpp: Added a typecast to void * in argvec_shift
 	method.

	* tao/default.bld - Modified VxWorks Build File to change template
 	instantiation modes.

	* tao/tao.bld - Added default_client.cpp, default_server.cpp,
 	client_factory.cpp, and server_factory.cpp to the VxWorks build
 	file.

	* tao/tao.dsp - Added default_client.cpp, default_server.cpp,
 	client_factory.cpp, and server_factory.cpp to the Win NT project
 	file.

Tue Sep  2 07:31:45 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/orbobj.cpp (ORB_init): VxWorks doesn't use
 	ACE_Service_Config for now; the default factories are used.  The
 	Service Repository is still used, but the appropriate values are
 	"stuffed" in manually.

Sat Aug 30 17:07:18 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* tests/Thruput: First attempt at ACEifying it and removing the
	tremendous amount of unnecessary stuff that was in there. This
	modified version still needs testing on other platforms.

Fri Aug 29 10:59:34 1997  Chris Cleeland  <cleeland@lambada.cs.wustl.edu>

	* tao/Makefile (TAO_ROOT): FINALLY corrected the default
 	definition of TAO_ROOT.

Thu Aug 28 14:04:44 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/orbobj.i (CORBA_ORB): Removed assertion that was incorrect
 	b/c our ORB object is a singleton and not dynamically allocated,
 	thus the refcount can only reach zero at the end of its life.

	* tao/typecode.cpp (TC_Private_State): Relocated the delete of
 	tc_discriminator_type_ to be after the deletion of the label list.
  	This is because the discriminator will be inside each of the
 	CORBA::Any instances within the label list, and deleting it before
 	deleting the label list results in extreme badness.

	* tao/typecode.* (operator delete): Added CORBA_TypeCode::operator
 	delete() to simplify deletion of both automatically and
 	dynamically allocated instances of CORBA_TypeCode.  This fixes the
 	problem of freeing non-heap memory.

	* tao/nvlist.h (CORBA_NamedValue): Initialized refcount_ in the
 	CTOR.

Mon Aug 18 16:39:40 1997  Carlos O'Ryan  <coryan@mambo.cs.wustl.edu>

	* Makefile for TAO compiler: 
	  $(SOEXT) must be used instead of just .so, the former does not
	  work on all platforms, notably HP-UX.

Mon Aug 18 16:39:29 1997  Carlos O'Ryan  <coryan@mambo.cs.wustl.edu>

	* tao/Makefile: 
	* tests/Demux_Test/CodeGen/Makefile: 
	  $(SOEXT) must be used instead of just .so, the former does not
	  work on all platforms, notably HP-UX.

Sun Aug 17 16:53:42 1997  Carlos O'Ryan  <coryan@swarm.cs.wustl.edu>

	* IIOP/test/Orbeline/client/Profile_Timer.h: 
	* IIOP/tests/Cubit/VisiBroker/base_server/Profile_Timer.cpp: 
	* IIOP/tests/Cubit/VisiBroker/base_server/Profile_Timer.h: 
	* IIOP/tests/Cubit/VisiBroker/client/Profile_Timer.cpp: 
	* IIOP/tests/Cubit/VisiBroker/client/Profile_Timer.h: 
	* tests/Cubit/VisiBroker/base_server/Profile_Timer.cpp: 
	* tests/Cubit/VisiBroker/base_server/Profile_Timer.h: 
	* tests/Cubit/VisiBroker/client/Profile_Timer.cpp: 
	* tests/Cubit/VisiBroker/client/Profile_Timer.h: 
	We no longer use timestruct_t in ACE, it is a SYSVism; we use
	timespec_t instead.

Sat Aug 16 01:11:56 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tests/Cubit/TAO/svc.conf: Added this as an example of an
 	application's service config configuration file.  It also serves
 	as the documentation for various strategy factory options at the
 	moment.

	* tao/orbobj.cpp: Options parsed by the ORB are now
	-ORBsvcconf <filename>    specifies the service configurator
 	                          file to be used
	-ORBdaemon                turn this into a daemon
	-ORBdebug                 turns debugging on in the service
	                          configurator

	BOA_init() now sets the itself in the TAO_OA_Parameters singleton.

	* tao/orbobj.*: Changed client_factory(), server_factory(), and
 	params() to return pointers rather than references.

	* tao/{roa,giop}.cpp: Updated code that uses the
 	CORBA::ORB::client_factory() to deal with the fact that it now
 	returns a pointer rather than a reference.

	* tao/default_server.cpp (init): This method now properly
 	initializes the contained reactive and threaded strategies so that
 	they're actually usable!

	* tao/connect.cpp: Added #endif comments.

Wed Aug 13 17:42:39 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tests/Cubit/TAO/*: Converted to the CORBA:: namespace.

	* tao/default_server.h: Eliminated a few strategy accessors since
 	they aren't provided by this implementation.

	* tao/default_server.cpp: Made this compile.

	* tao/corbacom.h: Slight reformatting of code.  More importantly,
 	added 'static' to the decl of ORB_init().

	* tao/corba.h: Added fake comment to trigger C++ mode.

	* tao/any.h: Added #endif comments.

Tue Aug 12 22:37:06 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * tao/{any,typecode,cdr}.h: Finished appeasing the compiler gods
	so that we can remove the ACE_INLINE hack.  Things now seem to be
	in order.

	* tao/corba.h: Got all the frigging header *.i files #included in
 	the right order so that the GCC compiler stops complaining.

	* tao/giop.cpp: We had method definitions that were defined inline
 	within the giop.h file.  This was causing problems for GCC, which
 	kept warning that methods in the cdi.i file were being used before
 	being inlined.  I've fixed this by creating a giop.i file.

	* tao/corba.h: Add #include files should be prefixed by "tao/".
  	I've fixed this in the release.

Tue Aug 12 16:23:17 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/any.i: Added a missing replace() method used by overloaded
 	operators.

	* tao/{any,cdr}.h: Added conditional ACE_INLINE before the decl
 	for a few methods whose usage in other inlined methods appears
 	prior to their definition.

	* tao/default_client.cpp: Eliminated names of unused arguments to
 	stop the compiler from complaining.

	* tao/server_factory.cpp: Properly scoped return type names for
 	several methods.

	* tao/{typecode,decode,deep_copy,debug}.cpp: Bracketed unused
 	variables with #if defined(TAO_NEEDS_UNUSED_VARIABLES)/#endif;
 	this leaves them around for right now in case they're important.

	* tao/client_factory.i (connector): Properly scoped return type's
 	name.

	* tao/{client_factory,default_client}.cpp: Added necessary
 	template instantiations.

	* tao/{typecode,cdr}.h: Added conditional ACE_INLINE in front of
 	inlined methods to appease the compiler gods.

	* tao/boa.cpp (dispatch): Declared argument unused to get rid of
 	warnings.

	* tao/corbacom.h: Moved #include of sequence.h before the decl for
 	class CORBA.

Sun Aug 10 10:58:21 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tao/client_factory: Moved the template specializations from the
 	*.cpp file into the *.i file in order to get this stuff to link
 	without multiply defined symbols.  Thanks to Brian Mendel for
 	giving me the idea to do this.

	* tao/client_factory.cpp: Added a template specialization for
 	ACE_Hash_Addr.

Sun Aug 10 08:56:20 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* CORBA_ to CORBA:: transformation complete. All the files in the
	TAO/tao distribution have been affected. The most notable changes
	are:
	(1) A file called "tao/corba.h" is now the master file. All *.cpp
	files include *just* this file and nothing else.

	(2) "tao/corbacom.h" is the file that defines the CORBA namespace
	i.e., class CORBA. Individual CORBA classes such as TypeCode, BOA,
	etc are now defined inside the CORBA namespace. This will allow
	users and developers to use CORBA::TypeCode as opposed to the
	previous CORBA_TypeCode. Instead of nesting the classes, however,
	we use typedefs to define individual CORBA classes inside class
	CORBA e.g., typedef CORBA_TypeCode TypeCode;

	(3) All *.i files are included at the end of "tao/corba.h" and
	nowhere else. However, if __ACE_INLINE__ isnot defined, then each
	individual *.i file is not yet included in their corresponding
	.cpp file. This will be done next.

	* TAO/tests/Demux_Test: Included code that tests various
	demultiplexing strategies in TAO. At this point, however, the code
	will not work because of changes in TAO. This will be done
	next. A README file provides additional details. 

	* TAO/Benchmark: A suite of benchmarking tests have been
	included. This is still in the preliminary stages of
	development. The idea is to compare various aspects of CORBA such
	as marshaling overhead, demux costs, throughput, latency, and
	others for a range of ORBs including TAO. Since there are
	differences in programming different ORBs, this suite tries to
	abstract out all the common features or atleast provide a uniform
	interface so that minimal efforts are required to port an
	application from one ORB to another.

	Benchmark/benchmark: This directory contains thecommon features
	Benchmark/Marshal_Test: Tests marshaling overhead in 3 ORBs -
	Orbix, VisiBroker, and TAO. More will be added. There are a few
	problems getting DSI to work. The tech support at IONA and
	VisiBroker have been contacted.

Sat Aug  9 14:05:08 1997  Douglas C. Schmidt  <schmidt@merengue.cs.wustl.edu>

	* tao: Continued to clean up all the code so that it is more
 	  consistent with ACE programming style.

	* tao/orbconf.h: Cleaned up a lot of the unnecessary #defines.

	* tao/default_server.h: Make sure we inherit from
 	  TAO_Server_Strategy_Factory, not TAO_Server_Factory.

	* tao/server_factory.cpp: Moved all the inline methods to be
 	  non-inline since this code will always be dynamically bound.

	* tao/client_factory.cpp: Cleaned things up a bit.

Sat Aug  9 12:37:05 1997  Brian Mendel  <brian.r.mendel@boeing.com>

        * tao/corba.h:  Deleted include for xdr.h from corba.h.  xdr.h
        is obsolete.

        * tao/objtable.cpp:  Deleted pragmas for instantiating ACE_Guard,
        ACE_Read_Guard, and ACE_Write_Guard to eliminate duplicate
        instantiations.  The templates are instantiated by ACE.  Can these
        templates also be removed from the
        ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION section as well?

        * tao/default.bld: Added build file for VxWorks.
      
        * tao/tao.bld: Added build file for VxWorks.

Fri Aug  8 14:25:20 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/orbobj.*: Updated various methods to use the new
 	dynamically-linked strategy factories discussed below.

	* tao/default_client.*: This file now contains the default client
 	strategy factory which is (a) dynamically linkable by the service
 	configurator and (b) can be configured by flags passed in via
 	service configurator.

	* tao/client_factory.*: This file now contains the abstract base
 	class for the client strategy factory.

	* tao/default_server.*: This file now contains the default server
 	strategy factory which is (a) dynamically linkable by the service
 	configurator and (b) can be configured by flags passed in via
 	service configurator.

	* tao/server_factory.*: This file now contains the abstract base
 	class for the server strategy factory.

	* tao/params.*: Renamed DEMUX_STRATEGY enum to TAO_Demux_Strategy
 	and put it at global scope instead of within TAO_OA_Parameters.

	* tao/svc.conf.eg: Created this file to serve as an example of
 	various lines one might find in an application's svc.conf.

Thu Aug  7 09:51:31 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* factories.cpp: Incorrect use of ACE_ASSERT in
	TAO_Server_Factory::object_lookup_strategy removed.

	* objtable.cpp: The octet sequence object key was being cast into
	a char* resulting in undefined behavior at times due to the lack
	of a NULL character to terminate it. Changes were made in the bind
	and find methods of TAO_Active_Demux_Table.

Thu Aug 07 03:52:31 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.8, released Thu Aug 07 03:52:31 1997.

Thu Aug  7 00:43:14 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tao/typecode.cpp: A couple of errors involving TAO_CONST crept
	in when Brian checked in his code.  I fixed these.

Wed Aug  6 18:28:41 1997  Chris Cleeland  <cleeland@swarm.cs.wustl.edu>

	* tests/Cubit/TAO/clnt.cpp (main): Corrected the format
 	specifications when timing was printing out from %ld to %d.  For
 	some reason this never caused a problem on other platforms.

Wed Aug  6 17:27:44 1997  Brian R. Mendel  <brian.r.mendel@boeing.com>

        * tao/typecode.h: Removed qualified name in typecode.h to eliminate 
          compiler warnings by the GHS compiler.  Line 297.
 
        * tao/decode.cpp: Changed wchar_t* to CORBA_WChar* to eliminate
          compiler errors on GHS compiler.  Lines 142, 216, 729, 1371, and 1475.
        
        * tao/typecode.cpp: Deleted unreachable break statements at lines
          429, and 477, 904, and 947.

Wed Aug  6 16:31:29 1997  Chris Cleeland  <cleeland@swarm.cs.wustl.edu>

	* tao/*: Changed 'const' to 'TAO_CONST' in contexts where the
 	const didn't make sense.  For example, this occurred in situations
 	where methods declared their return type as 'const CORBA_String',
 	which does not translate to 'const char*' but rather 'char*
 	const'.

	* tao/corbacom.h: Added #define for TAO_CONST.  See above for
 	explanation.

	* tao/{connect,factories,giop,iiopobj,marshal,objtable,
 	optable,orbobj,roa}.cpp: Removed errant trailing semi-colon on all
 	the #pragma instantiate directives.

Wed Aug  6 13:56:40 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/{connect,factories,giop,iiopobj,marshal,objtable,
 	optable,orbobj,roa}.cpp: Changed explicit template instantiations
 	to use the new ACE enabling macro as well as adding the #pragma
 	instantiate to placate Edison Design Group compilers.

	* tao/cdr.h: Changed default for CDR CTOR marshal factory to
 	reflect the new name of the default marshal factory variable.

	* tao/orbobj.cpp (CORBA_ORB_init): Inserted call to
 	TAO_Marshal::initialize().

	* tao/marshal.*: Added TAO_Marshal class to scope static
 	initialization methods for the marshalling engine.
  	TAO_DEFAULT_MARSHAL_FACTORY has moved inside of this.

Sun Aug  3 13:12:03 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tests/Cubit/TAO: Continued to improve the formatting of these
 	tests.

Sat Aug  2 13:55:40 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tests/Cubit/TAO: Cleaned up some of the formatting so that
	it is easier to read.

Thu Jul 31 16:19:43 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/corba.h: Removed incorrect #include "tao/corba.h" in this
 	file.  Bad form.
	
Thu Jul 31 15:19:43 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tests/Cubit/TAO/*.{h,i,cpp}: Changed all #include of specific
 	header files to include the application-level "tao/corba.h".

	* tests/Cubit/TAO/Makefile (BIN): Removed test1_svr and test1_clnt
 	for now until we can get them working again.  They stopped working
 	after the BOA API changed and the non-standard get_request()
 	method removed.

	* tao/any.h: Inserted #includes which insure that this header file
 	is not position-dependent on other header files.

	* tao/corba.h: Created this catch-all header file for APPLICATIONS
 	to use as a single entry point.  Currently it just includes all
 	TAO header files, but will eventually be pared down to only those
 	headers which warrant public exposure.

Wed Jul 30 16:55:02 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/typecode.i (CORBA_TypeCode): Re-ordered member
 	initialization to correspond to declaration order.

	* tao/{typecode,orbobj,optable,decode,cdr}.cpp: Added explicit
 	typecast to CORBA_ULong/unsigned long to eliminate warnings about
 	comparisons btw. signed and unsigned entities.

	* tao/optable.cpp (bind): Put in explicit return type for
 	TAO_Active_Demux_OpTable::bind().

Wed Jul 30 14:18:02 1997  Chris Cleeland  <cleeland@cs.wustl.edu>
	
	* tao/Makefile: Corrected automatic definition of TAO_ROOT and
 	fixed all dependencies on tao header/inline files.

	* tao/{typecode,object}.i: Moved a few methods to the beginning of the file
 	so that the compiler KNOWS that they are inlined when it hits the
 	first reference to them later in the file.

	* tao/object.cpp: Added an end-of-line to silence a very picky SGI
 	compiler.

Wed Jul 30 10:05:38 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tao/connect.cpp: Removed a number of explicit template
 	instantiations that are already included in ACE.

Wed Jul 30 14:20:18 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/boa.{i,h,cpp}: Removed the #include of "tao/objtable.h" and
	instead moved the methods that needed it from boa.i to boa.cpp

Wed Jul 30 13:58:02 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/boa.h: Added #include of "tao/objtable.h" since it is needed
	in boa.i (which is included here when inlining is turned on)

Wed Jul 30 10:05:38 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tao/boa.h: Removed the #include of "tao/objtable.h" which seems
 	to be unnecessary and may cause problems for template
 	specialization.

	* tao/iiopobj.i (IIOP_Object): Changed the second parameter to the
 	IIOP_Object constructor so that we can is a const
 	IIOP::ProfileBody &.  This prevents a compiler warning.

	* tao/typecode.cpp (private_id): Removed unused variable status.

	* tao/objtable.cpp (bind): Removed the temp variable, which
	was unused.

Tue Jul 29 19:31:11 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* tao/boa.cpp (get_boa): Added casts of ACE_UINT32 so that we
 	don't have ambiguous calls to the constructor of ACE_INET_Addr.

	* tao/deep_copy.cpp (deep_copy): Removed an unreachable return
 	value.

Mon Jul 21 15:08:36 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* TAO version 0.0.7, released Mon Jul 21 15:08:36 1997.

Mon Jul 21 12:06:16 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/object.cpp: removed the #include of object.i since it will
	always be #included in object.h

Thu Jul 17 16:54:38 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.6, released Thu Jul 17 16:54:38 1997.

Thu Jul 17 16:43:23 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/{optable,objtable}.cpp: Updated the explicit template
 	instantiations at the end of these files to reflect the changes
 	that Andy made.

Thu Jul 17 10:08:45 1997  Aniruddha Gokhale  <gokhale@merengue.cs.wustl.edu>

	* tao/align.h: A very subtle error in "align_binary" was corrected. I
 	was assuming that align_binary is always called by
 	"ptr_align_binary". In the original inline function versions of
 	align_binary and ptr_align_binary, the function align_binary would
 	subtract 1 from the specified alignment that ptr_align_binary
 	provided. Since I assumed that "align_binary" would always be
 	called by "ptr_align_binary", I subtracted the 1 in
 	ptr_align_binary and passed the result to "align_binary". This
 	caused all sorts of problems for application code that directly
 	called "align_binary". This error has been fixed. The macros for
 	align_binary and ptr_align_binary are now exactly as the original
 	inline functions.
	
	* tao/any.{h,cpp}: Added comments. In addition, in the code for
	Any::replace, we check if "_value" exists before trying to
	DEEP_FREE it. Otherwise this was resulting in a segmentation fault
	violation.

	* tao/boa.{h,i}: Added comments and changed "release" to CORBA_release

	* tao/cdr.{h,cpp}: Added some comments and removed some stuff that was
	under #if 0 .. #endif

	* tao/corbacom.h: Added lots of comments for the CORBA_String_var class

	* tao/decode.cpp: Made TAO_Marshal_Union::decode to work, added comments.
	
	* tao/encode.cpp: Made TAO_Marshal_Union::encode to work, added comments.

	* tao/factories.{h,cpp}: Added lots of comments. Removed "void
	object_lookup_strategy" method since we do this in the parameters
	class. Added code that will use a user defined lookup strategy if
	the corresponding flag is set. This needs to be tested.

	* tao/iiopobj.{i,cpp}: In the allocation and deallocation of the buffer
	for object key, we now use "new/delete" instead of "malloc/free".

	* tao/interp.cpp: commented out a line that decremented 4 from the
	offset provided for indirected typecodes. I guess this was plain
	hack to get some broken things to work.

	* tao/objtable.{h,cpp}: Added lots of comments. Added code that will use
	template specialization for the dynamic hashing case. In addition,
	improved the destructors of the classes since previously, these
	were not releasing occupied memory.

	* tao/optable.{h,cpp}: Added lots of comments. Added template
	specialization for dynamic hashing scheme. Made dynamic hashing
	scheme the default. Added a new definition for "struct
	TAO_operation_db_entry". The idea is that an IDL compiler will
	generate a database of operations and their corresponding
	skel_ptrs. Such a database is now passed to teh constructors of
	the operation lookup tables. This way, only one instance of such
	lookup tables can be shared by any number of objects implementing
	the same interface.

	* tao/params.{h,i,cpp}: Made dynamic hashing the default. Added a hook
	by which users can supply their lookup strategies. *Needs testing*.

	* tao/typecode.{h,i,cpp}: Added comments and many changes. The private
	state's constructor now takes an argument that is a TCKind
	representing the TypeCode kind of the object of which we are the
	private state. Removed "child_free". Instead, we introduced a
	destructor for the private state that frees all the
	children. Another important change is to the constructor of the
	TypeCode class. We pass a "parent" pointer, if any, to the
	constructor. All children typecodes will share the octet buffer of
	the parent. Only freestanding typecodes will allocate octet
	buffers. We have a new data member called "non_aligned_buffer_"
	because the buffer we allocate may not be aligned on a 4 byte
	boundary. As a result, we may start using the buffer at a shifted
	position to the right. However, we do not want to lose a handle to
	the original buffer that was allocated because at the time of
	freeing, this pointer needs to be freed.

	* tests/Cubit/TAO: Modified a few files (method_db.i, cubitS.cpp)
	so that they use the modified optable and objtable classes. Added
	a README file to indicate how to run the example.

	* tests/Thruput_test: Modified virtually all the files to make it
	work with the latest TAO release and its include files. Also,
	changes similar to Cubit were necessary due to changes in the
	objtable and optable classes.

Wed Jul 16 14:17:01 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* tao/params.*: Eliminated unnecessary
 	ACE_LACKS_STATIC_DATA_MEMBER_TEMPLATES checks from
 	TAO_OA_Parameters (unnecessary b/c it's not a template).  Also
 	corrected the type of TAO_OA_Parameters::ace_singleton_lock_.

Wed Jul 16 11:34:36 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tao/boa.cpp: Removed some unused code.
	
	* tao/compat/objbase.h: Added explicit check for prior inclusion
 	of ace/OS.h, with an error being produced if it's not included.
  	This will help keep me honest and remember to always include OS.h
 	beforehand, since I do most of my development on non-WIN32
 	platforms.
	
	* tao/*.{h,cpp}: Added #include "ace/OS.h" before every inclusion
 	of <objbase.h>.  This is required on WIN32 platforms because
 	objbase.h eventually ends up including <winsock.h>, which is the
 	wrong version of winsock from what ACE requires.  Thus, by
 	including OS.h prior to objbase.h, objbase.h ends up not trying to
 	include a winsock header.
	
	* tao/orbobj.cpp: Added missing #include for tao/debug.h.
	
Wed Jul 16 10:55:55 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/PC_Install.bat: removed it since it isn't needed anymore

	* tao/TAO.dsp: Changed include path and removed calling of 
	  PC_Install.bat

	* tests/Cubit/TAO/{client,server}.dsp: Changed include path

Tue Jul 15 16:13:53 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tests/Cubit/TAO/cubitC.cpp: Added missing calls to Release()
 	after QueryInterface() calls.  The tip-off that this wasn't
 	happening was the fact that, upon client exit, there were upwards
 	of 15 references to the object references.  Now it's only 5-7
 	(more work to go).
	
	* tests/Cubit/TAO/*: Changed all #include paths to be "tao/...".
  	Also, changes to orb.h (see below) obviated additional header
 	inclusion in certain files.

	* tao/compat/*.h: Changed the guts of these files so that they
 	work more like their "real" counterparts in the VC++ 5.0.  This
 	should encourage compatibility.  Note that, unlike the previous
 	files, objbase.h MUST be included before initguid.h; this is
 	consistent with the model on WIN32.

	* tao/*.{h,cpp}: Changed all #include paths to be "tao/...".
  	Also, changes to orb.h (see below) obviated additional header
 	inclusion in certain files.

	* tao/giop.cpp: Removed get_request() crufty old code.

	* tao/iiopobj.cpp: Backed out many prior special-code additions
 	for defining IIDs.  Hopefully the need for these is negated by
 	changes elsewhere in the "compat" files.

	* tao/object.cpp: Corrected the conditional compilation switch
 	used to determine if we define IID_IUnknown.  This now happens
 	whenever WIN32 isn't defined, instead of before when it was only
 	on unix or vxworks platforms.

	* tao/Makefile: Eliminated the need to copy files into a "proto/"
 	directory; now, everything is built into and used from the "tao"
 	directory.
  	
	There is also a new, optional, environment
 	variable--TAO_ROOT--which should be set to the ".../TAO"
 	directory.  If it's not set, the Makefile will set it to
 	$WRAPPER_ROOT/TAO.
  	
	Lastly, libcorba.* has changed to libTAO.*.
	
	* tao/orb.h: Eliminated many header files which had been
 	explicitly included here and were causing all manner of problems
 	with circular includes.  Library components must now be careful to
 	include appropriate headers for all components they use, and we
 	will likely have to create a corba.h file for clients to use.

Fri Jul 11 12:12:40 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/TAO.dsp: changed to use ace-r.dll in the release 
	  version
	
	* tests/Cubit/TAO/{client,server}.dsp: changed to use ace-r.dll
	  and tao-r.dll for the release versions.

Thu Jul 10 15:47:24 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* docs/: Removed the following obsolete files: README.apm,
 	BUILDING, and TESTS.
	
	* tao/params.*: Moved the instance() methods into the .cpp from
 	the .i, as well as the declaration for the singleton locks.
  	Having the singleton locks declared in the .i file caused much
 	consternation when ACE inlining was turned on.

	* tao/iiopobj.cpp: #ifdef'd the IID_STUB_Object declaration added
 	a few days ago so that it happens one way on NT, and another in
 	the rest of the Universe.  I would have preferred to find a more
 	general solution, but didn't find one quickly enough to satisfy my
 	current requirements.

	* tao/roa.*: Removed get_request() method.  This should improve
 	our McCabe scores ;-)
	
	* tao/boa.h: Removed get_request() method.

Wed Jul  9 14:44:31 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* TAO-Install: Added installation instructions for NT

Tue Jul  8 20:52:06 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/PC_Install.bat: Made it very quiet.

	* tao/params.{cpp,h,i}: Changed TAO_OA_PARAMS from a 
	  ACE_Singleton to a plain singleton by just integrating the
	  ACE_Singleton code into the class.

Tue Jul  8 14:27:47 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/except.h: added ACE_Svc_Export to SYSEX macro

	* tao/iiopobj.cpp: changed declaration of IID_STUB_Object
	  to include ACE_Svc_Export

	* tao/stub.h: added ACE_Svc_Export to IID_STUB_Object

Tue Jul  8 12:44:14 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/orbobj.cpp: Put the "*" in before the comment since it is
	  supposed to be there.  Put a space between it and the comment
	  to get rid of the warning which VC was giving originally.

Tue Jul  8 10:21:27 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* tao/typecode.cpp: Changed a few loop counters from int to 
	  CORBA_ULong to get rid of unsigned/signed comparison warnings

	* tao/orbobj.cpp: Got rid of a "*" before a comment.  Looked like 
	  a typo

	* tao/PC_Install.bat: Replaced "#...." with "rem ...."

Mon Jul  7 20:59:05 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tests/Cubit/TAO/test1_{svr,clnt}.cpp (main): Added template
	  specialization code and updated the formatting.  Thanks to Arturo
	  Montes <mitosys@colomsat.net.co> for reporting this.

	* tests/Cubit/TAO/test1_svr.cpp (main): Added the -i options to
	  getopt().  Thanks to Arturo Montes <mitosys@colomsat.net.co> for
	  reporting this.

	* TAO/tao/orbconf.h (SIZEOF_LONG_DOUBLE): Added a 
	  #define for M_UNIX.  Thanks to Arturo Montes
	  <mitosys@colomsat.net.co> for reporting this.

Sun Jul 06 02:37:24 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.5, released Sun Jul 06 02:37:24 1997.

Sun Jul  6 00:10:28 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* tao: Fixed all the code so that we put ACE_MT around all the
	  ACE_GUARD_RETURN macros.

	* tao: Updated all of TAO to make sure we use [] when deleting
	  arrays in order to avoid memory leaks.  This looks like lots of
	  sloppiness left over from the original SunSoft IIOP code.

Sat Jul  5 16:12:31 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* tao/{any,iiopobj,nvlist,principa,request,roa,svrrqst,typecode}.cpp:
	  Fixed a double-deletion of a lock.

	* tao/typecode.i: Cleaned up lots of minor warnings with the code
	  that are only revealed when running GCC.  The code should now
	  compile almost completely cleanly with -wall. 

	* tao/typecode.{i,h}: Changed the name of TC_PRV_State to
	  TC_Private_State.

	* tao: Replaced ACE_Thread_Mutex with ACE_SYNCH_MUTEX so that the
	  code will compile on non-threaded and threaded platforms alike.

	* tao/marshal.cpp: Added template specializations for the Marshal
 	primitives.  Thanks to Arturo Montes <mitosys@colomsat.net.co> for
 	reporting this.

	* tao/Makefile (LDLIBS): Replaced -lcorba with -lACE so that we no
 	longer have problems with circular link dependencies.  Thanks to
 	Arturo Montes <mitosys@colomsat.net.co> for reporting this.

Sat Jul 05 13:25:23 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* TAO version 0.0.4, released Sat Jul 05 13:25:23 1997.

Sat Jul  5 12:39:57 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * tao: All throughout TAO I removed the direct use of system
 	include files in lieu of using ace/OS.h.

	* tao/{orbobj,typecode}.cpp: orb.h must be included before others
 	include files. Previous includes prevent correct use of ACE config
 	flags, therefore, I removed them.  Thanks to Arturo Montes
 	<mitosys@colomsat.net.co> for reporting this.

        * tao/{debug,roa}.cpp: changed _POSIX_THREADS to ACE_HAS_PTHREADS.
  	Thanks to Arturo Montes <mitosys@colomsat.net.co> for reporting
 	this.

	* tao/decode.cpp (decode): The casting (CORBA_ULong) kind is
 	unnessary and wrong so I removed it.  Thanks to Arturo Montes
 	<mitosys@colomsat.net.co> for reporting this.

	* tao/debug.cpp (emit_prefix): Changed line 99 from

	#define emit_prefix (stream) ...

	to

	#define emit_prefix(stream) ...

	The blank character prevent after macro name (emit_prefix) prevent
 	correct definition.  Thanks to Arturo Montes
 	<mitosys@colomsat.net.co> for reporting this.

Sat Jul  5 01:04:24 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* TAO/tao/xdr.cpp: Removed unistd.h and string.h from the xdr.cpp
 	  file since those aren't necessary.  Thanks to Arturo Montes
 	  <mitosys@colomsat.net.co> for reporting this.

Fri Jul  4 00:18:21 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* tao/roa.h: Removed derogatory COMments ;-).  Thanks to Anton van
 	  Straaten <anton@appsolutions.com> for reporting this.

Thu Jul  3 16:16:14 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* Added ACE_Svc_Export to a couple of declarations to make NT 
	  happier

Thu Jul  3 13:43:20 1997  Darrell Brunsch <brunsch@cs.wustl.edu>

	* Added Visual C++ 5.0 project and workspace files for the TAO 
	  library and Cubit test

Wed Jul  2 12:44:42 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* TAO/tests: Moved tests from TAO/IIOP/tests to TAO/tests

Wed Jul 02 00:20:28 1997  Douglas C. Schmidt  <schmidt@cs.wustl.edu>

	* Compiled the first alpha release of TAO on Solaris just
	  to make sure it still works.  So far, so good... hence,
	  the first alpha release is out the door!

Tue Jul  1 23:35:53 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* VERSION: Added a VERSION file, starting at version 0.0.0...

Tue Jul  1 23:00:15 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* Added a new tests directory with the Cubit and TTCP
	examples. The older test directory will be deleted soon.

	In addition, the tc_constants in the tc_constants.cpp  file are
	declared with an ACE_Svc_Export to make the Win NT compiler
	happy. Extern declarations in typecode.h had the same changes.

	* Updated the PC_install.bat file. In addition, there was one more
 	warning in typecode.cpp (Win NT compiler) that was fixed. Finally,
 	in the the tc_const.cpp file, the ACE_Svc_Export was used
 	accidently. This has been fixed.

	* A number of files were updated with ACE_Svc_Export so that
	variables and classes do not remain unresolved for Win32
	platform. Similarly, Irfan had sent me a list of warnings that the
	Win NT compiler was giving. These are fixed.

	* marshal.*: Changed the way make_marshal_object works. Instead of
	having a switch statement, we index into a private table of
	marshal objects using the TypeCode _kind field. MarshalFactory now
	maintains this private table.

Mon Jun 30 17:39:02 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* Added a new README file and a COPYING file that explains the
 	contents of TAO and clarifies its copyright status.

Sun Jun 29 10:06:50 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* marshal.*: Added CORBA_Environment as a parameter to
	make_marshal_object factory method. The reason for doing this was
	to enable inlining of the CDR::encode and CDR::decode methods.

	* typecode.*: Changed the way typecodes get deleted. Constant
	typecodes are now owned by the ORB and their private state freed
	when the ORB dies. IDL generated typecodes are not owned by the
	ORB and are the only ones whose refcount matters. Typecodes
	belonging to the IDL generated typecodes are also not owned by the
	ORB and there is no effect on their refcount. They get freed only
	if the parent is destroying itself.

	In typecode.i, methods such as length and content_type were not
	getting inlined due to presence of switch statements. Converted to
	if/else.

	* interp.cpp: Bug fix: Had previously forgotten to update the
	size/alignment of the private state of the typecode.

Fri Jun 27 14:27:49 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* any.cpp: The deep_copy and deep_free optimizations applied. In
	the previous release, I had forgotten to add these to the Any
	constructor (that calls deep_copy) and Any destructor/replace
	(that call deep_free).

	* connect.cp, factories.cpp: Added code that hardcodes the socket
	buffer sizes to 64K. This is a hack for the time being.

Thu Jun 26 10:02:47 1997  Aniruddha Gokhale  <gokhale@merengue.cs.wustl.edu>

	* Some more progress on IDL compiler. Generates the client and
	server side files without much contents in it.

Thu Jun 26 09:49:38 1997  Aniruddha Gokhale  <gokhale@merengue.cs.wustl.edu>

	* Added a full range of optimizations to the TAO IIOP interpretive
	marshaling engine. The static methods encoder and decoder have
	been removed from the CDR class. Instead, separate classes for
	marshaling have been created for each individual data type. The
	CDR stream maintains a factory that returns an appropriate
	marshaling object depending on the data type to be
	marshaled. Files added include marshal.h, marshal.i, encode.cpp,
	decode.cpp, deep_free.cpp, and deep_copy.cpp. The marshal.h file
	defines classes for an abstract MarshalObject. The factory is
	responsible to return a concrete specialized instance of the
	MarshalObject. 

	* Updated the CORBA_TypeCode class so that it now provides all the
	CORBA_2.0 compliant operations. These include length(),
	content_type(), member_type(), member_label(),
	discriminant_type(), id(), default_index(). The equal() operations
	is still not implemented. In addition, precomputation
	optimizations are applied to the TypeCode class. This includes
	precomputing various parameters (if any) of a TypeCode. For
	example, a struct TypeCode keeps track of the member count and
	member types. As a result, it is not necessary to interpret the
	CDR encapsulated stream to retrieve these parameters.

	* At this time, there are some problems getting the Unions to work.

Thu Jun 12 15:45:49 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/objtable.cpp: Added explicit template instantiations
 	for ACE_Hash_Map_Manager<>.

	* IIOP/lib/giop.*: Finally got rid of all those methods that took
 	ACE_HANDLE as the argument.  Now, all those operate on
 	ACE_SOCK_Streams.

Thu Jun  5 10:15:21 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/giop.cpp: Corrected output format in error message.

Thu Jun  5 10:09:01 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* IIOP/test/svr.cpp: Added a new class to catch SIGINT and
 	terminate.  This was necessary to Quantify the server process.

	* IIOP/lib/orbobj.h: Added ACE_INLINE to forward decls of
 	CORBA_release() and CORBA_is_nil().

Wed May 23 14:39:01 1997  Brian Mendel  <bmendel@mdc.com>

        * IIOP/lib/objtable.{h,cpp}:  Added template specialization of 
        ACE_Hash_Map_Manager for char*'s.

        * IIOP/test/cubitS.cpp:  Fixed type_id to be of type CORBA_String_var.
        Also, added a debug msg to print the object address to show the 
        object for which the request is made.

        * IIOP/test/svr.cpp:  Added capability to create multiple Cubit
        objects via command line options.  Added -n for number of objects and
        -k for specifying a base name.  For instance, -k Beevis -n 2 creates
        Beevis1 and Beevis2 objects.  The clnt can then specify a specific
        object for the request as usual.

Wed May 22 12:28:45 1997  Brian Mendel  <bmendel@mdc.com>

        * IIOP/test/clnt.cpp:  Deleted VxWorks specific sections.  Command
        line is now working for VxWorks.
        * IIOP/test/svr.cpp:  Deleted VxWOrks specific sections.  Command line
        is now working for VxWorks.

Wed May 22 11:31:42 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/test/svr.cpp: Added better error checking and messages, and
 	performed general re-formatting.

	* IIOP/test/method_db.i (initialize_method_db): Changed arg type
 	to use a pointer to the abstract class TAO_Operation_Table.

	* IIOP/test/cubitS.cpp (_skel_Cubit::_skel_Cubit): Added better
 	error checking and messages.  Also defaulted to use the linear
 	object table implementation rather than the hashed to simplify
 	debugging.

	* IIOP/test/clnt.cpp: Moved some code around so that more of the
 	code is common is less is specific to VxWorks and other platforms.
  	Also did general re-formatting.

	* IIOP/lib/optable.cpp (TAO_Linear_OpTable::find): Initialization
 	of the loop variable makes the loop work properly.

	* IIOP/lib/objtable.cpp (TAO_Dynamic_Hash_ObjTable::find):
 	Explicitly specified length of object key in CTOR for ACE_CString
 	because object keys are not zero-terminated.

	* IIOP/lib/giop.cpp: Added newlines to the end of all ACE_DEBUG()
 	messages.

	* IIOP/lib/factories.cpp: Added template specializations for
 	ACE_Hash_Addr<ACE_INET_Addr, TAO_Client_Connection_Handler>.

Tue May 22 09:32:41 1997  Brian Mendel  <bmendel@mdc.com>

        * IIOP/lib/cdr.h: Deleted #define old_value ACE_INLINE and
        #define ACE_INLINE old_value lines. Added #undefs for ACE_INLINE
        prior to redefines.  Changes required to compile on Windows NT.

Tue May 20 14:47:46 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/test/cubitS.h: Removed forward decl of
 	TAO_Active_Operation_Table.

	* IIOP/test/{cubitC,cubitS}.*: Changed include quoting characters
 	from [<>] to double-quotes.

	* IIOP/test/Makefile: Removed cubit.o from clnt and svr target
 	(this has been subsumed by cubit[CS]).

	* IIOP/lib/optable.h: Changed ACE_RW_Mutex to ACE_SYNCH_RW_MUTEX.

	* IIOP/lib/optable.cpp: Inserted explicit template instantiations.

	* IIOP/lib/Makefile: Added optable to the Makefile.

	* IIOP/lib/optable.cpp: Moved ~TAO_Operation_Table() into here.

	* IIOP/lib/object.i: Moved find() and bind() into the cpp file.
  	Moved ~TAO_Operation_Table() into optable.cpp.

Tue May 20 14:39:00 1997  Brian Mendel  <bmendel@mdc.com>

	* IIOP/test/*: Commited changes to Cubit Example as a current snapshot
          of required changes.
	
        * IIOP/lib/*: Changes required for header file includes.  Added 
          conditionals around _IIOP_BUILD_

Tue May 20 13:55:58 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* IIOP/test/*: Commited this stuff in-process so that Brian
 	M. doesn't have to duplicate effort.

Tue May 20 13:04:00 1997  Brian Mendel <bmendel@mdc.com>

	* IIOP/lib/debug.cpp: Deleted spaces between flockfile (f) and 
	funlockfile (f).  Changed instances of debug_filter to 
	TAO_debug_filter.  Deleted space between emit_prefix (stream).

	* IIOP/lib/cdr.cpp Added undef(s) for ACE_INLINE and 
          do_undef_on_ACE_INLINE to eliminate redefinition problems.


Tue May 20 10:55:09 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/cdr.h: Fixed the automatic inclusion of cdr.i into
 	cdr.h by checking to see if __ACE_INLINE__ is not defined and, if
 	so, defining ACE_INLINE to be "inline" (we tidy up the namespace
 	immediately after the inclusion of cdr.i, too).  See source for
 	comments regarding why this is done.

	* IIOP/lib/optable.cpp (TAO_Linear_OpTable_Entry): Removed setting
 	of opname and skel_ptr to zero in CTOR since the CTOR for those
 	already insures this.  Moreover, NT's compiler was complaining
 	about ambiguous resolutions.

	* IIOP/lib/{orbobj,giop,debug,boa}.cpp: Fixed reference to
 	debug_level so it's TAO_debug_level.

	* IIOP/lib/object.h: Replaced inclusion of optable.h with forward
 	decl of TAO_Operation_Table.

	* IIOP/lib/optable.cpp: Fixed names of methods that were changed
 	in the header but never changed in the source.  Amazing that
 	neither g++ nor Sun C++ caught these gaffs!  (Finally, the NT
 	compiler wins).

	* IIOP/lib/{orbobj,object}.h: Changed the forward decls of
 	CORBA_release() and CORBA_is_nil() so that they are only in effect
 	when inlining is NOT being used.

	* IIOP/lib/giop.cpp: Fixed incorrect passing of an object to
 	ACE_DEBUG() where an int is expected.

Mon May 19 17:16:34 1997  Chris Cleeland  <cleeland@merengue.cs.wustl.edu>

	* IIOP/lib/roa.cpp: Explicit cast rids us of a warning.

	* IIOP/lib/params.h: Fixed CTOR name.  Once again I'm surprised
 	G++ didn't catch this.

	* IIOP/lib/optable.h: Corrected erroneous method signature on
 	bind().

	* IIOP/lib/objtable.cpp: Corrected erroneous method signature on
 	TAO_Linear_ObjTable::bind().

	* IIOP/lib/{object,orbobj}.h: Forward declaration of
 	CORBA_release(CORBA_Object_ptr) and CORBA_is_nil(CORBA_Object_ptr)
 	were commented out.  I think this will cause a problem when we
 	DON'T inline, but I'll cross that bridge later.

	* IIOP/lib/{orb,factories}.h: Made inclusion of some headers
 	conditional on the compilation phase (building the library or an
 	application).

	* IIOP/lib/cdr.i: Removed incorrect default arguments (g++ didn't
 	catch them).

	* IIOP/lib/Makefile: Removed thread from the header list.

Mon May 19 10:07:00 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/optable.cpp: Changed implementation of the operation
 	table and the parameters repository so that they use the right
 	class names.

Sat May 17 17:18:38 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* First pass at providing a backend to the SunSoft's CORBA IDL
	compiler front end.
	
Fri May 16 17:30:31 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/svrrqst.*: Corrected some comments, adjusted some
 	argument type names to reflect their new, namespace-sanitized
 	names, and moved short methods into a new inline file.

	* IIOP/lib/stub.h: Corrected some comments and adjusted some
 	argument type names to reflect their new, namespace-sanitized
 	names.

	* IIOP/lib/roa.cpp: Corrected syntax error and fixed up typedef.

	* IIOP/lib/params.*: Removed extraneous comments and fixed
 	argument type on demux_strategy().

	* IIOP/lib/orbobj.*: Added comments, removed static pointer to
 	the ORB.

	* IIOP/lib/optable.h: Removed extraneous comments and fixed
 	typedefs.

	* IIOP/lib/objtable.cpp: Fixed some syntax errors introduced by
 	reformating.

	* IIOP/lib/object.cpp: Adjusted some argument type names to
 	reflect their new, namespace-sanitized names.

	* IIOP/lib/invoke.cpp: Removed crufty #includes and adjusted some
 	argument type names to reflect their new, namespace-sanitized
 	names.

	* IIOP/lib/iioporb.*: Moved short methods into inline file, added
 	IIOP_ORB_ptr typedef, and changed data member to conform to ace
 	standards.

	* IIOP/lib/iiopobj.*: Added the second CTOR that I forgot last
 	time and adjusted some argument type names to reflect their new,
 	namespace-sanitized names.

	* IIOP/lib/giop.h: Added comments for various enums and
 	structures.

	* IIOP/lib/giop.cpp: Switched various GIOP::Invocation methods to
 	use handler_->peer() for socket communication rather than going
 	through a file descriptor.  Also began the arduous (no other word
 	could explain it!) process of converting the homegrown debugging
 	message macro uses into ACE_DEBUG() uses.

	* IIOP/lib/factories.*: Added explicit DTOR for TAO_Client_Factory
 	and completed all the darn explicit template instantiations.
  	Changed 'Svc_Handler' to 'TAO_Client_Connection_Handler', and
 	added the forgotton TAO_Client_Factory::connector() method.

	* IIOP/lib/debug.*: Added 'TAO_' prefix to global debug state
 	variables and removed crufty #includes.

	* IIOP/lib/connect.cpp: Change ROA_Handler to
 	TOA_OA_Connection_Handler (missed these the last time through).

	* IIOP/lib/cdr.cpp: Added responsive commentary.

	* IIOP/lib/boa.cpp: Added comments to the dispatching code.

	* IIOP/lib/{any,boa,request,typecode}.cpp: Removed references to
 	thread.h/connmgr.*.

Thu May 15 19:08:16 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* Finished updating all the reformatting.

Thu May 15 15:54:49 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/principa.h: Corrected syntax error which eliminated the
 	_refcount data member.

	* IIOP/lib/{params,roa}.*: Updated class names to reflect ROA -->
 	TOA_OA pseudo-namespace change.

	* IIOP/lib/orbobj.*: Updated CORBA_ORB_init() to return pointer to
 	new ORB singleton.

	* IIOP/lib/orb.h: Commented out some include files to eliminate
 	wierd circular dependencies.

	* IIOP/lib/optable.h: Moved TAP_Operation_Table into here.  Put
 	OpTable* classes into the TAO_Operation_Table* pseudo-namespace.

	* IIOP/lib/objtable.*: Moved TAO_Object_Table into here.  Moved
 	the Entry classes out of the scope of their respective concrete
 	operation tables, so they're now named <concrete_table>_Entry.

	* IIOP/lib/object.*: Moved TAO_Operation_Table into optable.*, and
 	added a data member which carries a pointer to the ORB with which
 	the object is associated.

	* IIOP/lib/iioporb.*: Added a singleton typedef for the ORB which
 	is what CORBA_ORB_init() will now return.  Modified
 	string_to_object() so that it sets the ORB on the CORBA_Object
 	that it returns.
	
	* IIOP/lib/{iiopobj,nvlist}.h: Added some responsive commentary.

	* IIOP/lib/giop.cpp: Modified connection establishment code in
 	GIOP::Invocation::start() to utilize the client connection manager
 	in the ORB.

	* IIOP/lib/giop.h: Put a TAO_Client_Connection_Handler* into
 	GIOP::Invocation in place of the client_endpoint.

	* IIOP/lib/factories.*: Updated explicit template instantiations,
 	added TAO_Client_Connection_Handler.

	* IIOP/lib/connect.*: Renamed things--ROA_Parameters -->
 	TOA_OA_Parameters, ROA_Handler --> TOA_OA_Connection_Handler.

	* IIOP/lib/boa.h: Moved TAO_Object_Table into objtable.*, added
 	comments where appropriate.

	* IIOP/lib/{any,cdr,iioporb,invoke}.*: Re-formatting and creation
 	of inline method file.

Tue May 13 21:51:22 1997  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

	* Continued to update the format of the TAO source code so that it
 	  will be consistent with the style used in ACE.

Mon May 12 17:02:29 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/roa.*: Moved short method into an inline file.
  	Miscellaneous reformatting.  Adjustment to new type names
 	(prefaced by TAO_ for namespace protection).
	
	* IIOP/lib/object.*: Moved short methods into an inline file.
  	Changed lookup()/register_op() to find()/bind() for consistency
 	with established ACE APIs.  Miscellaneous reformatting.

	* IIOP/lib/iiopobj.*: Moved short methods into an inline file.
  	Added CTOR for IIOP::Version and IIOP::ProfileBody.  Added
 	convenience CTOR for IIOP_Object where the profile can be
 	supplied.  Miscellaneous reformatting.

	* IIOP/lib/boa.*: Moved short methods into an inline file.  Changed
 	lookup()/register_obj() to find()/bind() for consistency with
 	established ACE APIs.

	* headers: Added comments to force C++ mode in emacs for header
	files, and changed SCCS version tag info to RCS version tag info.

Wed May  7 14:49:46 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/corbacom.cpp: Some bugs from the CORBA_String_var class
	have been fixed. Thanks to Brian Mendel for noticing these.

	* IIOP/lib/boa.cpp: In CORBA_BOA::dispatch, the opname local
	variable of type CORBA_String_var is changed to be of type
	CORBA_String. This was because the String_var class would assume
	ownership of the quantity assigned and delete it. Thanks again to
	Brian Mendel for noticing this.

Tue May  6 14:06:49 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/boa.hh: the register_obj's 2nd argument is changed from
	CORBA_Object_ptr& to CORBA_Object_ptr

	* IIOP/lib/object.hh: the return type for register_op method on
	CORBA_Object is changed from void to int to be consistent.

	Added a new method "get_subclass" to CORBA_Object that returns a
	pointer to the subclass. Typeically, this would be pointer to an
	object that implements an interface.

	* IIOP/lib/objtable.{hh,cpp}: @nd argument of register_obj changed
	from CORBA_Object_ptr& to CORBA_Object_ptr.

	* IIOP/lib/orb.hh: the type signature of "skeleton" is changed to
	take CORBA_Object_ptr rather than CORBA_Object_ptr& as its 2nd argument.

Mon May  5 20:28:54 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/boa.cpp: commented out code that uses the "void
	*context" field. It doesn't make any sense to have it.

	* IIOP/lib/boa.hh: Added 2 pure virtual methods (shutting_down and
	clean_shutdown).
	
	In addition, the "register_obj" method was added. It was missing before.
	
	* IIOP/lib/corbacom.cpp: String_var's constructor bug is fixed. It
	was trying to free storage that was never allocated.

	* IIOP/lib/iiopobj.{hh,cpp}: Added a method - "get_name" that
	retrieves the object name.

	* IIOP/lib/object.{hh,cpp}: Added a method - "get_name" that
	retrieves the object's name or key. This is for debugging purposes.

	* IIOP/lib/orbobj.cpp: There was an infinite loop in parsing the
	options to BOA_init. Fixed.

	* IIOP/lib/stub.hh: Added the "get_name" virtual method.

Sat May  3 22:45:23 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/boa.cpp: Added code temporarily that invokes the
	skeleton that is looked up. We still need to add code that will
	handle the case when no match is found on the operation names.

	* IIOP/lib/boa.hh: The register_obj method on TAO_Object_Table
	now returns an integer indicating status of registering (-1 =>
	failure, 0 for success).

	* IIOP/lib/object.hh: The register_op method on
	TAO_Operation_Table now returns an integer code (O for success, -1
	for failure).

	* IIOP/lib/objtable.{hh,cpp}: The register_obj method returns an
	integer code representing either success or failure.

	* IIOP/lib/optable.{hh,cpp}: Added new files that implement
	concrete strategies for operation name lookup.

Fri May  2 08:48:29 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/object.hh: Modified the signature of register_op on
	TAO_Operation_Table to take a second argument to be a pointer to
	the actual skeleton. 

	Thanks to Brian Mendel for reporting this.

Thu May  1 16:46:11 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/object.{hh,cpp}: Added a method that can set the parent
	pointer. 

	* IIOP/lib/params.cpp: A hook has been provided in ROA_Factory to
	enable the user to use a user-defined demux strategy.

Wed Apr 30 22:00:51 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/objtable.{hh,cpp}: Added two new files that define
	different object demultiplexing strategies. 

	* IIOP/lib/Makefile: Added objtable as additional source file to compile.

	* IIOP/lib/boa.cpp: Provided the default destructor for the
	TAO_Object_Table. 

	* IIOP/lib/boa.cpp: Provided the default destructor for the
	TAO_Operation_Table.

	* IIOP/lib/orbobj.cpp: Added support for the -OAtablesize option
	in the call to CORBA_ORB::BOA_init method.

	* IIOP/lib/params.{hh,i,cpp}: Added support to ROA_Factory to return
	a specific object lookup strategy.

	*IIOP/lib/roa.cpp: The ROA constructor initializes its "objtable_"
	private data member with the object lookup strategy returned by
	ROA factory.

Tue Apr 29 11:52:48 1997  Aniruddha Gokhale  <gokhale@mambo.cs.wustl.edu>

	* IIOP/lib/any.hh: Moved CORBA_Any_ptr declaration to orb.hh.

	* IIOP/lib/boa.{hh,cpp}: Renamed BOA to CORBA_BOA. The CORBA_BOA class
	maintains a pointer to an abstract TAO_ObjectTable class. Concrete
	classes inheriting from TAO_ObjectTable will provide strategies
	for lookup.

	Added virtual functions to do dispatch based on object key. In
	addition, added a lookup method based on object key that delegates
	the task of looking the object to the object table it maintains.

	Changed the signature of typedef CORBA_BOA::dsi_handler to be pointer to
	member function of class CORBA_BOA. Eventually, this will point to
	the dispatch method of class CORBA_BOA.

	Moved "struct Dispatch_Context" from roa.hh to boa.hh since we
	want BOA to be a full fledged OA eventually and not remain an
	abstract class as it is now. All other OA's such as ROA inherit
	from BOA and only add extra functionality.

	* IIOP/lib/connect.cpp: There was a syntax error (missing comma)
	in one of the ACE_DEBUG statements which has been fixed.

	* IIOP/lib/corbacom.{hh,cpp}: Added class CORBA_String_var as well
	as the CORBA compliant CORBA_string_dup.

	* IIOP/lib/except.hh: Moved CORBA_Exception_ptr declaration to orb.hh.

	* IIOP/lib/object.hh: Added an abstract class
	TAO_Operation_Table. CORBA_Object maintains a pointer to this
	abstract class. The IDL compiler will eventually generate concrete
	classes that employ different lookup strategies for operation name
	lookup.

	* IIOP/lib/orb.hh: Added forward declarations to all CORBA_*
	classes. In addition, moved all the CORBA_*_ptr declarations here.

	* IIOP/lib/orbobj.{hh,cpp}: Added the CORBA compliant BOA_init
	method to class CORBA_ORB. Users can now pass arguments to
	BOA_init. Eventually, we want to make this method return any of
	the specialized OA's depending on the arguments. Right now, we get
	a pointer to the ROA. 

	* IIOP/lib/params.{hh,i}: Added some more methods and enum
	declarations to the ROA_PARAMS singleton. 

	* IIOP/lib/principa.hh: Moved the CORBA_Principal_ptr declaration
	to orb.hh.

	* IIOP/lib/roa.{hh,cpp}: Moved some functionality to boa.hh. ROA
	is now only a specialized form of BOA.

	* IIOP/lib/stub.hh: Moved the typedef for "skeleton" to orb.hh.

	* IIOP/lib/svrrqst.{hh,cpp}: Had to rename BOA to CORBA_BOA.

	* IIOP/lib/typecode.hh: Moved the CORBA_TypeCode_ptr declaration
	to orb.hh.

Tue Apr 22 23:30:19 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/connect.cpp (open): Added log message.

	* IIOP/lib/params.cpp (concurrency_strategy): Uses reactive
 	strategy when appropriate.

	* IIOP/lib/params.hh: Reactive strategy added.

Tue Apr 22 21:03:15 1997  Chris Cleeland  <cleeland@tango.cs.wustl.edu>

	* IIOP/lib/giop.cpp: Changed erroneous ACE_GUARD calls to ACE_GUARD_RETURN
 	calls.

Tue Apr 22 16:15:52 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/lib/roa.cpp: Removed more POSIX thread calls.

	* IIOP/lib/invoke.cpp: Changed ForceSynchronousCancellation to
 	ACE_Synchronous_Cancellation_Required and made it use the ACE_OS
 	calls.

	* IIOP/lib/{typecode,svrrqst,request,principa,orbobj,nvlist,iiopobj,giop,except,any}.*:
 	Removed all vestiges of pthread mutexes...they are now
 	ACE_Thread_Mutexes.  This will likely have to change if we want to
 	compile something completely devoid of threads, but that's another
 	day.  Also, the mutexes have moved from being globals to being
 	members on the respective classes.  No files should be dependent
 	on thread.hh any longer.

	* IIOP/lib/connect.cpp (open): Removed code obsoleted by use of
 	the Strategy_Acceptor.

	* IIOP/lib/{roa.cpp,connect.cpp},IIOP/tests/svr.cpp: Changes to
 	use new singletons described below.

	* IIOP/lib/params.*: Changed ROA_Parameters and ROA_Factory to use
 	ACE_Singleton<>.  The singleton types are now named ROA_PARAMS and
 	ROA_FACTORY.

Mon Apr 21 23:44:34 1997  Douglas C. Schmidt  <schmidt@flamenco.cs.wustl.edu>

	* IIOP/lib/roa.cpp (ROA): Changed spelling of clientAcceptor_ to
 	client_acceptor_ to be consistent with ACE style conventions.

Mon Apr 21 10:52:42 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/test/clnt.cpp: Moved call to CORBA_ORB_init() prior to the
 	parsing of the command line args.  This got switched around during
 	porting to VxWorks.

	* IIOP/lib/roa.cpp: Changed calls using clientAcceptor_to use APIs
 	vended by ACE_Strategy_Acceptor.

	* IIOP/lib/roa.hh: Moved default thread flags into ROA_Factory.

	* IIOP/lib/params.*: Added ROA_Factory, a singleton which is the
 	beginning of an abstract factory dynamically producing runtime
 	strategies based on information found in ROA_Parameters.

	* IIOP/lib/connect.cpp: Added call to ROA_Handler's base class
 	CTOR in initializer list.

	* IIOP/lib/connect.hh: Changed ROA_Handler's CTOR so that it can
 	take an optional ACE_Thread_Manager* arg.  This makes it
 	compatible with the CTORs for the base class.  Also changed base
 	class for ROA_Acceptor to ACE_Strategy_Acceptor.

	* IIOP/lib/svrrqst.*: Changed references to BOA_ptr from TOA_ptr.

	* IIOP/lib/connect.*: ROA_Handler/ROA_Acceptor moved from roa.*
 	into here.

	* IIOP/lib/params.*: ROA_Parameters moved from roa.* into here.

	* IIOP/lib/boa.*: What used to be TOA is now BOA, and lives in
 	here.

	* IIOP/lib/roa.*: Major restructuring required removal of all
 	classes (see other log entries) from here.  This file now houses
 	only the ROA class.

	* IIOP/lib/{tcpoa.*,toa.*}: Removed because of name changes from
 	TCP_OA->ROA and TOA->BOA.

Fri Apr 18 08:09:19 1997  Brian Mendel   <bmendel@mdc.com>

	* cdr.hh,corbacom.{hh,cpp},giop.cpp,marshall.cpp,typecode.cpp:
 	Changes required for WChar missed in earlier committed code.
	
	* connmgr.cpp: Changes required for select statement.
	
	* nvlist.cpp: Conditional include for memory.h added.  VxWorks
 	does not have memory.h.

	* object.cpp: Added conditional for VXWORKS to define
 	IID_IUnknown.
	
	* orbconf.hh: Minor tuning of the configuration file.
	
	* tcpoa.{hh,cpp}: Added VXWORKS conditional includes.

	* toa.cpp: Added VXWORKS conditional includes.


Mon Apr 15 17:01:00 1997  Brian Mendel  <bmendel@mdc.com>

	* roa.cpp: Added return statement to ROA_Handler::open(void*)
 	method.
	
	* giop.cpp: Modified giop::read_buffer to replace undefined fc
 	with peer.get_handle().  Modified giop::incoming_message method
 	parameter list to match function prototype exactly.
	
	* tcpoa.cpp: Replaced fd instances in debug messages with
 	peer.get_handle() calls.

Mon Apr 14 13:45:54 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* roa.{hh,i,cpp},tcpoa.cpp,svr.cpp: Replaced ACE_ROA with
 	ROA_Parameters, which is a GoF-style singleton.

Sun Apr 13 00:01:56 1997  Chris Cleeland  <cleeland@tango.cs.wustl.edu>

	* roa.cpp: Fix continuation condition in ROA_Handler::svc()'s loop
 	so that it doesn't stop after one iteration.  Also added some
 	debug messages.

	* giop.cpp: Fixed some returns being called with no value.  This
 	should have been caught in the previous round of changes.

Sat Apr 12 23:10:08 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* tcpoa.{hh,cpp}: TCP_OA::handle_message() now returns a value
 	indicating how a message was handled.

	* roa.cpp: ROA_Handler::handle_input() now returns a meaningful
 	value based on what TCP_OA::handle_message() returns.

	* giop.{hh,cpp}: Added end-of-file detection on socket
 	connections, and that is now propagated all the way back up
 	through GIOP::incoming_message().  I don't know if I violated
 	something in the spec by doing this, but it was necessary.  I'll
 	look into it later.

Thu Apr 10 11:49:44 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* giop.{hh,cpp}: Overloaded all methods dealing with connections
 	so that there are two, one taking a file descriptor as argument,
 	the other taking an ACE_SOCK_Stream.  Right now, the *_Stream
 	version simply forwards to the fd-based one.  I would have
 	preferred to get rid of the fd-based methods altogether, but we've
 	only converted the server runtime; the client is still using the
 	original sun code, which is effectively fd-based.  In the course
 	of doing this, I also simplified the decls for incoming_message by
 	creating typedefs for some of the function pointers passed as
 	args.

	* orbconf.hh: Fixed the stupid auto-endian-ness detector
 	AGAIN...had my logic reversed!

	* roa.cpp: Adjusted code in accordance with changes to tcpoa.hh.

	* tcpoa.hh: Moved and renamed TCP_OA::dispatch_context to be
 	::Dispatch_Context, and changed its endpoint member to be an
 	ACE_SOCK_Stream.

	* roa.hh: Fixed handle_input() to use the underlying peer() data
 	member for reading data, rather than using its argument.  This is
 	so that when a different thread handles each connection,
 	handle_input() can simply be called repeatedly by svc().

Wed Apr  9 16:19:21 1997  Chris Cleeland  <cleeland@tango.cs.wustl.edu>

	* tcpoa.cpp: Fixed a problem that G++ didn't notice regarding
 	changing the notion of endpoints in servers from server_endpoint
 	to an ACE_HANDLE.

Wed Apr  9 15:43:37 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* svr.cpp: The -p option is gone, and -e takes its place and is
 	required.  This requires the user to specify not only the port
 	number, but also the IP address of on which the server should
 	listen for requests.  See ACE_INET_Addr documentation for valid
 	string formats for addresses.  Also, the -t option sets the "use
 	threads" global.

	* orbconf.hh: Hopefully resolved the tension between MS and Unix
 	platforms in inferring endian-ness of the target platform based on
 	preprocessor defines.  We now check for i386, _M_X86, and vax
 	(yeah, like we really worry about that, but it's easy to do).

	* roa.{hh,i,cpp}: Added support for spawning threads to handle
 	incoming requests.  This involves a state flag for whether or not
 	to use threads, calling activate() in ROA_Handler::open() if that
 	flag is set, and creating ROA_Handler::svc() that simply loops
 	calling handle_input().
	
Tue Apr  8 11:14:57 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/test/svr.cpp: Moved setting of upcall(), forwarder(),
 	context(), etc. into here rather than in TCP_OA::TCP_OA(), which
 	is where I mistakenly stuck them a few days ago (duh!).

	* IIOP/lib/tcpoa.cpp: Removed setting of ACE_ROA::upcall(), which belongs
 	in the server code.  I got confused because the function names
 	were so similar: tcpoa.cpp contains ::tcp_oa_dispatcher(), and
 	svr.cpp contains ::tcpoa_dispatch().

	* IIOP/lib/roa.{hh,i,cpp}: Added forwarding function to ACE_ROA global namespace
 	hack.

	* IIOP/lib/orbconf.hh: Fixed preprocessor checks that auto-detect
 	endian-ness of this processor.

Mon Apr  7 21:08:24 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/test/test1_{clnt,svr}.cpp: THESE HAVE NOT BEEN CONVERTED TO
 	USE ACE EVENT HANDLING!!  This round of changes explicitly
 	instantiates templates where required.

	* IIOP/test/svr.cpp: Global function ::OA_listen() no longer
 	exists; its functionality is now fully contained within ::main().
  	If USE_ACE_EVENT_HANDLING is defined, a Reactor-based event loop
 	is used.  The original intent was to allow conditional compilation
 	to select btw. the original method and a Reactor-based method.
  	However, weaving that into the library proved far more difficult
 	than anticipated, so more than likely not defining
 	USE_ACE_EVENT_HANDLING will cause massive grief.

	* IIOP/lib/toa.cpp: Changed call to TCP_OA::init() to reflect new
 	ACE_INET_Addr argument type.

	* IIOP/lib/tcpoa.cpp (TCP_OA): All initialization methods were
 	changed, specifically the CTOR and TCP_OA::init, to reflect the
 	introduction of ACE_INET_Addr.  Two side-effects of using
 	ACE_INET_Addr are that (1) a server can specify the address on
 	which it wants to listen and (2) best that I can tell, the server
 	MUST specify the address on which it wants to listen because
 	otherwise it won't be able to publish a rational IOR.  The event
 	loop is now changed to simply loop on Reactor::handle_events().

	* IIOP/lib/tcpoa.hh (TCP_OA): Removed vestiges of this component's
 	use of the original connection management scheme.  Where
 	appropriate, hostnames and ports were replaces by ACE_INET_Addr,
 	endpoints by ACE_HANDLEs, etc.  One particularly nasty thing done
 	was to declare ROA_Handler as a friend so that handle_message()
 	can be called from ROA_Handler::handle_input(), which to me
 	exposes a hole in the original architecture wherein input is
 	"pulled" rather than waited-for.  We might need to re-think how
 	this is handled within TAO.

	* IIOP/lib/roa.{hh,i,cpp}: These files contain the required
 	components to support the new server-side ACE-based
 	connection/event substrate.  The client side remains, as always,
 	using the connection mgmt scheme used by the original Sun IIOP
 	code.

	* IIOP/lib/giop.cpp: Added explicit template instantiation for
 	when this is needed.

	* IIOP/lib/corbacom.hh: Now protects itself from multiple
 	inclusion.

	* IIOP/lib/Makefile: Added roa.* where appropriate.

Wed Mar 19 10:25:21 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* IIOP/docs/us/codecount/*.count: Added to repository.

	* Makefile: Added to repository.

	* IIOP/objbase.h: Moved to IIOP/compat.

	* IIOP/initguid.h: Moved to IIOP/compat.

Thu Mar 13 14:06:28 1997  Chris Cleeland  <cleeland@cs.wustl.edu>

	* ChangeLog: Added the ChangeLog.
	

