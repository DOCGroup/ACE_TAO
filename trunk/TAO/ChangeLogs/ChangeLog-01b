Sun Jul 01 11:18:47 2001  Balachandran  <bala@cs.wustl.edu>

        * TAO version 1.1.18 released.

Fri Jun 29 16:57:47 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/Reliable_Oneways/client.cpp:
        * tests/Reliable_Oneways/run_test.pl:
        * tests/Reliable_Oneways/run_sync_with_server.pl:
        * tests/Reliable_Oneways/run_sync_with_target.pl:
        * tests/Reliable_Oneways/run_sync_with_transport.pl:

          Reduced the number of default iterations in the client, and
          lengthened the client timeout in the above perl scripts.
          When the number of iterations reaches 2/3 of the total,
          the test shuts down the server ORB. While the server ORB
          shuts down, the client makes a few more iterations. At that
          point, the client starts trying to establish a connection
          at each iteration. On Win32 platforms, it takes about a
          second for the (unsuccessful) attempt, and the perl scripts
          were timing out the client.

Fri Jun 29 11:41:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Big_Reply/client.cpp:
	* tests/Big_Reply/server.cpp: Relaxed the tests a bit. The server
	  now sends only 7MB of data. TAO has this problem of sending one
	  large 8MB data chunk. So got this down to 7MB. The client now
	  requests for data only 10 times instead of 1000 times. After the
	  bug fix in bug 575 branch, it was observed that fetching 10MB of
	  data for a long time slows down the machine a lot. Looks like it
	  is a TCP'ism.

Fri Jun 29 09:06:56 2001  Ossama Othman  <ossama@uci.edu>

	* tao/ORBInitInfo.h (TAO_ORBInitInfo_var):

	  Added missing TAO_Export macro.  Fixes link errors on MS
	  Windows.

Fri Jun 29 09:24:36 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynUnion_i.cpp:

          Fixed an uninitialized variable.

Fri Jun 29 07:09:16 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/DynamicAny/DynUnion_i.cpp: Fixed a warning in g++.

Fri Jun 29 03:14:14 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao/Strategies/Reactor_Per_Priority.cpp (reactor): Changed to
	  use the new CORBA_Priority_Normalizer class.

	* tao/RTCORBA/RT_ORB.cpp (class TAO_RT_CORBA_Priority_Normalizer):
	  Added new class.  The class does the correct corba priority
	  normalization when RT CORBA is used.

	* tao/ORB_Core (TAO_CORBA_Priority_Normalizer): Added new class
	  TAO_CORBA_Priority_Normalizer.  This class is an abstract class
	  used to prevent dependencies between the Strategies and the
	  RTCORBA library.

Thu Jun 28 23:49:13 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao/RTCORBA/Linear_Priority_Mapping.cpp (TAO_Linear_Priority_Mapping):
	* tao/RTCORBA/Direct_Priority_Mapping.cpp (TAO_Direct_Priority_Mapping):

	  We have special behavior for SUNs.  This is because the results
	  from ACE_Sched_Params::priority_min() and
	  ACE_Sched_Params::priority_max() are not correct.

	* tao/Strategies/Reactor_Per_Priority.cpp (reactor): We need to
	  "normalize" the corba priority of the endpoint.  Here is the
	  explanation for going from CORBA priority to Native
	  and back again:

	  Suppose the user specifies 20,000 as the (CORBA) priority for a
	  endpoint.  20,000 will be mapped to the native priority (say 10)
	  when the thread is created.  When the thread goes to access it's
	  reactor, the native priority will be converted to the CORBA
	  priority (say 19,000) which is used to look up the reactor.
	  There is a loss of precision in this conversion.

	  We use the same two step normalization here.  Otherwise, we'll
	  get a reactor which is different than the one used by the
	  endpoint thread(s).

Thu Jun 28 18:56:17 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Container_i.cpp:

          Cosmetic changes.

        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:

          Fixed the setting of the UnionMembers's label value
          for the default case, when creating a UnionDef in the IFR.

        * tao/DynamicAny/DynUnion_i.cpp:

          Fixed set_discriminator() so it will work even if
          the DynUnion's own discriminator is modified with
          insert_*() and then passed to this function.

        Thanks to Philippe Merle <Philippe.Merle@lifl.fr> for
        pointing out the above bugs.

Thu Jun 28 15:30:53 2001  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):

	  Fixed memory leak that appeared as a result of the downcast
	  fixes for the TAO_ORBInitInfo class.

Thu Jun 28 15:01:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:

          Fixed initialization of the return value (in an operation
          or the _get version of an attribute) to work for
          longlongs and long doubles by using the portable
          macros defined in ace/CDR_Base.h.

Thu Jun 28 10:03:44 2001  Ossama Othman  <ossama@uci.edu>

	* tao/ORBInitInfo.inl (orb_core):

	  New file that contains accessor to the underlying TAO_ORB_Core
	  pointer.  Some users need access to it to gain access to the
	  ORB's Reactor, for example.

	* tao/ORBInitInfo.h:
	* tao/ORBInitInfo.cpp:

	  Updated these files to support the new accessor accordingly.

	  Fixed downcast operations (_narrow(), etc) for the
	  TAO_ORBInitInfo type (not PortableInterceptor::ORBInitInfo) so
	  that their semantics are consistent with the C++ mapping defined
	  semantics.

	  Added missing "TAO_ORBInitInfo_var" class and corresponding
	  support methods.

Thu Jun 28 11:04:49 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynUnion_i.cpp (set_discriminator):

          Applied patch sent in by Philippe Merle <Philippe.Merle@lifl.fr>

Thu Jun 28 08:39:21 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/driver/drv_args.cpp:

          Bug report by Burkhard Neppert <b.neppert@dr-staedtler.de>
          stated that tao_idl was crashing if passed an option like
          -o<output_dir> instead of -o <output_dir>. Fixed that to
          give an error message instead, and applied the same fix to
          the -t and -g options.

Wed Jun 27 22:02:03 2001  Chris Cleeland  <cleeland_c@ociweb.com>

	* orbsvcs/Naming_Service/README: Updated this to reflect the fact
 	that multicast response is no longer the default.

Wed Jun 27 14:25:48 2001  Chris Cleeland  <cleeland_c@ociweb.com>

	* tao/PortableServer/Operation_Table.cpp (find): Enhanced the
 	  error message reported when the lookup of the operation fails;
 	  it now prints out the operation it was looking for along with
 	  the length.  Also set the 'skelfunc' reference argument to zero
 	  in case of an error, insuring that NOT checking the return value
 	  and using the skelfunc will still get an error closer to the
 	  problem.

Wed Jun 27 15:18:21 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/Explicit_Event_Loop/client.cpp:
        * tests/Explicit_Event_Loop/server.cpp:

          Replaced cout and cerr with ACE_DEBUG and ACE_ERROR,
          other cosmetic changes.

Wed Jun 27 14:15:13 2001  Sharath R. Cholleti  <sharath@cs.wustl.edu>

	* tao/skip.cpp:

	  Changed TAO_Marshall_WString::skip() to use skip_wstring() instead
	  of skip_wchar(). This has been made necessary according to the
	  changes made to skip_wchar() for GIOP 1.2 (BUGID 945)

Wed Jun 27 11:24:03 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/Param_Test/anyop.dsp:
        * tests/Param_Test/client.dsp:
        * tests/Param_Test/server.dsp:

          Removed unnecessary links to TAO_Strategies library.

Tue Jun 26 14:47:59 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAny_i.cpp (set_to_default_value):

          Modified the case for CORBA::tk_objref to set the member
          Any's value to 0, in addition to initializing the type
          code. Failure to do this was causing interoperability
          problems with CorbaScript. Thanks to Philippe Merle
          <Philippe.Merle@lifl.fr> for reporting this bug.

        * tao/DynamicAny/DynCommon.cpp (set_flag):

          Added CORBA::tk_value_box to the list of TCKinds that
          throw CORBA::NO_IMPLEMENT, along with tk_value and
          tk_fixed.

Tue Jun 26 09:55:24 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Oneways_Invoking_Twoways/Sender_i.cpp: Fixed a warning in
	  KCC.

Mon Jun 25 15:05:48 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:
        * tao/DynamicAny/DynStruct_i.cpp:
        * tao/DynamicAny/DynUnion_i.cpp:

          Made numerous fixes to unalias the class's member
          type code before calling a type code method that cannot
          be called by an aliased type code, plus a fix to the
          insert_reference() function. Thanks to Philippe Merle
          <Philippe.Merle@lifl.fr> for pointing out these problems.

Mon Jun 25 14:51:39 2001  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/examples/Log/test/BasicLog_Test.cpp:

          Replaced the usage of ostrstream with ACE_CString.  The inclusion
          of strstream.h was causing a build failure for AIX due to the
          indirect inclusion of iostream.h.

Mon Jun 25 13:56:47 2001  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Trading/Makefile:

          Removed a warning about overriding commands for libTTest.a.

Mon Jun 25 12:05:10 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Incoming_Message_Queue.h:
	* tao/Incoming_Message_Queue.cpp:
	* tao/Incoming_Message_Queue.inl:
	* tao/LIST_OF_TODO:
	* tao/GIOP_Message_State.inl: Removed the following from the main
	  trunk. They were supposed to be in my branch. Not sure how they
	  got popped into the main trunk.

Mon Jun 25 11:12:51 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.h:

          In the yacc file, added a switch case for unsigned short
          to the code that processes a union discriminator. This
          case has always been missing. Also regenerated the
          corresponding C++ files. Thanks to Jules Colding
          <dsl11814@vip.cybercity.dk> for sending in the example
          IDL file that uncovered this bug.

Mon Jun 25 10:32:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_module.cpp:

          Removed code that added "ValueBase" to the lookup table, since
          this string is now an IDL keyword. This was causing name clash
          errors in any IDL file that included orb.idl. Thanks to Michael
          Kircher <Michael.Kircher@mchp.siemens.de> for reporting the
          problem.

Mon Jun 25 07:20:42 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Oneways_Invoking_Twoways/client.dsp: Fixed a link error in
	  win32 builds.

Mon Jun 25 06:58:42 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Oneways_Invoking_Twoways/Receiever_i.cpp: Fixed a compile
	  error in Static minimum builds.

Mon Jun 25 13:46:05 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor: Added Oneways_Invoking_Twoways
        * tests/Exposed_Policies/*.bor: updated to reflect new RT libraries
        * tests/Oneways_Invoking_Twoways/*.bor: corrected

Sun Jun 24 19:38:03 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Oneways_Invoking_Twoways/Sender_i.cpp: Fixed a warning
	  with g++ builds.

Sun Jun 24 17:26:17 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/default_resource.cpp (init): Disabled the lock that is used
	  by the data_blocks during reference counting for single threaded
	  builds. This is now sort of hacked. We disable the lock if the
	  transport cache lock is disabled. The right way to do this would
	  be to revisit this when we fix bug #940.

Sun Jun 24 16:48:54 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/ORB_Core.h:
	* tao/ORB_Core.i: Provided accessor for the locks that are used to
	  lock the data blocks during reference counting.

Sun Jun 24 10:09:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Oneways_Invoking_Twoways/client.dsp:
	* tests/Oneways_Invoking_Twoways/server.dsp:
	* tests/Oneways_Invoking_Twoways/Oneways_Invoking_Twoways.dsw:
	  Files for Win32 builds.

Sun Jun 24 08:59:56 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Makefile: Added Oneways_Invoking_Twoways to the builds.

Sun Jun 24 08:42:23 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Oneways_Invoking_Twoways: Another stress test that clearly
          brings the problem in bug 575 to the fore.

        * tests/Oneways_Invoking_Twoways/Client_Task.cpp:
        * tests/Oneways_Invoking_Twoways/Sender_i.h:
        * tests/Oneways_Invoking_Twoways/server.cpp:
        * tests/Oneways_Invoking_Twoways/Client_Task.h
        * tests/Oneways_Invoking_Twoways/Client_Task.cpp:
        * tests/Oneways_Invoking_Twoways/Receiver_i.cpp:
        * tests/Oneways_Invoking_Twoways/Receiver_i.h:
        * tests/Oneways_Invoking_Twoways/Server_Task.h:
        * tests/Oneways_Invoking_Twoways/Server_Task.cpp:
        * tests/Oneways_Invoking_Twoways/client.cpp:
        * tests/Oneways_Invoking_Twoways/Makefile:
        * tests/Oneways_Invoking_Twoways/Makefile.bor:
        * tests/Oneways_Invoking_Twoways/svcconf:
        * tests/Oneways_Invoking_Twoways/Test.idl:
        * tests/Oneways_Invoking_Twoways/README:
        * tests/Oneways_Invoking_Twoways/Sender_i.h:
        * tests/Oneways_Invoking_Twoways/Sender_i.cpp:
        * tests/Oneways_Invoking_Twoways/run_test.pl:
        * tests/Oneways_Invoking_Twoways/run_test_svc.pl: New files for
          the test.

Fri Jun 22 22:00:00 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp

          Change usage message to reflect the multicast discovery
          of the Naming Serivce is OFF by default.

Fri Jun 22 18:31:35 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * orbsvcs/orbsvcs/Event/Event_Channel.cpp (dump_event):

          Fixed a compile error on Sun CC42.

Fri Jun 22 13:20:19 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * tao/Acceptor_Registry.cpp:
        * tao/Connection_Handler.h:
        * tao/Pluggable.h:
        * tao/Profile.h:
        * tao/Transport.h:
        * tao/Strategies/UIOP_Connector.cpp:

          Fix some pluggable protocol-related comments.  Most of the
          changes were trivial typo or grammar fixes but the
          TAO_Transport::send_i() Doxygen documentation was fixed to
          reflect the current reality.

Fri Jun 22 09:24:54 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Protocols_Hooks.cpp:
        * tao/Stub_Factory.cpp:

          Added template instantiations to fix up the noinline
          builds.

Fri Jun 22 07:06:52 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/Event_Service/Makefile:
        * docs/tutorials/Quoter/RT_Event_Service/Makefile: Updated
          dependencies.

Fri Jun 22 08:14:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/RTCorba/*.bor
          Updated all BCB makefiles for the RTCorba tests because of the
          splitting to the RTCorba and RTPortableServer libraries

Fri Jun 22 01:07:02 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * performance-tests/Cubit/TAO/MT_Cubit/client.h (MT_Priority):

          Made the destructor virtual to fix warning under gcc-3.0.

Thu Jun 21 21:31:59 2001  Ossama Othman  <ossama@uci.edu>

        * utils/nslist/nslist.cpp:

          Integrated a patch from Sandro Doro <sandro@dorogroup.com> that
          fixes an crash when using the nslist utility on a pure IIOP IOR
          when the SSLIOP pluggable protocol is loaded.

          Added remaining missing emulated exception support.

Thu Jun 21 21:06:17 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Client_Protocol/server.cpp:
        * tests/RTCORBA/Client_Propagated/server.cpp:
        * tests/RTCORBA/Explicit_Binding/server.cpp:
        * tests/RTCORBA/Private_Connection/server.cpp:
        * tests/RTCORBA/Server_Protocol/server.cpp:
        * tests/RTCORBA/Thread_Pool/server.cpp:

          Added RTPortableServer.h include to statically link in the
          RTPOA for static builds.

Thu Jun 21 20:38:47 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Explicit_Binding/server.dsp:

          Forgot to add changed DSP file from previous Explicit_Binding
          checkin.

Thu Jun 21 13:00:31 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/PAO.h:
        * tao/PortableServer/PortableServerC.h:

          Set inheritance from PortableServer::POA in class TAO_POA to be virtual.

          Added new method (_tao_poa_downcast) to safely downcast instances of
          PortableServer::POA to TAO_POA. This method has to be used instead
          of ACE_dynamic_cast for downcasting the POA.

Thu Jun 21 12:57:34 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * docs/ec_options.html:
        * docs/cec_options.html:

          Add a note warning of deadlocks when the immediate
          update strategy is used on the proxy collections with
          the reactive value of the dispatching and consumer/supplier
          control options.

Thu Jun 21 10:00:32 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:

          Fixed setting in the release version.

Thu Jun 21 09:47:59 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Explicit_Binding/server.cpp:
        * tests/RTCORBA/Explicit_Binding/Makefile:
        * tests/RTCORBA/Explicit_Binding/svc.conf:

          Added RTCORBA libraries to server program for MSVC.  Technically,
          the server doesn't need them, but it makes the usage consistent
          with want is begin done on other operating systems and it's
          less confusing.  Also, client needed proper svc.conf entry
          for RTCORBA to work right.

Thu Jun 21 09:47:48 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connector.h: Fixed a warning in g++.

Thu Jun 21 07:49:15 2001  Chad Elliott  <elliott_c@ociweb.com>

        * examples/OBV/Simple_util.h:
        * examples/Persistent_Grid/Simple_util.h:
        * examples/Simple/Simple_util.h:

          Added ()'s around file name in the pragma implemenation directive.

        * performance-tests/Cubit/TAO/MT_Cubit/Task_Client.h:

          Add AIX Visual Age C++ to the workaround for math.h.

        * orbsvcs/orbsvcs/AV/AVStreams_i.h:
        * orbsvcs/orbsvcs/AV/Transport.h:
        * tao/IIOP_Connector.cpp:
        * tao/IIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.h:

          Moved #include "ace/Connector.h" to be after #include of the
          specific connector type to fix compile error on AIX, Visual Age
          C++ 5.

Thu Jun 21 06:52:02 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/RTCorba/Multiple_Endpoints/Common/Makefile:
          Updated dependencies.

Wed Jun 20 19:20:15 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/run_test.pl:
        * tests/RTCORBA/Banded_Connections/bands.unix:

          There was a change in priority ranges between Solaris 5.7 and
          5.8. For the SCHED_OTHER policy, the ranges are:

          Sun 5.8 Minimum =   0 Maximum = 59
          Sun 5.7 Minimum = -60 Maximum = 60

          Therefore, the above scripts were updated to reflect the new
          range.  Similar changes may be needed for the other RT tests.

Wed Jun 20 18:45:40 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * performance-tests/RTCorba/Multiple_Endpoints/Common/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Endpoint_Per_Priority/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Orb_Per_Priority/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Single_Endpoint/Makefile:

          Updated Makefiles to fix the static builds.

Wed Jun 20 17:37:28 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAnyFactory.cpp:

          Initialized all the TAO_*_i pointers to 0, before they are
          passed to ACE_NEW_THROW_EX, in the make_dyn_any functions.

        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:

          Removed the guards around get_(u)longlong and insert_(u)longlong
          functions. Modified body of get_longlong() to use the new
          ACE_CDR_LONGLONG_INITIALIZER macro added to class ACE. Implemented
          insert_longdouble() and get_longdouble().

Wed Jun 20 15:36:27 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/Client.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/Project.dsw:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/README:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/Server.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/client.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/run-test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/server.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Makefile:

          Removed test. The feature that it was testing (which was deprecated)
          has now been removed from TAO as a result of the RTCORBA
          subsetting.

Wed Jun 20 14:22:47 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/pre_invoke_cs.h:
        * TAO_IDL/be/pre_invoke_cs.cpp:

          When allocating memory for an out parameter in an operation,
          fixed the generated ACE_NEW_RETURN macro to return something
          other than 0 for operation return types of fixed size structs.
          The other case for which this applies is an operation return
          type of enum, which was fixed some time ago. Thanks to
          Jody Hagins <jody@atdesk.com> for sending in the IDL file that
          uncovered this bug.

Wed Jun 20:46:40 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/DynAny_Test/test_dynarray.cpp:
        * tests/DynAny_Test/test_dynsequence.cpp:

          Modified literal constants passed to the [] operator
          of a sequence to explicitly be unsigned.

Wed Jun 20 11:11:13 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/examples/Notify/Filter/Filter.dsp:

          Fixed setting in the release version of the project.

Wed Jun 20 11:04:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/AMI_Buffering/admin.dsp:
        * tests/AMI_Buffering/client.dsp:
        * tests/AMI_Buffering/server.dsp:

          Fixed settings in the release versions of these projects.

Wed Jun 20 10:52:40 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:

          Fixed setting for the release version. Also added
          header files to the project.

Wed Jun 20 10:29:56 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA_Cached_Policies.h:
        * tao/PortableServer/POA_Cached_Policies.i:

          Fixed bug caused by the unintentional removal of setting
          the ImplicitActivationPolicy to IMPLICIT_ACTIVATION on
          the RootPOA under minimum builds.  Since the
          ImplicitActivationPolicy is not compiled for these builds,
          a check was added to the TAO_POA constructor to set it to
          IMPLICIT_ACTIVATION in the cached policies if the POA was
          the root one.  In non-minimal builds, this policy is
          can be set before creating the POA which is the ideal place.
          The special case code is not compiled for non-minimal builds.

Wed Jun 20 09:38:40 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Thread_Pool/client.dsp:

          Fixed typo.

Wed Jun 20 09:29:20 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA/RT_ORB_Loader.h:
        * tao/RTCORBA/RT_ORB_Loader.cpp:

          Added checks to make sure that all of the RTCORBA hooks have
          been successfully registered before allowing an application
          to resolve the RTORB and RTCurrent.  This should make errors
          when the RT CORBA service configurator option is missing
          a little easier to diagnose.  Thanks to Craig Rodrigues for
          instigating this change with his questions.

Wed Jun 20 09:19:32 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/MT_Client_Protocol_Priority/svc.conf:
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.conf:

          Added RT_ORB_Loader to the service configurator files.  Thanks
          to Craig Rodrigues for pointing this out.

Wed Jun 20 07:55:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Fixed a warning in Win32
          debug builds.

Wed Jun 20 07:31:14 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Big_Reply/Big_Reply_i.cpp: Fixed a compile error on
          Linux.
Wed Jun 20 07:48:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor
          Removed the Endpoint_Per_Priority and added the Big_Reply tests

Tue Jun 19 14:45:43 2001  Sharath R. Cholleti  <sharath@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Base.cpp:

          Added the GIOP version info in creation of TAO_InputCDR object
          in more_messages(). This is due to the changes made regarding the
          WChar implementation of GIOP 1.2.

Tue Jun 19 14:35:43 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/DSI_Gateway/README:

          Added reminder that ACE must be compiled with
          ACE_ENABLE_SWAP_ON_WRITE defined if the gateway is to
          correctly process requests and/or replies that are not
          in its native byte order.

Tue Jun 19 12:27:39 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/Endpoint_Per_Priority/Makefile.bor:
        * tests/Endpoint_Per_Priority/client.conf:
        * tests/Endpoint_Per_Priority/run_test.pl:
        * tests/Endpoint_Per_Priority/server.cpp:
        * tests/Endpoint_Per_Priority/test_i.cpp:
        * tests/Endpoint_Per_Priority/Endpoint_Per_Priority.dsw:
        * tests/Endpoint_Per_Priority/README:
        * tests/Endpoint_Per_Priority/client.cpp:
        * tests/Endpoint_Per_Priority/server.bor:
        * tests/Endpoint_Per_Priority/server.dsp:
        * tests/Endpoint_Per_Priority/test_i.h:
        * tests/Endpoint_Per_Priority/Makefile:
        * tests/Endpoint_Per_Priority/client.bor:
        * tests/Endpoint_Per_Priority/client.dsp:
        * tests/Endpoint_Per_Priority/server.conf:
        * tests/Endpoint_Per_Priority/test.idl:
        * tests/Endpoint_Per_Priority/test_i.i:
        * tests/Endpoint_Per_Priority:
          Removed test. The feature it was testing (which was deprecated)
          has now been removed from TAO as a result of the RTCORBA
          subsetting.

Tue Jun 19 12:25:09 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/Stub.cpp:
        * tao/Stub.h:
        * tao/Sync_Strategies.cpp:

          Changed handling of how to get a buffering constraint policy
          to make it consistent with other policies and also to fix
          mishandling of the memory for the policy.

        * tests/RTCORBA/Private_Connection/server.cpp:
        * tests/RTCORBA/Thread_Pool/client.cpp:
        * tests/RTCORBA/Thread_Pool/client.dsp:

          Added RTCORBA includes and added the RTCORBA library to
          client.dsp.

Tue Jun 19 10:38:07 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Server_Protocol/client.cpp:

          Added RTCORBA.h include as it has been removed (indirectly?)
          somehow.

Tue Jun 19 09:46:30 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/Exposed_Policies/Makefile:

          Added guards to Makefile to prevent compilation on
          minimum CORBA builds, since this test uses both
          RTCORBA and Messaging features.

Tue Jun 19 07:26:59 2001  Chad Elliott  <elliott_c@ociweb.com>

        * docs/tutorials/Quoter/AMI/Stock_i.h:
        * docs/tutorials/Quoter/Naming_Service/Stock_i.h:
        * docs/tutorials/Quoter/On_Demand_Activation/Stock_i.h:
        * docs/tutorials/Quoter/Simple/Impl-Repo/Stock_i.h:
        * docs/tutorials/Quoter/Simple/ImprovedServer/Stock_i.h:
        * docs/tutorials/Quoter/Simple/Persistent/Stock_i.h:
        * docs/tutorials/Quoter/Simple/Server/Stock_i.h:

          Add a conditional macro to only use std::string on platforms other
          than HPUX.

Mon Jun 18 22:03:25 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Big_Reply/Big_Reply.dsw:
        * tests/Big_Reply/server.dsp:
        * tests/Big_Reply/client.dsp: Win32 files for compilation.

Mon Jun 18 20:32:07 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Big_Reply: A new test for testing whether the server ORB
          can send large replies to the client without hanging. This test
          depicts a situation that is one of the motivating factors for a
          need to fix bug 575.

        * tests/Big_Reply/Big_Reply_i.cpp:
        * tests/Big_Reply/Big_Reply_i.h:
        * tests/Big_Reply/Client_Task.cpp:
        * tests/Big_Reply/Client_Task.h:
        * tests/Big_Reply/Makefile:
        * tests.Big_Reply/Makefile.bor:
        * tests/Big_Reply/README:
        * tests/Big_Reply/Test.idl:
        * tests/Big_Reply/client.bor:
        * tests/Big_Reply/client.cpp:
        * tests/Big_Reply/run_test.pl:
        * tests/Big_reply/server.bor:
        * tests/Big_Reply/server.cpp: Files for this test. This test will
          not work till we checkin the fix for bug 575. But we wanted to
          have this test in the daily builds.

        * tests/Makefile: Added the above test to the Makefile.

Mon Jun 18 18:58:00 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * tests/ior_corbaloc/run_test.pl:

          Minor fix to eliminate one failing test.

Mon Jun 18 13:01:32 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Policy_Set.cpp:

          Fixed compile error on Tru64.  Thanks to Kitty for
          reporting the problem.

Mon Jun 18 11:32:48 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Handler.cpp
          (read_message): Removed a superfluous check that I added for
          debugging.

Mon Jun 18 11:07:27 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Policy_Set.cpp:

          Added code to clear out the policy cache when overriding
          policies using the SET_OVERRIDE option.  This fixes the
          segfaults in the AMI tests.

        * tao/Default_Protocols_Hooks.cpp:
        * tao/TAO_Internal.cpp:

          Fixed default protocols service configurator name and
          statically added it in TAO_Internal.cpp.  This fixes
          a 16 byte memory leak.

        * tao/orbconf.h:
        * tao/ORB_Core.cpp:

          Added guards around code that uses sync scope and
          relative roundtrip timeout policies so that they can
          be individually disabled without producing compiler
          errors.

Mon Jun 18 10:38:02 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/PortableServer/Default_Policy_Validator.cpp:
        * tao/PortableServer/Object_Adapter.cpp:

          Added TAO_HAS_MINIMUM_POA guards to help get the
          minimum build compiling again.

Mon Jun 18 10:15:46 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/Exposed_Policies/Client.dsp:
        * tests/Exposed_Policies/Server.dsp:

          Added RTCORBA libraries to linker list, and changed the
          names of the projects to "Exposed_Policies Client" and
          "Exposed_Policies Server" from "Client" and "Server".

Mon Jun 18 09:47:07 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:

          Added ACE_LACKS_LONGLONG_T guards around get_longlong,
          get_ulonglong, insert_longlong, and insert_ulonglong.

Mon Jun 18 09:01:48 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynStruct_i.cpp:

          Added a patch sent in by Philippe Merle <Philippe.Merle@lifl.fr>
          that corrects the initialization of a DynStruct from an Any that
          contains an exception by first extracting the repo id.

Sun Jun 17 18:24:18 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * performance-tests/RTCorba/Multiple_Endpoints/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/server.cpp:
          Fixed compilation problems by adding the missing include, and
          regenerated dependencies.

Sun Jun 17 10:12:49 2001  Craig Rodrigues  <crodrigues@bbn.com>

        * tests/RTCORBA/MT_Client_Protocol_Priority/client.cpp:
          add #include "tao/RTCORBA/Priority_Mapping_Manager.h" to fix
          compilation error.

Sun Jun 17 08:08:52 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Base.cpp: Fixed a
          compile error with KCC.

Sat Jun 16 22:00:00 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp
        * orbsvcs/orbsvcs/AV/RTP.cpp
        * orbsvcs/orbsvcs/AV/Transport.cpp
        * orbsvcs/orbsvcs/AV/UDP.cpp

          Fixes so that specifying a flow specification of RTP/UDP
          will actually result in RTP over UDP being used.

        * orbsvcs/orbsvcs/AV/QoS_UDP.i

          Remove compiler warning.

Sat Jun 16 18:23:43 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Handler.cpp:
        * orbsvcs/orbsvcs/AV/sfp.cpp:
        * orbsvcs/orbsvcs/Event/EC_Dispatching_Task.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Dispatching_Task.cpp: Fixed compile
          errors.

Sat Jun 16 12:15:00 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/benchmark: (removed)
            - does not currently work and has been replaced by
              other AVStreams tests

Sat Jun 16 10:25:16 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/CDR.h:
        * tao/CDR.i: Added an extra flag argument to the constructor to
          keep up with the changes in ACE.

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/Pluggable_Messaging_Utils.cpp:
        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/Synch_Reply_Dispatcher.cpp:
        * tao/DynamicInterface/DII_Reply_Dispatcher.cpp: Added the extra
          flag to the places where the message blocks are constructed.

Fri Jun 15 23:52:44 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Handler.cpp
          (read_message): Added EWOULDBLOCK to one of the expected failure
          and instead of returning 0, retrying the recv operation.  This
          fixed the sporadic failures when sending large message with
          SHMIOP.

Fri Jun 15 20:24:19 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Table.cpp:

          Removed three unnecessary Hash Map related template
          instantiations.

Fri Jun 15 21:14:16 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/RTCORBA/Makefile:

          Updated dependencies as they seem to have gone out of sync.

        * tao/RTPortableServer/Makefile:

          Added missing library to the link line. It caused the link to fail
          on Tru64.

Fri Jun 15 20:55:13 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/Crashed_Callback/Crashed_Callback.cpp (crash_now_please):
        * tests/Faults/test_i.cpp(shutdown):

          Abort the client using _exit() and not abort() on Tru64. For
          some reason the client doesn't abort when abort() is called.

        * examples/POA/Adapter_Activator/run_test.pl:

          Bumped up the timeout a bit to resolve pre-mature exit. The
          real cause of failure of this test has been fixed by chages to
          Active_Map_Manager.

          This fixes problems with the two tests and the previous example.
          All these fixes are related to Blocker Bug Id 912.

Fri Jun 15 20:49:10 2001  Sharath R. Cholleti  <sharath@cs.wustl.edu>

        * tao/Any.cpp
        * tao/Asynch_Reply_Dispatcher.cpp
        * tao/CDR.cpp
        * tao/CDR.h
        * tao/CDR.i
        * tao/GIOP_Message_Base.cpp
        * tao/GIOP_Message_Lite.cpp
        * tao/IIOP_Profile.cpp
        * tao/Invocation.cpp
        * tao/ORB.cpp
        * tao/Pluggable_Messaging_Utils.cpp
        * tao/Synch_Reply_Dispatcher.cpp
        * tao/TAO_Server_Request.cpp
        * tao/DynamicInterface/DII_Reply_Dispatcher.cpp
        * tao/Strategies/SHMIOP_Profile.cpp
        * tao/Strategies/UIOP_Profile.cpp
        * examples/PluggableUDP/DIOP/DIOP_Profile.cpp

          Made changes relating to WChar implementation of GIOP 1.2.

Fri Jun 15 15:13:20 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.cpp:

          Fixed a duplicate instantiation of template. We don't need to
          explicitly define ACE_Null_Mutex as TAO_SYNCH_MUTEX expands to
          ACE_Null_Mutex on Single-threaded builds.

Fri Jun 15 15:10:40 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:

          Fixed a bug which caused the static versions of the libraries
          to be built even when static wasn't specified.

Fri Jun 15 11:20:22 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA/Priority_Mapping.h:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTCORBA/RTCORBAC.h:
        * tao/RTCORBA/RTCORBAC.i:
        * tao/RTCORBA/diffs/RTCORBAC.cpp.diff:
        * tao/RTCORBA/diffs/RTCORBAC.h.diff:
        * tao/RTCORBA/diffs/RTCORBAC.i.diff:

          Removed need for forward references into the RTCORBA
          namespace by Priority_Mapping.h.  This was causing
          problems on SunCC42 and VxWorks since neither one
          allows namespaces to be reopened.  Also cleaned up
          diff files since there were lots of unnecessary differences.

        * tao/RTCORBA/rtcorbafwd.h:

          No longer needed.

        * examples/Buffered_Oneways/Makefile:
        * performance-tests/RTCorba/Oneways/Reliable/Makefile:
        * tao/Makefile.am:
        * tao/RTCORBA/Makefile:
        * tao/RTCORBA/TAO_RTCORBA.dsp:
        * tao/RTCORBA/TAO_RTCORBA_Static.dsp:
        * tao/RTPortableServer/Makefile:
        * tests/Exposed_Policies/Makefile:
        * tests/RTCORBA/Banded_Connections/Makefile:
        * tests/RTCORBA/Client_Propagated/Makefile:
        * tests/RTCORBA/Client_Protocol/Makefile:
        * tests/RTCORBA/Explicit_Binding/Makefile:
        * tests/RTCORBA/MT_Client_Protocol_Priority/Makefile:
        * tests/RTCORBA/Private_Connection/Makefile:
        * tests/RTCORBA/RTMutex/Makefile:
        * tests/RTCORBA/Server_Declared/Makefile:
        * tests/RTCORBA/Server_Protocol/Makefile:
        * tests/RTCORBA/Thread_Pool/Makefile:

          Updated makefiles and project files since rtcorbafwd.h
          was removed.

Fri Jun 15 11:19:40 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynArray_i.cpp:

          Applied patches sent in by Philippe Merle
          <Philippe.Merle@lifl.fr> to fix some initialization
          oversights.

Fri Jun 15 11:11:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/orb.idl:

          Changed the contents of struct NamedValue to conform to
          the current IDL given in the spec (CORBA 2.4.2 section 7.1.1).
          This change also eliminates a name clash. Thanks to Xavier MONTET
          <montet@cena.fr> for reporting the name clash.

Thu Jun 14 17:44:15 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA/rtcorbafwd.h:

          Changed the minPriority and maxPriority typedefs to use a
          CORBA::Short to fix compiler errors on the IA64 compiler.

Thu Jun 14 16:31:36 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/Policy_Set.i (compatible_scope):

          SUNCC42 doesn't like static_cast. Remove it altogether.

Thu Jun 14 14:33:50 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/corbafwd.h:
        * tao/Object.h:
        * tao/Object.i:
        * tao/Object.cpp:

          Inlined CORBA::is_nil() and put the part that cannot be
          inlined (the part that make a call on TAO_Stub) in a new
          uninlined function CORBA::Object::is_nil_i(). Thanks to
          Carlos for this idea to improve performance.

Thu Jun 14 14:18:34 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/Makefile:
        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:
          Added guard to avoid building the RTCORBA related libraries when
          CORBA Messaging is not enabled.

Thu Jun 14 13:43:20 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/field_ch.cpp:

          Removed a '>' left over from the time before TAO_Object_Field<>
          was eliminated. It was overlooked for so long because it
          turns up in generated code only when a valuetype has an
          interface member. Thanks to Srikanth Vedire <srvedire@yahoo.com>
          for reporting the problem.

Thu Jun 14 13:36:43 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Policy_Set.i:

          Added const specifier to fix warnings on Sun CC42.

Thu Jun 14 13:11:37 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.Security:
        * orbsvcs/orbsvcs/Makefile.SSLIOP:

          Updated Makefile dependencies to stop pointing to old RTCORBA files.

Thu Jun 14 12:22:52 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.h: Temporarily reverted change described in
          Wed Jun 13 17:02:27 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>
          That change while fixing Borland Compiler and GCC 3.0 was
          breaking VC++ builds.

Thu Jun 14 09:53:45 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.cpp (object_to_string):

          Verify that the object reference is non-nil before checking if
          it refers to a local object.  Fixes a seg fault that occured
          when passing a nil object reference to ORB::object_to_string(),
          a perfectly valid thing to do.  Thanks to Knut-Havard Aksnes
          <knut@orion.no> for reporting the problem.  [Bug 942]

          Fixed a potential seg fault that would occur when attempting to
          convert a nil object reference to a URL IOR
          (e.g. corbaloc:...).  Unlike standard "IOR:..." IORs, it is not
          possible to represent a nil object reference using a URL IOR.

Thu Jun 14 08:24:03 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tao/RTPortableServer/Makefile.bor:
          Added TAO_PortableServer library required for linking.

Thu Jun 14 00:45:08 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp
           Do not pass a null ACE_Flow_Spec object to handler->translate()

        * orbsvcs/orbsvcs/AV/Transport.cpp
           Improve debugging messages.

Wed Jun 13 17:28:18 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/ORB_Core.h:
        * tao/Policy_Set.h:
        * tao/Policy_Set.cpp:

          Fixed warnings detected by the Tru64 compiler.

Wed Jun 13 17:02:27 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.h (POA): Fixed the warning generated by
          GCC 3.0 caused by a missing virtual inheritance in one of the
          branches of the POA's diamond.

Wed Jun 13 16:54:56 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/ORB_Core.cpp (get_cached_policy): Added missing guard to
          avoid the compilation of this method when
          TAO_HAS_CORBA_MESSAGING == 0.

Wed Jun 13 16:10:17 2001  Yamuna Krishnamurthy <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.cpp:

          Fixed the duplicate template instantiation problem.

Wed Jun 13 15:29:17 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:

          Changed the generated call to set the byte order of the exception
          holder to use the byte order of the incoming CDR stream, rather
          than the native byte order. There was a crash in demarshaling AMI
          exceptions if the byte order of client and server differed. Thanks
          to Victor <pitchouc@tlsoft.ru> for reporting this bug.

Wed Jun 13 15:01:11 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * docs/tutorials/Quoter/Event_Service/Makefile:
        * docs/tutorials/Quoter/Naming_Service/Makefile:
        * docs/tutorials/Quoter/On_Demand_Activation/Makefile:
        * docs/tutorials/Quoter/RT_Event_Service/Makefile:
        * docs/tutorials/Quoter/Simple/Impl-Repo/Makefile:
        * docs/tutorials/Quoter/Simple/ImprovedServer/Makefile:
        * docs/tutorials/Quoter/Simple/Persistent/Makefile:
        * docs/tutorials/Quoter/Simple/Server/Makefile:
        * docs/tutorials/Quoter/idl/Makefile:

          Updated dependencies since some old RT CORBA header files were
          being included.

Wed Jun 13 13:50:27 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Makefile:

          Added RTCORBA libraries to the makefiles.

Wed Jun 13 13:00:30 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Client.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Server.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/client.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Client.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Server.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/client.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/server.conf:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/server.cpp:

          Added RTCORBA includes and service configurator directives to load
          RTCORBA and RTPortableServer.

        * performance-tests/RTCorba/Oneways/Reliable/client.cpp:

          Removed unnecessary RTCORBA include.

        * tests/RTCORBA/Server_Declared/client.dsp:
        * tests/RTCORBA/Server_Declared/server.dsp:

          Fixed include paths in release build.  It seems to build now.

Wed Jun 13 10:35:50 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/Makefile:
          Removed the Endpoint_Per_Priority test as it uses the
          deprecated (and now completely removed) client priority
          policy.

Wed Jun 13 10:22:51 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/Exposed_Policies/RT_Properties.h:
          Fixed header file include to work with new RTCORBA libraries.

Wed Jun 13 09:07:14 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp:
          Removed unnecessary include for RT_Policy_i.h

Wed Jun 13 09:08:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynUnion_i.cpp:
        * tests/DynAny_Test/test_dynsequence.cpp:
        * tests/DynAny_Test/test_dynunion.cpp:

          Added missing .in()s in places where a _var was used as an
          argument, and fixed fuzz errors.

Wed Jun 13 08:42:31 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tao/Makefile.bor:
        * tao/DynamicAny/Makefile.bor:
        * tao/PortableServer/Makefile.bor:
        * tao/RTCORBA/Makefile.bor:
        * tao/RTPortableServer/Makefile.bor:
        * tao/Strategies/Makefile.bor:
          Updated Borland makefiles to work with new RTCORBA libraries.

Tue Jun 12 22:58:52 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/Transport.cpp:
        * examples/Load_Balancing/Identity_Server.cpp:
        * examples/Load_Balancing_persistent/Identity_Server.cpp:
        * orbsvcs/orbsvcs/Event/Event_Channel.cpp:

        Fixes for compilation on IA-64 Linux. This includes changing usage
        of plain [s]size_t to use ACE_[S]SIZE_T_FORMAT_SPECIFIER and using
        reinterpret_cast to silence warnings about conversion from
        integer to pointer of different size.

Tue Jun 12 19:00:58 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA/RT_ORB_Loader.cpp:
          Fixed fuzz error.

Tue Jun 12 18:50:57 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * docs/Options.html:
          Updated documentation to reflect that the -ORBSchedPolicy
          and -ORBPriorityMapping options moved from the Strategies
          library to the RTCORBA library.

Tue Jun 12 18:28:46 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Policy.pidl:
        * tao/diffs/PolicyC.cpp.diff:
        * tao/diffs/PolicyC.h.diff:
        * tao/diffs/PolicyC.i.diff:
        * tao/diffs/PolicyS.h.diff:
          Regenerated diff files and added information to the
          instructions in Policy.pidl to make regeneration easier
          for the next person.

        * tao/TAO.pidl:
        * tao/diffs/TAOC.cpp.diff:
        * tao/diffs/TAOC.h.diff:
        * tao/diffs/TAOC.i.diff:
          Regenerated diff files and added instructions to the pidl
          file since it wasn't specified how this was being done
          before.

        * tao/RTCORBA/RTCORBA.pidl:
        * tao/RTCORBA/diffs/RTCORBAC.cpp.diff:
        * tao/RTCORBA/diffs/RTCORBAC.h.diff:
        * tao/RTCORBA/diffs/RTCORBAC.i.diff:
          Updated instructions in the pidl file.  Also moved the
          diff files from tao/diffs to under RTCORBA.

        * tao/RTPortableServer/RTPortableServer.pidl:
        * tao/RTPortableServer/diffs/RTPortableServerC.cpp.diff:
        * tao/RTPortableServer/diffs/RTPortableServerC.h.diff:
        * tao/RTPortableServer/diffs/RTPortableServerC.i.diff:
          Updated instructions in the pidl file.  Also moved the
          diff files from tao/diffs to under RTPortableServer.

Tue Jun 12 18:21:06 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * tao/TAO_Internal.cpp (open_services): Added a missing call to
          len = svc_config_argv.length ().

Tue Jun 12 18:16:52 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Moved section on the interface repository to the new document
          listed below. Also added link to the new dynamic any
          documentation listed below.

        * docs/dynany/index.html:

          New file - documemtation for TAO's dynamic any implementation.

        * docs/interfacerepo/index.html:

          New file - contains documentation for TAO's interface repository
          implementation that was previously in the main releasenotes
          file.

        * docs/interfacerepo/tao_ifr.html:

          New file - user's guide to tao_ifr, the TAO interface repository
          loader, including a table of the command line options.

Tue Jun 12 18:12:13 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/DynAny_Test/da_tests.idl:
        * tests/DynAny_Test/data.cpp:
        * tests/DynAny_Test/driver.cpp:
        * tests/DynAny_Test/test_dynany.cpp:
        * tests/DynAny_Test/test_dynarray.cpp:
        * tests/DynAny_Test/test_dynenum.cpp:
        * tests/DynAny_Test/test_dynsequence.cpp:
        * tests/DynAny_Test/test_dynstruct.cpp:
        * tests/DynAny_Test/test_dynunion.cpp:

          Corrected and expanded these tests to correspond with the
          changes to TAO's dynamic any implementation in the entry below.

Tue Jun 12 17:53:45 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAnyFactory.cpp:
        * tao/DynamicAny/DynAnyFactory.h:
        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynAny_i.h:
        * tao/DynamicAny/DynArray_i.cpp:
        * tao/DynamicAny/DynArray_i.h:
        * tao/DynamicAny/DynEnum_i.cpp:
        * tao/DynamicAny/DynEnum_i.h:
        * tao/DynamicAny/DynSequence_i.cpp:
        * tao/DynamicAny/DynSequence_i.h:
        * tao/DynamicAny/DynStruct_i.cpp:
        * tao/DynamicAny/DynStruct_i.h:
        * tao/DynamicAny/DynUnion_i.cpp:
        * tao/DynamicAny/DynUnion_i.h:
        * tao/DynamicAny/Makefile:
        * tao/DynamicAny/Makefile.bor:
        * tao/DynamicAny/TAO_DynamicAny.dsp:
        * tao/DynamicAny/TAO_DynamicAny_Static.dsp:

          Modified the implementation to conform to CORBA 2.4.2, and
          especially with the major changes that appeared in CORBA 2.3.1.

        * tao/DynamicAny/DynCommon.cpp:
        * tao/DynamicAny/DynCommon.h:

          New files containing an abstract base class that holds
          implementations for all the insert_* and get_* methods, as well
          as some of the other methods common to all the dynamic any
          classes and some utility functions. All the TAO dynamic any
          implementation classes inherit from this as well as from the
          corresponding generated class.

        * tao/DynamicAny/DynUnion_i_T.cpp:
        * tao/DynamicAny/DynUnion_i_T.h:

          Removed these files. There is now an alternate implementation in
          DynUnion_i.* that was previously handled by template classes in
          these files.

Tue Jun 12 17:46:16 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/CosNotifyChannelAdmin.idl:
        * orbsvcs/orbsvcs/CosNotifyComm.idl:
        * orbsvcs/orbsvcs/CosNotifyFilter.idl:

          Moved the preprocessor macro #pragma prefix "omg.org" to come
          after the includes of other IDL files, so it wouldn't be
          nullified by the #pragma prefix "" that comes at the end of each
          IDL file. Thanks to Rob Andzik <andzik@rtlogic.com> for
          reporting the fact that the generated repo ids were incorrect.

Tue Jun 12 17:42:59 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/drv_args_ifr.cpp:

          Added -A (preprocessor assertion) command line option,
          identical to the option for the IDL compiler.

Tue Jun 12 17:31:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TAO_Internal.cpp:

          For some reason, there was a call to an 'add' method in
          CORBA::StringSeq. Changed the code to conform to the
          other similar cases nearby.

        * tao/TAO.dsp:

          Removed a link in the debug version to the RTCORBA library.

        * tao/RTCORBA/TAO_RTCORBA.dsp:

          Added RTCORBA.h and RTCORBA.cpp to the project.

Tue Jun 12 16:27:10 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA/RT_Endpoint_Utils.cpp:
        * tao/RTCORBA/RT_Endpoint_Utils.h:
        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.cpp:
        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.h:
        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.i:
        * tao/RTCORBA/RT_Protocols_Hooks.cpp:
        * tao/RTCORBA/RT_Protocols_Hooks.h:
        * tao/RTCORBA/RT_Protocols_Hooks.i:
        * tao/RTPortableServer/RT_Acceptor_Filters.cpp:
        * tao/RTPortableServer/RT_Acceptor_Filters.h:
        * tao/RTPortableServer/RT_Acceptor_Filters.i:
          cvs doesn't seem to like *s.* either.

Tue Jun 12 16:16:17 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTPortableServer/RTPortableServerC.cpp:
        * tao/RTPortableServer/RTPortableServerC.h:
        * tao/RTPortableServer/RTPortableServerC.i:
          Added some more files that were missed in previous check in.
          It turns out that cvs ignores *C.* when reporting unadded
          files, but these should be the last ones.

Tue Jun 12 16:11:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/RTCORBA/RTCORBAC.h:
        * tao/RTCORBA/RTCORBAC.i:
          Added some files that were missed in previous check in.

Fri Jun  8 06:09:48 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * docs/tutorials/Quoter/RT_Event_Service/Stock_i.cpp: Changed the
          ~Quoter_Stock_i so that it calls disconnect_push_consumer rather
          than deleting the tie.  Thanks to Dayisi <dayisi@163.com> for
          reporting this.

Thu Jun  7 20:34:18 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tao/TAO_Internal.cpp (open_services): Added support for the
          new -ORBServiceConfigLoggerKey option, which allows applications
          to specify which loggerkey to use for ORB logging.  Thanks to
          Paul Caffrey <pcaffrey@iel.ie> for reporting this.

        * docs/Options.html: Added documentation for the new
          -ORBServiceConfigLoggerKey option.

Tue Jun 12 13:30:02 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>, Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/Endpoint_Selector_Factory.cpp:
        * tao/Endpoint_Selector_Factory.h:
        * tao/Default_Endpoint_Selector_Factory.cpp:
        * tao/Default_Endpoint_Selector_Factory.h:
        * tao/Stub_Factory.cpp:
        * tao/Stub_Factory.h:
        * tao/Default_Stub_Factory.cpp:
        * tao/Default_Stub_Factory.h:
          Moved the default implementations of the endpoint selector factory and stub
          factory to separate files.

        * tao/POA_Extension_Initializer.cpp:
        * tao/POA_Extension_Initializer.h:
          Add interface to register POA initializers with the ORB core.  When the POA
          library is loaded, it will call all of the registered initializers so that
          they can add POA policies, override interfaces, etc.

        * tao/Policy_Set.cpp:
        * tao/Policy_Set.h:
        * tao/Policy_Set.i:
          Refactored code from TAO_Policy_Manager_Impl that is now
          reused in the POA.  The name was changed from TAO_Policy_Manager_Impl
          to TAO_Policy_Set since Policy Manager code is only available when
          messaging is enabled.  Also, as part of the RT CORBA subsetting, all
          of the RT CORBA policy accessors were removed, and a generic "cached"
          policy accessor was put in its place.  The downside to this change
          is that users of this class can only get CORBA::Policy * from the
          get routines.  They need to perform the narrow (and pay for its lock)
          now.  There is a potential optimization in the messaging code that can be
          done to avoid narrowing in the critical path.

        * tao/RTCORBA/Direct_Priority_Mapping.cpp
        * tao/RTCORBA/Direct_Priority_Mapping.h
        * tao/RTCORBA/Direct_Priority_Mapping.i
        * tao/RTCORBA/Linear_Priority_Mapping.cpp
        * tao/RTCORBA/Linear_Priority_Mapping.h
        * tao/RTCORBA/Linear_Priority_Mapping.i
        * tao/RTCORBA/Makefile
        * tao/RTCORBA/Makefile.bor
        * tao/RTCORBA/Pool_Per_Endpoint.cpp
        * tao/RTCORBA/Pool_Per_Endpoint.h
        * tao/RTCORBA/Pool_Per_Endpoint.i
        * tao/RTCORBA/Priority_Mapping.cpp
        * tao/RTCORBA/Priority_Mapping.h
        * tao/RTCORBA/Priority_Mapping.i
        * tao/RTCORBA/Priority_Mapping_Manager.cpp
        * tao/RTCORBA/Priority_Mapping_Manager.h
        * tao/RTCORBA/Priority_Mapping_Manager.i
        * tao/RTCORBA/Private_Transport_Descriptor.cpp
        * tao/RTCORBA/Private_Transport_Descriptor.h
        * tao/RTCORBA/Private_Transport_Descriptor.inl
        * tao/RTCORBA/RTCORBA.cpp
        * tao/RTCORBA/RTCORBA.h
        * tao/RTCORBA/RTCORBA.pidl
        * tao/RTCORBA/rtcorbafwd.h
        * tao/RTCORBA/rtcorba_export.h
        * tao/RTCORBA/RT_Current.cpp
        * tao/RTCORBA/RT_Current.h
        * tao/RTCORBA/RT_Current.i
        * tao/RTCORBA/RT_Endpoint_Selector_Factory.cpp
        * tao/RTCORBA/RT_Endpoint_Selector_Factory.h
        * tao/RTCORBA/RT_Mutex.cpp
        * tao/RTCORBA/RT_Mutex.h
        * tao/RTCORBA/RT_Mutex.i
        * tao/RTCORBA/RT_ORB.cpp
        * tao/RTCORBA/RT_ORB.h
        * tao/RTCORBA/RT_ORB.i
        * tao/RTCORBA/RT_ORBInitializer.cpp
        * tao/RTCORBA/RT_ORBInitializer.h
        * tao/RTCORBA/RT_ORB_Loader.cpp
        * tao/RTCORBA/RT_ORB_Loader.h
        * tao/RTCORBA/RT_PolicyFactory.cpp
        * tao/RTCORBA/RT_PolicyFactory.h
        * tao/RTCORBA/RT_Policy_i.cpp
        * tao/RTCORBA/RT_Policy_i.h
        * tao/RTCORBA/RT_Policy_i.i
        * tao/RTCORBA/RT_Stub.cpp
        * tao/RTCORBA/RT_Stub.h
        * tao/RTCORBA/RT_Stub_Factory.cpp
        * tao/RTCORBA/RT_Stub_Factory.h
        * tao/RTCORBA/TAO_RTCORBA.dsp
        * tao/RTCORBA/TAO_RTCORBA_Static.dsp
        * tao/RTCORBA/Thread_Pool.cpp
        * tao/RTCORBA/Thread_Pool.h
        * tao/RTCORBA/Thread_Pool.i
          Moved all RTCORBA files to the RTCORBA directory.  Created
          a library that includes all of them and added the necessary
          support files (e.g. Makefiles, dsp files).  Many refactorings
          had to be done to enable this.  The most visible changes are:
          1.  To load RTCORBA, the line "static RT_ORB_Loader """ needs
              to be added to the application's svc.conf.
          2.  To use RTCORBA routines, a #include "tao/RTCORBA/RTCORBA.h"
              is needed.
          3.  The PriorityMappingManager commandline options that used
              to be passed to the advanced resources (Strategies) library
              are now passed to the RT_ORB_Loader.
          4.  The default priority mapping is direct mapped.  This is
              the same as if the Strategies library were loaded before,
              but different from when Strategies wasn't loaded in that
              the to_native () and to_CORBA () calls would just return
              errors.
          5.  Moved the PriorityMappingManager interface from the TAO
              namespace to the RTCORBA namespace.
          6.  No TAO_HAS_RT_CORBA guards!

        * tests/RTCORBA/Banded_Connections/svc.conf:
        * tests/RTCORBA/Client_Propagated/svc.conf:
        * tests/RTCORBA/Private_Connection/svc.conf:
        * tests/RTCORBA/Server_Declared/svc.conf:
        * tests/RTCORBA/Server_Protocol/svc.conf:
        * tests/RTCORBA/Thread_Pool/svc.conf:
          Created svc.conf files and added "static RT_ORB_Loader """.

        * TAOACE.dsw:
        * TAOACE_Static.dsw:
          Added RTCORBA and RTPortableServer libraries to project list.

        * rules.tao.GNU:
          Added RT_TAO_SRVR_LIBS and RT_TAO_CLNT_LIBS macros to
          make it easier to pull in the RT CORBA libraries.

        * */Makefile*:
          Updated the dependencies on all TAO Makefiles.

        * examples/Buffered_Oneways/client.cpp:
          Removed false dependency on RT CORBA.  Changed include "RTCORBA.h"
          to "tao/TAOC.h".

        * examples/PluggableUDP/DIOP/DIOP_Profile.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * tao/IIOP_Profile.cpp:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.cpp:
          Removed guards around code to check profile for multiple endpoints.
          The previous code had a comment that the check was not enabled
          when RT_CORBA wasn't enabled for performance reasons.  Since the
          code isn't in the critical path, we just removed the check rather
          than performing a more involved refactoring.

        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/client.cpp:
        * performance-tests/RTCorba/Oneways/Reliable/client.cpp:
          Changes for the RTCORBA subsetting.  Changed namespace for
          PriorityMappingManager, and include directory.

        * tao/Acceptor_Registry.cpp:
          Removed unnecessary RT_Policy_i.h include.

        * tao/Buffering_Constraint_Policy.cpp:
        * tao/Buffering_Constraint_Policy.h:
          Added _tao_cached_type implementation.

        * tao/Client_Priority_Policy.cpp:
        * tao/Client_Priority_Policy.h:
        * tao/Client_Priority_Policy.i:
          The ClientPriorityPolicy has been deprecated and now it has been removed.
          These files are no longer needed.

        * tao/Messaging_ORBInitializer.cpp:
        * tao/Messaging_PolicyFactory.cpp:
        * tao/TAO.pidl:
        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/TAOC.i:
          Removed ClientPriorityPolicy references.

        * tao/Default_Protocols_Hooks.cpp:
        * tao/Default_Protocols_Hooks.h:
        * tao/Protocols_Hooks.cpp:
        * tao/Protocols_Hooks.h:
          Removed many unnecessary methods and cleaned up code.

        * tao/Strategies/Reactor_Per_Priority.cpp:
          Updated from changes in Protocols_Hooks.h.

        * tao/IIOP_Acceptor.cpp:
        * tao/IIOP_Connector.cpp:
        * tao/Strategies/UIOP_Acceptor.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
          Removed RT specific code from the init_*_properties
          routines.  No interface changes were needed for these
          changes.  There is a lot of IIOP and UIOP specific
          code in the RTCORBA library that should be moved out,
          but we didn't address this change as it would involve
          changes to the pluggable protocol interface.

        * tao/Invocation.cpp:
        * tao/Invocation.h:
          Cleaned up files.  Removed RT_Stub.h include.

        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/Invocation_Endpoint_Selectors.h:
        * tao/Invocation_Endpoint_Selectors.i:
          Cleaned up remnants of TAO_Endpoint_Selection_State.

        * tao/Messaging_Policy_i.cpp:
        * tao/Messaging_Policy_i.h:
          Added _tao_cached_type methods to allow for constant
          time access to a couple of policies in the policy
          set.

        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
          Removed as many RT CORBA references as possible.  Only
          what is needed to load the RTCORBA library and resolve
          the RT_ORB and RT_Current are left.

        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
          Added _tao_cached_type and _tao_scope methods to
          CORBA::Policy.  The _tao_cached_type returns a special
          enum (see orbconf.h) for use by TAO_Policy_Set to
          be able to retrieve policies generically in constant
          time.  The _tao_scope is used to specify the scope to
          which a specific policy applies.  The current possible
          scopes are object level, current level, ORB level, POA level,
          and client exposed.  A policy can be in more than one
          scope.  TAO_Policy_Set can be configured to reject policies
          that are not in the appropriate scope without any additions
          to the TAO_Policy_Set code.  In fact, the special case code
          that was there, has now been removed.

        * tao/Policy_Manager.cpp:
        * tao/Policy_Manager.h:
        * tao/Policy_Manager.i:
          Factored out TAO_Policy_Manager_Impl code to TAO_Policy_Set
          to allow for reuse with the POA.  Also, removed all accessors
          to specific policies in all of the "TAO_Policy_Manager" classes.
          If users need constant time access to policies, they should
          use the get_cached_policy interface.

        * tao/Pool_Per_Endpoint.cpp:
        * tao/Pool_Per_Endpoint.h:
        * tao/Pool_Per_Endpoint.i:
        * tao/Priority_Mapping.cpp:
        * tao/Priority_Mapping.h:
        * tao/Priority_Mapping.i:
        * tao/Priority_Mapping_Manager.cpp:
        * tao/Priority_Mapping_Manager.h:
        * tao/Priority_Mapping_Manager.i:
        * tao/Private_Transport_Descriptor.cpp:
        * tao/Private_Transport_Descriptor.h:
        * tao/Private_Transport_Descriptor.inl:
        * tao/RTCORBA.pidl:
        * tao/RTCORBAC.cpp:
        * tao/RTCORBAC.h:
        * tao/RTCORBAC.i:
        * tao/RTCORBAS.cpp:
        * tao/RTCORBAS.h:
        * tao/RTCORBAS.i:
        * tao/RTCORBAS_T.cpp:
        * tao/RTCORBAS_T.h:
        * tao/RTCORBAS_T.i:
        * tao/RT_CORBA.h:
        * tao/RT_Current.cpp:
        * tao/RT_Current.h:
        * tao/RT_Current.i:
        * tao/RT_Endpoint_Selector_Factory.cpp:
        * tao/RT_Endpoint_Selector_Factory.h:
        * tao/RT_Endpoint_Utils.cpp:
        * tao/RT_Endpoint_Utils.h:
        * tao/RT_Invocation_Endpoint_Selectors.cpp:
        * tao/RT_Invocation_Endpoint_Selectors.h:
        * tao/RT_Invocation_Endpoint_Selectors.i:
        * tao/RT_Mutex.cpp:
        * tao/RT_Mutex.h:
        * tao/RT_Mutex.i:
        * tao/RT_ORB.cpp:
        * tao/RT_ORB.h:
        * tao/RT_ORB.i:
        * tao/RT_ORBInitializer.cpp:
        * tao/RT_ORBInitializer.h:
        * tao/RT_ORB_Loader.cpp:
        * tao/RT_ORB_Loader.h:
        * tao/RT_PolicyFactory.cpp:
        * tao/RT_PolicyFactory.h:
        * tao/RT_Policy_i.cpp:
        * tao/RT_Policy_i.h:
        * tao/RT_Policy_i.i:
        * tao/RT_Protocols_Hooks.cpp:
        * tao/RT_Protocols_Hooks.h:
        * tao/RT_Protocols_Hooks.i:
        * tao/RT_Stub.cpp:
        * tao/RT_Stub.h:
        * tao/RT_Stub_Factory.cpp:
        * tao/RT_Stub_Factory.h:
        * tao/Thread_Pool.cpp:
        * tao/Thread_Pool.h:
        * tao/Thread_Pool.i:
        * tao/rtcorbafwd.cpp:
        * tao/rtcorbafwd.h:
        * tao/rtcorbafwd.i:
          Removed RT files from here and put them in tao/RTCORBA.

        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
        * tao/Strategies/advanced_resource.cpp:
        * tao/Strategies/advanced_resource.h:
        * tao/default_resource.cpp:
        * tao/default_resource.h:
        * tao/Strategies/TAO_Strategies.dsp:
        * tao/Strategies/TAO_Strategies_Static.dsp:
          Moved all priority mapping code and options to the RTCORBA
          library.

        * tao/Strategies/Direct_Priority_Mapping.cpp:
        * tao/Strategies/Direct_Priority_Mapping.h:
        * tao/Strategies/Direct_Priority_Mapping.i:
        * tao/Strategies/Linear_Priority_Mapping.cpp:
        * tao/Strategies/Linear_Priority_Mapping.h:
        * tao/Strategies/Linear_Priority_Mapping.i:
          Removed these files from Strategies and put them in RTCORBA.

        * tao/Stub.cpp:
        * tao/Stub.h:
          Changes to use new Policy_Set interface and removed
          ClientPriorityPolicy code.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Removed RT CORBA files.

        * tao/TAO_Internal.cpp:
          Added server configurator registration for default
          endpoint selectors and stub factories.

        * tao/orbconf.h:
          Removed TAO_HAS_RT_CORBA definitions and added cached policy
          enumerations and policy scope enumerations.

        * tao/PortableServer/Default_Policy_Validator.cpp:
        * tao/PortableServer/Default_Policy_Validator.h:
        * tao/PortableServer/Policy_Validator.cpp:
        * tao/PortableServer/Policy_Validator.h:
          Added TAO_Policy_Validator interface to enable POA extensions
          to be able to check the consistency and validity of POA
          Policies.

        * tao/PortableServer/Servant_Dispatcher.h:
        * tao/PortableServer/Default_Servant_Dispatcher.cpp:
        * tao/PortableServer/Default_Servant_Dispatcher.h:
        * tao/PortableServer/RT_Servant_Dispatcher.cpp:
        * tao/PortableServer/RT_Servant_Dispatcher.h:
          Added factory method to be able to create a new POA.  POA
          extensions can override the method to instantiate different
          kinds of POA's or perform some special initialization on
          them.  The RTPortableServer library does this.

        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Object_Adapter.i:
          Removed all RTCORBA specific references.  Added ability
          to register policy validators and default POA policies
          at initialization.

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/POA.i:
          Factored out RT specific code into RTPOA.{cpp,h,i} in
          the RTPortableServer library.  Moved implementation of
          standard 7 POA policies to POA_Policies.{cpp,h,i}.  Moved
          and refactored the TAO_POA_Policies class to
          POA_Policy_Set.{cpp,h,i} and POA_Cached_Policies.{cpp,h,i}.

        * tao/PortableServer/POA_Cached_Policies.cpp:
        * tao/PortableServer/POA_Cached_Policies.h:
        * tao/PortableServer/POA_Cached_Policies.i:
          Parses a POA_Policy_Set and saves policy parameters for
          quick (no lock) access in the critical path.  This class
          is very similar to the previous TAO_POA_Policies class
          except that all RT CORBA specific code has been removed.

        * tao/PortableServer/POA_Policies.cpp:
        * tao/PortableServer/POA_Policies.h:
        * tao/PortableServer/POA_Policies.i:
          Implementation of the standard 7 POA policies.  Added
          implementation of _tao_cached_type and _tao_scope to
          each policy.

        * tao/PortableServer/POA_Policy_Set.cpp:
        * tao/PortableServer/POA_Policy_Set.h:
        * tao/PortableServer/POA_Policy_Set.i:
          Implementation of generic container for POA policies.
          Reuses TAO_Policy_Set implementation and adds POA
          specific validation and code to handle client exposed
          policies generically.

        * tao/PortableServer/PortableServer.h:
          Removed RTCORBA dependency.

        * tao/PortableServer/RTPortableServer.pidl:
        * tao/PortableServer/RTPortableServerC.cpp:
        * tao/PortableServer/RTPortableServerC.h:
        * tao/PortableServer/RTPortableServerC.i:
        * tao/PortableServer/RT_Acceptor_Filters.cpp:
        * tao/PortableServer/RT_Acceptor_Filters.h:
        * tao/PortableServer/RT_Acceptor_Filters.i:
          Moved RT specific files from here to tao/RTPortableServer.

        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:
          Removed RT files.

        * tests/Exposed_Policies/Policy_Tester.cpp:
        * tests/Exposed_Policies/Policy_Tester.h:
        * tests/Exposed_Policies/Policy_Verifier.cpp:
        * tests/Exposed_Policies/Policy_Verifier.h:
        * tests/Exposed_Policies/RT_Properties.cpp:
        * tests/Exposed_Policies/client.cpp:
        * tests/Exposed_Policies/server.conf:
        * tests/Exposed_Policies/svc.conf:
        * tests/Exposed_Policies/server.cpp:
          Removed RT guards, fixed header file include paths, and
          added the RT_ORB_Loader to the *.conf files.

        * tao/diffs/RTCORBAS.cpp.diff:
        * tao/diffs/RTCORBAS.h.diff:
          Removed.  The RTCORBAS.{cpp,i,h} files are used anyway.

        * RTPortableServer/Makefile:
        * RTPortableServer/Makefile.bor:
        * RTPortableServer/RTPortableServer.cpp:
        * RTPortableServer/RTPortableServer.h:
        * RTPortableServer/RTPortableServer.pidl:
        * RTPortableServer/rtportableserver_export.h:
        * RTPortableServer/RT_Object_Adapter_Factory.cpp:
        * RTPortableServer/RT_Object_Adapter_Factory.h:
        * RTPortableServer/RT_POA.cpp:
        * RTPortableServer/RT_POA.h:
        * RTPortableServer/RT_POA.i:
        * RTPortableServer/RT_POA_Initializer.cpp:
        * RTPortableServer/RT_POA_Initializer.h:
        * RTPortableServer/RT_Policy_Validator.cpp:
        * RTPortableServer/RT_Policy_Validator.h:
        * RTPortableServer/RT_Servant_Dispatcher.cpp:
        * RTPortableServer/RT_Servant_Dispatcher.h:
        * RTPortableServer/TAO_RTPortableServer.dsp:
        * RTPortableServer/TAO_RTPortableServer_Static.dsp:
          Created RTPortableServer library from some files in
          PortableServer.  Added library support and initialization files.

        * tests/Policies/Manipulation.cpp:
        * tests/Timed_Buffered_Oneways/client.cpp
          Removed unnecessary RTCORBA reference.

        * tests/RTCORBA/Banded_Connections/client.cpp:
        * tests/RTCORBA/Banded_Connections/client.dsp:
        * tests/RTCORBA/Banded_Connections/run_test.pl:
        * tests/RTCORBA/Banded_Connections/server.conf:
        * tests/RTCORBA/Banded_Connections/server.cpp:
        * tests/RTCORBA/Banded_Connections/server.dsp:
        * tests/RTCORBA/Client_Propagated/client.cpp:
        * tests/RTCORBA/Client_Propagated/client.dsp:
        * tests/RTCORBA/Client_Propagated/server.cpp:
        * tests/RTCORBA/Client_Propagated/server.dsp:
        * tests/RTCORBA/Client_Protocol/client.cpp:
        * tests/RTCORBA/Client_Protocol/client.dsp:
        * tests/RTCORBA/Client_Protocol/server.cpp:
        * tests/RTCORBA/Client_Protocol/server.dsp:
        * tests/RTCORBA/Client_Protocol/svc.conf:
        * tests/RTCORBA/Explicit_Binding/client.cpp:
        * tests/RTCORBA/Explicit_Binding/client.dsp:
        * tests/RTCORBA/Explicit_Binding/server.cpp:
        * tests/RTCORBA/Explicit_Binding/server.dsp:
        * tests/RTCORBA/Explicit_Binding/svc.conf:
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.cpp:
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.dsp:
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.cpp:
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.dsp:
        * tests/RTCORBA/Private_Connection/client.cpp:
        * tests/RTCORBA/Private_Connection/client.dsp:
        * tests/RTCORBA/Private_Connection/server.cpp:
        * tests/RTCORBA/Private_Connection/server.dsp:
        * tests/RTCORBA/RTMutex/server.cpp:
        * tests/RTCORBA/RTMutex/server.dsp:
        * tests/RTCORBA/Server_Declared/client.cpp:
        * tests/RTCORBA/Server_Declared/client.dsp:
        * tests/RTCORBA/Server_Declared/run_test.pl:
        * tests/RTCORBA/Server_Declared/server.conf:
        * tests/RTCORBA/Server_Declared/server.cpp:
        * tests/RTCORBA/Server_Declared/server.dsp:
        * tests/RTCORBA/Server_Protocol/client.cpp:
        * tests/RTCORBA/Server_Protocol/client.dsp:
        * tests/RTCORBA/Server_Protocol/server.cpp:
        * tests/RTCORBA/Server_Protocol/server.dsp:
        * tests/RTCORBA/Server_Protocol/server_iiop.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse_nt.conf:
        * tests/RTCORBA/Server_Protocol/server_shmiop.conf:
        * tests/RTCORBA/Thread_Pool/server.cpp:
        * tests/RTCORBA/Thread_Pool/server.dsp:
          Modified include paths, svc.conf files, and dsp files
          to point to the new RTCORBA library.

Mon Jun 11 16:56:06 2001  Balachandran  <bala@cs.wustl.edu>

        * TAO version 1.1.17 released.

Mon Jun 11 11:51:06 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/run_test.pl: Fixed the scripts
          for execution on NT.

Mon Jun 11 11:26:38 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/client_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client_key.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/cacert.pem:

        * orbsvcs/tests/Security/SecurityLevel1/ca.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client_key.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_key.pem:
          Updated certs to expire only after 10 years.

        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.cpp
          (shutdown): Modified the check parameters to go with the new
          certificates.

Sun Jun 10 16:13:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Stub_Factory.cpp: Enclosed a debug statement within if
          statment.

Sat Jun 09 21:03:45 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/Foo_i.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/client.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/run_test.pl:
        * orbsvcs/tests/Security/Secure_Invocation/server.cpp:

          More test output improvements.

Sat Jun 09 20:54:10 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/Foo_i.cpp (baz):
        * orbsvcs/tests/Security/Secure_Invocation/server.cpp (main):

          Improved test output so that it is more obvious when the test
          passes.

Sat Jun 09 19:25:06 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/run_test.pl:

          Changed Service Configurator configuration files to use for the
          server and the client binaries.  For some reason, the "nopasswd"
          versions cause a seg fault in the OpenSSL libraries.  It's not
          yet clear what the true cause of the problem is.  In any case,
          the test is now working properly.

Fri Jun  8 15:26:38 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (connect):

          Only print debugging output if an ORB debug level was set by the
          user.  Reduces needless output.

Fri Jun  8 13:45:54 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current_Impl.cpp (get_attributes):

          Release the X.509 certificate structure on error.  Fixes a leak.

Fri Jun 08 07:30:08 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp (ssliop_open_i):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (open):

          Set the reactor in the underlying
          ACE_SSL_SOCK_{Acceptor,Connector} to force it to use the one the
          ORB was configured to use.

Fri Jun  8 09:14:53 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.cpp:

          Fixed compile errors due to missing template instantiations.

        * auto_run_tests.lst:

          Added the AVStreams tests to the nightly builds.

Fri Jun  8 07:38:59 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Connection_Purging/README:

          Added a readme for the Connection_Purging test.

Fri Jun  8 06:35:18 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Simple_Naming/run_test.pl: Removed some extraneous
          print statements that was causing our builds to choke.

Mon Jun  4 17:38:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/Event_Service/Makefile: Updated
          dependencies.

Mon Jun  4 11:00:28 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/orb.idl:

          Removed forward declarations of CORBA::Request and
          CORBA::NVList, as well as the typedef for
          CORBA::RequestSeq. CORBA::Request and CORBA::NVList
          may not be used in any way in an application IDL
          file. Their presence in orb.idl only creates a
          headache for the IDL compiler when processing any
          IDL file that contains orb.idl. Thanks to Heping He
          <heping@research.bell-labs.com> for pointing out
          the problem

Mon Jun  4 10:32:56 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_sequence.cpp:

          Added two fixes sent in by Chris Kohlhoff
          <kohlhoff@pop.ihug.com.au>, one for a memory leak,
          and the other for a Borland compiler problem when
          the target of an sprintf call is also an argument.

Mon Jun  4 09:35:04 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynAny_i.cpp:

          Added guards for the insertion of longlong and
          ulonglong into the member Any, for platforms that
          do not support these types.

        * tests/IDL_Test/sequence.idl:
        * tests/IDL_Test/reopened_modules.idl:

          Moved an example using reopened modules from sequence.idl
          to reopened_modules.idl, where it will be protected
          against compilation on platforms that don't support
          namespaces.

Sat Jun  2 18:44:28 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAny_i.cpp (set_to_default_value):

          Changed code for the typecode case to avoid taking the
          address of a temporary. Also changed code for the wstring
          case to force CORBA::WChar* to be passed to the Any
          insertion operator.

Sat Jun  2 15:44:27 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp (is_equivalent):

          If the dynamic_cast to a "TAO_SSLIOP_Endpoint *" returns zero,
          then assume that the two endpoints are not equivalent.  This
          also fixes potential segmentation fault.

          (hash):

          Improved the computed hash value by adding the SSL port to it.
          Previously, the same hash value as the non-SSL enabled IIOP
          endpoint was used.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp (send_i):

          Reverted the change described in ChangeLog entry
          Wed Feb 14 10:02:44 2001  Carlos O'Ryan  <coryan@uci.edu> from
          the bug 132 branch (see ChangeLog entry
          Tue Apr 24 00:21:54 2001  Carlos O'Ryan  <coryan@uci.edu>).  The
          change incorrectly passed an iovec array to the
          ACE_SSL_SOCK_Stream::send() method.  That method accepts a
          "void *" parameter to a buffer, not an iovec array.  This fixes,
          or at least improves, the problem where the SSLIOP connection
          was repeatedly shutdown on every other invocation.  Basically, a
          malformed GIOP message was repeatedly sent to the target.

          This should be considered a temporary fix.  The real fix must
          avoid iovec vectors altogether since it is not possible to
          maintain proper iovec non-blocking send semantics with SSL.
          Instead, a single buffer must be sent.

Sat Jun  2 17:24:37 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynAnyFactory.cpp:

          Added tk_wstring case to switch statements in both
          overloaded versions of make_dyn_any().

        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynAny_i.h:

          Added function to initialize the member Any to its
          correct default value, according to CORBA 2.4.2, when
          creating the DynAny with a typecode.

        * tao/DynamicAny/DynArray_i.cpp:
        * tao/DynamicAny/DynEnum_i.cpp:
        * tao/DynamicAny/DynSequence_i.cpp:
        * tao/DynamicAny/DynStruct_i.cpp:
        * tao/DynamicAny/DynUnion_i.cpp:

          Added code to set the current position to the correct
          default value, according to CORBA 2.4.2, and recursively
          initialize the DynAny member(s), when creating the
          containing DynAny from a typecode. Note that the TAO
          implementation of Dynamic Anys is not yet completely
          compliant with CORBA 2.3.

        * tao/DynamicAny/DynArray_i.h:
        * tao/DynamicAny/DynEnum_i.h:
        * tao/DynamicAny/DynSequence_i.h:
        * tao/DynamicAny/DynStruct_i.h:
        * tao/DynamicAny/DynUnion_i.h:

          Cosmetic changes.

Sat Jun  2 16:02:16 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include.idl.h:

          Added '#' to preprocessor 'if'.

        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:

          Removed generated forward declaration of _var class for
          anonymous sequences - the class definition is not generated
          either.

Sat Jun  2 13:41:50 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * tests/IDL_Test/generic_object.idl: Changed "THIS" and "THAT" to
          "OT_THIS" and "OT_THAT" to avoid problems with mingw.  Thanks to
          Cristian Ferretti <cristian_ferretti@yahoo.com> for pointing
          this out.

        * TAO_IDL/Makefile.FE: Added ACE_SHLIBS = -lACE.  Thanks to
          Cristian Ferretti <cristian_ferretti@yahoo.com> for pointing
          this out.

        * TAO_IDL/Makefile.EXE: Changed the definition of
          TAO_IDL_PREPROCESSOR so that it'll work on mingw.  Thanks to
          Cristian Ferretti <cristian_ferretti@yahoo.com> for pointing
          this out.

        * TAO_IDL/Makefile.dependencies (tao_idl): Added support for the
          new EXEEXT macro.  Thanks to Cristian Ferretti
          <cristian_ferretti@yahoo.com> for pointing this out.

        * TAO_IDL/include/idl.h: #undef "interface" so that mingw will
          work correctly.  Thanks to Cristian Ferretti
          <cristian_ferretti@yahoo.com> for pointing this out.

        * TAO_IDL/be_include/be_extern.h: Added a forward decl of the
          function set_be_global().  Thanks to Cristian Ferretti
          <cristian_ferretti@yahoo.com> for pointing this out.

        * tao/tao/IIOP_Connector.cpp,
        * tao/Strategies/SHMIOP_Connector.cpp: Replaced template instantiation
          of "int" with "ACE_HANDLE" to work around problems with mingw.
          Thanks to Cristian Ferretti <cristian_ferretti@yahoo.com> for
          pointing this out.

        * tao/orbconf.h: Changed a check for _WIN32 to be a check for
          _MSC_VER so that mingw will work properly.  Thanks to Cristian
          Ferretti <cristian_ferretti@yahoo.com> for pointing this out.

        * tao/DynamicInterface/Dynamic_Implementation.cpp (_create_stub):
          Changed "interface" to "pinterface" to work around problems with
          mingw.  Thanks to Cristian Ferretti
          <cristian_ferretti@yahoo.com> for pointing this out.

Sat Jun  2 09:23:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp: Fixed a Fuzz error.

Fri Jun 01 23:15:05 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/diffs/IFR_Base.pidl.diff:
        * tao/IFR_Client/diffs/IFR_Basic.pidl.diff:
        * tao/IFR_Client/diffs/IFR_Components.pidl.diff:
        * tao/IFR_Client/diffs/IFR_Extended.pidl.diff:

          Regenerated these diffs so that they are actually correct.
          They were all reversed, and basically unusable.

        * orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/IFR_Service/IFR_BaseS.i:
        * orbsvcs/IFR_Service/IFR_BaseS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/IFR_Service/IFR_BasicS.i:
        * orbsvcs/IFR_Service/IFR_BasicS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.i:

          Regenerated these files to pull in an "unused argument" warning
          fix.

Fri Jun 1 20:49:50 2001  Ossama Othman  <ossama@uci.edu>

        * docs/ORBEndpoint.html:

          Removed extraneous text.

Fri Jun 1 20:39:23 2001  Ossama Othman  <ossama@uci.edu>

        * docs/interceptors.html:

          Updated the Portable Interceptor release notes.

Fri Jun  1 17:00:53 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/Object_Adapter.h (Servant_Upcall):

          Added "user_id" accessor and attribute members.  The "user_id"
          attribute is a pointer to the user/object ID of the target
          object (i.e. the same value  returned by
          PortableServer::Current::get_object_id()).

          Renamed "id_" to "system_id_" to make it obvious what this
          attribute represents.

        * tao/PortableServer/Object_Adapter.i (id):

          Return the newly renamed "system_id_" attribute.

          (user_id):

          New accessor methods used to set and get the "user_id" member.

        * tao/PortableServer/Object_Adapter.cpp (Servant_Upcall,
          prepare_for_upcall):

          "id_" was renamed to "system_id_."  Updated code that used the
          old name, accordingly.

        * tao/PortableServer/POA.cpp (locate_servant_i):

          Set the "user_id" pointer in the Servant_Upcall object.  A
          shallow copy is done.

        * tao/PortableServer/ServerRequestInfo.cpp (object_id):

          Invoke the new Servant_Upcall::user_id() method to obtain the
          proper ObjectId.  This fixes a bug where the system ID (used
          internally by TAO) was returned instead.

          Thanks to Irfan for the above changes.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp (ssliop_open_i):

          Ported the fix for bug 902 (see ChangeLog entry Tue May 29
          13:01:54 2001  Phil Mesnier  <mesnier_p@ociweb.com>) to the
          SSLIOP pluggable protocol.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp (open):

          Portable Carlos' check for platforms that incorrectly allow the
          local addr and remote addr to be the same.

Fri Jun  1 14:58:00 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp

          Fix some bugs in converting QoS_Param arguments to correct
          values for RAPI.

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_Qos/sender.cpp

          Change Token Bucket Size (TBS) from 9200 to 708 to work around
          bug in Cisco 2500 series router.  If TBS is too big, the
          Cisco will drop the packet without issuing an RSVP error
          message.  Looks like a bug in the router software.

Fri Jun  1 13:58:28 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/RT_Event_Service/Makefile: Updated
          dependecies.

        * Changelog : Reformatted this file, specifically the previous
          entry.

Fri Jun  1 12:37:52 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/run_test.pl:

          Changed the priority bands to the correct values. This exposes a
          bug in the increasing/lowering of priority on Tru64.

        * tests/RTCORBA/Banded_Connections/client.cpp (main):

          The previous band used for an invalid band falls into valid
          priority band under Tru64.

          Thanks to Irfan for pointing these.

Fri Jun  1 11:28:41 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be_include/be_decl.h:

          Moved the is_child() method from class be_decl to
          class AST_Decl, so it can be used by tao_ifr.

        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/include/ast_constant.h:

          Added a ifr_added_ flag to class AST_Constant, similar
          to the one added recently to class AST_Type.

        * TAO_IDL/ast/ast_type.cpp:
        * TAO_IDL/include/ast_type.h:

          Added accessor/mutator methods for the flags ifr_added_
          and ifr_fwd_added_.

        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:

          Cosmetic change.

        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/drv_args_ifr.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:

          - Added command line option to suppress processing of
            included IDL files (default is to process them).

          - Changed the logic of tao_ifr's handling of forward
            declared interfaces.

          - Changed behavior of tao_ifr to remove an existing
            IFR entry, if it detects a clash. Essentially, the
            undecidable question of how to determine if there is an
            actual error in redefinition of an interface, or if we are
            defining a forward declared interface from another
            IDL file has been resolved by adopting the behavior
            of the IFR loaders of other ORB vendors.

          Bug reports and feature requests thanks to
          Philippe Merle <Philippe.Merle@lifl.fr>, who is testing
          the TAO IFR's compatibility with CorbaScript.

Fri Jun  1 11:45:00 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/tests/Simple_Naming/run_test.pl:

          Add -m 1 flag to enable multicast discovery of Naming Service.
          Other minor cleanups.

Fri Jun  1 09:22:25 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/interface.idl:
        * tests/IDL_Test/reopened_modules.idl:

          Moved a recently added example from interface.idl to
          reopened_modules.idl, since it contained a reopened
          module. Code generated from reopened_modules.idl is
          protected from compilation on platforms that don't
          support namespaces.

        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:

          Fixed indentation error in generated code that was causing
          the indentation to grow with each generated remote proxy
          impl class declaration.

Thu May 31 21:54:35 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Makefile.bor (OBJFILES):

          Added missing GIOP_Message_Version.cpp source file to the list
          of files to compile.  Fixes a link error in the Borland build.

Thu May 31 17:45:00 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Domain/DomainS.cpp:
        * tao/PortableServer/ImplRepoS.cpp:

          Cleaned up warnings about unused arguments.

Thu May 31 16:21:54 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Static.dsp:

          Removed `PortableInterceptor.{i,cpp}' from the list of source
          files.  These files no longer exist.

Thu May 31 10:21:23 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Makefile.bor (OBJFILES):

          Removed duplicate "PortableInterceptorC.obj" from the list of
          object files.

          Removed "PortableInterceptor.obj" from the list of object
          files.  It no longer exists.  This fixes build problems in the
          Borland build.

Thu May 31 10:13:44 2001  Ossama Othman  <ossama@uci.edu>

        * tao/DomainC.h:

          Fixed duplicate declaration compile-time errors that showed up
          in Sun CC 4.2 builds.

Thu May 31 09:44:05 2001  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_argument/paramlist.cpp (visit_argument):

          Added a comment about potential changes that may be needed if
          insertion operators for valuetypes are implemented.

        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp
          (generate_class_definition):
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp
          (generate_class_definition):

          Improved generated code slightly.  Don't bother generating a
          Dynamic::ParameterList_var if the non-out parameter count is
          zero.

        * TAO_IDL/be/be_visitor_operation/operation.cpp
          (count_non_out_parameters):

          Do not include valuetype arguments in the parameter count.  We
          do not implement insertion operators for them yet.

Thu May 31 08:33:50 2001  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp
          (visit_operation):

          Fixed an unused argument warning in the generated skeleton.

        * tao/PortableServer/PolicyS.cpp:

          Fixed unused argument warnings.

        * tao/DomainS.h:
        * tao/DomainS.cpp:

          Fixed compile-time errors that occured on minimum CORBA builds.

Thu May 31 02:54:43 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/ServerInterceptorAdapter.h:

          Fixed problem where the contents of this header were not
          visible.

Thu May 31 02:42:44 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PolicyC.cpp:

          Removed redundant template instantiation related to
          CORBA::Current.  It already exists in CurrentC.cpp.  Fixes a
          link-time error.

Thu May 31 01:37:25 2001  Ossama Othman  <ossama@uci.edu>

        * tao/DomainC.cpp:

          Added missing TypeCodes.  Fixes compile-time errors.

Wed May 30 21:58:32 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:

          Added new ClientInterceptorAdapter.* sources to these project
          files.

        * tao/TAO_PortableServer.dsp:
        * tao/TAO_PortableServer_Static.dsp:

          Added new ServerInterceptorAdapter.* sources to these project
          files.

Wed May 30 21:41:53 2001  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_codegen.cpp
          (start_client_stubs, start_server_skeletons):

          Moved some interceptor-specific #includes within the generated
          "#if TAO_HAS_INTERCEPTORS" block.

          Include "tao/PortableInterceptor.h" in the generated stub and
          skeleton source files (not the headers).  It is no longer needed
          outside of the stub/skeleton sources so just include it there.

        * TAO_IDL/be/be_visitor_argument/paramlist.cpp (visit_argument):

          Updated generated code for the
          PortableInterceptor::RequestInfo::arguments() method to agree
          with the corrections to the "Dynamic" IDL module, and the new
          optimization for the case where more than one IDL parameter is
          used in a given IDL method.

        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp
          (visit_interface):

          Removed default argument "TAO_default_environment()" from the
          generated skeleton, i.e. "_skel" methods.  They are only meant
          to be called by TAO, not the application.  As such, a default
          CORBA::Environment argument should not be used.

          The "context" argument is now called "servant_upcall."  A
          pointer to the Servant_Upcall object associated with the current
          request is now passed through this argument.

        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp
          (visit_interface):

          The unused "context" argument to the "_skel" methods and the
          "synchronous_upcall_dispatch()" is now a pointer to the
          Servant_Upcall object.  Adjust the generated code accordingly.

          Improved exception-safety of the generated "_this()" method.

        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp
          (visit_interface):
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp
          (visit_interface):

          Removed default CORBA::Environment() argument from the generated
          "select_proxy()" method.  It is a method that is used internally
          by TAO.

        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp
          (generate_class_definition):
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp
          (generate_class_definition):

          Precompute the length of the Dynamic::ParameterList.  This is a
          nice optimization since it reduces the number of additional
          allocations to one, instead of one for each argument, in
          addition to remove all copying that occured when growing the
          sequence for each parameter.

          For the skeleton, pass the pointer to the Servant_Upcall object
          to the per-operation ServerRequestInfo classes.  It is used to
          implement the ServerRequestInfo::object_id() method.

        * TAO_IDL/be_include/be_visitor_operation/operation.h:
        * TAO_IDL/be/be_visitor_operation/operation.cpp
          (count_non_out_parameters):

          New helper method that counts in/inout parameters.  Used in the
          above precomputation optimization.

        * TAO_IDL/be/be_visitor_operation/operation_sh.cpp
          (visit_operation):

          Renamed the "context" argument to "servant_upcall."  The latter
          reflects its contents.

        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp
          (visit_operation):
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp
          (visit_operation):

          Removed catch block for the PortableInterceptor::ForwardRequest
          exception.  That exception is now handled within the
          "{Client,Server}InterceptorAdapter" classes that implements the
          request interceptor interception points.  This change makes it
          impossible for application code to throw a
          PortableInterceptor::ForwardRequest exception with the
          expectation that it will be processed as a LOCATION_FORWARD.
          Only interception points are supposed to throw that exception.
          Furthermore, this reduces the footprint.

        * tao/Abstract_Servant_Base.h:

          Removed unneccessary default CORBA::Environment arguments.

          (_dispatch, synchronous_upcall_dispatch):

          Added a pointer to the Servant_Upcall object as an additional
          argument to these methods.

        * tao/Adapter.h (dispatch):
        * tao/Adapter.cpp (dispatch):

          Removed the "context" argument.  It wasn't used.

        * tao/CDR.h (operator<<, operator>>):
        * tao/CDR.i (operator<<, operator>>):

          Added missing CDR stream insertion and extraction operators for
          the CORBA::ParameterMode type.

        * tao/ClientInterceptorAdapter.cpp:
        * tao/ClientInterceptorAdapter.h:
        * tao/ClientInterceptorAdapter.inl:
        * tao/PortableServer/ServerInterceptorAdapter.cpp:
        * tao/PortableServer/ServerInterceptorAdapter.h:
        * tao/PortableServer/ServerInterceptorAdapter.inl:

          Moved the {Client,Server}InterceptorAdapter classes from the
          PortableInterceptor.* files to these new files.  The client side
          and server side classes have been separated.

          The PortableInterceptor::ForwardRequest exception is now handled
          within the adapter classes.  This prevents (non-interceptor)
          application code from illegaly throwing a
          PortableInterceptor::ForwardRequest exception with the expectation
          a LOCATION_FORWARD will occur.  Only interceptors are allowed to
          throw this exception.

        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/MessagingC.cpp:
        * tao/MessagingC.h:
        * tao/MessagingC.i:
        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS.h:
        * tao/Domain/DomainS.i:
        * tao/Domain/DomainS_T.cpp:
        * tao/Domain/DomainS_T.h:
        * tao/Domain/DomainS_T.i:
        * tao/PortableServer/MessagingS.cpp:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/MessagingS.i:
        * tao/PortableServer/MessagingS_T.cpp:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/MessagingS_T.i:
        * tao/PortableServer/PolicyS.cpp:
        * tao/PortableServer/PolicyS.h:
        * tao/PortableServer/PolicyS.i:
        * tao/PortableServer/PolicyS_T.cpp:
        * tao/PortableServer/PolicyS_T.h:
        * tao/PortableServer/PolicyS_T.i:

          Regenerated these files to pull in updates made to the generated
          code in the TAO_IDL compiler.

        * tao/Dynamic.pidl:

          Removed "Dynamic::ParameterMode" type.  The proper type is
          "CORBA::ParameterMode."

        * tao/DynamicC.h:
        * tao/DynamicC.i:
        * tao/DynamicC.cpp:

          Regenerated these files so that they contain updates
          corresponding to the above change.

        * tao/GIOP_Message_Base.cpp
          (process_request, process_locate_request):
        * tao/GIOP_Message_Lite.cpp
          (process_request, process_locate_request):

          Removed the unused "context" argument from the "dispatch()"
          call.

        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/PolicyC.i:

          Regnerated from the correct IDL to fix busted TypeCodes.

        * tao/PortableInterceptor.h:

          This header now only contains the macros neccessary to support
          interceptors in the generated stubs and skeletons.  The adapter
          classes have been moved to client side and server side -specific
          files.

        * tao/PortableInterceptor.cpp:
        * tao/PortableInterceptor.i:

          These files have been removed since the adapter classes have
          been moved to client side and server side -specific files.

        * tao/corba.h:

          No longer need to include "tao/PortableInterceptor.h".  It is
          now included directly in the stub and skeleton source (*.cpp)
          files.  This saves us an unnecessary header inclusion.

        * tao/Invocation.h (is_selector_initialized_):

          Removed this unnecessary flag.  If the pointer to the selector
          is non-zero than it has been initialized, since it is
          initialized to zero by the constructor.

        * tao/Invocation.cpp (start):

          If the pointer to the selector is zero, then initialize it.  No
          need to use a separate flag variable.

        * tao/Invocation.i (location_forward_i):

          Make sure the endpoint selector is initialized before attempting
          to use it.  This is necessary since a connection may not have
          been established prior to a LOCATION_FORWARD issued in the
          PortableInterceptor::ClientRequestInterceptor::send_request()
          interception point.

          Moved this method to the `.cpp' file to avoid increasing
          inter-header dependencies.

        * tao/PortableServer/Default_Servant_Dispatcher.h
        * tao/PortableServer/Default_Servant_Dispatcher.cpp:
        * tao/PortableServer/RT_Servant_Dispatcher.h:
        * tao/PortableServer/RT_Servant_Dispatcher.cpp:
          (dispatch):

          The "context" argument is no longer used.  Pass a pointer to the
          Servant_Upcall object instead.

        * tao/PortableServer/RT_Servant_Dispatcher.cpp
          (~RT_Priority_Model_Processing):

          Wrap the code within an ACE_TRY/CATCH block so that it is
          possible to figure out exactly which exception was thrown.
          Don't just ignore the exception.

          (pre_invoke, post_invoke):

          Fixed broken code that ignored the ACE_TRY_ENV passed to a given
          method invocation, i.e. added missing ACE_CHECKs.

        * tao/PortableServer/Object_Adapter.cpp:

          Include the new `ServerInterceptorAdapter.h' header to pull in
          the server side interceptor adapter class declarations.

          (dispatch_servant):

          Removed unused "context" argument from the parameter list.

          Pass a pointer to the Servant_Upcall object to the
          ServantBase::_dispatch() call.  That pointer will be propagated
          to the generated skeleton.

          (dispatch):

          Removed unused "context" argument from the parameter list.

          Updated code to no longer catch the
          PortableInterceptor::ForwardRequest exception.  It is now
          handled in the ServerInterceptorAdapter class.

          Fixed a problem where the caught exception was not set in the
          ServerRequestInfo object.

          Only re-throw the caught exception if the send_exception()
          interception point hasn't transformed it to a LOCATION_FORWARD
          reply.

        * tao/PortableServer/Object_Adapter.h (dispatch_servant,
          dispatch):

          Removed unused "context" argument from the parameter list.

        * tao/PortableServer/Servant_Base.cpp
          (synchronous_upcall_dispatch):

          The "context" argument is now a pointer to the Servant_Upcall
          object.  Pass the pointer to the Servant_Upcall object to the
          skeleton function.  It will be used to implement the
          PortableInterceptor::RequestInfo::object_id() method.  It was
          done this way to avoid adding any TSS accesses.

        * tao/PortableServer/Servant_Base.h (_create_stub):

          Removed unnecessary default CORBA::Environment argument.

        * tao/PortableServer/ServerRequestInfo.cpp:

          Updated all OMG assigned exception minor codes.

          (TAO_ServerRequestInfo):

          A pointer to the Servant_Upcall object is now passed to this
          constructor.  It is used to implement the
          ServerRequestInfo::object_id() described below.

          (object_id):

          Implemented this method.  The ObjectId is now obtained directly
          from the Servant_Upcall object.  This avoids any TSS accesses.

          (adapter_id):

          Implemented this method.  The POA ID is obtained from the POA
          reference stored in the Servant_Upcall object.  No TSS accesses
          are involved.

          (forward_reference):

          Obtain the forward reference from the TAO_ServerRequest object.

        * tao/PortableServer/ServerRequestInfo.h:

          The "forward_reference_" member is no longer needed.  The
          forward reference is now stored in the TAO_ServerRequest object.

        * tao/PortableServer/ServerRequestInfo.inl (forward_reference):

          Store the forward reference in the TAO_ServerRequest object.

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BaseC.i:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_BasicC.i:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.h:
        * tao/IFR_Client/IFR_ComponentsC.i:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.h:
        * tao/IFR_Client/IFR_ExtendedC.i:
        * orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/IFR_Service/IFR_BaseS.i:
        * orbsvcs/IFR_Service/IFR_BaseS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/IFR_Service/IFR_BasicS.i:
        * orbsvcs/IFR_Service/IFR_BasicS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.i:

          Regenerated these files to pull in updates made to the generated
          code in the TAO_IDL compiler.

Wed May 30 17:13:04 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/run_test.pl:

        Changed the priority bands to the correct values so that it does
        what the correct behaviour. Previously a exception within a band was
        given, when the test was for an illegal priority. Changed the
        priority levels on Tru64 as the minimum and maximum priorities are
        different.

        * tests/RTCORBA/Banded_Connections/bands.tru64:

        Added a new file containing the bands for Tru64.

        * tests/RTCORBA/MT_Client_Protocol_Priority/process-output.pl:

        Added missing semicolons. I have a feeling that the script is
        busted as it depends on the debug levels. Angelo says that it's
        not possible to fix this without having some hooks inside the ORB.

        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl:
        * tests/RTCORBA/Server_Declared/run_test.pl:

        Changed the priority bands to fall within the acceptable range on
        Tru64.

Wed May 30 16:50:00 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * tests/InterOp-Naming/run_test.pl:

          $TARGETHOSTNAME was not being set, to solve add
           line: use ACEutils;

Wed May 30 13:19:27 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/QoS_UDP.i:

          Added the definition for setting the flow handler negotiator.

Wed May 30 12:06:21 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Singleton.cpp:

          Integrated David's suggested changes that deal with potential
          problems related to registering Singletons in the presence of
          multiple TAO_Singleton_Manager instances.

Wed May 30 13:44:46 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/elemtype.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_base.cpp:
        * TAO_IDL/be_include/be_visitor_sequence/sequence_base.h:

          Added some missing pieces needed for code generation when a
          reopened module contains a sequence whose element type is a
          forward declared interface from a previous opening of the
          module. Thanks to Russell Mora <rd.mora@econz.co.nz> for sending
          in the example IDL file.

        * tests/IDL_Test/sequence.idl:

          Added the above example IDL file to the test suite.

Wed May 30 00:35:15 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Singleton.cpp (instance):

          Fixed memory leak that occured due to the singleton instance not
          being registered with the TAO_Singleton_Manager when built
          without thread support.  Thanks to Kitty and David for helping
          with this problem.

Tue May 29 23:26:12 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/ImplRepo_Service/Options.cpp:
        * docs/releasenotes/index.html:

        Changed the default for multicast discovery for the Naming
        Service, AV Stream, and Implementation Repository.  Now, the
        default is to NOT listen for multicast discoveries.  This should
        alleviate the most commonly experienced support problem with these
        services.  Note that command line options permit you to turn on
        multicast discovery; see documentation on the individual services
        on how to do that for a particular service.  No client-side code
        got changed, and no changes are necessary in application code.
        NOTE: the Trading Service was not changed because it contains code
        to partially eliminate the type of problems this change was
        motivated to prevent.

Tue May 29 22:24:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:
          Fixed a compile error with Win32.

Tue May 29 21:58:00 2001  Craig Rodrigues <crodrigu@bbn.com>

       * utils/nslist/nslist.cpp:
       * utils/nslist/README:

         Enhancement to print the protocol and endpoint of each
         object reference registered in the Naming Service.

Tue May 29 18:44:46 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_module.cpp (fe_add_interface_fwd, add_to_previous):

          Fixed fe_add_interface_fwd to find the full definition (and set
          the full_definition_ member) of a forward declared interface
          even if the full definition comes in a previous opening of the
          enclosing module. Then add_to_previous can skip over such a
          forward declared interface, since its presence confuses the logic
          of look_in_previous(). Thanks to Russell Mora <rd.mora@econz.co.nz>
          for sending in the example IDL file that uncovered this bug.

          Also made cosmetic changes.

        * tests/IDL_Test/interface.idl:

          Added Russell's example IDL file to the test.

        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_union.cpp:

          Cosmetic changes.

Tue May 29 16:08:39 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Fixed a cut and paste error that was causing the check for
          unique union labels to fail if the discriminator type is
          unsigned short. Thanks to Philippe Merle <Philippe.Merle@lifl.fr>
          for sending in the example IDL file that caught this.

        * orbsvcs/IFR_Service/Container_i.cpp:

          Minor cosmetic change.

Tue May 29 14:48:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Makefile: Added the new file GIOP_Message_Version in the
          builds.  It was really bad on my part that I missed this one :(

Tue May 29 12:29:25 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/ior_corbaloc/run_test.pl:
          Matched the @corabloc_tests and @comments.

        * tao/CORBALOC_Parser.cpp (assign_key_string):
          Set things so that when the port is unspecified, it defaults to
          2809. Thanks to Craig Rodrigues  <crodrigu@bbn.com> for pointing
          out and hence made me commit the stuff that I had lying in my
          workspace for a while now.

Tue May 29 13:01:54 2001  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Strategies/SHMIOP_Acceptor.cpp (open_i):
        * tao/Strategies/UIOP_Acceptor.cpp (open_i):
        * tao/IIOP_Acceptor.cpp (open_i):

        In order to fix bug 902, I added the enabling of CLOSE_ON_EXEC
        for the acceptor sockets used by the above protocols. This is
        part 1 (of 3) of the solution.

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp (start_server_i):

        Since win32 does not support CLOSE_ON_EXEC for individual files, a
        slightly more heavy handed solution is needed when spawning child
        processes and guarantee the ImplRepo server can be restarted if
        necessary.  This does not address the problem of identifying which
        processes are "owned" by a newly restarted impl repo though. This
        is part 2 (of 3) of the solution. Part 3 is discussed in $ACE_ROOT/
        ChangeLog.

Tue May 29 11:19:29 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:

          Added a missing call to ast_accept() when visiting an
          operation's exception list. Also removed code that skips
          the call to ast_accept when an argument, return type or
          attribute is an interface. Skipping the call didn't
          cause a problem, but other recent fixes, including the
          first one above, have made it unnecessary. Thanks to
          Philippe Merle <Philippe.Merle@lifl.fr> for sending in
          the example IDL file that uncovered this bug.

Mon May 28 16:44:59 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/Basic/client.dsp:
          Added POA library to the static release linker options.

Mon May 28 13:31:07 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp: Updated with the new files.

Mon May 28 13:09:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.h:
        * examples/PluggableUDP/DIOP/DIOP_Profile.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Profile.h:
        * examples/PluggableUDP/DIOP/Makefile: Changed references of
          TAO_GIOP_Version to TAO_GIOP_Message_Version. Changed the
          inclusion to GIOP_Message_Version.h.

Mon May 28 13:01:38 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        Modules that used TAO_GIOP_Version were forced to include the file
        GIOP_Message_State.h. This header file also had another class that
        had lot of information that was not needed for files that needed
        only the TAO_GIOP_Version class. This checkins are to break that
        dependency.

        * tao/GIOP_Message_Version.h:
        * tao/GIOP_Message_Version.cpp:
        * tao/GIOP_Message_Version.inl: Moved the TAO_GIOP_Version class to a
          new file. Also renamed the class as TAO_GIOP_Message_Version to
          keep in sync with other GIOP classes naming conventions.

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Lite.h: Changed the class names from
          TAO_GIOP_Version to TAO_GIOP_Message_Version.

        * tao/GIOP_Message_State.h:
        * tao/GIOP_Message_State.i: Removed the class TAO_GIOP_Version
          from the files.

        * tao/Muxed_TMS.cpp:
        * tao/Profile.cpp:
        * tao/Profile.h:
        * tao/Profile.i:
        * tao/Reply_Dispatcher.h:
        * tao/Synch_Reply_Dispatcher.h:
        * tao/Invocation.cpp:
        * tao/IIOP_Acceptor.h:
        * tao/IIOP_Profile.cpp:
        * tao/IIOP_Profile.h: Changed the references of TAO_GIOP_Version
          to TAO_GIOP_Message_Version. Changed the inclusions from
          GIOP_Message_State.h to GIOP_Message_Version.h.

        * tao/Makefile:
        * tao/BiDir_GIOP/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/PortableServer/Makefile:
        * tao/TypeCodeFactory/Makefile:
        * tao/Strategies/Makefile:  Updated dependencies.

        * tao/Strategies/SHMIOP_Acceptor.h:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/SHMIOP_Profile.h:
        * tao/Strategies/UIOP_Acceptor.h:
        * tao/Strategies/UIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.h: Made the changes from
          TAO_GIOP_Version to TAO_GIOP_Message_Version.

Mon May 28 06:23:31 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/POA/Create_Reference/create_reference.cpp:
          Fixed a compile error in g++.

Sat May 27 10:40:27 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp:

          Fixed addressing problems. Modified the transport to initiate
          the PATH messaged only when explicitly initiated with a
          modify_qos or specifying the QoS during stream set-up.

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:

          Modified the test to demonstrate the initiation of QoS messages
          when explicitly stated with modify_qos.

Sun May 27 22:43:00 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * tests/ior_corbaloc/Makefile:
        * tests/ior_corbaloc/Makefile.bor:
        * tests/ior_corbaloc/README:
        * tests/ior_corbaloc/client.cpp:
        * tests/ior_corbaloc/corbaname_client.bor: (Added)
        * tests/ior_corbaloc/corbaname_client.cpp: (Added)
        * tests/ior_corbaloc/ior_corbaloc_client_i.cpp:
        * tests/ior_corbaloc/ior_corbaloc_client_i.h:
        * tests/ior_corbaloc/run_test.pl:
        * tests/ior_corbaloc/server.cpp:
        * tests/ior_corbaloc/status_i.cpp:
        * tests/ior_corbaloc/status_i.h:

          Updated the ior_corbaloc to fix a few bugs, improvev
          documentation, and clarify debug output.
          Added tests for the corbaname: URL.

Sun May 27 21:11:49 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp: Uncommented the
          method create_new_mprofile (). Looks like the method should be
          create_new_profiles (). Hence changed the name of the method.

Sun May 27 21:01:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/POA/Create_Reference/create_reference.cpp:

          Fixed a warning with KCC.

Sun May 27 12:04:18 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * performance-tests/POA/Create_Reference/run_test.pl: This
          performance test now runs with and without active hints.

        * performance-tests/POA/Create_Reference/create_reference.cpp:
          Added performance testing for POA::create_reference() in
          addition to the already existing performance testing of
          POA::create_reference_with_id().

Sun May 27 10:01:47 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/ImplRepo_i.h: Added missing #include
          "ace/post.h".  Thanks to the Fuzz script.

Sat May 26 20:37:25 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/POA.cpp: Fixed a unused variable warning.

Sat May 26 18:50:32 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/RT_Event_Service/Stock_i.cpp: Fixed a few
          compile errors with g++.

Sat May 26 18:23:04 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp: Commented out the
          implementation of create_new_mprofile (). Looks like it is not
          getting called anywhere. This was giving compile errors with
          g++ on Linux.

Sat May 26 17:41:37 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * performance-tests/DII_Latency/run_test.pl:
        * performance-tests/DSI_Latency/run_test.pl:
        * performance-tests/Deferred_Latency/run_test.pl:
        * performance-tests/Single_Threaded_Latency/run_test.pl:
        * performance-tests/Thread_Pool_Latency/run_test. pl:

          Bumped up the timeouts on these tests as they seem to be timing
          out on Tru64 before the test could be completed.

Sat May 26 17:12:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/README:
        * examples/PluggableUDP/tests/Basic/README:
        * examples/PluggableUDP/tests/Performance/README:
        * examples/PluggableUDP/tests/SimplePerformance/Readme.txt:
        * examples/PluggableUDP/tests/SimplePerformance/README:

          Fixed the content of the README's. Removed the Readme.txt and
          replaced it with a README file for the SimplePerformance test.

        * examples/PluggableUDP/tests/Performance/client.cpp:

          Fixed some formatting.

Sat May 26 16:45:04 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * examples/PluggableUDP/tests/SimplePerformance/run_test.pl:

          The previous changelog should have been mentioned
          examples/PluggableUDP/tests/SimplePerformance/run_test.pl and
          not  examples/PluggableUDP/run_test.pl. Added the new file with
          correct permissions.

Sat May 26 16:42:05 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * examples/PluggableUDP/run_test.pl:

          Removed the file from the repository as it was checked in
          without execute permissions.

Fri May 25 20:51:33 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * examples/PluggableUDP/Makefile.bor:
        * examples/PluggableUDP/DIOP/Makefile.bor:
        * examples/PluggableUDP/tests/Makefile.bor:
        * examples/PluggableUDP/tests/*/*.bor:
          Added remaining Borland makefiles for the PluggableUDP example.

        * orbsvcs/tests/Makefile.bor:
        * orbsvcs/tests/Trading/*.bor:
          Added Borland makefiles for the trading service test.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/Active_Object_Map.i
          (bind_using_system_id_returning_system_id and
          find_system_id_using_user_id):

          If we are not using any active maps, we can employ a shortcut
          where we can skip the creation of
          TAO_Active_Object_Map::Map_Entry and the inserting into the user
          id map.  This should not be a problem because the insertion into
          the user id map was not useful because the servant field was
          zero.

        * tao/PortableServer/Active_Object_Map.cpp: Added a flag
          <using_active_maps_> to see if we are using active maps in this
          implementation of the active object map.

          The motivation of the above changes are described here:

          With the RETAIN policy, POA::create_reference and
          POA::create_reference_with_id consume resources when creating
          references.  This can lead to scalibility problems on the server
          specially if the server creates many references that end up not
          being used.

          The POA::create_reference* methods create a instance of
          TAO_Active_Object_Map::Map_Entry and bind it to the user id map.
          The binding in the user id map is really not useful because the
          servant field is zero.

          The solution is to recognize when the servant is zero, create a
          key without creating an instance of
          TAO_Active_Object_Map::Map_Entry and without occupying a slot in
          any of the tables.  The tables will get populated when the
          servant is available (either through the POA::activate methods
          or through the Servant Activators).

          Creating a fake key that is usable in the future should be easy
          with the hash and linear maps.  However, it will not be possible
          with the active map since the key encodes the information of the
          slot that is being occupied.

          The change was to check if we are using active maps - active
          maps are used when we either have system ids and reactivation is
          not allowed or when using hints.  If we are not using active
          maps, we short cut the POA::create_reference* methods such that
          no map entry is created and nothing is added to the user id map.
          With POA::create_reference, we ask the linear or hash map to
          create us a key which we use as the system id; with
          POA::create_reference_with_id, we use the user id as the system
          id.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/ImplRepo_i.cpp (ServerObject_i): Moved the
          ServerObject_i from POA.cpp to ImplRepo_i.h and ImplRepo_i.cpp.
          Enhanced the ServerObject_i so that it remembers which POA it is
          registered with.

        * tao/PortableServer/POA.cpp (destroy_i): Changed the deactivation
          of <server_object> such that we do not have to access the Root
          POA in order to deactivate it.  We use the POA in the
          <server_object> itself.  Also improved the memory management for
          <server_object>.  This change should fix bug 924.  Also, the
          ImplRepo tests should no longer crash.  Thanks to Greg Hall
          <greg.j.hall@boeing.com> for reporting this problem.

        * tao/PortableServer/Makefile
        * tao/PortableServer/Makefile.bor
        * tao/PortableServer/TAO_PortableServer.dsp
        * tao/PortableServer/TAO_PortableServer_Static.dsp

          Added new files.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/PortableServer.pidl:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/POA.cpp:

          Added readonly attribute id which was recently introduced by
          the PortableInterceptor spec
          (http://cgi.omg.org/cgi-bin/doc?ptc/01-03-04.pdf).  This
          returns the unique id of the POA in the process in which it
          is created. It is for use by portable interceptors.

          This id is guaranteed unique for the life span of the POA in
          the process. For persistent POAs, this means that if a POA
          is created in the same path with the same name as another
          POA, these POAs are identical and, therefore, have the same
          id. For transient POAs, each POA is unique.

        * tao/PortableServer/POA.cpp (create_object_key): Refactored code
          to reuse the now cached POA id instead of recalculating the POA
          id every time.

        * examples/POA/NewPOA/NewPOA.cpp: Extended test to print out POA
          id in addition to the POA name.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (check_poa_manager_state): Minor code
          for exception when POA Manager is in holding state should be 1
          instead of 0.  Same for the discarding and inactive states.

        * tao/Exception.cpp (_info):
        * tao/corbafwd.h (TAO_POA_INACTIVE): Added new constant.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/ORB_Core.cpp (~TAO_ORB_Core): Added the deletion of the stub
          factory to avoid a memory leak.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/Leader_Followers/run_test.pl:

          - Renamed st_directive and tp_directive to
          select_reactor_directive and tpool_reactor_directive
          respectively since these names are more indicative of what is
          going on.

          - Removed mt_conffile and st_conffile variables.

          - Changed "-ORBreactortype select_st" to "-ORBreactortype
          select_mt".

          - Moved the "-ORBsvcconfdirective" argument to the directive
          variable to make easier to read.

Fri May 25 19:06:51 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * performance-tests/POA/Create_Reference/create_reference.dsp:
          Removed the linking of the Strategies library from this project.

Fri May 25 17:38:42 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/server.cpp:
          Modified the error messages so that they would be highlighted by
          the scoreboard error parser.  It turns out that this test has been
          failing on Win32, but it wasn't noticed since the error messages didn't
          print out one of the "error" words that the scoreboard script looks for.
          Note: The failure was due to a wrong parameter being passed to the
          server application and not due to a bug in RT CORBA.

        * tests/RTCORBA/Banded_Connections/run_test.pl:
          Fixed the wrong priority flag.  The flag is used to specify a bad
          priority value that will cause the RT POA to throw an exception.  It
          turns out that the value (3) was in one of the priority bands, so the
          test wasn't throwing an exception.  Changed to priority 7 which wasn't
          in a band.

Fri May 25 15:56:17 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.{cpp,h}:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.{cpp,h}:
        * tao/IIOP_Acceptor.{cpp,h}:
        * tao/Pluggable.h:
        * tao/PortableServer/Default_Acceptor_Filter.cpp:
        * tao/PortableServer/RT_Acceptor_Filters.cpp:
        * tao/Strategies/SHMIOP_Acceptor.{cpp,h}:
        * tao/Strategies/UIOP_Acceptor.{cpp,h}:
          Added share_profile flag to TAO_Acceptor::create_mprofile
          and removed TAO_Acceptor::create_endpoint_for_mprofile.
          Thanks to Paul Calabrese <calabrese_p@ociweb.com> for
          suggesting the modification to simplify the interface.

Fri May 25 15:31:45 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * tests/Leader_Followers/run_test.pl: Changed this to use
        -ORBSvcConfDirective rather than specifying a configuration file.
        Also changed to use Advanced_Resource_Factory service name rather
        than Resource_Factory, now that -ORBReactorType moved into the
        Advanced_Resource_Factory.

        * tests/Leader_Followers/multi_threaded_event_loop.conf: Removed
        this file as it's no longer necessary or used...see above.

Fri May 25 12:04:02 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/examples/Security/Send_File/client_nopasswd.conf:
        * orbsvcs/examples/Security/Send_File/server_nopasswd.conf:
          Updated to use client_key and server_key certificates as the
          private keys.

        * orbsvcs/examples/Security/Send_File/server_cert.pem:
        * orbsvcs/examples/Security/Send_File/server_key.pem:
        * orbsvcs/examples/Security/Send_File/client_cert.pem:
        * orbsvcs/examples/Security/Send_File/client_key.pem:
        * orbsvcs/examples/Security/Send_File/cacert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client_key.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_key.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/cacert.pem:

          The previous certificates expired. So, used the ones in
          $ACE_ROOT/TAO/orbsvcs/tests/Security/SecurityLevel1

Fri May 25 13:32:55 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * TAO_IDL/include/idl_global.h: Moved template instantiations into
        utl_global.cpp.  The instantiations in the header files caused
        problems on, at the very least, Linux builds using g++.

        * TAO_IDL/util/utl_global.cpp: Added template instantiations that
        were originally in idl_global.h.

Fri May 25 10:52:30 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_visitor_interface/collocated_ami_handler_ch.h:
        * TAO_IDL/be_include/be_visitor_operation/ami_exception_holder_operation_ch.h:
        * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_arglist.cpp:

          Removed these unused files from the repository.

Fri May 25 09:13:41 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_visitor.cpp:

          Removed unnecessary ACE_TRY block.

        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/ifr_visitor_macro.h:

          Removed unnecessary pointer temporary local variable.

Fri May 25 08:47:27 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_identifier.cpp:

          Fixed another case where a prefix with a leading underscore is
          added internally by the IDL compiler, and must be distinguished
          from legitimate escaped identifiers in the IDL file.

Fri May 25 06:02:32 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * docs/tutorials/Quoter/RT_Event_Service: Added some fixes to
          ensure that we don't delete the tie member too quickly.  Thanks
          to Dayisi <dayisi@163.com> for reporting this.

        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.cpp (close):
          Fixed a bug where we don't wait for our own thread to quit.
          Thanks to Dayisi <dayisi@163.com> for reporting this.

Thu May 24 23:34:52 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptor.pidl:

          There is no need to fully qualify the CORBA::Object type.
          "Object" is enough.  This change was necessary since its forward
          declaration in orb.idl was removed.  This fixes problems when
          compiling `tao/PortableInterceptor.pidl'.

Thu May 24 21:47:00 2001  Chris Gill  <cdgill@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.{cpp, h}: replaced
          DEPENDENCY_SET_MAP with its full expansion in both the declaration
          and definition of TAO_Reconfig_Scheduler<RECONFIG_SCHED_STRATEGY,
          ACE_LOCK>::map_dependency_i to work around a compiler error
          in g++/gcc 2.95.1 for VxWorks cross-compilation build.

Thu May 24 16:57:16 2001  Ossama Othman  <ossama@uci.edu>

        * tao/LocalObject.h (hash):

          Updated documentation for this method.

Thu May 24 16:34:37 2001  Ossama Othman  <ossama@uci.edu>

        * tao/corbafwd.h:

          Removed the TAO_INVOCATION_CONNECT_MINOR_CODE location minor
          code.  There is already an OMG assigned minor code used for the
          same type of problem.

        * tao/orb.idl:

          Added the CORBA::ParameterMode enumeration to this IDL file.
          For some reason it was never defined.

        * tao/Exception.cpp:

          Updated CORBA::SystemException minor code descriptions.

        * tao/ClientRequestInfo.cpp:
        * tao/IORInfo.cpp (add_ior_component_to_profile):
        * tao/Object_Ref_Table.cpp (register_initial_reference):
        * tao/PolicyFactory_Registry.cpp (register_policy_factory):

          Updated all exception minor codes.  They were changed in the
          latest Portable Interceptor draft spec.

        * tao/Invocation_Endpoint_Selectors.cpp (select_endpoint):
        * tao/RT_Invocation_Endpoint_Selectors.cpp (select_endpoint):

          Removed all uses of the TAO_INVOCATION_CONNECT_MINOR_CODE
          location minor code.  Use the OMG assigned minor code (2)
          instead.

        * tao/Invocation.cpp (invoke):

          Added the OMG assigned minor code to the thrown CORBA::UNKNOWN
          system exception.  This exception is thrown when an unknown user
          exception occurs during an invocation.

        * tao/LocalObject.cpp (_create_request, _request):

          Added OMG assigned minor codes to the thrown CORBA::NO_IMPLEMENT
          exceptions.

          (_get_interface):

          According to the CCM spec, this method should throw a
          CORBA::NO_IMPLEMENT exception when invoked on a local object.

        * tao/LocalObject.h:

          Doxygenated this header.

          (_key):

          Removed unnecessary default CORBA::Environment argument.

        * tao/LocalObject.i:

          Cosmetic updates.

        * tao/ORB.cpp (object_to_string):

          Throw a CORBA::MARSHAL exception if the given object to
          stringify is a locality constrained object.

          When creating a URL IOR, do not use the profile currently in
          use.  Use the very first one in the profile list associated with
          the given object.

        * tao/Object.h (_key):

          Removed unneccessary default CORBA::Environment argument.

Thu May 24 18:31:53 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * performance-tests/POA/Implicit_Activation/Test.idl:

          Put a leading underscore in front of an inteface
          declaration named Factory, which differs from the
          IDL keyword 'factory' only by case. Generated code
          will be unchanged.

Thu May 24 18:19:05 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Updated section on the Interface Repository with the
          new tao_ifr features, and added entries to the
          subsections Known Issues and Future Work.

Thu May 24 17:45:13 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/README:
        * orbsvcs/IFR_Service/drv_args_ifr.cpp:
        * orbsvcs/IFR_Service/drv_preproc_ifr.cpp:
        * orbsvcs/IFR_Service/drv_private_ifr.h:
        * orbsvcs/IFR_Service/tao_ifr.cpp:

          Modified the tao_ifr executable to be able to process
          multiple IDL files. These changes are based on the
          patches sent in recently for the IDL compiler by
          Craig Rodrigues <rodrigc@mediaone.net>.

Thu May 24 16:25:36 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/README:
        * orbsvcs/IFR_Service/be_extern.h:
        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/drv_args_ifr.cpp:
        * orbsvcs/IFR_Service/drv_extern_ifr.h:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor_macro.h:
        * orbsvcs/IFR_Service/tao_ifr.cpp:

          tao_ifr can now handle the -ORBxxx command line
          options. The most useful to tao_ifr will be the
          '-ORBInitRef InterfaceRepository=file://<filename>'
          option, which frees tao_ifr from relying on IP
          multicast to resolve the IFR service. Also update
          the README file with this new information.

Thu May 24 16:23:01 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Added item about new IDL compiler capability of
          processing multiple IDL files per execution.

Thu May 24 15:37:48 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_identifier.cpp:

          Fixed another problem in the constructor of
          UTL_Identifier, caused by recent changes. This
          one showed up in generated OBV code.

        * tests/AMI_Buffering/admin.dsp:
        * tests/AMI_Buffering/client.dsp:
        * tests/AMI_Buffering/server.dsp:

          Added missing files to the FileView window.

Thu May 24 10:30:23 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:

          Removed generation of "_var_type" typedef for
          anonymous sequences, since the _var class for
          anonymous sequences is not generated. Thanks to
          Lothar Werzinger <Werzinger.Lothar@krones.de> for
          reporting this bug.

Thu May 24 09:47:30 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_predefined_type.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be_include/be_predefined_type.h:
        * TAO_IDL/be_include/be_string.h:
        * TAO_IDL/be_include/be_type.h:
        * TAO_IDL/util/utl_identifier.cpp:

          Fixed a problem, with the changes below, that was
          causing an incorrent typecode name to be generated
          in the client header file. Also removed unused
          default arguments from be_visitor_typecode_defn::tc_name(),
          and unused functions from be_visitor_typecode_defn,
          be_type, be_predefined_type, and be_string.

Wed May 23 21:27:28 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_predefined_type.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_attribute/attribute.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/fe/fe_init.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/lex.yy.cpp.diff:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/include/utl_err.h:
        * TAO_IDL/include/utl_identifier.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_err.cpp:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/util/utl_identifier.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Moved the stripping of the leading underscore (if any)
          of an identifier from the lexer to the Identifier
          constructor, and added a flag to the Identifier class
          to indicate that the name had been 'escaped' in the IDL
          file. Escaping is the workaround described in the spec
          for legacy IDL files containing names that have since
          become IDL keywords. Escaping turns off keyword checking,
          but the generated name must be stripped of the underscore.
          Previously, checking for a clash with an IDL keyword in
          the IDL compiler was case-sensitive. That part is still
          there, since an exact match causes the lexer to return
          a token of the wrong type, leading to a 'syntax error'
          message. Case-insensitive checking has now been added,
          just before the node is added to the AST, and it is
          turned off by a check of the new 'escaped' flag in class
          Identifier. Note that a case-sensitive match with a C++
          keyword will, as defined by the spec, cause '_cxx_' to
          be prepended to the generated name - this is unchanged
          in the IDL compiler. Thanks to Paul Calabrese
          <calabrese_p@ociweb.com> for discovering and reporting
          this bug.

          Also removed three default arguments from the Identifier
          class constructor that have never been used.

        * tao/orb.idl:

          Removed forward declarations of interface Object and
          interface Exception from the file. They are unused
          and undefined, and they also cause problems with the
          new case-insensitive checking for IDL keyword class
          described above, if orb.idl is included in another
          IDL file. The spec does not require anything in
          particular to be in orb.idl - it only requires that
          it be there.

        * orbsvcs/orbsvcs/CosLifeCycle.idl:

          Placed a leading underscore in front of the name "Factory",
          now an IDL keyword.

        * orbsvcs/orbsvcs/FT_CORBA.idl

          Placed a leading underscore in front of the name "factory",
          now an IDL keyword.

Wed May 23 18:53:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTPOA.pidl:
          Removed file, since it is not used anymore and is replaced by
          tao/PortableServer/RTPortableServer.pidl.  Thanks to Steve
          Totten <totten_s@ociweb.com> for pointing this out.

Wed May 23 15:11:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Makefile:
        * performance-tests/README:
        * performance-tests/Latency/Latency.dsw:
        * performance-tests/Latency/Makefile:
        * performance-tests/Latency/Makefile.bor:
        * performance-tests/Latency/README:
        * performance-tests/Latency/TestImpl.java:
        * performance-tests/Latency/ami-latency-client.bor:
        * performance-tests/Latency/ami-latency-client.cpp:
        * performance-tests/Latency/ami-throughput-client.bor:
        * performance-tests/Latency/ami-throughput-client.cpp:
        * performance-tests/Latency/client-mt-exclusive.conf:
        * performance-tests/Latency/client-st-exclusive.conf:
        * performance-tests/Latency/client-st-muxed.conf:
        * performance-tests/Latency/client.bor:
        * performance-tests/Latency/client.conf:
        * performance-tests/Latency/client.cpp:
        * performance-tests/Latency/client.dsp:
        * performance-tests/Latency/deferred_synch_client.dsp:
        * performance-tests/Latency/dii_client.bor:
        * performance-tests/Latency/dii_client.cpp:
        * performance-tests/Latency/java_client.java:
        * performance-tests/Latency/java_server.java:
        * performance-tests/Latency/multi_threaded.pl:
        * performance-tests/Latency/run_test.pl:
        * performance-tests/Latency/scalability.pl:
        * performance-tests/Latency/server.bor:
        * performance-tests/Latency/server.conf:
        * performance-tests/Latency/server.cpp:
        * performance-tests/Latency/server.dsp:
        * performance-tests/Latency/single_threaded.pl:
        * performance-tests/Latency/st_client.bor:
        * performance-tests/Latency/st_client.conf:
        * performance-tests/Latency/st_client.cpp:
        * performance-tests/Latency/st_client.dsp:
        * performance-tests/Latency/st_server.bor:
        * performance-tests/Latency/st_server.conf:
        * performance-tests/Latency/st_server.cpp:
        * performance-tests/Latency/st_server.dsp:
        * performance-tests/Latency/test.idl:
        * performance-tests/Latency/test_i.cpp:
        * performance-tests/Latency/test_i.h:
        * performance-tests/Latency/test_i.i:
          Removed the Latency test(s).  The test has been superseeded by:
          Single_Threaded_Latency, AMI_Latency, DII_Latency, DSI_Latency,
          Deferred_Latency and Thread_Pool_Latency.
          I didn't remove this stuff before because I was making sure that
          the new tests were useful for the nightly regression testsuite.
          This completes the fixes for [BUGID:324]

Wed May 23 15:55:27 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Simple/squareit/README
        * examples/Simple/fullname/README:
        * examples/Simple/invert_string/README:
        * examples/Simple/palindrome/README: A simple set of examples that
          will be implemented by our summer interns. The README files
          specify what they are expected to do.

Wed May 23 15:09:21 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * tao/iiop_endpoints.pidl:

          Fix comment.

Wed May 23 14:26:07 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/tao_idl.cpp:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/driver/drv_args.cpp:
        * TAO_IDL/driver/drv_preproc.cpp:
        * TAO_IDL/include/drv_private.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Applied patches sent in by Craig Rodrigues <rodrigc@mediaone.net>
          to enable the IDL compiler to process multiple files. The
          code that was there worked on Solaris, but not on Linux or Win32.
          These changes have made it work portably. Also moved some
          global declarations to allow their use by more than one file,
          and made the usual ACE-ification and cosmetic changes.

Wed May 23 13:01:44 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/RTCORBA/Thread_Pool/client.cpp: Changed the default number
          of iterations.

Wed May 23 11:53:00 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * TAO_IDL/ast/ast_interface.cpp:

          Fixed tao_ifr's handling of forward declared interfaces.
          The fix also required the addition of code in the IDL
          compiler to copy some IFR-specific flags in class
          AST_Interface when a forward declared interface's
          full-definition node is redefined. Thanks to
          Philippe Merle <Philippe.Merle@lifl.fr> for discovering
          this bug in his testing of TAO with CorbaScript.

Wed May 23 11:45:09 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Added code to pad the end of a string inserted into the
          typecode, to keep the total length a multiple of 4 bytes,
          as it is done with typecode generation in the IDL compiler.

          Also added code to consolidate the message block before
          calling the typecode constructor. Typecodes constructed
          from a message block large enough to be chained were returning
          garbage values from some accessors. Thanks to Arturo Jos
          Montes Sinning <mitosys@colomsat.net.co> and to Philippe
          Merle <Philippe.Merle@lifl.fr> for simultaneously discovering
          this bug, and to Carlos for seeing the fix right away.

Wed May 23 11:37:02 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * docs/Options.html:

          Added the -ORBLogFile option.  Removed the -ORBCollocation
          yes option (it is deprecated).  Did some minor reformatting.

Wed May 23 09:36:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/Basic/client.dsp:
        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Performance/client.dsp:
        * examples/PluggableUDP/tests/Performance/server.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/client.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/server.dsp:

          Updated static release settings to avoid using anything or
          having any dependencies on things that aren't built in the
          static release automatic build.  This should fix the problems
          of not being able to find tao_idl.exe in the automatic builds.

Wed May 23 09:04:35 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/Cache_Entries.cpp:
        * tao/Cache_Entries.h:
        * tao/Cache_Entries.inl:
        * tao/Connection_Purging_Strategy.h:
        * tao/LRU_Connection_Purging_Strategy.cpp:
        * tao/LRU_Connection_Purging_Strategy.h:
        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/Transport_Cache_Manager.cpp:
        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Cache_Manager.inl:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.cpp:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.h:
        * tao/Strategies/LFU_Connection_Purging_Strategy.cpp:
        * tao/Strategies/LFU_Connection_Purging_Strategy.h:
        * tao/Strategies/NULL_Connection_Purging_Strategy.cpp:
        * tao/Strategies/NULL_Connection_Purging_Strategy.h:

          Performance enhancement and race condition fix for the connection
          purging strategy change.  This version has far less allocations and
          locking in the main line of execution.

Wed May 23 8:23:20 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.h:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/QoS_UDP.h:
        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp:
        * orbsvcs/orbsvcs/AV/Transport.h:
        * orbsvcs/orbsvcs/AV/Transport.cpp:

          Provided a mechanism to modify QoS when there is a change in
          QoS. Also added the QoS negotiator mechanism as a means of
          notifying change in QoS.

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:

         Enhanced the test to test the notification and modification of change in QoS.

Tue May 22 15:34:20 2001  Sharath R. Cholleti  <sharath@cs.wustl.edu>

        * tao/tests/Oneway_Buffering/Oneway_Buffering_Admin.{h,cpp}:
        * tao/tests/Big_Oneways/Session.{h,cpp}:
        * tao/tests/AMI_Buffering/test_i.{h,cpp}:
        * tao/examples/Logging/Logger_i.{h,cpp}:
        * tao/examples/Buffered_Oneways/test_i.{h,cpp}:
        * tao/examples/Buffered_AMI/AMI_Buffering_Admin.{h,cpp}:
          Fixed compile errors in Forte update 1.

Tue May 22 21:21:10 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp: When the IFR and Name
          Service initialize the multicast server they check if the
          ORBMulticastDiscoveryEndpoint option was specified and use that
          address instead of the default one, however, the Trading Service
          did not. It just uses the hard coded default no matter
          what. This meant we can't programmatically change the multicast
          endpoint.  The fix was to add the little bit of code in the Name
          Service and IFR implementation to
          TAO_Trading_Loader::init_multicast_server() that checks for the
          multicast endpoint.  Thanks to Mike Pyle
          <mike.pyle@burning-glass.com> for this fix.

Mon May 21 18:43:45 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tests/QtTests: Fixed the Makefile so that it handles the
          PLATFORM_QT_* flags correctly.  Thanks to Hans Utz
          <hans.utz@informatik.uni-ulm.de> for reporting this.

Mon May 21 23:22:20 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Internal.cpp (open_services):

          Fixed seg faults that occured due to brain damaged compilers
          that still treat string literals as "char *" instead of "const
          char *".  This compiler problem caused the wrong (shallow)
          assignment operator to be used instead of the correct (deep)
          assignment operator.  When the string sequence went out of
          scope, it attempted to delete a string that was not dynamically
          allocated.  To get around deficiencies in such compilers,
          duplicate the string literal using CORBA::string_dup().

Mon May 21 16:54:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/ESF/ESF_Delayed_Changes.h:
          Add missing forward declaration for ACE_Command_Base.  Thanks to
          the SAIC guys for pointing this out: Frank J. Hodum
          <fhodum@dctd.saic.com> and J. Russell Noseworthy
          <rnosewor@objectsciences.com>

Mon May 21 15:39:51 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/Native_Exceptions/test_i.{h,cpp}:
        * tests/DSI_Gateway/test_i.{h,cpp}:
        * tests/Timed_Buffered_Oneways/test_i.{h,cpp}:
        * tests/Portable_Interceptors/Dynamic/test_i.{h,cpp}:
        * tests/Endpoint_Per_Priority/test_i.{h,cpp}:
        * tests/Forwarding/test_i.{h,cpp}:

        Fixed compilation errors in Forte Update 1.

Sun May 20 12:30:52 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * performance-tests/Callback/Server_i.{h,cpp}:
        * performance-tests/Callback/Callback_i.{h,cpp}:
        * performance-tests/Latency/test_i.{h,cpp}:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/test_i.{h,cpp}:
          Fixed compile errors in Forte update 1.

Sun May 20 10:43:02 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/OctetSeq/test_i.{h,cpp}:
        * tests/MT_Server/test_i.{h,cpp}:
        * tests/Nested_Event_Loop/test_i.{h,cpp}:
        * tests/Leader_Followers/test_i.{h,cpp}
        * tests/Object_Loader/Test_i.{h,cpp}:
        * tests/Single_Read/test_i.{h,cpp}: Fixed compile errors in Forte
          update 1.

Sat May 19 20:37:00 2001  Balachandran Natarajan <bala@cs.wustl.edu>

        * tests/Connection_Purging/server.dsp: Fixed an error on Win32
          platforms

Sat May 19 17:00:00 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IIOP_Profile.cpp (parse_string):

          Fixed misguided code that appended a default port to the address
          string in the event one wasn't specified, only to be converted
          to an integer.  Just use the integer value!

          Fixed broken code that attempted to extract the specified port
          from the address string.  The code was unnecessarily
          complicated.  It is surprising that the old code actually
          worked.

          Made the code more efficient by removing an unnecessary
          allocation and several string operations.

          Throw a CORBA::INV_OBJREF exception if no hostname was
          specified.  A hostname is required by the spec.

          If no version is specified, default to IIOP 1.0, as dictated by
          the spec.

        * tao/IIOP_Endpoint.cpp (TAO_IIOP_Endpoint):

          If a port isn't specified, use the default IANA assigned IIOP
          port (683).  This constructor is only used on the client side.

          Force the address family type of the INET_Addr to be invalid.
          It will be set when it is first accessed from the
          IIOP_Endpoint.  This delays resolution of the IP address until
          the first request is made.  For some reason this functionality
          was once again disabled.

        * tao/RT_Policy_i.cpp (hook):

          Fixed all misuses of the emulated exception macros, and lack
          thereof.

          Fixed misuses of ACE_static_cast where an ACE_dynamic_cast was
          needed.

Sat May 19 17:17:32 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * docs/tutorials/Quoter/Simple/Impl-Repo/index.html,
        * docs/pluggable_protocols/index.html (TAO_IIOP_Profile),
        * orbsvcs/Notify_Service/README,
        * tests/Param_Test/anyop.cpp (main),
        * tests/Param_Test/manipulation.cpp: Fixed all uses of
          "iioploc://" with "corbaloc:iiop:" to conform to the CORBA INS
          standard consistently.  Thanks to Craig Rodrigues for suggesting
          this.

Sat May 19 11:02:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp: Fixed a problem
          while trying to check for availability of a connection. A call
          was made to cache the transport rather than to find the
          transport. Looks like "cut-and-paste"yopia :)

Sat May 19 09:09:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/NULL_Connection_Purging_Strategy.h: Made some
          cosmetic changes.

        * tao/Strategies/NULL_Connection_Purging_Strategy.cpp: Fixed a
          compile error with Win32 builds.

Sat May 19 08:41:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/Event_Service/Makefile:
        * docs/tutorials/Quoter/Event_Service/Makefile: Updated
          dependencies.  This should take care of the NoInterceptors
          build.

Fri May 18 22:16:38 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp: Fixed a warning in
          g++ builds.

Fri May 18 19:49:04 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/SecurityLevel1/run_test.pl:

          Removed "-ORBDebugLevel 4" from the client and server command
          line options.  It caused an absurd amount of useless output for
          this test.

        * orbsvcs/tests/Security/Makefile (DIRS):

          Added `SecurityLevel1' directory to the list of directories to
          build.

Fri May 18 16:30:57 2001  Ossama Othman  <ossama@uci.edu>

        * tao/FILE_Parser.cpp (parse_string):

          Added missing ACE_CHECK_RETURN after the ACE_ENDTRY macro.  It
          is required since the caught exception is re-thrown.

Fri May 18 15:27:11 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/Connection_Purging_Strategy.h:
        * tao/LRU_Connection_Purging_Strategy.h:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.h:
        * tao/Strategies/LFU_Connection_Purging_Strategy.h:
        * tao/Strategies/NULL_Connection_Purging_Strategy.h:

          Remove "pragma once" warnings.

Fri May 18 15:14:49 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/Transport_Cache_Manager.h:

          Fixed compilation error involving TAO_debug_level in the inline
          file.

Fri May 18 14:23:22 2001  Chad Elliott  <elliott_c@ociweb.com>

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * tao/Acceptor_Impl.cpp:
        * tao/Cache_Entries.cpp:
        * tao/Cache_Entries.h:
        * tao/Cache_Entries.inl:
        * tao/Connection_Purging_Strategy.cpp:
        * tao/Connection_Purging_Strategy.h:
        * tao/Connection_Purging_Strategy.inl:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Connector.cpp:
        * tao/LRU_Connection_Purging_Strategy.cpp:
        * tao/LRU_Connection_Purging_Strategy.h:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/Transport.cpp:
        * tao/Transport_Cache_Manager.cpp:
        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Cache_Manager.inl:
        * tao/default_resource.cpp:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.cpp:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.h:
        * tao/Strategies/LFU_Connection_Purging_Strategy.cpp:
        * tao/Strategies/LFU_Connection_Purging_Strategy.h:
        * tao/Strategies/NULL_Connection_Purging_Strategy.cpp:
        * tao/Strategies/NULL_Connection_Purging_Strategy.h:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/advanced_resource.cpp:
        * tests/BiDirectional/test_i.cpp:
        * tests/BiDirectional_NestedUpcall/test_i.cpp:

          Merged most of the Connection Purging code into the
          Transport_Cache_Manger to simplify things and to reduce the
          footprint size.

        * tests/Connection_Purging/client.fifo.conf:
        * tests/Connection_Purging/client.lfu.conf:
        * tests/Connection_Purging/client.lru.conf:

          Fix the usage of a deprecated option.

Fri May 18 12:23:31 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
          Added missing explicit template instantiations for
          ACE_Hash_Map_Iterator_Ex and ACE_Hash_Map_Reverse_Iterator_Ex.

Fri May 18 10:30:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:
          Fixed KCC warning.

        * examples/PluggableUDP/DIOP/TAO_DIOP.dsp:
        * examples/PluggableUDP/DIOP/TAO_DIOP_Static.dsp:
          Renamed the configuration names to have the words DLL and LIB in
          them so that the win32 build picks these dsps before the tests that
          use them.

Fri May 18 06:53:20 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Two_Stage,
        * orbsvcs/tests/AVStreams/Simple_Three_Stage,
        * orbsvcs/tests/AVStreams/Component_Switching:
          Added makefiles for BCB.  Thanks to Johnny Willemsen
          <jwillemsen@remedy.nl> for contributing this.

Thu May 17 23:37:04 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Request_Interceptor_Flow/run_test.pl:

          Added this script for use with quick "one-button" automated
          testing (e.g. the nightly builds).

Thu May 17 23:15:29 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_Request_Interceptor.h (scenario_):
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_Request_Interceptor.cpp (receive_request_service_contexts):

          Added a field used to keep track of the scenario count.  It is
          used to get around the inability to call
          RequestInfo::arguments() in the
          receive_request_service_contexts() a interception point.  This
          allows the test to finally run to completion.  [Bug 726]

Thu May 17 22:29:08 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_Request_Interceptor.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_Request_Interceptor.cpp:

          Only increment the ending interception point count if the
          appropriate test is being run.  For example, don't increment the
          ending client side interception point count if the server side
          test is running.  This fixes a problem where the test would fail
          due to an incorrect interception point count.

Thu May 17 15:48:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/RT_Event_Service/index.html:
          Remove reference to non-existent file.  Thanks to
          Yew Khong See <seeyk@yahoo.com> for pointing this out.

Thu May 17 18:52:42 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * examples/POA/Loader/Servant_Activator.cpp (ServantLocator_i):
        * examples/POA/Loader/Servant_Locator.cpp (ServantLocator_i):
          Generalize this code so that it works on BCB.  Thanks to
          Christopher Kohlhoff <chris@kohlhoff.com> for reporting this.

        * tests/Object_Loader/run_test.pl: The Object_Loader test
          dynamically loads a DLL, and for this to work the DLL needs to
          be put on the path.  Thanks to Christopher Kohlhoff
          <chris@kohlhoff.com> for reporting this.

        * examples/POA/On_Demand_Loading/Servant_Manager.cpp (obtain_servant):
          Corrected a botched patch.  Thanks to Christopher Kohlhoff
          <chris@kohlhoff.com> for reporting this.

Thu May 17 20:28:07 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:

          The change in the IDL compiler of the handling of undefined
          forward declared interfaces necessitated a change in tao_ifr's
          handling of forward declared interfaces (defined or otherwise)
          and of interface members. Thanks to Philippe Merle
          <Philippe.Merle@lifl.fr> for uncovering this bug in his
          CorbaScript testing efforts.

Thu May 17 17:00:39 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * examples/PluggableUDP/DIOP/DIOP_Profile.cpp :
          Modified the instantiation of TAO_OutputCDR to go with the
          new signature.

Thu May 17 18:29:32 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tests/Object_Loader/driver.bor:
        * tests/Object_Loader/test_dll.bor:
          Fixed test makefiles to correctly export the necessary
          classes and functions.

Thu May 17 16:23:40 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Internal.cpp (open_services):

          Use a CORBA::StringSeq to contain the argument vector for the
          Service Configurator instead of an ACE_ARGV to get around some
          unwanted side effects caused by the latter.  With this change,
          redundant/nested quotes around "-ORBSvcConf..." ORB options is
          no longer needed.  [Bug 780]

        * tao/LRU_Connection_Purging_Strategy.cpp (update_item_i):

          Fixed unused argument warning.

Thu May 17 15:53:26 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.h (TAO_ORB_Core):
        * tao/ORB_Core.cpp (data_block_for_message_block):
          Reverted the change I did to ACE_Data_Block *create_data_block_i()
          earlier today. There is not much point in having a
          ACE_Allocator *msgblock_allocator in its signature when that has
          no role in creating a ACE_Data_Block.

Thu May 17 15:45:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Single_Threaded_Latency/default.conf:
        * performance-tests/Single_Threaded_Latency/default_configuration.pl:
          Add script and configuration file to measure the performance of
          the ORB with the default configuration.

Thu May 17 12:33:56 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/SecurityLevel1/ca.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client_key.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_key.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_cert.pem:
          The certificates are expired. So, regenerated
          them.

Thu May 17 15:30:28 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/LRU_Connection_Purging_Strategy.cpp:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.cpp:
        * tao/Strategies/LFU_Connection_Purging_Strategy.cpp:
        * tao/Strategies/NULL_Connection_Purging_Strategy.cpp:

          Quick (not the best) fix for warnings.  This is going to be
          rewritten very soon anyway.

Thu May 17 12:19:24 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/CDR.h:
        * tao/CDR.cpp:
          Modified the contructor of TAO_OutputCDR to go with the change
          in ACE_OutputCDR so that message blocks are allocated from TSS.
          This change and related changes fix bug147.

        Added new methods for Resource Retrieval in the following files:

        * tao/Resource_Factory.h (TAO_Resource_Factory):
        * tao/Resource_Factory.cpp:
        * tao/default_resource.cpp:
        * tao/default_resource.h:
          virtual ACE_Allocator* input_cdr_msgblock_allocator (void);
          virtual ACE_Allocator* output_cdr_msgblock_allocator (void);

        * tao/Strategies/advanced_resource.h :
        * tao/Strategies/advanced_resource.cpp (create_purging_strategy):
          virtual ACE_Allocator* input_cdr_msgblock_allocator (void);

        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp:
          ACE_Allocator *output_cdr_msgblock_allocator ()
          ACE_Allocator *input_cdr_msgblock_allocator ()
          ACE_Allocator *input_cdr_msgblock_allocator_i ()

          and new private variables:
          ACE_Allocator *message_block_msgblock_allocator_ and
          ACE_Allocator *input_cdr_msgblock_allocator_;

        * tao/ORB.cpp:
        * tao/TAO_Server_Request.cpp:
        * tao/Typecode.cpp :
        * tao/Invocation.cpp:
        * tao/IIOP_Profile.cpp (encode_endpoints):
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Base.cpp (process_request):
        * tao/Exception.cpp :
        * tao/Strategies/UIOP_Profile.cpp (create_tagged_profile):
        * tao/Strategies/SHMIOP_Profile.cpp (create_tagged_profile):
          Modified the instantiation of TAO_OutputCDR to go with the
          changed one.

        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Lite.h (TAO_GIOP_Message_Lite):
          Added a new private variable: ACE_Allocator *cdr_msgblock_alloc_

        * tao/Makefile:
        * tao/*/Makefile:
          Updated dependencies.

Thu May 17 11:03:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/Basic/client.dsp:
        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Performance/client.dsp:
        * examples/PluggableUDP/tests/Performance/server.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/client.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/server.dsp:
          Changes that should have been in
          Thu May 17 11:03:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>.

Thu May 17 12:12:39 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Purging_Strategy.cpp:
        * tao/Connection_Purging_Strategy.h:
        * tao/Connection_Purging_Strategy.inl:
        * tao/LRU_Connection_Purging_Strategy.h: Left @@Chad comments
          after a quick review.

Thu May 17 12:10:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Handler.cpp: Added a
          check for the case when we get an errno of EAGAIN.

        * tao/Strategies/GIOP_Message_NonReactive_Base.cpp: Cosmetic
          changes.

Thu May 17 11:03:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/Basic/client.dsp:
        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Performance/client.dsp:
        * examples/PluggableUDP/tests/Performance/server.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/client.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/server.dsp:
          Changed to use tao_idl_static in the static builds and made sure
          that all builds linked against TAO_DIOPx.lib.  This should fix
          the errors in the automatic builds.

Thu May 17 08:56:59 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/RT_Protocols_Hooks.cpp: Moved explicit template instantiation
          code inside the proper guard. This should fix the some
          compilation errors that were occuring when TAO_HAS_RT_CORBA was
          not set.

Thu May 17 08:53:33 2001  Chad Elliott  <elliott_c@ociweb.com>

        * docs/Options.html:

          Updated documentation on -ORBConnectionCachingStrategy,
          -ORBConnectionCachePurgePercentage.  Added documentation on
          -ORBConnectionCacheMax option.

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * tao/Acceptor_Impl.cpp:
        * tao/Connector_Registry.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Connector.cpp:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
        * tao/Transport.cpp:
        * tao/Transport_Cache_Manager.cpp:
        * tao/default_resource.cpp:
        * tao/default_resource.h:
        * tao/orbconf.h:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/advanced_resource.cpp:
        * tao/Strategies/advanced_resource.h:

          Updated the code to use the purging strategy on the ORB_Core.  The
          purging strategy replaces the transport cache in the ORB_Core and
          implements pass-through methods to get to the purging strategies
          transport cache.  These pass-through methods keep track of the
          transport usage.

        * tao/Connection_Purging_Strategy.cpp:
        * tao/Connection_Purging_Strategy.h:
        * tao/Connection_Purging_Strategy.inl:
        * tao/LRU_Connection_Purging_Strategy.cpp:
        * tao/LRU_Connection_Purging_Strategy.h:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.cpp:
        * tao/Strategies/FIFO_Connection_Purging_Strategy.h:
        * tao/Strategies/LFU_Connection_Purging_Strategy.cpp:
        * tao/Strategies/LFU_Connection_Purging_Strategy.h:
        * tao/Strategies/NULL_Connection_Purging_Strategy.cpp:
        * tao/Strategies/NULL_Connection_Purging_Strategy.h:

          New connection purging files.

        * tao/Makefile:
        * tao/Makefile.bor:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/Strategies/Makefile:
        * tao/Strategies/Makefile.bor:
        * tao/Strategies/TAO_Strategies.dsp:
        * tao/Strategies/TAO_Strategies_Static.dsp:

          Added the new files to the makefiles and workspace files.

        * tests/BiDirectional/test_i.cpp:
        * tests/BiDirectional_NestedUpcall/test_i.cpp:

          Replaced usage of the ORB_Core's transport_cache with the
          purging_strategy.

        * tests/Connection_Purging/Makefile:
        * tests/Connection_Purging/Makefile.bor:
        * tests/Connection_Purging/client.bor:
        * tests/Connection_Purging/client.cpp:
        * tests/Connection_Purging/client.dsp:
        * tests/Connection_Purging/client.fifo.conf:
        * tests/Connection_Purging/client.lfu.conf:
        * tests/Connection_Purging/client.lru.conf:
        * tests/Connection_Purging/client.null.conf:
        * tests/Connection_Purging/run_test.pl:
        * tests/Connection_Purging/server.bor:
        * tests/Connection_Purging/server.cpp:
        * tests/Connection_Purging/server.dsp:
        * tests/Connection_Purging/server_shmiop.conf:
        * tests/Connection_Purging/test.dsw:
        * tests/Connection_Purging/test.idl:
        * tests/Connection_Purging/test_i.cpp:
        * tests/Connection_Purging/test_i.h:

          Updated this test to reflect the current connection purging
          strategies.

        * */Makefile*:

          Updated all of the TAO makefile dependencies.

Thu May 17 07:34:43 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Leader_Follower.cpp: Fixed a fuzz error.

Thu May 17 13:42:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor
        * tao/PortableServer/Makefile.bor
        * tao/Strategies/Makefile.bor
          Updated makefiles with changes of yesterday

Thu May 17 04:13:54 2001  Darrell Brunsch <brunsch@uci.edu>

        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_operation_strategy.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:

          Fixed some warnings on g++ (mostly unused args).

Thu May 17 03:15:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_BE_LIB.dsp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_operation_strategy.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp: (added)
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_operation.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp: (added)
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp: (added)
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp: (added)
        * TAO_IDL/be_include/be.h:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_interface_strategy.h:
        * TAO_IDL/be_include/be_operation_strategy.h:
        * TAO_IDL/be_include/be_visitor_amh_pre_proc.h: (added)
        * TAO_IDL/be_include/be_visitor_interface.h:
        * TAO_IDL/be_include/be_visitor_operation.h:
        * TAO_IDL/be_include/be_visitor_interface/amh_sh.h: (added)
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h: (added)
        * TAO_IDL/be_include/be_visitor_interface/interface_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_ss.h: (added)
        * TAO_IDL/driver/drv_args.cpp:

          Just checking in the beginnings of support for AMH in the
          TAO_IDL compiler, allowing the torch to be passed to the
          next person.

Wed May 16 21:28:22 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.cpp (ORB_init):

          Make sure the TAO_Singleton_Manager is initialized in the
          ORB_init() method that doesn't accept a CORBA::Environment()
          argument.  This fixes a memory leak that occured due to the
          inability of a TAO_TSS_Singleton to be registered with the
          TAO_Singleton_Manager since the TAO_Singleton_Manager wasn't
          fully initialized.  Thanks to Mogens Hansen
          <mogens_h@dk-online.dk> for providing the fix.

Wed May 16 20:59:15 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Singleton_Manager.cpp (instance):

          Cleaned up this method so that it returns the pointer just set
          by the allocation rather than the one that was set indirectly.
          It wasn't obvious what was happening otherwise.

Wed May 16 20:58:51 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_scope.cpp:

          In an IDL file, if the first part of a scoped name is declared
          in the first opening of a module, the entire scoped name is
          referenced in a second opening of the module (an error), and the
          full scoped name is declared in a third opening of the module,
          the IDL compiler would go into an endless loop instead of
          reporting the error. Fixed with the addition of a check to
          lookup_by_nane_local(). Thanks to Russell Mora
          <rd.mora@econz.co.nz> for reporting this bug, and for sending
          in an example IDL file.

Wed May 16 18:38:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/AMI_Latency/client.cpp:
          Fixed stupid error, obviously I forgot to compile this.

Wed May 16 20:08:39 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/CDR/basic_types.cpp: An accidental checkin :( that created
          havoc. I am revrting it back to normal.

Wed May 16 19:28:17 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * examples/POA/On_Demand_Loading/Servant_Manager.cpp (obtain_servant):
          Generalize this code so that it works on BCB.  Thanks to
          Christopher Kohlhoff <chris@kohlhoff.com> for reporting this.

Wed May 16 18:53:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/driver/drv_preproc.cpp:

          Changed the size of the read buffer created for the
          preprocessor from BUFSIZ (default 8k) + 1 to
          ACE_Log_Record::MAXLOGMSGLEN (default 4k). This fixes
          a crash that happens when the -E (preprocessor output
          only) option is used with the IDL compiler on an IDL
          file bigger than 4k on Redhat Linux 6.1. Thanks to
          Russell Mora <rd.mora@econz.co.nz> for reporting the
          problem and supplying the fix.

Wed May 16 16:41:17 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_ORB_Loader.cpp:
          Fixed fuzz errors.

Wed May 16 16:40:42 2001  Steve Totten  <totten_s@ociweb.com>

        * docs/ORBEndpoint.html:
          Added documentation for using the portspan feature for IIOP
          endpoints.

Wed May 16 16:35:53 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/GIOP_Message_NonReactive_Handler.h:
        * tao/Strategies/GIOP_Message_NonReactive_Base.in: Fixed fuzz
          errors.

Wed May 16 16:15:24 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
          Commented out template instantiation of
          ACE_Svc_Handler<ACE_SOCK_STREAM, ACE_NULL_SYNCH> since
          it is already instantiated in IIOP_Connection_Handler.cpp.
          This should clean up the warnings in the Lynx_I386 builds.

Wed May 16 15:48:29 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Acceptor.cpp:
        * tao/Strategies/UIOP_Acceptor.cpp:
          Should have known that fixing the warnings under Tru64 would
          have caused warnings from another compiler.  Both should be
          fixed now.

Wed May 16 16:34:02 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Default_Protocols_Hooks.cpp:
        * tao/Default_Protocols_Hooks.h:
          Fixed signature of add_rt_service_context_hook ().  Thanks to Jeff
          for catching the mistake.

Wed May 16 16:21:02 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/PortableServer/Object_Adapter.cpp:
        * tao/Strategies/SHMIOP_Acceptor.cpp:
        * tao/Strategies/UIOP_Acceptor.cpp:
        * tao/RT_Endpoint_Utils.cpp:
          More compiler warning cleanup from the Tru64 compiler.

Wed May 16 16:05:59 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/PortableServer/Default_Servant_Dispatcher.cpp:
        * tao/PortableServer/Default_Servant_Dispatcher.h:
        * tao/PortableServer/RT_Servant_Dispatcher.cpp:
        * tao/PortableServer/RT_Servant_Dispatcher.h:
        * tao/PortableServer/Servant_Dispatcher.cpp:
        * tao/PortableServer/Servant_Dispatcher.h:
        * tao/PortableServer/Makefile:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Object_Adapter.i:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/Servant_Base.h:
        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:
          Strategized the servant dispatch logic as part of the
          RTCORBA subsetting effort.

Wed May 16 13:53:39 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_module.cpp:

          Added is_defined() check before outputting a
          redefinition error on an interface. If the interface
          was forward declared in a previous opening of the
          module, the check is needed so the IDL compiler will
          know that the interface has not yet been defined.
          Thanks to Vsevolod Novikov <novikov@ci.nnov.ru> for
          pointing out the problem and sending in an example
          IDL file.

        * TAO_IDL/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be_visitor_union/union_cs.cpp:

          Changed the void *x parameter in _tao_any_destructor
          to void *_tao_void_pointer. This will reduce the likelihood
          of a name clash. The IDL file mentioned above contained
          an interface named 'x', which uncovered the problem.

        * TAO_IDL/be_visitor_valuetype/field_ch.cpp:

          Removed an unused local variable in visit_typedef().

Wed May 16 11:49:07 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/AMI_Latency/client.cpp:
          Also measure and report the number of calls per second.

Wed May 16 12:50:34 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp: During my merge this file got screwed up losing
          some of the old entries. Fixed those.

Wed May 16 12:00:34 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO_Static.dsp:
        * tao/Strategies/TAO_Strategies_Static.dsp: Added the new files
          and removed deprecated ones.

Wed May 16 11:47:34 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * doc/tutorial/*/Makefile: Updated dependencies.

Wed May 16 11:33:20 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile*:
        * orbsvcs/*/Makefile:
        * examples/*/Makefile:Updated dependencies.

Wed May 16 11:28:39 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:

          Restored generation of 'public:' in OBV class declaration
          inadvertently removed in a previous checkin, and cosmetic
          changes to valuetype and OBV generated code.

Wed May 16 11:12:29 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/*/Makefile: Updated dependencies.
        * performance-tests/*/Makefile:
        * orbsvcs/orbsvcs/Makefile*:

Wed May 16 11:10:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        The following checkins are for bug #884. Please see the detailed
        documentation of the bug for the motivation of the following
        change. The idea behind this change is to use a different
        read-parse mechanism for protocols like SHMIOP which uses the
        reactor for signalling rather than for data availability.

        * tao/GIOP_Message_Reactive_Handler.cpp:
        * tao/GIOP_Message_Reactive_Handler.h:
        * tao/GIOP_Message_Reactive_Handler.inl: Renamed the existing
          GIOP_Message_Handler classes. The name change was necessary to
          indicate that this class uses the reactor for reading data from
          the transport.

        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Handler.inl: Removed them from the repository.

        * tao/GIOP_Message_Base.h: Used the
          TAO_GIOP_Message_Reactive_Handler class instead of the deprecated
          TAO_GIOP_Message_Handler class.


        * tao/GIOP_Message_State.cpp:
        * tao/GIOP_Message_State.h:
        * tao/GIOP_Message_State.i: Added a query method message_fragmented ()
          that returns whether the incoming message is fragmented or not.

        * tao/Transport.cpp:
        * tao/Transport.h: Removed the reactor_signalling () method that
          was a hack added for 1.1.13.

        * tao/Makefile:
        * tao/TAO.dsp: Added the new files.

        * tao/BiDir_GIOP/Makefile
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/TypeCodeFactory/Makefile:
        * tao/SmartProxies/Makefile: Updated dependencies.

        * tao/Strategies/GIOP_Message_NonReactive_Base.cpp:
        * tao/Strategies/GIOP_Message_NonReactive_Base.h:
        * tao/Strategies/GIOP_Message_NonReactive_Base.inl:
        * tao/Strategies/GIOP_Message_NonReactive_Handler.cpp:
        * tao/Strategies/GIOP_Message_NonReactive_Handler.h:
        * tao/Strategies/GIOP_Message_NonReactive_Handler.inl: A new
          strategy for reading and parsing GIOP messages. This is useful
          for protocols like SHMIOP which uses the reactor for
          signalling. Further protocols like SHMIOP can guarentee the
          availability of data in one shot with no flow contro
          mechanisms in place.  This strategy basically reads the GIOP
          header, determines the size of the message, then grows its
          buffers to read the whole message from the transport and sends
          it to the higher lares for further processing.

        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.h: Made SHMIOP use the above
          nonreactive handler strategy.

        * tao/Strategies/Makefile:
        * tao/Strategies/TAO_Strategies.dsp: Added new files.


Wed May 16 10:27:26 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/Basic/client.dsp:
        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Performance/client.dsp:
        * examples/PluggableUDP/tests/Performance/server.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/client.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/server.dsp:
          Win32 project updates for DIOP changes on
          "Tue Apr 15 10:10:10 2001  Frank Hunleth <fhunleth@cs.wustl.edu>".

Wed May 16 10:21:26 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/CORBALOC_Parser.cpp:
        * tao/IORManipulation/IORManipulation.cpp:
          Changed TAO_Stub constructors to use the orb core's  stub
          factory so that they get the right kind of stub.

Wed May 16 09:16:23 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_Stub_Factory.h:
        * tao/RT_Stub_Factory.cpp:
        * tao/RT_Stub.h:
        * tao/RT_Endpoint_Utils.cpp:
        * tao/RT_Endpoint_Utils.h:
          Added more #ifdef guards for TAO_HAS_RT_CORBA for no ami builds.

Wed May 16 02:30:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tao/Messaging_ORBInitializer.cpp:

          Fixed a missing #ifdef guard for TAO_HAS_SYNC_SCOPE_POLICY.

        * tao/Messaging_PolicyFactory.cpp:

          Fixed a missing #ifdef guard for TAO_HAS_SYNC_SCOPE_POLICY.

        * tao/MessagingC.cpp:
        * tao/MessagingC.i:

          Fixed missing #ifdef guards for TAO_HAS_PRIORITY_POLICIES and
          TAO_HAS_ROUTING_POLICY.

        * tao/RT_ORB_Loader.cpp:

          Fixed missing #ifdef guards for TAO_HAS_RT_CORBA. RT CORBA people, please
          check this.

Wed May 16 07:40:11 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor
          Updated this file to reflect the latest changes

Tue May 15 16:18:07 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Exception.h:
        * tao/Exception.cpp:
          Removed the unused TAO_Exceptions::system_exceptions field.

        * tao/DynamicInterface/ExceptionList.cpp:
          Moved the instantiation of ACE_Unbounded<CORBA::TypeCode_ptr> to
          the DynamicInterface library, it is no longer required in TAO.

Tue May 15 17:43:29 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_Stub.cpp:
          Added TAO_HAS_RT_CORBA guards around the contents of this file.
          Thanks to Michael Kircher for catching it.

Tue Apr 15 17:31:16 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tao/Protocols_Hooks.cpp:
        * tao/Protocols_Hooks.h:
          Fixed signature of add_rt_service_context_hook ().  Thanks to Kitty
          and the Tru64 compiler for catching the typo.

Tue May 15 14:16:39 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/IIOP_Connection_Handler.h:
          Fixed comments.

Tue May 15 15:48:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tao/Reactor_Registry.h:
        * tao/Reactor_Registry.cpp:

          Added a member variable holding the leader follower strategy,
          and a method for accessing it. The leader follower strategy
          gets created by the resource factory, which is obtained from the
          ORB core.

        * tao/ORB_core.h:

          Added a accessor method to the leader follower strategy,
          it fetches it via the reactor registry.

        * tao/ORB_core.h:
        * tao/ORB_core.cpp:

          Implemented the accessor method the leader follower strategy
          and changed the usage of the leader follower helper class
          to use the leader follower strategy in the method <run>.

        * tao/Leader_Follower.h:
        * tao/Leader_Follower.i:
        * tao/Leader_Follower.cpp:

          Added the leader follower strategies, consisting of a base
          class <TAO_LF_Strategy> and two concrete strategies
          <TAO_Null_LF_Strategy>, doing nothing, and <TAO_Complete_LF_Strategy>,
          behaving as the normal.

          Also, changed the implementation of <TAO_LF_Event_Loop_Thread_Helper>
          to use the new strategy.

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:

          Changed the call on <set_upcall_thread> to go via the strategy
          in <process_request_message>.

        * tao/default_resource.h:
        * tao/default_resource.cpp:

          Added a factory method <create_lf_strategy> which instantiates
          the <TAO_Complete_LF_strategy>.

        * tao/Strategies/advanced_resource.h:
        * tao/Strategies/advanced_resource.cpp:

          Added a factory method <create_lf_strategy> which instantiates
          the <TAO_Complete_LF_Strategy> for the <select_mt> and <tp> reactor.

          For the <select_st> reactor it instantiates the <TAO_Null_LF_Strategy>.

Tue May 15 15:42:11 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:

          Replaced 'delete' with 'delete []' where the
          class string member had been allocated with
          'new char[n]'.

Tue May 15 14:36:50 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include/utl_string.h:
        * TAO_IDL/util/utl_string.cpp:

          Changed allocations for this class' two char*
          members to always use ACE_OS::strdup. Previously,
          there was a mixture of ACE_OS::strdup and new.
          Also removed an unused constructor, an unused class
          member, and an extra iteration over the string when
          computing the canonical (all uppercase) member from
          the regular member.

Tue May 15 13:26:36 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:

          Removed an unused local variable in visit_typedef().

Tue May 15 09:38:57 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IIOP_Acceptor.cpp (dotted_decimal_address):

          If the IP address in the INET_Addr is the INADDR_ANY address,
          then force the actual IP address to be used by initializing a
          new INET_Addr with the hostname from the original one.  If that
          fails then something is seriously wrong with the systems
          networking setup.  This fixes a problem on systems where network
          interface probing fails and the "-ORBDottedDecimalAddresses 1"
          ORB option is used.  Thanks to Albert Wijnja
          <Albert.Wijnja@meco.nl> for reporting the problem.

Tue Apr 15 10:45:16 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tao/Invocation.cpp:
        * tao/RT_Invocation_Endpoint_Selectors.cpp:
        * tao/RT_Endpoint_Utils.cpp:
          Miscellaneous cleanup that should have been caught before
          the check in, but somehow wasn't.

Tue May 15 10:43:23 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_helper.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_valuetype_fwd.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/enum_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/ami_interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_brokers_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/proxy_impls_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/base_proxy_impl_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ih.cpp:
        * TAO_IDL/be/be_visitor_root/root_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL//be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/valuetype_fwd_ch.cpp:

          Cleaned up code generation in the stub header file. Many
          cosmetic changes to both source code and generated code.

        * TAO_IDL/be_include/be_type.h:
        * TAO_IDL/be/be_type.cpp:

          Removed class member type_name_, which has been unused since
          the introduction of the class member nested_type_name_.

Tue May 15 10:36:04 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/tao_idl.cpp:

          Modified the top level tao_idl executable to process
          only one IDL file per run, even if multiple filenames
          are in the command line. If the latter is the case,
          a warning is output saying that all files except the
          first will be ignored. The mechanism for parsing and
          storing multiple filenames has been left in place, since
          one day this may be implemented portably.

Tue Apr 15 10:32:42 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tao/Makefile:
          Fixed TAB's in Makefile.

Tue Apr 15 10:10:10 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/Makefile:
        * examples/PluggableUDP/DIOP/TAO_DIOP.dsp:
        * examples/PluggableUDP/DIOP/TAO_DIOP_Static.dsp:
        * examples/PluggableUDP/DIOP/DIOP.cpp:
        * examples/PluggableUDP/DIOP/DIOP.h:
        * examples/PluggableUDP/tests/Basic/Makefile:
        * examples/PluggableUDP/tests/Basic/client.cpp:
        * examples/PluggableUDP/tests/Basic/server.cpp:
        * examples/PluggableUDP/tests/Basic/svc.conf:
        * examples/PluggableUDP/tests/Performance/Makefile:
        * examples/PluggableUDP/tests/Performance/client.cpp:
        * examples/PluggableUDP/tests/Performance/server.cpp:
        * examples/PluggableUDP/tests/Performance/svc.conf:
        * examples/PluggableUDP/tests/SimplePerformance/Makefile:
        * examples/PluggableUDP/tests/SimplePerformance/client.cpp:
        * examples/PluggableUDP/tests/SimplePerformance/server.cpp:
        * examples/PluggableUDP/tests/SimplePerformance/svc.conf:
          Added support for linking DIOP as a static library.  Reused the
          trick from other libraries of using creating a static instance of a
          dummy class in a common header file, and then using its
          constructor to register the DIOP pluggable protocol factory with
          the service configurator.  Added MSDEV projects to build static
          libraries on Win32 platforms.

Tue Apr 15 09:50:40 2001  Frank Hunleth <fhunleth@cs.wustl.edu>, Angelo Corsaro <corsaro@cs.wustl.edu>

        * tao/Stub.cpp:
        * tao/Stub.h:
        * tao/RT_Stub.cpp:
        * tao/RT_Stub.h:
        * tao/RT_Stub_Factory.cpp:
        * tao/RT_Stub_Factory.h:
        * tao/Stub_Factory.cpp:
        * tao/Stub_Factory.h:
        * tao/ORB.cpp:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/Object.cpp:
          Added Stub Factories that create the right kind of stub
          depending on whether RT-CORBA is being used or not.

          Substituted all the usage of explicit instatntiation of stub,
          with the use of stub factory.

          Removed RT-CORBA specific code from the Stub, this code has been
          placed in the RT_Stub.

          Added hook in the ORB_Core to create Stubs. The hook uses underneath
          the Stub Factory that is registered at ORB initialization time, or
          when RT-CORBA libs are loaded.


        * tao/Invocation.cpp:
        * tao/Invocation.h:
        * tao/Invocation.i:
        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/Invocation_Endpoint_Selectors.h:
        * tao/Invocation_Endpoint_Selectors.i:
        * tao/RT_Endpoint_Selector_Factory.cpp:
        * tao/RT_Endpoint_Selector_Factory.h:
        * tao/RT_Invocation_Endpoint_Selectors.cpp:
        * tao/RT_Invocation_Endpoint_Selectors.h:
        * tao/RT_Endpoint_Utils.cpp:
        * tao/RT_Endpoint_Utils.h:
          Refactored the endpoint selector code to remove the
          use of TAO_Endpoint_Selection_State in TAO_GIOP_Invocation.
          TAO_Endpoint_Selection_State was only being used for RTCORBA.
          Also, performed the following refactorings:
           - Removed recursion in the endpoint selectors
           - Added accessors so that all of the selectors didn't need to be
             friends with TAO_GIOP_Invocation
           - Moved some commonly used code to RT_Endpoint_Utils.cpp
           - More still needs to be done in order to make the Invocation
             related code clear and easy to comprehend,  the refactoring
             made was a step toward that goal.

        * tao/Makefile:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Added RT_Stub.{cpp,h}, Stub_Factory.{cpp,h}, RT_Stub_Factory.{cpp,h}
          and RT_Endpoint_Utils.{cpp,h}

        * tao/RT_Protocols_Hooks.cpp:
        * tao/RT_Protocols_Hooks.h:
        * tao/Protocols_Hooks.cpp:
        * tao/Protocols_Hooks.h:
          Added rt_service_context () to add the client priority service
          context to outgoing requests.  This uses the same mechanism
          as FT.  The change to use the portable interceptors hasn't been
          done yet.

        * tao/RTCORBA/README:
          Updated status of RTCORBA subsetting work.

        * tao/Pluggable.h:
        * tao/PortableServer/RT_Acceptor_Filters.cpp:
        * tao/Strategies/SHMIOP_Acceptor.cpp:
        * tao/Strategies/SHMIOP_Acceptor.h:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/UIOP_Acceptor.cpp:
        * tao/Strategies/UIOP_Acceptor.h:
        * tao/Strategies/UIOP_Profile.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.h:
        * examples/PluggableUDP/DIOP/DIOP_Profile.cpp:
        * tao/IIOP_Acceptor.cpp:
        * tao/IIOP_Acceptor.h:
          Removed TAO_HAS_RT_CORBA #ifdefs.  Added the
          TAO_Acceptor::create_endpoint_for_mprofile () to
          add endpoints to the same profile as is done when
          using RTCORBA.  Now the POA calls either create_mprofile
          when RTCORBA is not being used or create_endpoint_for_mprofile
          when RTCORBA is used.

Mon May 14 22:40:42 2001  Balachandran  <bala@cs.wustl.edu>

        * TAO version 1.1.16 released.

Mon May 14 10:44:02 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/drv_args_ifr.cpp:

          Added the -D (defines names for the preprocessor) option
          to the usage message. It was already implemented. Thanks
          to Philippe Merle <Philippe.Merle@lifl.fr> for asking
          about this feature in tao_ifr.

Mon May 14 07:06:25 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connector.cpp: Added a #include. This should fix
          problems in Visual Age. Thanks to Giga Giguashvili
          <gregoryg@paradigmgeo.com> for reporting this.

Sat May 12 12:39:47 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/POA.cpp (imr_notify_startup, key_to_object):
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp (server_is_running):
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp (run):

          The Implementation Repository code used stringified URL style
          IORs to determine which port a given server was running on.  It
          expected them to be of the form "iioploc://".  However, TAO no
          longer generates IORs of that form.  Instead it generates URL
          style IORs of the form defined in the latest Interoperable
          Naming Service spec, i.e. "corbaloc:iiop:...".  Updated the
          above functions to parse "corbaloc" IORs instead.  This fixes a
          segmentation fault that occured when "ImR-ifying" IORs.  Thanks
          to John Ashmun <John.ASHMUN@esca.com> and Kirat Singh
          <kirat.singh@gs.com> for reporting this problem.  [Bug 909]

        * orbsvcs/ImplRepo_Service/README.txt:

          Corrected malformed "corbaloc" URL IORs in this file.

Sat May 12 08:30:17 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Services_Activate.h: Fixed a compile error in platforms with
          native exception support.

Fri May 11 18:52:00 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/EC_ProxyConsumer.h: Fixed a stupid typo.

Fri May 11 17:19:03 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:

          Changed an ACE_OS::free to a delete, to match the method of
          allocation. This seems to have been causing tao_idl to
          crash when compiling CosNotifyChannelAdmin.idl on QNX.

Fri May 11 15:09:32 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp (run): Make the
          code more robust for invalid IORs.  Thanks to John Ashmum
           <John.ASHMUN@esca.com> for reporting this.

Fri May 11 12:13:42 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_Admin.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_Admin.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_Admin.i:
        * orbsvcs/orbsvcs/Event/EC_ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Event/EC_ProxyConsumer.h:
        * orbsvcs/orbsvcs/Event/EC_ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Event/EC_ProxySupplier.h: More fixes for FORTE
          6.1.

Fri May 11 07:52:02 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/DSI_Latency/server.bor:
          Add missing library to the Borland Makefile.

Fri May 11 08:11:08 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullConsumer.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullConsumer.h:
        * orbvscs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.h:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Admin.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Admin.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Activate.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Activate.h:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.cpp:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.h: More fixes for
          FORTE 6.1.

Fri May 11 07:39:27 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Client_Priority_Policy.cpp:
        * tao/Client_Priority_Policy.h:
        * tao/LocalObject.cpp:
        * tao/LocalObject.h:
        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Services_Activate.h:
        * tao/PortableServer/Collocated_Object.cpp:
        * tao/PortableServer/Collocated_Object.h:
        * tao/TypeCodeFactory/TypeCodeFactory_Loader.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_Loader.h: Fixed compilation
          errors for FORTE 6.1.

Thu May 10 22:31:22 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/POA/Object_Creation_And_Registration/registration.cpp:
          Fixed a nagging warning in g++.

Thu May 10 20:42:18 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tests/IDL_Test/union.idl:

          Added stuff stripped down from an example IDL file
          sent in by Uwe Jaeger <jaeger@varial.de> that reproduced
          the tao_idl crashing problem fixed in

          Thu May 10 14:12:42 2001  Jeff Parsons  <parsons@cs.wustli.edu>

Thu May 10 20:17:48 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/IFR_Service/Servant_Factory.cpp:

          Fixed more oversights in hand-crafting, and in
          the servant factory's construction of repo ids.
          Thanks to Sam Mok <sam.mok@westwave.com> for
          uncovering the tip of this iceberg.

        * tao/IFR_Client/diffs/IFR_BasicC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS.cpp.diff:

          Regenerated the .diff files.

 Thu May 10 16:59:35 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Single_Threaded_Latency/client.cpp:
        * performance-tests/Thread_Per_Connection_Latency/client.cpp:
        * performance-tests/Thread_Pool_Latency/client.cpp:
        * performance-tests/DII_Latency/client.cpp:
        * performance-tests/DSI_Latency/client.cpp:
        * performance-tests/Deferred_Latency/client.cpp:
        * performance-tests/Callback/Callback_i.cpp:
        * performance-tests/Callback/client.cpp:
          Made tests less verbose, and made the output from all the tests
          consistent, so they can be parsed by scripts, collected and
          plotted.

        * performance-tests/Callback/run_test.pl:
          Fixed default number of iterations

        * performance-tests/Single_Threaded_Latency/run_test.pl:
          Fixed typo

Thu May 10 15:31:56 2001  Jeff Parsons  <parsons@cs.wustli.edu>

        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_CLient/diffs/IFR_ComponentsC.cpp.diff:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS.cpp.diff:

          Fixed repo ids of some base classes in _is_a
          functions, that had been overlooked in the hand-crafting
          process. Also regenerated the .diff file.

Thu May 10 14:12:42 2001  Jeff Parsons  <parsons@cs.wustli.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          When generating the typecode for members of a struct
          or union, the setting of the visitor's context's scope
          to the enclosing struct or union had to be moved inside
          the loop, and reset with each iteration. If any of the
          members is itself a scope, it will change the context's
          state as part of its own processing, and the next member
          will have an incorrect scope in its context, leading to
          a crash of the IDL compiler. Thanks to the many, many
          ACE+TAO users who reported this crash

Thu May 10 11:05:25 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/POA/Create_Reference/create_reference.cpp:
          Removed one policy so it would compile with minimum CORBA.

Thu May 10 09:57:08 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/DSI_Latency/Roundtrip.h:
        * performance-tests/DSI_Latency/Roundtrip.cpp:
          The base class don't have a throw spec, I don't think that's
          such a great idea, but I think it is more consistent to have no
          throw spec in the derived class also.

Thu May 10 09:50:53 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/AMI_Latency/AMI_Latency.dsw:
        * performance-tests/AMI_Latency/client.dsp:
        * performance-tests/AMI_Latency/server.dsp:
        * performance-tests/DII_Latency/DII_Latency.dsw:
        * performance-tests/DII_Latency/client.dsp:
        * performance-tests/DII_Latency/server.dsp:
        * performance-tests/DSI_Latency/DSI_Latency.dsw:
        * performance-tests/DSI_Latency/client.dsp:
        * performance-tests/DSI_Latency/server.dsp:
        * performance-tests/Deferred_Latency/Deferred_Latency.dsw:
        * performance-tests/Deferred_Latency/client.dsp:
        * performance-tests/Deferred_Latency/server.dsp:
        * performance-tests/POA/Create_Reference/Create_Reference.dsw:
        * performance-tests/POA/Create_Reference/create_reference.dsp:
        * performance-tests/POA/Implicit_Activation/Implicit_Activation.dsw:
        * performance-tests/POA/Implicit_Activation/client.dsp:
        * performance-tests/POA/Implicit_Activation/collocated.dsp:
        * performance-tests/POA/Implicit_Activation/server.dsp:
        * performance-tests/Single_Threaded_Latency/Single_Threaded_Latency.dsw:
        * performance-tests/Single_Threaded_Latency/client.dsp:
        * performance-tests/Single_Threaded_Latency/server.dsp:
        * performance-tests/Thread_Per_Connection_Latency/Thread_Per_Connection_Latency.dsw:
        * performance-tests/Thread_Per_Connection_Latency/client.dsp:
        * performance-tests/Thread_Per_Connection_Latency/server.dsp:
        * performance-tests/Thread_Pool_Latency/Thread_Pool_Latency.dsw:
        * performance-tests/Thread_Pool_Latency/client.dsp:
        * performance-tests/Thread_Pool_Latency/server.dsp:
        * performance-tests/Throughput/Throughput.dsw:
        * performance-tests/Throughput/client.dsp:
        * performance-tests/Throughput/server.dsp:
          Add DSP and DSW files for MSVC

        * performance-tests/AMI_Latency/server.bor:
          Add missing file.

Thu May 10 11:39:17 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * performance-tests/POA/Object_Creation_And_Registration/registration.cpp
          (child_poa_testing): Changed %d to %ul to prevent a warning.

Thu May 10 09:19:24 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile:
          Add IFR_Client_Adapter to the build, even under minimum CORBA.
          Without it the ACE_Dynamic_Service<TAO_IFR_Client_Adapter>
          template is undefined when we compile without inlining.

        * performance-tests/DII_Latency/Makefile:
        * performance-tests/DSI_Latency/Makefile:
        * performance-tests/Deferred_Latency/Makefile:
          Disable these directories when compiling with minimum CORBA.

        * performance-tests/DSI_Latency/client.cpp:
          Fix ACE_RCSID() macro

        * performance-tests/Cubit/TAO/IDL_Cubit/svc.conf:
          Use the blocking flushing strategy for slightly better
          performance.

Thu May 11 01:56:45 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp

          Changed an overlooked TAO_Pluggable_Reply_Params to
          TAO_Pluggable_Reply_Params_Base.

Thu May 10 10:56:33 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/DynamicInterface/TAO_DynamicInterface.dsp:

          Added link to TAO_Portableserver(d).lib. The link is
          necessary, but the project dependency in TAOACE.dsw was
          finding the path and doing the link under the hood.
          Thanks to Steve Hespelt <shespelt@bear.com> for
          pointing this out.

Thu May 10 08:46:21 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Connection_Handler.cpp:
          A debugging message was confusing it said 'connection from
          client', but it was used for both passive and actively
          established connections.  IMHO 'connection to peer' is less
          confusing.

        * tests/Big_Oneways/Session.cpp:
        * tests/Big_Twoways/Session.cpp:
        * tests/Blocking_Sync_None/client.cpp:
        * tests/MT_Timeout/Client_Task.cpp:
        * tests/MT_Timeout/Server_Task.cpp:
          Several tests were too verbose for the nightly regression tests,
          eliminate a lot of output.

Thu May 10 07:11:16 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/DSI_Latency/Roundtrip.h: Added exception
          specification.

Thu May 10 08:06:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor
        * tests/Queued_Message_Test/*.bor
        * tests/Big_Request_Muxing/*.bor

          Added BCB makefiles for mentioned tests

Wed May 09 19:37:34 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * performance-tests/POA/Object_Creation_And_Registration/registration.cpp
          (child_poa_testing): Updated and extended this test.

Wed May  9 15:36:46 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Makefile:
        * performance-tests/Makefile.bor:
        * performance-tests/README:
        * performance-tests/AMI_Latency/Makefile:
        * performance-tests/AMI_Latency/Makefile.bor:
        * performance-tests/AMI_Latency/README:
        * performance-tests/AMI_Latency/Roundtrip.cpp:
        * performance-tests/AMI_Latency/Roundtrip.h:
        * performance-tests/AMI_Latency/Roundtrip_Handler.cpp:
        * performance-tests/AMI_Latency/Roundtrip_Handler.h:
        * performance-tests/AMI_Latency/Server_Task.cpp:
        * performance-tests/AMI_Latency/Server_Task.h:
        * performance-tests/AMI_Latency/Test.idl:
        * performance-tests/AMI_Latency/client.bor:
        * performance-tests/AMI_Latency/client.cpp:
        * performance-tests/AMI_Latency/run_test.pl:
        * performance-tests/AMI_Latency/server.bor:
        * performance-tests/AMI_Latency/server.cpp:
        * performance-tests/DII_Latency/Makefile:
        * performance-tests/DII_Latency/Makefile.bor:
        * performance-tests/DII_Latency/README:
        * performance-tests/DII_Latency/Roundtrip.cpp:
        * performance-tests/DII_Latency/Roundtrip.h:
        * performance-tests/DII_Latency/Test.idl:
        * performance-tests/DII_Latency/client.bor:
        * performance-tests/DII_Latency/client.cpp:
        * performance-tests/DII_Latency/run_test.pl:
        * performance-tests/DII_Latency/server.bor:
        * performance-tests/DII_Latency/server.cpp:
        * performance-tests/DII_Latency/svc.conf:
        * performance-tests/DSI_Latency/Makefile:
        * performance-tests/DSI_Latency/Makefile.bor:
        * performance-tests/DSI_Latency/README:
        * performance-tests/DSI_Latency/Roundtrip.cpp:
        * performance-tests/DSI_Latency/Roundtrip.h:
        * performance-tests/DSI_Latency/Test.idl:
        * performance-tests/DSI_Latency/client.bor:
        * performance-tests/DSI_Latency/client.cpp:
        * performance-tests/DSI_Latency/run_test.pl:
        * performance-tests/DSI_Latency/server.bor:
        * performance-tests/DSI_Latency/server.cpp:
        * performance-tests/DSI_Latency/svc.conf:
        * performance-tests/Deferred_Latency/Makefile:
        * performance-tests/Deferred_Latency/Makefile.bor:
        * performance-tests/Deferred_Latency/README:
        * performance-tests/Deferred_Latency/Roundtrip.cpp:
        * performance-tests/Deferred_Latency/Roundtrip.h:
        * performance-tests/Deferred_Latency/Test.idl:
        * performance-tests/Deferred_Latency/client.bor:
        * performance-tests/Deferred_Latency/client.cpp:
        * performance-tests/Deferred_Latency/run_test.pl:
        * performance-tests/Deferred_Latency/server.bor:
        * performance-tests/Deferred_Latency/server.cpp:
        * performance-tests/Deferred_Latency/svc.conf:
        * performance-tests/Single_Threaded_Latency/Makefile:
        * performance-tests/Single_Threaded_Latency/Makefile.bor:
        * performance-tests/Single_Threaded_Latency/README:
        * performance-tests/Single_Threaded_Latency/Roundtrip.cpp:
        * performance-tests/Single_Threaded_Latency/Roundtrip.h:
        * performance-tests/Single_Threaded_Latency/Test.idl:
        * performance-tests/Single_Threaded_Latency/client.bor:
        * performance-tests/Single_Threaded_Latency/client.cpp:
        * performance-tests/Single_Threaded_Latency/run_test.pl:
        * performance-tests/Single_Threaded_Latency/server.bor:
        * performance-tests/Single_Threaded_Latency/server.cpp:
        * performance-tests/Single_Threaded_Latency/svc.conf:
        * performance-tests/Thread_Per_Connection_Latency/Client_Task.cpp:
        * performance-tests/Thread_Per_Connection_Latency/Client_Task.h:
        * performance-tests/Thread_Per_Connection_Latency/Makefile:
        * performance-tests/Thread_Per_Connection_Latency/Makefile.bor:
        * performance-tests/Thread_Per_Connection_Latency/README:
        * performance-tests/Thread_Per_Connection_Latency/Roundtrip.cpp:
        * performance-tests/Thread_Per_Connection_Latency/Roundtrip.h:
        * performance-tests/Thread_Per_Connection_Latency/Test.idl:
        * performance-tests/Thread_Per_Connection_Latency/client.bor:
        * performance-tests/Thread_Per_Connection_Latency/client.cpp:
        * performance-tests/Thread_Per_Connection_Latency/run_test.pl:
        * performance-tests/Thread_Per_Connection_Latency/server.bor:
        * performance-tests/Thread_Per_Connection_Latency/server.cpp:
        * performance-tests/Thread_Per_Connection_Latency/svc.conf:
        * performance-tests/Thread_Pool_Latency/Client_Task.cpp:
        * performance-tests/Thread_Pool_Latency/Client_Task.h:
        * performance-tests/Thread_Pool_Latency/Makefile:
        * performance-tests/Thread_Pool_Latency/Makefile.bor:
        * performance-tests/Thread_Pool_Latency/README:
        * performance-tests/Thread_Pool_Latency/Roundtrip.cpp:
        * performance-tests/Thread_Pool_Latency/Roundtrip.h:
        * performance-tests/Thread_Pool_Latency/Test.idl:
        * performance-tests/Thread_Pool_Latency/Worker_Thread.cpp:
        * performance-tests/Thread_Pool_Latency/Worker_Thread.h:
        * performance-tests/Thread_Pool_Latency/client.bor:
        * performance-tests/Thread_Pool_Latency/client.cpp:
        * performance-tests/Thread_Pool_Latency/run_test.pl:
        * performance-tests/Thread_Pool_Latency/server.bor:
        * performance-tests/Thread_Pool_Latency/server.cpp:
        * performance-tests/Thread_Pool_Latency/svc.conf:
          Move each one of the tests in the Latency directory to its own
          place.  There are many advantages to this organization, for
          example, we can compile the basic tests even with minimum CORBA
          enabled.
          It is also easier to run the tests on the nightly regression
          builds, and somewhat easier to interpret the results.
          The disadvantage is that is is harder to maintain the code, if
          anybody has an idea on how to improve this they are welcome to
          change the code.

Wed May  9 17:11:23 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAOACE.dsw:

          Added PortableServer project dependency to the
          CosConcurrency project. Thanks to John Ashmun
          <John.ASHMUN@esca.com> for pointing out this
          oversight.

Wed May  9 14:40:51 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/POA/Makefile:
        * performance-tests/POA/Makefile.bor:
        * performance-tests/POA/README:
        * performance-tests/POA/Create_Reference/README:
        * performance-tests/POA/Create_Reference/run_test.pl:
        * performance-tests/POA/Create_Reference/Makefile:
        * performance-tests/POA/Create_Reference/Makefile.bor:
        * performance-tests/POA/Create_Reference/create_reference.bor:
        * performance-tests/POA/Create_Reference/create_reference.cpp:
          New test to measure the time required to create an object
          reference via create_reference_with_id().

        * performance-tests/POA/Makefile:
        * performance-tests/POA/Makefile.bor:
        * performance-tests/POA/README:
        * performance-tests/POA/Implicit_Activation/README:
        * performance-tests/POA/Implicit_Activation/run_test.pl:
        * performance-tests/POA/Implicit_Activation/Makefile:
        * performance-tests/POA/Implicit_Activation/Makefile.bor:
        * performance-tests/POA/Implicit_Activation/client.bor:
        * performance-tests/POA/Implicit_Activation/server.bor:
        * performance-tests/POA/Implicit_Activation/collocated.bor:
        * performance-tests/POA/Implicit_Activation/Test.idl:
        * performance-tests/POA/Implicit_Activation/Factory.h:
        * performance-tests/POA/Implicit_Activation/Factory.cpp:
        * performance-tests/POA/Implicit_Activation/Simple.h:
        * performance-tests/POA/Implicit_Activation/Simple.cpp:
        * performance-tests/POA/Implicit_Activation/client.cpp:
        * performance-tests/POA/Implicit_Activation/collocated.cpp:
        * performance-tests/POA/Implicit_Activation/server.cpp:
          Add new performance test for _this() and the corresponding
          deactivations

Wed May 09 16:38:41 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tests/DSI_Gateway/client.cpp:

          Added .in() to the exception string members (which
          are TAO_String_Managers) passed to ACE_Debug.

Wed May 09 16:19:55 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/DynamicInterface/Server_Request.cpp:

          Changed an ACE_static_cast of const char* to
          CORBA::Octet* to an ACE_reinterpret_cast to
          const CORBA::Octet*.

Wed May  9 14:01:51 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp (add_transport_to_cache):
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Fixes for
          bug #901. When creating a endpoint that is being cached, use the
          value from ORB_Core params for the dotted decimal addresses
          instead of sending in a value of zero. Thanks to Darren Griffith
          <darren.griffith@esecurityinc.com> for reporting the problem and
          the fix.

Wed May 09 14:07:56 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/DynamicInterface/DII_Invocation.cpp:
        * tao/DynamicInterface/DII_Invocation.h:
        * tao/DynamicInterface/DII_Invocation.inl:
        * tao/DynamicInterface/Request.cpp:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Request.inl:
        * tao/DynamicInterface/Server_Request.cpp:
        * tao/DynamicInterface/Server_Request.h:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:
        * tests/DSI_Gateway/README:
        * tests/DSI_Gateway/client.cpp:
        * tests/DSI_Gateway/gateway.cpp:
        * tests/DSI_Gateway/server.cpp:
        * tests/DSI_Gateway/test.idl:
        * tests/DSI_Gateway/test_dsi.cpp:
        * tests/DSI_Gateway/test_dsi.h:
        * tests/DSI_Gateway/test_dsi.i:
        * tests/DSI_Gateway/test_i.cpp:
        * tests/DSI_Gateway/test_i.h:

          New file:

        * tests/DSI_Gateway/run_exception_test.pl:

          Changes to DynamicInterface classes to enable the
          storage/retrieval of a user exception when instantiation
          of these classe are used in a gateway. Also changes
          to the test code to use this new capability, and to
          remove the gateway's dependence on any IDL-generated
          files. README file updated, and files added to the
          MSVC project for completeness. The gateway test may
          now be run normally, as before, or with a new script
          that tests the passing of a user exception
          from the server, through the gateway and back to the
          client. This closes [BUGID:500].

Wed May 09 13:55:56 2001  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Generator_Parser.cpp:
        * tao/GIOP_Message_Generator_Parser.h:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_10.h:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Generator_Parser_12.h:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Lite.h:
        * tao/Pluggable_Messaging.h:
        * tao/Pluggable_Messaging_Utils.cpp:
        * tao/Pluggable_Messaging_Utils.h:
        * tao/Pluggable_Messaging_Utils.i:
        * tao/TAO_Server_Request.cpp:

          Extracted most of TAO_Pluggable_Reply_Params into a
          base class TAO_Pluggable_Reply_Params_Base, leaving
          out the InputCDR member. This base class is now used
          by TAO_ServerRequest, which does not need the cdr
          stream, eliminating the overhead of its construction.
          The client side request classes use the original
          class, now a subclass, that adds the InpurCDR member.
          This closes [BUGID:900].

Wed May  9 11:56:55 2001  Ossama Othman  <ossama@uci.edu>

        * docs/interceptors.html (HREF):

          Updated link to Portable Interceptors spec to point to the
          latest revision (ptc/2001-03-04).

Wed May 09 10:04:24 2001  Balachandran  <bala@cs.wustl.edu>

        * TAO version 1.1.15 released.

Tue May 08 21:26:19 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI_Timeouts/client.cpp (main):
          Wait for all the threads to complete before destroying the ORB.

Tue May  8 13:28:36 2001  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/Transport.cpp (send_message_i):
          Correct buffer manipulation for messages queued after part of
          their data was sent, we cannot simply create a
          TAO_Asynch_Queued_Message and invoke bytes_transferred() because
          the message block chain is modified as part of the send()
          attempt.
          What we do now is a little different: the message block chain is
          modified as data is transferred, only the portion that has not
          been sent is put in the queue.  So, the fix is also a slight
          optimization.
          Improve the debugging messages for this code path.
          Fix the treatment of a return status of 0 from
          send_message_block_chain_i(), this indicates a partial send, not
          an EOF.

        * tao/Transport.cpp (send_message_block_chain_i):
          If the message was completely sent we should set the
          bytes_transferred argument correctly.

        * tao/Synch_Queued_Message.cpp (bytes_transferred):
          Update the message blocks that are completely sent, this is used
          by higher layers to detect what portion of the message block
          chain, if any, has to be queued.

Tue May  8 10:06:58 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/CORBALOC_Parser.cpp (parse_string):
          Removed a debug statement that missed the final cleanup before
          the commit.

Tue May  8 09:42:02 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/CORBALOC_Parser.cpp (check_prefix):
          Provided another test case for the null prefix
          in the check_prefix list.

Tue May  8 08:56:32 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Object_Ref_Table.cpp (TAO_Object_Ref_Table):

          Reverted the change "Tue May  8 09:01:13 2001  Balachandran
          Natarajan  <bala@cs.wustl.edu>".  The call to destroy() was
          correct since not all applications call ORB::shutdown() (or
          ORB::destroy()).  In such cases, memory leaks will occur since
          the object reference table destroy() method is not explicitly
          called.

          (destroy):

          The correct fix for the problem was to call unbind_all() on the
          underlying hash table in the destroy() method.  Doing so makes
          it safe to call the destroy() method more than once.

Tue May  8 10:02:47 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp: Reverted this change "Tue May  8 07:32:15 2001
          Balachandran Natarajan". The problem on Linux builds seems to be
          a manifestation from the problem that was fixed in this change
          "Tue May  8 09:01:13 2001  Balachandran Natarajan".

Tue May  8 09:01:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Object_Ref_Table.cpp (~TAO_Object_Ref_Table): Removed a
          destroy () from the destructor. The destroy () has already been
          invoked during ORB_Core::shutdown (). The second call to destroy
          ()  really caused havoc in Win32 builds.

Tue May  8 08:17:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.h: Added a TAO_Export to TAO_ORB_Core_Auto_Ptr
          class.  Thanks to Johnny Willemson for reporting this.

Tue May  8 07:32:15 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp: Fixed a problem when the client connection
          handler is RW. The ORB_Core takes responsibility for closing the
          connections. It does so by getting the handles in an Unbounded
          Set. When the ORB_Core gets destroyed, the destructor of the
          Unbounded set is called. This creates problems as the allocators
          have already been removed. We now destroy the list by calling
          reset () before the ORB_Core gets destroyed.

Mon May  7 20:30:17 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/LongUpcalls/ami_server.cpp:
          Fixed RCSID

        * tests/LongUpcalls/run_test.pl:
          Fixed timeout, it was way too long

        * tests/AMI_Buffering/svc.conf:
        * tests/LongUpcalls/svc.conf:
          Made flushing strategy blocking, until bug 886 gets fixed this
          is the only workaround.

Mon May  7 21:35:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
          Fixed a compile error with SunCC4.2.

Mon May  7 17:45:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/BiDirectional_NestedUpcall/test_i.cpp:
        * tests/BiDirectional/test_i.cpp: Made some print statements less
          verbose.

Mon May  7 15:21:43 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Object_Ref_Table.h:
        * tao/Object_Ref_Table.cpp (destroy):

          Added a new destroy() method to explicity release the object
          references held in the object reference table.  This method will
          be called on ORB shutdown.

        * tao/ORB_Core.cpp (shutdown):

          Explicitly destroy the object reference table since it contains
          references to objects, which themselves may contain reference to
          this ORB.  This fixes some problems with cyclic ORB lifetime
          dependency problems.

Mon May  7 14:54:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Stub.h:
        * tao/Stub.i:
        * tao/Stub.cpp:
          Bug 542 (http://ace.cs.wustl.edu/bugzilla/show_bug.cgi?id=542)
          has reared its ugly head once again.
          However, I think I finally nailed it: the ORB_Core was reference
          counted by each object reference (via TAO_Stub), but the
          reference count was decremented in the TAO_Stub destructor
          *before* the TAO_Profiles were destroyed.
          This also fixes the crashes in Big_Oneways and Big_Twoways
          tests.

Mon May 07 10:47:11 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/GIOP_Message_Base.cpp (write_protocol_header):
          Optimize the implementation of this function.  Insted of
          marshaling each field of the GIOP header individually we create
          one big octet array, store all the fields there (they are octets
          for the most part) and then marshal the whole header in a single
          operation.  Saves a little over 0.5% on the client and server
          sides.

Mon May 07 10:35:27 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Big_Twoways/Big_Twoways.dsw:
        * tests/Big_Twoways/server.dsp:
        * tests/Big_Twoways/client.dsp:
          Add missing project file

Mon May  7 11:37:43 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp (fini): Deferred the deletion of the allocators
          till the  reactor registry is deleted. The RTCORBA has a
          configuration called Reactor-Per-Priority, which deletes the
          service handlers only when the registry is deleted. There seems
          to be a subtle problem in the way the handlers are de-registered
          from the reactor for this particular configuration. We will look
          at that problem next. This fix should get around that problem
          for the time being.

Mon May  7 9:10:36 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:

          Changed the run_test.pl to test for sender switching.

Mon May  7 06:46:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/Makefile:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:

          Added checks to make sure that the above examples do not compile
          with older versions of g++.

Mon May  7 06:40:49 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
          Fixed a warning in g++.

Sun May  6 11:15:36 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/sender.h:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.h:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.h:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:

          Added clean termination of the processes using the signal_handler.

Sun May  6 12:36:36 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.cpp:
          Added #include "tao/debug.h" to get it compiling on SunCC4.2.

Sun May  6 10:33:08 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp: Replicated the
          changes from IIOP to these protocols.

Sun May  6 10:27:08 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.inl: Changed the error handling
          conditions. When we come across a read failure with EWOULDBLOCK
          we used to ask the reactor to call us back. This caused
          thrashing when the application received a signal. We dont ask
          the reactor to call us back, instead we just return a zero to
          the reactor. Further, changed the error codes to match the
          reactor semantics. This should fix bug id 830.

        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Transport.cpp: Made sure that we pass the error codes
          from the GIOP layer, as is to the reactor. We dont manipulate
          the return values as we did before. The return values just match
          the reactor semantics ie. returns -1 on error, 1 for a quick
          callback and a zero for everything is fine case.

        * tao/Wait_On_Read.cpp: The wait () call used to loop on
          reply_received flag alone. We now use a temporary variable also
          for the looping similar to the way other Wait strategies
          loop. The other strategies used a reactor and adhered to the
          reactor semantics. The Wait_On_Read did not use a reactor and
          followed a different semantics for success and failure. This
          created confusion at the protocol implementation level.

        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.cpp: Replicated the changes from
          IIOP.

Sun May  6 9:49:36 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:

          Changed the order of connection to senders and receivers so that
          when switiching distributers the old distributer is disconnected
          from the sender before the new distributer is connected.

Sat May  5 20:31:36 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/Makefile:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:

          Made changes to avoid compiling and running the test on VxWorks.

Sat May  5 16:24:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/POA/TIE/server.cpp: Guarded some more portions using
          the ACE_HAS_USING_KEYWORD macros. This should prevent compile
          errors in the two Lynx builds.

Sat May  5 15:23:56 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Config_Scheduler.h: Added

          #if ! defined (TAO_MIN_CRITICAL_PRIORITY)
          #define TAO_MIN_CRITICAL_PRIORITY 0
          #endif /* ! defined (TAO_MIN_CRITICAL_PRIORITY) */

          to fix a compile problem with TAO_USES_RMS_SCHEDULING is
          defined.  Thanks to Alexandre Cervieri
          <alexandre.cervieri@terra.com.br> for reporting this.

Sat May  5 13:27:36 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/Makefile:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.h:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.h:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.h:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.h:
        * orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.cpp:

          Added clean unbinding of the object references from the Naming
          Service  on termination of processes. Also fixed bugs that were
          breaking the test on many platforms.

Fri May  4 14:11:36 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/ORB_Core.cpp:
        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport_Cache_Manager.cpp:
        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Cache_Manager.inl:

          Added code to clean up unregistered connection handlers at ORB
          shutdown.

        * tao/Wait_On_Read.cpp:

          Close the transport if we get a -1 from the call to
          read_process_message() on the transport.  This indicates an error,
          in which case we need to clean up the connection handler.

Fri May  4 12:08:55 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/NVList.cpp:

          Fixed typo in comment.

        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:

          Fixed typos in ACE_ERROR messages.

        * tao/Any.cpp:

          Fixed <<= operator for bounded (w)string. It was leaking
          memory.

        * tests/Param_Test/bd_string.cpp:
        * tests/Param_Test/bd_wstr_seq.cpp:
        * tests/Param_Test/bd_wstring.cpp:
        * tests/Param_Test/big_union.cpp:
        * tests/Param_Test/multdim_array.cpp:
        * tests/Param_Test/nested_struct.cpp:
        * tests/Param_Test/objref_struct.cpp:
        * tests/Param_Test/ub_string.cpp:
        * tests/Param_Test/ub_wstr_seq.cpp:
        * tests/Param_Test/ub_wstring.cpp:
        * tests/Param_Test/var_struct.cpp:

          Fixed memory leaks and/or uninitialized memory read messages
          (from Purify) in these param test files.

Thu May  3 14:56:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Synch_Reply_Dispatcher.cpp (dispatch_reply):
        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp: Changed the call
          steal_data () to exchange_data_blocks (). This should give us a
          "release" free, malloc free and a lock free version of what we
          want to achieve.

Thu May  3 11:55:42 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        These are a set of changes for enabling lock free CDR input
        stream allocators in TAO as default. (see my previous changes on
        Tue Apr 10 17:25:18 2001)

        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
          Modified the TAO_CodeGen::TAO_CDR_INPUT case to perform octet
          sequence optimization only if its safe. This check was absent
          previously, forcing us to always use locked input cdr allocators.

        * tao/IOPC.cpp:
        * tao/MessagingC.cpp:
        * tao/Services.cpp:
        * tao/PortableServer/PortableServerC.cpp:
          Files affected by the IDL compiler changes had to be redone.

        * tao/diffs/IOPC.cpp.diff:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/PortableServerC.cpp.diff:
        * tao/diffs/OctetSeqC.cpp.diff:
          Regenerated the diff files. Note that i have added
          OctetSeqC.cpp.diff. This should be used to patch the IDL
          generated stub file instead of OctetSeq.diff.

Thu May  3 10:11:08 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Wait_Strategy.h: Removed some comments that were not
          applicable anymore.

Wed May  2 22:39:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp: Fixed a couple of unused variable warnings.

Wed May  2 20:26:56 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Base.cpp: Added some comments.

Wed May  2 16:52:09 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h: Added new methods that could dish out memory
          always from the global pool. The motivation for a new methods
          are:
          (1) In olden days out CDR's were created only in the invocation
              path and destroyed during the invocation path. If the ORB is
              configured with TSS, it made sense to get the allocators
              from the TSS. That doesn't hold true anymore as illustrated
              by point (2).

          (2) We now cache CDR streams, message blocks in classes within
              the connection handlers. These objects are on a
              per-connection basis as opposed to per-thread basis (though
              the thread may very well create the connections). We want
              the connections to be reused by other threads and so we
              cannot destroy the connections when the threads go
              away.

          The above two reasons motivated adding new methods that dish out
          memory from the global pool alone,  even if the ORB has been
          configured to use TSS.

        * tao/GIOP_Message_Base.cpp: Changes for bug id 871. We were
          trying to use a constructor for an InputCDR stream that made a
          copy from a message block. The process happened in two steps. It
          first allocated memory and then copied the contents. Both of
          them are bad. To make things efficient we use only the data
          block in which the incoming stream has been read to create a CDR
          stream. The same stream is passed onto the higher layers of the
          ORB. The stream *never* gets copied. The stream that is handled
          by the Reply_Dispatcher only uses this very same  data block to
          pass it onto the stubs. So this should give us a neat path with
          no-copies to the stubs. But there is one release that can be
          removed which will be done in the next cycle.

        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.inl: Added a new method
          steal_data_block (). This gives ownership away of the existing
          data_block and creates a new data_block for itself. Further the
          message_blocks use the memory from the global memory pool so
          that we dont have problems when the message blocks loose
          ownership to other threads.

Wed May  2 15:14:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/CDR.h (TAO_InputCDR):
        * tao/CDR.i: Added a new constructor for TAO_InputCDR
          class. It is basically a wrapper for the new constructor added
          in ACE_InputCDR class by this ChangeLog entry "Wed May  2
          15:10:28 2001 Balachandran Natarajan ". This would make the
          construtor usable in TAO.

Wed May  2 11:26:10 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/POA/TIE/Makefile:

          Disabled this build for SunCC 4.2. It worked before, even though
          4.2 does not have ACE_HAS_USING_KEYWORD defined (in other words,
          it has no namespace support), because the IDL compiler left out
          the #ifdef guards using the above macro if the interface was
          declared at global scope, and the only interface in the TIE
          example where the tie class was used happened to fall into that
          category. This generation of #ifdef guards was inconsistent,
          however, and now *all* tie classes are left out by the
          preprocessor if ACE_HAS_USING_KEYWORD is not defined.

Wed May 02 05:37:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Queued_Message_Test/run_test.pl:
          Create a dummy run_test.pl to avoid problems on recalcitrant
          platforms.

Tue May 1 22:42:44 2001  Ossama Othman  <ossama@uci.edu>

        * tao/GIOP_Message_Generator_Parser_10.cpp (write_reply_header):

          Silence the false Fuzz error about a missing ACE_CHECK by adding
          the awful "// FUZZ: ignore check_for_ace_check" comment hack.

Tue May  1 22:14:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/POA/Etherealization/Makefile: Changed the includes. This
          should solve some of the build errors that we have been having.

Tue May 01 19:45:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Buffering_Constraint_Policy.{h,cpp}:
        * tao/DynamicAny/DynamicAny.{h,cpp}:
        * tao/IORManipulation/IORManip_Loader.{h,cpp}:
        * tao/Messaging_Policy_i.{h,cpp}:
        * tao/PortableServer/POA.cpp:
        * tao/RT_Policy_i.{h,cpp}: Changed the empty ACE_THROW_SPEC
          (()) with ACE_THROW_SPEC ((CORBA::SystemException)) so that
          TAO can compile with FORTE 6.1. Thanks to Russ Noseworthy
          for the patches and to Carlton Teel <teel@signal-analysis.com>
          for motivating these fixes

Tue May 01 19:00:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/RtEC/MCast/AddrServer.{h,cpp}:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.{h,cpp}:
        * orbsvcs/tests/Event/Basic/BCast.{h,cpp}: Changed the empty
          ACE_THROW_SPEC (()) with ACE_THROW_SPEC
          ((CORBA::SystemException)) so that TAO can compile with FORTE
          6.1. Thanks to Russ Noseworthy for the patches. More of the
          patches would be checked in the next few hours.

Tue May 01 12:00:11 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * $ACE_ROOT/auto_run_tests.lst: Don't run
          tests/POA/Etherealization if we are compiling for minimum CORBA.

Tue May 01 11:56:58 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/POA/Etherealization/Makefile: This test should only be
          complied for non-minimum CORBA cases since it uses Servant
          Managers.

Tue May 01 08:50:11 2001  Ossama Othman  <ossama@uci.edu>

        * tao/GIOP_Message_Generator_Parser.h (write_reply_header):
        * tao/GIOP_Message_Generator_Parser_10.h (write_reply_header):
        * tao/GIOP_Message_Generator_Parser_10.cpp (write_reply_header):
        * tao/GIOP_Message_Generator_Parser_12.h (write_reply_header):

          Removed a TSS access from the critical path on the server side
          by removing the default CORBA::Environment argument
          (i.e. TAO_default_environment()).  TAO_default_environment()
          causes a TSS access.

          NOTE: We should never use default CORBA::Environment arguments
          (i.e. TAO_default_environment()) in methods that are used
          internally by TAO for specifically this reason.

        * tao/GIOP_Message_Base.cpp (generate_reply_header):

          Declare a new CORBA::Environment variable and wrap the
          write_reply_header() call within an ACE_TRY block.  That block
          was missing for some reason.  These changes are part of the
          fixes that remove a TSS access from the critical path on the
          server side.

Tue May  1 09:40:08 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/AMI_Buffering/Makefile: Made a check for ami instead of
          corba_messaging.

Mon Apr 30 22:50:27 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/CORBALOC_Parser.h:
        * tao/CORBALOC_Parser.cpp:
          Fixed the blocker bug 849. Included some parsing code so as to
          check if the protocol used by the application is a known protocol.

Mon Apr 30 19:17:42 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:

          If the member is an interface, the CDR extraction
          operator for the union extracts it straight into
          a _var. In the IDL_Test file full.idl, the interface
          member is undefined, and VxWorks balks. The target
          of the member extraction was modified to be
          foo_var.inout(), which it should have been anyway.

        * tests/IDL_Test/fwd.idl:
        * tests/IDL_Test/full.idl:

          If modules are nested, VxWorks gives a typedef error,
          thinking that mod1::mod2::foo_ptr and
          POA_mod1::mod2::foo_ptr are the same. Since the
          nested modules are not essential to the test, and
          rather than disable the test for VxWorks, one layer
          of modules was taken out of the mutually dependent
          IDL files.

Mon Apr 30 18:49:56 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be_include/be_visitor_root/root_sth.h:

          New files for a new visitor that begins a separate
          pass through the AST for generating the tie
          classes. Code generation for the tie classes has
          been moved from *S.h to *S_T.h. Some compilers,
          notably SunCC 5.2, require that template class
          declarations and source be in the same
          'compilation unit', or corresponding .h and .cpp files.
          This new visitor handles code generation for the
          root scope and for modules. Tie class code generation
          for the other relevant data types (interfaces, attributes,
          and operations) is handled by existing visitors.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_decl.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/tie_si.cpp:
        * TAO_IDL/be/be_visitor_module/module_sh.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_root/root_sh.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_visitor_root.h:

          Modified to support the new location of tie class declaration
          code generation.

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:

          Cosmetic changes to generated code.

        * orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.i:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS_T.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS_T.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS_T.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS_T.i.diff:
        * tao/Domain/DomainS.h:
        * tao/Domain/DomainS_T.h:
        * tao/Domain/DomainS_T.i:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS_T.h:
        * tao/PortableServer/ImplRepoS_T.i:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/MessagingS_T.i:
        * tao/PortableServer/PolicyS.h:
        * tao/PortableServer/PolicyS_T.h:
        * tao/PortableServer/PolicyS_T.i:
        * tao/diffs/DomainS.h.diff:
        * tao/diffs/DomainS_T.h.diff:
        * tao/diffs/DomainS_T.i.diff:
        * tao/diffs/ImplRepoS.h.diff:
        * tao/diffs/ImplRepoS.i.diff:
        * tao/diffs/ImplRepoS_T.i.diff:
        * tao/diffs/MessagingS.h.diff:
        * tao/diffs/MessagingS_T.i.diff:
        * tao/diffs/PolicyS.h.diff:

          Regenerated skeleton files and corresponding .diff files.

        * tao/Domain/TAO_Domain.dsp:
        * tao/Domain/TAO_Domain_Static.dsp:

          Added DomainS_T.h and DomainS_T.i to projects.

Mon Apr 30 16:53:27 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Updated the IDL compiler docs to include the handling of
          undefined forward declared interfaces, and the move of
          tie class declaration from the *S.h file to the *S_T.h file.
          This last was necessary to be compatible with SunCC 5.2
          builds where inlining is disabled.

Mon Apr 30 11:23:45 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Cache_Entries.h (relinquish_transport):
        * tao/Cache_Entries.inl (relinquish_transport):

          New method that causes the given TAO_Cache_IntId to relinquish
          ownership of the TAO_Transport associated with it.  This method
          exists to get around some inflexibility in the
          Transport_Cache_Manager interface.  It should be removed once
          the interface is improved.

        * tao/Transport_Cache_Manager.cpp (find_transport):

          Do not duplicate the TAO_Transport object after it is found.
          It is already duplicated during the find process.  Instead call
          the new TAO_Cache_IntId::relinquish_transport() method.  This
          change removes two locks from the critical path.  [Bug 878]

        * tao/IIOP_Endpoint.cpp (hash):

          Improved the speed of this hash operation by basing the hash on
          the IP address of the peer instead of computing a hash that
          involves some string operations (ACE::hash_pjw()).  Since this
          hash method is called on each invocation, i.e. in the critical
          path, a performance improvement should be noticeable.

        * tao/PortableServer/Servant_Base.cpp:

          Removed unused included header "Collocated_Object.h".

        * tao/CDR_Encaps_Codec.h:
        * tao/ClientRequestInfo.h:
        * tao/PortableServer/ServerRequestInfo.h:

          "Doxygenated" these headers.

Sun Apr 29 08:30:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/IDL_Test/Makefile.bor (CPPDIR): Added a missing
          rule. Thanks to Johnny Willemsen for pointing this out.

Sat Apr 28 10:40:01 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:

          Fixed the failure behavior in the case the UDP socket
          returns an invalid handle. This had caused memory leaks,
          which are now gone.

Fri Apr 27 22:20:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/IDL_Test/Makefile.bor: Added rules for the new idl file,
          full.idl.

Fri Apr 27 22:15:21 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/POA/Etherealization/Etherealization.cpp: Fixed a couple of
          compiler warnings.

Fri Apr 27 14:34:59 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.cpp (_tao_get_omg_exception_description):

          Always return a valid string.  Previously zero was returned in
          the event of an error.  Return "*unknown description*" instead.

          Do not compile the minor code description tables if ACE_NDEBUG
          is defined.  This helps reduce the footprint for
          release/non-debug builds.

Fri Apr 27 14:11:11 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Invocation.i (location_forward_i):
        * tao/Invocation.cpp (invoke):

          Set the "restart_flag_" to 1 in the event of a location forward
          or a transport retry.  Previously, this was done in the
          generated stubs.  However, there was no reason to do it there.
          Setting it here saves on footprint.

        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp
          (gen_marshal_and_invoke):

          Fixed generated stub code so that attempts to demarshal return
          values or inout/out arguments will not occur if a
          LOCATION_FORWARD reply or a transport retry occurs.  In such
          cases, no inout/out and return values will be returned to the
          client so there is no point in attempting to demarshal them.
          [Bug 887]

          The receive_other() interception point in the generated code is
          now invoked in the event a target initiated LOCATION_FORWARD
          reply occurs or a transport retry occurs.

          No longer set the TAO_GIOP_Invocation::restart_flag_ variable in
          the generated stub.  The same thing can be done in the
          Invocation object itself.

          Check the ReplyStatus after invoking the receive_exception()
          interception point.  It may have transformed the caught
          exception in to a LOCATION_FORWARD, in which case the caught
          exception should not be rethrown.

Fri Apr 27 16:01:34 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/POA/Etherealization: Added new test to check for proper
          deactivation and etherealization of reference counted and non
          reference counted servants.  The following files were also
          modified:

          - tests/TAO_Tests.dsw
          - tests/POA/Makefile
          - tests/POA/Makefile.bor
          - tests/POA/README
          - ACE_wrappers/bin/auto_run_tests.lst

Fri Apr 27 11:58:18 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Synch_Reply_Dispatcher.cpp (dispatch_reply):
        * tao/Asynch_Reply_Dispatcher.cpp: Changed the steal_from () calls
          to steal_data () calls.  This removes the allocations along the
          critical path. The call steal_from () spent 48.5% of the time
          trying to do a reset_contents () (basically only memory
          allocations as per quantify) which should be gone now. We still
          see a problem when we transfer data_blocks. The transfer does a
          release which seems to occupy 35% of the time which would be
          almost impossible to do away with.

Fri Apr 27 11:45:58 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tests/POA/Single_Threaded_POA/run_test.pl:

          Updated this script to use the newer style perl modules, which
          support running on Chorus.

Fri Apr 27 11:31:38 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/TAO_Static.dsp: Added missing Endpoint_Selector_Factory.*.

Fri Apr 27 11:03:40 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tests/DynAny_Test/driver.cpp:

          Clean up the orb in the Driver destructor.  This allows the test
          to run properly on VxWorks.

Fri Apr 27 10:45:35 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Explicit_Event_Loop/client.cpp:
        * tests/Explicit_Event_Loop/server.cpp:
        * tests/Explicit_Event_Loop/run_test.pl:

          Updated this test to use the newer style perl modules, which
          support running on Chorus.  This required a couple minor
          modifications to the client and server code.

Fri Apr 27 10:32:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/Makefile:

          Updated dependencies.

Fri Apr 27 07:29:28 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Big_Request_Muxing/Client_Task.h: Included
          "tao/Messaging.h" in this file.

        * tests/Big_Request_Muxing/Client_Task.cpp: Removed the inclusion
          of "tao/Messaging.h" from this file.

Fri Apr 27 04:07:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:

          Fixed the send method, as it used not the right handle to send
          its data.

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:

          Fixed code to remove connection handlers.

Thu Apr 26 22:21:26 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/interface.idl:
        * tests/IDL_Test/generic_object.idl:

          Removed declarations that were put in to test handling
          of undefined forward declared interfaces, then commented
          out.

        * tests/IDL_Test/fwd.idl:
        * tests/IDL_Test/full.idl:

          New files, which test the generated code for undefined
          forward declared interfaces. Despite the names, the files
          contain interfaces that are mutually dependent. Each file
          has a fully defined interface that uses an interface which
          is fully defined only in the other file.

        * tests/IDL_Test/IDL_Test.dsp:
        * tests/IDL_Test/Makefile:
        * tests/IDL_Test/Makefile.bor:

          Added the new IDL files.

Thu Apr 26 20:18:45 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp: Used the new method
          ACE_InputCDR::steal_data () to extract data from the
          stream. This should help a bit with the performance and would
          also address part of bug # 875 in bugzilla. More changes for bug
          875 and 871 would be following this one.

Thu Apr 26 15:01:55 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Single_Read/Makefile: Fixed a typo. Thanks to Chad for
          poiting this out.

Thu Apr 26 09:34:56 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/MessagingC.cpp:
        * tao/diffs/MessagingC.cpp.diff:

          Added missing

          #if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)

          guard around the CDR operator implementations for class
          Messaging::ReplyHandler and regenerated the .diff file.

Thu Apr 26 08:14:20 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Big_Request_Muxing/Client_Task.cpp:
        * tests/Big_Request_Muxing/client.cpp: Added a missing include
          "tao/Messaging.h" so that the file would compile when
          interceptors are turned off. This is part of the requirement for
          writing TAO applications, which should include all the namespace
          files implicitly or explicitly.

Thu Apr 26 08:06:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Single_Read/Makefile: Made sure that the test builds even
          when Messaging is turned off. As a matter of fact the test does
          not depend on Messaging at all.

Thu Apr 26 07:26:19 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Fixed a compile
          error.

Wed Apr 25 16:15:49 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/CORBANAME_Parser.cpp:
        * tao/DLL_ORB.cpp:
        * tao/GIOP_Message_Base.cpp:
          More ACE_PRINT_EXCEPTION statements printed even when
          TAO_debug_level is 0.

Wed Apr 25 18:04:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp: Removed the superflous
          ACE_UNUSED_ARG statement.

Wed Apr 25 15:55:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Big_Request_Muxing/Makefile:
          Disabled the build if CORBA Messaging is not enabled.

        * tao/GIOP_Message_Handler.cpp:
          Fixed warning about unused variable.

Wed Apr 25 17:39:46 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/PortableServer/PortableServerC.h:
        * tao/diffs/PortableServerC.h.diff:

          Replace an overlooked ACE_TRY_ENV with
          TAO_ENV_ARG_DECL_WITH_DEFAULTS, and updated the
          .diff file. Thanks to Bala for pointing this out.

Wed Apr 25 16:09:25 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Handler.h:
        * tao/Connection_Handler.inl:
        * tao/Connection_Handler.cpp: Removed the is_registered_
          flag. This flag was used when the ORB was caching the connection
          handlers. This flag was used to indicate whether the connections
          handlers have been registered with the reactor or not. This flag
          is not necessary now as this work is done by a flag in the
          wait_strategy.

        * tao/IIOP_Connection_Handler.cpp
        * tao/IIOP_Transport.cpp:
        * tao/Transport.cpp: Removed references to the is_registered flag
          in the Connection_Handler. Changed them to use the
          Wait_Strategy::is_registered flag instead.

        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          Replicated the above changes.

        * tao/GIOP_Message_Handler.cpp: Fixed a unused variable warning.

Wed Apr 25 12:34:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:

          Replaced an overlooked 'IR_InterfaceDef' with
          'CORBA::InterfaceDef'.

Wed Apr 25 12:15:58 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IORManipulation/IORC.h:

          Added missing include of ace/post.h.

        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:

          Fixed more fuzz errors.

Wed Apr 25 12:00:04 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:

          Reformatted some output stream statements to avoid
          fuzz errors.

Wed Apr 25 11:20:54 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/ami_interface_ch.cpp:

          Removed a check for code generation already done. This
          visitor generates code in a special pass specific to
          AMI, and can never happen more than once. If an
          interface is forward declared, the 'completed' flag
          can be set in its full definition node, which was
          conflicting with the check in this visitor.

Wed Apr 25 07:56:51 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/ORB.h:
        * tao/ORB.cpp:

        Added a new, non-standard, work_pending() where you can specify a
        timeout.  This essentially works as a idle timeout.  See DOC bug
        868 for details on the motivation.  There is currently no test for
        this--I wanted to get this in before the next beta so people could
        try it out if they want.  It compiles, and, since there are no
        dependencies on it, it should be okay.

        Thanks to Steve Totten, Paul Calabrese, Phil Mesnier, Irfan
        Pyarali, and Doug Schmidt for helping work out the details of the
        use case and possible solutions.  [Bug 868]

Wed Apr 25 10:51:18 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Big_Oneways/*.bor
        * tests/Big_Twoways/*.bor
          Added BCB makefiles for these new test

        * tests/Makefile.bor
          Added new tests and removed one deleted test

        * tests/AMI_Bufferent/client.bor
          Added missing source file

Wed Apr 25 03:34:15 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Connection_Handler.cpp (handle_close): No
          longer need to hint for cleanup as we use reference counter to
          determine when to cleanup the backing store now.  This should
          fix the RTCORBA tests crashing as those tests also use the
          connection handler on the client side and the backing stores
          were being cleaned up in the wrong order.

Tue Apr 24 22:58:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/GIOP_Message_Handler.cpp:
          Enable message dumping only at debug level 5, same as the output
          data path.
          Dump the messages *before* updating wr_ptr(), otherwise the dump
          makes no sense.
          Removed Bala's hack made on Mon Feb 19 12:11:23 2001, this was
          supposed to support SHMIOP, but with the changes on the sending
          side it actually break things.
          After this change the IDL_Cubit regression test works, but there
          are some scenarios that may not, more detailed documentation in
          http://ace.cs.wustl.edu/bugzilla/show_bug.cgi?id=884

Tue Apr 24 19:42:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/BiDir_GIOP/diffs/BiDirPolicyC.cpp.diff:
        * tao/BiDir_GIOP/diffs/BiDirPolicyC.h.diff:
        * tao/BiDir_GIOP/diffs/BiDirPolicyC.i.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.cpp.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.h.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.i.diff:
        * tao/IORManipulation/diffs/IORC.cpp.diff:
        * tao/IORManipulation/diffs/IORC.h.diff:
        * tao/IORTable/diffs/IORTableC.cpp.diff:
        * tao/IORTable/diffs/IORTableC.h.diff:
        * tao/IORTable/diffs/IORTableC.i.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.cpp.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.h.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.inl.diff:
        * tao/diffs/CurrentC.cpp.diff:
        * tao/diffs/CurrentC.h.diff:
        * tao/diffs/CurrentC.i.diff:
        * tao/diffs/DomainC.cpp.diff:
        * tao/diffs/DomainC.h.diff:
        * tao/diffs/DomainC.i.diff:
        * tao/diffs/IOPC.cpp.diff:
        * tao/diffs/IOPC.h.diff:
        * tao/diffs/IOPC.i.diff:
        * tao/diffs/ImplRepoC.cpp.diff:
        * tao/diffs/ImplRepoC.h.diff:
        * tao/diffs/ImplRepoC.i.diff:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingC.h.diff:
        * tao/diffs/MessagingC.i.diff:
        * tao/diffs/PolicyC.cpp.diff:
        * tao/diffs/PolicyC.h.diff:
        * tao/diffs/PolicyC.i.diff:
        * tao/diffs/PollableC.cpp.diff:
        * tao/diffs/PollableC.h.diff:
        * tao/diffs/PollableC.i.diff:
        * tao/diffs/PortableInterceptorC.cpp.diff:
        * tao/diffs/PortableInterceptorC.h.diff:
        * tao/diffs/PortableInterceptorC.i.diff:
        * tao/diffs/PortableServerC.cpp.diff:
        * tao/diffs/PortableServerC.h.diff:
        * tao/diffs/PortableServerC.i.diff:
        * tao/diffs/RTCORBAC.cpp.diff:
        * tao/diffs/RTCORBAC.h.diff:
        * tao/RTPortableServerC.cpp.diff:
        * tao/diffs/RTPortableServerC.h.diff:
        * tao/diffs/RTPortableServerC.i.diff:
        * tao/diffs/TAOC.cpp.diff:
        * tao/diffs/TAOC.h.diff:
        * tao/diffs/TAOC.i.diff:

          Regenerated all pertinent .diff files after change
          to generated code in the entry below.

Tue Apr 24 18:35:31 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_root/root_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Removed unnecessary 'extern' from the declaration of the
          global hooks for defined interfaces, and uninlined the
          implementation of those hooks. Egcs, for one, can't
          handle an inline function that isn't declared in the
          same file. The other compilers probably disable inlining
          in such a case anyway.

        * tao/IFR_Client/IFR_Base.pidl:

          Fixed typos in comments.

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BaseC.i:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_BasicC.i:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.i:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.i:
        * tao/IFR_Client/diffs/IFR_BaseC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_BaseC.h.diff:
        * tao/IFR_Client/diffs/IFR_BaseC.i.diff:
        * tao/IFR_Client/diffs/IFR_BasicC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_BasicC.h.diff:
        * tao/IFR_Client/diffs/IFR_BasicC.i.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.h.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.i.diff:
        * tao/IFR_Client/diffs/IFR_ExtendedC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_ExtendedC.h.diff:
        * tao/IFR_Client/diffs/IFR_ExtendedC.i.diff:

          Regenerated hand-crafted files and .diff files for
          IFR_Client.

Tue Apr 24 16:31:03 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Big_Oneways/Session.h:
        * tests/Big_Twoways/Session.h:
          Fixed to compile on single-threaded platforms.

        * tests/Blocking_Sync_None/client.cpp:
          Only print an error message if more than 5% of the calls block,
          otherwise just print a warning.

        * tests/MT_Timeout/client.cpp:
          Re-order debug messages to make them more readable.

        * tests/Oneway_Buffering/client.cpp:
          Be more tolerant about when the messages are actually flushed.

        * tests/Makefile:
        * tests/README:
        * tests/LongWrites/Coordinator.cpp:
        * tests/LongWrites/Coordinator.h:
        * tests/LongWrites/LongWrites.dsw:
        * tests/LongWrites/Makefile:
        * tests/LongWrites/Makefile.bor:
        * tests/LongWrites/README:
        * tests/LongWrites/Receiver.cpp:
        * tests/LongWrites/Receiver.h:
        * tests/LongWrites/Sender.cpp:
        * tests/LongWrites/Sender.h:
        * tests/LongWrites/Sender_Task.cpp:
        * tests/LongWrites/Sender_Task.h:
        * tests/LongWrites/Test.idl:
        * tests/LongWrites/client.bor:
        * tests/LongWrites/client.cpp:
        * tests/LongWrites/client.dsp:
        * tests/LongWrites/run_test.pl:
        * tests/LongWrites/server.bor:
        * tests/LongWrites/server.cpp:
        * tests/LongWrites/server.dsp:
        * tests/LongWrites/svc.conf:
          Removed the regression test has been superseeded by Big_Oneways,
          Big_Twoways and the host of regression tests for bug 132.

Tue Apr 24 17:51:03 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * docs/tutorials/Quoter/On_Demand_Activation/index.html: Fixed a
          couple of misplaced links.  Thanks to Edan Ayal
          <edanayal@yahoo.com> for reporting this.

        * docs/tutorials/Quoter/On_Demand_Activation/Stock_Factory_i.cpp (get_stock):
          Renamed two misleading local variables named liked members.
          Thanks to Edan Ayal <edanayal@yahoo.com> for reporting this.

Tue Apr 24 15:38:26 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:
          A couple of error messages were printed even if TAO_debug_level
          was 0, this was generating spurious errors in the nightly builds
          for the MT_Timeout test.

Tue Apr 24 15:17:37 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile.bor:
          Add yet another missing file to the Borland Makefile

Tue Apr 24 14:47:51 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO_Static.dsp:
          I managed to remove more files than I expected in my merge,
          fixed that.

Tue Apr 24 15:00:53 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:

          Changed the termination times of the processes so they would
          not terminate before time.

Tue Apr 24 15:00:53 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_BaseC.h:

          Removed some overlooked extern typecode declarations.
          These have all been moved to  TAO, since they are in the CORBA
          namespace.

Tue Apr 24 12:48:19 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
          Fixed dead-lock in the timeout management.

        * docs/Options.html:
          Documented new option to control the flushing strategy (blocking
          vs. reactive)

        * tao/Asynch_Queued_Message.cpp:
          Fixed warnings about unused variable.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.h:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.h:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.h:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/IIOP_Connection_Handler.h:
        * tao/IIOP_Connection_Handler.cpp:
          Removed unused handle_timeout() methods.  The code has been
          factored out into the TAO_Transport_Timer class.

        * tao/Transport_Timer.h:
        * tao/Asynch_Timeout_Handler.h:
        * tao/Synch_Queued_Message.cpp:
          Cosmetic fixes

        * examples/Buffered_Oneways/test.idl:
          Made shutdown operation a twoway.

Tue Apr 24 11:59:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/LongWrites/Sender.h:
          Fixed warnings under Sun/CC 4.2

Tue Apr 24 11:46:45 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO_Static.dsp:
          Fixed list of files for the static TAO library.

Tue Apr 24 10:58:07 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Big_Oneways/client.cpp:
        * tests/Big_Oneways/server.cpp:
        * tests/Big_Request_Muxing/Client_Task.cpp:
        * tests/Big_Twoways/Session.cpp:
        * tests/Big_Twoways/client.cpp:
        * tests/Big_Twoways/server.cpp:
          Fixed Fuzz errors about missing ACE_CHECK/ACE_TRY_CHECK

Tue Apr 24 10:47:22 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile.bor:
          Add new files to the Borland makefile

        * tests/AMI_Buffering/admin.bor:
        * tests/AMI_Buffering/client.bor:
        * tests/AMI_Buffering/server.bor:
          Add -GC option to the IDL compiler rules

        * tests/LongWrites/client.bor:
          Add missing object to the Borland Makfile

Tue Apr 24 11:42:17 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/PollableC.h:

          Added missing inline implementation to constructor
          from pointer for Pollable_var, PollableSet_var, and
          DIIPollable_var.

Tue Apr 24 11:09:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/tmplinst.cpp:

          Changed names of tie classes instantiated in this file
          to match the changes in Servant_Factory.cpp.

Tue Apr 24 08:55:53 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Fixed errors about undefined symbols on Win32.

Tue Apr 24 10:49:54 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ci.cpp:

          Removed unused argument from method visit_interface_fwd().

Tue Apr 24 10:29:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IORTable/IORTableC.cpp:

          Removed unused arguments from some _tao_encode and
          _tao_decode methods.

Tue Apr 24 10:11:08 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/Invocation.cpp:

          Release the transport prior to calling connect on the connection
          registry.  Thanks to Dayisi <dayisi@163.com> for reporting this.

Tue Apr 24 10:03:20 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Priority_Mapping_Manager.h:
        * tao/Priority_Mapping_Manager.i:

          Added the extra methods described in the entry below
          to TAO_Priority_Mapping_Manager_var.

        * tao/CurrentC.cpp:

          Added include of Sequence_T.h, required for compilation
          by egcs.

Tue Apr 24 08:28:40 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_interface_fwd.cpp:
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd.cpp:
        * TAO_IDL/be/be_visitor_argument/post_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ci.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_root/root_ch.cpp
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be_include/be_interface_fwd.h:
        * TAO_IDL/be_include/be_visitor_interface_fwd.h:
        * TAO_IDL/include/ast_decl.h:

          Changes to IDL compiler, enabling it to handle a forward
          declared interface that is not defined in the same
          file (but must be fully defined somewhere in the build).
          Specific changes include:
          - Inlining disabled for CDR operators for all interfaces.
          - Any operators declared for undefined interfaces.
          - Inlining disabled for all interface _var and _out classes.
          - For undefined interfaces, extern declarations added for
            global functions that access the methods _duplicate,
            _nil, _narrow, and CORBA::release for the defined interface.
            Also added one to replace the upcast() mathod in the
            template object sequence classes in TAO, so an undefined
            interface pointer can be cast to CORBA::Object*.
          - For defined interfaces, added the implementation of the
            global methods (using the interface's flat name).
          - Added static hooks for these methods to the interface _var
            class (used by the template object sequence classes in TAO).
          - Modified generated code for non-template object sequence
            base classes, to use the global hooks for undefined
            interfaces.
          - Modified generated code for unions containing interfaces,
            so that the TAO_OBject_Manager template class will use the
            global hooks if the interface is undefined.
          - Modified generated code for an operation to use the
            global hooks, if it has an undefined interface in its
            signature.

        Added files:

        * TAO_IDL/be_include/be_visitor_interface_fwd/any_op_ch.h:
        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:

          Created a new visitor to generate Any operator declarations
          for a forward declared interface, defined or undefined.

        * orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/IFR_Service/IFR_BaseS.i:
        * orbsvcs/IFR_Service/IFR_BaseS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/IFR_Service/IFR_BasicS.i:
        * orbsvcs/IFR_Service/IFR_BasicS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.i:
        * orbsvcs/IFR_Service/Servant_Factory.cpp:

          Regerated all the IFR skeleton files. A different way of
          handling the CORBA namespace in the generation
          of the corresponding stub files gave the proxy classes,
          proxy factory function pointers, and tie classes slightly
          different names.

        * orbsvcs/IFR_Service/IRObject_i.h:

          A change in the include structure of the generated stub and
          skeleton files necessitated a change in the includes for this file.

        Removed files:

        * orbsvcs/IFR_Service/diffs/InterfaceS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.h.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.i.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS_T.i.diff:

          Replaced by the files below.

        Added files:

        * orbsvcs/IFR_Service/diffs/IFR_BaseS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS_T.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BaseS_T.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS_T.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_BasicS_T.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS_T.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ComponentsS_T.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS.i.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS_T.cpp.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS_T.h.diff:
        * orbsvcs/IFR_Service/diffs/IFR_ExtendedS_T.i.diff:

          Generated .diff files for all the generated IFR skeleton files.

        Removed files:

        * tao/IFR_Client/diffs/IntefaceC.cpp.diff:
        * tao/IFR_Client/diffs/IntefaceC.h.diff:
        * tao/IFR_Client/diffs/IntefaceC.i.diff:

          Replaced by the added files below.

        Added files:

        * tao/IFR_Client/diffs/IFR_BaseC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_BaseC.h.diff:
        * tao/IFR_Client/diffs/IFR_BaseC.i.diff:
        * tao/IFR_Client/diffs/IFR_BasicC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_BasicC.h.diff:
        * tao/IFR_Client/diffs/IFR_BasicC.i.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.h.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.i.diff:
        * tao/IFR_Client/diffs/IFR_ExtendedC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_ExtendedC.h.diff:
        * tao/IFR_Client/diffs/IFR_ExtendedC.i.diff:

          Generated .diff files for all the generated IFR stub files.

        * tao/IFR_Client/IFR_Base.pidl:
        * tao/IFR_Client/IFR_Basic.pidl:
        * tao/IFR_Client/IFR_Components.pidl:
        * tao/IFR_Client/IFR_Extended.pidl:

          Added instructions to the .pidl files about patching the
          generated files and the .pidl files themselves.

        * tao/IFR_Client/diffs/IFR_Base.pidl.diff:
        * tao/IFR_Client/diffs/IFR_Basic.pidl.diff:
        * tao/IFR_Client/diffs/IFR_Extended.pidl.diff:
        * tao/IFR_Client/diffs/IFR_Components.pidl.diff:

          Generated .diff files for the .pidl files themselves.
          Patching these files removes the CORBA namespace,
          adds CORBA_ to types formerly declared in the CORBA
          namespace, and makes various other minor mods to make
          patching the generated stub and skeleton files easier.

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BaseC.i:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_BasicC.i:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.h:
        * tao/IFR_Client/IFR_ComponentsC.i:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.h:
        * tao/IFR_Client/IFR_ExtendedC.i:

          Regenerated IFR stub files.

        * tao/BiDir_GIOP/BiDirPolicyC.cpp:
        * tao/BiDir_GIOP/BiDirPolicyC.h:
        * tao/BiDir_GIOP/BiDirPolicyC.i:

          Regenerated bidirectional GIOP stub files.

        Added files:

        * tao/BiDir_GIOP/diffs/BiDirPolicyC.cpp.diff:
        * tao/BiDir_GIOP/diffs/BiDirPolicyC.h.diff:
        * tao/BiDir_GIOP/diffs/BiDirPolicyC.i.diff:

          Added .diff files for the bidirectional GIOP stub files.

        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/DynamicAny/DynamicAnyC.h:
        * tao/DynamicAny/DynamicAnyC.i:
        * tao/DynamicAny/diffs/DynamicAnyC.cpp.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.h.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.i.diff:

          Regenerated the DynamicAny stub files and .diff files.

        * tao/IORManipulation/IORC.cpp:
        * tao/IORManipulation/IORC.h:
        * tao/IORManipulation/IORC.i:
        * tao/IORManipulation/diffs/IORC.cpp.diff:
        * tao/IORManipulation/diffs/IORC.h.diff:
        * tao/IORManipulation/diffs/IORC.i.diff:

          Regenerated the IORManipulation stub files and .diff files.

        * tao/IORTable/IORTableC.cpp:
        * tao/IORTable/IORTableC.h:
        * tao/IORTable/IORTableC.i:
        * tao/IORTable/diffs/IORTableC.cpp.diff:
        * tao/IORTable/diffs/IORTableC.h.diff:
        * tao/IORTable/diffs/IORTableC.i.diff:

          Regenerated the IORTable stub files and .diff files.

        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/PortableServerC.i:
        * tao/PortableServer/RTPortableServerC.cpp:
        * tao/PortableServer/RTPortableServerC.h:
        * tao/PortableServer/RTPortableServerC.i:

          Regnerated the PortableServer library stub files.

        * tao/TypeCodeFactory/TypeCodeFactory.pidl:

          Added instructions for patching TypeCodeFactory.pidl itself.

        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactoryC.h:
        * tao/TypeCodeFactory/TypeCodeFactoryC.inl:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.cpp.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.h.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.inl.diff:

          Regenerated the TypeCodeFactory stub and .diff files.

        Added file:

        * tao/TypeCodeFactory/diffs/TypeCodeFactory.pidl.diff:

          New file for patching TypeCodeFactory.pidl.

        Added files:

        * tao/diffs/Domain.pidl.diff:
        * tao/diffs/IOPC.cpp.diff:
        * tao/diffs/IOPC.h.diff:
        * tao/diffs/IOPC.i.diff:
        * tao/diffs/PortableInterceptorC.cpp.diff:
        * tao/diffs/PortableInterceptorC.h.diff:
        * tao/diffs/PortableInterceptorC.i.diff:
        * tao/diffs/RTPortableServerC.i.diff:

          New .diff files.

        * tao/diffs/CurrentC.cpp.diff:
        * tao/diffs/CurrentC.h.diff:
        * tao/diffs/CurrentC.i.diff:
        * tao/diffs/DomainC.cpp.diff:
        * tao/diffs/DomainC.h.diff:
        * tao/diffs/DomainC.i.diff:
        * tao/diffs/ImplRepoC.cpp.diff:
        * tao/diffs/ImplRepoC.h.diff:
        * tao/diffs/ImplRepoC.i.diff:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingC.h.diff:
        * tao/diffs/MessagingC.i.diff:
        * tao/diffs/PolicyC.cpp.diff:
        * tao/diffs/PolicyC.h.diff:
        * tao/diffs/PolicyC.i.diff:
        * tao/diffs/PollableC.cpp.diff:
        * tao/diffs/PollableC.h.diff:
        * tao/diffs/PollableC.i.diff:
        * tao/diffs/PortableServerC.cpp.diff:
        * tao/diffs/PortableServerC.h.diff:
        * tao/diffs/PortableServerC.i.diff:
        * tao/diffs/RTCORBAC.cpp.diff:
        * tao/diffs/RTCORBAC.h.diff:
        * tao/diffs/RTCORBAC.i.diff:
        * tao/diffs/RTPortableServerC.cpp.diff:
        * tao/diffs/RTPortableServerC.h.diff:
        * tao/diffs/TAOC.cpp.diff:
        * tao/diffs/TAOC.h.diff:
        * tao/diffs/TAOC.i.diff:

          Regenerated these .diff files.

        * tao/CurrentC.cpp:
        * tao/CurrentC.h:
        * tao/CurrentC.i:
        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/IOPC.cpp:
        * tao/IOPC.h:
        * tao/IOPC.i:
        * tao/MessagingC.cpp:
        * tao/MessagingC.h:
        * tao/MessagingC.i:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/PolicyC.i:
        * tao/PollableC.cpp:
        * tao/PollableC.h:
        * tao/PollableC.i:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.i:
        * tao/RTCORBAC.cpp:
        * tao/RTCORBAC.h:
        * tao/RTCORBAC.i:
        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/TAOC.i:

          Regenerated these stub files.

        * tao/Domain.pidl:

          Added instructions for patching the Domain.pidl itself.

        * tao/Object.h:
        * tao/Object.i:

          Added the static methods to CORBA::Object_var, similar to
          the static methods added to generated interface _var
          classes. These, however, don't need to call global hooks
          because CORBA::Object is always 'defined'. They need to
          to be here for use in the template object sequence classes
          in TAO, where there is no knowledge of whether the template
          parameter is a defined interface or not when the template
          class is compiled.

        * tao/Sequence_T.cpp:
        * tao/Sequence_T.i:

          Modified TAO_Unbounded_Object_Sequence<T,T_var>,
          TAO_Bounded_Object_Sequence<T,T_var>, and
          TAO_Object_Manager<T,T_var> to call the new static
          T_var methods instead of T::_duplicate, T::_nil, T::_narrow,
          and CORBA::release (T_ptr), since the interface template
          parameter may be undefined when the template class is compiled.
          Also redefined the sequence template upcast() method in the
          same way, since it calls for a cast of the (possibly
          undefined) interface pointer to CORBA::Object*.

        * tao/corbafwd.h:

          Removed an overlooked typedef that was a temporary hack
          while working on CORBA 2.4 compliance for the IFR.

Tue Apr 24 00:21:54 2001  Carlos O'Ryan  <coryan@uci.edu>

        * Merged in all the changes required to fix [BUGID:132]

        Mon Apr 23 22:05:56 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.h:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
          Update to match the new Transport classes.

        * tao/IIOP_Transport.cpp:
          Cosmetic fixes

        Mon Apr 23 21:10:40 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI_Buffering/client.cpp:
        * tests/Big_Oneways/Coordinator.cpp:
        * tests/Big_Twoways/Coordinator.cpp:
          Fixed ACE_CHECK/ACE_TRY_CHECK mismatches.

        Mon Apr 23 16:40:07 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
        * tao/Reactive_Flushing_Strategy.cpp:
          The schedule_output() and cancel_output() methods are invoked
          while the handle_mutex_ is held, so there is no need to grab it
          again.
          The methods are renamed schedule_output_i() and
          cancel_output_i() and they are made private, because only the
          Reactive_Flushing_Strategy should invoke them.

        * tao/Transport.cpp:
        * tao/PortableServer/Object_Adapter.cpp:
          Move the instantiation of ACE_Reverse_Lock<ACE_Lock> to the
          Transport.cpp file.

        * tests/AMI/muxed.conf:
        * tests/AMI/exclusive.conf:
          Fixed use of obsolete options

        * tests/AMI/run_test.pl:
          Cosmetic fixes

        Mon Apr 23 11:54:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI_Buffering/AMI_Buffering.dsw:
        * tests/AMI_Buffering/admin.dsp:
        * tests/AMI_Buffering/client.dsp:
        * tests/AMI_Buffering/server.dsp:
          Add MSVC project files for this test

        Mon Apr 23 11:47:07 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI_Buffering/Client_Task.h:
        * tests/AMI_Buffering/Client_Task.cpp:
        * tests/AMI_Buffering/client.cpp:
          The client event loop can be explicitly terminated now.

        * tests/AMI_Buffering/run_timeout_reactive.pl:
          Add new driver script for timeout based flushing, but initiated
          via the Reactor.

        * tests/Oneway_Buffering/client.cpp:
          Renamed the second part of the test, 'liveness' is a more
          descriptive term.

        Mon Apr 23 10:38:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI_Buffering/svc.conf:
          Without connection muxing the test runs out of resources pretty
          fast, plus flushing does not work exactly as expected.

        * tests/AMI_Buffering/Client_Task.h:
        * tests/AMI_Buffering/Client_Task.cpp:
          Add thread on the client to invoke the reply handler.  Without
          this feature the ORB would soon dead-lock.

        Mon Apr 23 10:03:31 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/Transport.cpp:
          Reduce locking overhead by sharing the event handler mutex and
          the queue mutex.  Since we need to lock the queue just before we
          do any I/O it is a very natural fit, and saves us one mutex
          per-call.

        Sun Apr 22 19:54:09 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsp:
          Update list of files.

        Sun Apr 22 19:32:55 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/README:
        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/AMI_Buffering/README:
        * tests/AMI_Buffering/Makefile:
        * tests/AMI_Buffering/Makefile.bor:
        * tests/AMI_Buffering/admin.bor:
        * tests/AMI_Buffering/client.bor:
        * tests/AMI_Buffering/server.bor:
        * tests/AMI_Buffering/run_test.pl:
        * tests/AMI_Buffering/run_timeout.pl:
        * tests/AMI_Buffering/run_buffer_size.pl:
        * tests/AMI_Buffering/run_message_count.pl:
        * tests/AMI_Buffering/Test.idl:
        * tests/AMI_Buffering/AMI_Buffering.h:
        * tests/AMI_Buffering/AMI_Buffering.cpp:
        * tests/AMI_Buffering/AMI_Buffering_Admin.h:
        * tests/AMI_Buffering/AMI_Buffering_Admin.cpp:
        * tests/AMI_Buffering/Reply_Handler.h:
        * tests/AMI_Buffering/Reply_Handler.cpp:
        * tests/AMI_Buffering/admin.cpp:
        * tests/AMI_Buffering/client.cpp:
        * tests/AMI_Buffering/server.cpp:

        Fri Apr 20 15:29:13 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile:
        * tao/Makefile.bor:
        * tao/Queued_Message.h:
        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/Transport.cpp:
        * tao/Transport_Timer.h:
        * tao/Transport_Timer.cpp:
          Add support for timeout notifications from the Reactor.  This is
          used to implement the TIMEOUT buffering constraints when the
          application does not send events continously.

        * tests/Oneway_Buffering/client.cpp:
        * tests/Oneway_Buffering/run_test.pl:
        * tests/Oneway_Buffering/run_timeout_reactive.pl:
          Add new regression test to verify that the TIMEOUT buffering
          constraints work.

        Thu Apr 19 14:17:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
          Factor out common code in drain_queue_i() into
          drain_queue_helper().
          Factor out code in send_message_queue(), incidentally
          send_message_queue() did not grab the queue lock, fixed that
          oversight.
          Made TAO_Block_Flushing_Strategy a friend class to access a
          couple of _i() methods.

        * tao/Synch_Queued_Message.cpp:
          Sometimes the message block chain contain trailing empty
          elements.  Those elements must be skipped, otherwise the
          current_block_ field never becomes 0, even though there is no
          more data to send.

        * tao/Block_Flushing_Strategy.cpp:
          In the blocking flush strategy we need to drain the queue as
          soon as schedule_output() is called, otherwise it is possible
          that the queue will never be drained.

        * tests/Queued_Message_Test/Queued_Message_Test.cpp:
          Use the TAO_Async_Queued_Message class for the test, the base
          class is abstract now.

        * tests/Oneway_Buffering/client.cpp:
          Initialize payload with non-zero bytes for easier debugging

        * tests/LongWrites/Makefile:
          Add files missed during the merge

        * tests/Big_Request_Muxing/Makefile:
          Update dependencies

        * tests/Big_Request_Muxing/client.cpp:
          Made request payload smaller, it was taking too long to run
          otherwise.

        * tests/Big_Request_Muxing/Client_Task.cpp:
          Made the test less verbose

        * tests/Makefile:
          Add a couple of missing tests Big_Twoways and Big_Request_Muxing

        * performance-tests/Latency/client.conf:
          Made output path blocking, using reactive out with blocking
          input does not quite work.

        * examples/Buffered_AMI/test.idl:
        * tests/Reliable_Oneways/Test.idl:
        * tests/Blocking_Sync_None/Test.idl:
          Made shutdown() operation a twoway.

        * examples/Buffered_AMI/client.cpp:
          Change ReplyHandler to receive the shutdown() callback.

        * tests/Muxing/run_test.pl:
        * examples/Buffered_AMI/run_test.pl:
          Increased wait time for the IOR file.

        Tue Apr 17 19:12:31 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp:
          Reset the current deadline as soon as the queue is empty.

        * tao/Sync_Strategies.cpp:
          Add debugging messages

        * tao/Makefile:
        * tao/Message_Sent_Callback.h:
        * tao/Message_Sent_Callback.inl:
        * tao/Message_Sent_Callback.cpp:
        * tao/Queued_Message.h:
        * tao/Queued_Message.cpp:
          Removed the TAO_Message_Sent_Callback class, it was not required
          at all.

        * tao/Strategies/UIOP_Transport.cpp:
          Add missing function (removed during the merge).

        Tue Apr 17 14:21:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.h:
        * tao/Asynch_Queued_Message.h:
        * tao/Asynch_Queued_Message.cpp:
        * tao/Synch_Queued_Message.h:
          The bytes_transferred() method does not need to return anything,
          the return value was ignored anyway, so change it to return
          void.

        * tao/Synch_Queued_Message.cpp:
          Fixed implementation of bytes_transferred(), the byte_count
          argument was not updated on all exit branches.

        * tao/GIOP_Message_Handler.cpp:
          Fixed inconsistency with main trunk.

        * tao/Sync_Strategies.cpp:
          Set the must_flush and set_timer flags to zero if there is no
          buffering constraint policy.

        * tao/Transport.cpp:
          Cosmetic fixes.  Return 1 from drain_queue_i() even if the flush
          operation returned 0, the return value is supposed to represent
          what happened to the message, not if there was a generic problem
          with the ORB.

        Tue Apr 17 09:59:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Sync_Strategies.h:
        * tao/Sync_Strategies.cpp:
          Add an argument in buffering_constraints_reached(), this new
          argument represents the current deadline for the transport.
          The current deadline is used to determine if the timer needs to
          be reset or if the timer has already expired.
          Unless the flushing strategy is turned on we need to check the
          timers on all exit paths.

          Change TAO_Transport_Sync_Strategy to *always* flush and always
          schedule output on every request.

        * tao/Transport.h:
        * tao/Transport.cpp:
          Use the new interface in the sync strategies to activate the
          output as soon as the timer expires.  Keep track of the current
          deadline for scheduling output.
          Fixed boundary condition in drain_queue_i(), there is a while()
          loop to fill iovecs with the contents of the queue, it is
          possible to exit the loop without anything in the iovec.  In
          this case we don't want to attempt a send() call.
          Remove unused argument from the send_synchronous_message_i()
          method.

        Sat Apr 14 17:04:21 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp (send_synchronous_message_i):
          The message was left in the queue even if a problem was detected
          in the write() operation.

        Sat Apr 14 17:01:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsp:
          Complete merge for Win32, CVS' automatic merge was not quite the
          right thing for this file.

        * tao/BiDir_Policy_i.cpp:
          This file was removed in the main trunk but was accidentally
          resurrected during the merge.

        Sat Apr 14 12:59:39 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Block_Flushing_Strategy.h:
        * tao/Block_Flushing_Strategy.cpp:
        * tao/Flushing_Strategy.h:
        * tao/Flushing_Strategy.cpp:
        * tao/Message_Sent_Callback.h:
        * tao/Message_Sent_Callback.inl:
        * tao/Message_Sent_Callback.cpp:
        * tao/Queued_Message.h:
        * tao/Queued_Message.inl:
        * tao/Queued_Message.cpp:
        * tao/Reactive_Flushing_Strategy.h:
        * tao/Reactive_Flushing_Strategy.cpp:
          Add files lost during merge

        * tao/IIOP_Transport.cpp:
          Solve merging problems.

        * tests/Big_Oneways/Makefile:
        * tests/Big_Twoways/Makefile:
          Update dependencies

        Sat Apr 14 10:33:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * Another merge for the bug 132 fixes.

        Fri Apr 13 18:49:32 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Flushing_Strategy.h:
        * tao/Block_Flushing_Strategy.h:
        * tao/Block_Flushing_Strategy.cpp:
        * tao/Reactive_Flushing_Strategy.h:
        * tao/Reactive_Flushing_Strategy.cpp:
          Add timeout to the flush_message() operation.

        * tao/Transport.cpp:
          Use the new timeout of flush_message() to implement timeouts
          for twoways blocked during writes.

        * tao/Queued_Message.h:
        * tao/Queued_Message.cpp:
          Add method to insert message at the head of the queue.

        * tao/Synch_Queued_Message.h:
        * tao/Synch_Queued_Message.cpp:
          Add accessor to obtain the current message block.

        Thu Apr 12 20:15:22 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Sync_Strategies.h:
        * tao/Sync_Strategies.cpp:
          Use two separate flags to return if:
          (1) the queue should be immediately flushed
          (2) and/or the ORB should start draining the queue

        * tao/Transport.h:
        * tao/Transport.cpp:
          Use the new interface in TAO_Sync_Strategy to correctly
          implement TAO::BUFFER_MESSAGE_COUNT and the TAO::BUFFER_SIZE
          buffering constraint policies.

        Wed Apr 11 10:21:35 2001  Carlos O'Ryan  <coryan@uci.edu>

        * With the following changes the semantics of oneways are
          bug-compatible with the main trunk.

        * tao/Transport.cpp:
          Add new method to check if the transport queue has any data
          pending.

        * tao/Flushing_Strategy.h:
          Add new operation to block until the queue becomes completely
          empty.

        * tao/Block_Flushing_Strategy.h:
        * tao/Block_Flushing_Strategy.cpp:
        * tao/Reactive_Flushing_Strategy.h:
        * tao/Reactive_Flushing_Strategy.cpp:
          Implement flush_transport() in each concrete strategy.

        * tao/Transport.h:
          Remove old code that was commented out anyway.

        Mon Apr 09 00:41:20 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Invocation.cpp:
          The default scope should be SYNC_WITH_TRANSPORT, but was
          overriden and became SYNC_NONE.

        * tao/Reactive_Flushing_Strategy.cpp:
          Fixed conditions to terminate the loop.

        * tao/Transport.cpp:
          Initialize byte_count to zero before calling send(), add more
          ACE_ASSERT() calls to debug the system.

        Sat Apr  7 21:13:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp:
          Separate the path for synchronous and asynchronous requests more
          cleanly.
          Merge the close_connection() changes from the main trunk, the
          ORB was dead-locking on me.
          Improve output for sent iovectors, now it is only generated if
          TAO_debug_level==2 and the Log_Msg is locked to prevent other
          threads from dumping the same messages.

        * tao/Transport.cpp (drain_queue_i):
          New method used by the synchronous path to send data ASAP.

        * tao/Invocation.h:
        * tao/Invocation.cpp (invoke):
          Clarify the semantics of the <twoway_flag> argument, actually it
          means that the ORB should wait until the data is delivered to
          the wire.
          Oneway invocations with the SYNC_WITH_TRANSPORT policy should
          block until the data is delivered to the wire.

        * tao/GIOP_Message_Handler.cpp:
          Only print the full contents of the received data when the debug
          level is *exactly* 2.

        * tests/Big_Oneways/Session.cpp:
          Fill up the messages with a repeating pattern, this is useful
          during debugging.

        Thu Apr 05 10:36:57 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.h:
          Remove the declaration of the done() method, the semantics were
          not clear and it was removed a couple of iterations ago.

        * tao/Block_Flushing_Strategy.cpp:
        * tao/Reactive_Flushing_Strategy.cpp:
          Wait until all_data_sent() returns.

        * tao/Transport.cpp:
          Cleanup handle_output() no need to loop, the drain_queue()
          method does that.
          After trying to send a message and blocking the send_message_i()
          method was not updating the new Asynch_Queued_Message with the
          number of bytes sent.
          drain_queue() loop was too complicated for its own sake.

        * tests/Big_Oneways/Session.h:
        * tests/Big_Oneways/Test.idl:
        * tests/Big_Oneways/Session.cpp:
          Add methods to prime the connections among multiple clients.

        * tests/Big_Oneways/server.cpp:
          Increase timeout for initial session registration.  Important
          for manual executions.

        Wed Apr  4 10:53:27 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
          Remove dead code.
          Rename some methods to more clearly reflect their intent.
          Simplify the management for the outgoing data queue.  The
          cleanup_queue() method removes any element that is completely
          sent, while the drain_queue() method simply tries to send as
          much data as possible.

        * tao/Queued_Message.h:
        * tao/Queued_Message.inl:
        * tao/Queued_Message.cpp:
          Each derived class can decided if the message has been
          completely sent very efficiently, no need to keep a local
          variable for that.
          We do need variables to keep track of closed connections, failed
          sends and timeouts.

        * tao/Messaging_Policy_i.cpp:
        * tao/Invocation.cpp:
          Improved debugging messages for timeouts

        Sun Apr 01 15:34:32 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/Asynch_Queued_Message.h:
        * tao/Asynch_Queued_Message.cpp:
        * tao/Synch_Queued_Message.h:
        * tao/Synch_Queued_Message.cpp:
        * tao/Queued_Message.h:
        * tao/Queued_Message.inl:
        * tao/Queued_Message.cpp:
          Specialize the Queue_Message class for Synchronous and
          Asynchronous messages.  Their behavior is completely different:
          synchronous messages (twoways and reliable oneways) are
          allocated from the stack, they should not copy the CDR stream
          and thus have to deal with message block chains.
          Asynchronous messages (oneways and AMIs with SYNC_NONE policy)
          are allocated from the heap, they must copy their data and thus
          can reassemble it in a single buffer.

        * tao/Transport.h:
        * tao/Transport.cpp:
          Changed the transport to use the new interface in the
          Queued_Message class.
          Completely separate the synchronous and asynchronous operation
          path.
          The new implementation recovers some functionality lost in
          previous revisions: multiple messages can be sent in a single
          iovector.

        * tests/Big_Oneways/Test.idl:
        * tests/Big_Oneways/Session.h:
        * tests/Big_Oneways/Session.cpp:
          Add ping() operation to the Session IDL interface.
          This is used to validate the session during startup, i.e. ensure
          that enough connections are available for all the threads.

        Sat Mar 31 14:56:37 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp:
          Fixed memory management and synchronization problems.
          Invoke the connection_closed() method on all the pending
          messages if the connection is closed.

        * tao/Queued_Message.h:
        * tao/Queued_Message.inl:
        * tao/Queued_Message.cpp:
          If the connection is closed there is no sense in trying to
          continue sending the message.
          The done() method returns 1 if the connection was closed or if
          the message was completely sent.

        * tao/Reactive_Flushing_Strategy.cpp:
          Propagate any errors from Transport::schedule_output() and
          Transport::cancel_output()

        * tests/Big_Request_Muxing/Big_Request_Muxing.dsw:
        * tests/Big_Request_Muxing/client.dsp:
        * tests/Big_Request_Muxing/server.dsp:
          Add MSVC project files

        Fri Mar 30 17:06:33 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/README:
        * tests/Big_Request_Muxing/README:
        * tests/Big_Request_Muxing/Test.idl:
        * tests/Big_Request_Muxing/run_test.pl:
        * tests/Big_Request_Muxing/Makefile:
        * tests/Big_Request_Muxing/Client_Task.h:
        * tests/Big_Request_Muxing/Client_Task.cpp:
        * tests/Big_Request_Muxing/Payload_Receiver.h:
        * tests/Big_Request_Muxing/Payload_Receiver.cpp:
        * tests/Big_Request_Muxing/client.cpp:
        * tests/Big_Request_Muxing/server.cpp:
        * tests/Big_Request_Muxing/svc.conf:
          Another regression tests, use the same connection to the big
          oneways at different levels of reliability.

        * tests/README:
        * tests/Big_Twoways/README:
        * tests/Big_Twoways/Test.idl:
        * tests/Big_Twoways/run_test.pl:
        * tests/Big_Twoways/Makefile:
        * tests/Big_Twoways/Coordinator.h:
        * tests/Big_Twoways/Coordinator.cpp:
        * tests/Big_Twoways/Peer.h:
        * tests/Big_Twoways/Peer.cpp:
        * tests/Big_Twoways/Session.h:
        * tests/Big_Twoways/Session.cpp:
        * tests/Big_Twoways/Session_Control.h:
        * tests/Big_Twoways/Session_Control.cpp:
        * tests/Big_Twoways/Session_Task.h:
        * tests/Big_Twoways/Session_Task.cpp:
        * tests/Big_Twoways/client.cpp:
        * tests/Big_Twoways/server.cpp:
          Another regression test, similar to Big_Oneways, but this one
          uses a long request *and* a long reply.

        * tests/LongWrites/Sender.cpp:
          Fixed warning about unused variable

        * tests/LongWrites/Makefile:
          Fixed Makefile

        * tests/Timeout/client.cpp:
          Verify that at least some of the messages timeout and others
          complete the test successfully.

        Thu Mar 29 08:38:42 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          Do not close the connection if it sends 0 bytes.  This is
          perfectly possible when using non-blocking I/O.

        Wed Mar 28 10:42:12 2001  Carlos O'Ryan  <coryan@uci.edu>

        * Another merge for the branch fixing bug 132

        Tue Mar 20 09:34:53 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp:
          Improved error checking for Queued_Message allocations.

        Sat Mar 17 17:52:27 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
          Removed the current_message_ field, using the head of the queue
          works just as well, at least as long as we always push events to
          the end of the queue.

        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
        * tao/Reactive_Flushing_Strategy.cpp:
          Use the Flushing Strategy to schedule output and cancel output
          with the reactor.

        Sat Mar 17 15:34:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Big_Oneways/Session.h:
        * tests/Big_Oneways/Session.cpp:
          Fixed signed/unsigned warnings

        * tests/Big_Oneways/Coordinator.cpp:
          Print error messages in all exception cases

        * tests/Big_Oneways/run_test.pl:
          Run 3 peers to cause failures.

        Fri Mar 16 15:49:26 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Transport.cpp:
          Fixed debugging message for cancel_output.

        * tests/Big_Oneways/Big_Oneways.dsw:
        * tests/Big_Oneways/client.dsp:
        * tests/Big_Oneways/server.dsp:
          Fixed project files, the first version commited missed some
          changes.

        Thu Mar 15 10:46:52 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Big_Oneways/Makefile:
        * tests/Big_Oneways/Test.idl:
        * tests/Big_Oneways/run_test.pl:
        * tests/Big_Oneways/Coordinator.h:
        * tests/Big_Oneways/Coordinator.cpp:
        * tests/Big_Oneways/Peer.h:
        * tests/Big_Oneways/Peer.cpp:
        * tests/Big_Oneways/Session.h:
        * tests/Big_Oneways/Session.cpp:
        * tests/Big_Oneways/client.cpp:
        * tests/Big_Oneways/server.cpp:
          Changed the test to work more predictably on multi-CPU boxes.
          The sessions are configured at creation time, and they don't
          start sending events until start() is called.
          Instead of automatically destroy them on shutdown we wait until
          they all stop and then explicitly use a destroy() method to take
          them down.

        Tue Mar 13 15:08:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/README:
        * tests/Makefile:
        * tests/Big_Oneways/README:
        * tests/Big_Oneways/Test.idl:
        * tests/Big_Oneways/Makefile:
        * tests/Big_Oneways/Big_Oneways.dsw:
        * tests/Big_Oneways/server.dsp:
        * tests/Big_Oneways/client.dsp:
        * tests/Big_Oneways/run_test.pl:
        * tests/Big_Oneways/Coordinator.h:
        * tests/Big_Oneways/Coordinator.cpp:
        * tests/Big_Oneways/Peer.h:
        * tests/Big_Oneways/Peer.cpp:
        * tests/Big_Oneways/Session.h:
        * tests/Big_Oneways/Session.cpp:
        * tests/Big_Oneways/Session_Control.h:
        * tests/Big_Oneways/Session_Control.cpp:
        * tests/Big_Oneways/Session_Task.h:
        * tests/Big_Oneways/Session_Task.cpp:
        * tests/Big_Oneways/client.cpp:
        * tests/Big_Oneways/server.cpp:
          Add new stress test for the non-blocking I/O features in the
          ORB.  This test is more focussed than LongWrites, and its
          shutdown sequence is better designed (LongWrites tends to crash
          after running successfully.)

        * tao/GIOP_Message_Handler.cpp:
          Fixed unsigned/signed warning

        Thu Mar  8 19:12:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.cpp:
          Had to manually merge Bala's changes from Sat Feb 17 23:08:44
          2001.

        * tao/IIOP_Connection_Handler.cpp:
          Cosmetic fixes.

        * tao/IIOP_Transport.cpp:
          Print debugging messages when output is scheduled, and alse when
          it is canceled.
          Do not register the handler more than once on the reactor.

        * tao/Queued_Message.inl:
          The done() condition was reversed.

        * tao/Transport.cpp:
          Add a ton of debugging mesages, including detailed messages of
          outgoing and incoming data, information about each queued
          message, etc.

        * tao/Transport.cpp (send_message_block_chain):
          Always add the number of bytes transferred on each send() call,
          even when it returns an error.

        * tao/Transport.cpp (send_message_i):
          Use easier to read code when deciding what messages are queued.
          Before calling schedule_output() and returning we must queue the
          message, forgot to do that in the previous version.

        * tests/LongWrites/Receiver.cpp:
        * tests/LongWrites/Sender.cpp:
        * tests/LongWrites/Sender.h:
        * tests/LongWrites/Sender_Task.cpp:
        * tests/LongWrites/Sender_Task.h:
        * tests/LongWrites/client.cpp:
          I'm tweaking the test trying to make the termination condition
          more reliable.  Unfortunately after one of the clients finishes
          the rest does not receive all the required messages.
          I will probably have to change the protocol, which is probably a
          good idea anyway, so we can control the number of threads too.

        * tests/LongWrites/run_test.pl:
          In the haste to merge the fix_bug132 bug I forgot to incorporate
          the support for the multiple test types.

        * tao/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile:
        * tests/LongWrites/Makefile:
          Update dependencies.

        Wed Mar 07 08:48:11 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.inl:
          Both done() and mb() were using contents_, but the flow has
          changed to use current_message_.

        * tao/Transport.cpp:
          Simplify code flow in send_current_message()
          Simplify code in dequeue_head()

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Update project files so they work on the branch.

        Tue Mar  6 19:44:44 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/GIOP_Message_Handler.cpp:
          When printing an invalid GIOP magic number use hex values, not
          the character representation, because the latter can print out
          garbage.

        * tao/ORB_Core.cpp:
          Print the return value of each handle_events() call, on an
          attempt to figure out why it is spinning.

        * tao/Transport.cpp:
          Print handle, return value and errno after each call to
          send_current_message()

        * tao/Wait_On_Leader_Follower.cpp:
          Don't enter the event loop if the reply has been received
          already.

        Tue Mar  6 11:02:43 2001  Carlos O'Ryan  <coryan@uci.edu>

        * Merged in changes from the fix_bug132 branch.  I need several
          bug fixes from the main trunk.  In my experience the easiest way
          to do this is to create a new branch higher up in the main
          trunk, close the old branch and propagate its changes to the new
          one.
          In this case we created fix_bug132_iter02 (today) merge the
          changes from fix_bug132 into that branch, and close fix_bug132.

        Mon Mar  5 11:32:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp:
        * tao/IIOP_Transport.cpp:
          Add debugging messages

        * tests/LongWrites/Makefile:
          Updates dependencies and object files for the client.

        Fri Mar 02 15:29:17 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
          Continue implementation of reactive output.
          On this pass I fixed the code to deal with several error
          conditions, invoke schedule_output() if the connection returns
          an EWOULDBLOCK, also cancel the output if there is no data to
          send.
          Fix syncronization on send_queued_message()
          Fix memory allocation for message blocks contained in
          Queued_Message, they cannot be cloned() because that would
          allocate from TSS.

        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
          Implement schedule_output() and cancel_output() methods.

        * tao/Wait_On_Leader_Follower.cpp:
          Do not re-insert the transport into the reactor on each wait,
          once is enough.

        * tao/IIOP_Connection_Handler.h:
        * tao/IIOP_Connection_Handler.cpp:
          Implement a handle_output() callback, delegate on the
          TAO_Transport

        * tao/IIOP_Endpoint.cpp:
          Remove unused #include

        * tests/LongWrites/Coordinator.h:
        * tests/LongWrites/Coordinator.cpp:
        * tests/LongWrites/Receiver.h:
        * tests/LongWrites/Receiver.cpp:
        * tests/LongWrites/Sender.h:
        * tests/LongWrites/Sender.cpp:
        * tests/LongWrites/client.cpp:
        * tests/LongWrites/client.dsp:
        * tests/LongWrites/run_test.pl:
        * tests/LongWrites/server.cpp:
        * tests/LongWrites/svc.conf:
        * tests/LongWrites/Sender_Task.h:
        * tests/LongWrites/Sender_Task.cpp:
          Add support for multi-threaded clients.
          Try to count the number of incoming messages and only exit when
          all have been received.

        * tests/Queued_Message_Test/Queued_Message_Test.dsp:
          Removed a number of unused files from this unit test.

        Sun Feb 25 10:22:59 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.h:
        * tao/Queued_Message.cpp:
        * tao/Transport.cpp:
          Instead of releasing the message blocks as soon as possible we
          delay until the queued message is deallocated.  This will make
          it possible to release all the data in the same thread that
          allocated it, preserving the support for TSS allocators.

        * tests/LongWrites/Test.idl:
        * tests/LongWrites/Receiver.h:
        * tests/LongWrites/Receiver.cpp:
        * tests/LongWrites/Sender.h:
        * tests/LongWrites/Sender.cpp:
        * tests/LongWrites/client.cpp:
        * tests/LongWrites/run_test.pl:
          The test can now send big oneways, big twoways and big twoways
          with big responses.

        Wed Feb 14 18:38:11 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.cpp:
          Fixed queue manipulation logic

        * tests/Queued_Message_Test/Queued_Message_Test.cpp:
          The test was miscounting remove operations from the queue.

        * tests/Queued_Message_Test/Queued_Message_Test.dsw:
        * tests/Queued_Message_Test/Queued_Message_Test.dsp:
          Add MSVC project files.

        Wed Feb 14 10:02:44 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.h:
        * tao/Queued_Message.cpp:
          Add flag to control message block ownership, used to minimize
          memory allocations.

        * tao/Transport.cpp:
          Use the ownership flags for the Queued_Message.

        * tests/Makefile:
        * tests/Queued_Message_Test/Makefile:
        * tests/Queued_Message_Test/Queued_Message_Test.cpp:
          Add new unit test for the TAO_Queued_Message class.

        * tao/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
          Update dependencies

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          The ACE_SSL_SOCK_Stream does not support sendv()

        Mon Feb 12 15:44:54 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile:
          Update makefile to include new files

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.cpp:
          Fixed all protocols to use the new send() method with iovec
          parameters.

        * tao/GIOP_Message_Lite.cpp:
          Use the send() method with iovec arguments.

        * tao/Sync_Strategies.h:
        * tao/Sync_Strategies.cpp:
        * tao/Transport.cpp:
          More cleanup for the Sync_Strategies, the must_queue() method
          does not require a Stub argument.

        Mon Feb 12 10:15:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
        * tao/Transport.cpp:
          Add new method to send a message block chain.
          The template method to send data takes an iovec argument.

        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
          Implement the iovec-based send() template method.

        * tao/Queued_Message.cpp:
          The cleanup code was broken.

        * tao/GIOP_Message_Base.cpp:
          Use the message block chain method to send short critical
          messages.

        Fri Feb 09 10:50:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Queued_Message.h:
        * tao/Queued_Message.inl:
        * tao/Queued_Message.cpp:
          Add new class to represent a queued message in the outgoing
          path.  This class has to keep more than just the message block,
          it also takes care of timeouts and signaling any waiting thread
          when the message is sent.

        * tao/Message_Sent_Callback.h:
        * tao/Message_Sent_Callback.inl:
        * tao/Message_Sent_Callback.cpp:
          Define interface to signal threads waiting for a message to be
          sent out, e.g. twoway requests blocked waiting for a queued
          message.

        * tao/Flushing_Strategy.h:
        * tao/Flushing_Strategy.cpp:
        * tao/Block_Flushing_Strategy.h:
        * tao/Block_Flushing_Strategy.cpp:
        * tao/Reactive_Flushing_Strategy.h
        * tao/Reactive_Flushing_Strategy.cpp:
          New classes to control how the outgoing data is flushed,
          either by blocking on write() or by using the reactor.

        * tao/Resource_Factory.h:
        * tao/default_resource.h:
        * tao/default_resource.cpp:
          Add new methods to create the flushing strategy.

        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/ORB_Core.cpp:
          Add accessor for the flushing strategy.  Notice that the
          strategy is stateless so a single instance (per-ORB) is needed.

        * tao/Sync_Strategies.h:
        * tao/Sync_Strategies.cpp:
          The Sync_Strategies have been simplified.  They are now
          stateless, and they only need to answer a couple of questions
          (1) should a message be buffered, (2) should the ORB flush a
          queue.

        * performance-tests/Latency/st_client.cpp:
          Destroy the ORB on shutdown.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Add the new files to the TAO project files.

        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/Transport.cpp:
          Move much of the functionality of sending and outgoing message
          queue up to the base transport class.  Remove a lot of code
          deailing with the previous (blocking) queues.

        * tao/IIOP_Transport.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Change the transport and connection handlers to use the new
          outgoing message queue, the flushing strategy and the changes to
          the SyncStrategy.

        * tao/GIOP_Message_Base.cpp:
          Propagate a few interface changes.

        * tests/LongWrites/LongWrites.dsw:
        * tests/LongWrites/client.dsp:
        * tests/LongWrites/server.dsp:
        * tests/LongWrites/run_test.pl:
          Got the test to compile (and run) under NT.

Mon Apr 23 11:49:01 2001  Joe Hoffert  <joeh@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
          Added a sanity check for the length of sequences not to exceed
          the length of the stream - cf. bug 58.

Mon Apr 23 10:40:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/MT_Timeout/client.cpp:
        * tests/MT_Timeout/Client_Task.cpp:
        * tests/MT_Timeout/Client_Taks.h:

          Made the test more smart and tolerant regarding scheduling jitters.
          The test now checks how many calls have taken too long to return
          and prints warnings, or even errors in the case more than 5 % of
          the calls have taken too long. Thanks to Carlos for his suggestions.

Mon Apr 23 00:45:00 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/*/Makefile
          All AVStreams tests now depend on libACE_QoS.so (even if they
          do not use QoS), because libTAO_AV.so links against libACE_QoS.so
          if QoS was enabled.
          libACE_QoS.so should only be conditionally linked in.
          (Check if rapi=1)

Sun Apr 22 19:59:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/AV/Transport.cpp:
          Removed unused variable.

Sun Apr 22 19:44:02 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Oneway_Buffering/README:
          Too much cut & paste in the documentation.

Sun Apr 22 16:44:12 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Pluggable_Messaging_Utils.cpp:
          Use default constructor for the IOP::ServiceContextList instead
          of the constructor taking the maximum size hint.  This solves
          [BUGID:876]

Sun Apr 22 16:27:20 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Server_Request.i (operation):

          This method is now basically a wrapper around the
          ACE_CString::set() method.  This change makes it easier to
          control whether or not the TAO_ServerRequest object should copy
          the operation name string. [Bug 870]

        * tao/TAO_Server_Request.cpp (TAO_ServerRequest):

          This constructor now accepts a "const char *" instead of an
          ACE_CString.  There is no longer any need to use an ACE_CString.

          (_tao_send_reply_exception):

          Initialize the static buffer using aggregate initialization
          instead of memset().  It's cleaner.

        * tao/GIOP_Message_Generator_Parser_10.cpp (parse_request_header):
        * tao/GIOP_Message_Generator_Parser_12.cpp (parse_request_header):
        * tao/GIOP_Message_Lite.cpp (parse_request_header):

          Don't bother creating a temporary ACE_CString.  Just pass the
          operation name string to The TAO_ServerRequest object.
          TAO_ServerRequest now does the "Right Thing"tm in terms of
          managing the operation name string.  This removes one heap
          allocation from the criticial path (i.e. zero allocations in the
          common case (no character set translator) and one allocation in
          the case where a character set translator is used). [Bug 870]

        * tao/LocalObject.cpp:

          Removed inclusion of "ace/Auto_Ptr.h."  There was no need to
          include it.

          (_hash):

          Implemented this method.  Simply base the hash on the address of
          the object.

        * tao/Makefile:
        * tao/*/Makefile:

          Updated dependencies.

Sun Apr 22 14:00:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.h:

          Fixed a compiler warning about pragma once by reordering
          includes.  Thanks to Carlos for reporting this.

        * examples/PluggableUDP/tests/Basic/run_test.pl:

          Extended the time to wait for the test.

Sat Apr 21 19:33:43 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Environment.h:
        * tao/Environment.i:
        * tao/Environment.cpp:
          Remove the reference count, this allow us to eliminate the
          creation (and destruction) of 3 locks on the server's critical
          path.  This fixes [BUGID:873]

Sat Apr 21 19:30:35 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * orbsvcs/tests/Trading/TradingLib.dsp: Fixed the library output
          directory to conform with our pattern.

Sat Apr 21 16:08:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/Performace/UDP_PerformanceClient.cpp:
        * examples/PluggableUDP/tests/Performace/UDP_i.cpp:

          Fixed the test output.

Sat Apr 21 05:50:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:

          Fixed a template instantiation problem.

Sat Apr 21 05:05:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp

          Fixed memory mangement of connection handlers.

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp

          Fixed a bug which caused the reactor to call us infinitely.

        * examples/PluggableUDP/DIOP/TAO_DIOP.dsw:

          Added dependencies correctly.

        * examples/PluggableUDP/tests/Basic/client.cpp:

          Fixed a race condition when the client would shutdown.

        * examples/PluggableUDP/tests/Basic/svc.conf

          Added the thread pool reactor as the reactor.

        * examples/PluggableUDP/tests/SimplePerformance/client.cpp:

          Added a line invoking shutdown on the server.

Sat Apr 21 01:45:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:

          Removed debug messages.

Sat Apr 21 01:35:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/Performance/Makefile:
        * examples/PluggableUDP/tests/Basic/Makefile:
        * examples/PluggableUDP/tests/SimplePerformance/Makefile:

          Fixed the Makfiles to properly compile and link.

Sat Apr 21 01:20:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/Performance/UDP_i.cpp:
        * examples/PluggableUDP/tests/Performance/server.cpp:
        * examples/PluggableUDP/tests/Performance/PerformanceClient.cpp:

          Fixed compiler warnings.

Sat Apr 21 00:47:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/SimplePerformance/run_test.pl:
        * examples/PluggableUDP/tests/SimplePerformance/server.cpp:
        * examples/PluggableUDP/tests/Basic/run_test.pl:
        * examples/PluggableUDP/tests/Basic/server.cpp:
        * examples/PluggableUDP/tests/Performance/run_test.pl:
        * examples/PluggableUDP/tests/Performance/server.cpp:

          Fixed some confusion between ior file names.

Sat Apr 21 00:40:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/SimplePerformance/run_test.pl:

          Added this perl script.

Fri Apr 20 21:29:38 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * TAO/tao/Client_Strategy_Factory.cpp:
        * TAO/tao/Client_Strategy_Factory.h:
        * TAO/tao/default_client.cpp:
        * TAO/tao/default_client.h:
          Added a new method <allow_callback> that query the strategy
          factory whether the effective wait strategy allows any form of
          callback.

        * TAO/tao/Strategies/SHMIOP_Acceptor.cpp (open):
        * TAO/tao/Strategies/SHMIOP_Connector.cpp (open): Added code to
          hint the MEM_Stream's to use the new multithreaded transport when
          the client/server strategies allow them to.

Fri Apr 20 16:13:40 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.av:
        * orbsvcs/orbsvcs/AV/AVStreams_i.h:
        * orbsvcs/orbsvcs/AV/AVStreams_i.i:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/Transport.cpp:
        * orbsvcs/orbsvcs/AV/AV_Core.h:
        * orbsvcs/orbsvcs/AV/AV_Core.cpp:
        * orbsvcs/orbsvcs/AV/UDP.cpp:
        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp:
        * orbsvcs/orbsvcs/AV/QoS_UDP.h:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:
        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.h:
        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.cpp:

          Integrated AQoSA and AVStreams for the UDP unicast protocol. This allows
          to set up an RSVP session between the sender and receiver using AQoSA.

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/README:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/runtest.pl:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/input:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/Simple_Two_Stage_With_QoS.dsw:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.dsp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/receiver.h:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/receiver.dsp:

          Test to verify the AQoSA/AV integration.

Fri Apr 20 14:39:48 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp
          (handle_close):
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp
          (handle_close):

          Call destroy() on the Svc_Handler rather than calling "delete
          this."  See ChangeLog entry from Tue Apr 17 15:48:20 2001
          Nanbor Wang  <nanbor@cs.wustl.edu>.

Fri Apr 20 15:51:52 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * docs/ec_options.html:
        * docs/cec_options.html:

          Update the documentation to better reflect reality.  Includes
          the following changes:

           - Reformat collection option table for readability
           - Remove the UNIMPLEMENTED tag from COPY_ON_WRITE
           - Add the missing attributes
           - Add discussion of TAO_EC_Sched_Factory
           - Mark TAO_EC_Sched_Factory option values as such
           - Add missing option (-ECProxyPushSupplierCollection)
           - Fix some typos

Fri Apr 20 16:00:40 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
          Added missing explicit template instatiation to fix the
          problem on compiler that use explicit template instantiation.

Fri Apr 20 08:17:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:

          Fixed template instantiation problems.

Thu Apr 19 23:30:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.h:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.h:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Factory.h:

          Removed unused dependencies to ACE headers and
          removed dead code.

Thu Apr 19 14:40:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/Basic/run_test.pl:
        * examples/PluggableUDP/tests/Performance/run_test.pl:

          Fixed the path settings.

        * examples/PluggableUDP/tests/SimplePerformance/run_test.pl:

          Added the perl script.

        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Basic/client.dsp:

          Changed the name as it appears in the workspace slightly.

Thu Apr 19 07:09:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/RTCORBA/Thread_Pool/server.cpp: Fixed a typo that was
          giving a warning.

Wed Apr 18 23:00:07 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tests/Collocation/Collocation.bor: Changed main.obj to
          Collocation.obj.

Wed Apr 18 21:57:46 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Recent changes to this files necessitated a change in the
          way the visitor's context's scope parameter is set.

Wed Apr 18 21:38:35 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/Naming_Service: Updated the README file so that it explains
          how to trouble shoot problems with multicast.  Thanks to Stephen
          Torri <s.torri@lancaster.ac.uk> for contributing this.

Wed Apr 18 19:17:37 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Makefile:
        * performance-tests/Makefile.bor:
        * performance-tests/Throughput/Makefile:
        * performance-tests/Throughput/Makefile.bor:
        * performance-tests/Throughput/README:
        * performance-tests/Throughput/Receiver.cpp:
        * performance-tests/Throughput/Receiver.h:
        * performance-tests/Throughput/Receiver_Factory.cpp:
        * performance-tests/Throughput/Receiver_Factory.h:
        * performance-tests/Throughput/Test.idl:
        * performance-tests/Throughput/client.bor:
        * performance-tests/Throughput/client.cpp:
        * performance-tests/Throughput/run_test.pl:
        * performance-tests/Throughput/server.bor:
        * performance-tests/Throughput/server.cpp:
        * performance-tests/Throughput/svc.conf:
        * performance-tests/Thruput/*:
          Remove the old Thruput test and replaced it with a simpler
          test.  The new test can be put in the nightly regression test
          and it would be easy to extract performance number for the
          performance metrics charts.

Wed Apr 18 17:06:42 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Checking in changes of

          Wed Apr 18 15:24:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

          once again.

        * TAO_IDL/ast/ast_exception.cpp (in_recursion):
        * TAO_IDL/ast/ast_union.cpp (in_recursion):

          Removed some bogus error messages. The corresponding one
          for ast_structure.cpp has already been removed.

Wed Apr 18 16:28:39 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Reverted change below until I can find the problem it
          was causing with normal running of the IDL compiler.

Wed Apr 18 15:24:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Fixed typecode generation for structs and exceptions
          that have an enum defined inside. The enum member names
          were inserted into the typecode and added to the member
          count. Thanks to Tom Lake <Tom.Lake@glossa.co.uk> for
          reporting the problem.

Wed Apr 18 12:10:54 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp (read_messages): Reverted the
          change from this "Wed Apr 18 10:56:30 2001  Balachandran
          Natarajan  <bala@cs.wustl.edu>". Going over the fix from
          scratch as the fix is wrong.

Wed Apr 18 10:56:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/BiDirectional_NestedUpcall/run_test.pl: Fixed the
          run_test.pl script. Thanks to Carlos for pointing out that this
          script does not work.

Wed Apr 18 10:28:16 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp: Added an extra check for errno ==
          EAGAIN. After a read, if the errno is set to EAGAIN, a value of
          0 was returned to the reactor. This was because errno values of
          EAGAIN and EWOULDBLOCK are same. This made the reactor call the
          handle_input () again and again. Every call would return a 0
          with errno set to EAGAIN. Thanks to Jody Hagins
          <jody@atdesk.com> for coming up with a test case that
          demonstrated the problem. Need to check the test case in with
          some modifications.

        * tao/GIOP_Message_Base.cpp: Made some cosmetic fixes.

Wed Apr 18 10:28:53 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_be_visitor_union/union_cs.cpp:

          Added check for self-assignment in code generation for
          assignment operator. The lack of the check caused not
          only inefficiency, but also a crash if the union's
          active member is a pointer type, since the code
          deallocates the old member first. Thanks to
          Uwe Jger <jaeger@varial.de> for pointing out the missing
          check.

Wed Apr 18 09:44:15 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Leader_Follower.h: Added TAO_Export macros. Looks to me that
          this should take care of link errors on Win32.

Wed Apr 18 08:49:42 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/RTCORBA/Thread_Pool/server.cpp (main):
        * tests/RTCORBA/Thread_Pool/client.cpp (main):

          Couple of minor warning fixes.

Wed Apr 18 03:43:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/tests/Basic/client.dsp:
        * examples/PluggableUDP/tests/Basic/server.dsp:
        * examples/PluggableUDP/tests/Performance/client.dsp:
        * examples/PluggableUDP/tests/Performance/server.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/client.dsp:
        * examples/PluggableUDP/tests/SimplePerformance/server.dsp:

          Fixed settings for Release versions. Thanks to Bala
          for pointing that out.

Tue Apr 17 22:33:42 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/RTCORBA/Thread_Pool/server.cpp (main): Changed FALSE to 0.

        * tests/RTCORBA/Thread_Pool/Makefile (BIN_UNCHECKED): Targets
          should be labeled as BIN_UNCHECKED rather than BIN.

Tue Apr 17 22:09:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/TypeCode_Creation/TypeCode_Creation.dsp:

          Fixed settings in the release version.

Tue Apr 17 21:59:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/BiDirectional/client.dsp:
        * tests/BiDirectional/server.dsp: Fixed the release builds.

Tue Apr 17 21:21:06 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tests/Collocation/Coll_Tester.cpp:
        * tests/Collocation/Coll_Tester.h: Added shutdown method to
          destroy the RootPOA and the ORB.  The lack of it was causing the
          test to crash.

        * tests/Collocation/Collocation.dsw: Redefined project
          dependencies.

        * tests/Collocation/Makefile.test:
        * tests/Collocation/Collocation.cpp:
        * tests/Collocation/main.cpp:
        * tests/Collocation/Collocation.dsp: Renamed <main.cpp> to
          <Collocation.cpp> so that both Win32 and UNIX build the same
          executable.

          Thanks to Carlos for pointing them out.

Tue Apr 17 15:48:20 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp (handle_close):
        * tao/Strategies/UIOP_Connection_Handler.cpp (handle_close):
        * tao/Strategies/SHMIOP_Connection_Handler.cpp (handle_close): The
          handle_close methods were not closing these Svc_Handler's down
          properly.  Removed "this->peer ()->close ()" calls and use
          "this->destroy () instead of calling "delete this."

Tue Apr 17 15:43:45 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * examples/POA/TIE/client.dsp: Removed FooS.* from project.

Tue Apr 17 13:03:49 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/Transport.h (TAO_Synch_Refcountable): Reworked this so that
        the lock can be specified in the constructor.  This permits an
        optimization for single-threaded versions of the ORB so they can
        use a null lock implementation if desired and thus achieve better
        performance.  [Bug 861]

        * tao/Transport.cpp: Updated various methods to take advantage of
        the optimization outlined above.  Specifically, the TAO_Transport
        constructor now initializes its TAO_Synch_Refcountable's lock
        using the resource factory's create_cached_connection_lock(), just
        like TAO_Transport's handler_lock_ and the connection cache lock.
        Thanks to Joe Hoffert <joeh@cs.wustl.edu> and Bala
        <bala@cs.wustl.edu> for pointing out this opportunity and testing
        it via Quantify. [Bug 861]

Tue Apr 17 12:19:32 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Property/CosPropertyService_i.cpp:

          Modified code that used != to compare two typecodes
          to use TypeCode::equal(). Also added TypeCode_vars
          to contain the results of CORBA::Any::type(). Thanks
          to Max Voronoy <m.voronoy@telesens.com.ua> for
          reporting the != bug.

Tue Apr 17 08:34:27 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * tests/OctetSeq/run_test1.pl:
        * tests/OctetSeq/run_test2.pl:
          Use unique test1.ior and test2.ior for each test.
          Common ior file name was failing these tests on some platforms.

Tue Apr 17 07:26:47 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Thread_Pool.cpp: Fixed a warning in TRU64 builds.

Tue Apr 17 07:23:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * examples/POA/Default_Servant/*.bor
          Added BCB makefiles for this test

Mon Apr 16 16:45:19 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/RTCORBA/Client_Protocol/client.cpp:
          This test was printing a misleading error message.
          The problem has now been fixed.

Mon Apr 16 13:34:31 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * examples/PluggableUDP/DIOP/README: Generalize this a bit so that
          it fits in better with the ACE+TAO context.

Mon Apr 16 13:13:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * docs/releasenotes/index.html:
        * examples/PluggableUDP/DIOP/README:

          Updated documentation about the UDP based pluggable protocol.

Mon Apr 16 09:49:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * performance-tests/Latency/Makefile:
        * tests/DSI_Gateway/Makefile:
        * tests/Param_Test/Makefile:
          More missing libraries for QNX

Mon Apr 16 02:15:49 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tao/Domain/Makefile.bor:
        * tao/IFR_Client/Makefile.bor:
        * tao/IORManipulation/Makefile.bor:
        * tao/IORTable/Makefile.bor:
        * tao/SmartProxies/Makefile.bor:
          Fixed definitions of INCDIR_NAME to use backslash, as
          forward slash is interpreted as an option by copy on Win32.

Sun Apr 15 17:16:33 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/MT_Timeout/Client_Task.cpp (one_iteration):
          Relaxed the conditions to accept the elapsed time of each
          request.  Now we accept up to 30 milliseconds over the expected
          time as valid.

Sun Apr 15 15:31:00 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Modify_QoS/receiver.cpp:

          Fixed Fuzz error.

Sun Apr 15 14:03:00 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/input:

          Added a new input file as the older one was too short to test
          all the different use cases in the run_test.pl. This was breaking
          the test on all platforms.

Sun Apr 15 12:13:00 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Removed unused method definitions which were breaking builds.

Sat Apr 14 23:57:01 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
          Reverted changes, they would not compile on any platform.

Sat Apr 14 23:00:00 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Modify_QoS/Makefile:
        * orbsvcs/tests/AVStreams/Modify_QoS/Modify_QoS.dsw:
        * orbsvcs/tests/AVStreams/Modify_QoS/run_test.pl:
        * orbsvcs/tests/AVStreams/Modify_QoS/input:
        * orbsvcs/tests/AVStreams/Modify_QoS/receiver.h:
        * orbsvcs/tests/AVStreams/Modify_QoS/receiver.cpp:
        * orbsvcs/tests/AVStreams/Modify_QoS/receiver.dsp:
        * orbsvcs/tests/AVStreams/Modify_QoS/sender.h:
        * orbsvcs/tests/AVStreams/Modify_QoS/sender.cpp:
        * orbsvcs/tests/AVStreams/Modify_QoS/sender.dsp:

          Added a new test Modify_QoS to demonstrate how the qos of
          the flows can be changed during run-time.

Sat Apr 14 19:31:56 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Added modify_qos support to enable modifying the qos of the individual flows during run time.

Fri Apr 13 16:41:56 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Thread_Pool.cpp:
          More missing template instantiations, this time for builds with
          inline=0

Fri Apr 13 16:09:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Thread_Pool.cpp:
          Add enough template instantiations as to get gcc-2.95.2 happy
          with inlining.  More templates will be required later, but this
          will allow people to make progress.

Fri Apr 13 12:33:21 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/releasenotes/index.html: Updated the release notes.

Fri Apr 13 11:14:46 2001  Yamuna Krishnamurthy  <yamuna@ace.cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/run_test.pl:

          Added a timed orb->run () to prevent the sender from shutting
          down before the distributer connected to it. This should
          fix the breaking of the test on many platforms.


Fri Apr 13 10:50:46 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_union_branch/public_ci.cpp:

          Generation of set method for explicit default case had
          been overlooked for the member types interface, enum,
          and array. The typecode creation example uses an
          interface as the default member, and so uncovered this
          oversight. Also made cosmetic changes to source code
          and to generated code for the entire file.

Fri Apr 13 10:49:36 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/IORManipulation/IORTest.cpp: Fixed a small problem that
          was showing up in the builds as test failures. The test used the
          name of a machine "acme.cs.wustl.edu" for creating IOR's. Looks
          like the machine has been removed from the network. The creation
          of IOR's failed and hence the test.

Fri Apr 13 2:15:04 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:

          Fixed compile errors on solaris.

Thu Apr 12 23:46:04 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/Thread_Pool: Added classes to handle the creation of thread
          pools in TAO:

          - TAO_Thread_Pool_Threads: Class representing a thread running
            in a thread lane.

          - TAO_Thread_Lane: Class representing the thread lane inside a
            thread pool.

          - TAO_Thread_Pool: Class representing the thread pool inside a
            thread pool manager.

          - TAO_Thread_Pool_Manager: Class for managing thread pools.

        * tests/RTCORBA/Thread_Pool: New test for creating and using
          thread-pools in a MT server.

        * tao/RT_ORB.h: The RT_ORB now has a TAO_Thread_Pool_Manager class
          to create and manage thread pools.  All thread pool related
          methods are forwarded to TAO_Thread_Pool_Manager.

        * tao/ORB_Core: Because the RT_ORB now holds a pointer to its
          creating ORB, the RT members of ORB_Core had to be rearranged such
          that <rt_orb_> is before <orb_>.

        * tao/RT_ORB_Loader.cpp (create_object): RT_ORB constructor
          now requires that the orb reference be passed in.

        * File updates for new thread pool code and test:

          - tao/Makefile
          - tao/Makefile.bor
          - tao/TAO.dsp
          - tao/TAO_Static.dsp
          - tests/RTCORBA/README
          - tests/RTCORBA/Makefile
          - tests/RTCORBA/Makefile.bor
          - tests/RTCORBA/RTCORBA_tests.dsw
          - $ACE_ROOT/bin/auto_run_tests.lst

Thu Apr 12 20:16:59 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Blocking_Sync_None/Blocking_Sync_None.dsw:
        * tests/Blocking_Sync_None/client.dsp:
        * tests/Blocking_Sync_None/server.dsp:
          More MSVC project files

Thu Apr 12 15:51:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Oneway_Buffering/Oneway_Buffering.dsw:
        * tests/Oneway_Buffering/admin.dsp:
        * tests/Oneway_Buffering/client.dsp:
        * tests/Oneway_Buffering/server.dsp:
          Add project files for MSVC

        * tests/Oneway_Buffering/Test.idl:
          Made shutdown() operations reliable, a oneway shutdown operation
          is inadequate for this application, because they can be
          buffered.

        * tests/Oneway_Buffering/client.cpp:
          Fixed stupid typos.

Thu Apr 12 17:04:56 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB.h (CORBA_ORB): Added a comment around destroy () for a
          possible case that is not supported in TAO.

Thu Apr 12 16:55:36 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.cpp (close_connection): Fixed a problem where the
          reactor could be left with dangling references to the event
          handler.  This showed up from tests in
          $TAO_ROOT/tests/Reliable_Oneways. The source of the problem was
          that the client ORB while detecting a bad server closes the
          connection -- and hence the service handler for that connection
          by using handle_close (). As the reactor outlives the handler,
          the reactor happens to have the reference. When the ORB
          shutsdown, the reactor while trying to access the handler seg
          faults. Thanks to Chris Cleeland and Carlos O'Ryan for
          participating in the discussion for the right fix.

Thu Apr 12 13:54:10 2001  Joe Hoffert  <joeh@cs.wustl.edu>

        * performance-tests/Latency/test_i.cpp:
        * performance-tests/Latency/st_server.cpp:
        * performance-tests/Latency/st_client.cpp:
          Added Quantify hooks

        * performance-tests/Cubit/TAO/IDL_Cubit/svc.conf:
        * performance-tests/Latency/st_server.conf:
        * performance-tests/Latency/st_client.conf:
          Moved "-ORBConnectionCacheLock null" from the default
          Resource_Factory to the Advanced_Resource_Factory.
          This was creating a mutex for a single-threaded app.
          There should never be both in a configuration file
          since the Advanced Resource Factory subsumes all the
          options of the default Resource Factory

Thu Apr 12 12:22:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/README:
        * tests/Oneway_Buffering/README:
        * tests/Oneway_Buffering/Makefile:
        * tests/Oneway_Buffering/Makefile.bor:
        * tests/Oneway_Buffering/admin.bor:
        * tests/Oneway_Buffering/client.bor:
        * tests/Oneway_Buffering/server.bor:
        * tests/Oneway_Buffering/run_buffer_size.pl:
        * tests/Oneway_Buffering/run_message_count.pl:
        * tests/Oneway_Buffering/run_test.pl:
        * tests/Oneway_Buffering/run_timeout.pl:
        * tests/Oneway_Buffering/Test.idl:
        * tests/Oneway_Buffering/Oneway_Buffering.h:
        * tests/Oneway_Buffering/Oneway_Buffering.cpp:
        * tests/Oneway_Buffering/Oneway_Buffering_Admin.h:
        * tests/Oneway_Buffering/Oneway_Buffering_Admin.cpp:
        * tests/Oneway_Buffering/admin.cpp:
        * tests/Oneway_Buffering/client.cpp:
        * tests/Oneway_Buffering/server.cpp:
          New test for oneway buffering.  Verify that buffers are not
          flushed before the constraints are reached, and that they are
          indeed flushed shortly after that.

        * tests/Reliable_Oneways/client.cpp:
          Use Messaging.h instead of MessagingC.h, a convention for
          CORBA-related namespaces is starting to appear: for each
          namespace an include file with the same name.

Thu Apr 12 12:07:05 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo.cpp (request_id):
        * tao/PortableServer/ServerRequestInfo.cpp (request_id):

          reinterpret_cast to an "unsigned long" instead of CORBA::ULong
          since we need to first cast to an integer large enough to hold
          an address to avoid compile-time warnings on some 64-bit
          platforms.

Thu Apr 12 09:00:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

    * examples/PluggableUDP/tests/SimplePerformance/client.cpp:
    * examples/PluggableUDP/tests/SimplePerformance/server.cpp:
    * examples/PluggableUDP/tests/SimplePerformance/test_i.cpp:

      Fixed some minor compiler warnings.

Thu Apr 12 08:33:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

    * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:

      Fixed memory leak, caused by not deleted connection handlers.

Thu Apr 12 06:50:00 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/tests/SimplePerformance/server.cpp:
        * examples/PluggableUDP/tests/SimplePerformance/test_i.cpp: Fixed
          warnings with g++ builds.

Wed Apr 11 19:33:41 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/tests/SimplePerformance/server.cpp:
        * examples/PluggableUDP/tests/SimplePerformance/client.cpp: Fixed
          warnings  with g++ builds.

Wed Apr 11 18:15:58 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/BiDir_Adapter.cpp: Fixed a typo. Thanks to Frank for
          pointing this out.

Wed Apr 11 16:32:33 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/tests/SimplePerformance/Makefile: Added
          proper libs for linking.

Wed Apr 11 16:21:09 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp: Fixed template
          instantiations.

Wed Apr 11 09:57:41 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/README:
        * tests/Blocking_Sync_None/README:
        * tests/Blocking_Sync_None/Makefile:
        * tests/Blocking_Sync_None/Makefile.bor:
        * tests/Blocking_Sync_None/client.bor:
        * tests/Blocking_Sync_None/server.bor:
        * tests/Blocking_Sync_None/run_test.pl:
        * tests/Blocking_Sync_None/Test.idl:
        * tests/Blocking_Sync_None/Blocking_Sync_None.h:
        * tests/Blocking_Sync_None/Blocking_Sync_None.cpp:
        * tests/Blocking_Sync_None/client.cpp:
        * tests/Blocking_Sync_None/server.cpp:
          Add new regression test for [BUGID:858], the test fails if a
          SYNC_NONE operation blocks.

Wed Apr 11 08:44:35 2001  Ossama Othman  <ossama@uci.edu>

        * tao/GIOP_Message_Base.cpp (dump_msg):

          Added missing comma in array of message type names.  Previously
          "MessageError" and "Fragment" were merged.

          Corrected format specifier for the request/reply ID in the dump
          message.  The request/reply ID is an unsigned long, so use the
          "%u" format specifier, not the "%d" int format specifier.

Wed Apr 11 07:40:10 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Reliable_Oneways/client.cpp: Added a #include to get rid
          of compile errors on builds with no Interceptors support.

Wed Apr 11 07:38:45 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/examples/POA/Generic_Servant/client.bor
        * tao/examples/POA/Generic_Servant/generic_servant.bor
          Added BCB makefiles which I forgot to commit yesterday

Tue Apr 10 22:35:25 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Wait_Strategy.inl: Fixed a fuzz error.

Tue Apr 10 22:27:49 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/PortableServer/Servant_Base.cpp (synchronous_upcall_dispatch):

          Added a check before sending an exception reply, the same as
          the check made before sending the regular reply. The Reliable
          Oneways test showed that an exception thrown in the
          implementation was bypassing the SYNC_WITH_SERVER and other
          oneway logic that was in place for regular replies.

Tue Apr 10 19:42:11 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Messaging_ORBInitializer.h:
        * tao/Messaging_ORBInitializer.cpp:
        * tao/Messaging_PolicyFactory.h:

          The Messaging policy factory is stateless and reentrant, so
          share a single instance between all ORBs.

Tue Apr 10 19:18:12 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/Naming_Service/Makefile:
        * orbsvcs/tests/CosEvent/lib/Makefile:
          Fixed LDLIBS to make the appease the QNX gods.

        * tests/Crash_On_Write/README:
          Documented another bug that can be reproduced using this test

        * tests/Hello/client.cpp:
          Fixed error message.

Tue Apr 10 20:47:38 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Wait_Strategy.h:
        * tao/Wait_Strategy.cpp:
        * tao/Wait_Strategy.inl: Added a flag is_registered_. This flag
          indicates whether the connection handler that created this
          object through the transport has been registered with the
          reactor or not.

        * tao/Wait_On_Reactor.cpp:
        * tao/Wait_On_Leader_Follower.cpp: Make a check
          to see whether the connection handler has been registered with
          the reactor before going ahead and calling the register_handler
          (). This should remove a lock along the critical path.

        * tao/IIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Set the flag in
          the wait strategy before registering the handler with reactor.

Tue Apr 10 19:57:38 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * tao/OctetSeqC.cpp:
          Corrected the >> operator logic for the case in which the ORB
          core is absent in the CDR Stream.
          Thanks to Carlos for spotting this problem.

Tue Apr 10 17:21:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/Object_Adapter.cpp:
          Made the TAO_Object_Adapter::close() method atomic (and
          nilpotent), there was no synchronization on it.
          Before using the root_ field make sure that it is not nil.
          This takes care of [BUGID:855]

Tue Apr 10 16:19:39 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Reliable_Oneways/Reliable_Oneways.dsw:
        * tests/Reliable_Oneways/client.dsp:
        * tests/Reliable_Oneways/server.dsp:
          Add MSVC project files

Tue Apr 10 17:25:18 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
        * tao/default_resource.cpp:
        * tao/default_resource.h:
        * tao/Strategies/advanced_resource.cpp:
        * tao/Strategies/advanced_resource.h:
          Added an accessor method "input_cdr_allocator_type_locked
          (void);" to return the type of allocator used for CDR input steams.
          Once the type is known, we can safely turn on lock free
          allocators as the default.

        * tao/OctetSeqC.cpp:
          Modified the >> operator to perform zero copy octet
          optimization, only if the input CDR uses a locked allocator.

        * tests/OctetSeq/run_test1.pl:
        * tests/OctetSeq/run_test2.pl:
          Added 2 configurations to test the change to OctetSeqC
        * tests/OctetSeq/svc1.conf:
        * tests/OctetSeq/svc2.conf:
          svc1.conf uses global resources and a null InputCDRAllocator.
          svc2.conf uses tss resources and a null InputCDRAllocator.
          note that the default is global, locked InputCDRAllocator.

Tue Apr 10 16:35:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:

          Removed old, unnecessary explicit template instantiations.

Tue Apr 10 14:27:57 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Invocation.h (generate_request_id):
        * tao/Invocation.cpp (generate_request_id, start):
        * tao/Asynch_Invocation.h (generate_request_id):
        * tao/Asynch_Invocation.h (generate_request_id:

          Backed out the zero-lock request ID optimization.  It causes
          improper behavior in the presence of timeouts.

        * tao/ClientRequestInfo.cpp (request_id):

          Moved the request ID optimization from above into this method
          since it also provides a more unique request ID in the case of
          interceptors.  Note that the request ID in the case of
          interceptors need not be the same as the GIOP request ID [Bug 826].

Tue Apr 10 13:49:16 2001  Ossama Othman  <ossama@uci.edu>

        * examples/PluggableUDP/tests/Makefile:

          Fixed source list so that it actually contains valid filenames.

        * examples/PluggableUDP/tests/Performance/UDP_i.h:

          Fixed NT-ism where backslash was used in include directive
          instead of a forward slash.  Fixes compile problems on
          non-Windows platforms.

        * examples/PluggableUDP/tests/*/Makefile:

          Updated dependencies.

Tue Apr 10 12:37:38 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Profile.cpp (verify_orb_configuration):

          If the ORB is configured to use URL style IORs then throw an
          exception since tagged components cannot be embedded in a URL
          style IOR.

Tue Apr 10 12:14:44 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.cpp (_tao_get_omg_exception_description):

          Added missing comma in BAD_PARAM minor code description table.
          This fixes a problem where the wrong description was returned.

        * tao/IIOP_Profile.cpp (to_string):
        * tao/Strategies/SHMIOP_Profile.cpp (to_string):
        * tao/Strategies/UIOP_Profile.cpp (to_string):

          Fixed code that was inadvertently committed.  URL style
          (corbaloc) IORs are once again properly generated.

Tue Apr 10 13:55:27 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Fixed incorrect directory in RCSID.

        * tao/TypeCodeFactory/TypeCodeFactory.dsp:

          Fixed setting for release version.

Tue Apr 10 11:25:14 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptor.cpp:

          Removed vestigial ACE_INLINE macros.  This fixes link errors on
          builds with inlining enabled.

Tue Apr 10 11:08:03 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Connection_Handler.cpp (open):
          Workaround what appears to be a bug in the Linux TCP/IP stack.
          Here is the scenario: a server starts on a kernel selected port,
          a client makes oneway requests to this server, eventually the
          server shutdown or crashes, but the client continues to make
          requests.
          Now, suppose the port selected for the server was 12345, the
          local address for the client sockets are also randomly selected,
          but if you keep trying to make requests eventually the client
          will select 12345 as its *local* port.
          Here is were things get weird: the kernel will connect() that
          port successfully!  There is no server *listening* on that port,
          it just happens that the local address and the destination
          address are the same.
          That's clearly wrong, to reproduce the problem run the
          Reliable_Oneways test with a *lot* of iterations and
          -ORBDebugLevel 1, for example:
              $ server &
              $ client -n -i 50000 -ORBDebugLevel 1
          the change I'm commiting now will detect the weird problem and
          print out a message.

Tue Apr 10 11:05:22 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Sequence.i:

          Backed out the optimized growth change.  It is apparently more
          controversial than I thought since it takes control of sequence
          growth away from the user.

Tue Apr 10 11:03:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/README:
        * tests/Reliable_Oneways/README:
        * tests/Reliable_Oneways/Makefile:
        * tests/Reliable_Oneways/Makefile.bor:
        * tests/Reliable_Oneways/client.bor:
        * tests/Reliable_Oneways/server.bor:
        * tests/Reliable_Oneways/run_test.pl:
        * tests/Reliable_Oneways/run_sync_none.pl:
        * tests/Reliable_Oneways/run_sync_with_server.pl:
        * tests/Reliable_Oneways/run_sync_with_target.pl:
        * tests/Reliable_Oneways/run_sync_with_transport.pl:
        * tests/Reliable_Oneways/Test.idl:
        * tests/Reliable_Oneways/Oneway_Receiver.h:
        * tests/Reliable_Oneways/Oneway_Receiver.cpp:
        * tests/Reliable_Oneways/Shutdown_Helper.h:
        * tests/Reliable_Oneways/Shutdown_Helper.cpp:
        * tests/Reliable_Oneways/client.cpp:
        * tests/Reliable_Oneways/server.cpp:
          New regression test for reliable oneways.  It is based on the
          fact that different SyncScope policies can detect only some
          errors, and not others.
          The test is not very reliable for SYNC_NONE and SYNC_TRANSPORT,
          but it is a good start.

Tue Apr 10 10:53:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/MT_Timeout/client.cpp:
        * tests/MT_Timeout/server.cpp:
        * tests/MT_Timeout/Sleep_Service.cpp:
          Improve debugging messages, and force the client to get back in
          sync with the server before attempting a shutdown.

Tue Apr 10 10:45:26 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptor.i (send_request, receive_reply,
          receive_other, receive_exception,
          receive_request_service_contexts, receive_request, send_reply,
          send_other, send_exception):

          Moved these interception points to the
          `PortableInterceptor.cpp'.  They were too big to be inlined, so
          there was no point in leaving them in this inline source file.

          (receive_exception, send_exception):

          Fixed problem where the remaining interceptors in the flow stack
          were not invoked if an exception was thrown from either of these
          interception points.

        * tao/IIOP_Transport.cpp (get_listen_point):

          Use CORBA::String_var to improve exception safety, and simplify
          the code.

          Improved performance of this method by comparing the numerical
          forms of the IP addresses for equality rather than the
          stringified IP addresses or hostnames.  This saves the cost of a
          strcmp().

          Another performance improvement: don't bother creating a
          temporary IIOP::ListenPoint and then copying it to the
          IIOP::ListenPointList.  Just use the one that was already
          created in the IIOP::ListenPointList.

          Fixed busted code that casted away the const-ness of the
          pointer to the INET_Addr array in the IIOP_Acceptor so that it
          could be used as a temporary (modifiable!) variable.  Since a
          temporary INET_Addr was needed, just create one rather than
          butchering what is supposed to be an immutable set of
          INET_Addrs.

          (send):

          Use the peer's send_n() method instead of ACE::send_n().  This
          is makes it clearer to pluggable protocol implementors that
          ACE::send_n() should not always be used to when implementing
          this method.  For example, SSLIOP doesn't use ACE::send_n()
          since the data being sent must be encrypted.

        * tao/Invocation.h:
        * tao/Invocation.cpp (generate_request_id):

          New method for generating request IDs.  It generates a request
          ID based on the address of the TAO_GIOP_Invocation object.  The
          address is guaranteed to be unique within the process.  This
          makes it possible to generate a request ID without acquiring a
          lock, which in turn allows to remove a lock from the critical
          path.  Neat, huh? :-)  Things are slightly more complicated on
          platforms with 64-bit addresses.  On those platforms, we do some
          bit manipulation and extract a 32-bit value from that address.
          If all else fails, we fall back on the traditional request ID
          generator that increments a CORBA::ULong atomically (i.e. by
          acquiring a lock).  [Bug 826]

          (start):

          Obtain a request ID from the new generate_request_id() method.

        * tao/operation_details.h:

          Cosmetic update.

        * tao/operation_details.i (modify_request_id):

          Do not adjust even-ness or odd-ness of the request ID by first
          multiplying by two.  It is not safe to do that since the request
          ID may have been based on the address of the TAO_GIOP_Invocation
          object (due to the above changes).  In fact, it wasn't really
          safe to multiply by two before the request ID optimization since
          doing so may actually cause another outstanding request ID to be
          re-used.  Simply incrementing by one when appropriate is safer.

        * tao/Asynch_Invocation.h:
        * tao/Asynch_Invocation.cpp (generate_request_id):

          Generate a request ID based on the address of the
          TAO_Asynch_Reply_Dispatcher object.  This is basically the same
          optimization used in TAO_GIOP_Invocation.  However, in the case
          of AMI we need to used the TAO_Asynch_Reply_Dispatcher object
          since it exists for the duration of the request, whereas the
          Invocation object doesn't.

        * tao/Sequence.i (length):

          Optimized unbounded sequence growth.  The internal buffer (hence
          the maximum) now generally grows to twice the amount of the
          previous maximum unless the desired length is larger than that
          (doubled) value.  The number of allocations and copies for large
          numbers of small sequence length increases has been reduced
          significantly by this optimization.  For example, 8 sequence
          length increases of 1 previously caused 8 allocations to occur
          and 28 copies.  The new scheme reduces those numbers to 4
          allocations and 7 copies.  This change should make insertion
          constant on the average (similar to an STL vector).  [Bug 757]

        * tao/PortableServer/ServerRequestInfo.cpp (request_id):

          Generate a request ID based on the address of the
          TAO_ServerRequest object.  The request ID generated by this
          method need not be the same as the GIOP request ID sent with the
          request.  It just needs to be unique within a given process.
          This is the same trick used in the TAO_GIOP_Invocation object
          described above.  [Bug 826]

        * tests/BiDirectional_NestedUpcall/BiDirectional_NestedUpcall.dsw:
        * tests/BiDirectional_NestedUpcall/client.dsp:
        * tests/BiDirectional_NestedUpcall/server.dsp:

          Added these missing MSVC C++ project files.

Tue Apr 10 12:13:48 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TAO_TypeCodeFactory_i.cpp:

          Removed unnecessary check for an unsigned >= 0.

        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_server.dsp:

          Added missing link to TAO_IFR_Client library in the release
          version.

Tue Apr 10 09:14:37 2001  Ossama Othman  <ossama@uci.edu>

        * configure.in:

          Temporarily removed this file.  It was a source of confusion for
          those attempting to use TAO's configure script support.
          Autoconf support in TAO has not been fully integrated.  Thanks
          to Stephen Torri <s.torri@lancaster.ac.uk> for motivating this.

Tue Apr 10 09:06:15 2001  Ossama Othman  <ossama@uci.edu>

        * examples/PluggableUDP/tests/Makefile:

          Somehow this Makefile was removed.  Installed a new one to
          correct Makefile recursion errors.

Tue Apr 10 08:42:11 2001  Ossama Othman  <ossama@uci.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connector.h:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Profile.h:
        * examples/PluggableUDP/DIOP/DIOP_Profile.cpp:

          Forgot to commit the profile constructor changes in these
          files.

Tue Apr 10 11:05:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * examples/POA/Adapter_Activator/makefile.bor
        * examples/POA/Generic_Servant/makefile.bor
        * examples/POA/Explicit_Activation/makefile.bor
        * examples/POA/On_Demand_Activation/makefile.bor
        * examples/POA/On_Demand_Loading/makefile.bor
        * examples/POA/Reference_Counted_Servant/makefile.bor
        * examples/POA/makefile.bor
          Created BCB makefiles

        * examples/POA/Adapter_Activator/readme
          Directory name to start client was not correct

Tue Apr 10 02:19:02 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/run_test.pl:
        * tests/RTCORBA/Banded_Connections/run_test.pl:
        * tests/RTCORBA/Client_Protocol/run_test.pl:
        * tests/RTCORBA/Explicit_Binding/run_test.pl:
        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl:
        * tests/RTCORBA/Server_Protocol/run_test.pl:
          Changed to use the nw <PerlACE::check_n_cleanup_files> so that
          we not only removed unwanted mmap files but also noticed that
          they are not being cleaned up.

Tue Apr 10 01:27:16 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Connection_Handler.cpp (handle_close): The
          SHMIOP cleanup code was mysteriously removed.  Added it back.

Tue Apr  10 07:58:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * performance-tests/latency/dii-client.bor
          Corrected name of executable so that perl scripts can find
          this client

Mon Apr  9 21:05:07 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAOACE.dsw:

          Even though the old TypeCodeFactory_DLL project had been
          removed, it was still hanging around in the dependencies.
          Removed it completely.

        * examples/TypeCode_Creation/main.cpp:
        * examples/TypeCode_Creation/test.idl:

          Extended the example to include a union with all the bells
          and whistles - multiple case labels, non-monotonic
          non-consecutive case labels, and a default case.

        * orbsvcs/IFR_Service/AttributeDef_i.cpp:
        * orbsvcs/IFR_Service/ConstantDef_i.cpp:
        * orbsvcs/IFR_Service/Contained_i.cpp:
        * orbsvcs/IFR_Service/Container_i.cpp:
        * orbsvcs/IFR_Service/ExceptionDef_i.cpp:
        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/OperationDef_i.cpp:
        * orbsvcs/IFR_Service/Repository_i.cpp:
        * orbsvcs/IFR_Service/UnionDef_i.cpp:

          Cosmetic changes.

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:

          Cosmetic changes plus a change to the dummy typecode
          member passed in StuctMembers and UnionMembers to create
          StructDefs, ExceptionDefs and UnionDefs in the IfR.
          I was using _tc_null, and the spec requires _tc_void.

        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:

          Changed some _tc_nulls to _tc_voids, as in the above item.

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_i.h:

          Added several validation checks for parameters passed into
          the typecode creation methods. The spec lists criteria for
          valid names, ids, member and content types, discriminator
          types, and default label types. It also requires that
          member names and label values be unique. There is a specific
          combination of exception and minor code to be thrown for
          the failure to meet each of these criteria. All that is in
          place now.

Mon Apr  9 18:20:22 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Makefile (DIRS)
        * tests/Portable_Interceptors/Makefile.bor (DIRS):

          Added the Request_Interceptor_Flow test directory to the list of
          directories to recurse into.

Mon Apr  9 18:17:14 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Profile.h (parse_string):
        * tao/Pluggable.h (make_profile):
        * tao/Pluggable.cpp (make_mprofile):
        * tao/IIOP_Connector.h (make_profile):
        * tao/IIOP_Connector.cpp (make_profile):
        * tao/IIOP_Profile.h (TAO_IIOP_Profile):
        * tao/IIOP_Profile.cpp (TAO_IIOP_Profile):
        * tao/Strategies/SHMIOP_Connector.cpp (make_profile):
        * tao/Strategies/SHMIOP_Connector.h (make_profile):
        * tao/Strategies/SHMIOP_Profile.cpp (TAO_SHMIOP_Profile):
        * tao/Strategies/SHMIOP_Profile.h (TAO_SHMIOP_Profile):
        * tao/Strategies/UIOP_Connector.cpp (make_profile):
        * tao/Strategies/UIOP_Connector.h (make_profile):
        * tao/Strategies/UIOP_Profile.cpp (TAO_UIOP_Profile):
        * tao/Strategies/UIOP_Profile.h (TAO_UIOP_Profile):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h (make_profile):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (make_profile):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.h (make_profile):
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp (make_profile):
        * tao/Strategies/UIOP_Profile.cpp (TAO_DIOP_Profile):
        * tao/Strategies/UIOP_Profile.h (TAO_DIOP_Profile):

          The endpoint string is no longer passed to Profile
          constructors.  Previously, this string was passed to the
          Profile's constructor at which point TAO_Profile::parse_string()
          was called from within that constructor.  However,
          parse_string() can throw an exception.  Since emulated
          exceptions cannot reproduce the semantics of throwing an
          exception within a constructor, it is a very bad idea to invoke
          such a method within a constructor.  TAO's pluggable protocol
          framework now invokes the parse_string() method directly.  This
          change has the added benefit of allowing the removal of one
          constructor.  There are way too many to begin with.

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_ORBInitializer.cpp:

          Fixed "better conversion" warnings.

        * tests/Portable_Interceptors/Request_Interceptor_Flow/client.cpp:

          Added missing type in constant declaration.

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Request_Interceptor.cpp:

          Added missing template instantiations.

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Makefile:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/client.bor:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/server.bor:

          Added missing Request_Interceptor.* source file to the list of
          files to compile and link into the binaries.

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Makefile.bor:

          Corrected comment.

Mon Apr  9 16:40:24 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORBInitInfo.h:

          Updated register_initial_reference() comment to better explain
          its behavior.

        * tao/ORBInitInfo.cpp (register_initial_reference):

          This method is only valid during pre_init(), i.e. only before
          TAO_ORB_Core::init() has been called.  The ORB Core starts out
          in the "shutdown" state, so checking if it is in that state
          would indicate that the ORB hasn't been initalized yet, at least
          partially, meaning that initial reference registration can
          proceed.

        * tao/ORB_Core.cpp (list_initial_references):

          Comment correction/update.

Mon Apr 09 16:02:31 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_ORBInitializer.h:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_Request_Interceptor.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Client_Request_Interceptor.h:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Makefile:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Makefile.bor:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/README:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Request_Interceptor.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Request_Interceptor.h:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Request_Interceptor_Flow.dsw:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_ORBInitializer.h:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_Request_Interceptor.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Server_Request_Interceptor.h:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/client.bor:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/client.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/client.dsp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/server.bor:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/server.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/server.dsp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/test.idl:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/test_i.cpp:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/test_i.h:

          New test that verifies request interceptor flow is correct under
          various canned scenarios.  These canned scenarios correspond to
          the ones described in the Portable Interceptor specification.
          Currently this test relies on visual inspection to determine if
          a problem exists, rather than automatically.

Mon Apr  9 17:38:16 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/TypeCode_Creation/TypeCode_Creation.dsp:

          Some settings got lost somehow - I must have goofed up the
          original checkin.

Mon Apr  9 16:25:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:

          Minor optical changes on debug messages.

        * examples/PluggableUDP/DIOP/DIOP_Connector.h:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:

          In the first implementation I used a really slow lookup
          of used client connection handlers based on strings, now
          I use the hash () method of the ACE_INET_Addr directly.

          Thanks to Carlos for giving me that hint - I knew there
          was a faster way than comparing strings ;-)

        * examples/PluggableUDP/DIOP/DIOP_Transport.h:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:

          Made use of the possiblity to set the initial size of the
          input CDR buffer. In combination with the single read strategy,
          which tries to read as much as the buffer can take, it is now
          possible to read a complete UDP packet on a single read without
          any hacks ;-) Thanks to Bala for allowing me to extend
          the constructors of GIOP_Message_Base et al.

        * examples/PluggableUDP/tests/Basic:
        * examples/PluggableUDP/tests/Performance:
        * examples/PluggableUDP/tests/SimplePerformance:

          Moved the already existing test into the Basic directory,
          and added two new tests for DIOP. "Simple Performance" tests
          only a single client server oneway invocations.
          "Performance" tests for end-to-end (client-server-client)
          oneway performance.

        * examples/PluggableUDP/DIOP/TAO_DIOP.dsw:
        * examples/PluggableUDP/tests/UDP.dsw:

          Added the new tests.

Mon Apr  9 15:45:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.h:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.cpp:

          Added a new parameter to the constructor. This parameter can
          be used to set the underlying input CDR stream buffer size.
          As the transport instantiates these classes, the input CDR
          buffer size can be controlled this way. The parameter
          has a default value of ACE_CDR::DEFAULT_BUFSIZE.
          GIOP_Message_Base forwards this parameter to GIOP_Message_Handler,
          which is reponsible for the input CDR strream, this triggered
          the change in GIOP_Message_Handler.

Mon Apr  9 14:52:07 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * orbsvcs/orbsvcs/Event/EC_Basic_Filter_Builder.h:
        * orbsvcs/orbsvcs/Event/EC_Basic_Filter_Builder.cpp:

          Improve the basic (default) filter builder so that it
          works with logical AND and bitmask filters.  Note that
          the nesting of filters in the basic filter builder is
          still limited, but this allows more of the "new" filters
          to be used with this builder.

          I tested this by running the Complex and Bitmask tests
          from orbsvcs/tests/Event/Basic using the -ECFiltering basic
          option.

Mon Apr  9 13:54:15 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/TAO_IFR_Client_Static.dsp:

          Updated list of project's included files.

Mon Apr 09 09:24:54 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/Naming_Service/Makefile:
        * examples/PluggableUDP/tests/Makefile:
          Remove duplicate libraries that were causing warnings on KCC
          builds.

Mon Apr  9 07:13:37 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/POA/Loader/Server_Manager.cpp: Fixed warnings with g++.

Mon Apr  9 06:54:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp : Was aligning a buffer that was
          used for supplementary purposes. This alignment was not
          needed. Thanks to Chris Kolhloff for poiting this out.

Mon Apr  9 09:22:12 2001  Johnny Willemsen <jwillemsen@remedy>

        * orbsvcs/tests/property/*.bor
          Added BCB makefiles

Sun Apr  8 20:55:38 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/POA/Loader/Server_Manager.cpp: Fixed a typo.

2001-04-08  Yamuna Krishnamurthy  <yamuna@macumbo.cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.h:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.h:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.h:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/distributor.h:
        * orbsvcs/tests/AVStreams/Component_Switching/distributor.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/README:

          Added the sender switching capability.

Sun Apr  8 08:27:05 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * examples/POA/Forwarding/server.cpp,
        * examples/POA/Loader/Server_Manager.cpp,
        * examples/POA/On_Demand_Activation/server.cpp,
        * examples/POA/On_Demand_Loading/Server_Manager.cpp:
          Added comments these examples to point out why we don't need to
          activate the servant managers since TAO supports the CORBA 3.0
          semantics.  Thanks to Jules Colding <dsl11814@vip.cybercity.dk>
          for noticing this.

        * tao/GIOP_Message_Base.cpp: Fixed minor formatting
          inconsistencies.

Sat Apr 07 20:07:43 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Crash_On_Write/Crash_On_Write.dsw:
        * tests/Crash_On_Write/client.dsp:
        * tests/Crash_On_Write/server.dsp:
          Add the MSVC project files

Sat Apr  7 20:52:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp (close_connection):
          The ORB was dead-locking if the write() operation failed.
          To make a long story short: the invocation class called
          close_connection() that acquires the transport mutex, then
          called handle_close on its underlying event handler, that turned
          around and tried to call connection_handler_closing(), but that
          tries to acquire the mutex again.

        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/README:
        * tests/Crash_On_Write/README:
        * tests/Crash_On_Write/Makefile:
        * tests/Crash_On_Write/Makefile.bor:
        * tests/Crash_On_Write/client.bor:
        * tests/Crash_On_Write/server.bor:
        * tests/Crash_On_Write/run_test.pl:
        * tests/Crash_On_Write/Test.idl:
        * tests/Crash_On_Write/Crash_Task.h:
        * tests/Crash_On_Write/Crash_Task.cpp:
        * tests/Crash_On_Write/Oneway_Receiver.h:
        * tests/Crash_On_Write/Oneway_Receiver.cpp:
        * tests/Crash_On_Write/client.cpp:
        * tests/Crash_On_Write/server.cpp:
          New regression test to reproduce the previous problem.  The
          server crashes using abort() on a dedicated thread.
          Meanwhile the client is sending oneway calls to force a write()
          operation to fail. The test deadlocked when the server crashed.

Sat Apr  7 19:35:34 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
          Removed template instantiations that were no longer used.

Sat Apr  7 11:58:24 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/BiDirectional/client.dsp:
        * tests/BiDirectional/server.dsp: Fixed a link error.

Fri Apr  6 18:05:50 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/Leader_Follower.i:
          Reordered the function is_empty() to satisfy stupid VxWorks
          compiler.

Fri Apr  6 16:41:42 2001  Angelo Corsaro  <angelo@cs.wustl.edu>

        * tao/ORB_Core.cpp (collocation_strategy):
          In the case in which the POA had set the NON RETAIN policy the
          collocation optimization was not taking place, the problem was
          caused by the fact that we were testing for a non null servant.
          This bug has been now fixed, and collocation will work as
          expected even if the POA has the NON RETAIN policy set.
          Thanks to Peter Phillips<pphillip@home.com> for traking
          down the problem.

Fri Apr  6 17:08:24 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Single_Read/run_test.pl: Added this file to the
          repository. Strangely this file had missed our eyes for quite
          sometime.


Fri Apr  6 16:43:45 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Base.cpp: Cleaned up the code. The code was
          fixed when we observed problems with  BCB compiler. The code has
          now been cleaned so that it is now easier to read what is
          happening. One of the important things that was done during
          cleanup was to make sure that memory allocations came of the
          allocator and not from the heap.

Fri Apr  6 15:08:47 2001  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * performance-tests/Latency/ami-throughput-client.cpp:
        * tests/Param_Test/anyop.cpp:
        * tests/Param_Test/ulonglong.cpp:

          Changed these to correspond with the as_string() changes to
          ACE_U_LongLong.

Fri Apr  6 14:55:59 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS.h:

          Updated files corresponding to changes in generated code in

          Tue Apr  3 13:04:55 2001  Carlos O'Ryan  <coryan@uci.edu>
          and
          Tue Apr  3 10:54:29 2001  Carlos O'Ryan  <coryan@uci.edu>

Fri Apr  6 11:38:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/Options.cpp:

          If the debug level is set to zero, and the ImplRepo is
          run as an NT service when the registry keys specific to
          it are not defined, it will fail.  This is because I had
          included a return statement within a debugging if instead
          of outside of it.

          Thanks to Juergen Pfreundt <Juergen.Pfreundt@gft.com> for
          bringing this to our attention.

Fri Apr  6 10:43:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/RT_Endpoint_Selector_Factory.cpp:

          Added #include of Client_Priority_Policy.h. It's needed
          for this file and is not included in any other header
          file.

Fri Apr  6 10:30:32 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h: Missed in my last
          commit.

Fri Apr  6 10:12:10 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/TypeCode_Creation/Makefile:

          Disabled build for VxWorks GCC, since this build also
          leaves out the TypeCodeFactory and IFR_Client.

Fri Apr  6 08:29:44 2001  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * performance-tests/Latency/ami-throughput-client.cpp:
        * tests/Param_Test/anyop.cpp:
        * tests/Param_Test/ulonglong.cpp:
          Remove build warnings for platforms that don't support unsigned
          long long types.

Fri Apr  6 06:42:46 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Fixed stupid
          compile errors. My bad :(

Fri Apr  6 04:15:27 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/IORTable/IOR_Table_Impl.cpp:

          Released the lock in find_i before calling locate on the
          locator.  This fixes [Bug 777].  Add one point in the
          assists column for Carlos on this play.

Thu Apr  5 21:42:28 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Fixed a compile
          problem. The origin was a cut and paste error.

Thu Apr  5 21:38:56 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Sequence_T.cpp:

          Made a fix to the assignment operator in unbounded array
          sequences similar to the one made to generic unbounded
          sequences in

          Tue Feb 27 12:17:18 2001  Jeff Parsons <parsons@cs.wustl.edu>.

        * Sequence_T.i:

          Made fixes to the get_buffer method in generic unbounded
          sequences and unbounded array sequences similar to the
          change above. Thanks to Virgilijus Globis <virgis@megagis.lt>
          for pointing this out.

Thu Apr  5 18:35:23 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * examples/Simple/*/README: Changed the README files to
          replace the use of "client -o" to "client -f".  Thanks to Gautam
          Thaker <gthaker@atl.lmco.com> for reporting this.

Thu Apr  5 14:49:17 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/diffs/PolicyC.h.diff:
          Fixed the patch file to incorporate Bala's change.

Thu Apr  5 14:05:40 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/MT_Timeout/run_test.pl:
        * tests/MT_Timeout/client.cpp:
        * tests/MT_Timeout/server.cpp:
        * tests/MT_Timeout/Client_Task.cpp:
          Cleanup the test output

        * examples/Callback_Quoter/Notifier_Input_Handler.cpp:
        * orbsvcs/orbsvcs/Naming/Hash_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
        * orbsvcs/tests/Concurrency/CC_client.cpp:
          Fixed nagging fuzz errors.

Thu Apr  5 15:36:39 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PolicyC.h: Added a missing Environment.h. This should fix
          problems in  TRU64_XX builds and SunCC builds.

Thu Apr  5 13:50:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tao/Wait_On_Leader_Follower.cpp:

          Carlos and I worked on a fix for [Bug 842]. This involves
          electing a new leader if a follower got elected but
          concurrently also received a timeout. In such cases
          a dead-lock could occur, but this fix prevents it
          from happening, as the leaving follower elects a new
          leader, as itself cannot fulfill that role.

          Such situations are detected by the condition that
          a timeout occured, remove_follower fails and reply_received
          equals 0. This fix applies exactly in such situations.

Thu Apr  5 13:09:33 2001  Mayur Deshpande <mayur@ics.uci.edu>

        * docs/tutorials/Quoter/Simple/Impl-Repo/index.html:
          Added tao_imr path for windows platforms. Also added
          an extra ImplRepoService to $TAO_ROOT/orbsvcs/ImplRepo_Service
          path. Thanks to John Ashmun <John.ASHMUN@esca.com> for reporting
          this.

Thu Apr  5 14:44:26 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.h:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.h:

          Updated files corresponding to changes in generated code in

          Tue Apr  3 13:04:55 2001  Carlos O'Ryan  <coryan@uci.edu>
          and
          Tue Apr  3 10:54:29 2001  Carlos O'Ryan  <coryan@uci.edu>

Thu Apr  5 11:14:36 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/MessagingC.h:
        * tao/MessagingC.cpp:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingC.h.diff:
        * tao/diffs/MessagingS.cpp.diff:
          Some code was not protected by TAO_HAS_AMI_CALLBACK or
          TAO_HAS_AMI_POLLABLE, however, it could not compile in
          configurations missing both options.
          Luckily only the VxWorks build was failing due to this problem.

Thu Apr  5 12:22:33 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.h (TAO_Transport):
        * tao/Transport.cpp:
        * tao/Transport.inl:
          Changed the name of the methods send_request_header () and
          start_locate ()  as generate_request_header () and
          generate_locate_request (). Removed the method start_request
          (). This was not doing anything and was a dummy call. The
          methods generate_request_header () and generate_locate_request
          () are not virtual calls like their originals. They have now
          been moved to the TAO_Transport class. Added a virtual method
          messaging_object () that would return the underlyging messaging
          object to the TAO_Transport class.

          Removed the argument TAO_ORB_Core from the
          generate_locate_request () as the argument served no
          purpose. The reason it was still there seems to be more
          historical. The messaging_object that could be using it has a
          copy of the pointer to the TAO_ORB_Core.

          The above changes also address some of the comments left for me
          in the Transport classes.

        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
        * tao/Invocation.cpp:
        * tao/Asynch_Invocation.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Tranport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Tranport.h:
        * examples/PluggableUDP/DIOP/DIOP_Transport.h:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:

         Changes that were done as a result of the above changes.

Thu Apr  5 12:15:40 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_Endpoint_Selector_Factory.cpp:
        * tao/Endpoint_Selector_Factory.cpp:
          Fixed fuzz errors.

Thu Apr  5 11:30:33 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp: Fixed a nagging
          warning.

Thu Apr  5 11:04:52 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tao/RT_Endpoint_Selector_Factory.{cpp,h}:
        * tao/Endpoint_Selector_Factory.{cpp,h}:
          Refactored endpoint selector factory code into
          these new files as part of the RTCORBA subsetting
          project.

        * tao/Invocation_Endpoint_Selectors.{cpp,h,i}:
        * tao/RT_Invocation_Endpoint_Selectors.{cpp,h}:
          Moved almost all RT specific code from
          Invocation_Endpoint_Selectors.*

        * tao/ORB_Core.{cpp,h,i}:
          Moved endpoint selectors from ORB_Core to the
          factory objects.  Removed most RT endpoint selector
          code except for the initialization of the endpoint
          selector factory object.

        * tao/Invocation.{cpp,h,i}:
          Miscellaneous changes to work with the above
          refactorings.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/Makefile:
        * tao/Makefile.bor:
        * tao/Makefile.am:
          Added RT_Endpoint_Selector_Factory and
          Endpoint_Selector_Factory

        * tao/RTCORBA/README:
          Updated with selector changes

Thu Apr  5 10:16:26 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ORB.h:
        * tao/ORB.cpp:
        * examples/TypeCode_Creation/Makefile:

          Excluded the create_*_tc functions from minimum CORBA
          builds, and modified the example makefile accordingly.
          Thanks to Carlos for finding the spec's reference to
          these functions re minimum CORBA in a rather
          unexpected location.

        * tao/corbafwd.h:
        * tao/IFR_TypeCodes.cpp:

          Reverted change in previous entry. The typedef and typecode
          for ContextIdentifier weren't missing after all.

Thu Apr  5 09:31:26 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/corbafwd.h:
        * tao/IFR_TypeCodes.cpp:

          Added missing typedef and typecode for ContextIdentifier.

Thu Apr  5 09:40:11 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * examples/TypeCode_Creation/makefile.bor
        * tests/BiDirectional/*.bor
        * tests/BiDirectional_NestedUpCall/*.bor

          Changed makefiles to include the new TAO libraries

Wed Apr  4 16:11:46 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.h:
        * orbsvcs/ImplRepo_Service/Options.cpp:
        * orbsvcs/ImplRepo_Service/Options.h:

          Added a -l option to the ImplRepo_Service that
          specifies that the service is "locked" and the
          startup/service info cannot be changed. [Bug 666]

        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:

          Changed the return codes returned by tao_imr to be
          more specific based on the exception.

        * orbsvcs/tests/ImplRepo/locked/run_test.pl: (added)

          Test the locked option of the ImplRepo_Service.

        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:

          Found an error in this script in that the return
          values of tao_imr wasn't being checked correctly.

        * utils/NamingViewer/NamingViewer.dsp:

          Since it isn't really possible to compile this
          example with UNICODE defined, I hid it from the
          auto builds by changing the configuration names.

Wed Apr 04 13:37:43 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Security.dsp:
          Add missing dependencies, the generated code depends on the IDL
          compiler

Wed Apr  4 13:52:24 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/AMI/FL_Callback/Makefile:
          Update dependencies

        * orbsvcs/CosEvent_Service/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/LoadBalancing/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
          Fixed realclean rules, several files were not removed in a
          global realclean.

        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
          Fixed warnings about unused variables.

Wed Apr  4 14:54:54 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/Leader_Follower.h (TAO_Leader_Follower):

         Fixed a erroneous comment.

Wed Apr  4 13:43:50 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/AbstractInterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/AbstractInterfaceDef_i.h:
        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/InterfaceDef_i.h:
        * orbsvcs/IFR_Service/LocalInterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/LocalInterfaceDef_i.h:
        * orbsvcs/IFR_Service/ValueDef_i.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:

          Added some new behavior introduced in CORBA 2.4.2.

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/Repository_i.cpp:

          Cosmetic changes.

Wed Apr  4 12:58:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/Dump_Schedule/Dump_Schedule.cpp:
        * orbsvcs/tests/Sched_Conf/Sched_Conf.cpp:
        * orbsvcs/tests/Sched_Conf/Sched_Conf_Anomalies.cpp: Disable bogus
          fuzz errors.

Wed Apr 04 07:38:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/Object_Adapter.cpp:
          Disable bogus Fuzz errors.

Wed Apr  4 07:18:13 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Messaging.pidl:
        * tao/MessagingC.h:
        * tao/MessagingC.i:
        * tao/MessagingC.cpp:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/MessagingS.i:
        * tao/PortableServer/MessagingS.cpp:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/MessagingS_T.i:
        * tao/PortableServer/MessagingS_T.cpp:
        * tao/diffs/MessagingC.h.diff:
        * tao/diffs/MessagingC.i.diff:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingS.cpp.diff:
        * tao/diffs/MessagingS.h.diff:
        * tao/diffs/MessagingS_T.i.diff:
          Regenerate the code without smart proxies support, this should
          cleanup the Win32 builds.

Wed Apr  4 08:35:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/BiDir_Adapter.h:
        * tao/TypeCodeFactory_Adapter.h: Included Exception.h in place of
          corbafwd.h. Builds with exceptions=1 like Core builds on Redhat
          were complaining about incomplete type for
          CORBA::SystemException.

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i: Removed the #include of BiDir_Adapter.h from
          ORB_Core.h and moved it to ORB_Core.cpp. Forward declared that
          class in the .h file. Moved the method that is dependant on the
          include in .h file, from .i file to .cpp file -- basically
          uninlined that method. The method is not on the critical path
          and so shouldn't matter.

Wed Apr  4 08:05:48 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/Notify_Service/Notify_Service.cpp: Added a missing
          #include to fix compile error on Linux.

Wed Apr  4 07:49:02 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/BiDir_GIOP/BiDirPolicyC.cpp: Fixed a compile error by adding
          a #include.

Tue Apr  3 22:54:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/PolicyS.i:
        * tao/PortableServer/PolicyS_T.h:
        * tao/PortableServer/PolicyS_T.i:
        * tao/PortableServer/PolicyS_T.cpp:
          Add missing files, though empty it is simpler to keep them in
          the repo.

Tue Apr  3 20:56:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/DomainC.cpp:
        * tao/PolicyC.h:
        * tao/PolicyC.i:
        * tao/PolicyC.cpp:
        * tao/Domain/DomainS.h:
        * tao/Domain/DomainS.i:
        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS_T.h:
        * tao/Domain/DomainS_T.i:
        * tao/Domain/DomainS_T.cpp:
        * tao/PortableServer/PolicyS.h:
        * tao/PortableServer/PolicyS.cpp:
        * tao/diffs/PolicyC.h.diff:
        * tao/diffs/PolicyC.i.diff:
        * tao/diffs/PolicyC.cpp.diff:
        * tao/diffs/PolicyS.h.diff:
        * tao/diffs/PolicyS.i.diff:
        * tao/diffs/PolicyS.cpp.diff:
        * tao/diffs/PolicyS_T.h.diff:
        * tao/diffs/PolicyS_T.i.diff:
        * tao/diffs/PolicyS_T.cpp.diff:
        * tao/diffs/DomainC.cpp.diff:
        * tao/diffs/DomainC.h.diff:
        * tao/diffs/DomainC.i.diff:
        * tao/diffs/DomainS.cpp.diff:
        * tao/diffs/DomainS.h.diff:
        * tao/diffs/DomainS.i.diff:
        * tao/diffs/DomainS_T.cpp.diff:
        * tao/diffs/DomainS_T.h.diff:
        * tao/diffs/DomainS_T.i.diff:
          Regenerate Policy and Domain, the new versions support
          collocation and interceptors.

Tue Apr  3 21:14:36 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tao/Leader_Follower.{i,h,cpp}:
        * tao/Wait_On_Leader_Follower.cpp:

        Fixed Bug Id 721 (this time for real).

Tue Apr  3 18:23:36 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/examples/Security/Send_File/Makefile:
          Updated dependencies.

Tue Apr  3 18:16:04 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
          Updated dependencies.

Tue Apr  3 15:54:11 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/Notify_Service/Notify_Service.cpp (run): Don't printout
          startup messages unless the TAO_debug_level > 0.  Thanks to Mike
          Letchworth <mletchwo@cisco.com> for reporting this.

        * orbsvcs/Naming_Service/Naming_Service.h (class TAO_Naming_Service),
        * orbsvcs/Notify_Service/Notify_Service.h (class Notify_Service):
          Made some methods virtual so users can override them.  Thanks to
          Mike Letchworth <mletchwo@cisco.com> for reporting this.

Tue Apr 03 12:40:59 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/PortableServerC.cpp: Fixed fuzz warnings.

Tue Apr  3 13:04:55 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype.cpp:
          Another iteration in the process of moving the interceptors to
          the .cpp file.
          This time we remove the ACE_NESTED_CLASS() macros, because now
          the interceptors are always generated on a separate namespace.
          Eliminating the macros removed the need for a sub_state, and I
          was able to remove 1000 lines of code from the IDL compiler.

        * TAO_IDL/driver/drv_prepoc.cpp:
          Don't predefine IDL because this is a legal IDL identifier.
          Instead we predefine __TAO_IDL and set it to the current ACE
          version.  Thanks to Stelios Sfakianakis <ssfak@ics.forth.gr> for
          pointing out this problem.

Tue Apr  3 10:54:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/corba.h:
          Remove "tao/ClientRequestInfo.h" from the #included files,
          this file is no longer required in the generated code headers.

        * tao/ClientRequestInfo.h:
          Made a few helper methods public instead of protected or
          private.  We were generating 'friend' declarations for every
          class using them, so they were public for all practical
          purposes.
          I don't think any fears of 'accidental' missuse are well
          founded:  the application uses the base class
          (PortableInterceptors::ClientRequestInfo), so gaining access to
          those fields would require a downcast to a TAO proprietary
          interface, anybody doing that can go an step further too, and
          access the private fields anyway.

        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be/be_codegen.cpp:
          Add helper method to generate #include directive, removed a lot
          of duplicate code using that.
          Move the #includes related to interceptors from the header files
          to the .cpp files.

        * TAO_IDL/be/be_visitor_interface/interceptors_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
          Complete the change that moves interceptor helper classes
          (per-operation ClientRequestInfo and ServerRequestInfo) to the
          .cpp file.

Tue Apr  3 13:35:58 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/tests/Trading/Offer_Importer.cpp:
        * orbsvcs/tests/Trading/Offer_Exporter.cpp:
          Fixed fuzz warnings.

Tue Apr  3 13:06:02 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:

          Fixed fuzz warnings.

Tue Apr  3 12:23:55 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Sched_Conf/Sched_Conf_Runtime.cpp: Fixed a typo in
          ACE_TRY_ENV.

Tue Apr  3 12:21:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/LoadBalancing/Hash_Replica_i.cpp: Fuzz warnings.

Tue Apr  3 10:59:48 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TypeCodeFactory/Makefile:
        * tao/IFR_Client/Makefile: Made some cosmetic fixes.

Tue Apr  3 09:58:47 2001  Chanaka Liyanaarachchi  <chanaka@ociweb.com>

        * tao/IIOP_Acceptor.cpp:

          Added portspan option to parse_options method. This part had been
          left out by mistake from portspan changes. [Bug 817]

Tue Apr  3 09:50:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.h:

          Removed some dead code and made optical changes.

        * examples/PluggableUDP/DIOP/Transport.cpp:

          Added in send_i to check for the ACE_MAX_DGRAM_SIZE. If
          messages are larger than that, they are simply swallowed,
          nothing is sent. If we find a proper expection to throw,
          we can change that code to throw an exception.

          Also, left some comments for debugging, as they are currently
          needed to fix a bug.

Tue Apr  3 08:27:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/MT_Timeout/MT_Timeout.dsw:
        * tests/MT_Timeout/MT_Timeout_Server.dsp:
          Made some minor fixes.

Tue Apr  3 08:08:16 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IFR_Client/Makefile: Added guards for minimum corba. The IFR
          shouldn't be compiled for minimum corba.

Tue Apr  3 07:58:21 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
        * tests/InterOp-Naming/INS_test_client.cpp:
        * tests/MT_Timeout/Client_Task.cpp: Fixed minor compilation
          problems

Mon Apr  2 20:19:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_ss.h:
          Moved all the interceptor helper classes to the .cpp file.  This
          will speed up compilation just a tiny little bit, but more
          importantly, it will allow us to regenerate PolicyC.cpp without
          any cycles in the #include hierarchy.

        * tao/PortableServer/MessagingS.h:
        * tao/diffs/MessagingS.h.diff:
          Fixed another '#pragma pop', but this one was only a problem on
          Borland with messaging disabled!  If Jeff hadn't spot this
          visually we would have never caugh the problem.

        * examples/Persistent_Grid/Simple_util.cpp:
        * examples/Persistent_Grid/server.cpp:
        * examples/Simple/chat/server.cpp:
        * performance-tests/Pluggable/PP_Test_Client.cpp:
          Fixed minor compilation problems.

Mon Apr  2 22:13:16 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * examples/Log/test/BasicLog_Test.cpp:
        * examples/Notify/Subscribe/Subscribe.cpp:
        * orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/Notify/Notify_Event_Map.cpp:
        * orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
        * orbsvcs/Notify/Notify_ProxySupplier_T.cpp:
        * orbsvcs/Notify/Notify_StructuredProxyPushConsumer_i.cpp:
          more fuzz fixes.


Mon Apr  2 21:32:20 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ORB.cpp:

          Added throw of CORBA::INTERNAL exception to the check
          for null instance of the service object in the
          create_*_tc methods. Thanks to Carlos for the suggestion.

        * examples/Makefile:

          Updated dependencies.

Mon Apr  2 18:55:26 2001  Carlos O'Ryan  <coryan@uci.edu>


        * tao/TimeBaseS.h:
        * tao/diffs/TimeBaseS.h.diff:
          My previous change removed several '#pragma push' but did not
          remove the corresponding '#pragma pop'

Mon Apr  2 20:08:07 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ORB.cpp:

          Added a check to each create_*_tc method. If the
          creation of the service object instance fails, a null
          typecode pointer will be returned, avoiding the crash
          that was happening previously.

        * examples/TypeCode_Creation/main.cpp:
        * examples/TypeCode_Creation/Makefile:
        * examples/TypeCode_Creation/Makefile.bor:
        * examples/TypeCode_Creation/README:
        * examples/TypeCode_Creation/run_test.pl:
        * examples/TypeCode_Creation/test.idl:
        * examples/TypeCode_Creation/TypeCode_Creation.dsp:

          New files for the example on creating typecodes
          through the use of CORBA::ORB::create_*_tc.

        * examples/TAO_Examples.dsw:
        * examples/Makefile:
        * examples/Makefile.bor:

          Updated these with the new example.

        * docs/releasenotes/index.html:

          Added a mention of the new example.

Mon Apr  2 20:01:05 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AVStreams.idl:
          Change comments to Doxygen format

Mon Apr  2 15:24:39 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Event/EC_ProxySupplier.cpp:
          Add missing ACE_TRY_CHECKs

Mon Apr  2 16:45:27 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_ExtendedC.h:

          Removed declarations of some constants that also
          occur in corbafwd.h.

Mon Apr  2 16:22:11 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          In the utility function that computes a default index for
          a union typecode, changed the code to be more friendly to
          platforms that don't support 64-bit integers. Thanks to
          Chad Elliott <elliott_c@ociweb.com> for pointing this out.

Mon Apr  2 16:17:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp: Fixed an error that showed up on static
          builds.

2001-04-02  Yamuna Krishnamurthy  <yamuna@ace.cs.wustl.edu>

        * orbsvcs/tests/AVStreams/mpeg/source/server/server.cpp:

          Fixed Fuzz errors.

Mon Apr  2 13:48:52 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/InterOp-Naming/Server_i.cpp :
        * tests/InterOp-Naming/INS_test_client.cpp :
          Added the ACE_TRY_CHECK macro.

Mon Apr  2 15:20:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.h:
          Removed the use of the local buffer as TAO now
          supports the single read mechanism, which will
          read in all of the UDP datagram.

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.h:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Acceptor.h:
          Removed dead code, e.g. we do not support
          TCP properties, preconnects, and cached connections.

Mon Apr  2 15:09:23 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/IFR_Client/IFR_ExtendedC.h:

          Fix a compilation error for compilers that do not support
          namespaces.

Mon Apr  2 14:39:03 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * Logging_Service/Logging_Service.cpp:
        * Notify_Service/Notify_Service.cpp:
        * examples/Log/Client/TLS_Client.cpp:
        * examples/Log/test/BasicLog_Test.cpp:
        * orbsvcs/Concurrency/CC_Lock.cpp:
        * orbsvcs/Log/LogMgr_i.cpp:
        * orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
        * orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/Notify/Notify_Event_Map.cpp:
        * orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
        * orbsvcs/Notify/Notify_ProxyPushConsumer_i.cpp:
        * orbsvcs/Notify/Notify_ProxySupplier_T.cpp:
        * orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.cpp:
        * orbsvcs/Notify/Notify_Worker_Task.cpp:
        * tests/Notify/Basic/Events_Test.cpp:
        * tests/Notify/Basic/LifeCycleTest.cpp:
        * tests/Notify/Basic/Simple.cpp:
        * tests/Notify/Basic/Updates.cpp:
        * tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
        * tests/Notify/performance-tests/Throughput/Throughput.cpp:

          Fixed Fuzz errors.

Mon Apr  2 13:33:00 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.cpp:

          Added some TAO_HAS_INTERCEPTORS guards that were overlooked
          when moving some interceptor functions from one generated
          file to another. This was cauing compile errors in the
          Debian NoInterceptors build.

Mon Apr  2 13:25:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/MT_Timeout/MT_Timeout.dsw:
        * tests/MT_Timeout/MT_Timeout_Client.dsp:
        * tests/MT_Timeout/MT_Timeout_Server.dsp:
          Added MS VC++ workspace and project files.

Mon Apr  2 13:12:32 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA:
          Added target directory for RTCORBA subsetting.

        * tao/RTCORBA/README:
          Status and plan for subsetting RTCORBA.  This file will be
          removed once the subsetting is completed.

Mon Apr  2 13:07:52 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * examples/Logging/Logging_Service_i.cpp:
        * examples/Logging/Logging_Test_i.cpp:
        * examples/Simple/grid/Grid_i.cpp:
        * orbsvcs/tests/Property/client.cpp:
        * orbsvcs/tests/Property/main.cpp:

          Fuzz..Fuzz...Fuzzzz

Mon Apr  2 10:46:45 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TimeBase.pidl:
          Document using Doxygen.  Include instructions on how to
          regenerate the code.

        * tao/TimeBaseC.h:
        * tao/TimeBaseC.i:
        * tao/TimeBaseC.cpp:
        * tao/TimeBaseS.h:
        * tao/TimeBaseS.i:
        * tao/TimeBaseS.cpp:
        * tao/TimeBaseS_T.h:
        * tao/TimeBaseS_T.i:
        * tao/TimeBaseS_T.cpp:
        * tao/diffs/TimeBaseC.h.diff:
        * tao/diffs/TimeBaseC.i.diff:
        * tao/diffs/TimeBaseC.cpp.diff:
        * tao/diffs/TimeBaseS.h.diff:
        * tao/diffs/TimeBaseS.i.diff:
        * tao/diffs/TimeBaseS.cpp.diff:
        * tao/diffs/TimeBaseS_T.h.diff:
        * tao/diffs/TimeBaseS_T.i.diff:
        * tao/diffs/TimeBaseS_T.cpp.diff:
          Regenerate files, patch code to eliminate cycles in the
          #includes and generate patch files for the new files.

2001-04-02  Yamuna Krishnamurthy  <yamuna@ace.cs.wustl.edu>

        * orbsvcs/tests/AVStreams/mpeg/source/server/augmented_server.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/server/server.cpp:
        * orbsvcs/tests/AVStreams/benchmark/server.cpp:

          Fixed Fuzz errors.

Mon Apr  2 08:46:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * docs/tutorials/Quoter/AMI/client.cpp:
        * docs/tutorials/Quoter/AMI/server.cpp:
        * docs/tutorials/Quoter/Event_Service/client.cpp:
        * docs/tutorials/Quoter/Event_Service/server.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/server.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/server.cpp:

          Removed some warnings on MSVC by getting rid of the
          unused variable names in the catch blocks.

        * docs/tutorials/Quoter/RT_Event_Service/Stock_i.cpp:

          MSVC had problems with the
          ((int (symbol[0]) << 24) | (int (symbol[1]) << 16)...
          expression.  If rewritten into separate statements, works
          fine.

          Thanks to John Ashmun <John.ASHMUN@esca.com> for this fix.

        * docs/tutorials/Quoter/AMI/AMI.dsw: (added)
        * docs/tutorials/Quoter/AMI/client.dsp: (added)
        * docs/tutorials/Quoter/AMI/server.dsp: (added)
        * docs/tutorials/Quoter/Event_Service/Event_Service.dsw: (added)
        * docs/tutorials/Quoter/Event_Service/client.dsp: (added)
        * docs/tutorials/Quoter/Event_Service/server.dsp: (added)
        * docs/tutorials/Quoter/Naming_Service/client.dsp:
        * docs/tutorials/Quoter/Naming_Service/server.dsp:
        * docs/tutorials/Quoter/On_Demand_Activation/On_Demand_Activation.dsw: (added)
        * docs/tutorials/Quoter/On_Demand_Activation/server.dsp: (added)
        * docs/tutorials/Quoter/RT_Event_Service/RT_Event_Service.dsw: (added)
        * docs/tutorials/Quoter/RT_Event_Service/client.dsp: (added)
        * docs/tutorials/Quoter/RT_Event_Service/server.dsp: (added)
        * docs/tutorials/Quoter/Simple/Impl-Repo/server.dsp:

          Standardized some contributed project files from John Ashmun
          <John.ASHMUN@esca.com> and also fixed some other dsp files in the
          tutorial.

Mon Apr  2 08:40:37 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/ImplRepoC.h:
        * tao/diffs/ImplRepoC.h.diff:
          Add missing #includes for configurations compiled with
          interceptors=0

Mon Apr 02 06:39:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAOACE.dsw:
          IFR_Service depends on TypeCodeFactory.

Mon Apr  2 07:37:24 2001  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * tests/AMI/README (simple-client): Reworded this so that it's
          correct.  Thanks to Gautam Thaker <gthaker@atl.lmco.com> for
          reporting this.

Sun Apr 01 22:02:20 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAOACE.dsw:
          TypeCodeFactory depends on IFR_Client add the dependency to
          ensure the builds go in the right order.

2001-04-01  Yamuna Krishnamurthy  <yamuna@ace.cs.wustl.edu>

        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/Command_Handler.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/server/augmented_server.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/server/server.cpp:
        * orbsvcs/tests/AVStreams/benchmark/server.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/sender.cpp:

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Fixed more Fuzz errors.

Sun Apr  1 21:50:27 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/CosEC/Factory/Makefile:
        * orbsvcs/examples/Security/Send_File/Makefile: Regenreated
          dependencies.

        * ChangeLog : Made cosmetic fixes. Changed the formats of many
          logs

Sun Apr  1 19:35:51 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
          The generated code for AMI was using T_var classes for anonymous
          types in the Messaging module.
          However such anonymous types cannot have T_var classes, the
          newly created version of MessagingC.* does not contain the T_var
          type.
          In summary, fixing two bugs (1) the incorrect generation of
          T_var for anonymous types, and (2) updating MessagingC.* with
          the latest version of the IDL compiler, exposed another bug!
          (3) Using anonymous T_vars in the AMI code.

          The fix was to *not* use a T_var at all, in fact, there was no
          reason to heap allocate this object, it could be created on the
          stack without any problems.

        * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
          The generated code was missing an ACE_CHECK statement.

        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
          Fixed indentation problem in generated code

Sun Apr  1 18:59:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/MessagingC.h:
        * tao/diffs/MessagingC.h.diff:
          Removed unused and undefined but exported CDR operators for
          Messaging::ExceptionHolder::_tao_seq_Octet, this is obviously a
          problem in the IDL compiler!  However, I should have noticed
          that it was removed in previous versions of this file.

Sun Apr  1 20:43:18 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * performance-tests/Thruput/TAO/client.cpp
        * performance-tests/POA/Demux/demux_test_client.cpp
        * performance-tests/Pluggable/PP_Test_Client.cpp
        * performance-tests/Latency/st_client.cpp
        * performance-tests/Cubit/TAO/MT_Cubit/Task_Client.cpp
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp

          More ACE_TRY_ENV Fuzz script errors.

Sun Apr  1 18:35:16 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/MessagingS.h:
        * tao/diffs/MessagingS.h.diff:
          Fixed export macros.  The IDL compiler options were targeted for
          the TAO library, but this file goes into TAO_PortableServer.

Sun Apr  1 18:18:45 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * docs/tutorials/Quoter/On_Demand_Activation/index.html:
        * docs/tutorials/Quoter/Simple/Persistent/index.html:
        * docs/tutorials/Quoter/Simple/Impl-Repo/index.html:
        * docs/tutorials/Quoter/Simple/ImprovedServer/index.html: Changed
          ~schmidt/ACE_wrappers links to point to relative files

Sun Apr  1 17:44:30 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/ImplRepo.pidl:
          Include documentation on how to regenerate the file.

        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS.i:
        * tao/PortableServer/ImplRepoS.cpp:
        * tao/PortableServer/ImplRepoS_T.h:
        * tao/PortableServer/ImplRepoS_T.i:
        * tao/PortableServer/ImplRepoS_T.cpp:
        * tao/diffs/ImplRepoC.h.diff:
        * tao/diffs/ImplRepoC.i.diff:
        * tao/diffs/ImplRepoC.cpp.diff:
        * tao/diffs/ImplRepoS.h.diff:
        * tao/diffs/ImplRepoS.i.diff:
        * tao/diffs/ImplRepoS.cpp.diff:
        * tao/diffs/ImplRepoS_T.h.diff:
        * tao/diffs/ImplRepoS_T.i.diff:
        * tao/diffs/ImplRepoS_T.cpp.diff:
          Regenerated the files, also created the (mostly empty) diff
          files.

Sun Apr  1 18:47:32 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * examples/Logging/Logging_Service.cpp
        * examples/Logging/Logging_Test_i.cpp
        * examples/Load_Balancing_persistent/Identity_i.cpp
        * examples/Load_Balancing/Identity_i.cpp
        * examples/Load_Balancing/Load_Balancer_i.cpp
        * examples/Simulator/Event_Supplier/DualEC_Sup.cpp
        * examples/Simulator/Event_Supplier/Event_Con.cpp
        * examples/Simple/grid/Grid_Client_i.cpp
        * examples/Simple/grid/Grid_i.cpp
        * examples/Simple/chat/server.cpp
        * examples/Simple/chat/Server_i.cpp
        * examples/Simple/bank/Bank_Client_i.cpp
        * examples/Persistent_Grid/Grid_Client_i.cpp
        * examples/Persistent_Grid/Persistent_Client_i.cpp
        * examples/Persistent_Grid/Simple_util.cpp

          Fix ACE_TRY_ENV Fuzz script errors.

Sun Apr  1 16:06:15 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Messaging.pidl:
          Improved documentation of how the file is pre-compiled and the
          patches are applied.

        * tao/Messaging.h:
          Instead of hacking MessagingC.h we use Messaging.h to define the
          TAO internal enum and function pointer type used in the AMI
          implementation.
        * tao/Asynch_Reply_Dispatcher.h:
          Must #include "tao/Messaging.h" now

        * tao/MessagingC.h:
        * tao/MessagingC.i:
        * tao/MessagingC.cpp:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/MessagingS.i:
        * tao/PortableServer/MessagingS.cpp:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/MessagingS_T.i:
        * tao/PortableServer/MessagingS_T.cpp:
        * tao/diffs/MessagingC.h.diff:
        * tao/diffs/MessagingC.i.diff:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingS.h.diff:
        * tao/diffs/MessagingS_T.i.diff:
        * tao/diffs/MessagingS.cpp.diff:
          Regenerate the code using a newer version of the IDL compiler.
          Update the patch files to match the new version.

        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
          Generate ACE_CHECK_RETURN when unregister_proxy_factory(), the
          use of ACE_TRY_ENV on this code is fishy though, nothing throws
          exceptions, and all the methods return an error code.  The error
          code is also suspicious, because it is not checked and all
          methods return 0.

2001-04-01  Yamuna Krishnamurthy  <yamuna@ace.cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast/server.cpp:
        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/sender.cpp:

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/orbsvcs/AV/Flows_T.cpp:

          Fixed Fuzz errors.

Sun Apr  1 14:56:14 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * docs/tutorials/Quoter/Simple/Client/index.html:
        * docs/tutorials/Quoter/Simple/Server/index.html:
        * docs/tutorials/Quoter/Simple/Impl-Repo/index.html:
        * docs/tutorials/Quoter/Simple/ImprovedServer/index.html:
        * docs/tutorials/Quoter/Simple/Persistent/index.html:
        * docs/tutorials/Quoter/RT_Event_Service/index.html:
        * docs/tutorials/Quoter/RT_Event_Service/index.html:
        * docs/tutorials/Quoter/On_Demand_Activation/index.html:
        * docs/tutorials/Quoter/Naming_Service/index.html: Thanks to John
          Ashmun <John.ASHMUN@esca.com> for these proof-read pages.

Sun Apr  1 13:56:20 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * docs/tutorials/Quoter/Event_Service/index.html: Thanks to John
          Ashmun <John.ASHMUN@esca.com> for this proof-read page. The
          tutorial, now, doesn't mention the ec.conf file any longer;
          defaults work best.

Thu Mar 29 15:36:38 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * docs/tutorials/Quoter/AMI/index.html: Thanks to John Ashmun
          <John.ASHMUN@esca.com> for this proof-read page. Plus some sanity
          checks on all the links.

Sun Apr  1 16:51:24 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.cpp:
        * orbsvcs/orbsvcs/Trader/Offer_Database.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * tao/RT_ORB.cpp:
          Fixed several ACE_TRY fuzz errors.

Sun Apr  1 09:29:14 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/*/Makefile: Updated dependencies. The last
          dependency generation did not catch many of them.

Sun Apr  1 09:21:18 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_Timeout:
        * orbsvcs/*/Makefile: Updated dependencies. The last dependency
          generation did not catch many of them.

Sat Mar 31 16:29:22 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/BiDir_Adapter.cpp:

          Added explicit template instantiation of
          ACE_Dynamic_Service<TAO_BiDir_Adapter>.

Sat Mar 31 15:28:08 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Updated section on Interface Repository, including
          the move of TypeCodeFactory.

        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:

          Updated dependencies.

Sat Mar 31 14:23:41 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/TypeCodeFactory_Static.dsp:

          New MSVC project file.

        * TAOACE_Static.dsw:
        * tao/TAO.dsw:

          Added new project file to workspaces.

Sat Mar 31 08:29:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/MT_Timeout/Client_Task.cpp:
          Add missing ACE_TRY_CHECK

Sat Mar 31 07:16:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/tao/IFR_Client/IFR_BaseC.cpp: Fixed errors in MSVC.

Sat Mar 31 02:23:16 2001  Sharath Cholleti  <sharath@cs.wustl.edu>

        * orbsvcs/Scheduling_Service/Scheduling_Service.cpp
        * orbsvcs/AV/Endpoint_Strategy.cpp
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp
        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp
        * orbsvcs/tests/AVStreams/Full_Profile/server.cpp
        * orbsvcs/tests/AVStreams/Latency/control.cpp
        * orbsvcs/tests/AVStreams/Latency/ping.cpp
        * orbsvcs/tests/AVStreams/Latency/pong.cpp
        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp
        * orbsvcs/tests/AVStreams/Multicast/server.cpp
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp
        * orbsvcs/tests/AVStreams/benchmark/child_process.cpp
        * orbsvcs/tests/AVStreams/benchmark/client.cpp
        * orbsvcs/tests/AVStreams/benchmark/server.cpp
        * orbsvcs/tests/AVStreams/mpeg/source/server/augmented_server.cpp
        * orbsvcs/tests/AVStreams/mpeg/source/server/server.cpp
        * orbsvcs/tests/AVStreams/server_discovery/Trader_Client.cpp
        * orbsvcs/tests/Sched_Conf/Sched_Conf.cpp
        * orbsvcs/tests/Sched_Conf/Sched_Conf_Anomalies.cpp
        * orbsvcs/tests/Sched_Conf/Sched_Conf_Runtime.cpp
        * orbsvcs/tests/Trading/export_test.cpp
        * orbsvcs/tests/Trading/import_test.cpp

        Fixed fuzz warnings for ACE_TRY_ENV.

Sat Mar 31 02:06:09 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tao/Makefile.bor:
        * tao/BiDir_GIOP/Makefile.bor:
          Added makefile for BiDir_GIOP library.

        * tao/TypeCodeFactory/Makefile.bor:
        * orbsvcs/IFR_Service/IFR_Service.bor:
          Cleaned up makefile for TypeCodeFactory library to fix an
          error in the IFR_Service build.

Fri Mar 30 22:06:02 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        These changes were first given out as a custom patch to TAO
        1.1.14 to Oresis.  They've been tested there, and seem to minimize
        ORB leaks.

        * tao/IIOP_Connection_Handler.h:
        * tao/Strategies/SHMIOP_Connection_Handler.h:
        * tao/Strategies/UIOP_Connection_Handler.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.h:

        Changed pending_upcalls_ to be a signed quantity rather than
        unsigned.  There still seems to be a lingering condition whereby
        this value can get decremented "below" zero.  It's much easier to
        detect this situation when it's signed than unsigned.

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:

        (open) Added code to set the transport's id.

        (handle_close) Changed conditional on pending_upcalls_ from "equal
        to zero" to "less than or equal to zero" in order to accomodate
        the lingering condition outlined above.

        (handle_input_i) This now returns -1 when pending_upcalls_ falls
        below or equal to zero.  This takes care of the situation outlined
        in the header file entry above.

        * tao/Invocation.cpp (close_connection): Reverted the change made
        by Carlos in ChangeLogTag "Sat Mar 24 22:15:23 2001 Carlos O'Ryan
        <coryan@uci.edu>"

Fri Mar 30 19:57:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/README:
        * tests/MT_Timeout/Makefile:
        * tests/MT_Timeout/Makefile.bor:
        * tests/MT_Timeout/client.bor:
        * tests/MT_Timeout/server.bor:
        * tests/MT_Timeout/README:
        * tests/MT_Timeout/Test.idl:
        * tests/MT_Timeout/run_test.pl:
        * tests/MT_Timeout/Client_Task.h:
        * tests/MT_Timeout/Client_Task.cpp:
        * tests/MT_Timeout/Server_Task.h:
        * tests/MT_Timeout/Server_Task.cpp:
        * tests/MT_Timeout/Sleep_Service.h:
        * tests/MT_Timeout/Sleep_Service.cpp:
        * tests/MT_Timeout/client.cpp:
        * tests/MT_Timeout/server.cpp:
          New regression test for bug 842.  The client creates multiple
          threads, each thread repeatedly send requests to a server that
          blocks for an specified amount of time.  Each client thread sets
          a roundtrip timeout policy.  The test currently deadlocks, while
          it should terminate in a relatively short amount of time.

Fri Mar 30 18:52:54 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Collocation/Makefile:
        * orbsvcs/IFR_Service/Makefile:
          Fix another two misplaced idl_stubs

Fri Mar 30 19:04:47 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCodeFactory/Makefile:

          Fixed typo.

        * orbsvcs/IFR_Service/AliasDef_i.cpp:
        * orbsvcs/IFR_Service/ArrayDef_i.cpp:
        * orbsvcs/IFR_Service/ComponentDef_i.cpp:
        * orbsvcs/IFR_Service/EventDef_i.cpp:
        * orbsvcs/IFR_Service/HomeDef_i.cpp:
        * orbsvcs/IFR_Service/IFR_Service.bor:
        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/PrimaryKeyDef_i.cpp:
        * orbsvcs/tests/IFR_Test/Makefile:
        * orbsvcs/tests/IFR_Test/Admin_Client.cpp:
        * orbsvcs/tests/Persistence_Test/Makefile:
        * orbsvcs/tests/Application_Test/Makefile:

          Fixed scoped name errors reported by egcs and update
          makefile dependencies.

Fri Mar 30 18:16:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/BiDir_GIOP/BiDirGIOP.cpp (parse_policy): Fixed a compile
          problem in builds with exceptions on. Thanks to Craig Rodrigues
          for reporting this.

Fri Mar 30 17:09:04 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/*/Makefile: Updated dependencies.

Fri Mar 30 16:07:29 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Simple_Naming/client.cpp: Fixed fuzz warnings.

Fri Mar 30 16:01:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Time/TAO_UTO.cpp: Fixed fuzz warnings that were
          missed in the last run.

Fri Mar 30 15:45:23 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp: Removed the BiDirection GIOP files that have been
          moved to a library of its own.

Fri Mar 30 15:04:40 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAOACE.dsw:

          Overlooked in my previous checkin.

Fri Mar 30 12:58:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/Makefile:
          The idl_stubs target should not be the first one.

Fri Mar 30 14:55:23 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAOACE.dsw:
        * tao/TAO.dsw
        * tao/BiDir_GIOP/TAO_BiDir_GIOP_Static.dsp:
        * tao/BiDir_GIOP/TAO_BiDir_GIOP.dsp: Added new files and modules.

Fri Mar 30 14:33:23 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/*/Makefile:
        * utils/Makefile: Updated dependencies.

Fri Mar 30 14:28:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/*/Makefile: Updated dependencies.

Fri Mar 30 14:23:09 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/*/Makefile: Updated dependencies

Fri Mar 30 14:08:37 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/*/Makefile: Updated dependencies

        * tests/BiDirectional/server.cpp:
        * tests/BiDirectional/client.cpp:
        * tests/BiDirectional_NestedUpcall/client.cpp:
        * tests/BiDirectional_NestedUpcall/server.cpp: Added missing
          #includes.

Fri Mar 30 13:43:56 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/BiDirPolicy.pidl:
        * tao/BiDirPolicyC.cpp:
        * tao/BiDirPolicyC.h:
        * tao/BiDirPolicyC.i:
        * tao/BiDir_ORBInitializer.cpp:
        * tao/BiDir_ORBInitializer.h:
        * tao/BiDir_PolicyFactory.cpp:
        * tao/BiDir_PolicyFactory.h:
        * tao/BiDir_Policy_i.h:
        * tao/BiDir_Policy_i.inl: Moved the files for BiDirecctional GIOP
          to a seperate library.

        * tao/BiDir_Adapter.cpp:
        * tao/BiDir_Adapter.h: The interface which is used by the ORB to
          load the library.

        * tao/ORB.cpp: Moved the ORB initialization for the Bidirectional
          stuff to the new library.

        * tao/ORB_Core.cpp
        * tao/ORB_Core.h
        * tao/ORB_Core.i: Added hooks to load the BiDirectional GIOP
          library.

        * tao/Makefile: Removed the BiDirectional GIOP files.

        * tao/*/Makefiles: Updated dependencies.

        * tao/PortableServer/POA.cpp: Removed parsing of the BiDirectional
          policy from here to the new library.

        * tao/BiDir_GIOP/BiDirGIOP.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.h:
        * tao/BiDir_GIOP/BiDir_ORBInitializer.h:
        * tao/BiDir_GIOP/BiDir_ORBInitializer.cpp:
        * tao/BiDir_GIOP/BiDir_PolicyFactory.cpp
        * tao/BiDir_GIOP/BiDirPolicy.pidl:
        * tao/BiDir_GIOP/BiDir_PolicyFactory.h:
        * tao/BiDir_GIOP/BiDirPolicyC.cpp:
        * tao/BiDir_GIOP/BiDirPolicyC.h:
        * tao/BiDir_GIOP/BiDirPolicyC.i:
        * tao/BiDir_GIOP/BiDir_Policy_i.cpp:
        * tao/BiDir_GIOP/BiDir_Policy_i.h:
        * tao/BiDir_GIOP/BiDir_Policy_i.inl:
        * tao/BiDir_GIOP/bidirgiop_export.h:
        * tao/BiDir_GIOP/Makefile:
        * tao/BiDir_GIOP/TAO_BiDir_GIOP_Static.dsp:
        * tao/BiDir_GIOP/TAO_BiDir_GIOP.dsp: Files for the new library.

Fri Mar 30 11:20:25 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/AMI/FL_Callback/Makefile:
        * examples/Content_Server/AMI_Iterator/Makefile:
        * examples/Content_Server/AMI_Observer/Makefile:
        * examples/Content_Server/SMI_Iterator/Makefile:
        * examples/Event_Comm/Makefile:
        * examples/Logging/Makefile:
        * examples/Quoter/Makefile:
        * examples/Simple/grid/Makefile:
        * orbsvcs/examples/CosEC/Factory/Makefile:
        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/Makefile.av:
        * orbsvcs/orbsvcs/Makefile.CosNaming:
        * orbsvcs/orbsvcs/Makefile.CosTime:
        * orbsvcs/orbsvcs/Makefile.CosTrading:
        * orbsvcs/orbsvcs/Makefile.RTEvent:
        * orbsvcs/orbsvcs/Makefile.SSLIOP:
        * orbsvcs/orbsvcs/Makefile.Svc_Utils:
        * orbsvcs/tests/AVStreams/benchmark/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/client/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_mib/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/server/Makefile:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile:
        * orbsvcs/tests/Interoperable_Naming/Makefile:
        * orbsvcs/tests/LoadBalancing/Makefile:
        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
        * orbsvcs/tests/Simple_Naming/Makefile:
        * orbsvcs/tests/ior_corbaname/Makefile:
        * performance-tests/Cubit/TAO/DII_Cubit/Makefile:
          Generate dependencies again... the dependencies madness is
          absurd!

        * examples/AMI/FL_Callback/Progress_i.cpp:
          Fixed double to int conversion warnings

        * orbsvcs/IFR_Service/Makefile:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * TAO_IDL/Makefile:
        * TAO_IDL/Makefile.dependencies:
        * tests/Collocation/Makefile:
          Fixed warnings during recursive 'make idl_stubs'

        * tests/RTCORBA/Client_Propagated/client.bor:
          Add missing object files.

Fri Mar 30 11:26:07 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Load_Balancing/Load_Balancer_i.cpp:
        * examples/Load_Balancing/Identity_i.cpp:
        * examples/Load_Balancing_persistent/Identity_i.cpp:
        * examples/Load_Balancing_persistent/Load_Balancer_i.cpp: Fixed
          fuzz warnings.

Fri Mar 30 10:48:19 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Trading/Makefile: Updated dependencies.

Fri Mar 30 10:33:54 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/Cubit/TAO/MT_Cubit/Makefile:
        * performance-tests/Cubit/TAO/IDL_Cubit/Makefile: Updated
          dependencies.

Fri Mar 30 10:32:06 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_client.dsp
        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_server.dsp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/README:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:
        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/test_i.h:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.h:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.cpp:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.h:

          Test code modified re IFR CORBA 2.4 compatibility changes, and
          Application_Test changed to use CORBA::Object::_get_interface()
          by default.

        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
        * orbsvcs/IFR_Service/TCF_Export.h:
        * orbsvcs/IFR_Service/TCF_Loader.cpp:
        * orbsvcs/IFR_Service/TCF_Loader.h:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.bor:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.dsp:
        * orbsvcs/IFR_Service/TypeCodeFactoryC.h:
        * orbsvcs/IFR_Service/TypeCodeFactoryC.i:
        * orbsvcs/IFR_Service/TypeCodeFactoryC.cpp:
        * orbsvcs/IFR_Service/TypeCodeFactory_i.h:
        * orbsvcs/IFR_Service/TypeCodeFactory_i.cpp:

          TypeCodeFactory related files removed from directory.

        * orbsvcs/IFR_Service/IFR.dsw:

          TypeCodeFactory project removed from workspace.

        * orbsvcs/IFR_Service/AbstractInterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/AbstractInterfaceDef_i.h:
        * orbsvcs/IFR_Service/LocalInterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/LocalInterfaceDef_i.h:

          Files added to IFR_Service for IFR CORBA 2.4 version interfaces.

        * orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/IFR_Service/IFR_BaseS.i:
        * orbsvcs/IFR_Service/IFR_BaseS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/IFR_Service/IFR_BasicS.i:
        * orbsvcs/IFR_Service/IFR_BasicS_T.cpp:
        * orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS.i:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS.i:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.cpp:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/IFR_Service/IFR_ExtendedS_T.i:

          New skeleton files have been added. Interface.pidl has been
          split into four smaller files (see below) to make the files
          generated from this large interface more manageable and
          reduce compile time.

        * orbsvcs/IFR_Service/InterfaceS.cpp:
        * orbsvcs/IFR_Service/InterfaceS.h:
        * orbsvcs/IFR_Service/InterfaceS.i:
        * orbsvcs/IFR_Service/InterfaceS_T.cpp:
        * orbsvcs/IFR_Service/InterfaceS_T.h:
        * orbsvcs/IFR_Service/InterfaceS_T.i:

          Removed from directory.

        * orbsvcs/IFR_Service/AliasDef_i.cpp:
        * orbsvcs/IFR_Service/AliasDef_i.h:
        * orbsvcs/IFR_Service/ArrayDef_i.cpp:
        * orbsvcs/IFR_Service/ArrayDef_i.h:
        * orbsvcs/IFR_Service/AttributeDef_i.cpp:
        * orbsvcs/IFR_Service/AttributeDef_i.h:
        * orbsvcs/IFR_Service/ComponentDef_i.cpp:
        * orbsvcs/IFR_Service/ComponentDef_i.h:
        * orbsvcs/IFR_Service/ComponentRepository_i.cpp:
        * orbsvcs/IFR_Service/ComponentRepository_i.h:
        * orbsvcs/IFR_Service/concrete_classes.h:
        * orbsvcs/IFR_Service/ConstantDef_i.cpp:
        * orbsvcs/IFR_Service/ConstantDef_i.h:
        * orbsvcs/IFR_Service/ConsumesDef_i.cpp:
        * orbsvcs/IFR_Service/ConsumesDef_i.h:
        * orbsvcs/IFR_Service/Contained_i.cpp:
        * orbsvcs/IFR_Service/Contained_i.h:
        * orbsvcs/IFR_Service/Container_i.cpp:
        * orbsvcs/IFR_Service/Container_i.h:
        * orbsvcs/IFR_Service/EmitsDef_i.cpp:
        * orbsvcs/IFR_Service/EmitsDef_i.h:
        * orbsvcs/IFR_Service/EnumDef_i.cpp:
        * orbsvcs/IFR_Service/EnumDef_i.h:
        * orbsvcs/IFR_Service/EventDef_i.cpp:
        * orbsvcs/IFR_Service/EventDef_i.h:
        * orbsvcs/IFR_Service/ExceptionDef_i.cpp:
        * orbsvcs/IFR_Service/ExceptionDef_i.h:
        * orbsvcs/IFR_Service/FactoryDef_i.cpp:
        * orbsvcs/IFR_Service/FactoryDef_i.h:
        * orbsvcs/IFR_Service/FinderDef_i.cpp:
        * orbsvcs/IFR_Service/FinderDef_i.h:
        * orbsvcs/IFR_Service/FixedDef_i.cpp:
        * orbsvcs/IFR_Service/FixedDef_i.h:
        * orbsvcs/IFR_Service/HomeDef_i.cpp:
        * orbsvcs/IFR_Service/HomeDef_i.h:
        * orbsvcs/IFR_Service/IDLType_i.h:
        * orbsvcs/IFR_Service/IFR_Service.bor:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/IFR_Service.dsp:
        * orbsvcs/IFR_Service/IFR_Service.h:
        * orbsvcs/IFR_Service/IRObject_i.cpp:
        * orbsvcs/IFR_Service/IRObject_i.h:
        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/InterfaceDef_i.h:
        * orbsvcs/IFR_Service/Makefile:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.bor:
        * orbsvcs/IFR_Service/ModuleDef_i.cpp:
        * orbsvcs/IFR_Service/ModuleDef_i.h:
        * orbsvcs/IFR_Service/NativeDef_i.cpp:
        * orbsvcs/IFR_Service/NativeDef_i.h:
        * orbsvcs/IFR_Service/OperationDef_i.cpp:
        * orbsvcs/IFR_Service/OperationDef_i.h:
        * orbsvcs/IFR_Service/PrimaryKeyDef_i.cpp:
        * orbsvcs/IFR_Service/PrimaryKeyDef_i.h:
        * orbsvcs/IFR_Service/PrimitiveDef_i.cpp:
        * orbsvcs/IFR_Service/PrimitiveDef_i.h:
        * orbsvcs/IFR_Service/ProvidesDef_i.cpp:
        * orbsvcs/IFR_Service/ProvidesDef_i.h:
        * orbsvcs/IFR_Service/PublishesDef_i.cpp:
        * orbsvcs/IFR_Service/PublishesDef_i.h:
        * orbsvcs/IFR_Service/README:
        * orbsvcs/IFR_Service/Repository_i.cpp:
        * orbsvcs/IFR_Service/Repository_i.h:
        * orbsvcs/IFR_Service/SequenceDef_i.cpp:
        * orbsvcs/IFR_Service/SequenceDef_i.h:
        * orbsvcs/IFR_Service/Servant_Factory.cpp:
        * orbsvcs/IFR_Service/Servant_Factory.h:
        * orbsvcs/IFR_Service/Servant_Locator.cpp:
        * orbsvcs/IFR_Service/Servant_Locator.h:
        * orbsvcs/IFR_Service/StringDef_i.cpp:
        * orbsvcs/IFR_Service/StringDef_i.h:
        * orbsvcs/IFR_Service/StructDef_i.cpp:
        * orbsvcs/IFR_Service/StructDef_i.h:
        * orbsvcs/IFR_Service/tmplinst.cpp:
        * orbsvcs/IFR_Service/TypedefDef_i.cpp:
        * orbsvcs/IFR_Service/TypedefDef_i.h:
        * orbsvcs/IFR_Service/UnionDef_i.cpp:
        * orbsvcs/IFR_Service/UnionDef_i.h:
        * orbsvcs/IFR_Service/UsesDef_i.cpp:
        * orbsvcs/IFR_Service/UsesDef_i.h:
        * orbsvcs/IFR_Service/ValueBoxDef_i.cpp:
        * orbsvcs/IFR_Service/ValueBoxDef_i.h:
        * orbsvcs/IFR_Service/ValueDef_i.cpp:
        * orbsvcs/IFR_Service/ValueDef_i.h:
        * orbsvcs/IFR_Service/ValueMemberDef_i.cpp:
        * orbsvcs/IFR_Service/ValueMemberDef_i.h:
        * orbsvcs/IFR_Service/WstringDef_i.cpp:
        * orbsvcs/IFR_Service/WstringDef_i.h:

          IFR_Service files modified for CORBA 2.4 compatibility.

        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:

          tao_ifr files modified for CORBA 2.4 compatibility.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          IDL compiler files modified for implementation of
          CORBA::Object::_get_interface().

        * tao/TypeCodeFactory/Makefile:
        * tao/TypeCodeFactory/Makefile.bor:
        * tao/TypeCodeFactory/TypeCodeFactory.dsp:
        * tao/TypeCodeFactory/TypeCodeFactorC.h:
        * tao/TypeCodeFactory/TypeCodeFactoryC.inl:
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_i.h:
        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_Loader.h:
        * tao/TypeCodeFactory/TypeCodeFactory_Loader.cpp:
        * tao/TypeCodeFactory/typecodefactory_export.h:

          Files moved from orbsvcs/IFR_Service to a new library.
          Some have been renamed to correspond to the naming
          conventions that we have developed for these satellite libraries.

        * tao/TypeCodeFactory/TypeCodeFactory_Adapter_Impl.h:
        * tao/TypeCodeFactory/TypeCodeFactory_Adapter_Impl.cpp:

          New file containing concrete dynamic service class to handle
          the CORBA::ORB::create_*_tc methods.

        * tao/TypeCodeFactory/TypeCodeFactory.pidl:

          IDL file split off from Interface.idl, containing just the
          TypeCodeFactory interface and a few necessary typedefs. The
          TypeCodeFactoryinterface has been made local. The stub files
          above can now be regenerated from this file.

        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.h.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.i.diff:
        * tao/TypeCodeFactory/diffs/TypeCodeFactoryC.cpp.diff:

          Added diff files for regenerating the TypeCodeFactory stub files.

        * tao/IFR_Client/IFR_Base.pidl:

          Piece of Interface.pidl containing IFR abstract base interfaces
          and some non-interface datatypes used by all interfaces.

        * tao/IFR_Client/IFR_Basic.pidl:

          Piece of Interface.pidl containing all interfaces and related
          datatypes, except those related to fixed types valuetypes and
          CORBA components.

        * tao/IFR_Client/IFR_Extended.pidl:

          Piece of Interface.pidl containing interfaces and related
          datatypes pertaining to fixed types and valuetypes.

        * tao/IFR_Client/IFR_Components.pidl:

          Piece of Interface.pidl containing interfaces and related
          datatypes pertaining to CORBA components.

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BaseC.h:
        * tao/IFR_Client/IFR_BaseC.i:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_BasicC.h:
        * tao/IFR_Client/IFR_BasicC.i:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.h:
        * tao/IFR_Client/IFR_ComponentsC.i:
        * tao/IFR_Client/IFR_ExtendedC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.h:
        * tao/IFR_Client/IFR_ExtendedC.i:

          Stub files generated from the above .pidl files. The motivation
          for this split of .pidl files and generated files is twofold.
          First, the stub files are now much smaller. Their former huge
          size was causing extra long compile and link times, as well as
          extreme memory requirements. Second, this scheme will simplify
          further modularization in the future.

        * tao/IFR_Client/ifrfwd.h:
        * tao/IFR_Client/InterfaceC.cpp:
        * tao/IFR_Client/InterfaceC.h:
        * tao/IFR_Client/InterfaceC.i:

          Removed from IFR_Client directory.

        * tao/IFR_Client/Interface.pidl:

          Kept around to show the entire IFR interface in one
          piece (except for TypeCodeFactory) with annotations
          showing the differences between the CORBA 2.x version
          and the CORBA Components version.

        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp:
        * tao/IFR_Client/IFR_Client_Adapter_Impl.h:
        * tao/IFR_Client/Makefile:
        * tao/IFR_Client/Makefile.bor:
        * tao/IFR_Client/TAO_IFR_Client.dsp:

          IFR_Client files modified for CORBA 2.4 compatibility
          and to reflect the changes above.

        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS.h:

          TAO_Domain library files modified for IFR CORBA 2.4
          compatibility.

        * tao/PortableServer/Direct_Object_Proxy_Impl.cpp:
        * tao/PortableServer/Direct_Object_Proxy_Impl.h:
        * tao/PortableServer/Servant_Base.cpp:
        * tao/PortableServer/Servant_Base.h:
        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.h:

          TAO_PortableServer library files modified as part of
          CORBA::Object::_get_interface() implementation.

        * tao/TypeCodeFactory_Adapter.cpp:
        * tao/TypeCodeFactory_Adapter.h:

          New files containing the base class for the TypeCodeFactory
          library dynamic service object.

        * tao/Abstract_Servant_Base.h:
        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/IFR_Client_Adapter.cpp:
        * tao/IFR_Client_Adapter.h:
        * tao/IFR_TypeCodes.cpp:
        * tao/LocalObject.cpp:
        * tao/LocalObject.h:
        * tao/Makefile:
        * tao/Makefile.bor:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Object_Proxy_Impl.h:
        * tao/Remote_Object_Proxy_Broker.cpp:
        * tao/Remote_Object_Proxy_Impl.cpp:
        * tao/Remote_Object_Proxy_Impl.h:
        * tao/TAO.dsp:
        * tao/corbafwd.h:

          TAO files modified as part of one or more of the general
          changes described above, which are:

          - TypeCodeFactory moved to new location.

          - Interface Repository now CORBA 2.4 compliant.

          - CORBA::ORB::create_*_tc() methods implemented.

          - CORBA::Object::_get_interface() method implemented.

Thu Mar 29 19:17:56 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/SecurityLevel1/README:
          Forgot to add the pass phrase for the certificates.

Thu Mar 29 19:06:36 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/SecurityLevel1/client.cpp :
        * orbsvcs/tests/Security/SecurityLevel1/server.cpp :
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.cpp :
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.h:
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test.idl:
        * orbsvcs/tests/Security/SecurityLevel1/Makefile:
        * orbsvcs/tests/Security/SecurityLevel1/README:
          Completed the test for the SecurityLevel1 interface.

        * orbsvcs/tests/Security/SecurityLevel1/client_key.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_key.pem:
        * orbsvcs/tests/Security/SecurityLevel1/server_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/client_cert.pem:
        * orbsvcs/tests/Security/SecurityLevel1/ca.pem:
          The newly generated certificates and keys.

        * orbsvcs/tests/Security/SecurityLevel1/run_test.pl:
          Added the perl script as well.

        * orbsvcs/tests/Security/SecurityLevel1/client.conf:
        * orbsvcs/tests/Security/SecurityLevel1/server.conf:
          The server and client conf files.

Thu Mar 29 17:58:30 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Sequence_T.h:
        * tao/Sequence_T.cpp:

          Made const the parameter for assignment from T_var for
          TAO_Pseudo_Object_Manager, similarly to the change for
          TAO_Object_Manager in

          Mon Mar 26 22:34:39 2001  Jeff Parsons <parsons@cs.wustl.edu>.

          Again, thanks to Derek Dominish <Derek.Dominish@Australia.Boeing.com>
          for pointing this out.

Thu Mar 29 14:18:53 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Crashed_Callback/run_test.pl:
          Fixed false positives on Win32 builds.

Thu Mar 29 14:40:51 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distributer.cpp:
          Fixed compile errors in g++.

Thu Mar 29 11:14:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/AMI/Handler_i.cpp:
        * docs/tutorials/Quoter/AMI/client.cpp:
        * docs/tutorials/Quoter/AMI/server.cpp:
        * docs/tutorials/Quoter/Event_Service/Stock_Consumer.cpp:
        * docs/tutorials/Quoter/Event_Service/Stock_Factory_i.cpp:
        * docs/tutorials/Quoter/Event_Service/client.cpp:
        * docs/tutorials/Quoter/Event_Service/server.cpp:
        * docs/tutorials/Quoter/Naming_Service/client.cpp:
        * docs/tutorials/Quoter/Naming_Service/server.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/client.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/server.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/Stock_Consumer.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/Stock_Factory_i.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/client.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/server.cpp:
        * docs/tutorials/Quoter/Simple/Client/client.cpp:
        * docs/tutorials/Quoter/Simple/Impl-Repo/client.cpp:
        * docs/tutorials/Quoter/Simple/Impl-Repo/server.cpp:
        * docs/tutorials/Quoter/Simple/ImprovedServer/server.cpp:
        * docs/tutorials/Quoter/Simple/Persistent/client.cpp:
        * docs/tutorials/Quoter/Simple/Persistent/server.cpp:
        * docs/tutorials/Quoter/Simple/Server/server.cpp:
        * docs/tutorials/Quoter/AMI/Handler_i.cpp:
        * docs/tutorials/Quoter/AMI/client.cpp:
        * docs/tutorials/Quoter/AMI/server.cpp:
        * docs/tutorials/Quoter/Event_Service/Stock_Consumer.cpp:
        * docs/tutorials/Quoter/Event_Service/Stock_Factory_i.cpp:
        * docs/tutorials/Quoter/Event_Service/client.cpp:
        * docs/tutorials/Quoter/Event_Service/server.cpp:
        * docs/tutorials/Quoter/Naming_Service/Stock_i.h:
        * docs/tutorials/Quoter/Naming_Service/client.cpp:
        * docs/tutorials/Quoter/Naming_Service/server.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/client.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/server.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/Stock_Consumer.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/Stock_Factory_i.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/client.cpp:
        * docs/tutorials/Quoter/RT_Event_Service/server.cpp:
        * docs/tutorials/Quoter/Simple/Client/client.cpp:
        * docs/tutorials/Quoter/Simple/Impl-Repo/client.cpp:
        * docs/tutorials/Quoter/Simple/Impl-Repo/server.cpp:
        * docs/tutorials/Quoter/Simple/ImprovedServer/server.cpp:
        * docs/tutorials/Quoter/Simple/Persistent/client.cpp:
        * docs/tutorials/Quoter/Simple/Persistent/server.cpp:
        * docs/tutorials/Quoter/Simple/Server/server.cpp:
          Instead of using std::cout & friends we use good ol' cout, this
          avoids problems with all those platforms where ACE is configured
          to use the OLD iotstreams.
          Also remove the #include <iostream> line, because it gives MSVC
          fits (for good reasons).

        * docs/tutorials/Quoter/On_Demand_Activation/Stock_Factory_Locator_i.cpp:
          Fixed g++ warnings

Thu Mar 29 10:15:54 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/MT_Client/test.idl:
        * tests/MT_Client/test_i.h:
        * tests/MT_Client/test_i.cpp:
        * tests/MT_Client/client.cpp:
          Prime the test by making many calls to test_method() that ignore
          all exceptions.  Otherwise we get TRANSIENT exceptions due to
          bug 189.
          Also cleaned up the IDL interface.

        * tests/Client_Leaks/Process_Factory.cpp:
          Fixed typo

        * tests/Client_Leaks/Makefile:
          Update deps.

Thu Mar 29 10:53:01 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tao/operation_details.i: Reordered definition of reply_service_info ()
          and request_service_info () to fix compiler warnings in vxWorks.

Thu Mar 29 10:40:52 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/Servant_Base.i (_create_stub): Fixed a fuzz
          warning.

Thu Mar 29 08:41:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Block_Flushing_Strategy.h:
        * tao/Block_Flushing_Strategy.cpp:
        * tao/Flushing_Strategy.h:
        * tao/Flushing_Strategy.cpp:
        * tao/Message_Sent_Callback.h:
        * tao/Message_Sent_Callback.inl:
        * tao/Message_Sent_Callback.cpp:
        * tao/Queued_Message.h:
        * tao/Queued_Message.inl:
        * tao/Queued_Message.cpp:
        * tao/Reactive_Flushing_Strategy.h:
        * tao/Reactive_Flushing_Strategy.cpp:
        * tests/Big_Oneways/Big_Oneways.dsw:
        * tests/Big_Oneways/Coordinator.h:
        * tests/Big_Oneways/Coordinator.cpp:
        * tests/Big_Oneways/Makefile:
        * tests/Big_Oneways/Peer.h:
        * tests/Big_Oneways/Peer.cpp:
        * tests/Big_Oneways/README:
        * tests/Big_Oneways/Session.h:
        * tests/Big_Oneways/Session.cpp:
        * tests/Big_Oneways/Session_Control.h:
        * tests/Big_Oneways/Session_Control.cpp:
        * tests/Big_Oneways/Session_Task.h:
        * tests/Big_Oneways/Session_Task.cpp:
        * tests/Big_Oneways/Test.idl:
        * tests/Big_Oneways/client.cpp:
        * tests/Big_Oneways/client.dsp:
        * tests/Big_Oneways/run_test.pl:
        * tests/Big_Oneways/server.cpp:
        * tests/Big_Oneways/server.dsp:
        * tests/LongWrites/Sender_Task.h:
        * tests/LongWrites/Sender_Task.cpp:
        * tests/Queued_Message_Test/Makefile:
        * tests/Queued_Message_Test/Queued_Message_Test.cpp:
        * tests/Queued_Message_Test/Queued_Message_Test.dsp:
        * tests/Queued_Message_Test/Queued_Message_Test.dsw:
          All these files were supposed to be part of the 132 branch, but
          they got accidentally added to the main trunk.  Removed until
          their time comes.

Thu Mar 29 08:39:08 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/sender.cpp:
          Add missing #include "tao/debug.h", this was only a problem in
          platforms that do not define ACE_TEMPLATES_REQUIRE_SOURCE.

Thu Mar 29 07:47:48 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/AMI/Handler_i.h:
        * docs/tutorials/Quoter/AMI/Handler_i.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.h:
        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.cpp:
          Fixed throw spec problems.

        * tests/Client_Leaks/Test.idl:
        * tests/Client_Leaks/Client_Task.cpp:
        * tests/Client_Leaks/Process_Factory.h:
        * tests/Client_Leaks/Process_Factory.cpp:
          Add explicit noop() operation used instead of _non_existent() or
          validate_connection() because the test should work in minimum
          CORBA configurations.

Thu Mar 29 06:27:14 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distributer.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
          Fixed warnings in g++.

Thu Mar 29 06:15:33 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/tutorials/Quoter/Simple/Persistent/server.cpp:
        * docs/tutorials/Quoter/On_Demand_Activation/Stock_Factory_Locator_i.cpp:

          Fixed warnings in g++.

Thu Mar 29 00:11:12 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/LifeCycle_Service/LifeCycle_Service.cpp:

          Fixed Fuzz error.

Wed Mar 28 21:46:24 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/Naming_Service/NT_Naming_Service.cpp:

          Changed use of some Win32 APIs to ACE_TEXT_* equivalents.

Wed Mar 28 21:44:45 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/Callback_Quoter/Consumer_Input_Handler.cpp:
        * examples/Callback_Quoter/notifier.cpp:
        * examples/Content_Server/AMI_Iterator/client.cpp:
        * examples/Content_Server/AMI_Observer/client.cpp:
        * examples/Content_Server/SMI_Iterator/client.cpp:
        * examples/Event_Comm/Notifier_Server.cpp:
        * tests/Exposed_Policies/Counter_i.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp:
        * tests/RTCORBA/RTMutex/server.cpp:
          Fixed ACE_TRY_CATCH errors detected by the fuzz script.

        * tao/RTCORBAC.{cpp,h,i}:
        * tao/RTCORBAS.{cpp,h,i}:
        * tao/RTCORBAS_T.{cpp,h,i}:
        * tao/diffs/RTCORBAC.cpp.diff:
        * tao/diffs/RTCORBAC.h.diff:
        * tao/diffs/RTCORBAS.cpp.diff:
        * tao/diffs/RTCORBAS.h.diff:
          Regenerated RTCORBA.pidl files to fix ACE_TRY_CATCH
          macro warnings detected by the fuzz script.

Wed Mar 28 21:40:36 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (ServerObject_i): Added ACE_CHECK;

Wed Mar 28 20:16:32 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          Changed reference to opdetails.service_context () to
          opdetails.request_service_context () to be consistent
          with the fix for bug #806 which separates the request
          and reply service contexts.

Wed Mar 28 17:24:57 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * orbsvcs/tests/ImplRepo/NameService/Makefile : Added
        libTAO_PortableServer and libTAO_IORTable to LinkList to make QNX
        happy. Thanks to Thomas Groth <groth.th@nord-com.net> for the
    suggestion.

Wed Mar 28 17:12:06 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * orbsvcs/examples/Log/test/Makefile : Added libTAO_DynamicAny and
        libTAO_IORTable to LinkList to make QNX happy. Thanks to Thomas
    Groth <groth.th@nord-com.net> for the suggestion.

Wed Mar 28 16:54:47 2001  Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * orbsvcs/examples/Log/Client/Makefile: Added libTAO_DynamicAny to
        LinkList to make QNX happy. Thanks to Thomas Groth
    <groth.th@nord-com.net> for the suggestion.

Wed Mar 28 16:51:01 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Multiple/Multiple_Impl.cpp:
          Add missing ACE_TRY_ENV

Wed Mar 28 16:39:13 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Messaging.h:
          We continue to add explicity headers for each CORBA namespace,
          until recently the "tao/corba.h" file automagically #included
          everything in CORBA, resulting in long compilation times,
          polluted namespaces and excessive coupling.
          Long ago we moved PortableServer to its own header file, and
          more recently RT_CORBA, this is another step.
          Notice that this is only relevant for platforms that define
          TAO_HAS_INTERCEPTORS=0, otherwise some other magic kicks in and
          re-introduces the magic header files.

        * examples/Buffered_AMI/client.cpp:
        * examples/Buffered_Oneways/client.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * performance-tests/Callback/client.cpp:
        * performance-tests/Callback/server.cpp:
        * performance-tests/RTCorba/Oneways/Reliable/client.cpp:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/Crashed_Callback/client.cpp:
        * tests/Crashed_Callback/server.cpp:
        * tests/Policies/Manipulation.cpp:
        * tests/Timed_Buffered_Oneways/client.cpp:
        * tests/Timeout/client.cpp:
          Add missing #include "tao/Messaging.h", this fixes compilation
          problems on configurations compiled with interceptors disabled.

        * orbsvcs/examples/Security/Send_File/Makefile:
          Regenerate dependencies

        * TAO_IDL/be/be_visitor_valuetype/ami_exception_holder_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
          Cosmetic fixes

Wed Mar 28 17:35:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Time/TAO_TIO.cpp (overlaps): Fixed a warning in
          Core builds.

Wed Mar 28 17:05:03 2001  Sharath Cholleti  <sharath@cs.wustl.edu>

        * tao/Stub.cpp: Use all the profiles instead of <profile_in_use_>
          to calculate the hash. This should fix bug id #671 in the
          Bugzilla.

        * tao/MProfile.cpp: Using mod instead of average to calculate the
          hash value over multiple profiles.

Wed Mar 28 17:53:35 2001  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/AV/Protocol_Factory.h:
          Fixed doxygen comment.

Wed Mar 28 16:48:09 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/NestedUpcall/Triangle_Test/server_A.cpp (main):
        * tests/NestedUpcall/Triangle_Test/server_B.cpp:
        * tests/NestedUpcall/Triangle_Test/initiator.cpp: Fixed fuzz
          warnings.

Wed Mar 28 16:27:42 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Time/Client_i.cpp:
        * orbsvcs/Time_Serive/Client_i.cpp:
        * orbsvcs/Time_Serive/Server_i.cpp: Fixed fuzz warnings.

Wed Mar 28 16:10:17 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Time/TAO_UTO.cpp:
        * orbsvcs/orbsvcs/Time/TAO_UTO.h:
        * orbsvcs/orbsvcs/Time/TAO_TIO.cpp:
        * orbsvcs/orbsvcs/Time/TAO_TIO.h:
        * orbsvcs/orbsvcs/Time/Timer_Helper.cpp: Fixed more fuzz warnings.

Wed Mar 28 15:25:04 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/IORManipulation/IORC.cpp: Fixed fuzz warnings.

Wed Mar 28 14:45:53 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Forwarding/client.cpp (run_test):
        * tests/MProfile_Forwarding/client.cpp:
        * tests/MProfile/client.cpp: Fixed fuzz warnings.

Wed Mar 28 14:42:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:

          Fixes for Fuzz warnings in generated code.

Wed Mar 28 12:39:44 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Log/Log_i.cpp:
          More Fuzz warnings fixed

Wed Mar 28 14:34:50 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Multiple/Multiple_Impl.cpp: Fixed some more fuzz script
          warnings.

Wed Mar 28 12:20:08 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORB.cpp:
        * tao/Object.cpp:
        * tao/ORB_Core.cpp:
        * tao/Invocation.cpp:
        * tao/ORBInitializer_Registry.cpp:
        * tao/Invocation_Endpoint_Selectors.cpp:
          More Fuzz warnings fixed.

Wed Mar 28 11:57:02 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Connection_Manager.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/distributer.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.cpp:
          Fixed compilation problems on platforms without exceptions.
          Also fixed g++ warnings

Wed Mar 28 11:49:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/OBV/Typed_Events/Event_Types_impl.cpp:
          Fixed Fuzz problems with ACE_TRY_ENV.

Wed Mar 28 13:49:56 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/DynAny_Test/test_dynsequence.cpp:
        * tests/DynAny_Test/test_dynstruct.cpp:
        * tests/DynAny_Test/test_dynunion.cpp:
        * tests/Param_Test/bd_long_seq.cpp:
        * tests/Param_Test/param_test_i.cpp:
        * tests/Param_Test/typecode.cpp:
        * tao/DynamicAny/DynAny_i.cpp:
        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/DynamicInterface/Request.cpp:
        * orbsvcs/IFR_Service/IFR_Server.cpp:

          Added missing ACE_CHECK/ACE_TRY_CHECK

Wed Mar 28 13:43:41 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp: Fixed
          compilation errors in the Core build. The TAO_GIOP_Invocation
          class now stores TAO_Service_Context instead of
          IOP::ServiceContextList.  Made changes to access the
          IOP::ServiceContextList from the TAO_Service_Context class.

Wed Mar 28 13:30:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Smart_Proxies/server.cpp:
        * tests/Smart_Proxies/Benchmark/client.cpp:
        * tests/Smart_Proxies/Benchmark/server.cpp :
        * tests/Smart_Proxies/On_Demand/server.cpp:
        * tests/Smart_Proxies/Policy/server.cpp: Fixed some fuzz script
          warnings.

Wed Mar 28 13:10:22 2001  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/IFR_Service/Makefile:
          Disable building this when cross-compiling.

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
          Removed warning when multicast is not enabled.

        * orbsvcs/examples/CosEC/RtEC_Based/Makefile:
          Don't build these examples on VxWorks; they aren't linking
          due to library conflicts.

        * orbsvcs/examples/CosEC/Simple/Makefile:
        * orbsvcs/tests/CosEvent/Basic/Makefile:
          Remove unnecessary libraries from link line.  This was causing
          failures under VxWorks.

        * orbsvcs/examples/Notify/Filter/Filter.cpp:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.cpp:
          Fixed VxWorks compilation error due to multiply instantiated
          templates.

        * performance-tests/Cubit/TAO/MT_Cubit/client.cpp:
          Removed VxWorks warning about incompatible pointer assignment.

        * performance-tests/Thruput/TAO/utils.cpp:
          Removed warning of unused variables when compiling with VxWorks
          5.4.

Wed Mar 28 09:45:30 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/Naming_Service/NT_Naming_Service.cpp:
          Borland uses the standard scope rules for variables declared
          inside for() statements, MSVC is more forgiving.

Wed Mar 28 09:31:54 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_i.cpp:
          Added #if ACE_HAS_PURIFY == 1 checks to initialize some
          structures before they are used.  This just removes the
          100,000+ warnings with Purify that the cubit clients and
          servers give.  This should be ok since any performance
          measurements have ACE_HAS_PURIFY == 0 anyway.

Wed Mar 28 09:31:54 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tests/RTCORBA/Client_Propagated/Client_ORBInitializer.{cpp,h}:
        * tests/RTCORBA/Client_Propagated/Makefile:
        * tests/RTCORBA/Client_Propagated/client.dsp:
        * tests/RTCORBA/Client_Propagated/client.cpp:
        * tests/RTCORBA/Client_Propagated/interceptors.{cpp,h}:
          Added portable interceptor code to verify that the client
          propagated priority is passed in the service context list
          back from the server.

        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp:
          Added Ossama's changes to replicate Bug #806.  Also added many
          checks to verify the functionality of the service context
          manipulation methods for requests and replies, and added checks
          to verify that proper service context list contents are received
          from both the client and the server.  The test no longer relies
          on visual inspection of the results to show proper execution.

        * tao/ClientRequestInfo.{cpp,h}:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/IIOP_Transport.cpp:
        * tao/Invocation.{cpp,h,i}:
        * tao/RT_Protocols_Hooks.cpp:
        * tao/Service_Context.{cpp,h}:
        * tao/TAO_Server_Request.{cpp,h,i}:
        * tao/operation_details.{h,i}:
        * tao/PortableServer/Object_Adapter.{cpp,h}:
        * tao/PortableServer/ServerRequestInfo.{cpp,h}:
          Separated out request and reply service context lists to fix
          Bug #806.  Refactored out code duplication in
          ClientRequestInfo.{cpp,h} and ServerRequestInfo.{cpp,h}
          using the TAO_Service_Context class.

Wed Mar 28 08:18:00 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/UDP.h:
        * orbsvcs/orbsvcs/AV/AVStreams_i.h:
        * orbsvcs/orbsvcs/AV/Transport.h:
        * orbsvcs/orbsvcs/AV/TCP.h:
        * orbsvcs/orbsvcs/AV/RTP.h:
        * orbsvcs/orbsvcs/AV/RTCP.h:
        * orbsvcs/orbsvcs/AV/Protocol_Factory.h:
        * orbsvcs/orbsvcs/AV/Policy.h:
        * orbsvcs/orbsvcs/AV/MCast.h:
        * orbsvcs/orbsvcs/AV/Flows_T.h:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.h:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy.h:
        * orbsvcs/orbsvcs/AV/AV_Core.h:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.h:
          Converted commenting style to doxygen, added some comments.

Wed Mar 28 06:15:02 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/AMI/client.cpp: Fixed a compile error in Windoows build.

Tue Mar 27 22:00:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/ORB_Core.cpp:
        * tao/PortableServer/POA.i:
          Fixed several Fuzz warning

Tue Mar 27 21:57:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Simple/time-date/Time_Date.cpp:
          Add missing #include

Tue Mar 27 23:23:31 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/tests/Trading/Makefile
          Prevent unnecessary symlink from being installed in $ACE_ROOT/ace

Tue Mar 27 20:11:31 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Component_Switching/Makefile:
          Updated dependencies

Tue Mar 27 23:00:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI/client.cpp:
        * tests/AMI/simple_client.cpp:
        * tests/AMI/ami_test_i.cpp:
          Fixed ACE_TRY_ENV/ACE_TRY_CHECK Fuzz test warnings.

Tue Mar 27 19:37:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * rules.tao.GNU:
          Add macros to customize the default extensions for the IDL
          compiler:  IDL_CLIENT_SRC_EXT, IDL_CLIENT_HDR_EXT and similar
          macros for the other files.
          Likewise setting tao_dont_use_idl_make_rule=1 disables the
          default IDL compiler rules altogether, letting application
          developers define their own.

          Thanks to Jody Hagins <jody@atdesk.com> for all these
          improvements.

Tue Mar 27 19:33:57 2001  Carlos O'Ryan  <coryan@uci.edu>

        * Makefile:
        * docs/tutorials/Quoter/Makefile:
          Add the Quoter tutorial to all the builds that support native
          exceptions.

Tue Mar 27 19:27:19 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/run_test.pl:
          Increase the total run time, this is a slow test.

        * tests/Client_Leaks/Client_Task.h:
        * tests/Client_Leaks/Client_Task.cpp:
          Use the _non_existent trick to avoid TRANSIENT exceptions during
          startup.
          Count the number of calls that actually work, so the test fails
          if not enough child processes are created.

        * tests/Client_Leaks/Process_Factory.cpp:
          Cosmetic fixes

        * tests/MT_Client/run_test.pl:
          Make default configuration a little more stringent

        * tests/MT_Client/MT_Client.dsw:
        * tests/MT_Client/Makefile:
        * tests/MT_Client/Makefile.bor:
        * tests/MT_Client/client.bor:
        * tests/MT_Client/orb_creation.bor:
        * tests/MT_Client/server.bor:
        * tests/MT_Client/simple-client.bor:
        * tests/MT_Client/simple-client.conf:
        * tests/MT_Client/simple-client.cpp:
        * tests/MT_Client/simple_client.dsp:
          Removed simple-client, the new Hello test serves the same role,
          just much easier to read.

        * tests/QtTests/svc.conf:
          Add RCS id

Tue Mar 27 19:54:49 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * utils/NamingViewer/ViewIORDialog.cpp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
        * orbsvcs/tests/Notify/Basic/Events_Test.h:
        * orbsvcs/tests/Notify/Basic/Simple.h:
        * orbsvcs/tests/Notify/Basic/Updates.h:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:
        * orbsvcs/tests/Event_Latency/Event_Latency.h:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/benchmark/child.cpp:
        * orbsvcs/tests/AVStreams/benchmark/client.cpp:
        * orbsvcs/Examples/Notify/Filter/Filter.h:
        * orbsvcs/Examples/Notify/Subscribe/Subscribe.h:
        * Examples/POA/Forwarding/MyFooServant.h:

          Minor fixes to eliminate build errors on MSVC, such as adding #include
          file, adding disable of MSVC inheritance via dominance warning, or
          adjusting a signed/unsigned mismatch.

        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/Basic/Updates.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:
        * orbsvcs/Examples/Notify/Filter/Filter.dsp:
        * orbsvcs/Examples/Notify/Subscribe/Subscribe.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:

          Added header files to these projects, for easier future editing.

Tue Mar 27 17:01:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Wait_On_Leader_Follower.cpp (wait): Reverted a change to
          ACE_TEXT and did as per Darrell's advise.

Tue Mar 27 15:56:49 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Default_Protocols_Hooks.cpp:
        * tao/Protocols_Hooks.cpp: Added #includes to get it compile fine
          on platforms where messaging and RTCORBA has been turned off.

Tue Mar 27 15:08:41 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Wait_On_Leader_Follower.cpp: Added an ACE_TEXT () wrapper
          for a debug statement. Thanks to Pratt Nick for poiting this
          out.

        * tao/Leader_Follower.{h,cpp,i}: Reverted the changes for Bug
          #721. Looks like the fix is causing the ORB to crash.

Tue Mar 27 14:20:48 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Changed
          all the occurences of TAO_orbdebug to TAO_debug_level. That
          should hopefully fix the DLL Core builds.

Tue Mar 27 08:15:34 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Fixed minor syntax error, i.e. removed extra right paren.

        * tao/Protocols_Hooks.h:
          Add missing #include for minimum CORBA builds.

Tue Mar 27 05:36:10 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * tao/Wait_On_Leader_Follower.cpp (connection_closed): No need for
          ACE_NESTED_CLASS.

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp (destroy): Must check for a
          non-zero protocol object before destroying it.  We must also
          destroy the protocol objects in the reverse flowspec set.

        * orbsvcs/tests/AVStreams:

          - Rename Use_Case to Component_Switching.

          - Rename Simple to Simple_Two_Stage.

          - Revamped the following tests:

            - Simple_Two_Stage
            - Simple_Three_Stage
            - Asynch_Three_Stage
            - Component_Switching

        * $ACE_ROOT/bin/auto_run_tests.lst: Added new AV tests.

Tue Mar 27 09:02:03 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Param_Test/anyop.bor
        * tests/Param_Test/Makefile.bor
          Added BCB makefile for the anyop test

        * tests/MProfile_Forwarding/*.bor
        * tests/Smart_Proxies/Benchmark/*.bor
        * tests/Smart_Proxies/On_Demand/*.bor
        * tests/Smart_Proxies/Policy/*.bor
        * tests/Smart_Proxies/*.bor
        * tests/LongWrites/*.bor
        * tests/Multiple/*.bor
        * tests/NestedUpcall/MT_Client_Test/*.bor
        * tests/NestedUpcall/Simple/*.bor
        * tests/NestedUpcall/Triangle_Test/*.bor
        * tests/Object_Loader/*.bor
          Added BCB makefiles for these tests

        * tests/CDR/makefile.bor
        * tests/makefile.bor
          Updated this BCB makefile that it builds all tests and removed
          all other BCB makefiles in this directory because they are not
          needed anymore

        * tests/Leader_Followers/client.bor
          Corrected these makefiles

        * tests/Makefile.bor
        * tests/NestedUpcall/Makefile.bor
        * performance-tests/Makefile.bor
        * performance-tests/Cubit/Makefile.bor
        * performance-tests/Cubit/TAO/Makefile.bor
        * examples/Makefile.bor
        * examples/POA/Makefile.bor
        * examples/OBV/Makefile.bor
        * examples/Content_Server/Makefile.bor
          Updated or added these BCB makefiles to include new makefiles

        * tests/Smart_Proxies/Collocation/*.bor
          Updated the BCB makefiles

        * performance-tests/Callback/*.bor
        * performance-tests/Pluggable/*.bor
        * performance-tests/POA/Object_Creation_And_Registration/*.bor
        * performance-tests/Cubit/TAO/IDL_Cubit/*.bor
        * performance-tests/Cubit/TAO/MT_Cubit/*.bor
          Added BCB makefiles for these performance-tests

        * examples/Simple/time-date/*.bor
        * examples/POA/TIE/*.bor
        * examples/POA/Forwarding/*.bor
        * examples/POA/DSI/*.bor
        * examples/OBV/Typed_Events/*.bor
        * examples/Content_Server/SMI_Iterator/*.bor
        * examples/Buffered_AMI/*.bor
          Added BCB makefiles for these examples

        * examples/Simple/bank/*.bor
        * examples/Simple/grid/*.bor
        * examples/Simple/time/*.bor
          Corrected executable names so that the perl test scripts can
          find the executables.

Mon Mar 26 21:34:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/DynamicAny/DynAnyFactory.h:
        * tao/DynamicAny/DynAny_i.h:
        * tao/DynamicAny/DynArray_i.h:
        * tao/DynamicAny/DynEnum_i.h:
        * tao/DynamicAny/DynSequence_i.h:
        * tao/DynamicAny/DynStruct_i.h:
        * tao/DynamicAny/DynUnion_i.h:
        * orbsvcs/IFR_Service/TypeCodeFactory_i.h:
        * orbsvcs/ImplRepo_Service/Locator.h:
          Fixed warnings about inheritance via dominance.

        * orbsvcs/ImplRepo_Service/NT_Service.cpp:
        * orbsvcs/Naming_Service/NT_Naming_Service.cpp:
          Add missing #includes for Win32

        * tao/LocalObject.h:
          Minor cosmetic fix

Mon Mar 26 23:29:47 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * Leader_Follower.{i,h,cpp}
        * Wait_On_Leader_Follower.cpp

          Implemented the Leader_Follower component of the ORB to use a
          stack instead of a heap, using the same strategy as in
          ACE_Token. This fixes Bug 721.

Mon Mar 26 22:34:39 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Sequence_T.h:
        * tao/Sequence_T.cpp:

          Changed the assignment operator from T_var for
          class TAO_Object_Manager to take a const T_var &.
          The non-const parameter we had previously has
          incorrect semantics and may cause the wrong
          assignment operator (from T *) to be chosen by the
          compiler in some cases, leading to problems because
          the assignment from T * does not duplicate the
          pointer. Thanks to Matt Cheers <Matt.Cheers@Australia.Boeing.com>
          and Derek Dominish <Derek.Dominish@Australia.Boeing.com> for
          pointing out the problem.

Mon Mar 26 22:20:34 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp: Fixed a
          problem with SunCC 4.2. SunCC4.2 doesn't like a reinterpret_cast
          of an int to an int.

Sat Mar 24 07:44:05 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * orbsvcs/Naming_Service/NT_Naming_Service.cpp: Added a patch
          to make it possible to pass multiple arguments to the
          NT_Naming_Service.  Thanks to Martin Johnson
          <mjhn@bigpond.net.au> for reporting this.

Mon Mar 26 13:06:10 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/corba.h:
        * tao/corbafwd.h:
          Do not include "tao/ORB_Core.h", "tao/Stub.h" nor "tao/debug.h"
          from corba.h, this eliminates coupling between the library and
          the application, and improves compilation time by, according to
          my local tests, a good 10-20%.

        * TAO/TAO_IDL/be/be_codegen.cpp:
        * TAO/TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO/TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
        * TAO_IDL/include/ast_structure.h:
          Generate more #includes in the FooC.cpp and FooS.cpp files, so
          the application does not get a bunch of ACE code just for
          #including TAO.

        * tao/Acceptor_Impl.cpp:
        * tao/BiDir_Policy_i.cpp:
        * tao/Cleanup_Func_Registry.h:
        * tao/ClientRequestInfo.cpp:
        * tao/ClientRequestInfo.h:
        * tao/ClientRequestInfo.inl:
        * tao/GIOP_Message_Base.cpp:
        * tao/Interceptor_List.h:
        * tao/Leader_Follower.h:
        * tao/LocalObject.cpp:
        * tao/NVList.h:
        * tao/ORBInitializer_Registry.h:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/Object.h:
        * tao/Pluggable_Messaging.cpp:
        * tao/Protocols_Hooks.h:
        * tao/RT_ORB_Loader.cpp:
        * tao/RT_ORB_Loader.h:
        * tao/Resource_Factory.h:
        * tao/debug.cpp:
        * tao/default_resource.cpp:
        * tao/params.h:
        * tao/DynamicInterface/Context.h:
        * tao/DynamicInterface/DII_Invocation.cpp:
        * tao/DynamicInterface/ExceptionList.h:
        * tao/IORTable/Table_Adapter.cpp:
        * tao/PortableServer/MessagingS.cpp:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Strategized_Object_Proxy_Broker.cpp:
        * tao/PortableServer/Strategized_Object_Proxy_Broker.h:
        * tao/SmartProxies/Smart_Proxies.h:
        * tao/Strategies/Direct_Priority_Mapping.cpp:
        * tao/Strategies/UIOP_Endpoint.cpp:
        * tao/Strategies/advanced_resource.cpp:
        * examples/AMI/FL_Callback/Makefile:
        * examples/Buffered_Oneways/client.cpp:
        * examples/Callback_Quoter/Consumer_Handler.cpp:
        * examples/Callback_Quoter/Notifier_Input_Handler.cpp:
        * examples/Callback_Quoter/Notifier_i.h:
        * examples/Callback_Quoter/Supplier_i.cpp:
        * examples/Event_Comm/Consumer_Handler.cpp:
        * examples/Event_Comm/Consumer_Input_Handler.cpp:
        * examples/Event_Comm/Notifier_Handler.cpp:
        * examples/Event_Comm/Notifier_Server.cpp:
        * examples/Event_Comm/Supplier_Input_Handler.cpp:
        * examples/Load_Balancing/Identity_Client.cpp:
        * examples/Load_Balancing/Identity_Server.cpp:
        * examples/Load_Balancing/Load_Balancing_Service.cpp:
        * examples/Load_Balancing_persistent/Identity_Client.cpp:
        * examples/Load_Balancing_persistent/Identity_Server.cpp:
        * examples/Load_Balancing_persistent/Load_Balancing_Service.cpp:
        * examples/Logging/Logger_i.cpp:
        * examples/Logging/Logger_i.h:
        * examples/Logging/Logging_Service.cpp:
        * examples/Logging/Logging_Service_i.cpp:
        * examples/Logging/Logging_Test_i.cpp:
        * examples/OBV/Typed_Events/Client_i.cpp:
        * examples/OBV/Typed_Events/Server_i.cpp:
        * examples/POA/DSI/Database_i.h:
        * examples/POA/Default_Servant/client.cpp:
        * examples/POA/Default_Servant/server.cpp:
        * examples/POA/On_Demand_Loading/Servant_Manager.cpp:
        * examples/PluggableUDP/tests/UDP_i.h:
        * examples/PluggableUDP/tests/client.cpp:
        * examples/PluggableUDP/tests/server.cpp:
        * examples/Quoter/Factory_Finder_i.cpp:
        * examples/Quoter/Generic_Factory_i.cpp:
        * examples/Quoter/Quoter_i.cpp:
        * examples/Quoter/server.cpp:
        * examples/Simple/Simple_util.cpp:
        * examples/Simple/bank/AccountManager_i.cpp:
        * examples/Simple/bank/AccountManager_i.h:
        * examples/Simple/chat/Client_i.cpp:
        * examples/Simple/time-date/Time_Date.cpp:
        * examples/Simulator/Event_Supplier/DOVE_Supplier.cpp:
        * examples/Simulator/Event_Supplier/DualEC_Sup.cpp:
        * examples/Simulator/Event_Supplier/Event_Con.cpp:
        * examples/Simulator/Event_Supplier/Event_Con.h:
        * orbsvcs/Concurrency_Service/Concurrency_Service.cpp:
        * orbsvcs/IFR_Service/InterfaceS.cpp:
        * orbsvcs/IFR_Service/InterfaceS.h:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
        * orbsvcs/Time_Service/Clerk_i.cpp:
        * orbsvcs/Time_Service/Server_i.cpp:
        * orbsvcs/examples/CosEC/Factory/FactoryDriver.cpp:
        * orbsvcs/examples/Log/test/BasicLog_Test.cpp:
        * orbsvcs/examples/RtEC/MCast/MCast.cpp:
        * orbsvcs/examples/Security/Send_File/test_i.cpp:
        * orbsvcs/orbsvcs/IOR_Multicast.cpp:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/AV_Core.cpp:
        * orbsvcs/orbsvcs/AV/AV_Core.h:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.h:
        * orbsvcs/orbsvcs/AV/Flows_T.cpp:
        * orbsvcs/orbsvcs/AV/MCast.cpp:
        * orbsvcs/orbsvcs/AV/Policy.cpp:
        * orbsvcs/orbsvcs/AV/Policy.h:
        * orbsvcs/orbsvcs/AV/Protocol_Factory.cpp:
        * orbsvcs/orbsvcs/AV/RTCP.cpp:
        * orbsvcs/orbsvcs/AV/TCP.cpp:
        * orbsvcs/orbsvcs/AV/Transport.cpp:
        * orbsvcs/orbsvcs/AV/UDP.cpp:
        * orbsvcs/orbsvcs/AV/sfp.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Basic_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.h:
        * orbsvcs/orbsvcs/Event/EC_Null_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Priority_Dispatching.cpp:
        * orbsvcs/orbsvcs/Event/EC_Priority_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Sched_Factory.cpp:
        * orbsvcs/orbsvcs/Event/Module_Factory.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp:
        * orbsvcs/orbsvcs/Log/Log_i.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Dispatch_Command.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Map.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Proxy_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SupplierAdmin_i.cpp:
        * orbsvcs/orbsvcs/Property/CosPropertyService_i.h:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.h:
        * orbsvcs/orbsvcs/Sched/SchedEntry.h:
        * orbsvcs/orbsvcs/Security/Security_Current.cpp:
        * orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp:
        * orbsvcs/orbsvcs/Time/TAO_Time_Service_Clerk.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * orbsvcs/tests/AVStreams/Latency/control.cpp:
        * orbsvcs/tests/AVStreams/Latency/pong.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Simple/ftp.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/benchmark/client.cpp:
        * orbsvcs/tests/AVStreams/benchmark/server.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/Command_Handler.cpp:
        * orbsvcs/tests/Concurrency/CC_client.cpp:
        * orbsvcs/tests/Concurrency/NS_client.cpp:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.cpp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.h:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.h:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.h:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier_Driver.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Throughput.cpp:
        * orbsvcs/tests/Event/Basic/BCast.cpp:
        * orbsvcs/tests/Event/lib/Consumer.cpp:
        * orbsvcs/tests/Event/lib/Driver.h:
        * orbsvcs/tests/Event/lib/Supplier.cpp:
        * orbsvcs/tests/FaultTolerance/IOGR/test_i.cpp:
        * orbsvcs/tests/ImplRepo/airplane_client_i.cpp:
        * orbsvcs/tests/ImplRepo/airplane_i.cpp:
        * orbsvcs/tests/ImplRepo/airplane_server_i.cpp:
        * orbsvcs/tests/ImplRepo/nestea_client_i.cpp:
        * orbsvcs/tests/ImplRepo/nestea_i.cpp:
        * orbsvcs/tests/ImplRepo/nestea_server_i.cpp:
        * orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp:
        * orbsvcs/tests/LoadBalancing/Hash_ReplicaControl.cpp:
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.cpp:
        * orbsvcs/tests/Simple_Naming/client.cpp:
        * orbsvcs/tests/Time/Client_i.cpp:
        * performance-tests/Cubit/TAO/DII_Cubit/client.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Server.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_i.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/collocation_test.cpp:
        * performance-tests/Latency/ami-latency-client.cpp:
        * performance-tests/Latency/ami-throughput-client.cpp:
        * performance-tests/Latency/client.cpp:
        * performance-tests/Latency/st_client.cpp:
        * performance-tests/POA/Demux/client.cpp:
        * performance-tests/POA/Demux/demux_test_client.cpp:
        * performance-tests/POA/Demux/demux_test_i.cpp:
        * performance-tests/POA/Demux/demux_test_server.cpp:
        * performance-tests/POA/Demux/server.cpp:
        * performance-tests/POA/Object_Creation_And_Registration/registration.cpp:
        * performance-tests/Pluggable/PP_Test_Client.cpp:
        * performance-tests/Pluggable/PP_Test_Server.cpp:
        * performance-tests/RTCorba/Oneways/Reliable/client.cpp:
        * performance-tests/RTCorba/Oneways/Reliable/test_i.cpp:
        * performance-tests/Thruput/TAO/client.cpp:
        * performance-tests/Thruput/TAO/server.cpp:
        * tests/AMI/server.cpp:
        * tests/AMI_Timeouts/client.cpp:
        * tests/AMI_Timeouts/server.cpp:
        * tests/BiDirectional/test_i.cpp:
        * tests/BiDirectional_NestedUpcall/test_i.cpp:
        * tests/CDR/allocator.cpp:
        * tests/CDR/basic_types.cpp:
        * tests/CDR/tc.cpp:
        * tests/DSI_Gateway/client.cpp:
        * tests/DSI_Gateway/test_dsi.cpp:
        * tests/DSI_Gateway/test_i.cpp:
        * tests/Endpoint_Per_Priority/client.cpp:
        * tests/Faults/pong.cpp:
        * tests/InterOp-Naming/Server_i.cpp:
        * tests/MProfile/test_i.cpp:
        * tests/MProfile_Forwarding/test_i.cpp:
        * tests/MT_Client/client.cpp:
        * tests/MT_Client/orb_creation.cpp:
        * tests/MT_Server/test_i.cpp:
        * tests/Native_Exceptions/test_i.cpp:
        * tests/NestedUpcall/MT_Client_Test/client.cpp:
        * tests/NestedUpcall/MT_Client_Test/local_server.cpp:
        * tests/NestedUpcall/MT_Client_Test/server.cpp:
        * tests/NestedUpcall/Triangle_Test/Object_A_i.cpp:
        * tests/NestedUpcall/Triangle_Test/initiator.cpp:
        * tests/NestedUpcall/Triangle_Test/server_A.cpp:
        * tests/NestedUpcall/Triangle_Test/server_B.cpp:
        * tests/OctetSeq/OctetSeq.cpp:
        * tests/POA/Identity/Identity.cpp:
        * tests/Param_Test/any.cpp:
        * tests/Param_Test/anyop.cpp:
        * tests/Param_Test/complex_any.cpp:
        * tests/Param_Test/except.cpp:
        * tests/Param_Test/helper.h:
        * tests/Param_Test/options.cpp:
        * tests/Param_Test/param_test_i.cpp:
        * tests/Param_Test/results.cpp:
        * tests/Param_Test/server.cpp:
        * tests/Param_Test/ub_any_seq.cpp:
        * tests/Policies/Manipulation.cpp:
        * tests/Portable_Interceptors/Benchmark/client.cpp:
        * tests/QtTests/client.cpp:
        * tests/QtTests/client.h:
        * tests/QtTests/server.cpp:
        * tests/QtTests/test_i.h:
        * tests/RTCORBA/Client_Propagated/client.cpp:
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.cpp:
        * tests/RTCORBA/Private_Connection/client.cpp:
        * tests/Smart_Proxies/Benchmark/client.cpp:
        * tests/Smart_Proxies/On_Demand/Smart_Test_Factory.h:
        * tests/Timed_Buffered_Oneways/client.cpp:
          Add include for "tao/ORB_Core.h" or "tao/debug.h" when needed.

Mon Mar 26 14:32:41 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_sh.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interfaceFwd_ch.cpp:

          Cosmetic changes to source code.

        * TAO_IDL/be/be_visitor_operations/interceptors_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_sh.cpp:

          Cosmetic changes to generated code, mostly fixes to
          indentation problems.

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Changed generated code for the
          static const CORBA::Long _oc_*[] array to put each member
          on a new line, eliminating the extremely long line lengths
          that were generated previously. This will also enable the
          generated comments that describe the various typecode
          components (name, repo id, member count, etc.) to be
          easily visible and readable in the text editor of your
          choice.

Mon Mar 26 14:01:36 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/union.idl:

          Changed case labels for the union with a wchar discriminator
          to values which map to some displayable char value. This
          was causing a problem on QNX. Thanks to
          Mayur Deshpande <mayur@balar.ece.uci.edu> for reporting this.
