Thu Feb 21 13:15:50 2002  Chris Cleeland  <cleeland_c@ociweb.com>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init): Added new
	option, -SSLDHparams, to permit explicit specification of a
	Diffie-Hellman parameters file.

	Also, it will now try to load DH parameters from the certificate
	file if the -SSLDHparams options isn't used.

	This all fixes a problem where DSA certificates couldn't be used
	because no ephemeral DH keys could be exchanged since no
	parameters had been loaded.

Thu Feb 21 09:34:41 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* tao/ORB_Core.cpp (init): Added an (ACE_SignalHandler) cast to
	  SIG_IGN to avoid problems with GCC 3.0.1 on IRIX 6.5.  Thanks to
 	  Dan Green <dan.c.green@lmco.com> for reporting this.

Wed Feb 20 11:20:00 2002  Daniel Troesser  <troesser_d@ociweb.com>
        
        * Fixing Bugzilla Bug 1139:

	* tests/RTCORBA/check_supported_priorities.cpp

	  Changed to return a value of 2 when priorities are not supported.
	
	* tests/RTCORBA/Banded_Connections/run_test.pl
	* tests/RTCORBA/Client_Propagated/run_test.pl
	* tests/RTCORBA/Collocation/Collocation.cpp
	* tests/RTCORBA/Collocation/run_test.pl
	* tests/RTCORBA/Linear_Priority/run_test.pl
        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl
	* tests/RTCORBA/Policy_Combinations/run_test.pl
	* tests/RTCORBA/Server_Declared/run_test.pl
	* tests/RTCORBA/Thread_Pool/run_test.pl

	  Changed run_test.pl scripts to exit gracefully, without error,
	  if multiple priorities are not supported.

Tue Feb 19 17:57:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/CORBA_String.cpp:

          Fixed istream extraction operators to CORBA::String_var
          and CORBA::String out. Thanks to Patrick J Lardieri 
          <plardier@atl.lmco.com> for reporting the problem and to
          Carlos for suggesting the fix.

Tue Feb 19 09:11:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV.bor:
          Added ACE_QoS library

Tue Feb 19 08:58:34 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/GIOP_Message_State.cpp:
          Removed a space in the ACE_DEBUG macro for getting the byte order
          info.

Mon Feb 18 19:38:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
        * tao/IIOP_Transport.h:
        * tao/Domain/DomainS_T.h:
        * tao/PortableServer/ImplRepoS_T.h:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/PolicyS_T.h:
        * tao/Strategies/DIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.h:
        * TAO-INSTALL.html:

          Made TAO compiling with the Microsoft Visual C++ 7 compiler.
          Template classes cannot be exported when doing a dynamic build, so
          removed some export macro's from template definitions. When a class
          is derived from a class template then the class template must be
          explicit instantiated and be exported. To make sure that we only do
          this when a compiler supports this we introduced the new define
          ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION_EXPORT.

Mon Feb 18 11:27:00 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/AV_Core.cpp:
	* orbsvcs/orbsvcs/AV/Transport.cpp:
	  Check for ACE_HAS_WINSOCK2_GQOS in addition to ACE_HAS_RAPI
	  for compiling QoS enabled code.

	* orbsvcs/orbsvcs/AV/QoS_UDP.cpp:
	* orbsvcs/orbsvcs/AV/QoS_UDP.h:
	  Check for ACE_HAS_WINSOCK2_GQOS in addition to ACE_HAS_RAPI
	  for compiling QoS enabled code.
	  Add TAO_AV_UDP_QoS_Acceptor::qos_acceptor_addr_.  Populate
	  this address with localhost in open_default(), instead of the
	  any address (0.0.0.0).

	* orbsvcs/orbsvcs/AV/AV_Static.dsp:
	* orbsvcs/orbsvcs/AV/AV.dsp:
	* orbsvcs/orbsvcs/AV/AV.bor:
	  Add Fill_ACE_QoS.* and QoS_UDP.* to Win32 makefiles.

	* TAOACE.dsw:
	  Add ACE_QoS.dsp to workspace.

Mon Feb 18 09:26:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/ETCL/ETCL.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:

          Modified constraints and visitor to recognize values
          from all the fields of a structured event, not just
          'filterable_data', if they occur in a filter string.
          Also modified visitor's handling of enum values so no
          cast to CORBA::ULong is required when setting an enum
          value in a structured event. In the filter string,
          however, any rhs value to be compared against an enum
          value must still be a CORBA::ULong, since the spec
          does not allow enum values as valid literals in a filter
          string. Thanks to Bhaskara Rao G <bhaskar@mihy.mot.com>
          for reporting the problem with enums, and to Chad Elliott
          <elliott_c@ociweb.com> for reporting the problem with
          fields of the structured event.


Mon Feb 18 09:14:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_array.cpp:

	  Fixed arrays to be marked as 'local' if they
	  contain a local type at some level.

	* TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
	* TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/union_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

	  Added typecode generation and Any operator generation
	  for all local types. Sometimes these may have to be
	  inserted into CORBA policies, and for that we need
	  the Any operators.

        * tao/Any.h:
        * tao/Any.i:
        * tao/Any.cpp:

          Added a new flag that is set by an insertion operator when
          inserting a local type. Then the flag is checked when
          marshaling the Any to return 0 if the Any contains a local
          type at some level.

Mon Feb 18 08:53:14 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/tao_idl_static.dsp:
        * TAO_IDL/driver/drv_init.cpp:

          Made some changes to the project settings, and added an error message
          if no valid preprocessor path is set on Windows. Thanks to Joe Hayes
          <Joe.Hayes@lmco.com> for reporting the problem.

Sun Feb 17 11:52:36 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* orbsvcs/examples/Notify/Subscribe/Subscribe.cpp (Subscribe): Initialize
	  done_ to 0.  Thanks to Markus Wild <markus.wild@homag.de> for
 	  reporting this.

Mon Feb 18 08:37:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Fixed typecode generation and repo id calculation to remove
          the '_cxx_' prepended by the IDL compiler if the identifier
          is a C++ keyword. The prefix is necessary for C++ compilation
          of generated code, but should not go out over the wire. Thanks
          to Torsten Kuepper <Torsten.Kuepper@nokia.com> for pointing this
          out.

Mon Feb 18 01:45:07 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.cpp:
        * orbsvcs/orbsvcs/Sched/Strategy_Scheduler.cpp:
          Use ACE_OS::qsort() instead of global qsort() to fix build error
          with Borland C++Builder 6.

Sun Feb 17 16:32:32 2002  Venkita  <venkita@cs.wustl.edu>

        * TAO version 1.2.2 released.

Fri Feb 15 07:01:28 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Added fixes for the NULL ptr
 	  being accessed when stopping associated flows to a stream.
  	  Thanks to Martin Johnson for these fixes.

Thu Feb 14 17:03:48 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp (shutdown):
	* orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp (shutdown):
	  Fixed event channel shutdown problems:  the event channel
	  removes some Event_Handlers from the Reactor, but did not reset
	  the reactor pointer in those Event_Handlers. If the ORB Reactor is
	  deleted before the event channel (not that strange in some cases
	  because the Reactor) the Event_Handler destructor tries to
	  remove itself from the Reactor, and all hell breaks loose.

Thu Feb 14 15:20:19 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.cpp (supplier_non_existent):
	* orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.cpp (consumer_non_existent):
	* orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullConsumer.cpp (supplier_non_existent):
	* orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.cpp (consumer_non_existent):
	  Do not hold the mutex while checking if the peer stil exists.
	  Doing so can result in dead-locks whenever there is a nested
	  upcall as part of the request.
	  Thanks to Mark Hoffmann <Mark.Hoffmann@Axcelis.com> for
	  reporting this one.

	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
	* orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp:
	  Fixed shutdown() method, removing an Event_Handler from the
	  Reactor does not reset the reactor() pointer to 0, unfortunately
	  that means that the Event_Handler destructor tries to remove the
	  handler *again*, at which point the reactor may have been
	  destroyed.

Thu Feb 14 14:21:31 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/POA.cpp:
	* tao/ORB_Core.cpp:
	  Committing the files again. Somehow they didnt go to the repo
	  yesterday.

Thu Feb 14 16:16:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* COPYING: Updated copyright years.

Thu Feb 14 01:12:23 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* Makefile.bor: Renamed XML directory to ACEXML.  Thanks to Johnny
	  Willemsen for reminding this.

Wed Feb 13 17:21:00 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/POA.cpp :
	* tao/ORB_Core.cpp :
	  Moved code related to adding the policies to the mprofile
	  to TAO_ORB_Core::create_stub_object from
	  TAO_POA::create_stub_object to get the RTCORBA tests running.
	  The control wasnt coming to the TAO_POA::create_stub_object
	  and hence the policies were not added correctly.

Wed Feb 13 18:39:01 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/tests/Miop/McastHello/Makefile: Added a check for
	  compilation.
	* orbsvcs/orbsvcs/Makefile.PortableGroup: Added CosNaming to list
	  of libraries against which this needs to be linked.

Wed Feb 13 12:47:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/IFR_Service/ConstantDef_i.cpp: Changed the usage of
	  Auto_Basic_Ptr to Auto_Basic_Array_Ptr. Thanks to Johnny for
	  reporting this problem.

Tue Feb 12 17:53:31 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/POA.cpp (destroy_i):
	  Got a duplicate before releasing the poa so that it stays around
	  while we change its status and call the corresponding
	  interceptor's adapter_state_changed methods.

Tue Feb 12 16:01:25 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PICurrent.cpp (copy):

	  Now that the code has been greatly simplified, an ACE_TRY block
	  is no longer necessary.  Fixes an "unused label" warning in
	  emulated exception builds.

Tue Feb 12 15:02:38 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/ObjectReferenceTemplateC.i: Regenerated the code after the
	  change to the IDL compiler.

Tue Feb 12 14:52:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* TAO_IDL/be/be_valuetype.cpp (gen_helper_inline): Hacked up the
	  problem with the generation of add_ref () and remove_ref () for
	  value types. The fundamental problem is that, these methods are
	  getting generated within a #ifndef (__ACE_INLINE_) condition in
	  the header file. In the inlined file they are just generated
	  like the CDR operators. This gives problems with Win32 debug
	  builds. The present hack adds a #if defined (__ACE_INLINE__)
	  around the declaration of add_ref () and remove_ref (). This
	  problem needs to be revisited later. Any other quick fixes
	  breaks builds.

Tue Feb 12 06:01:12 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/examples/RtEC/MCast/MCast.cpp: Making this checkin for
	  Oliver Kellogg. Fixed comments about exception handling in the
	  code.

Mon Feb 11 16:32:00 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PICurrent.h:

	  Disable the "C4251" warning in MSVC++ builds.  MSVC++ is being
	  too paranoid about a class it thinks should be exported.

	  (Table):

	  The underlying slot table is now an array of CORBA::Anys.  The
	  memory management headaches of using an array of pointers to
	  void were becoming too much of a hassle.  This was motivated by
	  memory leak and fix reported by Grig <grig@plesk.com>.

	  (tsc_to_rsc_):

	  New flag that indicates if the TSC is to be copied to the RSC.
	  If false, then the RSC must be deep copied upon leaving the
	  request scope and entering the thread scope.  This is necessary
	  since the RSC slot table is no longer available upon leaving the
	  thread scope, meaning that a logical copy is not enough.

	* tao/PICurrent.cpp (~TAO_PICurrent_Impl):

	  No longer any need to deallocate the elements of the underlying
	  slot table since it contains "first class citizens," i.e. they
	  will automatically be cleaned up when the array is destroyed.

	  (get_slot):

	  Updated to retrieve data from an array of CORBA::Anys instead of
	  an array of pointers to void.

	  (set_slot, copy):

	  The switch to an array of CORBA::anys greatly simplifies these
	  methods.  It also happens to fix a memory leak and improves the
	  efficiency of the code.

	  (~TAO_PICurrent_Guard):

	  Set the "peer" in the TSC when logically copying from the
	  contents of the TSC to the RSC.  The TSC may have to callback on
	  the RSC (i.e. the "peer") if the TSC is modified after it has
	  been logically copied to the RSC.  Fixes a problem where the RSC
	  and TSC were not treated as separate entities due to the logical
	  copying that occurs.

	* tests/Portable_Interceptors/PICurrent/ServerORBInitializer.cpp
	  (post_init):

	  Pass a reference to the PICurrent object down to the server
	  request interceptor created in this method.  The interceptor
	  will invoke methods on the PICurrent at a later time.  Saves a
	  resolve_initial_references() call in the critical path.

	* tests/Portable_Interceptors/PICurrent/ServerRequestInterceptor.h
	  (pi_current_):

	  Cache a reference to the PICurrent object.

	* tests/Portable_Interceptors/PICurrent/ServerRequestInterceptor.cpp
	  (send_reply):

	  Added another test that verifies that the RSC and TSC are
	  treated as a separate entities.  This is necessary since TAO
	  logically copies the contents of the TSC to the RSC, and only
	  deep copies if the contents of either are about to be modified.

	* tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor.cpp:
	  (send_request):

	  Corrected debugging output.

	* tests/Portable_Interceptors/PICurrent/README:

	  New file that explains what the test does.

Mon Feb 11 18:20:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/ORT/ORT_test_IORInterceptor.h:
	* orbsvcs/examples/ORT/Server_IORInterceptor.h:
	* tao/PortableServer/Object_Adapter.h:
	* tao/PortableServer/ObjectReferenceFactory.h:
	* tao/PortableServer/ObjectReferenceTemplate.h: More fuzz errors.

Mon Feb 11 18:02:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/PortableServer/POAManager.h:
	* tests/Oneways_Invoking_Twoways/Receiver_i.h :
	* tests/Oneways_Invoking_Twoways/Sender_i.h:
	* orbsvcs/tests/FaultTolerance/IOGR/Client_i.h:
	* orbsvcs/tests/FaultTolerance/IOGR/Manager.h: More fuzz errors.

Mon Feb 11 17:56:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Base_Transport_Property.h:
	* tao/Cache_Entries.h:
	* tao/Policy_Manager.h:
	* tao/Transport_Cache_Manager.h:
	* tao/Transport_Descriptor_Interface.h: Fixed Fuzz errors from
	  #pragma warnings.

Mon Feb 11 16:04:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Fault_Tolerance_Service.h:
	* tao/Connection_Handler.h:
	* tao/Fault_Tolerance_Service.h:
	* tao/GIOP_Message_Generator_Parser.h:
	* tao/GIOP_Message_Generator_Parser_10.h:
	* tao/GIOP_Message_Generator_Parser_11.h:
	* tao/GIOP_Message_Generator_Parser_12.h: Removed the #pragma
	  warning (push) from the above files as they are not needed in
	  the first place. Thanks to Ossama for pointing these out.

Sun Feb 10 13:16:45 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/ImplRepo_Service/Options.cpp:
	  Include yet another missing "tao/Environment.h"

Sun Feb 10 09:08:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/IORManipulation/IORTest.cpp:
	* orbsvcs/performance-tests/EC_Latency/Client_Task.cpp:
	* orbsvcs/performance-tests/EC_Scalability/Client_Task.cpp:
	* orbsvcs/IFR_Service/IFR_Server.cpp: All of the above files
	  needed an include of tao/Environment.h to get rid of compile
	  errors in the TRU 64 build.

Sat Feb  9 23:40:31 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/PICurrent/client.bor (OBJFILES):
	* tests/Portable_Interceptors/PICurrent/client.dsp:

	  Added new client request interceptor related files to the list
	  of sources to compile.

Sat Feb  9 23:27:23 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ClientRequestInfo_i.h (rs_pi_current_):

	  New class member that is the request-scope current (RSC).

	* tao/ClientRequestInfo_i.cpp (TAO_ClientRequestInfo_i):

	  Logically copy the thread-scope PICurrent (TSC) object to the
	  request-scope PICurrent (RSC) object.  This corrects the
	  semantics of RSC on the client side.  The RSC is always
	  independent of the TSC.  Note that deep copies are automatically
	  done when necessary when calling set_slot() via the PICurrent
	  object, so there is no need to worry about that case here.  This
	  fix is also part of an optimization.  Instead of one TSS access
	  each time the RSC's get_slot() method is called (can be many
	  times in a given invocation), only one TSS access now occurs
	  when setting up the invocation.

	  (get_slot):

	  Retrieve the slot contents from the RSC class member instead of
	  TSC.  This is the correct behavior, as opposed to the previous
	  where the slot contents were always retrieved from the TSC.
	  This also limits the number of PICurrent related TSS accesses
	  per invocation to one instead of potentially many.  [Bug 1128]

	  (copy):

	  Once a deep copy has been made, reset the pointer to the
	  logically copied slot table to zero.  At that point, the RSC and
	  TSC are completely separate entities.

	* tao/PICurrent.h (TAO_PICurrent_Guard):
	* tao/PICurrent.cpp (TAO_PICurrent_Guard):

	  Removed superfluous constructor.  The above changes obviate it.

	* tests/Portable_Interceptors/PICurrent/ClientORBInitializer.h:
	* tests/Portable_Interceptors/PICurrent/ClientORBInitializer.cpp:
	* tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor.h:
	* tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor.cpp:

	  New client request interceptor related files that test the
	  client side RSC/TSC semantics.

	* tests/Portable_Interceptors/PICurrent/client.cpp (main):

	  Insert data into the clients allocated PICurrent slot prior to
	  invoking the test method, and then retrieve the data after
	  invoking the test method.  This merely verifies that the data
	  inserted into TSC within the client request interceptor is
	  actually available to the calling thread outside of the client
	  request interceptor.

Sat Feb  9 15:21:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* TAO_IDL/be/be_valuetype.cpp: Added the keywords
	  TAO_NAMESPACE_STORAGE_CLASS to the declarations of add_ref ()
	  and remove_ref (). This should fix link errors in Win32.

	* tao/ObjectReferenceTemplateC.h:
	* tao/ObjectReferenceTemplateC.i: Regenerated code for this
	  class. Looks like other classes dont need regeneration.

Sat Feb  9 09:36:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* docs/releasenotes/amh.html (href): Removed some wizard generated
	  stuff. Still a lot more remains.

Sat Feb  9 08:24:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* docs/releasenotes/amh.html: Removed references to pages in the
	  docs section through Dr.Schmidt's home page. This also fixes
	  fuzz errors.

Sat Feb 09 01:58:00 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/IORInfo.cpp (current_factory):

	  Increment the reference count before returning a pointer to the
	  current factory.  Corrects an off-by-one reference count error.

Sat Feb 09 00:30:38 2002  Mayur Deshpande  <mayur@ics.uci.edu@>

	* docs/releasenotes/index.html:
	* docs/releasenotes/amh.html:

          Release Notes for Asynchronous Method Handling (AMH)

Fri Feb 08 22:20:38 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/Environment.cpp (operator=):

	  Carlos doesn't know how to swap two variables.  We need to have
	  a generic version.  Fixes a seg fault in emulated exception
	  builds.

Fri Feb 08 21:27:32 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Environment.cpp (exception_type):

	  Exceptions in the PortableServer module are user exceptions, not
	  system exceptions.  Removed code that caused them to be
	  considered system exceptions.

Sat Feb  9 04:57:45 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/PortableServer/POA.cpp: Added a template instantiation for
	  ACE_Array_Base <IOP::ProfileId>. This shold fix link errors in
	  Sun CC builds.

Fri Feb  8 21:51:05 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/PortableServer/POA.cpp: Fixed a redefinition error in
	  Win32.

Fri Feb  8 19:36:33 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/ServerRequestInfo.cpp (adapter_name):

	  Corrected and simplified code that incorrectly assigned the
	  AdapterName sequence to a CORBA::StringSeq.  Just return the
	  value, no need to assign the return value to a temporary
	  variable of incorrect type.

	* tao/PortableServer/POA.cpp (adapter_name_i):

	  It is technically illegal to initialize a POA_var with zero.
	  Fixed.

Fri Feb  8 18:27:13 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/POAManager.h:

	  Removed the static AdapterManagerId.  It wasn't needed, and it
	  wasn't accessed/modified in an atomic way.

	* tao/PortableServer/POAManager.i (generate_manager_id):

	  New method used for generating the AdapterManagerId in an atomic
	  way.

	* tao/PortableServer/POAManager.cpp (TAO_POA_Manager):

	  Removed broken code that incremented a static AdapterManagerId
	  counter in a non-thread-safe way.  Call the new
	  generate_manager_id() method to generate an ID in an atomic
	  way.  Fixes a race condition.

	* tao/PortableServer/POA.i (get_manager_id):
	* tao/PortableServer/POA.cpp (set_obj_ref_factory):
	* tao/PortableServer/POAManager.cpp
	  (activate_i, discard_requests_i):
	* tao/PortableServer/ObjectReferenceTemplate.cpp (adapter_name):

	  Fixed syntax errors related to emulated exceptions.

Fri Feb  8 17:40:42 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (get_protocols_hooks):

	  Fixed a syntax error.  ACE_CHECK_RETURN, not ACE_CHECK!

	  (run):

	  Fixed an unused argument warning.

Fri Feb  8 16:40:38 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ORB_Core.cpp :
	* tao/ORB_Core.h :
	  Removed the unnecessary and wrongly places open call.
	  Removed the no-longer needed open () method.

	* tao/PortableServer/POAManager.h :
	* tao/PortableServer/POAManager.cpp:
	  Modified the way in which the POAManager Id is set.
	  Added a new public method to return the manager id.

	* tao/PortableServer/ObjectReferenceTemplate.h:
	  Removed unnecessary includes.

	* tao/PortableServer/ObjectReferenceTemplate.cpp :
	* tao/PortableServer/ObjectReferenceFactory.cpp:
	  Assigned and returned variables in memory-correct
	  syntax following the C++ mapping rules.

	* tao/PortableServer/IORInfo.cpp :
	  Removed the fixed review comments. Incremented the reference
	  count of the adapter_template where needed.

	* tao/PortableServer/Object_Adapter.cpp (open):
	  Re-added the open_default_resources method call in the open
	  method which is the right place to do.

	* tao/PortableServer/POA.cpp :
	* tao/PortableServer/POA.h :
	  Removed unnecessary reinterpret casts. Modified the
	  instantiation of ObjectReferenceTemplate in accordance with its
	  modified constructor. And, similar other minor but important
	  changes such as setting the default value of the private
	  variable adapter_state_. Invoked the adapter_state_changed
	  methods when they should have been called.

	  Modified the signature of the adapter_name_i method to return a
	  PortableInterceptor::AdapterName * instead of returning
	  CORBA::StringSeq *. Fixed its implementation to reduce locks and
	  return the correct format.

	  Modified the signature of adapter_state_changed method to take
	  the reference to the object reference template sequence rather
	  than a pointer to it.

	  Removed the call to TAO_ORB_Core::open from the key_to_stub_i
	  method since its not needed here.

	  Modified the implementation of the save_ior_component* methods
	  to save all the IOP::TaggedComponents passed it. With the way it
	  was done before, if the method was called more than once, the
	  previous values are over written. Modified accordingly the
	  implementation of create_stub_object.

	* tao/PortableServer/POA.i :
	  Modified the implementation of TAO_POA::get_manager_id method to
	  invoke the get_manager_id method in TAO_POA_Manager.

	* tao/ObjectReferenceTemplateC.h (PortableInterceptor):
	* tao/ObjectReferenceTemplateC.cpp (_tao_unmarshal_v):
	  Re-added the _tao_marshal_v and _tao_unmarshal_v internal
	  methods.

	* orbsvcs/examples/ORT/Gateway_i.cpp (invoke):
	  Added the missing ACE_ENV macros.

	* tests/ORT/server.cpp :
	  Added a missing ACE_ENV macro.

	* tests/ORT/README:
	  Updated on commands to run the test.

Fri Feb  8 14:12:54 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* docs/tutorials/Quoter/index.html: Updated the tutorial to make
	  it clear that the files shouldn't be obtained individually, but
 	  instead used from the version of ACE+TAO downloaded wholesale
 	  from the web.  Thanks to Donna Maskell <Donna.Maskell@udlp.com>
 	  for this suggestion.

Fri Feb  8 12:33:29 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/DLL_ORB.cpp:
	* tao/Policy_Set.cpp:
	  The Tru64/CXX builds require #including "tao/Environment.h",
	  this is one of the few builds that does not define
	  ACE_TEMPLATES_REQUIRE_SOURCE.

Fri Feb  8 12:25:55 2002  Carlos O'Ryan  <coryan@uci.edu>

	* ObjectReferenceTemplateC.h:
	* diffs/ObjectReferenceTemplate.diff:
	  Add missing #include for "tao/Exception.h".

	* Domain/DomainS.cpp:
	* diffs/Domain.diff:
	  Since we link TAO_IFR_Client we can use the CORBA::InterfaceDef
	  operators directly instead of using the IFR_Client_Adapter, that
	  makes the patches shorter and, therefore, makes for easier long
	  term maintainance.

	* Domain/DomainS.h:
	* diffs/Domain.diff:
	  Fixed the export macros.

	* PortableServer/Default_ORTC.cpp:
	* PortableServer/diffs/Default_ORT.diff:
	  Add missing #include for "tao/ValueFactory.h", only required in
	  minimum CORBA builds.

	* PortableServer/ObjectReferenceFactory.h:
	* PortableServer/ObjectReferenceTemplate.h:
	  Fixed throw specs for make_object()

	* diffs/Policy.diff:
	  Generate a new patch file that includes the export macro changes
	  on the PolicyS.h file.

Fri Feb  8 13:55:44 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Xt_Stopwatch/server.cpp (main): Added a patch for single
	  threaded builds. Thanks to Marco Kranawetter
	  <Marco.Kranawetter@icn.siemens.de> for the patch.

	* tests/Xt_Stopwatch/Makefile: Fixed dependency.

Thu Feb 08 12:08:09 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* examples/RTCORBA/Activity/activity_export.h: Added a new export
	  definition file. This is needed for Win32 based systems.

	* examples/RTCORBA/Activity/Thread_Task.h:
	* examples/RTCORBA/Activity/Activity.h:
	* examples/RTCORBA/Activity/Job_i.h:
	* examples/RTCORBA/Activity/POA_Holder.h:
	* examples/RTCORBA/Activity/Periodic_Task.h:
	* examples/RTCORBA/Activity/Task_Stats.h:
	* examples/RTCORBA/Activity/Thread_Task.h: Added the export flag
	  to all the header files.

	* examples/RTCORBA/Activity/Builder.cpp:
	* examples/RTCORBA/Activity/Builder.h: Changed the svc_conf macros
	  to use the export flags.

	* examples/RTCORBA/Activity/activity.dsp: Added the export
	  definition file. Fixed the release build configurtaion. It was
	  broken.

	  The above fixes should fix the annoying warnings in Win32 builds.

Thu Feb 07 22:52:07 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/PortableServer/PolicyS.h:
	  Fixed export macros, I still need to re-generate the patch
	  files.

Thu Feb 07 17:17:01 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp:
	* tao/PortableServer/TAO_PortableServer.dsp:
	* tao/PortableServer/TAO_PortableServer_Static.dsp:
	  Add new files to MSVC projects.

Thu Feb  7 17:06:24 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/Exception.h:
	* tao/Exception.i:
	* tao/Exception.cpp:
	* TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
	* TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
	  Generate new _tao_duplicate() virtual method for all
	  exceptions.  This method performs a deep-copy of the exception.
	  Also made sure that the operations are generated in the same
	  order on both the header and source files.

	* tao/Environment.cpp:
	  Use the new _tao_duplicate() operation to safely keep a copy of
	  the exception.
	  Made some of the assignment operators exception safe.
	  Documented the memory management rules for the exception()
	  attribute.

	* TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
	  Generate a space between the export macro and the return type
	  (void) for the <<= and >>= operators.

	* TAO_IDL/util/utl_scope.cpp:
	  Update comments about TypeCode and TCKind inside the CORBA::
	  namespace.

	* examples/RTCORBA/Activity/POA_Holder.cpp:
	  Use CORBA::Policy instead of CORBA_Policy.

	* tao/Bounds.pidl:
	  Add new pre-compiled IDL source for the CORBA::Bounds exception.

	* tao/BoundsC.h:
	* tao/BoundsC.i:
	* tao/BoundsC.cpp:
	  Re-generate the code to take advantage of namespaces, no need to
	  keep complicated patches around.

	* tao/Dynamic.pidl:
	* tao/Current.pidl:
	* tao/GIOP.pidl:
	* tao/IIOP.pidl:
	* tao/OctetSeq.pidl:
	* tao/StringSeq.pidl:
	* tao/TAO.pidl:
	* tao/TimeBase.pidl:
	* tao/iiop_endpoints.pidl:
	* tao/IFR_Client/IFR_Base.pidl:
	* tao/IORTable/IORTable.pidl:
	* tao/PortableServer/PortableServer.pidl:
	* tao/RTCORBA/RTCORBA.pidl:
	  Update the comments about how the IDL compiler should be
	  invoked.
	  In some cases I changed the documentation to use Doxygen-style
	  comments.

	* tao/Domain.pidl:
	* tao/IOP.pidl:
	* tao/ObjectReferenceTemplate.pidl:
	* tao/PortableInterceptor.pidl:
	* tao/DynamicAny/DynamicAny.pidl:
	  Change the comments to Doxygen style, and update them to
	  describe the use of a single patch file, and reflect the fact
	  that we take advantage of namespaces now.

	* tao/DomainC.h:
	* tao/DomainC.i:
	* tao/DomainC.cpp:
	* tao/IOPC.h:
	* tao/IOPC.i:
	* tao/IOPC.cpp:
	* tao/ObjectReferenceTemplateC.h:
	* tao/ObjectReferenceTemplateC.i:
	* tao/ObjectReferenceTemplateC.cpp:
	* tao/PortableInterceptorC.h:
	* tao/PortableInterceptorC.i:
	* tao/PortableInterceptorC.cpp:
	* tao/WrongTransactionC.h:
	* tao/WrongTransactionC.cpp:
	* tao/Domain/DomainS.h:
	* tao/Domain/DomainS.i:
	* tao/Domain/DomainS.cpp:
	* tao/Domain/DomainS_T.h:
	* tao/Domain/DomainS_T.i:
	* tao/Domain/DomainS_T.cpp:
	* tao/DynamicAny/DynamicAnyC.h:
	* tao/DynamicAny/DynamicAnyC.i:
	* tao/DynamicAny/DynamicAnyC.cpp:
	* tao/IORManipulation/IORC.h:
	* tao/IORManipulation/IORC.i:
	* tao/IORManipulation/IORC.cpp:
	* tao/IORTable/IORTableC.h:
	* tao/IORTable/IORTableC.i:
	* tao/IORTable/IORTableC.cpp:
	* tao/PortableServer/ImplRepoC.h:
	* tao/PortableServer/ImplRepoC.i:
	* tao/PortableServer/ImplRepoC.cpp:
	* tao/PortableServer/ImplRepoS.h:
	* tao/PortableServer/ImplRepoS.i:
	* tao/PortableServer/ImplRepoS.cpp:
	* tao/PortableServer/ImplRepoS_T.h:
	* tao/PortableServer/ImplRepoS_T.i:
	* tao/PortableServer/ImplRepoS_T.cpp:
	* tao/RTCORBA/RTCORBAC.h:
	* tao/RTCORBA/RTCORBAC.i:
	* tao/RTCORBA/RTCORBAC.cpp:
	* tao/PortableServer/PortableServerC.h:
	* tao/PortableServer/PortableServerC.i:
	* tao/PortableServer/PortableServerC.cpp:
	  Re-generate the code to get the new CORBA::Exception methods.

	* tao/IOP_N.pidl:
	  Removed, this file is no longer used or part of any
	  specification.

	* tao/InterfaceDef.pidl:
	  New file to forward declare CORBA::InterfaceDef, makes the
	  generation of other pre-compiled IDL files *much* simpler.

	* tao/ORB.pidl:
	* tao/InvalidName.pidl:
	  New file to generate CORBA::ORB::InvalidName, unfortunately the
	  code has to be manually inserted into tao/ORB.{h,i,cpp}, but it
	  is still simpler than hacking the implementation "manually".
	  Removed the ORB.pidl file.

	* tao/ORB.h:
	* tao/ORB.cpp:
	  Use the newly generated source for CORBA::ORB::InvalidName.

	* tao/Makefile:
	* tao/Makefile.am:
	* tao/Makefile.bor:
	  Add the new Policy_ForwardC.* files.

	* tao/Policy.pidl:
	  Move some of the declarations to Policy_Forward.pidl, using a
	  separate file to forward declare CORBA::Policy simplified the
	  generation and patching of the code, as it breaks the cycle
	  between CORBA::Policy and CORBA::Object.
	  In detail: CORBA::Policy derives from CORBA::Object, but the
	  latter uses CORBA::Policy as arguments to the
	  set_policy_override operations (and friends), using a forward
	  declaration allow us to use the arguments without requiring a
	  complete definition (in the header file).
	  Update the comments to Doxygen style.
	  Document the use of a single patch file.

	* tao/PolicyC.h:
	* tao/PolicyC.i:
	* tao/PolicyC.cpp:
	* tao/PortableServer/PolicyS.h:
	* tao/PortableServer/PolicyS.i:
	* tao/PortableServer/PolicyS.cpp:
	* tao/PortableServer/PolicyS_T.h:
	* tao/PortableServer/PolicyS_T.i:
	* tao/PortableServer/PolicyS_T.cpp:
	  Re-generate the code using the new .pidl file.

	* tao/Policy_Forward.pidl:
	  Add new pre-compiled IDL file to declare the basic
	  Policy-related types and forward declare CORBA::Policy.

	* tao/Policy_ForwardC.h:
	* tao/Policy_ForwardC.i:
	* tao/Policy_ForwardC.cpp:
	  Add new pre-compiled IDL files.

	* tao/Policy_Manager.h:
	* tao/Policy_Manager.i:
	  Use CORBA::InvalidPolicies instead of CORBA_InvalidPolicies.

	* tao/Pollable.pidl:
	* tao/PollableC.h:
	* tao/PollableC.i:
	* tao/PollableC.cpp:
	  Take advantage of namespaces to simplify the code generation.

	* tao/Object.h:
	* tao/Policy_Validator.h:
	* tao/Protocols_Hooks.h:
	* tao/RTCORBA/RT_Endpoint_Utils.h:
	  Add #include for Policy_ForwardC.h

	* tao/Synch_Reply_Dispatcher.h:
	  Add missing #include

	* tao/Typecode.h:
	* tao/Typecode.cpp:
	  Update the TypeCode::Bounds and TypeCode::BadKind exceptions to
	  look more like what the IDL compiler would generated.
	  I wanted to use real pre-compiled IDL for them, but it is
	  impossible without significant changes to the IDL compiler: the
	  CORBA::TypeCode pseudo-object is automagically inserted by the
	  IDL compiler, and any attempt to define it in a .pidl file would
	  fail.

	* tao/Typecode_Constants.cpp:
	  Remove a number of TypeCodes that are defined in the generated
	  code.

	* tao/WrongTransaction.pidl:
	  Add missing pre-compiled IDL source.

	* tao/corbafwd.h:
	  Removed obsolete comments about alignment and packing, the code
	  the comments made reference was removed looong time ago.
	  Removed a number of forward references that are better declared
	  in the generated (from PIDL) files.

	* tao/DynamicInterface/Unknown_User_Exception.h:
	* tao/DynamicInterface/Unknown_User_Exception.cpp:
	  Update hand-crafted code to include the new _tao_duplicate()
	  method.  Unfortunately there is no PIDL source for this file,
	  and I could not figure out how to reverse-engineer one of them.

	* tao/IOR.pidl:
	* tao/IORManipulation/IOR.pidl:
	  Moved the IOR.pidl file to the only directory where it is
	  actually used.

	* tao/PortableServer/Default_ORT.pidl:
	* tao/PortableServer/Default_ORTC.h:
	* tao/PortableServer/Default_ORTC.i:
	* tao/PortableServer/Default_ORTC.cpp:
	  Add concrete valuetypes derived from
	  PortableInterceptor::ObjectReferenceFactory and
	  PortableInterceptor::ObjectReferenceTemplate, otherwise it is
	  impossible to create concrete instances of the valuetypes.

	* tao/PortableServer/ObjectReferenceFactory.h:
	* tao/PortableServer/ObjectReferenceTemplate.h:
	  Derive from the versions in OBV_TAO_Default_ORT.

	* tao/PortableServer/AMH_Response_Handler.h:
	  Re-order #includes

	* tao/PortableServer/diffs/ImplRepo.diff:
	* tao/PortableServer/diffs/PortableServer.diff:
	* tao/PortableServer/diffs/Default_ORT.diff:
	* tao/RTCORBA/diffs/RTCORBA.diff:
	* tao/RTCORBA/diffs/RTCORBAC.cpp.diff:
	* tao/RTCORBA/diffs/RTCORBAC.h.diff:
	* tao/RTCORBA/diffs/RTCORBAC.i.diff:
	* tao/DynamicAny/diffs/DynamicAny.diff:
	* tao/DynamicAny/diffs/DynamicAnyC.h.diff:
	* tao/DynamicAny/diffs/DynamicAnyC.i.diff:
	* tao/DynamicAny/diffs/DynamicAnyC.cpp.diff:
	* tao/IORManipulation/diffs/IOR.diff:
	* tao/IORManipulation/diffs/IORC.cpp.diff:
	* tao/IORManipulation/diffs/IORC.h.diff:
	* tao/IORManipulation/diffs/IORC.i.diff:
	* tao/IORTable/diffs/IORTable.diff:
	* tao/IORTable/diffs/IORTableC.cpp.diff:
	* tao/IORTable/diffs/IORTableC.h.diff:
	* tao/IORTable/diffs/IORTableC.i.diff:
	* tao/diffs/Bounds.diff:
	* tao/diffs/Current.pidl.diff:
	* tao/diffs/Domain.diff:
	* tao/diffs/Domain.pidl.diff:
	* tao/diffs/DomainC.cpp.diff:
	* tao/diffs/DomainC.h.diff:
	* tao/diffs/DomainC.i.diff:
	* tao/diffs/DomainS.cpp.diff:
	* tao/diffs/DomainS.h.diff:
	* tao/diffs/DomainS.i.diff:
	* tao/diffs/DomainS_T.cpp.diff:
	* tao/diffs/DomainS_T.h.diff:
	* tao/diffs/DomainS_T.i.diff:
	* tao/diffs/IOP.diff:
	* tao/diffs/IOPC.cpp.diff:
	* tao/diffs/IOPC.h.diff:
	* tao/diffs/IOPC.i.diff:
	* tao/diffs/ObjectReferenceTemplate.diff:
	* tao/diffs/OctetSeqC.cpp.diff:
	* tao/diffs/Policy.diff:
	* tao/diffs/Policy.pidl.diff:
	* tao/diffs/PolicyC.cpp.diff:
	* tao/diffs/PolicyC.h.diff:
	* tao/diffs/PolicyC.i.diff:
	* tao/diffs/PolicyS.cpp.diff:
	* tao/diffs/PolicyS.h.diff:
	* tao/diffs/PolicyS.i.diff:
	* tao/diffs/PolicyS_T.cpp.diff:
	* tao/diffs/PolicyS_T.h.diff:
	* tao/diffs/PolicyS_T.i.diff:
	* tao/diffs/Policy_Forward.diff:
	* tao/diffs/Pollable.diff:
	* tao/diffs/PollableC.cpp.diff:
	* tao/diffs/PollableC.h.diff:
	* tao/diffs/PollableC.i.diff:
	* tao/diffs/PortableInterceptor.diff:
	* tao/diffs/PortableInterceptorC.cpp.diff:
	* tao/diffs/PortableInterceptorC.h.diff:
	* tao/diffs/PortableInterceptorC.i.diff:
	* tao/diffs/PortableServerC.cpp.diff:
	* tao/diffs/PortableServerC.h.diff:
	* tao/diffs/PortableServerC.i.diff:
	* tao/diffs/WrongTransaction.diff:
	  Removed the per-file patches.
	  Generate a new patch file.

	* TAO_IDL/ast/ast_module.cpp:
	* TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
	* tao/NVList.cpp:
	* tests/Param_Test/Makefile:
	* tao/Service_Context.cpp:
	  Cosmetic fixes.

	* TAO_IDL/Makefile.BE:
	* TAO_IDL/Makefile.EXE:
	* TAO_IDL/Makefile.FE:

Thu Feb  7 16:37:16 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_interface.cpp:
	  Fixed (this time I did test it) the operation table for builds
	  without gperf.

Thu Feb  7 13:13:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Added new substate and used it in generation of AMH response
          handler operations, where the environment arg is not used
          in the body if there are no other args.

Thu Feb  7 09:12:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/fe_init.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Added partial support for the use of 'ValueBase' in
          IDL files.

Wed Feb  6 18:56:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ORB.cpp:
        * tao/corbafwd.h:
        * tao/orb.idl:

          Added the enum TCKind to orb.idl, and added the CDR operators
          for it to corbafwd.h and ORB.cpp.

        * TAO_IDL/ast/ast_module.cpp:

          Removed the addition of TCKind to the CORBA module, when orb.idl
          is included. It now gets added directly from the idl file.

        * TAO_IDL/util/utl_scope.cpp:

          Fixed lookup function, and changed many instances of iterators
          to be created on the stack. Thanks to Carlos O"Ryan <coryan@uci.edu>
          for reporting the bug in the handling of TCKind.

Wed Feb  6 16:34:49 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_valuetype.h:

          Minor cosmetic change.

        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:

          Fixed generated code to eliminate an unused arg warning
          for _tao_marshal_state(), in the special case when
          the CDR stream arg is not used in the function body.

        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:

          Added a generated space between the export macro and the
          return type of the operator.

Wed Feb  6 13:36:00 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (shutdown):

	  Synchronize the ORB Core state during shutdown.  Fixes a race
	  condition.

Tue Feb 05 15:37:15 2002  Boris Kolpackov  <bosk@ipmce.ru>

	* TAO_IDL/be/be_visitor_valuetype/valuetype.cpp
	  Fixed minor bug with type selection for field visitor.

Mon Feb 04 09:19:53 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  AMH_*ExceptionHolder valuetypes do not need to derive from
	  Messaging::ExceptionHolder, that would make it possible to use
	  AMH even if CORBA Messaging is disabled at compile time, plus it
	  makes the ExceptionHolders lighter-weight.

	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	  Improved the checks to detect *_excep() operations.
	  Generate the right call to the raise_*() operation.
	  Fixed indentation in the generated code.

	* TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
	  Started changes to add the ExceptionHolder factory method.

	* TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
	  Cosmetic fixes.

Mon Feb  4 10:47:52 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
	* TAO_IDL/ast/ast_enum.cpp:
	* TAO_IDL/ast/ast_exception.cpp:
	* TAO_IDL/ast/ast_factory.cpp:
	* TAO_IDL/ast/ast_interface.cpp:
	* TAO_IDL/ast/ast_module.cpp:
	* TAO_IDL/ast/ast_operation.cpp:
	* TAO_IDL/ast/ast_recursive.cpp:
	* TAO_IDL/ast/ast_structure.cpp:
	* TAO_IDL/ast/ast_union.cpp:
	* TAO_IDL/ast/ast_union_branch.cpp:
	* TAO_IDL/be/be_decl.cpp:
	* TAO_IDL/be/be_interface.cpp:
	* TAO_IDL/be/be_interface_strategy.cpp:
	* TAO_IDL/be/be_operation.cpp:
	* TAO_IDL/be/be_structure.cpp:
	* TAO_IDL/be/be_sunsoft.cpp:
	* TAO_IDL/be/be_union.cpp:
	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	* TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
	* TAO_IDL/be/be_visitor_scope.cpp:
	* TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/interceptors_exceptlist.cpp:
	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	* TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
	* TAO_IDL/be/be_visitor_root/root_sth.cpp:
	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
	* TAO_IDL/be/be_visitor_union/union_cs.cpp:
	* TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
	* TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
	* TAO_IDL/be_include/be_attribute.h:
	* TAO_IDL/fe/fe_interface_header.cpp:
	* TAO_IDL/fe/idl.yy:
	* TAO_IDL/fe/y.tab.cpp:
	* TAO_IDL/fe/y.tab.cpp:.diff:
	* TAO_IDL/fe/y.tab.h:
	* TAO_IDL/util/utl_decllist.cpp:

	  Replaced heap visitors with stack visitors, 'new' with
	  'ACE_NEW*', put iterators into the stack-created FOR
	  loop format suggested by Carlos, and made cosmetic
	  changes.

Mon Feb  4 09:46:09 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* examples/RTCORBA/Activity/activity.dsp:
	  Added missing idl compile section for Win32 Release.

Sun Feb  3 07:55:49 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* examples/RTCORBA/Activity/activity.dsp:
	  Fixed include path. Thanks to Bala.

Sat Feb  2 21:56:41 2002  Ossama Othman  <ossama@uci.edu>

	* performance-tests/Latency/Single_Threaded/default_configuration.pl:

	  Corrected Perl include path.  This should fix the missing
	  benchmarks on our performance statistics web page.

Sat Feb  2 21:33:43 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Service_Context.h (get_context):
	* tao/Service_Context.cpp (get_context):

	  New version of this method that uses CORBA-style parameter
	  passing rules.  The returned service context is returned as an
	  "out" parameter.  This is part of an optimization in the
	  PortableInterceptor::{Client,Server}RequestInfo implementation.
	  In particular, a new service context instance is only
	  instantiated if the service context with the given ServiceId
	  exists in the service context list.

	* tao/ClientRequestInfo_i.cpp (get_service_context_i):
	* tao/PortableServer/ServerRequestInfo.cpp
	  (get_service_context_i):

	  Use the new TAO_Service_Context::get_context() method to prevent
	  needless dynamic instantation an IOP::ServiceContext if the
	  service context with the given ServiceId was not found.  This is
	  a nice optimization for services that attempt to retrieve
	  service contexts during each request in standard/portable way,
	  i.e. via portable interceptors.

Sat Feb  2 23:05:54 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* examples/RTCORBA/Activity/Makefile:
	  Changed VLDLIBS to LDLIBS. This would hopefully fix errors
	  regarding duplicate shared libraries.

Sat Feb  2 20:45:08 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp:  Do not use ACE_CHECK or
	  ACE_CHECK_RETURN macros if ACE_ENV_ARG_DECL_NOT_USED macro
	  is defined, otherwise it messes up build which define exceptions=0.

Sat Feb  2 12:36:31 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (init):
	* tao/TAO_Internal.cpp (open_services):

	  Moved vestigial code that retrieved the debug level from the
	  TAO_ORB_DEBUG environment variable to the appropriate location
	  in TAO_Internal.cpp.  Fixes a problem where the debug level was
	  sometimes reset to zero despite the fact it was explicitly set
	  by the -ORBDebugLevel ORB option.
	  Reported by Scott Harris <harris_s@ociweb.com>

Fri Feb  1 23:25:39 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
	Fixed warnings about idl compiler.

Fri Feb  1 22:00:00 2002  Rob Ruff  <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/RTP.h (TAO_AV_RTP_Object::connection_gone_):
	  Added.

	* orbsvcs/orbsvcs/AV/RTP.cpp (TAO_AV_RTP_Object::handle_input):
	  Check errno to see if remote peer has disappeared.

Fri Feb  1 21:53:45 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* examples/OBV/Typed_Events/Event_Types_impl.h:
	* examples/OBV/Typed_Events/Event_Types_impl.cpp:
	  Make CORBA methods in servants have the same exception specifications
	  as in the IDL generated stubs.

Fri Feb  1 06:44:51 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* tao/ORB_Core.h (TAO_ORB_Core): Changed the comment to refer to
	  RTCORBA::Current rather than RTCORBA::RTCurrent.  Thanks to
 	  Juliana Diniz <jrbd@cin.ufpe.br> for reporting this.

Thu Jan 31 13:17:24 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/PortableServer/AMH_Response_Handler.h:
	* tao/PortableServer/AMH_Response_Handler.cpp:
	  Add method to send exceptions back to the client.
	  Cleanup some of the code and left @@ comments for Mayur.

	* TAO_IDL/be/be_interface.cpp:
	  Fixed operation table entry for the _interface()
	  pseudo-operation, it was broken for non-GPERF tables.

	* TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Add the AMH_*ExceptionHolder node after the AMH*_ResponseHandler
	  node in the AST, that seems to generate the C++ code in the
	  right order.
	  Pass the ExceptionHolder argument down to the methods that
	  insert the ResponseHandler operations, cuts down in lookup time
	  when creating arguments for the *_excep() operations.
	  Add code to generate the *_excep() operations in the ResponseHandler.

	* TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
	  Remove obsolete comment.

	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	  Generate different code for _excep() and regular operations.
	  Needs a little more work to detect _excep() operations reliable,
	  but it is close enough for goverment work :-)

	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	  Simplify implementation of gen_throw_spec(), with a little work
	  it could be turned into an static function, making it more
	  reusable.  Similar changed could be made to
	  gen_environemnt_decl(), gen_environment_var(),
	  gen_raise_exception(), gen_check_exception() and even
	  gen_check_interceptor_exception().

Thu Jan 31 13:06:39 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/Latency/AMH/Single_Threaded/Makefile:
	  Added a check so that this test is not made for minimum CORBA
	  builds.

Thu Jan 31 13:31:17 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.cpp:

          Removed an unused variable.

Thu Jan 31 13:26:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_module.cpp:
	* TAO_IDL/be/be_global.cpp:
	* TAO_IDL/be/be_visitor_argument/arglist.cpp:
	* TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
	* TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
	* TAO_IDL/be/be_visitor_argument/post_invoke_cs.cpp:
	* TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
	* TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
	* TAO_IDL/be/be_visitor_argument/request_info_result.cpp:
	* TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:
	* TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
	* TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
	* TAO_IDL/be/be_visitor_field/field_ch.cpp:
	* TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
	* TAO_IDL/be/be_visitor_operation/interceptors_result.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_assign_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
	* TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
	* TAO_IDL/be_include/be_global.h:
	* TAO_IDL/be_include/be_visitor_argument/arglist.h:
	* TAO_IDL/be_include/be_visitor_argument/invoke_cs.h:
	* TAO_IDL/be_include/be_visitor_argument/marshal_ss.h:
	* TAO_IDL/be_include/be_visitor_argument/post_invoke_cs.h:
	* TAO_IDL/be_include/be_visitor_argument/request_info_arglist.h:
	* TAO_IDL/be_include/be_visitor_argument/request_info_ch.h:
	* TAO_IDL/be_include/be_visitor_argument/request_info_result.h:
	* TAO_IDL/be_include/be_visitor_argument/request_info_sh.h:
	* TAO_IDL/be_include/be_visitor_argument/upcall_ss.h:
	* TAO_IDL/be_include/be_visitor_argument/vardecl_ss.h:
	* TAO_IDL/be_include/be_visitor_field/field_ch.h:
	* TAO_IDL/be_include/be_visitor_module/module.h:
	* TAO_IDL/be_include/be_visitor_operation/interceptors_info_rettype.h:
	* TAO_IDL/be_include/be_visitor_operation/interceptors_result.h:
	* TAO_IDL/be_include/be_visitor_operation/rettype.h:
	* TAO_IDL/be_include/be_visitor_operation/rettype_assign_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/rettype_marshal_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/rettype_return_cs.h:
	* TAO_IDL/be_include/be_visitor_operation/rettype_vardecl_cs.h:
	* TAO_IDL/be_include/be_visitor_operation/rettype_vardecl_ss.h:
	* TAO_IDL/be_include/be_visitor_root/root.h:
	* TAO_IDL/be_include/be_visitor_union_branch/public_ch.h:
	* TAO_IDL/driver/drv_args.cpp:
	* TAO_IDL/fe/fe_interface_header.cpp:
	* TAO_IDL/fe/idl.ll:
	* TAO_IDL/fe/lex.yy.cpp:
	* TAO_IDL/include/fe_interface_header.h:
	* TAO_IDL/include/idl.h:
	* TAO_IDL/include/idl_global.h:
	* TAO_IDL/util/utl_global.cpp:

	  Removed all uses of IDL_HAS_VALUETYPE, since it's just defined
	  in idl.h and checked in dozens of places.

Thu Jan 31 13:18:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:

          Changes the settings for the release versions of these projects
          to use the release version of the IDL compiler. Thanks to
          Venkita <venkits@cs.wustl.edu> for tracking this down.

Thu Jan 31 10:37:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:

          Added ACE_NOTREACHED macro at the end of several functions.

Thu Jan 31 09:39:59 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* orbsvcs/examples/Security/Send_File/Makefile:
	* orbsvcs/tests/Security/SecurityLevel1/Makefile (SRVR_LIBS):
	* orbsvcs/tests/Security/Secure_Invocation/Makefile:
	  Fixed KCC error complaining about duplicate shared lib.

Thu Jan 31 09:37:22 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:

          Fixed an unreachable statement warning for KCC.

Thu Jan 31 14:14:32 2002  Boris Kolpackov <bosk@ipmce.ru>

	* TAO_IDL/be/be_visitor_valuetype/valuetype.cpp (visit_exception):

	  Added generation of nested into valuetype exceptions.

Thu Jan 31 13:06:12 2002  Boris Kolpackov <bosk@ipmce.ru>

	* TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:

	  Eliminated code that triggers bug with fully-qualified names
	  in VC++ 6. Thanks to Koushik Banerjee <koushik.banerjee@icmg.nu>
	  for reporting this.

Wed Jan 30 21:08:22 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

	* performance-tests/Latency/AMH/Single_Threaded/Roundtrip.cpp:
	* performance-tests/Latency/AMH/Single_Threaded/Roundtrip.h:
	* performance-tests/Latency/AMH/Single_Threaded/client.cpp:
	* performance-tests/Latency/AMH/Single_Threaded/server.cpp:
	* performance-tests/Latency/AMI/Roundtrip.cpp:
	* performance-tests/Latency/AMI/Roundtrip.h:
	* performance-tests/Latency/AMI/Roundtrip_Handler.cpp:
	* performance-tests/Latency/AMI/Roundtrip_Handler.h:
	* performance-tests/Latency/AMI/Server_Task.cpp:
	* performance-tests/Latency/AMI/client.cpp:
	* performance-tests/Latency/AMI/server.cpp:
	* performance-tests/Latency/DII/Roundtrip.cpp:
	* performance-tests/Latency/DII/Roundtrip.h:
	* performance-tests/Latency/DII/client.cpp:
	* performance-tests/Latency/DII/server.cpp:
	* performance-tests/Latency/DSI/Roundtrip.cpp:
	* performance-tests/Latency/DSI/Roundtrip.h:
	* performance-tests/Latency/DSI/client.cpp:
	* performance-tests/Latency/DSI/server.cpp:
	* performance-tests/Latency/Deferred/Roundtrip.cpp:
	* performance-tests/Latency/Deferred/Roundtrip.h:
	* performance-tests/Latency/Deferred/client.cpp:
	* performance-tests/Latency/Deferred/server.cpp:
	* performance-tests/Latency/Single_Threaded/Roundtrip.cpp:
	* performance-tests/Latency/Single_Threaded/Roundtrip.h:
	* performance-tests/Latency/Single_Threaded/client.cpp:
	* performance-tests/Latency/Single_Threaded/server.cpp:
	* performance-tests/Latency/Thread_Per_Connection/Client_Task.cpp:
	* performance-tests/Latency/Thread_Per_Connection/Client_Task.h:
	* performance-tests/Latency/Thread_Per_Connection/Roundtrip.cpp:
	* performance-tests/Latency/Thread_Per_Connection/Roundtrip.h:
	* performance-tests/Latency/Thread_Per_Connection/client.cpp:
	* performance-tests/Latency/Thread_Per_Connection/server.cpp:
	* performance-tests/Latency/Thread_Pool/Client_Task.cpp:
	* performance-tests/Latency/Thread_Pool/Client_Task.h:
	* performance-tests/Latency/Thread_Pool/Roundtrip.cpp:
	* performance-tests/Latency/Thread_Pool/Roundtrip.h:
	* performance-tests/Latency/Thread_Pool/Worker_Thread.cpp:
	* performance-tests/Latency/Thread_Pool/client.cpp:
	* performance-tests/Latency/Thread_Pool/server.cpp:

	  Conversion to the ACE_ENV_ macros.
	  Thanks to Johnny Willemsen for keeping an eye out.

Wed Jan 30 13:38:03 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* orbsvcs/examples/Notify/Subscribe/Subscribe.h (RefCountServantBase): Fixed
	  a cut&paste error.  Thanks to Gautam H Thaker
 	  <gthaker@atl.lmco.com> for reporting this.

Wed Jan 30 12:49:43 2002  Rob Ruff  <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Change ACE_ENV_ARG_DECL to
	  ACE_ENV_ARG_DECL_NOT_USED.
	* orbsvcs/orbsvcs/AV/RTCP.cpp:  Clean up debugging statements.
	  Change value of RTCP_SDES_NOTE to "An important note..."
	* orbsvcs/orbsvcs/AV/RTCP_Channel.cpp (update_seq):
	  Only show debug statement if TAO_debug_level is > 0.
	* orbsvcs/orbsvcs/AV/Transport.cpp: Default initialize timer_id_ to
	  -1.  Only call cancel_timer() and handle_timeout() if timer_id_ is
	  not -1.
	* orbsvcs/orbsvcs/AV/UDP.cpp:
	 (TAO_AV_UDP_Connector::connect) Set the control address.
	 (TAO_AV_UDP_Connection_Setup::setup) Treat the setup of sockets
	 which are used as acceptors or connectors differently.

Wed Jan 30 16:07:33 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Makefile.bor:
          Added Structured_Filter and Structured_Multi_Filter

        * orbsvcs/tests/Notify/Structured_Filter/*.bor:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/*.bor:
          Added BCB makefiles for these tests

Wed Jan 30 11:19:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/orbconf.h:
          Added backwards compatible macro define for TAO_ENV_DECLARE_NEW_ENV

Wed Jan 30 07:39:09 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

	* orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp
	  (Notify_Push_Consumer::push_structured_event): Corrected
	  usage of ACE_ENV_ARG_DECL_NOT_USED.

Tue Jan 29 17:13:53 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:

          Changed the code in idl_store_pragma() to keep track of how
          many characters it 'crunches' when removing whitespace
          between the '#' and the 'pragma'. When the trailing '\n' of
          the pragma string is removed later on, it must be shifted
          this many places to the left, to skip over the characters
          that have now become garbage. Thanks to Ossama Othman
          <ossama@doc.ece.uci.edu> for providing the KCC preprocessor
          output that showed the source of the problem.

Tue Jan 29 23:31:14 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

	* rules.tao.GNU:
	  Removed the include_env switch, it now lives in
          $ACE_ROOT/include/makeinclude/wrapper_macros.GNU.

Tue Jan 29 21:34:20 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
	  Oops, fixed bad comment in line 1.

Tue Jan 29 21:09:12 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

	* tao/orbconf.h (TAO_ENV_*):
	  Deprecated. Instead, use the equivalent ACE_ENV_ macros from
	  $ACE_ROOT/ace/CORBA_macros.h.

	* (many source files):
	  Corresponding to the above change, changed all relevant source
	  files to use the new ACE_ENV_ARG macros instead of the TAO_ENV_ARG
	  macros. All exception related macros are now defined in
	  $ACE_ROOT/ace/CORBA_macros.h.

Tue Jan 29 09:01:41 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_interface.cpp:
	  Removed bogus semicolon.

	* TAO_IDL/be_include/be_visitor_interface/amh_ch.h:
	  Changed broken private inheritance to public inheritance.

Tue Jan 29 08:57:31 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/Messaging.h:
	  Add TAO_Export to the function declaration, otherwise it is
	  invisible outside the library.

Tue Jan 29 10:56:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp:

          Added throw spec to push_structured_event() to match the
          declaration.

Tue Jan 29 09:38:35 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tao/CORBALOC_Parser.cpp:
	  Fixed compile error. Added #include "tao/debug.h".

Tue Jan 29 13:09:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Makefile.bor:
          Added Blocking, Discarding, MT_Dispatching,
          Sequence_Multi_ETCL_Filter and Sequence_Multi_Filter directory

        * orbsvcs/tests/Notify/Blocking/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/Discarding/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/MT_Dispatching/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/Sequence_Multi_Filter/*.bor:
          Added new BCB makefiles to build this test

Tue Jan 29 11:20:36 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/performance-tests/Makefile.bor:
          Added Throughput and Filter directory

        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile.bor:
          Added new BCB makefile to build this test

        * orbsvcs/tests/Notify/performance-tests/Filter/*.bor:
          Added new BCB makefiles to build these tests

        * orbsvcs/tests/Notify/Makefile.bor:
          Added Ordering directory

        * orbsvcs/tests/Notify/Ordering/*.bor:
          Added new BCB makefiles to build these tests

Tue Jan 29 09:10:17 2002  Johnny Willemsen <jwillemsen@remedy.nl>

	* tao/Messaging.h:
          Removed TAO_Export from namespace definitions because namespaces
          aren't exported. BCB compiler complains about this

Tue Jan 29 08:14:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvs/tests/Makefile.bor:
          Added CosEvent and Notify directory

        * orbsvcs/tests/CosEvent/Makefile.bor:
          Added new BCB makefile to build subdirectories

        * orbsvcs/tests/CosEvent/lib/Makefile.bor:
          Added new BCB makefile to build this test library

        * orbsvcs/tests/CosEvent/Basic/Makefile.bor:
          Added new BCB makefile to build these tests

        * orbsvcs/tests/Notify/Makefile.bor:
          Added new BCB makefile to build subdirectories

        * orbsvcs/tests/Notify/lib/Makefile.bor:
          Added new BCB makefile to build this test library

        * orbsvcs/tests/Notify/Basic/Makefile.bor:
          Added new BCB makefile to build these tests

        * orbsvcs/tests/Notify/performance-tests/Makefile.bor:
          Added new BCB makefile to build subdirectories

        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile.bor:
          Added new BCB makefile to build this test

Mon Jan 28 20:21:44 2002  Ossama Othman  <ossama@uci.edu>

	* tao/CORBALOC_Parser.cpp
	  (check_prefix, parse_string_count_helper):

	  Only print debugging information if desired by the user.

	  Improved efficiency of some code.

Mon Jan 28 16:21:59 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp:
	  Add Messaging.cpp to the project files.

Mon Jan 28 16:11:36 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Add generation of the AMH_*ExceptionHolder valuetype.

	* TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
	  The IDL compiler simply calls the shared code in
	  TAO_Messaging_Helper::exception_holder_raise().
	  Using a shared function for the raise methods in the
	  ExceptionHolders reduced the line count from 59Kloc to 56Kloc,
	  more importantly it saved 10% in the text segment for
	  param_testC.o.

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
	  Cleanup indentation.
	  Generate throw specs for valuetype operations.

	* TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
	  Remove obsolete @@ comment.

	* tao/Messaging.h:
	* tao/Messaging.cpp:
	  Add new Messaging.cpp, it should contain helper code used in the
	  implementation of CORBA Messaging.

	* tao/Makefile:
	* tao/Makefile.am:
	* tao/Makefile.bor:
	  Add new Messaging.cpp file and update deps.

	* tao/BiDir_GIOP/Makefile:
	* tao/Domain/Makefile:
	* tao/DynamicAny/Makefile:
	* tao/DynamicInterface/Makefile:
	* tao/IFR_Client/Makefile:
	* tao/IORManipulation/Makefile:
	* tao/IORTable/Makefile:
	* tao/PortableServer/Makefile:
	* tao/RTCORBA/Makefile:
	* tao/RTPortableServer/Makefile:
	* tao/SmartProxies/Makefile:
	* tao/Strategies/Makefile:
	* tao/TypeCodeFactory/Makefile:
	  Update deps.

Mon Jan 28 13:40:38 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
	  Fixed typo in UTL_ScopeActiveIterator change, the loop
	  termination should have been !si.is_done(), but I typed
	  si.is_done().

Mon Jan 28 12:40:15 2002  Ossama Othman  <ossama@uci.edu>

	* performance-tests/Latency/AMH/Single_Threaded/client.dsp:
	* performance-tests/Latency/AMH/Single_Threaded/server.dsp:
	* performance-tests/Latency/AMI/client.dsp:
	* performance-tests/Latency/AMI/server.dsp:
	* performance-tests/Latency/DII/client.dsp:
	* performance-tests/Latency/DII/server.dsp:
	* performance-tests/Latency/DSI/client.dsp:
	* performance-tests/Latency/DSI/server.dsp:
	* performance-tests/Latency/Deferred/client.dsp:
	* performance-tests/Latency/Deferred/server.dsp:
	* performance-tests/Latency/Single_Threaded/client.dsp:
	* performance-tests/Latency/Single_Threaded/server.dsp:
	* performance-tests/Latency/Thread_Per_Connection/client.dsp:
	* performance-tests/Latency/Thread_Per_Connection/server.dsp:
	* performance-tests/Latency/Thread_Pool/client.dsp:
	* performance-tests/Latency/Thread_Pool/server.dsp:

	  Updated paths in accordance with the new "Latency" performance
	  test organization.

Mon Jan 28 12:39:50 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/tests/EC_Throughput/README:
	  Fixed paths in the README file, some of the binaries were
	  completely wrong.  Made a pass to improved documentation.

Mon Jan 28 12:30:38 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	  The code was generating a TAO_ENV_ARG_PARAMETER in the header
	  file.  BIG mistake, I should have generated a TAO_ENV_ARG_DECL.

Mon Jan 28 14:25:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.dsp:

	  Removed these files and added them below, renamed uniquely so they
	  could be inserted into the workspace containing all the Notify tests.

	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:

	  Added these files as renamings of the ones removed above.

	* orbsvcs/tests/Notify/Structured_Filter/Structured_Filter.dsw:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter.dsw:

	  Changed the names of the included projects to reflect the
	  changes above.

	* orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp:

	  Changed the way a signed 64-bit integer is handled in a case
	  statement.

	* orbsvcs/tests/Notify/Basic/AdminProperties_Test.cpp:
	* orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
	* orbsvcs/tests/Notify/Basic/AdminProperties_Test.h:
	* orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
	* orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
	* orbsvcs/tests/Notify/Basic/Events_Test.cpp:
	* orbsvcs/tests/Notify/Basic/Events_Test.h:
	* orbsvcs/tests/Notify/Basic/IdAssignment.cpp:
	* orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
	* orbsvcs/tests/Notify/Basic/IdAssignment.h:
	* orbsvcs/tests/Notify/Basic/LifeCycleTest.cpp:
	* orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
	* orbsvcs/tests/Notify/Basic/LifeCycleTest.h:
	* orbsvcs/tests/Notify/Basic/Simple.cpp:
	* orbsvcs/tests/Notify/Basic/Simple.h:
	* orbsvcs/tests/Notify/Basic/Updates.cpp:
	* orbsvcs/tests/Notify/Basic/Updates.h:
	* orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.cpp:
	* orbsvcs/tests/Notify/lib/Notify_PushConsumer.cpp:
	* orbsvcs/tests/Notify/lib/Notify_PushSupplier.cpp:
	* orbsvcs/tests/Notify/lib/Notify_SequencePushConsumer.cpp:
	* orbsvcs/tests/Notify/lib/Notify_SequencePushSupplier.cpp:
	* orbsvcs/tests/Notify/lib/Notify_StructuredPushConsumer.cpp:
	* orbsvcs/tests/Notify/lib/Notify_StructuredPushSupplier.cpp:
	* orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:
	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
	* orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
	* orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
	* orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:

	  Cosmetic changes.

Mon Jan 28 12:23:39 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be_include/be_visitor_argument/argument.h:
	* TAO_IDL/be/be_visitor_argument/argument.cpp:
	  Add functionality to support fixed-direction arguments, i.e. the
	  visitor caller can override the actual direction of the
	  argument.  This is used in AMH to make all the INOUT arguments
	  behave as IN arguments.

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Use the set_fixed_direction() functionality in the
	  be_visitor_args visitors to generate correct code for the INOUT
	  arguments in an AMH function.

	* TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
	  Removed extra argument in the generate_shared_section() helper,
	  the argument is no longer needed.


	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Fixed problem in UTL_ScopeActiveIterator, a bogus si.next() was
	  left in the for()-loop body.

Mon Jan 28 12:15:43 2002  Ossama Othman  <ossama@uci.edu>

	* tests/OBV/Forward/server.dsp:

	  Corrected TAO_IDL compiler path in "Debug" configuration
	  dependencies.

Mon Jan 28 11:50:27 2002  Ossama Othman  <ossama@uci.edu>

	* performance-tests/Latency/AMH/Single_Threaded/run_test.pl:
	* performance-tests/Latency/AMI/run_test.pl:
	* performance-tests/Latency/DII/run_test.pl:
	* performance-tests/Latency/Deferred/run_test.pl:
	* performance-tests/Latency/Single_Threaded/run_test.pl:
	* performance-tests/Latency/Thread_Per_Connection/run_test.pl:
	* performance-tests/Latency/Thread_Pool/run_test.pl:

	  Corrected Perl include path.  Thanks to Carlos for pointing out
	  the problem.

Mon Jan 28 11:38:22 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	* TAO_IDL/be_include/be_visitor_operation/amh_sh.h:
	* TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
	  Another iteration in the AMH support.  This time we make sure
	  that only IN and INOUT arguments are generated in the AMH
	  skeletons, but I believe that INOUT arguments are not generated
	  correctly.

Mon Jan 28 11:17:40 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	* TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
	  Removed last instances of head-allocated
	  UTL_ScopeActiveIterator, hopefully this will stop the madness
	  and people will cut&paste the "Right Thing"[tm] from now on.

Mon Jan 28 10:50:40 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Notify/Notify_Constraint_Visitors.cpp:

          Removed some lines of unreachable code.

Mon Jan 28 10:39:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Application_Test/ifr_dii_client.cpp:

          Changed the name of a local variable to avoid a warning,
          on SunOS Forte, of a possible hiding of a class member
          variable.

Mon Jan 28 08:39:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * performance-tests/Makefile.bor:
          Updated BCB makefile with changes in Latency tests

Sun Jan 27 14:35:32 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Pluggable.cpp (make_mprofile):

	  Fixed support for parsing URL style IORs with multiple addrs in
	  them.  [Bug 1130]

Sun Jan 27 13:22:11 2002  Ossama Othman  <ossama@uci.edu>

	* performance-tests/README:
	* performance-tests/Latency/README:

	  Updated in accordance with the new "Latency" performance test
	  organization.

Sun Jan 27 12:51:02 2002  Ossama Othman  <ossama@uci.edu>

	* performance-tests/Makefile (DIRS):

	  Updated in accordance with the new "Latency" performance
	  test organization.

	* performance-tests/Latency/Makefile (DIRS):
	* performance-tests/Latency/Makefile.bor (DIRS):
	* performance-tests/Latency/AMH/Makefile (DIRS):
	* performance-tests/Latency/AMH/Makefile.bor (DIRS):

	  Makefiles for the newly reorganized "Latency" performance
	  tests.

Sun Jan 27 12:02:37 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
	  Added missing explicit template instantiation.

Sun Jan 27 15:04:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * Makefile.bor:
          Added the XML library

Sun Jan 27 00:52:49 2002  Ossama Othman  <ossama@uci.edu>

	* tests/ORT/ORT_test_IORInterceptor.cpp:
	* tests/ORT/client.cpp:
	* tests/ORT/server.cpp:

	  Minor code review.  Nothing major.  Just style issues.

Sat Jan 26 23:09:56 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB.h:
	* tao/ORB.cpp (id, register_initial_reference):

	  The CORBA specification recently added these methods to the
	  CORBA::ORB interface.  Implemented them.

	* tao/ORB_Core.cpp:

	  Moved template instantiations from `ORB.cpp' to this file. They
	  aren't used in the former.

	* tao/Object_Ref_Table.h:
	* tao/Object_Ref_Table.cpp:

	  Synchronize access to the underlying hash map by instantiating
	  the template(s) with a TAO_SYNCH_MUTEX instead of an
	  ACE_Null_Mutex.  Multiple threads may potentially attempt to
	  register an object reference concurrently.

	* tao/ClientRequestInfo_i.cpp (get_service_context_i):

	  Corrected exception minor code (26 instead of incorrect 23).

Sat Jan 26 22:53:04 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* examples/Callback_Quoter/Notifier_i.cpp:
	* tao/Asynch_Invocation.cpp:
	* tao/corbafwd.h:
	* tao/PortableServer/poa_macros.h:
	  Removed dependence on tao/try_macros.h.

	* tao/orbconf.h: Added back special comment line for Doxygen.

Sat Jan 26 13:44:39 2002  Ossama Othman  <ossama@uci.edu>

	* docs/releasenotes/TODO.html:

	  Updated Bugzilla URL.

Sat Jan 26 20:10:04 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* tao/orbconf.h (TAO_ENV_ARG_DEFN): Removed.

Sat Jan 26 20:10:04 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

	* tests/ORT/ORT_test_IORInterceptor_ORBInitializer.cpp
	  (ORT_test_IORInterceptor_ORBInitializer::post_init):
	  Removed TAO_ENV_ARG_DEFN and corrected usage of
	  TAO_ENV_ARG_PARAMETER.

Fri Jan 25 19:05:24 2002  Ossama Othman  <ossama@uci.edu>

	* tests/OBV/Forward/server.dsp:

	  Added missing IDL custom build step for the "Release"
	  configuration.

Fri Jan 25 20:14:19 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* tao/PortableServer/Makefile:

	  Added missing PortableGroup_Hooks.

Fri Jan 25 14:25:11 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/AMH_Single_Threaded_Latency/Roundtrip.h:
	* performance-tests/AMH_Single_Threaded_Latency/Roundtrip.cpp:
	  Changed TAO_ENV_SINGLE_ARG_DECL to TAO_ENV_ARG_DECL.  I had
	  copied the code as is from the Single_threaded_Latency test and
	  since for AMH_skeletons we add an extra rh paramater, the 'void
	  shutdown (void)' method now had an argument (comapred to none
	  before).  This was causing a problem on builds that used
	  emulated exceptions.

Fri Jan 25 14:10:48 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/AV/RTCP.cpp (handle_stop):

	  Removed unreachable statement.

Fri Jan 25 13:26:40 2002  Ossama Othman  <ossama@uci.edu>

	* tests/OBV/Any/AnyS_impl.cpp (magic):

	  Removed unsed global variable.

Fri Jan 25 11:34:35 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/ast/ast_operation.cpp:
	* TAO_IDL/be/be_generator.cpp:
	* TAO_IDL/be/be_operation.cpp:
	* TAO_IDL/be/be_scope.cpp:
	* TAO_IDL/be/be_structure.cpp:
	* TAO_IDL/be/be_union.cpp:
	* TAO_IDL/be/be_valuetype.cpp:
	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	* TAO_IDL/be/be_visitor_scope.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	* TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
	* TAO_IDL/be/be_visitor_root/root_sth.cpp:
	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
	* TAO_IDL/be/be_visitor_union/union_cs.cpp:
	* TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
	* TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
	  For some mystifying reason many UTL_ScopeActiveIterator
	  instances were created on the heap, and immediately deleted (or
	  not, leaking memory.)
	  Funny enough the language has a perfectly usable feature for
	  that kind of behavior, it is called "automatic variables".
	  Also, several while()-loops were really for()-loops in disguise,
	  changed them to make the behavior more obvious.

Fri Jan 25 10:40:03 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Security/SecurityLevel1/client.dsp:
	* orbsvcs/tests/Security/SecurityLevel1/server.dsp:
	* orbsvcs/tests/Security/SecurityLevel1/SecurityLevel1.dsw:

	  Added missing MSVC++ project and workspace files.

Fri Jan 25 10:21:10 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/tests/Security/Big_Request/client.dsp:
	* orbsvcs/tests/Security/Big_Request/server.dsp:
	* orbsvcs/tests/Security/Callback/client.dsp:
	* orbsvcs/tests/Security/Callback/server.dsp:
	* orbsvcs/tests/Security/MT_SSLIOP/client.dsp:
	* orbsvcs/tests/Security/MT_SSLIOP/server.dsp:
	* orbsvcs/tests/Security/Secure_Invocation/client.dsp:
	* orbsvcs/tests/Security/Secure_Invocation/server.dsp:

	  Corrected the "Release" configuration output filenames.
	  Binaries for "Release" builds belong in the `Release' directory,
	  by convention.

Fri Jan 25 10:06:44 2002  Ossama Othman  <ossama@uci.edu>

	* tests/OBV/Any/client.dsp:

	  Added missing custom build step in the "Release" configuration
	  for the this test's IDL file.

Fri Jan 25 11:24:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_array.cpp:

          Added base class constructor calls to class be_array
          constructor.

        * TAO_IDL/be/be_visitor_array/array_cs.cpp:

          Cosmetic changes to source code.

        * TAO_IDL/fe/fe_declarator.cpp:

          Removed addition of arrays to AST at global scope. This seems to
          be legacy code that there is no good reason for, and it was
          causing problems when an array is declared, typedef'd, and
          used as the element of another array at global scope. Anonymous
          arrays and the corresponding typdef (if any) are still
          added to the scope where they are declared. Thanks to Boris
          Kolpackov <boris@upsa.kent.orc.ru> for reporting this bug.

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.cpp.diff:

          Made change for sequences similar to change for arrays
          above.

Fri Jan 25 12:14:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * performance-tests/AMH_Single_Threaded_Latency/*.bor:
          Added BCB makefiles

Fri Jan 25 00:04:05 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* docs/tutorials/Quoter/RT_Event_Service/Makefile:
	* docs/tutorials/Quoter/On_Demand_Activation/Makefile:
	* docs/tutorials/Quoter/AMI/Makefile:
	* docs/tutorials/Quoter/idl/Makefile:
	  Regenerated dependencies.

Thu Jan 24 20:15:01 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/AMH_Single_Threaded_Latency/AMH_Single_Threaded_Latency.dsw:
	* performance-tests/AMH_Single_Threaded_Latency/client.dsp:
	* performance-tests/AMH_Single_Threaded_Latency/server.dsp:
	  Workspace and projects for the AMH performance test.

Thu Jan 24 18:51:21 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/AMH_Single_Threaded_Latency:
	* performance-tests/AMH_Single_Threaded_Latency/client.cpp:
	* performance-tests/AMH_Single_Threaded_Latency/server.cpp:
	* performance-tests/AMH_Single_Threaded_Latency/Roundtrip.h:
	* performance-tests/AMH_Single_Threaded_Latency/Roundtrip.cpp:
	* performance-tests/AMH_Single_Threaded_Latency/Makefile:
	* performance-tests/AMH_Single_Threaded_Latency/run_test.pl:
	* performance-tests/Makefile:
	* performance-tests/Makefile.bor:
	* performance-tests/README:
	  Performance test for AMH based on the Single_Threaded_Latency
	  test.

Thu Jan 24 17:47:00 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_decl.cpp:
	  Fixed the implementation of compute_flat_name() there was
	  nothing flat about the named computed: it used the regular full
	  name for the containing scope, so for nested modules the results
	  were wrong.

	* TAO_IDL/be/be_interface.cpp:
	  Fixed warning about unused argument and made several cosmetic
	  fixes.

	* TAO_IDL/be/be_visitor_argument.cpp:
	* TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
	  Cosmetic fixes.

	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	  Implement code to process attributes as well as operations.

	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	  Fixed implementation of the _downcast() method on the AMH
	  skeleton.

	* TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	* TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	  Generate correct code for AMH-copy constructors.  I used the new
	  class-based traverse_inheritance_graph().

	* TAO_IDL/be_include/be_visitor_operation/amh_sh.h:
	* TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Add support for attributes, in both cases I used a technique
	  slightly different from what the rest of the IDL compiler does.
	  Normally a fake be_operation node is generated on the fly
	  (usually heap allocated) and used to generate the code "as if"
	  it was a real operation.  However, the code to generate
	  operations has to be modified to treat these nodes with some
	  magic, because the attribute name (on GIOP) are different than
	  the actual name of the attribute.
	  My approach was to re-factor the common code to generate
	  attributes and operations in these new fangled things called
	  "subroutines".  The attribute code calls the subroutines to
	  generate the desired code.  I did have to generate a temporary
	  node (of type be_argument), but I was able to stack-allocate it
	  and use it in a very localized section of the code.
	  Also, none of the operation code has to understand about
	  attributes.


Thu Jan 24 15:48:01 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/TAO_Static.dsp:
	* tao/PortableServer/TAO_PortableServer_Static.dsp:

	  Fixed worspaces regarding moving of the AMH_Response_Handler
	  files.

Thu Jan 24 11:48:01 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_interface.cpp:
	* TAO_IDL/be_include/be_interface.h:
	  Use the new class-based version traverse_inheritance_graph() to
	  generate the operation table.  The name of the derived class is
	  computed by the caller and pass through the Worker class down to
	  the code generation routines.  This was useful to factor out the
	  common code between the AMH-class (where the base class name is
	  not obtainable via a simple method call) and the regular
	  (non-AMH) skeletons.
	  Also use stack-allocate iterators, it makes no sense in the
	  world to allocate an object from the head only to delete when we
	  return from the function!
	  Change some while() loops to for() loops because the latter
	  document the intent better.

Thu Jan 24 12:35:17 2002  Boris Kolpackov  <bosk@ipmce.ru>

	* TAO_IDL/be_include/be_visitor_typecode/typecode_defn.cpp:
	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

	  Fixed a bug in typecode generation for multidimension arrays.
	  Implemented first part of new recursive IDL handling machanism.
 	  Refactored some repetitive code.

Thu Jan 24 00:08:22 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/IORInfo.cpp:
	* tao/PortableServer/ObjectReferenceTemplate.cpp:
	* tao/PortableServer/ObjectReferenceTemplate.h:
	* tao/PortableServer/POA.cpp:
	* tao/PortableServer/POA.h:
	* tao/PortableServer/POA.i:

	  Code review!  Left a whole slew of "@@" comments regarding
	  disfunctional code, exception safety, memory leaks, etc.

Wed Jan 23 22:00:16 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/IORInfo.cpp
	  (manager_id, state, current_factory):

	  Fixed code that couldn't possibly work since an exception was
	  always thrown.  Where's the testing?!

Wed Jan 23 16:40:21 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

	* tao/ORB.cpp:
	  Made changes to get the correct port value to search the NameService
	  when the ORBDefaultInitRef option is used.
	  The changes are made thanks to Andrew L. Shwaika<als@solvo.ru>

Wed Jan 23 14:16:35 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/include/ast_argument.h:
	  Changed values of the AST_Argument::Direction enum.  The new
	  values allow me to specify sets of directions as bit masks.

	* TAO_IDL/include/ast_operation.h:
	* TAO_IDL/ast/ast_operation.cpp:
	  Add new method to count the arguments in a given set of
	  directions, for example, all (dir_IN|dir_OUT) arguments.

	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	  The AMH_<Interface> class was deriving from the non-AMH
	  classes.
	  Remove stale comments.
	  Use UTL_ScopeActiveIterator on the stack, there is no sense in
	  declaring objects with a well-defined scope on the heap!  Fixed
	  a memory leak in the process.

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	  After we generate the ResponseHandler argument in AMH-operations
	  we need to insert a comma, but only if there are IN or INOUT
	  arguments.  The code used to check for any kind of argument.

	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Generate the code for the _tao_in variable (the TAO_InputCDR) in
	  the skeleton.
	  Fix indentation in the skeleton.
	  Insert the arguments for the upcall.  Unfortunately we are
	  generating *all* the arguments, not only the IN and INOUT ones.

	* TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	  Eliminate duplicate code using the
	  count_arguments_with_direction routine.


Wed Jan 23 13:09:40 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/AMH_Response_Handler.h:

	  Fixed a "fuzz" error related to a filename mismatch.

	  Declare the class attributes after the class methods to more
	  closely match ACE/TAO programming styles and common C++
	  conventions.  Darn Java programmers!

	  Wrapped overly long lines in class documentation.

Wed Jan 23 12:06:37 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/Makefile:
	* tao/Makefile.bor:
	* tao/PortableServer/Makefile:
	* tao/PortableServer/Makefile.bor:

	  Updated the files with the changes of moving the
	  AMH_Response_Handler files from `tao' and `tao/PortableServer'.

Wed Jan 23 12:03:01 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_interface.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
	* TAO_IDL/be_include/be_visitor_interface/interface_ss.h:

	  Fixed generate of the _downcast() method for AMH skeletons.  I
	  used the new worker class to traverse inheritance graphs to do
	  the job.

Wed Jan 23 12:00:35 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp
	  (authentication_state):

	  Do not check if the credential is valid.  Once the credential
	  has been authenticated it remains authenticated.  Users should
	  call the is_valid() method if they wish to determine whether or
	  not the credential has expired.

Wed Jan 23 11:10:33 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/PortableServer/AMH_Response_Handler.h:
	* tao/PortableServer/TAO_PortableServer.dsp:
	* tao/TAO.dsp:

          Changed workspaces and header file to compile/link on Windows
	  platforms.

Wed Jan 23 10:47:30 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be_include/be_interface.h:
	* TAO_IDL/be/be_interface.cpp:
	  Add a new traverse_inheritance_graph() method that takes a class
	  (with a virtual method) instead of a naked pointer to function.
	  I will need the new version to pass state into one of the
	  traversals.

Wed Jan 23 09:55:33 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:

	  Changed code to generate the right signatures for constructors
	  and destructors, similar to the way it is done in
	  be_visitor_operation/amh_rh_ss.cpp.

Wed Jan 23 09:33:31 2002  Ossama Othman  <ossama@uci.edu>

	* tests/ORT/ORT_test_IORInterceptor.cpp
	  (establish_components, components_established):

	  Fixed unused argument warnings.

Wed Jan 23 09:30:19 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Current.pidl:

	  Removed backslashes in comments.  Some compilers correctly flag
	  them as potential problems through warnings.

Wed Jan 23 09:25:31 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:

	  Corrected some documentation.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (is_valid):

	  Implemented this method.

Wed Jan 23 11:05:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/Quoter/Quoter.idl:

          Added leading underscore to an operation parameter
          named 'object' because it clashes with the IDL
          keyword 'Object'.

Wed Jan 23 16:14:43 2002 Boris Kolpackov  <bosk@ipmce.ru>

	* TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:

	  Fixed mistake in initialization of _tao_retval for valuetypes.

	* tests/OBV/Any/Makefile:
	* tests/OBV/Forward/Makefile:

	  Fixed few stupid mistakes that made some time ago.

	* tao/ValueBase.h

	  Added work around for famous Sun CC "pure virtual function called"
	  bug. Unfortunately this involves introduction of yet another #define.
	  See include/makeinclude/platform_sunos5_sunc++.GNU for more information.

Wed Jan 23 06:43:27  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.cpp:

          Added missing include files.

Wed Jan 23 06:24:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.cpp (create):
	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h: Fixed warnings in
	  Borland builds.

Tue Jan 22 17:21:15 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_post_invoke_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_pre_invoke_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
	  Made stupid mistake in last round of changes: I did not test on
	  a platform without exceptions enabled.
	  This revealed a number of inconsistencies in the generated code,
	  as well as very complicated logic to process arrays, sequences
	  and interfaces as return arguments.
	  Unfortunately, we were generating '_tao_safe_retval' for some
	  types, and using _tao_retval for a dummy variable.  In yet other
	  places we generated such a variable but not used it, yuck.
	  I have made the generated code mode consistent, this allows the
	  re-use in the last change, but it forces us to always call the
	  return variable (if any) '_tao_retval'.

Tue Jan 22 19:14:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          Shortened some line lengths that were over 80 characters
          in both source code and generated code. plus other
          cosmetic changes.

Tue Jan 22 15:32:10 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be_include/be_visitor_operation/operation.h:
	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	* TAO_IDL/be/be_visitor_factory.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/direct_collocated_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
	* TAO_IDL/be_include/be_visitor_operation/ami_cs.h:
	* TAO_IDL/be_include/be_visitor_operation/ami_handler_reply_stub_operation_cs.h:
	* TAO_IDL/be_include/be_visitor_operation/direct_collocated_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/direct_proxy_impl_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/remote_proxy_impl_cs.h:
	* TAO_IDL/be_include/be_visitor_operation/thru_poa_collocated_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/thru_poa_proxy_impl_ss.h:
	  I found multiple copies of the following routines:
	  gen_raise_exception(): generate the code to raise exceptions
	  using either 'throw', 'ACE_THROW' or 'ACE_THROW_RETURN'.
	  gen_check_interceptor_exception(): generate the code to check
	  for exceptions (in interceptors) using either
	  'TAO_INTERCEPTOR_CHECK or 'TAO_INTERCEPTOR_CHECK_RETURN_RETURN'.
	  gen_check_exception(): generate the code to check
	  for exceptions (in interceptors) using either 'ACE_CHECK' or
	  'ACE_CHECK_RETURN'.
	  Interestingly the implementations of these routines were all
	  slightly different, for example, some did not deal with non-void
	  routines properly, while others did not deal with the
	  use_raw_throw() IDL-compiler option.
	  The changes were motivated by some Borland warnings, another
	  lesson on why we need to keep looking at warnings carefully, and
	  not simply shut them up using some hack.

Tue Jan 22 13:36:05 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ClientRequestInfo_i.h (~TAO_ClientRequestInfo_i):
	* tao/ClientRequestInfo_i.cpp (~TAO_ClientRequestInfo_i):

	  Added a virtual destructor to silence G++ warnings.

Tue Jan 22 13:19:52 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (operator==):

	  Fixed problem where a const variable was passed as a non-const
	  parameter.

Tue Jan 22 12:42:13 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/OBV/Forward/Makefile:
	* docs/tutorials/Quoter/Event_Service/Makefile:
	* orbsvcs/tests/Security/Callback/Makefile:
	* performance-tests/Cubit/TAO/MT_Cubit/Makefile:
	* performance-tests/Cubit/TAO/IDL_Cubit/Makefile:
	  Regenerated dependencies.

Tue Jan 22 12:25:31 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/Strategies/simple_test.idl:

          Changed a 'Boolean' to 'boolean'.

Tue Jan 22 11:25:13 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.dsp:
          Fixed MSVC warning.

Tue Jan 22 11:22:33 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/tests/Miop/McastHello/Makefile:
	  Added check to skip compilation under minimum CORBA
	  builds.

Tue Jan 22 11:08:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/NestedUpcall/Simple/test.idl:

          Changed several operation parameter types from 'UShort'
          to 'unsigned short'.

Tue Jan 22 10:46:41 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_idlist.cpp (copy):

          Fixed method to propagate the value of the 'escaped_'
          member of each contained instance of class Identifier.

        * TAO_IDL/util/utl_scope.cpp:

          When checking for case difference errors, modified logic
          to pass the check if one or the other (but not both) of
          the identifiers is escaped.

        * orbsvcs/orbsvcs/LifeCycleService.idl:

          Added an escape to an operation parameter named 'object',
          since it clashes with the IDL keyword 'Object'.

Tue Jan 22 06:52:32 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:

          Reverting the const_cast change from "Mon Jan 21 08:02:28 2002".
          It was not necessary.  Thanks to Christopher Kohlhoff
          <chris@kohlhoff.com> and Johnny Willemsen <jwillemsen@remedy.nl>
          for pointing this out.

Mon Jan 21 17:37:47 2002  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:

          Added checks for illegal oneway operation properties
          (non-void return type, user exceptions, OUT or INOUT
          parameters) that CORBA 2.6 says must cause BAD_PARAM
          minor code 31 to be thrown.

Mon Jan 21 18:03:11 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/TAO_AMH_Response_Handler.cpp
	* tao/TAO_AMH_Response_Handler.h
	* tao/PortableServer/AMH_Response_Handler.cpp
	* tao/PortableServer/AMH_Response_Handler.h

	  Removed TAO_AMH_Response_Handler.* files from ORB_CORE and added
	  them to tao/PortableServer, also renaming them to
	  AMH_Response_Handler. This was doen to reduce tao orb_core
	  foot-print.  Other changes to the AMH_Response_Handler:

	- The RH methods are now thread-safe.
	- Documentation of class, methods and members
	- The 'once-only' semantics is now made more
	  explicit by using an enum to hold the various ststes.
	- init_reply and send_reply method names changed with _tao_rh_
	  prefix to reduce possibility of user defining similar methods in
	  IDL and creating a conflict.  Thanks to Carlos for all the '@@'
	  comments regarding the above :-)

	* TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp
	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp

	  Changed code-generation to generate _tao_rh_init_reply () and
	  _tao_init_send_reply () as per changes above.

	* TAO_IDL/be/be_codegen.cpp (start_server_header):
	  Changed code generation to include the (tao) ResponseHandler
	  classes from the tao/PortableServer/ rather than from tao/

Mon Jan 21 17:15:18 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_scope.cpp:

          Because things like 'CORBA::ULong' and 'CORBA::Float'
          are added to the AST automatically, the IDL compiler
          was wrongly accepting types like 'ULong' and "Float'.
          This was fixed in lookup_by_name_local() and a new
          method lookup_pseudo() was added to specialize the
          cases 'Object' and 'TypeCode', where we want to find
          a match. Thanks to Jerome Julius <julius@erols.com> for
          sending in the example IDL file that uncovered this
          problem.

Mon Jan 21 20:59:09 GMT 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * tests/OBV/Any/Makefile:

          Fixed minor bug.

Mon Jan 21 10:51:52 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/examples/Notify/Filter/Filter.dsp:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.dsp:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/Basic/Updates.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:

          Added the ETCL directory to libpath.

Mon Jan 21 10:42:41 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/examples/Notify/Filter/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/Notify/Blocking/Makefile:
        * orbsvcs/tests/Notify/Discarding/Makefile:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile:
        * orbsvcs/tests/Notify/Ordering/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/lib/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile:

          Reverse the order of the CosNotification and ETCL libs in order to
          link properly with static libraries.

Mon Jan 21 10:30:38 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Notify_Service/Notify_Service.dsp:
        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:

          Added the ETCL directory to libpath.

Mon Jan 21 08:02:28 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:

          Added const cast's to appease the Borland compiler.

Mon Jan 21 07:15:35 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
        * orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.cpp:

          Fix build errors for Debian Minimum.  Added a missing include of
          "orbsvcs/TimeBaseC.h".

Mon Jan 21 06:59:24 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp:
	  Fixed compile error. Added #include "tao/debug.h".

Mon Jan 21 04:35:14 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP.idl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

	  Removed all uses of the OpenSSL RSA data structure and related
	  functions in favor of the OpenSSL EVP_PKEY data structure and
	  functions.  The latter is more generic, and automatically
	  handles multiple private key types.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.inl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:

	  New TAO_SSLIOP_EVP_PKEY_var class that provides CORBA-style
	  memory management of the OpenSSL "EVP_PKEY" key data structure.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.inl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:

	  Removed these files.  They have been superseded by the EVP_PKEY
	  files above.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.inl (_duplicate):

	  Do not attempt to increase the reference count if the X509
	  pointer is zero.  Fixes a segmentation fault.

	* orbsvcs/orbsvcs/Makefile.SSLIOP:
	* orbsvcs/orbsvcs/SSLIOP.bor:
	* orbsvcs/orbsvcs/SSLIOP.dsp:

	  Added new SSLIOP_EVP_PKEY.* files and removed the deprecated
	  SSLIOP_RSA.* files.

Mon Jan 21 02:12:34 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h
	  (retrieved_credentials):

	  Changed the return type to be a Credentials object, thus making
	  the method act as advertised.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp
	  (ssliop_connect):

	  Once a connection has been made and before it is cached, set the
	  quality-of-protection, establishment-of-trust and credentials
	  specific to the connection in the TAO_SSLIOP_Endpoint.  They
	  must be taken into account when searching the transport cache
	  for suitable SSLIOP connections.

	  (retrieve_credentials):

	  Returned the retrieved credentials to the caller instead of
	  attempting to do too much in this method.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp
	  (operator==, hash):

	  Added these comparison methods for use with TAO's transport
	  caching mechanism.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:

	  Added a SSLIOP_Credentials attribute, and accompanying
	  accessors.

	  Removed unnecessary `tao/ORB.h' include.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i (credentials):

	  New "credentials_" member set/get accessor methods.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp
	  (is_equivalent, hash):

	  Use the corresponding methods in the SSLIOP_Credentials class
	  when comparing/hashing two SSLIOP_Credentials objects.

Mon Jan 21 01:05:37 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp
	  (TAO_SSLIOP_password_callback):

	  Fixed static_cast from "void *" to "const char *".  Such a cast
	  is invalid.  Instead, static_cast to a "char *" and then assign
	  to a "const char *".

	  (make_X509, make_RSA):

	  Corrected misuse of ACE_OS::close() where ACE_OS::fclose() was
	  expected.

Sun Jan 20 23:14:47 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP.idl:

	  Added structures to be filled in with certificate and key
	  information.  These will be used in conjunction with the
	  SecurityLevel2::PrincipalAuthenticator object, i.e passed in via
	  the authenticate() method.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp
	  (retrieve_credentials):

	  Set the RSA private key for the current invocation if one was
	  set in the retrieved credentials.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_RSA.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_RSA.inl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_RSA.cpp:

	  New TAO_SSLIOP_RSA_var class that provides CORBA-style memory
	  management of the OpenSSL "RSA" key data structure.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

	  The Credentials objects now hold a pointer to an OpenSSL "RSA"
	  key data structure.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h (make_X509, make_RSA):

	  Added these methods to the TAO_SSLIOP_Vault class.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp (acquire_credentials):

	  Completed initial implementation of this method.  Support for
	  ASN.1 and PEM encoded certificates and RSA private keys is
	  available.

	  (make_X509, make_RSA):

	  New methods create OpenSSL X509 and RSA data structures,
	  respectively, based on authentication data supplied by the user.

	  (TAO_SSLIOP_password_callback):

	  Callback method passed to OpenSSL calls that require passwords
	  or passphrases to decrypt PEM files.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h:

	  Include "ace/config-all.h" instead of "tao/corbafwd.h."  The
	  former is all that is needed.

	* orbsvcs/orbsvcs/Makefile.SSLIOP:
	* orbsvcs/orbsvcs/SSLIOP.bor:
	* orbsvcs/orbsvcs/SSLIOP.dsp:

	  Added new SSLIOP_RSA.* files to the appropriate file lists.

Mon Jan 21 00:13:42 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/Notify_Service/NT_Notify_Service.bor:
        * orbsvcs/Notify_Service/Notify_Service.bor:
          Added in ETCL library now required for static linking.

        * orbsvcs/orbsvcs/CosNotification.bor:
          Added missing source files Notify_Extensions and
          Notify_StructuredEvents.

        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Security/SecurityManager.cpp:
          Added .in()s in places to fix Borland C++ compiler error about
          ambiguous conversion.

Sun Jan 20 17:38:01 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/be/be_valuetype.cpp:

          Added a check in be_valuetype::in_recursion() to catch
          the case where a valuetype contains a valuetype that
          is recursive. Also changed in_recursion in each of the
          files above to create the scope visitor on the stack
          instead of on the heap. Also removed narrowing of return
          value from field->field_type() to AST_Type - that method
          returns an AST_Type already.

Sun Jan 20 16:33:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Notify_Service/Makefile:

          Added orbsvcs/orbsvcs/ETCL to library search path.

Sun Jan 20 15:56:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/OBV/Any/Any.dsw:
        * tests/OBV/Any/client.dsp:
        * tests/OBV/Any/server.dsp:

          Added some files to server.dsp. Also recreated client.dsp
          and added it again to the workspace, since the original
          project file wouldn't load.

Sun Jan 20 09:44:12 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup.dsp:
	  Added TAO_CosNaming.lib to link list for Win32 Release.

Sat Jan 19 18:23:54 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h: Fixed some more
	  errors with exception specifications.

Sat Jan 19 23:57:13 GMT 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * tests/OBV/Any/Makefile:
          Regenerated dependencies.

Sat Jan 19 23:30:42 GMT 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
          Fixed some bugs in generated any extraction operator.

Sat Jan 19 14:15:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h: Not sure why this
	  was lying in workspace for a long time. Fixed a compile error
	  with g++. Exceptions were not specified in the signature and
	  hence the error.

Sat Jan 19 10:58:53 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/ServerRequestInfo.cpp (server_id, orb_id):

	  Fixed code that didn't conform to the C++ mapping.  The caller
	  owns the storage.  Return a string using CORBA::string_dup().
	  Don't just return a string with the const-ness casted away.

Sat Jan 19 11:36:22 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/tests/Miop/McastHello/server.cpp (main):
	  Fixed a few warnings.  Thanks to Venkita for catching them.

Sat Jan 19 11:16:09 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* utils/nslist/nsdel.cpp:
	  Fixed (hopefully!!) compile errors.

Sat Jan 19 09:22:54 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/AV/Transport.cpp: Just swapped a couple of
	  #includes. The dependency generation was getting messed up
	  somehow.

	* orbsvcs/orbsvcs/Makefile.av: Fixed the dependencies.

Sat Jan 19 09:03:32 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* performance-tests/Cubit/TAO/MT_Cubit/Makefile:
	  Fixed Makefile error.

Sat Jan 19 09:00:16 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* performance-tests/Cubit/TAO/IDL_Cubit/Makefile:
	  Fixed Makefile error.

Sat Jan 19 08:52:55 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/OBV/Forward/Test_impl.cpp:
	  tests/OBV/Forward/Test_impl.h:
	  Fixed compile errors.

Sat Jan 19 08:41:01 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/OBV/Factory/FactoryS_impl.cpp:
	  tests/OBV/Factory/FactoryS_impl.h:
	  Fixed compile errors.

Sat Jan 19 08:24:10 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tao/ValueBase.cpp:
	  Fixed compile error. Added "#include tao/debug.h".

Fri Jan 18 21:34:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile*: Regenerated dependencies.

Fri Jan 18 18:46:39 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/ObjectReferenceTemplate.cpp:

	  Removed duplicate template instantiations.  They were already
	  defined in ObjectReferenceTemplateC.cpp.

Fri Jan 18 18:25:55 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/TAO_AMH_Response_Handler.cpp:
	  Fixed inconsistency in _tao_out field name.

Fri Jan 18 18:02:41 2002  Ossama Othman  <ossama@uci.edu>

	* tao/IFR_Client/IFR_BaseC.cpp:
	* tao/IFR_Client/IFR_BasicC.cpp:
	* tao/IFR_Client/IFR_ComponentsC.cpp:
	* tao/IFR_Client/IFR_ExtendedC.cpp:

	  Updated with new Portable Interceptor updates.

Fri Jan 18 16:42:18 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ClientInterceptorAdapter.h:

	  No need to include corbafwd.h, ClientRequestInfo.h.  Forward
	  declaring classes is sufficient.

	  Added a new "TAO_ClientRequestInfo *" member.  It is the cached
	  value of the object retrieved from TSS.

	* tao/ClientInterceptorAdapter.inl:

	  Initialize the new "info_" member in the base member initializer
	  list.

	* tao/ClientInterceptorAdapter.cpp:

	  Updated all interception point methods to accept pointers to the
	  new TAO_ClientRequestInfo_i pointer.

	* tao/ClientRequestInfo_i.h:
	* tao/ClientRequestInfo_i.inl:
	* tao/ClientRequestInfo_i.cpp:

	  New files containing the new "underlying" implementation of the
	  PortableInterceptor::ClientRequestInfo interface.  They
	  basically contain the implementation that was previously found
	  in TAO_ClientRequestInfo.  This new class, i.e.
	  "TAO_ClientRequestInfo_i," does not inherit from any class.  All
	  operation-specific ClientRequestInfo subclasses in the client
	  stubs now inherit from this class.  This removes a lock
	  initialization from the critical path, and replaces it with a
	  TSS access.  This should improve performance on the client side
	  significantly in both cases where interceptors were registered
	  and not registered with the ORB.   [Bug 874]

	* tao/ClientRequestInfo.h:

	  No need to include "StringSeqC.h."

	  Added a new "TAO_ClientRequestInfo_Guard" class that is designed
	  to ensure the swapping of TAO_ClientRequestInfo_i pointers in a
	  TAO_ClientRequestInfo object is performed in an exception-safe
	  manner when interception points are being invoked.

	* tao/ClientRequestInfo.inl:
	* tao/ClientRequestInfo.cpp:

	  Moved implementation code to the new TAO_ClientRequestInfo_i
	  class.

	  Added "TAO_ClientRequestInfo_Guard" class implementation.

	* tao/ORB_Core.h:
	* tao/ORB_Core.cpp:

	  Store a TAO_ClientRequestInfo object in the ORB_Core's TSS
	  resources.

	* tao/DomainC.cpp:
	* tao/PolicyC.cpp:
	* tao/PortableServer/ImplRepoC.cpp:

	  Updated to use new TAO_ClientRequestInfo_i class.

	* TAO_IDL/be/be_codegen.cpp:
	* TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:

	  Updated generated code to use new TAO_ClientRequestInfo_i class.
	  [Bug 874]

Fri Jan 18 17:29:36 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/TAO_Server_Request.h:
	* tao/TAO_Server_Request.cpp:
	* tao/TAO_AMH_Response_Handler.h:
	* tao/TAO_AMH_Response_Handler.cpp:
	  The TAO_Server_Request class does not depend on
	  TAO_AMH_Response_Handler anymore,  instead of forsing
	  ServerRequest to know about AMH and make it copy its state to
	  the AMH_Response_Handler we make AMH_Response_Handler a
	  friend. That way the AMH_Response_Handler can copy whatever
	  state it needs.
	  Add some comments for Mayur about this stuff.

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Do not generate AMH_*ResponseHandler nodes for AMI nodes or
	  other implied-IDL nodes.

	* TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
	  Fixed inconsistencies in the generated name for the
	  TAO_AMH_<InterfaceName>ResponseHandler class.
	  Change the constructor of those generated classes to take the
	  TAO_ServerRequest parameter.


	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	  Fixed indentation problems.

	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	  Fixed class name in operations (made it consistent with the
	  generated name in be_visitor_interface/amh_rh_*.cpp).
	  Fixed exception throwing code (it was hardcoded to use
	  ACE_THROW, but the IDL compiler should be able to generate raw
	  throws also).

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	  Fixed indentation problem in the generated code.
	  Improved error messages in case of failure.
	  Set the visitor context state properly for the arglist visitor.

	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Use the right constructor for the TAO_AMH_*ResponseHandler
	  class.

	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
	* TAO_IDL/be_include/be_visitor_operation/operation.h:
	* TAO_IDL/be_include/be_visitor_operation/operation_ss.h:
	  Move several helper methods to the base class
	  (be_visitor_operation), because we need them in classes that do
	  not derive from be_visitor_operation_ss

	* TAO_IDL/ast/ast_decl.cpp:
	  Fixed small compilation warning.

Fri Jan 18 15:55:59 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Portable_Interceptors/ForwardRequest/client.dsp:
	* tests/Portable_Interceptors/ForwardRequest/server.dsp:

	  Added missing TAO_IDL include flag and ValueType generation
	  flag.  PortableInteceptor.pidl now has support for
	  ObjectReferenceTemplates, which requires ValueType support.

Fri Jan 18 22:30:03 GMT 2002  Boris Kolpackov <bosk@ipmce.ru>

        * tests/OBV/Any/*:
        * tests/OBV/Factory/Makefile:
        * tests/OBV/Forward/Makefile:
        * tests/OBV/README:
        * tests/OBV/Makefile:
        * tests/Makefile:

          Added OBV-and-Any test. Updated relevant Makefile's.

Fri Jan 18 15:41:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp (idl_store_pragma):

          Changed the string "id" to match for #pragma ID to
          upper case.

        * TAO_IDL/ast/ast_decl.cpp:

          Changed check in version setting function to correspond to
          the CORBA 2.5 change that now allows the version to be reset
          if it is reset to the same value.

Fri Jan 18 13:19:00 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	* tao/TAO_AMH_Response_handler.h:
	* tao/TAO_AMH_Response_handler.cpp:

	  Added code that now generates AMH-RH code for operation in
	  skeleton-source file.  Changed 'tao_out' CDR stream in
	  TAO_AMH_Response_Handler so that the variable names of the
	  generated IDL code and that in the tao orb_core files match.

Fri Jan 18 13:47:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_visitor_valuetype.h:
        * TAO_IDL/be/be_visitor_valuetype.cpp:

          Removed duplicate file inclusions.

Fri Jan 18 13:21:28 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp:

          Added patch sent in by Andy Olsen <olsona@uswest.net> that
          limits the last component of the name of the temporary file
          used by gperf to no more than 48 characters, when the
          platform is QNX.

Fri Jan 18 22:16:06 2002  Boris Kolpackov <bosk@ipmce.ru>

	* TAO_IDL/be_include/be_visitor_typecode/typecode_decl.h:
	* TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
	* TAO_IDL/be_include/be_visitor_valuetype/any_op_ch.h:
	* TAO_IDL/be_include/be_visitor_valuetype/any_op_cs.h:
	* TAO_IDL/be_include/be_valuetype.h:
	* TAO_IDL/be_include/be_visitor_valuetype.h:
	* TAO_IDL/be/be_visitor_module/module.cpp:
	* TAO_IDL/be/be_visitor_root/root.cpp:
	* TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
	* TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
	* TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
	* TAO_IDL/be/be_visitor_factory.cpp:
	* TAO_IDL/be/be_valuetype.cpp:
	* TAO_IDL/be/be_visitor_valuetype.cpp:
	* tao/Typecode.h:
	* tao/Marshal.h:
	* tao/Marshal.i:
	* tao/Marshal.cpp:
	* tao/Typecode.cpp:
	* tao/ValueBase.cpp:
	* tao/append.cpp:
	* tao/skip.cpp:
	  Added Any and TypeCode support for valuetypes.

Fri Jan 18 11:50:06 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* */Makefile: Regenerated dependencies.

Fri Jan 18 09:32:57 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be_include/be_interface.h:
	* TAO_IDL/be/be_interface.cpp:
	  Improved comments in generated code.
	  New gen_operation_table() helper method, it can generate an
	  operation table with a different class name (and class flat
	  name).  This is useful for the AMH code generation.
	  Changed the related methods to take a flat_name argument.

	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	  Do not create a temporary "AMH_*" node, the visitors deal with
	  the original interface node directly.
	  Fixed generation of the _this() method to use the new
	  TAO_ENV_ARG_* macros.

	* TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	  Make the "flat_name" customizable in the be_visitor_interface_ss
	  vistor.  This is used to generate an AMH-specific flat name and
	  take advantage of the new gen_operation_table() helper method in
	  be_interface.

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	  Since there is no AMH_* node anymore then we need to add the
	  AMH_ prefix explicitly.

	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Removed traditional visitors, but I still need to add the new
	  ones.

Fri Jan 18 09:23:42 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup.dsp:
	  Fixed custom build for .idl files for Release builds.

Fri Jan 18 06:54:48 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/orbsvcs.dsw:

          Added ETCL to the dependencies for the Fault_Tolerance workspace.

Thu Jan 17 23:31:13 2002  Ossama Othman  <ossama@uci.edu>

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp:

	  Added missing ObjectReferenceTemplateC.* files.

Fri Jan 18 07:55:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Added Policy_Validator, ObjectReferenceTemplateC

        * tao/PortableServer/Makefile.bor:
          Removed Policy_Validator

        * tao/BiDir_GIOP/Makefile.bor:
          Added BiDirPolicy_Validator

Thu Jan 17 21:46:16 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.{h,cpp}
	  (retrieve_credentials):

	  New method that extracts SSLIOP-specific credentials from the
          SecurityLevel2::InvocationCredentialsPolicy via the ORB's policy
	  framework.  Extracted credentials will be used when establishing
	  the underlying SSL connection.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

	  Fixed a memory leak that occurred on error before an attempt to
	  establish a connection was made.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

	  Added downcast related methods that make it possible to downcast
	  to the TAO_SSLIOP-specific interfaces.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl (x509):

	  New file that contains the new x509() accessor method.

Thu Jan 17 22:02:38 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* orbsvcs/orbsvcs/Notify/Notify_Extensions.h:
	* tao/BiDir_GIOP/BiDirPolicy_Validator.h:
	  Fixed Fuzz compile errors.

Thu Jan 17 21:52:22 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* utils/nslist/nsdel.cpp:
	  Fixed compile errors on Win32 builds.

Thu Jan 17 19:24:24 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ObjectReferenceTemplateC.h:
	  Removed the if-defs around the ValueBase and ValueFactory
	  includes. The includes are needed in all cases and not just when
	  minimum_corba=1

Thu Jan 17 19:06:58 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:
	  Fixed unused parameter warnings.

Thu Jan 17 18:59:14 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/IORInfo.cpp:
	  Fixes for the KCC statement-not-reachable warnings.

Thu Jan 17 18:40:49 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/TAO_Internal.cpp:
	  Included the missing debug.h

Thu Jan 17 17:40:55 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* be_include/be_visitor_interface/amh_rh_sh.h:
	* be_include/be_visitor_interface/amh_rh_ss.h:
	* be_include/be_visitor_operation/amh_rh_sh.h:
	* be_include/be_visitor_operation/amh_rh_ss.h:
	* be/be_visitor_interface/amh_rh_sh.cpp:
	* be/be_visitor_interface/amh_rh_ss.cpp:
	* be/be_visitor_operation/amh_rh_sh.cpp:
	* be/be_visitor_operation/amh_rh_ss.cpp:

	  Most of the 'bugs' have been fixed with the AMH-RH generated
	  code now.  The only known remaining 'to-do' is the generation of
	  the marshalling code for the RH-parametes in the skeleton source
	  file.

Thu Jan 17 17:39:00 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp:

	  Use the Security::QOP type instead of an integer to store the
	  desired quality-of-protection.  The former is more descriptive.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h (TAO_SSLIOP_Endpoint):

  	  Cache the quality-of-protection and establishment-of-trust
	  settings associated with the endpoint object.  They are need
	  when determining if a given cached connection is suitable for an
	  invocation with a given set of security policies
	  (e.g. QOPPolicy).

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i (qop, trust):

	  Accessors methods for their cached counterparts.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp (is_equivalent, hash):

	  Take into account the quality-of-protection and
	  establishment-of-trust settings when determining endpoint
	  equivalence and computing hashes.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

	  Added support for the Security::SecQOPIntegrity
	  quality-of-protection.  Integrity without confidentiality is
	  achieved by using the "eNULL" SSL cipher.  Despite the fact that
	  encryption is disabled, a secure hash is still used to ensure
	  integrity.

	  Cleaned up the code in this method.

Thu Jan 17 17:34:10 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ObjectReferenceTemplate.pidl:
	* tao/PortableInterceptor.pidl:
	  Moved the ObjectReferenceTemplate stuff from
	  PortableInterceptor.pidl to the new
	  ObjectReferenceTemplate.pidl. This is needed to get the builds
	  straight for the minimum corba. By moving the ORT related part
	  to a separate pidl, we are making it (ORT) usable irrespective
	  of the usage of interceptors.

	* tao/PortableInterceptorC.i:
	* tao/PortableInterceptorC.h:
	* tao/PortableInterceptorC.cpp:
	  Regenerated and applied patches.

	* tao/ObjectReferenceTemplateC.h:
	* tao/ObjectReferenceTemplateC.h:
	* tao/ObjectReferenceTemplateC.h:
	  Generated and made modifications as needed.

	* tao/PortableServer/ObjectReferenceTemplate.cpp:
	* tao/PortableServer/ObjectReferenceTemplate.h:
	* tao/PortableServer/ObjectReferenceFactory.cpp:
	* tao/PortableServer/ObjectReferenceFactory.h:
	  Since this part is out of the interceptor loop, removed the
	  if-defines checking for interceptors. Removed the include of
	  PortableInterceptorC.h and included ObjectReferenceTemplateC.h
	  instead.

	* tao/PortableServer/POA.cpp:
	* tao/PortableServer/POA.h:
	  Included StringSeqC.h needed for minimum corba builds.
	  Moved wrongly placed #endif for TAO_HAS_MINIMUM_POA check.

	* tao/Makefile:
	  Added ObjectReferenceTemplateC to the list of ORB_CORE files.

Thu Jan 17 16:02:50 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be_include/be_visitor_interface/amh_sh.h:
	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	  Override visit_operation() and visit_attribute() to invoke the
	  AMH-specific visitors.

	* TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
	  Improve comments in generated code, instead of saying silly
	  things like "//constructor" (like I didn't know what a
	  constructor looks like).  Instead we generate a pointer to where
	  the code is generated from.
	  Fixed indentation in the generated code also.

	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	  Do not use CORBA::_tc_Object to get the CORBA::Object interface
	  repository ID, the string can as easily get hard-coded, is not
	  like the OMG changes that string every week.

	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	  The AMH-operations have their AMH_*ResponseHandler argument
	  generated, however we still need to double check the arglist
	  because some black magic is going on inside the AMH visitor for
	  interfaces that seems to create a special operation node.

	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Improved skeletons for AMH-operations.  The skeleton is
	  starting to take shape, it creates the AMH_*ResponseHandler but
	  no marshaling or demarshaling code is present.

	* TAO_IDL/be/be_visitor_operation/arglist.cpp:
	* TAO_IDL/be/be_visitor_operation/operation.cpp:
	* TAO_IDL/be_include/be_visitor_operation/operation.h:
	  Factor out code to generate the TAO_ENV_ARG parameter to a
	  separate function, that makes it easier to reuse the arglist
	  visitors.

Thu Jan 17 17:20:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/TAO_Static.dsp: Added the files the Policy_Validator.*
	* tao/BiDir_GIOP/TAO_BiDir_GIOP.dsp: Added the policy validator
	  class files.

Thu Jan 17 17:09:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/TAO.dsp (SOURCE): Added the files the Policy_Validator.*
	* tao/PortableServer/*.dsp: Removed the file Policy_Validator.*.

Thu Jan 17 17:04:25 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Acceptor_Impl.h: Removed the out_of_sockets_handler ()
	  method as this was not used. Thanks to Andrew
	  <andrew@activesol.net> for pointing this out.

	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h: Removed the method parse_bidir_policy () method
	  and added a new method load_policy_validators ().

	* tao/orbconf.h: Added a new cached policy for BiDir connections.

	* tao/Policy_Validators.h:
	* tao/Policy_Validators.cpp: Moved this class from PortableServer
	  library. This is very useful in TAO when policy validators from
	  other libraries needs to be added to the POA policy
	  validator. We now use this as a basis of a new policy validator
	  class in BiDir library. The BiDir library would add its policy
	  validator to the POA policy validator.

	* tao/BiDir_Adapter.h: Added a method load_policy_validators () to
	  add the policy validator.

	* tao/Makefile: Added the new files.

	* tao/BiDir_GIOP/BiDirPolicy_Validator.h:
	* tao/BiDir_GIOP/BiDirPolicy_Validator.cpp: The new policy
	  validator for BiDir GIOP.

	* tao/BiDir_GIOP/BiDirGIOP.cpp:
	* tao/BiDir_GIOP/BiDirGIOP.h:
	* tao/BiDir_GIOP/BiDir_Policy_i.cpp:
	* tao/BiDir_GIOP/BiDir_Policy_i.h:
	* tao/BiDir_GIOP/Makefile: Changes to create and use the validator
	  properly.

	* tao/PortableServer/Default_Policy_Validator.cpp:
	* tao/PortableServer/Default_Policy_Validator.h: Changes to use
	  the Policy_Validator in TAO.

	* tao/PortableServer/Makefile: Removed the Policy_Validator.* and
	  generated dependecies.

	* tao/PortableServer/Policy_Validator.h:
	* tao/PortableServer/Policy_Validator.cpp: Moved to
	  $TAO_ROOT/tao.

	* tao/PortableServer/Object_Adapter.h
	* tao/PortableServer/Object_Adapter.i
	* tao/PortableServer/POA.h:
	* tao/PortableServer/POA_Policy_Set.cpp:
	* tao/PortableServer/POA_Policy_Set.h:
	* tao/PortableServer/Policy_Validator.h:
	* tao/RTPortableServer/RT_Policy_Validator.cpp:
	* tao/RTPortableServer/RT_Policy_Validator.h: Changes to
	  accomodate the new policy_Validator class in $TAO_ROOT/tao.

Thu Jan 17 12:22:32 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (init):
	* tao/TAO_Internal.cpp (open_services):

	  Moved the parsing code for the "-ORBDebug" and "-ORBDebugLevel"
	  options to TAO_Internal::open_services() so that Service_Objects
	  and ORBInitializers may use debugging output dependent on their
	  values.  Note that this change does not affect other debugging
	  code in the ORB.  It simply moves the option parsing code
	  earlier in the bootstrapping process.

Thu Jan 17 12:04:41 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

	  The certificate must be set before the private key since the
	  ACE_SSL_Context attempts to check the private key for
	  consistency.  That check requires the certificate to be
	  available in the underlying SSL_CTX.

Thu Jan 17 13:40:09 2002  Chad Elliott  <elliott_c@ociweb.com>

        Added new features to the Notification Service.  The following items
        have been implemented: Sequence Push Consumers/Suppliers, Pacing
        Interval, Maximum Batch Size, Deadline ordering policy,
        Deadline, Priority and LIFO discarding policies.

        Tests were written by Chip Jones <jones_c@ociweb.com> and Pete
        Maher <maher_p@ociweb.com>.

        * docs/releasenotes/index.html:

          Update the documentation to reflect the current state of the
          Notification Service.

        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/Notify_Service/Notify_Service.dsp:
        * orbsvcs/examples/Notify/Filter/Filter.dsp:
        * orbsvcs/examples/Notify/Filter/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.dsp:
        * orbsvcs/orbsvcs/CosNotification.dsp:
        * orbsvcs/orbsvcs/CosNotification_Static.dsp:
        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:
        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/orbsvcs.dsw:

          Update Makefiles and project files to use the ETCL library.

        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.h:
        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.i:
        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Command.h:
        * orbsvcs/orbsvcs/Notify/Notify_Command.i:
        * orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Extensions.h:
        * orbsvcs/orbsvcs/Notify/Notify_Extensions.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Proxy_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_Proxy_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.inl:
        * orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Signal_Property_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_Signal_Property_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.h:
        * orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Notify_Worker_Task.cpp:

          Modifications and additions for the new features.

        * orbsvcs/tests/Notify/Makefile:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.h:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.cpp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:
        * orbsvcs/tests/Notify/Basic/Events_Test.h:
        * orbsvcs/tests/Notify/Basic/Events_Test.cpp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/Basic/Simple.h:
        * orbsvcs/tests/Notify/Basic/Simple.cpp:
        * orbsvcs/tests/Notify/Basic/Updates.dsp:
        * orbsvcs/tests/Notify/Basic/Updates.h:
        * orbsvcs/tests/Notify/Basic/Updates.cpp:
        * orbsvcs/tests/Notify/lib/Makefile:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.h:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:

          Update the current Nofication tests to allow smooth integration of
          the new tests.

        * orbsvcs/tests/Notify/Blocking/Blocking.dsw:
        * orbsvcs/tests/Notify/Blocking/Makefile:
        * orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Blocking/README:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Blocking/common.h:
        * orbsvcs/tests/Notify/Blocking/common.cpp:
        * orbsvcs/tests/Notify/Blocking/go.idl:
        * orbsvcs/tests/Notify/Blocking/notify.conf:
        * orbsvcs/tests/Notify/Blocking/run_test.pl:
        * orbsvcs/tests/Notify/Discarding/Discarding.dsw:
        * orbsvcs/tests/Notify/Discarding/Makefile:
        * orbsvcs/tests/Notify/Discarding/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Discarding/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Discarding/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/README:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/common.h:
        * orbsvcs/tests/Notify/Discarding/common.cpp:
        * orbsvcs/tests/Notify/Discarding/go.idl:
        * orbsvcs/tests/Notify/Discarding/notify.conf:
        * orbsvcs/tests/Notify/Discarding/run_test.pl:
        * orbsvcs/tests/Notify/MT_Dispatching/MT_Dispatching.dsw:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/README:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/go.idl:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtdispatching.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtlistener.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtsource.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_nothreads.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/run_test.pl:
        * orbsvcs/tests/Notify/Ordering/Makefile:
        * orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Ordering/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Ordering.dsw:
        * orbsvcs/tests/Notify/Ordering/README:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/common.h:
        * orbsvcs/tests/Notify/Ordering/common.cpp:
        * orbsvcs/tests/Notify/Ordering/go.idl:
        * orbsvcs/tests/Notify/Ordering/notify.conf:
        * orbsvcs/tests/Notify/Ordering/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/README:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Multi_ETCL_Filter.dsw:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/common.h:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/common.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/go.idl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/notify.conf:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/README:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Multi_Filter.dsw:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/common.h:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/common.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/go.idl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/notify.conf:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.h:
        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/README:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter.dsw:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/control.idl:
        * orbsvcs/tests/Notify/Structured_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Consumer.h:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Supplier.h:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/README:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter.dsw:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/control.idl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/Filter/Filter.dsw:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/README:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/common.h:
        * orbsvcs/tests/Notify/performance-tests/Filter/common.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/go.idl:
        * orbsvcs/tests/Notify/performance-tests/Filter/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/Filter/run_test.pl:

          Add many new tests to test the various features of the
          Notification Service.

Thu Jan 17 11:03:14 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
	* TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
	  Fixed code generation for the AMH_* classes, at this point the
	  code for *S.h looks reasonable (and compiles!).
	  Ditto for the _is_a(), _interface() and similar methods in the
	  *S.cpp file, but we need to fix the generated skeletons.

Thu Jan 17 10:40:57 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/EstablishTrustPolicy.cpp
	  (policy_type, destroy, trust):
	* orbsvcs/orbsvcs/Security/QOPPolicy.cpp
	  (policy_type, destroy, qop):

	  Fixed unused parameter warnings.

Thu Jan 17 10:30:41 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):

	  Create and register the SecurityManager object with the ORB's
	  resolve_initial_references() mechanism.

Thu Jan 17 10:17:18 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_codegen.cpp:
	  Add the #include for "tao/TAO_AMH_Response_Handler.h" if needed.

	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	  Add missing close braces in the generated code.  We never
	  finished the definition of the AMH_* class.

	* TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
	  We were not closing the definition of the
	  TAO_AMH_*ResponseHandler class either.
	  Fixed TAO_AMH_Response_Handler name in generated code.
	  Fixed indentation in the generated code too.

Thu Jan 17 10:08:36 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/SecurityManager.cpp
	  (remove_own_credentials):

	  Corrected assignment where equality conditional was expected.

Thu Jan 17 09:49:23 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Fixed the UTL_ScopedName for the AMH_*ResponseHandler, finally
	  we got the generated code to look like we want (and compiles
	  too!)

Thu Jan 17 10:28:54 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp.diff:

          Initialized two register char* variables in the generated
          lex file. Even though they are clearly initialized about
          20 lines down and never skipped, Redhat Static seems to
          have a problem with it.

Thu Jan 17 10:25:54 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* TAO_IDL/be_include/be_interface_strategy.h:
	  Fixed compile errors.

Thu Jan 17 09:25:11 2002  Frank Hunleth   <fhunleth@cs.wustl.edu>

	* orbsvcs/tests/Miop/Makefile: Added.

Thu Jan 17 09:25:11 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
	  Fixed KCC warning.

Thu Jan 17 00:54:41 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/interface.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

	  Made code generation logic for AMH-skeletons and AMH-RH
	  consistent (and symmetric) in the amh_rh and amh_ss files.

Tue Jan 17 08:12:22 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security.bor:
          Added missing IDL build rule for SecurityReplaceable.idl

Wed Jan 16 22:46:12 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h (ssliop_connect):

	  Updated this method to accept a "no protection" parameter.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp
	  (connect, ssliop_connect):

	  In the "NoProtection/EstablishTrust" case, establish a
	  connection using the "eNULL" cipher.  This disables encryption
	  but allows certificate authentication to occur.  Previously two
	  connections were used, one to authenticate over SSL and the
	  other to invoke requests over plain IIOP, which is clearly
	  undesirable.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

	  If "NoProtection" is enabled, then add the "eNULL" cipher to the
	  default cipher list.  This allows encryption to be disabled
	  while allowing certificate authentication to occur.

Wed Jan 16 20:08:39 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/PrincipalAuthenticator.h:

	  Cache a reference to the SecurityManager passed in as a
	  parameter to the constructor.

	* orbsvcs/orbsvcs/Security/PrincipalAuthenticator.cpp
	  (authenticate, continue_authentication):

  	  Register authenticated credentials with the SecurityManager's
	  "own credentials" list.

	* orbsvcs/orbsvcs/Security/SecurityManager.h:

	  Added an "own_credentials" attribute.  All credentials
	  authenticated by the PrincipalAuthenticator will be stored in
	  it.

	* orbsvcs/orbsvcs/Security/SecurityManager.cpp
	  (principal_authenticator):

	  Pass a pointer to the SecurityManager to the
	  PrincipalAuthenticator's constructor so that the
	  PrincipalAuthenticator may call back some of the
	  SecurityManager's methods.

	  (own_credentials, remove_own_credentials):

	  Implemented these SecurityLevel2::SecurityManager methods.

	  (add_own_credentials):

	  New TAO-specific method used internally by the
	  PrincipalAuthenticator to register authenticated credentials
	  with SecurityManager's "own credentials" list.

Wed Jan 16 21:26:14 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile:
	  Disabled compiling PortableGroup when Minimum CORBA is
	  enabled.

	* orbsvcs/orbsvcs/Makefile.PortableGroup:
	  Regenerated dependencies.

	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
	  Fixed a misuses of TAO_ENV_ARG_*.

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	  Fixed subtle typo on MIOP packet segmentation.

	* orbsvcs/tests/Makefile:
	  Added MIOP.

	* tao/PortableServer/POA.cpp:
	* tao/PortableServer/POA.h:
	* tao/PortableServer/PortableGroup_Hooks.h:
	* tao/PortableServer/PortableServerC.cpp:
	* tao/PortableServer/PortableServerC.h:
	* tao/PortableServer/PortableServerC.i:
	* tao/diffs/PortableServerC.cpp.diff:
	* tao/diffs/PortableServerC.h.diff:
	* tao/diffs/PortableServerC.i.diff:
	  #ifdef'd out PortableGroup additions to the POA when
	  minimum CORBA is enabled.

Wed Jan 16 20:28:56 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	* orbsvcs/orbsvcs/PortableGroup.bor:
	* orbsvcs/orbsvcs/Makefile.PortableGroup:
	* orbsvcs/orbsvcs/PortableGroup.dsp:
	  Added custom wait strategy for UIPMC to prevent any
	  one from waiting for a response.  Previously, if
	  someone tried invoking a twoway using MIOP, execution
	  would hang until a time out.  This way, the user
	  gets a system exception if they ever try to wait for
	  a response.

Wed Jan 16 19:18:14 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* performance-tests/AMI_Latency/client.cpp:
	  Fixed compile errors.

Wed Jan 16 13:17:04 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be_include/be_visitor_interface/interface.h:
	* TAO_IDL/be/be_visitor_interface/interface.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

	  Added method to check if a particular node is an 'AMH' node that
	  was added during pre-processing.  This check is used to
	  dynamically create the amh_rh visitors in interface_s{h/s}
	  visitors.

Wed Jan 16 12:57:56 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  The AMH_*ResponseHandler identifier should not include the
	  Module:: prefix.  The fix is incomplete, as I believe that the
	  Identifier for the implied be_interface node should have the
	  enclosing scope identifier, but this change makes the *C.h file
	  compilable.
	  Also fixed the operations for the implied AMH_*ResponseHandler,
	  they were supposed to be 'local' too.

Wed Jan 16 12:22:13 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:

	  Fixed Fuzz errors for @file

Wed Jan 16 14:12:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_global.cpp:

          Added initialization of the gen_amh_classes_ member.

        * TAOACE.dsw:

          Restored ETCL project to workspace and updated project
          dependencies for this project and for CosNotifcation. My
          previous checkin of these changes got clobbered someehow.

        * orbsvcs/orbsvcs/CosNotification.dsp:

          Somehow these settings got clobbered as well.

Wed Jan 16 12:02:40 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PICurrent.cpp (copy):

	  Only perform the shallow/logical copy if the source slot table
	  was modified.  Fixes a problem where values logically copied
	  from the RSC to the TSC were lost after the TSC was copied back
	  to the RSC, despite the fact the TSC's slot table was not
	  modifed.  Thanks to Greg Hall <Greg.Hall@Australia.Boeing.com>
	  for discovering the problem.

Wed Jan 16 11:45:23 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/ObjectReferenceTemplate.cpp (adapter_name):
	  Fixed warnings on Debian_NoInline build.

Wed Jan 16 11:38:21 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/ORT/server.cpp (main):
	* orbsvcs/examples/ORT/Object_Factory_i.cpp:
	* orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h:
	* orbsvcs/examples/ORT/gateway_server.cpp :
	* orbsvcs/examples/ORT/server.cpp :
	* orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp:
	  Fixed fuzz compile errors.

Wed Jan 16 11:23:04 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/ior_corbaloc/README (ftp):
	  Updated the README.

	  Thanks to Gerhard Voss <Gerhard_Voss@t-online.de> for
	  reporting that it is outdated.

Wed Jan 16 08:37:55 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* utils/nslist/nsdel.cpp:
	  Fixed compile errors.

Wed Jan 16 08:33:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/ETCL.bor:
          Added BCB makefile for this new library

        * orbsvcs/orbsvcs/CosNotification.bor:
          Added ETCL and DynamicAny libraries, removed Trading

        * orbsvcs/orbsvcs/Makefile.bor:
          Added ETCL

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile.bor:
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.bor:
        * orbsvcs/tests/FaultTolerance/IOGR/Server.bor:
          Use the FTORB library instead of the FT library

        * tests/Portable_Interceptors/ForwardRequest/server.bor:
        * tests/Portable_Interceptors/ForwardRequest/client.bor:
          Added -Gv to the TAO_IDL since PortableInterceptor.pidl now
 	  has valuetypes.

Tue Jan 15 20:24:24 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be_include/be_visitor_valuetype/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_valuetype/any_op_cs.h:

          New files that generate Any operators for value types.
          For now, all that's generated is the TAO_Valuetype_Manager
          template class instantiation that takes the value type
          as its parameter. The TAO_Object_Manager template
          instantiations for interfaces are generated along with
          the Any operators, so the same approach is followed for
          value types, even though Any operators for value types
          are not yet supported.

        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_valuetype.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be_include/be_visitor_valuetype.h:

          Modified files to create and call the visitors in the new
          files above.

Tue Jan 15 17:59:46 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h:

	  New SSLIOP-specific (no-op) implementation of the
	  SecurityReplaceable::Vault interface.  These files supersede the
	  SSLIOP_PrincipalAuthenticator.* files.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp:

	  Register the SSLIOP-specific Vault object with the Security
	  Service's PrincipalAuthenticator object.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_PrincipalAuthenticator.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_PrincipalAuthenticator.h:

	  Removed these files.  They have been superseded by the
	  SSLIOP_Vault* files.

	* orbsvcs/orbsvcs/Security/PrincipalAuthenticator.cpp:
	* orbsvcs/orbsvcs/Security/PrincipalAuthenticator.h:

	  Updated the PrincipalAuthenticator implementation to use the
	  Chain-of-Responsibility design pattern on all registered
	  SecurityReplaceable::Vault implementations until one is found
	  that recognizes the user-supplied parameters.

	* orbsvcs/orbsvcs/Security/PrincipalAuthenticator_Impl.h:

	  Removed this file in favor of the standard
	  SecurityReplaceable::Vault functionality.

Tue Jan 15 16:22:48 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Use a local interface for the AMH_*ResponseHandler, that
	  generates *exactly* the right code for the *C.{h,i,cpp} files.
	  We need different visitors for the implementation class on the
	  *S.{h,i,cpp} files.

	* TAO_IDL/be_include/be_visitor_interface.h:
	* TAO_IDL/be_include/be_visitor_operation.h:
	* TAO_IDL/be/be_visitor_interface.cpp:
	* TAO_IDL/be/be_visitor_operation.cpp:
	  Enable compilation of AMH visitors by default.

	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_sh.h:
	* TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
	* TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
	  Improved generated AMH code.  For starters the IDL compiler does
	  not crash while generating AMH code :-)  But the generated code
	  does not compile yet.
	  Mayur and myself factored out the shared code between the
	  skeleton source visitors (*S.cpp files) for AMH and non-AMH
	  interfaces.
	  Also stopped the system from generating any AMH classes for
	  implied AMH or AMI classes.

	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	  Fixed warnings.

	* TAO_IDL/Makefile.BE:
	* TAO_IDL/Makefile.EXE:
	* TAO_IDL/Makefile.FE:
	  Updated dependencies.

Tue Jan 15 15:55:54 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile.Security (IDL_FILES):

	  Added the `SecurityReplaceable.idl' file to the IDL file list.

Tue Jan 15 15:46:20 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SecurityReplaceable.idl:

	  Corrected typo.  "Replaceable" not "Replacable."

Tue Jan 15 15:01:48 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/ServerRequestInfo.cpp :
	* tao/PortableServer/POA.i :
	* tao/PortableServer/ObjectReferenceTemplate.h :
	* tao/PortableServer/ObjectReferenceFactory.cpp :
	* tao/PortableServer/ObjectReferenceTemplate.cpp :
	* tao/PortableServer/IORInfo.cpp :
	  Corrected the usage of TAO_ENV_ARG_DECL and
	  TAO_ENV_ARG_PARAMETER

	* tao/PortableServer/POA.h :
	* tao/PortableServer/POA.cpp :
	  In addition to correcting the usage of TAO_ENV_ARG_DECL, added a
	  new protected method so that there is only a single ACE_TRY
	  block in TAO_POA::establish_components method.

Tue Jan 15 14:28:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableInterceptorC.h:
	  Fixed by inserting a space where needed.

Tue Jan 15 13:30:07 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
	* TAO_IDL/be_include/be_visitor_operation.h:
	* TAO_IDL/be_include/be_visitor_operation/amh_sh.h:
	* TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/amh_rh_sh.h:
	* TAO_IDL/be_include/be_visitor_operation/amh_rh_ss.h:
	* TAO_IDL/be_include/be_visitor_interface.h:
	* TAO_IDL/be_include/be_visitor_interface/amh_ch.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_ss.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_rh_sh.cpp:
	* TAO_IDL/be_include/be_visitor_interface/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	* TAO_IDL/be/be_visitor_factory.cpp:
	* TAO_IDL/be/be_visitor_operation.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface.cpp:
	* TAO_IDL/be/be_visitor_interface/interface.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_ch.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

	  This is a snap-shot of the changes to facilitate parallel
	  working on AMH.  The new files and changes to old ones is part
	  of a new approach to generate AMh code from the IDL-compiler.
	  In the new approach, only one new implied-idl node is added to
	  the main AST i.e. the ResponseHandler (RH) node.  With this
	  node, code is generated in the following files:
		- The Client Header (Base abstract RH class)
		- The Skeleton Header (implementation RH class declaration)
		- The Skeleton Source (implementation RH class definition)
	  In this snapshot, the code for the above is in place and there
	  are no compilation errors.  The implementation is yet to be
	  tested, though.  Also, in keeping with the new approach,
	  AMH-skeleton code is generated 'on the fly'.  In the
	  interface_{ch/sh/ss} files, AMH_skeleton code is generated if
	  the be_global->generate_amh_classes () is set.  Currently, this
	  code is commented out and the amh_{ch/sh/ss} files are not
	  included in the compiltation of TAO_IDL but once the code is in
	  place amd working, the IDL compiler will include these visitors.

Tue Jan 15 13:35:07 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableInterceptorS.h:
	  Committing the right one.

	* tests/Portable_Interceptors/ForwardRequest/Makefile:
	  Added -Gv to the TAO_IDLFLAGS since PortableInterceptor.pidl now
 	  has valuetypes.

Tue Jan 15 12:33:34 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ORB_Core.cpp:
	  Removed stray characters put in by mistake.

Tue Jan 15 12:28:21 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableInterceptorC.i:
	* tao/PortableInterceptorC.h:
	* tao/PortableInterceptorC.cpp:
 	  Regenerated and applied patches.

Tue Jan 15 12:03:54 2002  Ossama Othman  <ossama@uci.edu>

	* docs/releasenotes/index.html:

	  Updated Security Service and SSLIOP release notes.

Tue Jan 15 14:02:04 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup.bor:
	* orbsvcs/orbsvcs/PortableGroup.rc:
          Added resource files for the PortableGroup library.  Thanks
	  to Johnny Willemsen <johnny_willemsen@planet.nl> for pointing
	  this out.

Tue Jan 15 11:50:37 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* utils/nslist/nsdel: There were 2 problems with nsdel:
	  1. difficult to remove subcontexts
	  2. not possible to remove contexts where the name.kind is not null

          We've now fixe this problem so it's possible to do the following:
	  usage example nsdel --name com/sun/server/app1.service
	  usage example nsdel --name com/sun/server.context

	  Thanks to Paul Caffrey <pcaffrey@iel.ie> for contributing this.

Tue Jan 15 11:43:48 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Added items to IDL compiler section about the expanded
          support of value types, and about the revamped/expanded
          support of the IDL #pragma directives. Also add item in the
          Notification Service section about the new support of the
          Extended Trader Constraint Language (ETCL) grammar for filter
          construction.

Tue Jan 15 09:08:17 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:
	* tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:
	  Added new methods to class FOO_IORInterceptor to go along with
	  the added methods in PortableInterceptor::IORInterceptor. Missed
	  committing in the first round.

Tue Jan 15 08:55:52 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ORB_Core.cpp (create_stub_object):
          Fixed usage of TAO_ENV_ARG_DECL

Tue Jan 15 09:16:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:

          Added Makefile.ETCL to the list when Makefile>CosNotification
          is added.

        * orbsvcs/orbsvcs/ETCL/ETCL_Static.dsp:

          Fixed path errors.

        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:

          Changed an incorrect TAO_ENV_ARG_PARAMETER to
          TAO_ENV_ARG_DECL.

Tue Jan 15 13:22:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/ORT/*.bor:
          Added BCB makefiles for this test

        * tests/Makefile.bor:
          Added new ORT test

Tue Jan 15 11:09:13 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/PortableServer/Makefile.bor:
          Added PortableGroup_Hooks

        * orbsvcs/orbsvcs/PortableGroup.bor:
          Added new BCB makefile for building PortableGroup

        * orbsvcs/orbsvcs/Makefile.bor
          Added PortableGroup

Tue Jan 15 02:51:04 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/RTCP.cpp: Return 0 in
	  TAO_AV_RTCP_Callback::handle_destroy().

Tue Jan 15 07:35:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Removed IORInfo

        * tao/PortableServer/Makefile.bor:
          Added IORInfo, ObjectReferenceFactory and ObjectReferenceTemplate

Mon Jan 14 22:08:46 2002  Ossama Othman  <ossama@uci.edu>

	From Bruce Trask <trask_b@ociweb.com>
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:

	  Use the ACE_STATIC_SVC_DECLARE_EXPORT macro instead of
	  ACE_STATIC_SVC_DECLARE to force the static service descriptor to
	  be exported on Windows, and thus allow it to be used when the
	  TAO SSLIOP pluggable protocol is linked statically.

Tue Jan 15 00:01:09 2002  Rob Ruff <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/UDP.:
	* orbsvcs/orbsvcs/AV/UDP.cpp: Fix memory leaks of address
	  and control_address.

	* orbsvcs/orbsvcs/AV/RTCP.cpp:  Fix TAO_AV_RTCP_Object::destroy().
	  Call send_report() from TAO_AV_RTCP_Callback::handle_stop() and
	  TAO_AV_RTCP_Callback::handle_destroy().

Mon Jan 14 23:51:54 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/server_discovery: Removed.
	  Depends on files from the old mpeg player which is no longer
	  in repository.

Mon Jan 14 19:53:18 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/IORInfo.cpp (current_factory):
	  Was a returning a void value. Fixed it.

	* tao/PortableServer/POA.cpp (establish_components):
	  Modified variable i as variable j to satisfy win.
	  Also modified a const variable as non-const.

Mon Jan 14 19:37:03 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/PortableServer/TAO_PortableServer_Static.dsp (SOURCE):
	* tao/PortableServer/TAO_PortableServer.dsp:
	  Updated to add IORInfor, ObjectReferenceTemplate and
	  ObjectReferenceFactory.

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp:
	  Updated to remove IORInfo

Mon Jan 14 18:08:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ORB_Core.h (TAO_ORB_Core):
	  Used the correct form of TAO_ENV_ARG_DECL

Mon Jan 14 17:56:09 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/Makefile.ETCL:

          Updated dependencies.

Mon Jan 14 15:25:25 2002  Carlos O'Ryan  <coryan@uci.edu>

	* TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ci.cpp:
	* TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype/cdr_op_ci.cpp:
	* TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:
	* TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ci.cpp:
	  Fixed syntax error generated in the CDR operators for
`	  valuetypes.  There was no blank after the export macro name.

	* TAO_IDL/be/be_codegen.cpp:
	* TAO_IDL/be/be_global.cpp:
	* TAO_IDL/be/be_interface.cpp:
	* TAO_IDL/be/be_valuetype.cpp:
	  Cosmetic fixes

Mon Jan 14 15:19:05 2002  Carlos O'Ryan  <coryan@uci.edu>

	* tao/PortableInterceptorC.h:
	  Fixed compilation problem due to bugs in IDL compiler.

	* tao/PortableServer/ObjectReferenceTemplate.cpp:
	  Removed bogus #include for ObjectReferenceTemplate.i, the file
	  does not exist.

	* tao/Makefile:
	* tao/BiDir_GIOP/Makefile:
	* tao/Domain/Makefile:
	* tao/DynamicAny/Makefile:
	* tao/DynamicInterface/Makefile:
	* tao/IFR_Client/Makefile:
	* tao/IORManipulation/Makefile:
	* tao/IORTable/Makefile:
	* tao/PortableServer/Makefile:
	* tao/RTCORBA/Makefile:
	* tao/RTPortableServer/Makefile:
	* tao/SmartProxies/Makefile:
	* tao/Strategies/Makefile:
	* tao/TypeCodeFactory/Makefile:
	  Update dependencies.

Mon Jan 14 15:03:53 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tao/ORB_Core.cpp:
	  Removed include of IORInfo.h

Mon Jan 14 14:41:17 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	The following set of changes are wrt to Object Reference Template.

	* tao/IORInfo.h:
	* tao/IORInfo.cpp:
	  Moved these files to PortableServer directory to continue
	  keeping the TAO library independent of PortableServer.

	* tao/Exception.cpp:
	  Added a new minor code to the OBJ_ADAPTER_TABLE.
	  The description of the minor code is "Exception in
	  IORInterceptor::components_established in call
          to POA::create_POA "

	* tao/ClientRequestInfo.cpp (get_service_context_i):
	  Changed the minor code from 23 to 26 according to the ORT
	  spec.

	* tao/ORB_Core.h :
	* tao/ORB_Core.i :
	* tao/ORB_Core.cpp :

	  Removed the include of IORInfo.h since ORB_Core doesnt use
	  IORInfo anymore.

	  Added support for the new ORB Configuration Options:
	  -ORBId: is to set an Id to the ORB as the name suggests.
	  -ORBServerId:  is to uniquely identify a server.
	  -ORBListenEndpoints: is similar to ORBEndPoint option.
	      The ORBEndpoint Option will be deprecated later.
	  -ORBNoProprietaryActivation: is to set a glabal flag so
	  that none of the ORB's proprietary can be used.

	  Added a new method set_endpoint_helper for code reusing purposes
	  since the two ORB options -ORBEndpoint and -ORBListenEndPoints
	  are the same. This might not be needed later when the
	  -ORBEndpoint is deprecated totally.

	  New accessor method for the ORBServerId that was passed
	  using	the -ORBServerId Option:
	  const char *server_id (void) const;

	  Added another accessor method is to get the underlying
	  transport cache:
	  TAO_Transport_Cache_Manager *transport_cache (void);

	  Modified the implementation of create_stub_object method.
	  The establish_components method should now be invoked
	  every time a new POA is created and hence should be
	  invoked even before the create_stub_object is invoked.
	  Hence the implementation of TAO_ORB_Core::create_stub_object
	  now doesnt involve invoking the establish components method.

	  The establish_components method is now modified and moved to
	  TAO_POA.

	  Added a new method open (TAO_ENV_ARG_DECL) to set endpoints for
	  listening.

	  In the TAO_ORB_Core::run method, the Environment variable is
	  going to be used. So, changed TAO_ENV_ARG_DECL_NOT_USED to
	  TAO_ENV_ARG_DECL. Also, invoke the new TAO_ORB_Core::open method
	  in here. We donot want to setup the listening points
	  when the RootPOA is created but now. One of the main features of
	  ORT is the ability to set a new factory (and possibly point the
	  ior to another endpoint) with the help of interceptors.
	  If we open an endpoint when the RootPOA is created, then it
	  would endup costly if another endpoint has to be
	  opened during run time (i.e. because of the interceptors being
	  used). So, we are going to open the endpoints during the run
	  time rather than during the RootPOA creation.

	  Private variables: server_id_, open_lock_, open_called_;

	* tao/PortableServer/IORInfo.h:
	* tao/PortableServer/IORInfo.h:
	  Moved the files from tao to PortableServer. And, added new
	  methods: manager_id, state, adapter_template, current_factory
	  according to the ORT spec.

	  Modified the implementation of add_ior_component and
	  add_ior_component_to_profile to invoke
	  TAO_POA::save_ior_component and
	  save_ior_component_and_profile_id instead of adding them
	  immediately for reasons explained later.

	* tao/PortableServer/ObjectReferenceTemplate.h :
	* tao/PortableServer/ObjectReferenceTemplate.cpp :
	* tao/PortableServer/ObjectReferenceFactory.h :
	* tao/PortableServer/ObjectReferenceFactory.cpp :
	  New files for the ObjectReferenceFactory and
	  ObjectReferenceTemplate classes.

	* tao/RTPortableServer/RT_POA.i (create_reference_with_priority):
	  Modified the call create_reference_i and
 	  create_reference_with_id_i to go along with the
	  modified signatures of the respective methods.

	* tao/PortableServer/ServerRequestInfo.h:
	* tao/PortableServer/ServerRequestInfo.cpp:
	  New methods server_id, orb_id and adapter_name from the ORT
	  spec. Accessor methods to get the server_id of the server
	  ( passed via -ORBServerId option), orb_id ( ORBId value that
	  is passed to the ORB_init call) and the name of the related
	  Object Adapter.

	* tao/PortableServer/POAManager.h:
	* tao/PortableServer/POAManager.cpp:
	  New method adapter_manager_state_changed which calls all
	  the registered interceptor's adapter_manager_state_changed
	  methods. Included new header files as needed.

	* tao/PortableServer/Object_Adapter.cpp (open):
	  As explained in ORB_Core changes, we are going to open
	  the default resources during run time and not during RootPOA
	  creation. So, removed the invocation leading to opening the
	  endpoints.

	* tao/PortableServer/POA.cpp :
	  This file has a big bunch of changes.

	  Included new header files as needed.

	  New methods:

	  set_obj_ref_factory: Public method to set the private
	  variable: TAO_ObjectReferenceFactory *obj_ref_factory_
	  The value of this variable is initially the same as
	  TAO_ObjectReferenceTemplate *obj_ref_template_.
	  The value of obj_ref_factory_ can be reset by the
	  TAO_IOR_Info::current_factory method.

	  tao_establish_components: Helper method for
	  establish_components. Instantiates the needed variables and
	  calls establish_components.

	  adapter_name: Returns the adapter_name of an object_adapter
	  (POA).

	  adapter_name_i: Helper method for adapter_name.

	  get_adapter_template:
	  set_adapter_template:
	  get_obj_ref_factory:
	  set_obj_ref_factory: Accessor methods to ort_template_ and
	  obj_ref_factory_ member variables related to a POA.

	  get_policy_list:
	  set_policy_list:
	  get_mprofile:
	  set_mprofile: Accessor methods to get policy_list_ and
	  mprofile_ respectively. TAO_IORInfo needs these values.

	  save_ior_component:
	  save_ior_component_and_profile_id:
	  According to the ORT spec, the Interceptor's
	  establish_components method should be invoked each time a new
	  POA is created. And, the establish_components method is where
	  the IORInfo can get hold of the ior components that are to be
	  added to the mprofiles. But, we donot add the components to the
	  profile when the POA is created but rather when the stub object is
	  to be created. So, to solve this, we save the tagged component
	  and profile_id that we get via the establish_components method
	  and use them later when we are actually creating the stub
	  object. These two methods help save the values, as the name of
	  the method suggests.

	  tao_add_ior_component:
	  tao_add_ior_component_to_profile: Methods to call the
	  add_tagged_component of all the registered interceptors.

	  get_adapter_state:
	  set_adapter_state: Accessor methods to the POA state which could
	  be in one of HOLDING, ACTIVE, DISCARDING, INACTIVE and
	  NON_EXISTENT states.

	  adapter_state_changed: Method to notify the IOR Interceptors
  	  when there is a change in the state of the POA not related to the
	  POA Manager.

	  invoke_key_to_object: The TAO_ObjectReferenceFactory::make_object
	  creates the object references by default (ie. unless the factory
	  is changed with the help of interceptors). It invokes the POA's
	  invoke_key_to_object method for the same purpose. This method
	  gets all the required values and invokes the key_to_object which
	  actually creates the object reference.

	  get_manager_id: Accessor method to get the manager id.

	  The constructor of TAO_POA is also changed. Each POA has an
	  ObjectReferenceTemplate * and ObjectReferenceFactory * member
	  variables. The initial values of the ObjectReferenceTemplate is
	  set in the TAO_POA constructor. The initial value of
	  obj_ref_factory_  is the same as that of ort_template_. While
	  the value of ort_template_ is remains the same, the value of the
	  obj_ref_factory_ can be changed with the help of the
	  interceptors.

	  According to the ORT specification, the interceptor's
	  establish_components method needs to be invoked each time any
	  new POA is created. By invoking the tao's
	  establish_components method from the constructor itself, we
	  are making sure that this method is called for all the POA's
	  including the RootPOA.

	  Changed the order in which the private variables are
	  instantiated in the constructor.

	  Modified the signature of create_reference_i and
	  create_reference_with_id_i to not have the priority as
	  an argument. Where needed, we can get the priority value using
	  the cached_policies_ variable.

	  Modified their implementation to call the this->obj_ref_factory_
	  's make_object method instead of calling the key_to_object
	  method directly. Made changes accordingly. The implementation of
	  servant_to_reference method is also modified similarly.
	  This is because the ObjectReferenceFactory associated with the
	  POA is the one that is supposed to create the object references.
	  To generalize between the default case and the case in which the
	  object reference factory is changed with the help of interceptors,
	  all the methods that end up creating a object reference (by
	  invoking key_to_object method) now end up invoking the
	  associated object reference factory's make_object method. If the
	  default value of the obj_ref_factory_ is not changed, the
	  TAO_ObjectReferenceFactory::make_object is invoked. If the value
	  of obj_ref_factory_ is changed, the make_object of that
	  particular class in invoked.

	  Also, in the servant_to_reference method, instead of setting
	  value of the priority variable to
	  this->cached_policies_.server_priority (), am setting it to
	  TAO_INVALID_PRIORITY. This is because when the control comes to
	  this method, this->cached_policies_ is nil. By setting it to
	  TAO_INVALID_PRIORITY doesnt hurt since the priority is actually
	  set in servant_to_system_id method.

	  Added TAO_ObjectReferenceFactory and TAO_ObjectReferenceTemplate
	  as friend classes to TAO_POA class.

	* tao/PortableServer/Makefile:
	  Added new files.
	  IORInfo
	  ObjectReferenceTemplate
	  ObjectReferenceFactory

	* tao/PortableInterceptorC.cpp:
	* tao/PortableInterceptorC.h:
	* tao/PortableInterceptorC.i:
	* tao/PortableInterceptorS.h:
	  Regenerated and applied patches. The diffs are generated and
	  placed in diffs directory.

	* tao/PortableInterceptor.pidl:
	  Modified according to the ORT specification.


	* tao/Makefile:
	  Removed IORInfo since its now moved to PortableServer. Updated
	  dependencies.

	* tao/BiDir_GIOP/Makefile:
	* tao/Domain/Makefile:
	* tao/DynamicAny/Makefile:
	* tao/DynamicInterface/Makefile:
	* tao/IFR_Client/Makefile:
	* tao/IORManipulation/Makefile:
	* tao/IORTable/Makefile:
	  Updated dependencies.

	* orbsvcs/examples/ORT/README :
	* orbsvcs/examples/ORT/Makefile :
	* orbsvcs/examples/ORT/server.cpp :
	* orbsvcs/examples/ORT/client.cpp :
	* orbsvcs/examples/ORT/Gateway.idl :
	* orbsvcs/examples/ORT/sum_server.idl :
	* orbsvcs/examples/ORT/sum_server_i.h :
	* orbsvcs/examples/ORT/sum_server_i.cpp :
	* orbsvcs/examples/ORT/Server_IORInterceptor.cpp :
	* orbsvcs/examples/ORT/Server_IORInterceptor.h :
	* orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp :
	* orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.h :
	* orbsvcs/examples/ORT/Gateway_i.h :
	* orbsvcs/examples/ORT/Gateway_i.cpp :
	* orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp :
	* orbsvcs/examples/ORT/Object_Factory_i.h :
	* orbsvcs/examples/ORT/Object_Factory_i.cpp :
	* orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h :
	* orbsvcs/examples/ORT/Gateway_ObjRef_Factory.cpp :

	  Example to show how ORT can be used.

	* tests/ORT/README:
	* tests/ORT/Makefile:
	* tests/ORT/server.cpp:
	* tests/ORT/ORT_test.idl:
	* tests/ORT/ORT_test_IORInterceptor.cpp:
	* tests/ORT/ORT_test_IORInterceptor.h:
	* tests/ORT/ORT_test_IORInterceptor_ORBInitializer.cpp:
	* tests/ORT/ORT_test_IORInterceptor_ORBInitializer.h:
	* tests/ORT/ORT_test_i.cpp:
	* tests/ORT/ORT_test_i.h:
	* tests/ORT/client.cpp:
	  Test for the ORT changes.

Mon Jan 14 14:46:54 2002  Carlos O'Ryan  <coryan@uci.edu>

	* docs/tutorials/Quoter/Event_Service/Makefile:
	* docs/tutorials/Quoter/RT_Event_Service/Makefile:
	  Update dependencies.

Mon Jan 14 14:44:31 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/Makefile.av:
	  The dependencies for AV/md5c.c were not generated properly
	  because the Makefile assumed all sources were .cpp files.

Tue Jan 15 00:30:30 2002  Boris Kolpackov  <bosk@ipmce.ru>

	* TAO_IDL/be/be_valuetype.cpp:
	  Moved implementation to client stubs for _var and _out classes.

Mon Jan 14 15:35:13 2002  Rob Ruff <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/AV_Core.h:
	* orbsvcs/orbsvcs/AV/AV_Core.cpp: Add remove_acceptor(), remove_connector(),
	  get_control_flowname() methods.

	* orbsvcs/orbsvcs/AV/UDP.h: Add close() method.
	* orbsvcs/orbsvcs/AV/UDP.i: Add close() method.
	* orbsvcs/orbsvcs/AV/UDP.cpp: Improve cleanup in TAO_AV_UDP_Connector
	  TAO_AV_UDP_Flow_Handler, and TAO_AV_UDP_Acceptor classes.  Close
	  socket in TAO_AV_UDP_Flow_Handler destructor.

	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Improve cleanup in destructors
	  and destroy() method.  TAO_Tokenizer::operator[] returns
	  a const char * instead of dynamically allocated char *.
	  In TAO_StreamEndpoint::destroy(), call destroy() on protocol
	  objects AFTER calling remove_connector() on the AV core.

	* orbsvcs/orbsvcs/AV/TCP.h: Add virtual destructor to TAO_AV_TCP_Flow_Handler.
	* orbsvcs/orbsvcs/AV/TCP.cpp: Add destructor to TAO_AV_TCP_Flow_Handler, improve cleanup in other classes.
	* orbsvcs/orbsvcs/AV/Transport.h: Add close() methods to
	  TAO_AV_Connector_Registry and TAO_AV_Acceptor_Registry.
	* orbsvcs/orbsvcs/AV/Transport.cpp: Add close() methods to
	  TAO_AV_Connector_Registry and TAO_AV_Acceptor_Registry.
	  Return result of reactor()->cancel_timer() in
	  TAO_AV_Flow_Handler::cancel_timer().
	* orbsvcs/orbsvcs/AV/RTCP.cpp: In TAO_AV_RTCP_Object::destroy(),
	  delete this.
	* orbsvcs/orbsvcs/AV/RTP.cpp: In TAO_AV_RTP_Object::destroy(),
	  delete this.
	* orbsvcs/orbsvcs/AV/FlowSpec_Entry.h: Make operator[] return
	  const char *.  Add variables for cleanup.
	* orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp: Add variables for cleanup.
	* orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp: Memory leak fixes.
	  Comment out calls to activate_with_poa().
	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/receiver.cpp:
	  Do not call orb->shutdown(), instead set a flag.


Mon Jan 14 14:04:36 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile.PortableGroup: Regenerated
	  dependencies.

Mon Jan 14 13:41:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/ETCL/ETCL.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Static.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL.rc:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.inl:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint_Visitor.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_Interpreter.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Interpreter.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.cpp.diff:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.h.diff:

          New files added to finish the implementation of the
          Extended Trader Constraint Language library that was
          begun by Carlos O'Ryan <coryan@uci.edu>. Thanks to
          Chad Elliott <elliott_c@ociweb.com> for supplying
          ETCL_Static.dsp.

        * orbsvcs/orbsvcs/ETCL/ETCL.ll:
        * orbsvcs/orbsvcs/ETCL/ETCL.yy:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp.diff:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/Makefile.ETCL:
        * TAOACE_Static.dsw:

          Changes to ETCL and Notification Service files to complete
          the implementation of the ETCL library and to make the
          Notification Service use this library to filter events,
          instead of using the Trading Service's Trader Constraint
          Language, as it did previously.

        * orbsvcs/tests/Notify/Notify_Tests.dsw:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.h:

          Changes to Notification Service test coce submitted by
          Chad Elliott <elliott_c@ociweb.com>.

Mon Jan 14 13:09:31 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:

          Added .in() to instances of TAO_String_Manager and
          TAO_Object_Manager when used in the rhs of an expression,
          and made other cosmetic changes.

        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:

          Removed unused local variable in visit_valuetype().

Mon Jan 14 10:01:12 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/PortableServerC.i
	  (tao_PortableServer_IdUniquenessPolicy_narrow):
	* tao/diffs/PortableServerC.i.diff:

	  Fixed incorrect use of TAO_ENV_ARG_PARAMETER where
	  TAO_ENV_ARG_DECL was expected.

	* tao/PortableServer/POA.cpp (reference_to_ids):

	  Fixed incorrect use of PortableServer::IDs::_nil().  There is no
	  such thing.  Zero is the correct value.

Mon Jan 14 10:32:09 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/tests/FaultTolerance/IOGRManipulation/IOGRTest.dsp:

	* orbsvcs/tests/FaultTolerance/IOGR/Manager.dsp:
	* orbsvcs/tests/FaultTolerance/IOGR/server.dsp: Fixed the
	  libraries that are linked to.

Mon Jan 14 10:25:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Fault_Tolerance.dsp (RSC): Added the right
	  library for linking in the debug  builds.

Mon Jan 14 09:34:35 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tests/IDL_Test/including.idl:

          Prefix the enum value FE with TAO_ to avoid a conflict on HP-UX
          10.20.

Mon Jan 14 09:27:44 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile.PortableGroup: Added missing
	  PortableGroup directory for POA_Hooks.

Mon Jan 14 09:19:43 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* performance-tests/AMI_Latency/client.cpp:
	  Fixed compile error.

Mon Jan 14 08:49:31 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup.idl: Changed include
	  specification to work under Win32 release builds.

Mon Jan 14 09:52:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Added Request_Dispatcher

        * orbsvcs/tests/Makefile.bor:
          Added new Miop directory

        * orbsvcs/tests/Miop/Makefile.bor:
          Added new BCB makefile

        * orbsvcs/orbsvcs/FT_ORB.bor:
          Added new BCB makefile for this library

        * orbsvcs/orbsvcs/FaultTolerance.bor:
          Updated makefile to use the new FT_ORB library

        * orbsvcs/orbsvcs/Makefile.bor:
          Added new FT_ORB.bor makefile

Sun Jan 13 21:50:22 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* tao/TAO_Static.dsp: Added Request_Dispatcher.{cpp,h} to the
	  file listing.

Sun Jan 13 21:24:59 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* tao/Request_Dispatcher.cpp: Fixed ACE_CHECK typo.  Thanks to
	  Venkita for catching it.

	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.h:
	  Cleaned up two comments.

Sun Jan 13 18:23:11 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/Makefile:
	  Regenerated dependencies.

Sun Jan 13 16:19:24 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp
	  (pre_init):

	  Corrected erroneous comments.

Sun Jan 13 15:22:10 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* docs/releasenotes/index.html (MIOP): Added a section for
	  MIOP.

Sun Jan 13 14:35:08 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* performance-tests/AMI_Latency/client.cpp: Rearranged the code
	  a bit to perform better in single-threaded configurations.
  	  Thanks to Sean McCauliff <seanm@Narus.com> for reporting this.

Sun Jan 13 13:02:41 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* TAOACE.dsw:
	* orbsvcs/orbsvcs/PortableGroup.dsp
	  Added PortableGroup (MIOP) to the workspace.

	* orbsvcs/orbsvcs/Makefile:
	* orbsvcs/orbsvcs/Makefile.PortableGroup:
	  Build the PortableGroup code now.

	* orbsvcs/orbsvcs/PortableGroup.idl:
	* orbsvcs/orbsvcs/mgm.idl:
	* orbsvcs/orbsvcs/miop.idl:
	  Added new IDL from the MIOP specification:

	* tao/IOP.pidl:
	* tao/corbafwd.h:
	  Added MIOP specification tag identifiers.  These need to be
	  updated to OMG specified numbers as soon as they come out.

	* orbsvcs/orbsvcs/PortableGroup/README:
	  Readme for the MIOP and PortableGroup code.

	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.h:
	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:
	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
	* orbsvcs/orbsvcs/PortableGroup/portablegroup_export.h:
	  PortableGroup implementation.  Includes hooks to handle
	  new POA methods to associate group references with normal
	  references, dispatch code based on group ID, and code to
	  dynamically open multicast endpoint acceptors when association
	  is made.

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.i:
	  UIPMC (Unreliable IP MultiCast) pluggable protocol
	  implementation.

	* orbsvcs/tests/Miop/README:
	  README for MIOP tests.  Currently just describes the
	  McastHello test.

	* orbsvcs/tests/Miop/McastHello/Makefile:
	* orbsvcs/tests/Miop/McastHello/Makefile.bor:
	* orbsvcs/tests/Miop/McastHello/McastHello.cpp:
	* orbsvcs/tests/Miop/McastHello/McastHello.dsw:
	* orbsvcs/tests/Miop/McastHello/McastHello.h:
	* orbsvcs/tests/Miop/McastHello/README:
	* orbsvcs/tests/Miop/McastHello/Test.idl:
	* orbsvcs/tests/Miop/McastHello/client.bor:
	* orbsvcs/tests/Miop/McastHello/client.conf:
	* orbsvcs/tests/Miop/McastHello/client.cpp:
	* orbsvcs/tests/Miop/McastHello/client.dsp:
	* orbsvcs/tests/Miop/McastHello/run_test.pl:
	* orbsvcs/tests/Miop/McastHello/server.bor:
	* orbsvcs/tests/Miop/McastHello/server.conf:
	* orbsvcs/tests/Miop/McastHello/server.cpp:
	* orbsvcs/tests/Miop/McastHello/server.dsp:
	  Added a simple unit test to try out multicast
	  request generation, transmission, reception,
	  and dispatch.

	* tao/CORBALOC_Parser.cpp:
	  Added check to allow "miop" corbaloc specifiers.

	* tao/GIOP_Message_Base.cpp:
	  Added call to request dispatcher to strategize how
	  requests are dispatched to the POA.  For MIOP, a
	  request be identified by a GroupId and be dispatched
	  to one or more ObjectKeys.

	* tao/GIOP_Message_Generator_Parser.cpp:
	* tao/GIOP_Message_Generator_Parser.h:
	* tao/GIOP_Message_Generator_Parser_10.cpp:
	* tao/GIOP_Message_Generator_Parser_12.cpp:
	  Moved GIOP 1.2 target address spec demarshal code
	  to Tagged_Profile.*, so that the TAO_Tagged_Profile could
	  know what kind of addressing mode it was actually
	  representing.  Previously, it was always assumed that
	  TAO_Tagged_Profile contained an object key.  Now, with
	  MIOP, it is possible for requests to not have ObjectKeys
	  in their target specifiers.  Instead, they have a profile
	  that has a GroupID embedded within it.

	* tao/Tagged_Profile.cpp:
	* tao/Tagged_Profile.h:
	* tao/Tagged_Profile.i:
	  Added logic to unmarshal target specifications from
	  GIOP_Message_Generator_Parser*.  Note that
	  TAO_Tagged_Profile is only used to handle the target
	  specification field and was specialized for this
	  purpose before this change - despite what it's name
	  may imply.

	* tao/IIOP_Acceptor.cpp:
	* tao/Strategies/DIOP_Acceptor.cpp:
	* tao/Strategies/SHMIOP_Acceptor.cpp:
	  Fixed debug text to indicate the right method name.

	* tao/Makefile:
	  Added Request_Dispatcher and updated dependencies.

	* tao/Profile.cpp:
	* tao/Profile.h:
	* tao/Profile.i:
	* tao/Stub.cpp
	* tao/Stub.h
	* tao/Stub.i
	* tao/Invocation.cpp:
	  Changes to maintain the GIOP 1.2 target addressing mode
	  in the profile as opposed to the stub.  This is the needed
	  since the target addressing mode is decided upon based on
	  the profile.  For example, a UIPMC profile needs to use
	  the "profile" addressing mode, since it does not have an
	  object key.  Additionally, if a remote ORB sends an
	  addressing mode exception back, it should only affect the
	  current profile as opposed to all profiles on a stub, since
	  those profiles might go to some other ORB.

	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h:
	* tao/ORB_Core.i:
	  Added request dispatcher strategy and hooks for the
	  PortableGroup library to replace functionality in the
	  PortableServer library.

	* tao/Request_Dispatcher.cpp:
	* tao/Request_Dispatcher.h:
	  Default request dispatcher to send requests to the POA
	  based on their ObjectKey.  (Replaced when the
	  PortableGroup library is active.)

	* tao/TAO.dsp:
	  Added Request_Dispatcher.{cpp,h}.

	* tao/TAO_Server_Request.cpp:
          Added missing this-> to conform to ACE standard.

	* tao/orbconf.h:
	  Added MIOP version definitions.

	* tao/PortableServer/POA.cpp:
	* tao/PortableServer/POA.h:
	  Added methods to forward processing of the new group
	  functionality introduced by the MIOP specification.

	* tao/PortableServer/PortableGroup_Hooks.cpp:
	* tao/PortableServer/PortableGroup_Hooks.h:
	  Base class to implementing the PortableGroup functionality.

	* tao/PortableServer/TAO_PortableServer.dsp:
          Added PortableGroup_Hooks.{cpp,h}.

	* tao/BiDir_GIOP/Makefile:
	* tao/Domain/Makefile:
	* tao/DynamicAny/Makefile:
	* tao/DynamicInterface/Makefile:
	* tao/IFR_Client/Makefile:
	* tao/IORManipulation/Makefile:
	* tao/IORTable/Makefile:
	* tao/PortableServer/Makefile:
	* tao/RTCORBA/Makefile:
	* tao/RTPortableServer/Makefile:
	* tao/SmartProxies/Makefile:
	* tao/Strategies/Makefile:
	* tao/TypeCodeFactory/Makefile:
	  Regenerated dependencies.

	* tao/PortableServer/PortableServer.pidl:
	* tao/PortableServer/PortableServerC.cpp:
	* tao/PortableServer/PortableServerC.h:
	* tao/PortableServer/PortableServerC.i:
	* tao/diffs/PortableServerC.cpp.diff:
	* tao/diffs/PortableServerC.h.diff:
	* tao/diffs/PortableServerC.i.diff:
	  Updated the POA with the group reference association
	  methods introduced by the MIOP specification.

Sun Jan 13 10:52:03 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/tests/FaultTolerance/IOGManpulation/Makefile: Updated
	  dependencies.
	* orbsvcs/tests/FaultTolerance/IOGManpulation/IOGRTest.cpp: Fixed
	  a compilation error.

Sun Jan 13 10:33:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile: Added an FTORB option.
	* orbsvcs/tests/FaultTolerance/IOGR/Makefile: Updated
	  dependencies.

Sun Jan 13 09:35:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* TAOACE_Static.dsw (Project): Added FT_ORB.dsp.

Sun Jan 13 09:03:25 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/worker.h:
	* tests/Two_Objects/server.cpp:
	  Fixed compile errors on SunCC51.

Sat Jan 12 21:45:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FT_ORB.dsp (RSC): Added a new dsp file
	* orbsvcs/orbsvcs/Fault_Tolerance.dsp: Made some slight changes.

	* orbsvcs/orbsvcs/orbsvcs.dsw:
	* orbsvcs/orbsvcs/orbsvcs_static.dsw: Added the new dsp file to
	  the workspace.

Sat Jan 12 21:14:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FT_CORBA_ORB.idl: A new file that contains
	  additions only to the ORB core. This would be good for a variety
	  of reasons. Some point in time, users would like to have only
	  the FT ORB features loaded without the service layer. This
	  should be useful for such cases. An excellent example is when
	  the Heartbeats are going to be implemented. Regular users may
	  need that without any extra stuff, like Notification, DynamicAny
	  etc.

	* orbsvcs/orbsvcs/FT_CORBA.idl: Has only the service layer
	  interfaces.

	* orbsvcs/orbsvcs/Makefile.FTORB: A new file for the TAO_FTORB
	  library.

	* orbsvcs/orbsvcs/Makefile.FaultTolerance: Updated this file.

	* orbsvcs/orbsvcs/Makefile: Added the new Makefile.

	* orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_ORBInitializer.cpp:
	* orbsvcs/orbsvcs/FaultTolerance/FT_PolicyFactory.cpp:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h: Included
	  FT_CORBA_ORBC.h.

	* orbsvcs/tests/FaultTolerance/IOGR/Makefile:
	* orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile: Updated
	  the file to include the TAO_FTORB library.

	* orbsvcs/tests/FaultTolerance/IOGR/svc.conf: Used the new library
	  to load.

Sat Jan 12 10:46:47 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/worker.h:
	  Fixed compile error on Fuzz builds.

Sat Jan 12 09:46:00 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/server.cpp:
	* tests/Two_Objects/First_i.cpp:
	* tests/Two_Objects/Second_i.cpp:
	* tests/Two_Objects/Second_i.h:
	* tests/Two_Objects/Object_Factory_i.cpp:
	  Fixed compile errors on certain builds.

Sat Jan 12 13:06:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added new Two_Obects directory to BCB makefile

Fri Jan 11 17:36:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/orbconf.h: Removed the #if defined clause for the
	  TAO_NAMESPACE definition. Now TAO_NAMESPACE will define
	  namespace by default with no conditionality associated. The
	  macro has been left behind for backward compatibility. This
	  shoudl fix the LynxOS builds.

Fri Jan 11 12:28:48 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* orbsvcs/tests/Security/Makefile (DIRS):
	  Added MT_SSLIOP to DIRS section.

Fri Jan 11 07:50:41 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.h:
	  Fixed some Fuzz warnings.

Fri Jan 11 09:53:41 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Makefile:
	  Added entry for Two_Objects test.

Thu Jan 10 17:43:22 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/Makefile.RTCORBAEvent:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.h:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.inl:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.cpp:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.h:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.inl:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.cpp:
	  Add new dispatching strategy based on RT-CORBA.  Still
	  work-in-progress.

	* orbsvcs/performance-tests/EC_Colocated_Latency/Makefile:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.inl:
	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Receive_Task.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Receive_Task.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.inl:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Supplier.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Supplier.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/driver.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_null.conf:
	* orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_per_supplier.conf:
	* orbsvcs/performance-tests/EC_Colocated_Latency/run_supplier_filtering.sh:
	  Add new performance test to measure latency in the colocated
	  case.

Thu Jan 10 12:48:02 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/worker.cpp:
	* tests/Two_Objects/worker.h:

	Fixed compile errors.

Thu Jan 10 12:13:28 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/Two_Objects.idl:
	* tests/Two_Objects/server.cpp:
	* tests/Two_Objects/client.cpp:
	* tests/Two_Objects/worker.h:
	* tests/Two_Objects/worker.cpp:
	* tests/Two_Objects/First_i.cpp:
	* tests/Two_Objects/First_i.h:
	* tests/Two_Objects/Second_i.cpp:
	* tests/Two_Objects/Second_i.h:
	* tests/Two_Objects/Object_Factory_i.h:
	* tests/Two_Objects/Object_Factory_i.cpp:
	* tests/Two_Objects/Two_Objects.dsw:
	* tests/Two_Objects/server.dsp:
	* tests/Two_Objects/client.dsp:
	* tests/Two_Objects/run_test.pl:
	* tests/Two_Objects/Makefile:
	* tests/Two_Objects/Makefile.bor:
	* tests/Two_Objects/server.bor:
	* tests/Two_Objects/client.bor:
	* tests/Two_Objects/README:

	Created a new test for bug fix 575. This is a test to show
	that there can be concurrent upcalls to two objects in the
	same POA on the same connection.

Thu Jan 10 11:53:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/GIOP.pidl: Added come comments.
	* tao/GIOPC.h:
	* tao/GIOPC.cpp:
	* tao/GIOPC.i (Version_var): Added GIOP::Version_var to the
	  generated code.

	* tao/diffs/GIOPC.cpp.diff:
	* tao/diffs/GIOPC.h.diff:
	* tao/diffs/GIOPC.i.diff:
	* tao/diffs/GIOPS.cpp.diff:
	* tao/diffs/GIOPS.h.diff:
	* tao/diffs/GIOPS.i.diff:
	* tao/diffs/GIOPS_T.cpp.diff:
	* tao/diffs/GIOPS_T.h.diff:
	* tao/diffs/GIOPS_T.i.diff: Added diffs to the generated code.


Wed Jan  9 18:07:55 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TO_IDL/fe/fe_init.cpp (populate_global_scope):

          Removed the guards around the calls related to valuetypes.

Wed Jan  9 11:35:58 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (init):

	  Removed last remnants of the long deprecated -ORBSetUID and
	  -ORBSetGID ORB options.

Wed Jan  9 13:36:14 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:

          Changed the order of member initialization to match the
          order of declaration.

Wed Jan  9 11:39:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ci.cpp:

          Added declaration of CDR operators for anonymous sequence
          array element to the stub inline file. When ACE_INLINE is
          defined, the declarations of these in the header file is
          not included.

Wed Jan  9 08:46:58 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* docs/Options.html: Clarified the use of the
	  -ORBDottedDecimalAddresses option.  Thanks to Michael Gillmann
	  <michael.gillmann@infor.de> for motivating this.

Tue Jan  8 16:20:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:

          Added '::' to instances of 'CORBA::TypeCode_ptr' in
          type code generation. If there is a nested module
          named 'CORBA', MSVC gets confused. Thanks to
          Tom Howard <tom_howard@yahoo.com> for pointing out
          the problem.

Tue Jan  8 14:52:46 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_typedef.cpp:

          Added explicit calls to base class constructors.

        * TAO_IDL/be/be_decl.cpp:

          Added explicit calls to base class constructors, and
          added missing member initialization.

        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ci.cpp:

          Changed the logic for generating CDR operators for
          named arrays of anonymous sequences. Some recent
          change broke this, and it was showing up in IDL_Test.
          Also made cosmetic changes.

        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp:

          Added line breaks to strings of output stream operators,
          to avoid side effects when a method call is in the string.
          Also made cosmetic changes.

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:

          Changed the logic of the code generation for forward
          declared interfaces. The existing logic was a case of two
          wrongs making a right, and was causing a problem with the
          implementation of AMH in the IDL compiler. Thanks to
          Carlos O'Ryan <coryan@uci.edu> and Mayur Deshpande
          <mayur@ics.uci.edu> for pointing out the problem.

Mon Jan  7 10:27:43 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tao/PortableServer/PolicyS_T.i:

          Corrected an invalid ENV parameter macro name.  This was detected
          as an error on HP-UX.  Thanks to Rob Martin <martin_r@ociweb.com>
          for pointing this out.

Sun Jan  6 13:18:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_operation_strategy.cpp:

          Removed an unused argument, and made cosmetic changes.

Sun Jan  6 09:45:24 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* examples/Advanced/ch_8_and_10/client.cpp (main):
	  Added some casts to make certain C++ compilers happy.
	  Thanks to Roy Sharon <roysharon@hotmail.com> for
	  reporting this.

Sat Jan  5 21:31:43 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:

	  Added code to generate the Client side abstract RH class and the
	  skeleton RH class. For the above two interfaces, there should be
	  no classes generated on teh 'other side' i.e. for the client RH
	  interface node, there should be no class generatd in the
	  skeleton files.  Currently there are a few problems with this
	  and with the exact names and inheritance of the generated
	  classes.

Sat Jan  5 18:27:59 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:

	  Added code to generate the skeleton-source code for AMH-skelton
	  operation.  The amh-method differs from the original method in
	  the following ways:
	  - Return type is always void
	  - IN and INOUT parameters _only_ are de-marshalled
	  One part left to be done is the creation and instantiation of
	  the RH inside the generated method body.

Sat Jan  5 18:15:34 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_interface/interface.cpp:

	  Added actions for all the AMH states (including amh_rh).
	  Previously some of them returned 0 or just didn't do anything.

	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

	  Removed all the code from the visit_interface that generates
	  code for the this_method and put it into a seperate method
	  called this_method.  This method already existed but for some
	  reason a part of the code was left in the visit_interface
	  method.  With this in place, the AMH class can now implement all
	  the changes that are needed in the _this () method.

	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:

	  - Changed the this_method().  This method now generates all the
	  code for the _this() method in amh-skeleton.  Changes include a
	  narrow of original interface rather than teh AMH-skeleton narrow
	  and commenting of the generation of the safe_stub.release()
	  line.  - Changed the dispath_method () so that it now generates
	  a call to asynchronous_upcall_dispatch rather than
	  synchronous_upcall_dispatch as is generated for a normal
	  skeleton.

Sat Jan  5 20:39:25 2002  Ossama Othman  <ossama@uci.edu>

	* tao/IIOP_Connection_Handler.cpp (handle_input, handle_output):

	  Reverted my change that avoided a function call.  Bala correctly
	  points out that the handled passed in as a parameter may be an
	  invalid handle if the event handler is dispatched by the
	  reactor's notification mechanism.  Not bueno.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp
	  (handle_input, handle_output):

	  Likewise.

Sat Jan  5 20:00:21 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Connection_Handler.inl (TAO_Connection_Handler):

	  Initialize "pending_upcalls_" and "pending_upcall_lock_" in the
	  base member initializer list.  Although this constructor is not
	  used, it is best to ensure that proper initialization is
	  performed in the event this constructor is used in the future.

Sat Jan  5 19:30:08 2002  Ossama Othman  <ossama@uci.edu>

	* tao/orbconf.h:

	  Include "ace/Basic_Types.h" to pull in the definition of
	  ACE_LITTLE_ENDIAN.

Sat Jan  5 17:54:27 2002  Ossama Othman  <ossama@uci.edu>

	* tao/LF_Strategy.h:

	  No need to include "tao/orbconf.h."  Forward declaring
	  ACE_Time_Value is enough.

	* tao/orbconf.h:

	  Instead of "ace/OS.h", include "ace/config-all.h".  The latter
	  is all that is needed.  This change should improve compile times
	  since "config-all.h" does not include the large number of system
	  headers found in "OS.h," which provides for improved C++
	  preprocessing times in TAO.

	  (TAO_DEFAULT_ORB_TABLE_SIZE):

	  New constant that is used when setting the initial size of the
	  ORB table.  Previously a default of 1024 was used.  However,
	  most applications rarely use more than one ORB, meaning that
	  an ORB table size of 1024 is overkill.  The default is now 16.
	  This size should be more than adequate for the majority of
	  applications.

	  (MCAST_SERVICE_ID, NO_OF_MCAST_SERVICES):

	  Prepend "TAO_" to these macros to avoid polluting the global
	  namespace.

	* tao/ORB.h (resolve_service):
	* tao/ORB.cpp (resolve_service):
	* tao/params.h (service_port):
	* tao/params.i (service_port):
	* tao/params.cpp (TAO_ORB_Parameters):

	  Changed the parameter type "MCAST_SERVICEID" to
	  "TAO_MCAST_SERVICEID," in accordance with the changes made to
	  `orbconf.h' described above.

	* tao/ORB_Table.cpp (TAO_ORB_Table):

	  Initialize the underlying hash map (the ORB table) to a size of
	  TAO_DEFAULT_ORB_TABLE_SIZE.  This change reduces the default ORB
	  table size from 1024 to 16 (TAO_DEFAULT_ORB_TABLE_SIZE), thus
	  greatly reducing the initial ORB table memory utilization.

	* tao/IIOP_Connection_Handler.cpp (handle_input, handle_output):

	  No need to make a function call to retrieve the handle.  Just
	  use the handle parameter passed in to the method.

Sat Jan  5 15:04:46 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/Fill_ACE_QoS.h:  Fix comments.

	* orbsvcs/performance-tests/EC_Federated_Scalability/Makefile:
 	* orbsvcs/performance-tests/EC_Scalability/Makefile:
 	* orbsvcs/performance-tests/EC_Federated_Latency/Makefile:
 	* orbsvcs/performance-tests/EC_Latency/Makefile:

	  Only build these tests if RTEvent is set in TAO_ORBSVCS.

Fri Jan 4 17:30:21 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

	* docs/tutorials/Quoter/RT_Event_Service/index.html:
	  Corrected some broken links. The errors were pointed out thanks
	  to Eric Peters <egpeters@u.washington.edu>.

Fri Jan  4 19:02:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* ChangeLogs/ChangeLog-01c: A new file after splitting from this
	  one.

Fri Jan  4 18:28:44 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be_include/be_decl.h:

          Removed compute_repoID(), the version that is always
          called in in the base class AST_Decl. Thanks to
          Brian Olson <bolson@rtlogic.com> for pointing out
          that the be_decl version was not doing the version
          part of the string correctly.

Fri Jan  4 16:30:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynCommon.cpp (insert_reference):

          Since the argument is passed in as a CORBA::Object_ptr,
          and ultimately inserted into the member Any with the
          non-virtual operator <<=, then
          dyn_any->to_any()->type ()->id() would always yield
          "IDL:CORBA/Object:1.0", no matter what
          dyn_any->type()->id() yields. So the insertion into
          the memeber Any has been changed to use _tao_replace(),
          and passing in the dyn_any's type code, which is
          always of the derived type. Thanks to Mahesh Vedantam
          <mahesh@ociweb.com> for reporting the problem.

Fri Jan  4 15:21:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_visitor.cpp (visit_factory):

          Removed an unused argument.

        * TAO_IDL/fe/fe_tmplinst.cpp:

          Removed explicit instantiation of ACE_Node<char *>, since
          it already appears in ACE.

        * TAO_IDL/fe/lex.yy.cpp:

          Changed isspace() to ACE_OS::ace_isspace().

        * TAO_IDL/be/be_interface_strategy.cpp (compute_coll_names):

          Changed a local const char[] to static const char*. The
          string  "POA_" is assigned to this constant, and there
          has been a long-standing intermittent problem with
          garbage being generated in place of the string. Although
          the problem has never been duplicated by the DOC Group,
          Sorin Iordachescu <sorin.iordachescu@am-beo.com> has
          produced it repeated and has suggested the above fix.

        * TAO_IDL/util/utl_err.cpp:

          Removed all use of ACE_TEXT from methods that return char*.
          When compilation is done with ACE_USES_WCHAR, the return
          type is incorrect. Thanks to Johnny Willemsen
          <johnny_willemsen@planet.nl> for reporting the problem.

Fri Jan  4 14:32:43 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/Fill_QoS.h: Add #include <ace/OS_QoS.h>.

Thu Jan  3 07:18:22 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/LifeCycle_Service/LifeCycle_Service.bor:
          Added library required for a statically linked build.

        * orbsvcs/Notify_Service/NT_Notify_Service.bor:
        * orbsvcs/Notify_Service/Notify_Service.bor:
          Reverted the changes made to these files in
          Sun Dec 30 20:30:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>
          as the trading library is required for a static build.

        * orbsvcs/orbsvcs/*.bor:
        * orbsvcs/orbsvcs/Security.rc:
        * tao/*/Makefile.bor:
        * tao/*/*.rc:
          Added Borland makefile support for the new resource files.

Wed Jan  2 20:48:36 2002  Douglas C. Schmidt  <schmidt@siesta.cs.wustl.edu>

	* TAO-INSTALL.html: Fixed a couple of missing links.  Thanks to
	  Patrick Cosmo <Patrick@incognito.com> for reporting this.

Wed Jan  2 18:00:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/lex.yy.cpp:

          Changed an instance of != ' ' to !isspace.

Wed Jan  2 15:57:52 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/orbsvcs/Naming/Naming_Context_Interface.cpp (to_url):
	  The to_url method should actually be returning a corbaname type
	  URL instead of the corbaloc style URL. According to the
	  INS specification, the method should return a fully formed URL
	  along with the key_string and corbaname format is the one that
	  can have the key_string in it.

	  Moved the pointer to the end of the dest string before
	  concatenating something to it. Previously, it was returning only
	  escaped key_string.

	* orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp :
	  Modified the string that is passed to the to_url method to have
	  a ':' before the dummy address. Now, its in one of the correct
	  syntaxes.

	  Thanks to Scott Harris <harris_s@ociweb.com> for reporting all
	  these.

Wed Jan 02 15:25:53 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/ValueFactory.h: Removed the non-standard tao extension
	  repository_id().  According to the spec, for valuetypes without
	  a factory method, the developer supplied ValueFactory class
	  should inherit from CORBA::ValueFactoryBase directly.
	  Therefore, we can no longer generate this repository_id() method
	  in the IDL compiler.

	  Changed the TAO_OBV_REGISTER_FACTORY to take the type of
	  valuetype it handles as an extra parameter.  The macro will
	  simply use the non-standard TAO extension to stick in the
	  repository_id for the valuetype.  This may not be the correct
	  way to get the repository_id for a valuetype as it is not clear
	  to me how one can get it.

	* examples/OBV/Typed_Events/Event_Types_impl.h: Changed to inherit
	  valuetype factories from CORBA::ValueFactoryBase.

	* examples/OBV/Typed_Events/Server_i.cpp:
	* examples/OBV/Typed_Events/Client_i.cpp: Added type of valuetype
	  when registering factory with the TAO_OBV_REGISTER_FACTORY
	  macro.

Wed Jan  2 15:27:57 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_valuetype.cpp:

          Added some missing ACE_INLINEs to the _var and _out class
          method implementation code generation.

Wed Jan  2 12:02:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/lex.yy.cpp (idl_valid_version):

          Had to add a check for trailing whitespace. SunCC's
          preprocessor leaves it in, it seems, and this was
          leading to version strings being falsely invalidated.

Wed Jan  2 10:22:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp (visit_array):

          Made changes that were overlooked in

          Fri Dec 28 15:41:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

          that correspond to changes made in typedef_ch.cpp.

        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp (visit_array):

          Cosmetic changes.

Wed Jan  2 09:41:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvvcs/IFR_Service/drv_init_ifr.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvvcs/IFR_Service/ifr_visitor.h:

          Changes related to corresponding changes in the TAO IDL
          compiler regarding value types and #pragma prefix.

Tue Jan  1 17:40:23 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/AV/AVStreams_i.h:
	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
	  Remove dummy copy constructor, that should clear some of the
	  builds.

Tue Jan  1 09:38:58 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* examples/RTCORBA/Activity/Activity.cpp:
	  examples/RTCORBA/Activity/Builder.cpp:
	  Fixed compile errors.
