Mon Jan 14 09:52:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Added Request_Dispatcher

        * tao/orbsvcs/tests/Makefile.bor:
          Added new Miop directory

        * tao/orbsvcs/tests/Miop/Makefile.bor:
          Added new BCB makefile

Sun Jan 13 21:50:22 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* tao/TAO_Static.dsp: Added Request_Dispatcher.{cpp,h} to the
	  file listing.

Sun Jan 13 21:24:59 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* tao/Request_Dispatcher.cpp: Fixed ACE_CHECK typo.  Thanks to
	  Venkita for catching it.

	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.h:
	  Cleaned up two comments.

Sun Jan 13 18:23:11 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/Makefile:
	  Regenerated dependencies.

Sun Jan 13 16:19:24 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp
	  (pre_init):

	  Corrected erroneous comments.

Sun Jan 13 15:22:10 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* docs/releasenotes/index.html (MIOP): Added a section for
	  MIOP.

Sun Jan 13 14:35:08 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* performance-tests/AMI_Latency/client.cpp: Rearranged the code
	  a bit to perform better in single-threaded configurations.
  	  Thanks to Sean McCauliff <seanm@Narus.com> for reporting this.

Sun Jan 13 13:02:41 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* TAOACE.dsw:
	* orbsvcs/orbsvcs/PortableGroup.dsp
	  Added PortableGroup (MIOP) to the workspace.

	* orbsvcs/orbsvcs/Makefile:
	* orbsvcs/orbsvcs/Makefile.PortableGroup:
	  Build the PortableGroup code now.

	* orbsvcs/orbsvcs/PortableGroup.idl:
	* orbsvcs/orbsvcs/mgm.idl:
	* orbsvcs/orbsvcs/miop.idl:
	  Added new IDL from the MIOP specification:

	* tao/IOP.pidl:
	* tao/corbafwd.h:
	  Added MIOP specification tag identifiers.  These need to be
	  updated to OMG specified numbers as soon as they come out.

	* orbsvcs/orbsvcs/PortableGroup/README:
	  Readme for the MIOP and PortableGroup code.

	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
	* orbsvcs/orbsvcs/PortableGroup/POA_Hooks.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.h:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.h:
	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:
	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
	* orbsvcs/orbsvcs/PortableGroup/portablegroup_export.h:
	  PortableGroup implementation.  Includes hooks to handle
	  new POA methods to associate group references with normal
	  references, dispatch code based on group ID, and code to
	  dynamically open multicast endpoint acceptors when association
	  is made.

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.i:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.i:
	  UIPMC (Unreliable IP MultiCast) pluggable protocol
	  implementation.

	* orbsvcs/tests/Miop/README:
	  README for MIOP tests.  Currently just describes the
	  McastHello test.

	* orbsvcs/tests/Miop/McastHello/Makefile:
	* orbsvcs/tests/Miop/McastHello/Makefile.bor:
	* orbsvcs/tests/Miop/McastHello/McastHello.cpp:
	* orbsvcs/tests/Miop/McastHello/McastHello.dsw:
	* orbsvcs/tests/Miop/McastHello/McastHello.h:
	* orbsvcs/tests/Miop/McastHello/README:
	* orbsvcs/tests/Miop/McastHello/Test.idl:
	* orbsvcs/tests/Miop/McastHello/client.bor:
	* orbsvcs/tests/Miop/McastHello/client.conf:
	* orbsvcs/tests/Miop/McastHello/client.cpp:
	* orbsvcs/tests/Miop/McastHello/client.dsp:
	* orbsvcs/tests/Miop/McastHello/run_test.pl:
	* orbsvcs/tests/Miop/McastHello/server.bor:
	* orbsvcs/tests/Miop/McastHello/server.conf:
	* orbsvcs/tests/Miop/McastHello/server.cpp:
	* orbsvcs/tests/Miop/McastHello/server.dsp:
	  Added a simple unit test to try out multicast
	  request generation, transmission, reception,
	  and dispatch.

	* tao/CORBALOC_Parser.cpp:
	  Added check to allow "miop" corbaloc specifiers.

	* tao/GIOP_Message_Base.cpp:
	  Added call to request dispatcher to strategize how
	  requests are dispatched to the POA.  For MIOP, a
	  request be identified by a GroupId and be dispatched
	  to one or more ObjectKeys.

	* tao/GIOP_Message_Generator_Parser.cpp:
	* tao/GIOP_Message_Generator_Parser.h:
	* tao/GIOP_Message_Generator_Parser_10.cpp:
	* tao/GIOP_Message_Generator_Parser_12.cpp:
	  Moved GIOP 1.2 target address spec demarshal code
	  to Tagged_Profile.*, so that the TAO_Tagged_Profile could
	  know what kind of addressing mode it was actually
	  representing.  Previously, it was always assumed that
	  TAO_Tagged_Profile contained an object key.  Now, with
	  MIOP, it is possible for requests to not have ObjectKeys
	  in their target specifiers.  Instead, they have a profile
	  that has a GroupID embedded within it.

	* tao/Tagged_Profile.cpp:
	* tao/Tagged_Profile.h:
	* tao/Tagged_Profile.i:
	  Added logic to unmarshal target specifications from
	  GIOP_Message_Generator_Parser*.  Note that
	  TAO_Tagged_Profile is only used to handle the target
	  specification field and was specialized for this
	  purpose before this change - despite what it's name
	  may imply.

	* tao/IIOP_Acceptor.cpp:
	* tao/Strategies/DIOP_Acceptor.cpp:
	* tao/Strategies/SHMIOP_Acceptor.cpp:
	  Fixed debug text to indicate the right method name.

	* tao/Makefile:
	  Added Request_Dispatcher and updated dependencies.

	* tao/Profile.cpp:
	* tao/Profile.h:
	* tao/Profile.i:
	* tao/Stub.cpp
	* tao/Stub.h
	* tao/Stub.i
	* tao/Invocation.cpp:
	  Changes to maintain the GIOP 1.2 target addressing mode
	  in the profile as opposed to the stub.  This is the needed
	  since the target addressing mode is decided upon based on
	  the profile.  For example, a UIPMC profile needs to use
	  the "profile" addressing mode, since it does not have an
	  object key.  Additionally, if a remote ORB sends an
	  addressing mode exception back, it should only affect the
	  current profile as opposed to all profiles on a stub, since
	  those profiles might go to some other ORB.

	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h:
	* tao/ORB_Core.i:
	  Added request dispatcher strategy and hooks for the
	  PortableGroup library to replace functionality in the
	  PortableServer library.

	* tao/Request_Dispatcher.cpp:
	* tao/Request_Dispatcher.h:
	  Default request dispatcher to send requests to the POA
	  based on their ObjectKey.  (Replaced when the
	  PortableGroup library is active.)

	* tao/TAO.dsp:
	  Added Request_Dispatcher.{cpp,h}.

	* tao/TAO_Server_Request.cpp:
          Added missing this-> to conform to ACE standard.

	* tao/orbconf.h:
	  Added MIOP version definitions.

	* tao/PortableServer/POA.cpp:
	* tao/PortableServer/POA.h:
	  Added methods to forward processing of the new group
	  functionality introduced by the MIOP specification.

	* tao/PortableServer/PortableGroup_Hooks.cpp:
	* tao/PortableServer/PortableGroup_Hooks.h:
	  Base class to implementing the PortableGroup functionality.

	* tao/PortableServer/TAO_PortableServer.dsp:
          Added PortableGroup_Hooks.{cpp,h}.

	* tao/BiDir_GIOP/Makefile:
	* tao/Domain/Makefile:
	* tao/DynamicAny/Makefile:
	* tao/DynamicInterface/Makefile:
	* tao/IFR_Client/Makefile:
	* tao/IORManipulation/Makefile:
	* tao/IORTable/Makefile:
	* tao/PortableServer/Makefile:
	* tao/RTCORBA/Makefile:
	* tao/RTPortableServer/Makefile:
	* tao/SmartProxies/Makefile:
	* tao/Strategies/Makefile:
	* tao/TypeCodeFactory/Makefile:
	  Regenerated dependencies.

	* tao/PortableServer/PortableServer.pidl:
	* tao/PortableServer/PortableServerC.cpp:
	* tao/PortableServer/PortableServerC.h:
	* tao/PortableServer/PortableServerC.i:
	* tao/diffs/PortableServerC.cpp.diff:
	* tao/diffs/PortableServerC.h.diff:
	* tao/diffs/PortableServerC.i.diff:
	  Updated the POA with the group reference association
	  methods introduced by the MIOP specification.

Sun Jan 13 10:52:03 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/tests/FaultTolerance/IOGManpulation/Makefile: Updated
	  dependencies.
	* orbsvcs/tests/FaultTolerance/IOGManpulation/IOGRTest.cpp: Fixed
	  a compilation error.

Sun Jan 13 10:33:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/Makefile: Added an FTORB option.
	* orbsvcs/tests/FaultTolerance/IOGR/Makefile: Updated
	  dependencies.

Sun Jan 13 09:35:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* TAOACE_Static.dsw (Project): Added FT_ORB.dsp.

Sun Jan 13 09:03:25 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/worker.h:
	* tests/Two_Objects/server.cpp:
	  Fixed compile errors on SunCC51.

Sat Jan 12 21:45:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FT_ORB.dsp (RSC): Added a new dsp file
	* orbsvcs/orbsvcs/Fault_Tolerance.dsp: Made some slight changes.

	* orbsvcs/orbsvcs/orbsvcs.dsw:
	* orbsvcs/orbsvcs/orbsvcs_static.dsw: Added the new dsp file to
	  the workspace.

Sat Jan 12 21:14:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/FT_CORBA_ORB.idl: A new file that contains
	  additions only to the ORB core. This would be good for a variety
	  of reasons. Some point in time, users would like to have only
	  the FT ORB features loaded without the service layer. This
	  should be useful for such cases. An excellent example is when
	  the Heartbeats are going to be implemented. Regular users may
	  need that without any extra stuff, like Notification, DynamicAny
	  etc.

	* orbsvcs/orbsvcs/FT_CORBA.idl: Has only the service layer
	  interfaces.

	* orbsvcs/orbsvcs/Makefile.FTORB: A new file for the TAO_FTORB
	  library.

	* orbsvcs/orbsvcs/Makefile.FaultTolerance: Updated this file.

	* orbsvcs/orbsvcs/Makefile: Added the new Makefile.

	* orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_ORBInitializer.cpp:
	* orbsvcs/orbsvcs/FaultTolerance/FT_PolicyFactory.cpp:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h: Included
	  FT_CORBA_ORBC.h.

	* orbsvcs/tests/FaultTolerance/IOGR/Makefile:
	* orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile: Updated
	  the file to include the TAO_FTORB library.

	* orbsvcs/tests/FaultTolerance/IOGR/svc.conf: Used the new library
	  to load.

Sat Jan 12 10:46:47 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/worker.h:
	  Fixed compile error on Fuzz builds.

Sat Jan 12 09:46:00 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/server.cpp:
	* tests/Two_Objects/First_i.cpp:
	* tests/Two_Objects/Second_i.cpp:
	* tests/Two_Objects/Second_i.h:
	* tests/Two_Objects/Object_Factory_i.cpp:
	  Fixed compile errors on certain builds.

Sat Jan 12 13:06:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added new Two_Obects directory to BCB makefile

Fri Jan 11 17:36:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/orbconf.h: Removed the #if defined clause for the
	  TAO_NAMESPACE definition. Now TAO_NAMESPACE will define
	  namespace by default with no conditionality associated. The
	  macro has been left behind for backward compatibility. This
	  shoudl fix the LynxOS builds.

Fri Jan 11 12:28:48 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* orbsvcs/tests/Security/Makefile (DIRS):
	  Added MT_SSLIOP to DIRS section.

Fri Jan 11 07:50:41 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.h:
	  Fixed some Fuzz warnings.

Fri Jan 11 09:53:41 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Makefile:
	  Added entry for Two_Objects test.

Thu Jan 10 17:43:22 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/Makefile.RTCORBAEvent:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.h:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.inl:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.cpp:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.h:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.inl:
	* orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.cpp:
	  Add new dispatching strategy based on RT-CORBA.  Still
	  work-in-progress.

	* orbsvcs/performance-tests/EC_Colocated_Latency/Makefile:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.inl:
	* orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Receive_Task.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Receive_Task.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.inl:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Supplier.h:
	* orbsvcs/performance-tests/EC_Colocated_Latency/Supplier.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/driver.cpp:
	* orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_null.conf:
	* orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_per_supplier.conf:
	* orbsvcs/performance-tests/EC_Colocated_Latency/run_supplier_filtering.sh:
	  Add new performance test to measure latency in the colocated
	  case.

Thu Jan 10 12:48:02 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/worker.cpp:
	* tests/Two_Objects/worker.h:

	Fixed compile errors.

Thu Jan 10 12:13:28 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* tests/Two_Objects/Two_Objects.idl:
	* tests/Two_Objects/server.cpp:
	* tests/Two_Objects/client.cpp:
	* tests/Two_Objects/worker.h:
	* tests/Two_Objects/worker.cpp:
	* tests/Two_Objects/First_i.cpp:
	* tests/Two_Objects/First_i.h:
	* tests/Two_Objects/Second_i.cpp:
	* tests/Two_Objects/Second_i.h:
	* tests/Two_Objects/Object_Factory_i.h:
	* tests/Two_Objects/Object_Factory_i.cpp:
	* tests/Two_Objects/Two_Objects.dsw:
	* tests/Two_Objects/server.dsp:
	* tests/Two_Objects/client.dsp:
	* tests/Two_Objects/run_test.pl:
	* tests/Two_Objects/Makefile:
	* tests/Two_Objects/Makefile.bor:
	* tests/Two_Objects/server.bor:
	* tests/Two_Objects/client.bor:
	* tests/Two_Objects/README:

	Created a new test for bug fix 575. This is a test to show
	that there can be concurrent upcalls to two objects in the
	same POA on the same connection.

Thu Jan 10 11:53:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/GIOP.pidl: Added come comments.
	* tao/GIOPC.h:
	* tao/GIOPC.cpp:
	* tao/GIOPC.i (Version_var): Added GIOP::Version_var to the
	  generated code.

	* tao/diffs/GIOPC.cpp.diff:
	* tao/diffs/GIOPC.h.diff:
	* tao/diffs/GIOPC.i.diff:
	* tao/diffs/GIOPS.cpp.diff:
	* tao/diffs/GIOPS.h.diff:
	* tao/diffs/GIOPS.i.diff:
	* tao/diffs/GIOPS_T.cpp.diff:
	* tao/diffs/GIOPS_T.h.diff:
	* tao/diffs/GIOPS_T.i.diff: Added diffs to the generated code.


Wed Jan  9 18:07:55 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TO_IDL/fe/fe_init.cpp (populate_global_scope):

          Removed the guards around the calls related to valuetypes.

Wed Jan  9 11:35:58 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (init):

	  Removed last remnants of the long deprecated -ORBSetUID and
	  -ORBSetGID ORB options.

Wed Jan  9 13:36:14 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:

          Changed the order of member initialization to match the
          order of declaration.

Wed Jan  9 11:39:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ci.cpp:

          Added declaration of CDR operators for anonymous sequence
          array element to the stub inline file. When ACE_INLINE is
          defined, the declarations of these in the header file is
          not included.

Wed Jan  9 08:46:58 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* docs/Options.html: Clarified the use of the
	  -ORBDottedDecimalAddresses option.  Thanks to Michael Gillmann
	  <michael.gillmann@infor.de> for motivating this.

Tue Jan  8 16:20:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:

          Added '::' to instances of 'CORBA::TypeCode_ptr' in
          type code generation. If there is a nested module
          named 'CORBA', MSVC gets confused. Thanks to
          Tom Howard <tom_howard@yahoo.com> for pointing out
          the problem.

Tue Jan  8 14:52:46 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_typedef.cpp:

          Added explicit calls to base class constructors.

        * TAO_IDL/be/be_decl.cpp:

          Added explicit calls to base class constructors, and
          added missing member initialization.

        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ci.cpp:

          Changed the logic for generating CDR operators for
          named arrays of anonymous sequences. Some recent
          change broke this, and it was showing up in IDL_Test.
          Also made cosmetic changes.

        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp:

          Added line breaks to strings of output stream operators,
          to avoid side effects when a method call is in the string.
          Also made cosmetic changes.

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:

          Changed the logic of the code generation for forward
          declared interfaces. The existing logic was a case of two
          wrongs making a right, and was causing a problem with the
          implementation of AMH in the IDL compiler. Thanks to
          Carlos O'Ryan <coryan@uci.edu> and Mayur Deshpande
          <mayur@ics.uci.edu> for pointing out the problem.

Mon Jan  7 10:27:43 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tao/PortableServer/PolicyS_T.i:

          Corrected an invalid ENV parameter macro name.  This was detected
          as an error on HP-UX.  Thanks to Rob Martin <martin_r@ociweb.com>
          for pointing this out.

Sun Jan  6 13:18:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_operation_strategy.cpp:

          Removed an unused argument, and made cosmetic changes.

Sun Jan  6 09:45:24 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

	* examples/Advanced/ch_8_and_10/client.cpp (main):
	  Added some casts to make certain C++ compilers happy.
	  Thanks to Roy Sharon <roysharon@hotmail.com> for
	  reporting this.

Sat Jan  5 21:31:43 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
	  Added code to generate the Client side abstract RH class and the
	  skeleton RH class. For the above two interfaces, there should be
	  no classes generated on teh 'other side' i.e. for the client RH
	  interface node, there should be no class generatd in the skeleton
	  files.  Currently there are a few problems with this and with the
	  exact names and inheritance of the generated classes.

Sat Jan  5 18:27:59 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
	* TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
	  Added code to generate the skeleton-source code for AMH-skelton
	  operation.  The amh-method differs from the original method in
	  the following ways:
	  - Return type is always void
	  - IN and INOUT parameters _only_ are de-marshalled
	  One part left to be done is the creation and instantiation of
	  the RH inside the generated method body.


Sat Jan  5 18:15:34 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_interface/interface.cpp:
	  Added actions for all the AMH states (including amh_rh).
	  Previously some of them returned 0 or just didn't do anything.

	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
	  Removed all the code from the visit_interface that generates
	  code for the this_method and put it into a seperate method called
	  this_method.  This method alre4ady existed but for some reason a
	  part of the code was left in the visit_interface method.  With
	  this in place, the AMH class can now implement all the changes that
	  are needed in the _this () method.

	* TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
	  - Changed the this_method().  This method now generates all the code
	  for the _this() method in amh-skeleton.  Changes include a narrow
	  of original interface rather than teh AMH-skeleton narrow and
	  commenting of the generation of the safe_stub.release() line.
	  - Changed the dispath_method () so that it now generates a call to
	  asynchronous_upcall_dispatch rather than synchronous_upcall_dispatch
	  as is generated for a normal skeleton.

Sat Jan  5 20:39:25 2002  Ossama Othman  <ossama@uci.edu>

	* tao/IIOP_Connection_Handler.cpp (handle_input, handle_output):

	  Reverted my change that avoided a function call.  Bala correctly
	  points out that the handled passed in as a parameter may be an
	  invalid handle if the event handler is dispatched by the
	  reactor's notification mechanism.  Not bueno.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp
	  (handle_input, handle_output):

	  Likewise.

Sat Jan  5 20:00:21 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Connection_Handler.inl (TAO_Connection_Handler):

	  Initialize "pending_upcalls_" and "pending_upcall_lock_" in the
	  base member initializer list.  Although this constructor is not
	  used, it is best to ensure that proper initialization is
	  performed in the event this constructor is used in the future.

Sat Jan  5 19:30:08 2002  Ossama Othman  <ossama@uci.edu>

	* tao/orbconf.h:

	  Include "ace/Basic_Types.h" to pull in the definition of
	  ACE_LITTLE_ENDIAN.

Sat Jan  5 17:54:27 2002  Ossama Othman  <ossama@uci.edu>

	* tao/LF_Strategy.h:

	  No need to include "tao/orbconf.h."  Forward declaring
	  ACE_Time_Value is enough.

	* tao/orbconf.h:

	  Instead of "ace/OS.h", include "ace/config-all.h".  The latter
	  is all that is needed.  This change should improve compile times
	  since "config-all.h" does not include the large number of system
	  headers found in "OS.h," which provides for improved C++
	  preprocessing times in TAO.

	  (TAO_DEFAULT_ORB_TABLE_SIZE):

	  New constant that is used when setting the initial size of the
	  ORB table.  Previously a default of 1024 was used.  However,
	  most applications rarely use more than one ORB, meaning that
	  an ORB table size of 1024 is overkill.  The default is now 16.
	  This size should be more than adequate for the majority of
	  applications.

	  (MCAST_SERVICE_ID, NO_OF_MCAST_SERVICES):

	  Prepend "TAO_" to these macros to avoid polluting the global
	  namespace.

	* tao/ORB.h (resolve_service):
	* tao/ORB.cpp (resolve_service):
	* tao/params.h (service_port):
	* tao/params.i (service_port):
	* tao/params.cpp (TAO_ORB_Parameters):

	  Changed the parameter type "MCAST_SERVICEID" to
	  "TAO_MCAST_SERVICEID," in accordance with the changes made to
	  `orbconf.h' described above.

	* tao/ORB_Table.cpp (TAO_ORB_Table):

	  Initialize the underlying hash map (the ORB table) to a size of
	  TAO_DEFAULT_ORB_TABLE_SIZE.  This change reduces the default ORB
	  table size from 1024 to 16 (TAO_DEFAULT_ORB_TABLE_SIZE), thus
	  greatly reducing the initial ORB table memory utilization.

	* tao/IIOP_Connection_Handler.cpp (handle_input, handle_output):

	  No need to make a function call to retrieve the handle.  Just
	  use the handle parameter passed in to the method.

Sat Jan  5 15:04:46 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/Fill_ACE_QoS.h:  Fix comments.

	* orbsvcs/performance-tests/EC_Federated_Scalability/Makefile:
 	* orbsvcs/performance-tests/EC_Scalability/Makefile:
 	* orbsvcs/performance-tests/EC_Federated_Latency/Makefile:
 	* orbsvcs/performance-tests/EC_Latency/Makefile:

	  Only build these tests if RTEvent is set in TAO_ORBSVCS.

Fri Jan 4 17:30:21 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

	* docs/tutorials/Quoter/RT_Event_Service/index.html:
	  Corrected some broken links. The errors were pointed out thanks
	  to Eric Peters <egpeters@u.washington.edu>.

Fri Jan  4 19:02:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* ChangeLogs/ChangeLog-01c: A new file after splitting from this
	  one.

Fri Jan  4 18:28:44 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be_include/be_decl.h:

          Removed compute_repoID(), the version that is always
          called in in the base class AST_Decl. Thanks to
          Brian Olson <bolson@rtlogic.com> for pointing out
          that the be_decl version was not doing the version
          part of the string correctly.

Fri Jan  4 16:30:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynCommon.cpp (insert_reference):

          Since the argument is passed in as a CORBA::Object_ptr,
          and ultimately inserted into the member Any with the
          non-virtual operator <<=, then
          dyn_any->to_any()->type ()->id() would always yield
          "IDL:CORBA/Object:1.0", no matter what
          dyn_any->type()->id() yields. So the insertion into
          the memeber Any has been changed to use _tao_replace(),
          and passing in the dyn_any's type code, which is
          always of the derived type. Thanks to Mahesh Vedantam
          <mahesh@ociweb.com> for reporting the problem.

Fri Jan  4 15:21:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_visitor.cpp (visit_factory):

          Removed an unused argument.

        * TAO_IDL/fe/fe_tmplinst.cpp:

          Removed explicit instantiation of ACE_Node<char *>, since
          it already appears in ACE.

        * TAO_IDL/fe/lex.yy.cpp:

          Changed isspace() to ACE_OS::ace_isspace().

        * TAO_IDL/be/be_interface_strategy.cpp (compute_coll_names):

          Changed a local const char[] to static const char*. The
          string  "POA_" is assigned to this constant, and there
          has been a long-standing intermittent problem with
          garbage being generated in place of the string. Although
          the problem has never been duplicated by the DOC Group,
          Sorin Iordachescu <sorin.iordachescu@am-beo.com> has
          produced it repeated and has suggested the above fix.

        * TAO_IDL/util/utl_err.cpp:

          Removed all use of ACE_TEXT from methods that return char*.
          When compilation is done with ACE_USES_WCHAR, the return
          type is incorrect. Thanks to Johnny Willemsen
          <johnny_willemsen@planet.nl> for reporting the problem.

Fri Jan  4 14:32:43 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/AV/Fill_QoS.h: Add #include <ace/OS_QoS.h>.

Thu Jan  3 07:18:22 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/LifeCycle_Service/LifeCycle_Service.bor:
          Added library required for a statically linked build.

        * orbsvcs/Notify_Service/NT_Notify_Service.bor:
        * orbsvcs/Notify_Service/Notify_Service.bor:
          Reverted the changes made to these files in
          Sun Dec 30 20:30:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>
          as the trading library is required for a static build.

        * orbsvcs/orbsvcs/*.bor:
        * orbsvcs/orbsvcs/Security.rc:
        * tao/*/Makefile.bor:
        * tao/*/*.rc:
          Added Borland makefile support for the new resource files.

Wed Jan  2 20:48:36 2002  Douglas C. Schmidt  <schmidt@siesta.cs.wustl.edu>

	* TAO-INSTALL.html: Fixed a couple of missing links.  Thanks to
	  Patrick Cosmo <Patrick@incognito.com> for reporting this.

Wed Jan  2 18:00:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/lex.yy.cpp:

          Changed an instance of != ' ' to !isspace.

Wed Jan  2 15:57:52 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/orbsvcs/Naming/Naming_Context_Interface.cpp (to_url):
	  The to_url method should actually be returning a corbaname type
	  URL instead of the corbaloc style URL. According to the
	  INS specification, the method should return a fully formed URL
	  along with the key_string and corbaname format is the one that
	  can have the key_string in it.

	  Moved the pointer to the end of the dest string before
	  concatenating something to it. Previously, it was returning only
	  escaped key_string.

	* orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp :
	  Modified the string that is passed to the to_url method to have
	  a ':' before the dummy address. Now, its in one of the correct
	  syntaxes.

	  Thanks to Scott Harris <harris_s@ociweb.com> for reporting all
	  these.

Wed Jan 02 15:25:53 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/ValueFactory.h: Removed the non-standard tao extension
	  repository_id().  According to the spec, for valuetypes without
	  a factory method, the developer supplied ValueFactory class
	  should inherit from CORBA::ValueFactoryBase directly.
	  Therefore, we can no longer generate this repository_id() method
	  in the IDL compiler.

	  Changed the TAO_OBV_REGISTER_FACTORY to take the type of
	  valuetype it handles as an extra parameter.  The macro will
	  simply use the non-standard TAO extension to stick in the
	  repository_id for the valuetype.  This may not be the correct
	  way to get the repository_id for a valuetype as it is not clear
	  to me how one can get it.

	* examples/OBV/Typed_Events/Event_Types_impl.h: Changed to inherit
	  valuetype factories from CORBA::ValueFactoryBase.

	* examples/OBV/Typed_Events/Server_i.cpp:
	* examples/OBV/Typed_Events/Client_i.cpp: Added type of valuetype
	  when registering factory with the TAO_OBV_REGISTER_FACTORY
	  macro.

Wed Jan  2 15:27:57 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_valuetype.cpp:

          Added some missing ACE_INLINEs to the _var and _out class
          method implementation code generation.

Wed Jan  2 12:02:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/lex.yy.cpp (idl_valid_version):

          Had to add a check for trailing whitespace. SunCC's
          preprocessor leaves it in, it seems, and this was
          leading to version strings being falsely invalidated.

Wed Jan  2 10:22:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp (visit_array):

          Made changes that were overlooked in

          Fri Dec 28 15:41:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

          that correspond to changes made in typedef_ch.cpp.

        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp (visit_array):

          Cosmetic changes.

Wed Jan  2 09:41:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvvcs/IFR_Service/drv_init_ifr.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvvcs/IFR_Service/ifr_visitor.h:

          Changes related to corresponding changes in the TAO IDL
          compiler regarding value types and #pragma prefix.

Tue Jan  1 17:40:23 2002  Carlos O'Ryan  <coryan@uci.edu>

	* orbsvcs/orbsvcs/AV/AVStreams_i.h:
	* orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
	  Remove dummy copy constructor, that should clear some of the
	  builds.

Tue Jan  1 09:38:58 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

	* examples/RTCORBA/Activity/Activity.cpp:
	  examples/RTCORBA/Activity/Builder.cpp:
	  Fixed compile errors.
