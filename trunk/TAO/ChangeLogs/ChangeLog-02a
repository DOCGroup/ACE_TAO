Sat Jan  8 03:30:00 2000  Michael Kircher  <Michael.Kircher@mchp.siemens.de>
 
	* TAO/docs/releasenotes/index.html
	  TAO/examples/AMI/FL_Callback/README,
	  TAO/examples/Buffered_AMI/README,
	  TAO/tests/AMI/README:
	  Made the documentation of 'defines' necessary to compile
	  AMI consistent across various documentations. 
	  Currently, you need to set TAO_HAS_CORBA_MESSAGING and
	  TAO_HAS_AMI_CALLBACK to activate AMI code in the TAO library.
	  (TAO_HAS_VALUETYPE is needed as well, but is defined by default)
	  IDL_HAS_VALUETYPE needs to be defined for the TAO IDL compiler,
	  this is due to the fact that AMI uses valuetypes for exception
	  handling, though this might change in the future, because the
	  spec might change in this area. Use -GC on the IDL compiler
	  to generate AMI stubs.
	  Thanks to "Russell L. Carter" <rcarter@consys.com> for pointing
	  this out.

Fri Jan  7 15:22:38 2000  Ossama Othman  <othman@cs.wustl.edu>

	* tao/ORB.cpp (destroy):

	  Corrected behavior where ORB::destroy() would throw a
 	  BAD_INV_ORDER exception if the ORB was already shutdown, which
 	  does not agree with the CORBA specification.  It is now possible
 	  to call ORB::destroy() after ORB::shutdown().  Thanks to Mogens
 	  Hansen <mogens_h@dk-online.dk> for reporting this problem.

Fri Jan  7 11:52:17 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.h:
	* TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
	  Fixed bug where discriminator in a union with an
	  explicit default case was not getting set after
	  transmission. Thanks to Hugh Arnold <harnold@itginc.com>
	  for reporting this bug.

Thu Jan 06 22:26:42 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao: Minimum CORBA in TAO meant a minimum POA.  This
	  relationship was changed such that minimum CORBA does not have
	  to mean a minimum POA.  This will allow the user to use a
	  minimum CORBA build of TAO with the full functionality of the
	  POA.  The default, however, remains the same, i.e., minimum
	  CORBA enables a minimum POA.

	  Added a new variable TAS_HAS_MINIMUM_POA to orbconf.h.
	  TAS_HAS_MINIMUM_POA support is disabled by default if TAO is not
	  configured for minimum CORBA.  If TAO is configured for minimum
	  CORBA, then TAS_HAS_MINIMUM_POA will be enabled by default.
	  Also, TAO_HAS_MINIMUM_POA_MAPS is now influenced by the value of
	  TAO_HAS_MINIMUM_POA rather than that of TAO_HAS_MINIMUM_CORBA if
	  not explicitly set by the user.

	  The following files were involved in this change:

          - POA.cpp
          - POA.h
          - POA.i
          - POA.pidl
          - POAC.cpp
          - POAC.h
          - POAC.i
          - POAManager.cpp
          - POAManager.h
          - POAManager.i
          - POAS.cpp
          - POAS.h
          - POAS.i
          - Object_Adapter.cpp
          - Object_Adapter.h
          - Object_Adapter.i
  
          Thanks to Erik Johannes <ejohannes@oresis.com> for motivating
 	  this change.

	* tests/Timed_Buffered_Oneways: New test for oneways with
	  buffering and timing constraints.  The client sends is setup to
	  send large requests to the server.  The server is setup to take
	  a long time to process these requests.  The combination will
	  cause flow control for the client.  The timing constraints on
	  the client ORB will prevent the client from blocking because of
	  flow control.  The request is queued up for later delivery once
	  the flow control subsides.

	* tao/IIOP_Connect.cpp (handle_timeout):
	* tao/UIOP_Connect.cpp (handle_timeout):

	  Added code to access the thread or ORB roundtrip timeout
	  policies.  This allows us to perform a timed send operation
	  instead of a blocking one. We do not consider the object
	  roundtrip timeout policy since we do not have access to it.

	* tao/ORB_Core.h (stubless_relative_roundtrip_timeout):  Added a
	  new method to access the RoundtripTimeoutPolicy policy set on
	  the thread or on the ORB.  In this method, we do not consider
	  the stub since we do not have access to it.

	* tao/Sync_Strategies.cpp: Moved the TAO-specific SYNCH_FLUSH
	  option from the Messaging::SyncScope policy and changed it to
	  BUFFER_FLUSH as one of the buffering constraint modes in the
	  TAO-specific BufferingConstraint policy.  Since we now have
	  BUFFER_FLUSH, we don't need BUFFER_NONE anymore since they both
	  do the same thing.  Also, we didn't need the
	  TAO_Flush_Sync_Strategy anymore and the Buffered_Oneway example
	  was changed to accommodate this change.

	* tao/Pluggable.cpp

	  (send_buffered_messages): The return value of 0 is considered
	  EOF.  Therefore, changed the return values in the case of
	  timeouts and empty queues to be 1.  Also, fixed how timeouts are
	  handled.

	  (reset_message): The resetting of the queued messages was not
	  correct.  It was deleting excessively. This was fixed.  Also,
	  the resetting was decoupled from the queue so that it can be
	  used with independent message blocks.

	* tao/Wait_Strategy.cpp:

	  TAO_Exclusive_Wait_On_Leader_Follower::handle_input: The check
	  for <expecting_response_> was conflicting with the ability to
	  buffer asynchronous calls.  If we mark the asynchronous call as
	  a twoway call, then buffering cannot take place.  If we mark it
	  as a oneway call, then the check for <expecting_response_>
	  fails.  For now I have selected to disable the check.  The long
	  term fix is to separate out the two concerns (a) can the call be
	  buffered and (b) are we expecting a response.

	* tao/Transport_Mux_Strategy.cpp (dispatch_reply): Once we receive
	  our reply, we need to mark the transport as being available for
	  reuse again.

	* tao: Renamed TAO_RelativeRoundtripTimeoutPolicy_i to
	  TAO_RelativeRoundtripTimeoutPolicy.

	* tao/Messaging_Policy_i.cpp (set_time_value): Factored out common
	  code in Invocation.cpp and IIOP_Connect.cpp.

	* tao/MessagingS.cpp: Added an overloaded relative_expiry(), which
	  is a hacky TAO extension to reduce a call to
	  CORBA::Environment::default_environment () since this method
	  will never raise exceptions.

Thu Jan 06 21:26:17 2000  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tests/Param_Test/param_test_i.cpp
	  (test_unbounded_struct_sequence): Changed the explicit cast to
	  [(unsigned int) 0] to unsigned literal [0u] to avoid MSVC fro
	  whining.

Wed Jan  5 15:54:38 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* tao/Any.cpp:
	  Fix to new Any extractor to pointer to const Any,
	  prompted by a SunCC 4.2 compile error.

	* TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
	  Removed a couple of unnecessary 'ACE_reinterpret_cast's
	  in generated code for the new Any extractor to pointer
	  to const Any. They were causing compile errors with
	  Kai, SunCC and other compilers.

	* performance-tests/Latency/deferred_synch_client.dsp:
	  Added missing paths for library linking.

	* performance-tests/RTCorba/Oneways/Reliable/client.dsp:
	* performance-tests/RTCorba/Oneways/Reliable/server.dsp:
	  Put in the complete relative path to tao_idl.exe, as
	  it is in all other projects with IDL files.

Tue Jan  4 11:46:42 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* tao/Any.h:
	* tao/Any.cpp:
	  Added >>= operators to extract to const CORBA::Any *&,
	  as well as to const char *& and const wchar *&, as outlined in
	  the CORBA 2.3.1 C++ mapping.

	* TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
	* TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
	* TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
	* TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
	* TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
	* TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
	* TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
	* TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
	* TAO_IDL/be/be_visitor_union/any_op_cs.h:
	  Added code generation for Any extraction operator to
	  pointer to const whenever extraction to a pointer is called
	  for. Left the former generated operators (same but without
	  the 'const') for backward compatibility, but marked them
	  as 'deprecated' in the generated header file. Also modified
	  code for both operators to return a null pointer if the
	  extraction fails. All this is in accordance with CORBA 2.3.1.

	* TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
	  Modified Any extraction operator to return a null pointer
	  if the extraction fails, for the reason given above.

Tue Jan 04 07:30:04 2000  David L. Levine  <levine@cs.wustl.edu>

        * TAO version 1.0.11 released.

Tue Jan  4 00:34:57 2000  Nanbor Wang  <nanbor@cs.wustl.edu>

	* orbsvcs/tests/Trading/Service_Type_Exporter.cpp:
	* orbsvcs/tests/Simple_Naming/client.cpp:
	* orbsvcs/LifeCycle_Service/Factory_Trader.cpp: Fixes for KAI that
	  missed the last round and fixes that were needed after the last
	  round.

Mon Jan  3 20:33:11 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/Trading_Service/Trading_Service.cpp:
	* orbsvcs/tests/Simple_Naming/client.cpp:
	* orbsvcs/tests/Trading/Service_Type_Exporter.cpp:
	* orbsvcs/tests/Trading/Offer_Exporter.cpp: Fixes for KAI that
	  missed the last round and fixes that were needed after the last
	  round.

Mon Jan  3 15:08:47 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/Trading_Service/Trading_Service.cpp:
	* orbsvcs/tests/Trading/Offer_Exporter.cpp:
	* orbsvcs/tests/Trading/Offer_Importer.cpp:
	* orbsvcs/tests/Trading/Service_Type_Exporter.cpp:
	* orbsvcs/tests/Simple_Naming/client.cpp:
	* orbsvcs//LifeCycle_Service/Factory_Trader.cpp:
	* orbsvcs/tests/Property/client.cpp: KAI needed fixes in these
	  files to compile clean. There was a need to explicitly use an
	  unsigned integer to avoid overloading amibiguity. Essentially
	  the same fix as 'Mon Jan 03 10:55:36 2000  David L. Levine'.

Mon Jan  3 14:45:22 2000  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/ORB.h:
	* tao/corbafwd.h: Removed compiler-specific alignment adjusting
	  preprocessor directives for MSVC and BCB completely.  Thanks to
	  Christopher Kohlhoff <chris@kohlhoff.com> for reporting this.

Mon Jan 03 10:55:36 2000  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/Time_Service/Clerk_i.cpp (get_first_IOR):
          explicitly use unsigned 0 index for bindings_list
          array element to avoid overloading ambiguity on Irix
          and HP/UX.

Mon Jan 03 10:46:31 2000  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Offer_Iterators.cpp (next_n):
          modified look index so that its comparison is > 0, not
          >= 0.  Now that it's unsigned, it was causing a compiler
          warning.

Sun Jan 02 10:48:59 2000  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * orbsvcs/orbsvcs/Trader/Offer_Iterators.cpp:
          Fixed a MSVC warning, complaining about an array
          operator.

Sat Jan 01 09:18:59 2000  David L. Levine  <levine@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile: updated dependencies, including
          Notification Service files.

Sat Jan 01 09:17:40 2000  David L. Levine  <levine@cs.wustl.edu>

        * ChangeLog: moved to ChangeLog-99c.
