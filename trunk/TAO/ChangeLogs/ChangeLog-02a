Mon Nov 13 18:14:35 2000  Priyanka Gontla <pgontla@ece.uci.edu>

        * tests/RTCORBA/Server_Declared/server.conf:
        * tests/RTCORBA/Server_Declared/run_test.pl:

        * tests/RTCORBA/Server_Declared/Server.dsp
        * tests/RTCORBA/Server_Declared/client.dsp

		  Updated to get it working. 

Mon Nov 13 18:00:15 2000  Priyanka Gontla <pgontla@ece.uci.edu>

        * tests/RTCORBA/Client_Propagated/svc.conf:
        * tests/RTCORBA/Client_Propagated/run_test.pl:

        * tests/RTCORBA/Client_Propagated/Client_Propagated.dsw

		  Updated to get it working. 

Mon Nov 13 16:12:15 2000  Priyanka Gontla <pgontla@ece.uci.edu>

        * tests/RTCORBA/Client_Protocol/svc_unix.conf:
        * tests/RTCORBA/Client_Protocol/svc_nt.conf.conf:
        * tests/RTCORBA/Client_Protocol/run_test.pl:

        * tests/RTCORBA/Client_Protocol/Client_Protocol.dsw

		  Updated to get it working. 

Mon Nov 13 17:40:44 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* tao/Invocation.i:

	  Added missing ACE_INLINE for destructor of
	  TAO_GIOP_Locate_Request_Invocation.

Mon Nov 13 16:59:47 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* */Makefile*:

	  Updated dependencies.

Mon Nov 13 16:50:13 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* tao/Asynch_Reply_Dispatcher.cpp:

	  Removed unused arguments.

Mon Nov 13 14:35:33 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* tao/Reply_Dispatcher.cpp:
	* tao/Reply_Dispatcher.h:
	* tao/Reply_Dispatcher.i:
	* tao/Synch_Reply_Dispatcher.cpp:
	* tao/Synch_Reply_Dispatcher.h:

	  Moved member and accessor function reply_status to base
	  class, since it is common to all reply dispatcher concrete classes.

	* tao/Asynch_Reply_Dispatcher.cpp:
	* tao/Asynch_Reply_Dispatcher.h:
	* tao/Asynch_Reply_Dispatcher.i:
	* tao/DynamicInterface/DII_Reply_Dispatcher.cpp:
	* tao/DynamicInterface/DII_Reply_Dispatcher.h:

	  Added new base class TAO_Asynch_Reply_Dispatcher_Base
	  to hold common code for TAO_Asynch_Reply_Dispatcher and 
	  TAO_DII_Deferred_Reply_Dispatcher.

	* tao/Invocation.cpp:
	* tao/Invocation.h:
	* tao/Invocation.i:
	* tao/DynamicInterface/DII_Invocation.cpp:
	* tao/DynamicInterface/DII_Invocation.h:
	* tao/DynamicInterface/DII_Invocation.inl:
	* tao/DynamicInterface/Request.cpp:

	  Moved some code from the subclasses' start() method to that
	  of the base class, which is called by all the start() methods.
	  Also moved the invoke() method of 
	  TAO_GIOP_Twoway_Invocation that was specific to DII
	  requests out to the DynamicInterface library into a new class
	  called TAO_GIOP_DII_Invocation.
	  Also created new base class TAO_GIOP_Synch_Invocation,
	  to be the parent of TAO_GIOP_Twoway_Invocation,
	  TAO_GIOP_Oneway_Invocation, and
	  TAO_GIOP_Locate_Request_Invocation. The invoke_i method
	  of the first of these subclasses was moved to the base class, with
	  minor changes, and the invoke() methods of the latter two subclasses
	  were modified to use this relocated invoke_i().

	* tao/Asynch_Invocation.cpp:
	* tao/Asynch_Invocation.h:
	* tao/Asynch_Invocation.i:

	  Created new base class TAO_GIOP_Asynch_Invocation to be
	  the parent of TAO_GIOP_Twoway_Asynch_Invocation and
	  TAO_GIOP_DII_Deferred_Invocation, and to hold code
	  common to these latter two classes.

	* tao/Dynamic_Adapter.cpp:
	* tao/Dynamic_Adapter.h:
	* tao/DynamicInterface/Dynamic_Adapter_Impl.cpp:
	* tao/DynamicInterface/Dynamic_Adapter_Impl.h:

	  Removed method decode_exception, since the method in 
	  TAO_GIOP_Twoway_Invocation from which it was called
	  is now in the DynamicInterface library.

	* tao/Synch_Reply_Dispatcher.i:
	* tao/DynamicInterface/DII_Reply_Dispatcher.inl:

	  Removed these files from CVS.

	* tao/TAO.dsp:
	* tao/TAO_Static.dsp:
	* tao/DynamicInterface/TAO_DynamicInterface.dsp:

	  Removed the above two files from these projects.

Mon Nov 13 11:19:22 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connect.cpp: Fixed a compile
	  error. Thanks to Christopher Kohloff for reporting this. For
	  some strange reasons this was missed by the SunCC5 compiler. 

Mon Nov 13 10:20:48 2000  Jeff Parsons  <parsons@cs.wustl.edu>

	* TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:

	  In ClientRequestInfo subclass generation, changed the type
	  of private valuetype member for an IN argument from *& 
	  to *. Again, thanks to Johnny Willemsen 
	  <Johnny.Willemsen@meco.nl> for pointing this out.

Mon Nov 13 09:50:06 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/IIOP_Connect.cpp (open):
	* tao/Service_Callbacks.h:
	* tao/Service_Callbacks.cpp:
	* tao/ORB_Core.h:
	* tao/ORB_Core.cpp:
	* tao/ORB_Core.i:
	* tao/PortableServer/Servant_Base.cpp:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp: Added
	  hooks for the implementation of the Logging & Recovery. This
	  will be implemented by Andy & Oscar at Bell-Labs.

Mon Nov 13 02:13:54 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/Strategies/TAO_Strategies.dsp:

          An ACE_HAS_STRATEGIES_DLL was being defined for the cpp
          files, which was preventing anything from being exported.
          Removed it and things look happy on Win32 Release now.

        * tao/Strategies/TAO_Strategies_Static.dsp:

          Changed the configurations to Win32 Static Debug and
          Win32 Static Release.

Mon Nov 13 08:46:40 2000  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/ImplRepo_Service/ImplRepo.bor:

          Added missing backslash.

Sun Nov 12 17:31:40 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo.bor:

          Removed rogue backslash.

        * tao/tao_ce.dsp: (removed)
        * tao/tao_ce.dsw: (removed)

          Until we put some serious effort into porting TAO to
          Windows CE, these files are misleading and most likely
          very out of date.

Sun Nov 12 12:41:19 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/Iterator.cpp:

          Fixed @file comment.

Sat Nov 11 21:01:31 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/implrepo.dsp:

          Added some Win32 libraries to the release configuration link
          settings for the NT Service system calls.

Sat Nov 11 11:33:06 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Xt_Stopwatch/client.cpp:
	* tests/Xt_Stopwatch/test_i.cpp:
	* tests/Xt_Stopwatch/test_i.h:
	* tests/Xt_Stopwatch/Control.h:
	* tests/Xt_Stopwatch/Control.cpp:
	* tests/Xt_Stopwatch/Stopwatch_display.h:
	* tests/Xt_Stopwatch/Stopwatch_display.cpp:
	* tests/Xt_Stopwatch/Client.h:
	* tests/Xt_Stopwatch/timer.cpp:
	* tests/Xt_Stopwatch/timer.h:
	* tests/QtTest/client.cpp:  Added #if defined guards in all these
	  files so that they compile clean even in default configuration.

	* tests/Xt_Stopwatch/Makefile:
	* tests/QtTest/Makefile: Updated the library names against which
	  they are linked.

	  Thanks to Wei Zheng <weizheng@uiuc.edu> for reporting these
	  problems.

Sat Nov 11 10:19:06 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/ESF/ESF_Delayed_Changes.h:
        * orbsvcs/orbsvcs/ESF/ESF_Immediate_Changes.h:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Workers.h:
        * orbsvcs/orbsvcs/Event/EC_Busy_Lock.h:
        * orbsvcs/orbsvcs/Event/EC_QOS_Info.h:
        * orbsvcs/orbsvcs/Event/EC_Trivial_Supplier_Filter.h:
          Change the @file comments, the Fuzz build detected the problem.

        * tests/Xt_Stopwatch/client.cpp:
        * tests/Xt_Stopwatch/test_i.cpp:
        * tests/Xt_Stopwatch/test_i.h:
        * tests/Xt_Stopwatch/Control.h:
        * tests/Xt_Stopwatch/Control.cpp:
        * tests/Xt_Stopwatch/Stopwatch_display.h:
        * tests/Xt_Stopwatch/Stopwatch_display.cpp:
        * tests/Xt_Stopwatch/Client.h:
        * tests/Xt_Stopwatch/timer.cpp:
        * tests/Xt_Stopwatch/timer.h:
        * tests/QtTest/client.cpp:  Added #if defined guards in all these
          files so that they compile clean even in default configuration.

        * tests/Xt_Stopwatch/Makefile:
        * tests/QtTest/Makefile: Updated the library names against which
          they are linked.


Sat Nov 11 07:28:50 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connect.cpp: Propagated the fixes
          that was done other protocols.

Fri Nov 10 18:24:53 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/RTCORBA/Server_Declared/server.conf:
        * tests/RTCORBA/Client_Protocol/svc.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse_nt.conf:
        * tests/RTCORBA/Server_Protocol/server_uiop.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse.conf:
        * tests/RTCORBA/Server_Protocol/server_shmiop.conf:
        * tests/RTCORBA/Server_Protocol/server_uiop.conf:
        * tests/RTCORBA/Server_Protocol/server.conf:
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.conf:

          Updated to load the advanced strategies dynamically.

        * tests/RTCORBA/MT_Client_Protocol_Priority/Makefile:
        * tests/RTCORBA/Server_Protocol/Makefile:
        * tests/RTCORBA/Server_Declared/Makefile :
        * tests/RTCORBA/Client_Propagated/Makefile :
        * tests/RTCORBA/Client_Protocol/Makefile:
          Updated to link TAO_Strategies.

Fri Nov 10 17:28:50 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Connect.cpp:
        * tao/Strategies/UIOP_Connect.cpp:
        * tao/IIOP_Connect.cpp: Fixed a problem with thread-per-connection
          case. The event handler was getting destroyed before the ORB
          shuts down the Cache. This lead to cache  shutdown problem.

Fri Nov 10 13:06:27 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/NT_Service.cpp:
        * orbsvcs/ImplRepo_Service/NT_Service.h:
        * orbsvcs/ImplRepo_Service/ImplRepo.cpp:

          Forgot to #ifdef out on non-win32 platforms.

Fri Nov 10 12:41:32 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/Adapter_Activator.cpp: (added)
        * orbsvcs/ImplRepo_Service/Adapter_Activator.h: (added)
        * orbsvcs/ImplRepo_Service/Forwarder.cpp: (added)
        * orbsvcs/ImplRepo_Service/Forwarder.h: (added)
        * orbsvcs/ImplRepo_Service/ImplRepo.bor:
        * orbsvcs/ImplRepo_Service/ImplRepo.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.h:
        * orbsvcs/ImplRepo_Service/Iterator.cpp: (added)
        * orbsvcs/ImplRepo_Service/Iterator.h: (added)
        * orbsvcs/ImplRepo_Service/Locator.cpp: (added)
        * orbsvcs/ImplRepo_Service/Locator.h: (added)
        * orbsvcs/ImplRepo_Service/Makefile:
        * orbsvcs/ImplRepo_Service/Makefile.am:
        * orbsvcs/ImplRepo_Service/NT_ImplRepo_Server.cpp: (removed)
        * orbsvcs/ImplRepo_Service/NT_ImplRepo_Service.cpp: (removed)
        * orbsvcs/ImplRepo_Service/NT_ImplRepo_Service.h: (removed)
        * orbsvcs/ImplRepo_Service/NT_Service.cpp: (added)
        * orbsvcs/ImplRepo_Service/NT_Service.h: (added)
        * orbsvcs/ImplRepo_Service/Options.cpp:
        * orbsvcs/ImplRepo_Service/Options.h:
        * orbsvcs/ImplRepo_Service/README.txt: (added)
        * orbsvcs/ImplRepo_Service/Repository.cpp:
        * orbsvcs/ImplRepo_Service/Repository.h:
        * orbsvcs/ImplRepo_Service/implrepo.dsp:
        * orbsvcs/ImplRepo_Service/tao_imr.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.h:

          First split up the ImplRepo_Service into separate files,
          around one per class.  Also doxygenated the ImplRepo
          documentation.  Finally, merged the two

        * orbsvcs/tests/ImplRepo/airplane_client_i.h:
        * orbsvcs/tests/ImplRepo/airplane_i.h:
        * orbsvcs/tests/ImplRepo/airplane_server_i.h:
        * orbsvcs/tests/ImplRepo/nestea_client_i.h:
        * orbsvcs/tests/ImplRepo/nestea_i.h:
        * orbsvcs/tests/ImplRepo/nestea_server_i.h:

          Doxygenation.

        * orbsvcs/tests/ImplRepo/run_test.pl:

          First, defaults to both_ir if no testname is passed in.

          Changed the NT_Service test around a bit.  The executable
          changed and started running things from the bin directory,
          so when it runs as a service it automatically finds the
          DLL's it needs.

        * TAOACE.dsw:
        * orbsvcs/ImplRepo_Service/NT_ImplRepo_Service.dsp: (removed)
        * orbsvcs/ImplRepo_Service/ImplRepo.dsw:
        * orbsvcs/tests/ImplRepo/ImplRepo.dsw:

          Removed NT_ImplRepo_Service.dsp, since the functionality was
          moved into ImplRepo_Service itself.

Fri Nov 10 12:06:42 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * performance-tests/Latency/Makefile :
        * performance-tests/Latency/st_client.conf:
        * performance-tests/Latency/client-st-exclusive.conf:
        * performance-tests/Latency/client-mt-exclusive.conf:
        * performance-tests/Latency/st_server.conf:
          Linked TAO_Startegies and dynamically loaded the Advanced
          Resource Factory in the service conf files.

Fri Nov 10 11:54:11 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tests/NestedUpcall/Simple/client.cpp:
          Removed extra return to avoid unreachable statement warnings.

Fri Nov 10 12:49:51 2000  Pradeep Gore  <pradeep@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
          Added patch to implement get_all_filters supplied by
          Joachim Tremouroux <joachim.tremouroux@microresearch.be>

Fri Nov 10 10:14:50 2000  Priyanka Gontla <pgontla@ece.uci.edu>

        * TAO/tests/RTCORBA/server_protocol/run_test.pl
          Modified the options to not load UIOP and SHMIOP in the case
          where no config file is used.

        * TAO/tests/Leader_Followers/client.dsp :
        * TAO/tests/Leader_Followers/server.dsp :
        * TAO/tests/NestedUpcall/Simple/client.dsp :
        * TAO/tests/NestedUpcall/Simple/server.dsp :
        * TAO/tests/Param_Test/anyop.dsp :
        * TAO/tests/Param_Test/client.dsp :
        * TAO/tests/Param_Test/server.dsp :
        * TAO/tests/RTCORBA/Server_Protocol/client.dsp
        * TAO/tests/RTCORBA/server_protocol/server.dsp

        * TAO/performace_tests/Cubit/TAO/IDL_Cuibt/client.dsp
        * TAO/performace_tests/Cubit/TAO/IDL_Cuibt/server.dsp

          Updated to link TAO_Strategies library.

Fri Nov 10 10:14:04 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Connection_Cache_Manager.cpp:
          Protect naked debug message with a if(TAO_debug_level > 0)

Fri Nov 10 10:12:29 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/Strategies/TAO_Strategies.dsp:

          Fixed the include paths in the Release configuration.

Fri Nov 10 08:59:50 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao_idl/be/be_visitor_argument/request_info_sh.cpp:

          In request info class generation, changed the generation
          of a private member which is a valuetype from '*&' to
          '*' for an IN argument, to match the generation of the
          valuetype in the class constructor arglist. This
          discrepancy caused BCB builds to fail in AMI_Test. Thanks
          to Johnny Willemsen <jwillemsen@remedy.nl> for pointing
          it out.

Fri Nov  10 09:20:58 2000 Johnny Willemsen <jwillemsen@remedy.nl>

        * */Makefile.bor:
        Several new makefile.bor files added so that all examples/tests
        for which Borland makefiles are available will be build in
        a full build.

Fri Nov  10 08:56:58 2000 Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Removed the TAO Strategies files because they are moved to
          the new Strategies directory

        * tao/Strategies/Makefile.bor:
          Added new Borland C++ Builder specific makefile

Thu Nov  9 19:09:58 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Connection_Handler.h:
          Add missing TAO_Export macro, needed for Win32 builds.

Thu Nov  9 20:56:30 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/UIOP_Connect.cpp:
        * tao/SHMIOP_Connect.cpp: These two files were removed. I checked
          them back in by mistake.

Thu Nov  9 20:07:55 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Cache_Manager.cpp:
        * tao/Cache_Entries.inl: Fixed a problem for multi-threaded case.

        * tao/IIOP_Connect.cpp:
        * tao/UIOP_Connect.cpp:
        * tao/SHMIOP_Connect.cpp: Minor cosmetic changes.

        * tao/default_resource.h: Fixed a compile error.

Thu Nov  9 17:54:21 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * tests/Exposed_Policies/client.cpp:
        * tests/Exposed_Policies/server.cpp:
        * tests/ORB_destroy/ORB_destroy.cpp:
        * tests/Portable_Interceptors/Benchmark/interceptors.cpp:
        * tests/Portable_Interceptors/Dynamic/interceptors.cpp:
          Fixed warnings and errors in a variety of platforms and/or
          configurations.  For example: unused variables (or variables not
          used in release builds), files that could not compile in minimum
          CORBA builds, and explicit template instantiations for inline=0
          builds.

        * utils/catior/Makefile:
        * utils/catior/catior.cpp:
          Updated to use the new TAO_Strategies library.

        * tao/Makefile:
          Add missing files to the TEMPLATE_FILES list.

        * release.chk:
          Removed obsolete file.

Thu Nov  9 17:49:45 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/TAO_Static.dsp:

          Missed a handful of moved files here.

Thu Nov  9 16:22:12 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/InterOp-Naming/Makefile:
          Corrected a typo.

Thu Nov  9 15:56:31 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Strategies/advanced_resource.i:
          Added the missing $Id: string

Thu Nov  9 14:59:09 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Strategies/uiop_endpoints.i:
          Corrected TAO_Export to TAO_Strategies_Export.

Thu Nov  9 14:07:40 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/TAO.dsp:

          Removed all the files that were previously moved to
          TAO_Strategies.dsp.

        * tao/TAO.dsw:

          Added the new TAO_Strategies projects.

Thu Nov  9 10:59:12 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * TAO/TAOACE.dsw
        * TAO/TAOACE_Static.dsw

          Updated the workspaces to include the new TAO_Strategies project
          files.

        * tao/Strategies/TAO_Strategies.dsp
        * tao/Strategies/TAO_Strategies_Static.dsp

          Added project files for the TAO_Strategies library.

Thu Nov  9 10:38:19 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Makefile:
          Updated the Makefile to include the new directory 'Strategies'
          for the library TAO_Strategies. The new library contains all the
          advanced TAO strategies:
          The UIOP and SHMIOP protocol factories,
          all the reactor types except TP_Reactor which is now the default
          reactor,
          the Direct and Linear Priority Mappings in the case of
          the priority mapping type and
          TAO_ALLOCATOR_NULL_LOCK cdr_allocator_type.

        * tao/Resource_Factory.h:
        * tao/Resource_Factory.cpp:
          Added a new virtual method load_default_protocols which is
          implemented in default_resource to laod the default IIOP
          protocol. We need this new function so that the
          advanced_resource can call this to just load IIOP protocol and do
          nothing else.

        * tao/Strategies/strategies_export.h:
          Generated for the new TAO_Strategies_Export macro.

        * tao/TAO_Internal.h:
        * tao/TAO_Internal.cpp:

        * tao/Strategies/TAO_Strategies_Internal.h:
        * tao/Strategies/TAO_Strategies_Internal.cpp:

          This is similar to the TAO_Internal. Has code related to
          UIOP and SHMIOP protocol factories which were in
          TAO_Internal previously.

        * tao/default_resource.h:
        * tao/default_resource.i:
        * tao/default_resource.cpp:

        * tao/Strategies/advanced_resource.h:
        * tao/Strategies/advanced_resource.i:
        * tao/Strategies/advanced_resource.cpp:

          Only the default strategies and reactor types are in
          default_resource now. Every other strategy is moved to
          advanced_resource.

        * tao/Strategies/uiop_endpoints.h:
        * tao/Strategies/uiop_endpoints.i:
        * tao/Strategies/uiop_endpoints.cpp:

        * tao/Strategies/UIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.i:
        * tao/Strategies/UIOP_Transport.cpp:

        * tao/Strategies/UIOP_Profile.h:
        * tao/Strategies/UIOP_Profile.i:
        * tao/Strategies/UIOP_Profile.cpp:

        * tao/Strategies/UIOP_Lite_Factory.h:
        * tao/Strategies/UIOP_Lite_Factory.i:
        * tao/Strategies/UIOP_Lite_Factory.cpp:

        * tao/Strategies/UIOP_Factory.h:
        * tao/Strategies/UIOP_Factory.i:
        * tao/Strategies/UIOP_Factory.cpp:

        * tao/Strategies/UIOP_Endpoint.h:
        * tao/Strategies/UIOP_Endpoint.i:
        * tao/Strategies/UIOP_Endpoint.cpp:

        * tao/Strategies/UIOP_Connector.h :
        * tao/Strategies/UIOP_Connector.i :
        * tao/Strategies/UIOP_Connector.cpp :

        * tao/Strategies/UIOP_Connect.h:
        * tao/Strategies/UIOP_Connect.i:
        * tao/Strategies/UIOP_Connect.cpp:

        * tao/Strategies/UIOP_Acceptor.h:
        * tao/Strategies/UIOP_Acceptor.i:
        * tao/Strategies/UIOP_Acceptor.cpp:

        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.i:
        * tao/Strategies/SHMIOP_Transport.cpp:

        * tao/Strategies/SHMIOP_Profile.i:
        * tao/Strategies/SHMIOP_Profile.h:
        * tao/Strategies/SHMIOP_Profile.cpp:

        * tao/Strategies/SHMIOP_Factory.h:
        * tao/Strategies/SHMIOP_Factory.i:
        * tao/Strategies/SHMIOP_Factory.cpp:

        * tao/Strategies/SHMIOP_Endpoint.h:
        * tao/Strategies/SHMIOP_Endpoint.i:
        * tao/Strategies/SHMIOP_Endpoint.cpp:

        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.i:
        * tao/Strategies/SHMIOP_Connector.cpp:

        * tao/Strategies/SHMIOP_Connect.h:
        * tao/Strategies/SHMIOP_Connect.i:
        * tao/Strategies/SHMIOP_Connect.cpp:

        * tao/Strategies/SHMIOP_Acceptor.h:
        * tao/Strategies/SHMIOP_Acceptor.i:
        * tao/Strategies/SHMIOP_Acceptor.cpp:

        * tao/Strategies/Reactor_Per_Priority.h:
        * tao/Strategies/Reactor_Per_Priority.i:
        * tao/Strategies/Reactor_Per_Priority.cpp:

        * tao/Strategies/Linear_Priority_Mapping.h:
        * tao/Strategies/Linear_Priority_Mapping.i:
        * tao/Strategies/Linear_Priority_Mapping.cpp:

        * tao/Strategies/Direct_Priority_Mapping.h:
        * tao/Strategies/Direct_Priority_Mapping.i:
        * tao/Strategies/Direct_Priority_Mapping.cpp:

          Moved all these files from tao to Strategies/
          and made the appropriate cosmetic changes.

        * tao/Strategies/tests/simple_test.idl:

        * tao/Strategies/tests/simple_test_i.h:
        * tao/Strategies/tests/simple_test_i.i:
        * tao/Strategies/tests/simple_test_i.cpp:
        * tao/Strategies/tests/server.cpp:
        * tao/Strategies/tests/client.cpp:

        * tao/Strategies/tests/svc.conf:
        * tao/Strategies/tests/advanced_svc.conf:
        * tao/Strategies/tests/README:
        * tao/Strategies/tests/Makefile:
          Added a simple test to show the ways of loading the default and
          advanced strategies.

        * tests/RTCORBA/Server_Protocol/server_uiop.conf:
        * tests/RTCORBA/Server_Protocol/server_shmiop.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse_nt.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse.conf:
        * tests/RTCORBA/Server_Protocol/server.conf:
        * tests/RTCORBA/Server_Protocol/Makefile:

        * tests/Param_Test/Makefile:

        * tests/NestedUpcall/Simple/svc.conf:
        * tests/NestedUpcall/Simple/Makefile:

        * tests/Leader_Followers/run_test.pl:
        * tests/Leader_Followers/Makefile:

        * tests/InterOp-Naming/Makefile:
          Modified the Makefiles to link the new TAO_Strategies library.
          Modified the service config files to correctly load the needed
          protocols and startegies owing to the new changes.

Thu Nov  9 09:49:02 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableInterceptorC.cpp:
          The header file lacked a TAO_HAS_INTERCEPTORS protection, but
          the .cpp file did, this resulted in compilation problems under
          minimum CORBA builds.  I removed the protections in the .cpp
          file, but probably the correct fix would be to add them into the
          .h file and figure out what is using PortableInterceptors even
          when they are supposedly disabled.

Wed Nov  8 20:01:40 2000  Pradeep Gore  <pradeep@cs.wustl.edu>

        * tao/ORB.cpp: init_orb_globals() returns void, changed to
          ACE_CHECK instead of ACE_CHECK_RETURN.

Wed Nov  8 17:49:25 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Cache_Manager.cpp (close_i): Fixed a problem on
          NT. Thanks to Darrel for reporting this.

Wed Nov  8 18:47:27 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tests/Param_Test/anyop.dsp:

          Put back the project settings for param_test.idl in this project.
          They got lost somehow.

Wed Nov  8 16:15:39 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORB.cpp:
          Moved registration of the RTCORBA and Messaging Policy Factories
          to the init_orb_globals() method.  This is something that should
          happen only once.

        * orbsvcs/IFR_Service/Makefile.IFR_Service:
          Add TypeCodeFactory_DLL to the LDLIBS.

Wed Nov  8 17:49:25 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Accept_State.cpp :
        * tao/GIOP_Message_Connectors.cpp:
        * tao/TAO_Server_Request.h:
        * tao/TAO_Server_Request.i: Made the following minor changes in
          accordance with the CORBA 2.4 spec.

          (1) The CORBA::Principal in the GIOP 1.0 & GIOP 1.1 request
          header is now changed to CORBA::OctetSeq in the CORBA 2.4
          spec. This change has been incorporated.

          (2) Finally, the response_flags field in the request header has
          been well defined for the Sync Scope in the Messaging spec. The
          changes have also been incorporated.

Wed Nov  8 11:05:37 2000  Darrell Brunsch <brunsch@uci.edu>

        * TAOACE.dsw:

          Updated the dependencies for the IFR_Service.

        * examples/POA/Generic_Servant/client.dsp:
        * examples/POA/Generic_Servant/server.dsp:

          Updated the defines for the Release builds.

        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_FE_DLL.dsp:
        * TAO_IDL/tao_idl.dsp:
        * orbsvcs/Concurrency_Service/Concurrency_Service.dsp:
        * orbsvcs/CosEvent_Service/CosEvent_Service.dsp:
        * orbsvcs/Dump_Schedule/Dump_Schedule.dsp:
        * orbsvcs/Event_Service/Event_Service.dsp:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.dsp:
        * orbsvcs/Scheduling_Service/Scheduling_Service.dsp:
        * orbsvcs/orbsvcs/LoadBalancing.dsp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/IFR_Test.dsp:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Persistence_Test.dsp:

          Disabled precompiled headers.

        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * tests/Portable_Interceptors/Benchmark/interceptors.cpp:

          Fixed some non-standard uses of ACE_ASSERT which results in errors
          on release builds.

          Changed stuff like:

          if (foo == 0)
            ACE_ASSERT (bar () == 0);

          to

          ACE_ASSERT (foo == 0 && bar () == 0);

        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:

          Disabled Precompiled headers and fixed library paths.

Wed Nov  8 11:02:01 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/LifeCycle_Service/Makefile:
          For static builds the DynamicAny library must be linked too.

        * tao/Messaging_Policy_i.cpp:
          Fixed problems in platforms that don't do conversions between
          T_var and T_ptr& (vxworks).

        * tests/IDL_Test/Makefile:
          The path to the IDL compiler was hardcoded, use the TAO_IDL
          macro instead, this is very important for cross-compilation
          builds.

Wed Nov  8 10:00:16 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tests/IDL_Test/Makefile:
          I think I finally nailed the dependencies for the magic IDL
          files in this directory.  At least it compiles correctly in our
          4-way box, where it used to fail all the time.

        * tests/Portable_Interceptors/Dynamic/interceptors.cpp:
          Fixed warnings about unused variables, also fixed a couple of
          memory leaks, and unchecked exceptions.

Wed Nov  8 11:44:58 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/TCF_Loader.cpp:

          Removed unused args from create_object method.

        * orbsvcs/IFR_Service/TypeCodeFactoryC.cpp:

          Added missing 'CORBA_' to constructor and destructor
          declarations.

Wed Nov  8 06:48:08 2000  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tests/RTCORBA/README: Updated the information to point to
          the appropriate documentation.  Thanks to Michael Hampel
          <michael.hampel@fhs-hagenberg.ac.at> for motivating this.

Tue Nov  7 21:46:57 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_type.cpp:
        * TAO_IDL/include/ast_type.h:

          Added flag to indicate whether the node has been added
          to the Interface Repository. Used for types that can
          be forward declared, which right now is only interfaces,
          but will eventually include other types as well.

Tue Nov 07 16:38:05 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Portable_Interceptors/Benchmark/client.dsp:
        * tests/Portable_Interceptors/Benchmark/server.dsp:
          Update the project files.

Tue Nov  7 15:16:37 2000  Carlos O'Ryan  <coryan@uci.edu>

        * examples/POA/Forwarding/Servant_Activator.cpp:
          Fixed warnings about unused variable.

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
          Change ACE_CHECK for ACE_CHECK_RETURN, otherwise builds without
          exceptions fail.

        * orbsvcs/LifeCycle_Service/Makefile:
          Add -lTAO_PortableServer library, needed in static builds.

Tue Nov  7 15:19:03 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_structure.cpp:

          Added base class constructor calls, not needed when
          traversing the be_<node> classes, which inherit from
          these and add to the hierarchy of constructor calls.

        * TAO_IDL/ast/ast_generator.cpp:

          Added code from be_generator::create_module to
          AST_Generator::create_module, so AST visitors will
          get reopened modules handled correctly.

Tue Nov  7 12:27:34 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:

          Commented out some unused formal parameters.

Tue Nov  7 12:04:42 2000  Darrell Brunsch <brunsch@uci.edu>

        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_FE_DLL.dsp:
        * TAO_IDL/tao_idl.dsp:
        * orbsvcs/CosEvent_Service/CosEvent_Service.dsp:
        * orbsvcs/orbsvcs/LoadBalancing.dsp:

          Removed precompiled header usage.

Tue Nov  7 12:00:32 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Portable_Interceptors/Benchmark/Client_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Benchmark/Client_ORBInitializer.h:
        * tests/Portable_Interceptors/Benchmark/Interceptor_Type.cpp:
        * tests/Portable_Interceptors/Benchmark/Interceptor_Type.h:
        * tests/Portable_Interceptors/Benchmark/Makefile:
        * tests/Portable_Interceptors/Benchmark/Server_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Benchmark/Server_ORBInitializer.h:
        * tests/Portable_Interceptors/Benchmark/client.cpp:
        * tests/Portable_Interceptors/Benchmark/interceptors.cpp:
        * tests/Portable_Interceptors/Benchmark/interceptors.h:
        * tests/Portable_Interceptors/Benchmark/server.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Client_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Client_ORBInitializer.h:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Makefile:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Server_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Server_ORBInitializer.h:
        * tests/Portable_Interceptors/Service_Context_Manipulation/client.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.h:
        * tests/Portable_Interceptors/Service_Context_Manipulation/server.cpp:
          Got this to compile with the standard interfaces for Portable
          Interceptors, they were using a TAO proprietary interface that
          went the way of the dinosaur.

Tue Nov  7 11:19:11 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/TAO_Static.dsp
        * tao/DynamicAny/TAO_DynamicAny_Static.dsp:
        * tao/IORManipulation/TAO_IORManip.dsp:
        * tao/IORManipulation/TAO_IORManip_Static.dsp:
        * tao/IORTable/TAO_IORTable_Static.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:

          Fixed these projects to be consistent in their defines,
          to make sure things like defining _DEBUG in a release
          build doesn't happen.

Tue Nov  7 12:24:48 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connect.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connect.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h: Made the changes for
          the new caching scheme in SSLIOP.

Tue Nov  7 11:50:22 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/InterfaceC.cpp:
        * tao/InterfaceC.h:
        * tao/InterfaceC.i:

          TypeCodeFactory generated code moved from these files
          to new files TypeCodeFactoryC.*.

        * tao/PortableServer/POA_CORBA.h:

          TypeCodeFactory generated code removed from this file.

        * tao/Interface.pidl:

          Interface TypeCodeFactory modified to be local.

        * orbsvcs/IFR_Service/TypeCodeFactoryC.h:
        * orbsvcs/IFR_Service/TypeCodeFactoryC.inl:
        * orbsvcs/IFR_Service/TypeCodeFactoryC.cpp:

          New files containing code removed from InterfaceC.*.

        * orbsvcs/IFR_Service/TypeCodeFactory_skel.cpp:

          Removed from project and Makefiles.

        * orbsvcs/IFR_Service/Repository_i.h:
        * orbsvcs/IFR_Service/TCF_Loader.h:
        * orbsvcs/IFR_Service/TCF_Loader.cpp:
        * orbsvcs/IFR_Service/TypeCodeFactory_i.h:
        * orbsvcs/IFR_Service/TypeCodeFactory_i.cpp:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.dsp:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.bor:

          Other files modified to make TypeCodeFactory a local
          interface. The motivation for this change was a bug
          report by Mateu Batle <mbatle@iname.com> and one by
          Jean-Christophe Dubois <jcd@one.com> that the
          TypeCodeFactory was blocking indefinitely upon startup.
          It turned out that there was an attempt to acquire the same
          lock twice, but the real solution seemed to be to make
          TypeCodeFactory, like DynamicAnyFactory, a local interface,
          which sidesteps the lock problem, and at the same time reduces
          TypeCodeFactory's size.

Tue Nov  7 08:57:16 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/SHMIOP_Connector.cpp (close): Fixed a warning in KCC 3.4
          build.

Tue Nov  7 08:54:31 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Cache_Manager.h:
        * tao/Connection_Cache_Manager.inl: Fixed compile errors on
          Digital Unix. The changes should hopefully fix the problem.

Mon Nov 06 23:39:05 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (reference_to_id and
          reference_to_servant): Made sure that we are not dealing with a
          nil object reference.  If we are, then throw a
          CORBA::BAD_PARAM() exception.  Thanks to Sandro Doro
          <doro.s@flashnet.it> for suggesting this change.

Mon Nov  6 17:26:30 2000  Carlos O'Ryan  <coryan@uci.edu>

        * */Makefile:
          Update all dependencies again. The last version commited had
          only .obj/*.o files listed, none of the .shobj files was listed.

        * performance-tests/Latency/single_threaded.pl:
          Run only the single threaded test, used to generate the
          performance graph.

Mon Nov  6 17:16:29 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/TypeCodeFactory_skel.cpp:

          Updated the overlooked POA_CORBA::TypeCodeFactory::_dispatch
          method to use Bruce Trask's synchronous_upcall_dispatch()
          call. This was causing a protection fault when _dispatch
          was called. Thanks to Jean-Christophe Dubois <jcd@one.com>
          for reporting this bug.

Mon Nov  6 16:55:05 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connect.h:
        * tao/UIOP_Connect.h: Added the TAO_Export for the TAO_*_Property
          class.

        * tao/IIOP_Connector.cpp:
        * tao/UIOP_Connector.cpp:
        * tao/SHMIOP_Connector.cpp: Added a ACE_TEXT macro for a ACE_DEBUG
          statement

Mon Nov  6 16:16:55 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/*/Makefile: Updated dependencies.

Mon Nov  6 15:29:04 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_interface.cpp:

          Modified redefine() method to check for self-concatenation
          before concatenating pragma lists. Changes made to interface
          redefinition code (seeing full definition after a forward
          declaration, for example) have introduced a case where
          self-concatenation can happen. In this case, the
          concatenation should just be skipped. Thanks to Ossama's
          SecurityLevel2.idl file for bringing this case to light.

Mon Nov  6 15:10:27 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/Options.html: Updated the documentation

        * tests/*/Makefile:
        * tests/performance_tests/*/Makefile: Updated dependencies.

Mon Nov  6 14:50:23 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Makefile.bor: Added new files.

Mon Nov  6 14:34:17 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp: Updated files.

Mon Nov  6 13:54:20 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        Changes related to the new caching scheme in TAO. Please see
        http://www.cs.wustl.edu/~bala/connection_mgmt.html for the
        requirements that were a guiding factor for these
        changes. Further, the present set of changes includes only the
        Caching scheme. The purging which was a part of the scheme (that
        will be gone with this changes) has not been added. It will be
        done in the next set of changes due in another few days/weeks.

        * tao/Base_Connection_Property.h:
        * tao/Base_Connection_Property.inl:
        * tao/Base_Connection_Property.cpp: An abstraction for the
          connection property. This class at present encapsulates the
          TAO_Endpoint which is used as a key to look up connections from
          the Cache. Looking up connections based on the Endpoint is the
          base on which the whole Caching scheme works. This class can be
          extended to attach properties for connections ex. QoS
          properties. Lookups can then be done based on the endpoint with
          the specific properties.

        * tao/Cache_Entries.h:
        * tao/Cache_Entries.cpp:
        * tao/Cache_Entries.inl:  Provides wrapper classes for the Key and
          Value fields of a Cache map.

        * tao/Connection_Cache_Manager.h:
        * tao/Connection_Cache_Manager.cpp:
        * tao/Connection_Cache_Manager.inl: A wrapper class for the
          connection cache. This class holds an instance of
          ACE_Hash_Map_Manager on which the connections are
          cached. This wrapper is necessary as we can extend the interface
          and implementation to iterate over the map based on a specific
          requirement. One good example is the case for FT, wherein we
          would like to choose connections to a FT server and return the
          list of such connections to the caller.

        * tao/Connection_Handler.h:
        * tao/Connection_Handler.cpp:
        * tao/Connection_Handler.inl: An abstract base class for the
          connection handlers (event handlers). This base class is used by
          both the Server and Client Connection handlers. A pointer to
          this base class is held by the Connection Cache. This class (and
          hence the inherited classes) is refcounted. The refcount
          indicates the number of places the references are held. The
          refcounting does part of the memory management.

        * tao/Client_Strategy_Factory.h:
        * tao/Client_Strategy_Factory.cpp: Removed the method
          create_cached_connector_lock (). This lock for the Connection
          Cache is within TAO_Connection_Cache_Manager.

        * tao/default_client.cpp:
        * tao/default_client.h: Removed the method
          create_cached_connector_lock (). The option -ORBConnectorLock
          has been removed as it does not make much sense in the present
          context.

        * tao/Connector_Registry.h:
        * tao/Connector_Registry.cpp: All references to purging scheme has
          been removed.

        * tao/Endpoint.h:
        * tao/Endpoint.i: Added priority as one of the argument to the
          constructor with a default value. Further, added is_equivalent
          (), hash () and duplicate () as pure virtual functions. The
          Base_Connection_Property class (and in turn the TAO_Cache_ExtId
          class) depends on these virtual functions to check for
          equivalency, get a hash value and do a deep copy respectively.

        * tao/IIOP_Connect.h:
        * tao/IIOP_Connect.cpp:
        * tao/UIOP_Connect.h:
        * tao/UIOP_Connect.cpp:
        * tao/SHMIOP_Connect.h:
        * tao/SHMIOP_Connect.cpp: Zapped the base class
          TAO_*_Handler_Base. This class practically provided nothing but
          an extra class in inheritance hierarchy. The protocol property
          structure that was defined within this TAO_*_Handler_Base class
          has been made a different class by name TAO_*_Properties. The
          connection handlers will now inherit directly from the Service
          Handler specialised by the type of stream and the
          TAO_Connection_Handler class. Implementation for a couple of
          virtual methods defined in TAO_Connection_Handler class have
          been added. The memory management of the connection handlers on
          both the server and client side follows the same pattern. If the
          handlers are registered with the reactor, the handlers are
          marked and their refcounts bumped up. When the Connection Cache
          is closed the Handle_Set of the handlers that are registered
          with the reactor are passed back to the ORB_Core and the
          refcounts decreased by one. This Handle_Set is used by the
          ORB_Core to de-register those handles from the reactor. The
          reactor then calls handle_close () on these handlers. At that
          point of time, refcounts are further decreased by one, which
          makes the handlers destroy themselves.  This scheme of memory
          management helps for both these cases (1) When the reactor
          dissappears before the ORB_Core and (2) When the ORB_Core
          dissappears before the reactor.

          Also, moved some of the code that was protocol independent in to
          the base class TAO_Connection_Handler.

        * tao/IIOP_Acceptor.h:
        * tao/UIOP_Acceptor.h:
        * tao/SHMIOP_Acceptor.h: Renamed the struct that had the
          connection property to TAO_*_Properties.

        * tao/IIOP_Endpoint.h:
        * tao/IIOP_Endpoint.cpp:
        * tao/UIOP_Endpoint.h:
        * tao/UIOP_Endpoint.cpp:
        * tao/SHMIOP_Endpoint.h:
        * tao/SHMIOP_Endpoint.cpp: Provided implementation for the methods
          hash (), is_equivalent () and duplicate ().

        * tao/Pluggable.h:
        * tao/Pluggable.i:
        * tao/Pluggable.cpp: Removed references to the purging
          scheme. Cached the pointer to the ORB_Core in TAO_Connector and
          provided accesors to the ORB_Core. All the *_Connector classes
          had its own copy of the ORB_Core. So, they have been moved to
          the base class TAO_Connector.

        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
        * tao/UIOP_Transport.h:
        * tao/UIOP_Transport.cpp:
        * tao/SHMIOP_Transport.h:
        * tao/SHMIOP_Transport.cpp: Added a method service_handler () to
          access the underlying service handler associated with the
          transport. Changed the implementation of idle () method. This
          now calls the idle on the correspoding handler that it holds.

        * tao/Acceptor_Impl.cpp: Removed references to the existing
          purging scheme. Further, changed the scheme in which the open
          connections are kept track in a reactive-concurrency model. Now
          the corresponding handlers will be marked as being registered
          with the reactor and their reference count bumped up before the
          handler is registered with the reactor.

        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.i: Added an instance of the
          Connection_Cache_Manager in the ORB_Core and provided an
          accessor for it. Removed the Handle_Set that was kept in the
          ORB_Core and the accessors of the Handle_Set.

        * tao/Resource_Factory.h:
        * tao/Resource_Factory.cpp:
        * tao/default_resource.h:
        * tao/default_resource.cpp:  Zapped the class
          TAO_Cached_Connector_Lock as we now hold a single lock on the
          Cache_Map. Added a method create_cached_connection_lock (). This
          method creates the right lock for the Connection_Cache. Added an
          option -ORBConnectionLock that can used at ORB initialisation.

        * tao/Makefile:
        * tao/PortableServer/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile: Updated dependencies.

Mon Nov  6 13:03:51 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/DynamicInterface/ExceptionList.cpp:

          Removed explicit instantiation of
          ACE_Unbounded_Queue<CORBA::TypeCode_ptr> and related
          types, since they already exist in tao/Exception.cpp.

Mon Nov  6 12:28:41 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be_include/be_union.h:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/include/ast_union.h:

          Had to move default_index_, default_index() and
          compute_default_index() from be_union to ast_union,
          in order to fix problems caused by a similar move
          of default_value_, default_value() and
          compute_default_value() recently.

Mon Nov  6 09:50:37 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp (stubless_relative_roundtrip_timeout):
          Put a TAO_HAS_CORBA_MESSAGING guard around the implementation of
          this function to satisfy the ssl=1 case.

Mon Nov  6 10:06:09 2000  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Callback/Makefile:
          Only compile if minimum_corba is disabled

Mon Nov  6 07:35:50 2000  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tests/IORManipulation/Makefile (LDFLAGS): Added back a missing
          '+' to '+=' so that linking works properly.  Thanks to Albert
          Wijnja <albert.wijnja@meco.nl> for reporting this.

Sat Nov  4 18:34:10 2000  Darrell Brunsch <brunsch@uci.edu>

        * TAOACE.dsw:

          Updated dependencies for TAO_Fault_Tolerance.

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/IOGRTest.dsp:

          Fixed library paths and libraries included.

        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:

          Fixed tao_idl dependency.

Sat Nov  4 18:59:00 2000  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/mpeg/source/server/Makefile:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_client/ui.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_shared/com.cpp:

          Fixed compile and link errors.

Sat Nov  4 18:04:21 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/include/ast_typedef.h:

          Added a method to find the primitive base type
          (looping if there are nested typedefs) similar
          to that in be_typedef, but with a different return
          type. Needed for IfR administration.

        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be_include/be_union.h:
        * TAO_IDL/include/ast_union.h:

          Moved code to store and compute the default label
          value from be_union to ast_union. Needed for IfR
          administration.

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
          Switch case for wchar discriminators was using the
          short member of the union node's union member that
          stores the default label value. Changed this to use
          the union's wchar member.

Sat Nov  4 15:21:52 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tests/DSI_Gateway/gateway.bor:
        * tests/Param_Test/client.bor:

          Added DynamicInterface library and cflags to these
          makefiles.

Fri Nov  3 17:42:34 2000  Darrell Brunsch <brunsch@uci.edu>

        * TAO_IDL/TAO_IDL_BE_LIB.dsp:
        * TAO_IDL/TAO_IDL_FE_LIB.dsp:
        * TAO_IDL/tao_idl_static.dsp:
        * examples/Simple/time/client_static.dsp:
        * examples/Simple/time/server_static.dsp:
        * orbsvcs/Naming_Service/Naming_Server_static.dsp:
        * orbsvcs/orbsvcs/CosConcurrency_Static.dsp:
        * orbsvcs/orbsvcs/CosEvent_Static.dsp:
        * orbsvcs/orbsvcs/CosLifeCycle_Static.dsp:
        * orbsvcs/orbsvcs/CosNaming_Static.dsp:
        * orbsvcs/orbsvcs/CosNotification_Static.dsp:
        * orbsvcs/orbsvcs/CosProperty_Static.dsp:
        * orbsvcs/orbsvcs/CosTime_Static.dsp:
        * orbsvcs/orbsvcs/CosTrading_Static.dsp:
        * orbsvcs/orbsvcs/LoadBalancing_Static.dsp:
        * orbsvcs/orbsvcs/RTEvent_Static.dsp:
        * orbsvcs/orbsvcs/RTOLDEvent_Static.dsp:
        * orbsvcs/orbsvcs/RTSchedEvent_Static.dsp:
        * orbsvcs/orbsvcs/RTSched_Static.dsp:
        * orbsvcs/orbsvcs/Svc_Utils_Static.dsp:
        * tao/TAO_Static.dsp:
        * tao/IORManipulation/TAO_IORManip_Static.dsp:
        * tao/IORTable/TAO_IORTable_Static.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:

          Updated static configurations for Static Release.

        * tao/DynamicInterface/ExceptionList.inl:

          Added CVS ID string to this file.

Fri Nov  3 16:49:01 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_structure.cpp:

          Added explicit template instantiation for
          ACE_Unbounded_Queue_Iterator<AST_Field *>.

Fri Nov  3 14:53:08 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao_idl/ast/ast_exception.cpp:
        * tao_idl/ast/ast_structure.cpp:
        * tao_idl/ast/ast_union.cpp:
        * tao_idl/include/ast_structure.h:

          Added ACE_Unbounded_Queue member that contains only
          fields, code to populate the container, and accessor
          function. Existing member count and scope iterator
          functions include things like enum values of an enum
          declared inside the scope, which the spec requires
          to be declared in the enum's enclosing scope. Extra
          'members' like these are used in typecode creation,
          so the behavior of these existing functions could
          not be changed. For IfR administration, something was
          needed that would act on the 'fields' of the data type
          only. Simply ignoring the extra members makes it very
          difficult to correctly process something like:
                struct foo
                {
                  enum bar {ONE, TWO} member1;
                  bar member2;
                };
          which is legal IDL, thus the dedicated container member
          and associated methods. The new member and accessor method
          are declared in AST_Structure only, since AST_Exception and
          AST_Union inherit from it. The populating method had to be
          added in each class, since the method from which it is
          called is private in each class.

Fri Nov  3 09:16:13 2000  Darrell Brunsch <brunsch@uci.edu>

        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:
        * tests/Exposed_Policies/Client.dsp:
        * tests/Exposed_Policies/Server.dsp:
        * tests/Param_Test/client.dsp:
        * tests/Portable_Interceptors/Benchmark/client.dsp:
        * tests/Portable_Interceptors/Benchmark/server.dsp:
        * orbsvcs/examples/Security/Send_File/Send_File_Client.dsp:
        * orbsvcs/examples/Security/Send_File/Send_File_Server.dsp:

          Touched up the Release versions of these projects.

Fri Nov  3 10:48:56 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:

          Set the parameters for compiling the IDL file in
          the release version of these projects.

        * tests/DSI_Gateway/test.idl:

          Renamed typedef LongSeq as DSI_LongSeq. The generated
          #if defined guard around the class constructor definitions
          and the Any destructor definition (_LONGSEQ_CS_) was
          conflicting with something defined elsewhere.

Thu Nov  2 14:44:35 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp:
          Explicitly instantiate
          ACE_Atomic_Op<ACE_SYNCH_MUTEX,CORBA::ULong>
          it used to be instantiated in the TAO library, but now that code
          is in TAO_DynamicInterface.

        * orbsvcs/tests/EC_Mcast/EC_Mcast.h:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
          Use the Atomic_Op instantiation from EC_Gateway_UDP.

        * TAO_IDL/Makefile.dependencies:
          The IDL compiler was touched if static_libs_only was not
          defined.

Thu Nov  2 15:07:33 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/corbafwd.h:

          Uninlined the declarations of the overloaded CORBA::release
          and CORBA::is_nil methods for Request, ServerRequest and
          Context. Also moved the declarations of
          CORBA::release (ServerRequest) and
          CORBA::is_nil (ServerRequest) inside the minimum CORBA
          guards, since ServerRequest is now used only for DSI.

Thu Nov  2 12:03:07 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/Dynamic_Adapter.cpp:

          Moved the #endif of TAO_HAS_MINIMUM_CORBA to the end of
          the file, after the explicit template instantiations.

        * tao/DynamicInterface/TAO_DynamicInterface.dsp:

          Fixed a typo in the project settings for the release
          version.

Wed Nov  1 10:14:26 2000  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.h:
        * orbsvcs/ImplRepo_Service/implrepo.dsp:

          Changed the ImplRepo_Service to use ServantLocators instead
          of a default_servant.  [Bug 668]

Wed Nov  1 10:04:27 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Messaging_Policy_i.cpp (relative_expiry):
        * tao/ORB_Core.cpp:
          Removed unnecessary TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY
          guards.

Wed Nov  1 09:47:47 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Stub.cpp:
        * tao/Messaging_Policy_i.h:
        * tao/Messaging_Policy_i.cpp:
        * tao/Messaging_PolicyFactory.cpp (create_policy):
        * tao/Messaging_ORBInitializer.cpp (pre_init):
          Changed TAO_HAS_ROUNDTRIP_TIMEOUT_POLICY to
          TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY

Wed Nov  1 08:19:12 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/Messaging_ORBInitializer.cpp:

          Added TAO_HAS_ROUNDTRIP_TIMEOUT_POLICY protection
          around call to TAO_ORB_Core::set_timeout_hook.

        * tao/Messaging_PolicyFactory.cpp:

          Added TAO_HAS_ROUNDTRIP_TIMEOUT_POLICY protection
          for one case statement.

        * tao/Messaging_Policy_i.cpp:
        * tao/Messaging_Policy_i.h:
        * tao/Messaging_Policy_i.i:

          Standardized the use of the protection macros, since the .h
          file was using TAO_HAS_CORBA_MESSAGING, but the .cpp file
          was using TAO_HAS_SYNC_SCOPE_POLICY or nothing at all.  Made
          them consistent.  Granted, I don't know if this is the
          "correct" way of doing it, but it links for me though.

Wed Nov 01 09:58:29 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/Object_Adapter.h (prepare_for_upcall): Added
          back the default value for ACE_TRY_ENV.  I thought that this was
          library code and should not have a default.  Actually, this code
          is also called from the Through POA stubs and therefore requires
          the default so that it can be called from code that uses native
          exceptions and not the simulated exceptions.  Thanks to Carlos
          for pointing this out.

Wed Nov  1 08:14:14 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/DynamicInterface/Context.cpp:
        * tao/DynamicInterface/Context.h:
        * tao/DynamicInterface/DII_Invocation.cpp:
        * tao/DynamicInterface/DII_Invocation.h:
        * tao/DynamicInterface/DII_Reply_Dispatcher.cpp:
        * tao/DynamicInterface/DII_Reply_Dispatcher.h:
        * tao/DynamicInterface/Dynamic_Adapter_Impl.cpp:
        * tao/DynamicInterface/Dynamic_Adapter_Impl.h:
        * tao/DynamicInterface/Dynamic_Implementation.cpp:
        * tao/DynamicInterface/Dynamic_Implementation.h:
        * tao/DynamicInterface/ExceptionList.cpp:
        * tao/DynamicInterface/ExceptionList.h:
        * tao/DynamicInterface/Request.cpp:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Server_Request.cpp:
        * tao/DynamicInterface/Server_Request.h:

          Replaced or added TAO_HAS_MINIMUM_CORBA guards around
          these files.

Wed Nov  1 07:33:03 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/ImplRepo_Service/implrepo.dsp:
        * orbsvcs/ImplRepo_Service/NT_ImplRepo_Service.dsp:

          Added TAO_DynamicInterface to linked libraries, and
          tao/DynamicInterface to the link path.

        * ImplRepo_i.cpp:

          Cosmetic changes.

Wed Nov  1 07:05:19 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAOACE.dsw:

          Left out of earlier checkin

          Tue Oct 31 12:01:10 2000  Jeff Parsons  <parsons@cs.wustl.edu>


Tue Oct 31 20:17:22 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/TAO_Static.dsp:

          Changes corresponding those made to TAO.dsp in

          Tue Oct 31 12:01:10 2000  Jeff Parsons  <parsons@cs.wustl.edu>

Tue Oct 31 20:03:17 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Added decision to use ACE_NESTED_CLASS macro for interceptors
          request info subclasses' return type code, similiar to
          previous changes made for arguments. Also changed the name
          of the visitor context substate enum value to be more
          general, since it isn't used just for arguments any more.
          Thanks to Tommy Andreasen <tommy.andreasen@radiometer.dk>
          for reporting this bug and sending in an example IDL file.

Tue Oct 31 17:34:17 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableInterceptorC.h:
          Removed the unnecessary TAO_HAS_CORBA_MESSAGING Guard.

        * tao/Stub.h (TAO_Stub):
        * tao/Stub.cpp (buffering_constraint):

        * tao/ORB_Core.i:
        * tao/ORB_Core.cpp (stubless_relative_roundtrip_timeout):
          Added the TAO_HAS_ROUNDTRIP_TIMEOUT_POLICY adn
          TAO_HAS_SYNC_SCOPE_POLICY guards around the related functions.

        * tao/Messaging_Policy_i.h:
          Added the missing TAO_HAS_CORBA_MESSAGING Guard around the
          class.


Tue Oct 31 18:50:35 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/Dynamic_Adapter.cpp:

          Removed unused arguments in the no-op definitions
          of the base class functions.

Tue Oct 31 18:43:41 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/Invocation.cpp:
        * tao/Invocation.h:

          Added TAO_HAS_MINIMUM_CORBA == 0 guards around the
          declaration and definition of the version of invoke()
          that takes an ExceptionList. This version is used only
          by DII. Thanks to Priyanka for reporting this problem,
          which occurs in minimum CORBA builds.

Tue Oct 31 17:55:02 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * rules.tao.GNU:

          Added variable TAO_DYNAMIC_LIBS, set to
          -lTAO_DynamicInterface, and used it in the
          following Makefiles, which all use DII and/or DSI
          code.

        * examples/POA/DSI/Makefile:
        * performance-tests/Cubit/TAO/DII_Cubit/Makefile:
        * performance-tests/Latency/Makefile:
        * tests/DSI_Gateway/Makefile:
        * tests/Param_Test/Makefile:

Tue Oct 31 14:53:46 2000  Carlos O'Ryan  <coryan@uci.edu>

        * */Makefile*:
          Update all makefile dependencies (yet another time).

Tue Oct 31 15:19:13 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/Dynamic_Adapter.cpp:

          Added explicit template instantiations for
          ACE_Dynamic_Service<TAO_Dynamic_Adapter>.

Tue Oct 31 11:54:30 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Object.cpp:
          Remove stray template instantiation, probably left out during
          development.

        * tao/DynamicInterface/DII_Invocation.h:
        * tao/DynamicInterface/DII_Reply_Dispatcher.h:
        * tao/DynamicInterface/Request.h:
          Fixed a few #includes that still referenced files with the tao/
          prefix, even though they were moved to the DynamicInterface
          directory.

        * tao/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/DynamicInterface/Makefile:
          Update dependencies

Tue Oct 31 11:05:47 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/TAO_PortableServer.dsp:
          Remove Forwarding_Servant from this project file too.

Tue Oct 31 12:15:18 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tests/DSI_Gateway/DSI_Gateway.dsw:
        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:

          Added MSVC workspace and projects for this test.

Tue Oct 31 12:01:10 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/DynamicInterface/Context.cpp:
        * tao/DynamicInterface/Context.h:
        * tao/DynamicInterface/Context.inl:
        * tao/DynamicInterface/DII_Invocation.cpp:
        * tao/DynamicInterface/DII_Invocation.h:
        * tao/DynamicInterface/DII_Invocation.inl:
        * tao/DynamicInterface/DII_Reply_Dispatcher.cpp:
        * tao/DynamicInterface/DII_Reply_Dispatcher.h:
        * tao/DynamicInterface/DII_Reply_Dispatcher.inl:
        * tao/DynamicInterface/Dynamic_Adapter_Impl.cpp:
        * tao/DynamicInterface/Dynamic_Adapter_Impl.h:
        * tao/DynamicInterface/Dynamic_Implementation.cpp:
        * tao/DynamicInterface/Dynamic_Implementation.h:
        * tao/DynamicInterface/ExceptionList.cpp:
        * tao/DynamicInterface/ExceptionList.h:
        * tao/DynamicInterface/ExceptionList.inl:
        * tao/DynamicInterface/Makefile:
        * tao/DynamicInterface/Makefile.bor:
        * tao/DynamicInterface/Request.cpp:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Request.inl:
        * tao/DynamicInterface/Server_Request.cpp:
        * tao/DynamicInterface/Server_Request.h:
        * tao/DynamicInterface/Server_Request.inl:
        * tao/DynamicInterface/TAO_DynamicInterface.dsp:
        * tao/DynamicInterface/dynamicinterface_export.h:

          Files either moved whole from TAO/tao, created from parts of
          files in TAO/tao, or created from scratch for the new
          DynamicInterface library. This new library contains all the code
          related to DII and DSI.

        * tao/Dynamic_Adapter.cpp:
        * tao/Dynamic_Adapter.h:

          New files containing base class for hook methods that replace
          all or part of existing TAO methods that use DII or DSI.

        * TAOACE.dsw:
        * tao/DomainC.cpp:
        * tao/Exception.cpp:
        * tao/Exception.h:
        * tao/Exception.i:
        * tao/GIOP_Message_Acceptors.cpp:
        * tao/InterfaceC.cpp:
        * tao/Invocation.cpp:
        * tao/Invocation.h:
        * tao/LocalObject.cpp:
        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/Object.cpp:
        * tao/Object.h:
        * tao/PolicyC.cpp:
        * tao/Stub.cpp:
        * tao/Stub.h:
        * tao/Stub.i:
        * tao/TAO.dsp:
        * tao/TAO_Server_Request.cpp:
        * tao/TAO_Server_Request.h:
        * tao/corba.h:
        * tao/corbafwd.cpp:
        * tao/operation_details.h:
        * tao/target_specification.h:

          TAO/tao files modified to be consistent with the
          DynamicInterface library.

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/POA.i:
        * tao/PortableServer/Servant_Base.cpp:
        * tao/PortableServer/Servant_Base.h:
        * tao/PortableServer/TAO_PortableServer.dsp:

          TAO/tao/PortableServer files modified to be consistent
          with the DynamicInterface library.

        * tests/DSI_Gateway/test_dsi.cpp:
        * tests/DSI_Gateway/test_dsi.h:
        * tests/Param_Test/client.dsp:
        * tests/Param_Test/helper.h:
        * examples/POA/DSI/Database_i.cpp:
        * examples/POA/DSI/Database_i.h:
        * examples/POA/DSI/server.dsp:
        * performance-tests/Cubit/TAO/DII_Cubit/client.cpp:
        * performance-tests/Cubit/TAO/DII_Cubit/client.dsp:
        * performance-tests/Latency/deferred_synch_client.dsp:
        * performance-tests/Latency/dii_client.cpp:

          Tests and examples modified to be consistent with the
          DynamicInterface library.

Tue Oct 31 11:06:52 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/InterfaceS.cpp:
        * orbsvcs/IFR_Service/TypeCodeFactory_skel.cpp:

          Fixed generated code to reflect Irfan's recent change
          to the signature of the prepare_for_upcall() method.

Tue Oct 31 09:09:17 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/IOR_Parser.h: SystemException was being used without being
          defined (it was only forward declared).  Included Exception.h
          to fix this.  Thanks to J. Russell Noseworthy
          <rnosewor@objectsciences.com> for reporting this problem and
          providing the fix. This closes bug 708.

Mon Oct 30 21:37:22 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/Makefile:
        * tao/PortableServer/Makefile.bor:
          Remove Forwarding_Servant from the list of files, updated
          dependencies.

Mon Oct 30 18:51:02 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/ESF/ESF_Copy_On_Read.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Copy_On_Write.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Admin.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_Admin.cpp:
          Sun/CC 5.1 Patch 109490-01 gives errors if the formal arguments
          names in a template definition do not match the names in the
          declaration.
          Fixed the problems in the ESF directory per J. Russell
          Noseworthy <rnosewor@objectsciences.com> report.
          This is a partial fix for [BUGID:709]

        * orbsvcs/orbsvcs/ESF/ESF_Busy_Lock.h:
        * orbsvcs/orbsvcs/ESF/ESF_Copy_On_Read.h:
        * orbsvcs/orbsvcs/ESF/ESF_Copy_On_Write.h:
        * orbsvcs/orbsvcs/ESF/ESF_Defaults.h:
        * orbsvcs/orbsvcs/ESF/ESF_Delayed_Changes.h:
        * orbsvcs/orbsvcs/ESF/ESF_Delayed_Command.h:
        * orbsvcs/orbsvcs/ESF/ESF_Immediate_Changes.h:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Admin.h:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Admin.i:
        * orbsvcs/orbsvcs/ESF/ESF_Peer_Workers.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_Admin.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_Collection.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_List.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_RB_Tree.h:
        * orbsvcs/orbsvcs/ESF/ESF_Proxy_RefCount_Guard.h:
        * orbsvcs/orbsvcs/ESF/ESF_RefCount_Guard.h:
        * orbsvcs/orbsvcs/ESF/ESF_Shutdown_Proxy.h:
        * orbsvcs/orbsvcs/ESF/ESF_Worker.h:
        * orbsvcs/orbsvcs/Event/EC_And_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Basic_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Basic_Filter_Builder.h:
        * orbsvcs/orbsvcs/Event/EC_Bitmask_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Busy_Lock.h:
        * orbsvcs/orbsvcs/Event/EC_Conjunction_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_ConsumerAdmin.h:
        * orbsvcs/orbsvcs/Event/EC_ConsumerControl.h:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Defaults.h:
        * orbsvcs/orbsvcs/Event/EC_Disjunction_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_Dispatching_Task.h:
        * orbsvcs/orbsvcs/Event/EC_Event_Channel.h:
        * orbsvcs/orbsvcs/Event/EC_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Filter_Builder.h:
        * orbsvcs/orbsvcs/Event/EC_Gateway.h:
        * orbsvcs/orbsvcs/Event/EC_Gateway_Sched.h:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.h:
        * orbsvcs/orbsvcs/Event/EC_MT_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_Masked_Type_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Negation_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Null_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Null_Scheduling.h:
        * orbsvcs/orbsvcs/Event/EC_ObserverStrategy.h:
        * orbsvcs/orbsvcs/Event/EC_Per_Supplier_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Prefix_Filter_Builder.h:
        * orbsvcs/orbsvcs/Event/EC_Priority_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_Priority_Scheduling.h:
        * orbsvcs/orbsvcs/Event/EC_ProxyConsumer.h:
        * orbsvcs/orbsvcs/Event/EC_ProxySupplier.h:
        * orbsvcs/orbsvcs/Event/EC_QOS_Info.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.h:
        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.h:
        * orbsvcs/orbsvcs/Event/EC_Sched_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Sched_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Sched_Filter_Builder.h:
        * orbsvcs/orbsvcs/Event/EC_Scheduling_Strategy.h:
        * orbsvcs/orbsvcs/Event/EC_SupplierAdmin.h:
        * orbsvcs/orbsvcs/Event/EC_SupplierControl.h:
        * orbsvcs/orbsvcs/Event/EC_Supplier_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Supplier_Filter_Builder.h:
        * orbsvcs/orbsvcs/Event/EC_Timeout_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Timeout_Generator.h:
        * orbsvcs/orbsvcs/Event/EC_Trivial_Supplier_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_Type_Filter.h:
        * orbsvcs/orbsvcs/Event/EC_UDP_Admin.h:
          Update all the header files to use Doxygen style documentation.
          I used Darrell's doxygen-convert.pl script and a little
          hand-crafting.

Mon Oct 30 18:35:46 2000  Darrell Brunsch <brunsch@uci.edu>

        * examples/POA/Forwarding/Servant_Activator.cpp:

          Added a TAO_ENV_ARG_DEFN so we have an ACE_TRY_ENV when
          native exceptions are used.

        * orbsvcs/orbsvcs/SSLIOP.dsp:

          Removed hardcoded OpenSSL include directories.

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/IOGRTest.dsp:

          Fixed the include directories.

Mon Oct 30 17:47:13 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Policy_Manager.h:
        * tao/Policy_Manager.cpp (TAO_Policy_Manager_Impl):
          Changed the type of relative_roundtrip_timeout_ and sync_scope_ to
          CORBA::Policy *.
          Hence instead of calling TAO_RelativeTimeoutPolicy::clone or
          TAO_Sync_Scope_Policy::clone, calling CORBA::Policy::copy.
          Made related changes.

          Modify the return parameter for
          relative_roundtrip_timeout () and sync_scope () to
          CORBA::Policy_ptr in all the classes in the file.

        * tao/ORB_Core.h  :
        * tao/ORB_Core.cpp:
          Declare and define TAO_ORB_Core::call_timeout_hook,
          TAO_ORB_Core::set_timeout_hook,
          TAO_ORB_Core::call_sync_scope_hook,
          TAO_ORB_Core::set_sync_scope_hook which are used to call the
          hooks to set and get the values of timeout/scope and save the
          hook for the respective policies so that they can be used later
          in need.

          Also, get_sync_strategy is defined as a helper to get the
          TAO_Sync_Strategy related to the Sync_Scope passed to it.

          The function TAO_ORB_Core::stubless_sync_scope helps get the
          scope when the stub is nil.

          Modify the return parameter for
          TAO_ORB_Core::relative_roundtrip_timeout (),
          TAO_ORB_Core::default_relative_roundtrip_timeout (),
          TAO_ORB_Core::stubless_relative_roundtrip_timeout (),
          TAO_ORB_Core::default_sync_scope () and
          TAO_ORB_Core::sync_scope () to CORBA::Policy_ptr.

          The same change recursively in all the classes which call these
          functions.

        * tao/Stub.h:
        * tao/Stub.cpp (sync_scope):
          Modified TAO_Stub::sync_strategy () to call
          TAO_ORB_Core::call_sync_scope_hook to get the scope value.
          This scope value is passed to TAO_ORB_Core::get_sync_strategy ()
          to get the TAO_Sync_Strategy.

          Modify the return parameter for
          TAO_ORB_Core::relative_roundtrip_timeout (),
          TAO_ORB_Core::sync_scope () to CORBA::Policy_ptr.

          Modified TAO::Sync_scope to call
          TAO_ORB_Core::stubless_sync_scope to avoid code repetition.

        * tao/Messaging_Policy_i.h (SyncScopePolicy,):
        * tao/Messaging_Policy_i.cpp:
          Declare and define TAO_RelativeRoundtripTimeoutPolicy::hook
          and TAO_Sync_Scope_Policy::hook functions. The
          functions are called to set the hooks for the respective policies
          to indicate that the policies are set and also to know the Timeout
          and scope values in the respective cases.

        * tao/Messaging_PolicyFactory.cpp (create_policy):
          Remove the if-defs for TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY
          and TAO_HAS_SYNC_SCOPE_POLICY in the switch-case block.

        * tao/Messaging_ORBInitializer.cpp:
          Save the pointers to hooks for
          TAO_RelativeRoundtripTimeout and TAO_Sync_Scope
          policies in the
          TAO_Messaging_ORBInitializer::pre_init by calling the
          TAO_ORB_Core::set_timeout_hook and
          TAO_ORB_Core::set_sync_scope_hook.

        * tao/UIOP_Connect.h:
        * tao/UIOP_Connect.cpp:

        * tao/SHMIOP_Connect.h:
        * tao/SHMIOP_Connect.cpp (handle_timeout):

        * tao/IIOP_Connect.h:
        * tao/IIOP_Connect.cpp (handle_timeout):
          Set the timeout value by calling TAO_ORB_Core::call_timeout_hook
          instead of getting a TAO_RelativeRoundtripPolicy pointer and
          proceeding from there.

        * tao/Invocation.h:
        * tao/Invocation.cpp:
          Same as IIOP_Connect for TAO_RelativeRoundtripTimeoutPolicy.
          Similar change with sync_scope. Instead of getting a
          TAO_Sync_Scope_Policy_ptr and gettting the sync_scope
          value, call the hook for the sync_scope which is
          TAO_ORB_Core::call_sync_scope_hook.

        * tao/ClientRequestInfo.h :
        * tao/ClientRequestInfo.cpp (sync_scope):
          Modified the return value of sync_scope from
          Messaging::SyncScope to CORBA::Short.

Mon Oct 30 18:57:22 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/POA: Removed the Forwarding Servant.  The
          forwarding servant was ill-constructed: (a) it threw exceptions
          the incorrect way since the correct way is to call
          set_exception() on the ServerRequest and not to throw an
          exception; (b) the forward_object() method on the POA leads to
          deadlock if called from an upcall on the object being forwarded;
          (c) Servant Managers is the only correct way to forward requests
          - Default Servants is not the correct solution.

        * tao/PortableServer/Object_Adapter.cpp (dispatch,
          dispatch_servant, and prepare_for_upcall): Changed these methods
          such that the forwarding exception can only be raised by the
          servant managers.  Now the forward exception is caught in
          prepare_for_upcall() when we are looking for the servant and may
          potentially call the servant managers.  If this exception is
          raised by a regular servant or by a default servant, the
          exception is reported to the client as an unknown exception.
          Thanks to Ossama for reporting this problem.  This fix closes
          bug 690.

        * Since the signature of
          TAO_Object_Adapter::Servant_Upcall::prepare_for_upcall() got
          changed because of the above fix, it required a change to
          collocation code that performs through POA calls.  The following
          files were effected:

          - tao/PortableServer/Collocated_Object.cpp
          - tao/PortableServer/DomainS.cpp
          - tao/PortableServer/ImplRepoS.cpp
          - tao/PortableServer/MessagingS.cpp
          - tao/PortableServer/PolicyS.cpp
          - tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp

          and

          - TAO_IDL/be/be_visitor_interface/thru_poa_collocated_ss.cpp
          - TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp

        * tao/Adapter.h (TAO_Adapter): Added a new return value for failed
          dispatching of upcalls.

Mon Oct 30 18:38:42 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/driver/drv_preproc.cpp:

          Plugged a memory leak by removing an extra string copy
          when adding the include path for orb.idl to the
          command line arglist.

        * TAO_IDL/util/utl_scope.cpp:

          Found a missing 'delete' for an iterator that was
          created on the heap. Instead of adding the 'delete',
          just created the iterator on the stack.

Mon Oct 30 10:40:57 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * docs/tutorials/Quoter/AMI/Makefile:
          Updated the Makefile to link lTAO_PortableServer. Thanks to
          Walt Corey <wcorey@ibm.net> for reporting the bug.

Mon Oct 30 15:21:24 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * tao/Typecode.cpp:

          Added a check for a null typecode pointer argument to a function
          common to equal() and equivalent().  This change will cause all
          Any extractions to fail if the application has not initialized
          an ORB. Thanks to Albert Wijnja <albert.wijnja@meco.nl> for
          reporting this bug.

Mon Oct 30 15:00:30 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:

          Modified redefinition of forward declared interface
          to handle the case where an interface is defined in
          a reopening of the module where it is forward declared,
          then referenced in a different module. Thanks to
          Vsevolod Novikov <novikov@df.nnov.rfnet.ru> for reporting
          this bug and sending in an example IDL file.

        * tests/IDL_Test/reopened_modules.idl:

          Added the above example to IDL_Test.

Mon Oct 30 12:04:18 2000  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Simple/time-date/Makefile:
          Fixed accidental commit

Mon Oct 30 12:29:33 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:

          Made the signatures of wstring members and wstring
          parameters in constructor signature agree for the
          generated TAO_ServerRequest_Info subclasses. Thanks to
          Johnny Willemsen <johnny.willemsen@meco.nl> for reporting
          this bug.

Sat Oct 28 17:55:29 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORBInitializer_Registry.cpp:
          Fixed warnings in builds with native exceptions enabled.

Sat Oct 28 15:38:40 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Event/Event.dsw:
        * orbsvcs/tests/Event/Performance/ECPerformance.dsw:
        * performance-tests/TAO_Perf_Tests.dsw:
        * performance-tests/Callback/client.dsp:
        * performance-tests/Callback/server.dsp:
          Add all new projects to their workspaces, and configure them
          properly.

Sat Oct 28 15:27:12 2000  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Callback/Callback_i.h:
        * performance-tests/Callback/Server_i.cpp:
          Fixed throw specs

Fri Oct 27 15:54:37 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Event/Performance/Makefile:
        * orbsvcs/tests/Event/Performance/Latency.h:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency.dsp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.dsp:
        * orbsvcs/tests/Event/Performance/latency.conf:
          New performance benchmark to measure throughput to a remote
          event service.
          This version uses reliable oneways to improve the predictability
          of the test over the network.

        * orbsvcs/tests/Event/lib/Makefile:
        * orbsvcs/tests/Event/lib/Driver.h:
        * orbsvcs/tests/Event/lib/Driver.cpp:
        * orbsvcs/tests/Event/Basic/Makefile:
          When using the old event channel we must link the naming service
          library too.

        * performance-tests/Makefile:
        * performance-tests/Callback/Makefile:
        * performance-tests/Callback/Callback.dsw:
        * performance-tests/Callback/README:
        * performance-tests/Callback/run_test.pl:
        * performance-tests/Callback/callback.idl:
        * performance-tests/Callback/Callback_i.h:
        * performance-tests/Callback/Callback_i.inl:
        * performance-tests/Callback/Callback_i.cpp:
        * performance-tests/Callback/Server_i.h:
        * performance-tests/Callback/Server_i.inl:
        * performance-tests/Callback/Server_i.cpp:
        * performance-tests/Callback/client.cpp:
        * performance-tests/Callback/client.dsp:
        * performance-tests/Callback/server.cpp:
        * performance-tests/Callback/server.dsp:
        * performance-tests/Callback/svc.conf:
          New benchmark for distributed callbacks.  Mostly used as a
          baseline performance benchmark for the event services.

        * performance-tests/Latency/st_client.cpp:
          Use the new ACE_Sample_History class

        * orbsvcs/Event_Service/Event_Service.cpp:
          Implement new options to dump the IOR and process ID to some
          file.

Fri Oct 27 15:49:55 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Object.cpp (_set_policy_overrides):
          Made the function exception safe by placing the TAO_Stub into
          the auto_ptr since it is dynamically allocated.
          Thanks to Ossama.

Fri Oct 27 11:42:34 2000  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/examples/CosEC/Factory/CosEventChannelFactory_i.cpp:
        * orbsvcs/examples/CosEC/Factory/main.cpp:
          Fixed initialization of the Factory example.  The default
          factory must be manually registered with the Service
          Configurator because we avoid static constructors in ACE+TAO.

        * orbsvcs/orbsvcs/CosEvent/CEC_EventChannel.cpp:
          Use ACE_ASSERT to stop early if the factory pointer is null.
          Thanks to Sandro Doro <doro.s@flashnet.it> for suggesting these
          fixes.

Fri Oct 27 08:56:43 2000  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/Sequence_T.cpp:
        * tao/Sequence_T.i:

          Moved the allocbuf() methods from the .i to the .cpp for
          TAO_Bounded_Array_Sequence and TAO_Unbounded_Array_Sequence
          templates.  They cause SunWorkshop 4.2 grief during compiles
          because the compiler couldn't find a definition for one of the
          template parameters.  Moving it into .cpp got the compiler
          unconfused.  This is a workaround for the SunCC 4.2 Compiler
          patch level 104631-07.

Fri Oct 27 00:28:03 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * examples/POA/Forwarding/run_test.pl (run_test): Added a missing
          print statement.

        * examples/POA/Forwarding/client.cpp (main):
        * examples/POA/Forwarding/server.cpp:
        * examples/POA/Forwarding/Servant_Activator.cpp:

          Fixed the use of TAO_ENV_ARG_DECL and ACE_CHECK.  These errors
          were there never found on NT because of the presence of native
          exception handling.

Thu Oct 26 13:58:42 2000  Pradeep Gore  <pradeep@cs.wustl.edu>

        * orbsvcs/examples/Notify/Filter/Filter.cpp:
          Reverted some code that had been inadvertently commented for
          debugging purposes.

Wed Oct 25 20:59:45 2000  Darrell Brunsch <brunsch@uci.edu>

        * tao/PortableServer/POA.cpp:

          Changed the "Invalid Implementation Repository IOR..."
          message to "Missing ImR IOR, will not use the ImR", so
          now it doesn't sound like an error, and also bumped
          up its debug level to >1, so it will not show up unless
          you want a lot of info. This was reported by ChenXu
          <chenxu_xjtu@263.net> a while back, and several others
          tripped over it.  [Bug 694]

Wed Oct 25 10:16:38 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORBInitializer_Registry.cpp:
          Add missing #include for platforms that don't define
          ACE_TEMPLATES_REQUIRE_SOURCE.

Wed Oct 25 08:23:34 2000  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Cubit/TAO/MT_Cubit/Globals.h

          Modified the SCHED_PRIORITY macro for HPUX only.  The original
          priority was above the maximum and would cause a run-time failure.

Wed Oct 25 00:32:59 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer: POA::reference_to_servant() was missing the
          WrongAdapter exception in the throw spec.  Thanks to Marina (and
          the Borland compiler) for pointing this out.  Following files
          needed the change:

          - POA.cpp
          - POA.h
          - PortableServer.pidl
          - PortableServerC.h

Tue Oct 24 23:40:33 2000  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/Object_Adapter.h (TAO_Object_Adapter):

          - Two essential changes were required while preparing for
          servant upcalls: (a) Increasing <poa->outstanding_requests_> now
          happens before we start looking for the servant.  This change is
          necessary because otherwise a servant manager may decide to
          shutdown the ORB or destroy the calling POA.  This change makes
          sure that POA/Object_Adapter are not destroyed before the upcall
          cycle completes.  Now poa_cleanup() is called every time
          <poa->outstanding_requests_> is increased.

          The other change is to check if a non-servant upcall is in
          progress after calling the servant and before changing the
          POA/servant related reference counts.  If a non-servant upcall
          is in progress, wait for it to complete; unless of course, the
          thread making the non-servant upcall is this thread.

          - Non_Servant_Upcall now knows for which POA it was setup.  This
          change allows the prevention of the destruction of the calling
          POA while the non-servant upcall is in progress.  Now at the end
          of the non-servant upcall, we check if the POA needs to be
          cleaned up.

          - non_servant_upcall_in_progress() now returns a pointer to the
          non-servant upcall in progress.  If no non-servant upcall is in
          progress, this pointer is zero.

        * tao/PortableServer/POA:

          - (complete_destruction_i): Mark that we are no longer awaiting
          destruction.  This helps avoid infinite calls to
          complete_destruction_i() when using Non_Servant_Upcall while
          cleaning up the adapter activator, servant activator, servant
          locator and the default servant.

          - (destroy_i): Only call complete_destruction_i() if there are
          no outstanding requests and that we are not in a non-servant
          upcall or if we are in a non-servant upcall, make sure we are
          the POA related to the non-servant upcall.

        * tao/PortableServer/POA.i (TAO_POA_Guard): Waiting for
          non-servant upcalls to complete must happen before the POA state
          is checked.

        * tao: <TAO_Default_Resource_Factory::parser_names> should be char
          * and not const char *.  You could make it char * const but not
          const char *. Changes were required to:

          - tao/Parser_Registry.cpp
          - tao/Resource_Factory.cpp
          - tao/Resource_Factory.h
          - tao/default_resource.cpp
          - tao/default_resource.h

          Also, the memory managment for <parser_names> needed fixing.
          <parser_names> needed to be deleted.  The elements of
          <parser_names> needed to be initialized, consistently duplicated
          and eventually freed.

        * tao/Adapter.cpp (close): The destruction of the individual
          adapters was missing.  Plus the adapter destruction was
          happening in close().  It should really happen in the destructor
          because close() is too early to destroy the adapters since
          upcalls may still be in progress when ORB::shutdown() is called
          which will call close().

        * tao/Exception: Made the _info() method virtual in the Exception
          class and added an implementation for the UserException and
          SystemException.  This also removed the requirement to upcast in
          the CORBA_Exception::_info() method.

        * examples/POA/Forwarding: Revamped and simplified this example.
          Removed the POA approach for forwarding since it is not
          standard.  Also, changed the example to use the servant
          activator instead of the servant locator since the activator is
          more appropriate here.

Tue Oct 24 13:36:05 2000  Ossama Othman  <ossama@uci.edu>

        * tao/PolicyFactory_Registry.h:

          Removed the local ITERATOR typedef.  It confused brain-damaged
          g++ 2.7.x.

        * tao/PolicyFactory_Registry.cpp (~TAO_PolicyFactory_Registry):

          Use the ACE_Map_Manager<>::ITERATOR trait instead of the now
          removed typedef local to this class.

Tue Oct 24 11:18:01 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Typecode.cpp :
          Made the code a little bit cleaner by moving code that is
          similar for all the cases in the switch-case block of
          private_member_name outside the block.

Tue Oct 24 07:38:45 2000  Chad Elliott  <elliott_c@ociweb.com>

        * examples/Simulator/Event_Supplier/Event_Sup.cpp
        * examples/Simulator/Event_Supplier/Logging_Sup.cpp
        * examples/Simulator/Event_Supplier/DualEC_Sup.cpp
        * examples/Simulator/Event_Supplier/Event_Con.cpp

          Move the include of <limits.h> below the includes for TAO.  HP-UX
          needs the _HPUX_SOURCE macro defined before the inclusion of
          <sys/stdsyms.h> to get the proper prototypes.  limits.h includes
          <sys/stdsyms.h>, but the HP config header in ACE sets the macro.
          So, include limits.h after the ace config header.

Mon Oct 23 21:39:22 2000  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.cpp (ORB_init):

          Fixed a typo where TAO_HAS_RTCORBA was used instead of
          TAO_HAS_RT_CORBA.  This typo prevented the RT CORBA ORB
          initializer from being registered, which in turn prevented the
          RT CORBA policy factories from being registered.  This fixes a
          seg fault.

        * tao/Stub.cpp (~TAO_Stub):

          Fixed a typo where TAO_HAS_RTCORBA was used instead of
          TAO_HAS_RT_CORBA.  This fixes a problem where the destroy()
          method in each RT policy was not being called.

          Make sure the pointer to the policy is valid before invoking the
          destroy() method through it.  This fixes a seg fault.

        * tao/Profile.cpp (policies):

          Made this code exception safe by using a Policy_var.

Mon Oct 23 19:13:54 2000  Ossama Othman  <ossama@uci.edu>

        * tao/DomainC.cpp:

          Corrected the last of the references to TAO_ClientRequest_Info.
          That class has been renamed to TAO_ClientRequestInfo.

Mon Oct 23 18:07:01 2000  Carlos O'Ryan  <coryan@uci.edu>

        * Once more, recompute dependencies YET ANOTHER TIME.  IMnsHO the
          project is growing too big to keep the dependencies in the repo.

Mon Oct 23 15:59:53 2000  Ossama Othman  <ossama@uci.edu>

        * tao/ORBInitInfo.cpp
          (add_client_request_interceptor, add_server_request_interceptor):

          Only enable the request interceptor registration code if
          TAO_HAS_INTERCEPTORS is set to 1, otherwise throw a
          CORBA::NO_IMPLEMENT().

Mon Oct 23 15:23:03 2000  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptorC.h:

          Explicitly include `CurrentC.h' and `IOPC.h' to pull in the
          CORBA::Current and IOP class declarations, respectively.  This
          fixes a minimum CORBA build problem.  Thanks to Priyanka for
          pointing this out.

Mon Oct 23 15:07:38 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableInterceptorC.h:
          Added a TAO_HAS_CORBA_MESSAGING macro around
          virtual Messaging::SyncScope sync_scope for the minimum corba
          build.

Mon Oct 23 14:58:34 2000  Ossama Othman  <ossama@uci.edu>

        * tao/Messaging_PolicyFactory.cpp (create_policy):
        * tao/ORBInitInfo.cpp
          (register_initial_reference, add_ior_interceptor):

          Fixed unused argument warnings.

Mon Oct 23 14:46:57 2000  Ossama Othman  <ossama@uci.edu>

        * tao/DomainC.cpp:
        * tao/corba.h:

          Always include `tao/PortableInterceptor.h' to pull in the
          "TAO_INTERCEPTOR" macros.  The classes in that header are
          protected within a "TAO_HAS_INTERCEPTORS" block so there
          should be no problem in always including this header.  This
          fixes a minimum CORBA build.  Thanks to Priyanka for pointing
          this out.

Mon Oct 23 12:58:27 2000  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/DomainS.cpp:

          Additional typo fixes that I missed since I didn't have support
          for the interface repository enabled.  The problems only
          appeared when that support was enabled.  Once again, Jeff comes
          to the rescue!

Mon Oct 23 12:31:00 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Makefile:
          Updated dependencies.

Mon Oct 23 14:32:14 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Removed the generated ACE_CHECK following two function
          calls that no longer use ACE_TRY_ENV.

Mon Oct 23 12:19:31 2000  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/DomainS.cpp:

          Fixed call to deprecated _get_server_interceptor() method, and
          removed unnecessary ACE_CHECK macros.  Thanks again to Jeff for
          pointing this out.

Mon Oct 23 11:51:41 2000  Ossama Othman  <ossama@uci.edu>

        * tao/DomainC.h:

          Corrected typo where the name of the ClientRequestInfo base
          class was not updated to the new name.  Thanks to Jeff for
          pointing this out.

Mon Oct 23 02:49:25 2000  Ossama Othman  <ossama@uci.edu>

        * tao/Interceptor_List.h:
        * tao/Interceptor_List.inl:
        * tao/Interceptor_List.cpp:

          Newly added sources for the containers of all supported
          interceptor types.

        * tao/ORBInitInfo.h:
        * tao/ORBInitInfo.cpp:

          Newly added implementation of the
          PortableInterceptor::ORBInitInfo object.

        * tao/ORBInitializer_Registry.h:
        * tao/ORBInitializer_Registry.inl:
        * tao/ORBInitializer_Registry.cpp:

          New sources for global registry of all registered ORB
          initializers.  The ORB core invokes methods (pre_init and
          post_init) on this class.  This class then invokes the same
          method on all registered ORB initializers.

        * tao/RT_ORBInitializer.h:
        * tao/RT_ORBInitializer.cpp:
        * tao/Messaging_ORBInitializer.h:
        * tao/Messaging_ORBInitializer.cpp:

          Newly added files containing the ORBInitializers related to
          TAO's RTCORBA and Messaging support.

        * tao/ORB.h:
        * tao/ORB.i:

          Removed all interceptor related code.  They should have been in
          the TAO_ORB_Core class since code in these files is related
          predominantly to ORB pseudo-references, not the actual ORB
          implementation (i.e. the ORB core).

        * tao/ORB.cpp (ORB_init):

          Create a PortableInterceptor::ORBInitInfo object to be passed on
          to ORBInitializers.

          Invoke the pre_init() method on all registered ORB initializers
          before calling TAO_ORB_Core::init() method, and then the
          post_init() method on those same ORB initializers after
          TAO_ORB_Core::init() has been invoked.

          (create_policy):

          Attempt to obtain the policy of the given type from the policy
          factory registry rather than the now deprecated
          TAO_Service_Callbacks::service_create_policy() method.  The
          TAO_Service_Callbacks::service_create_policy() is still invoked
          from within the policy factory registry to ease the transition
          of the FT service code to the standard portable interceptor
          interface.

        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/ORB_Core.cpp:

          Added support routines for registering and obtaining the
          interceptors, and a support routine for registering policy
          factories specific to the given ORB.

        * tao/PortableInterceptor.h:
        * tao/PortableInterceptor.cpp:

          Integrated support for multiple interceptors.  Each registered
          interceptor will now be invoked, as opposed to the single
          interceptor previously supported.

        * tao/Service_Callbacks.h:
        * tao/Service_Callbacks.cpp (service_create_policy):

          Added comments regarding deprecation of this method in favor of
          the policy factory registry support provided by the Portable
          Interceptor specification.  This method is still fully
          functional.

        * tao/PolicyFactory_Registry.h:
        * tao/PolicyFactory_Registry.cpp:

          Newly added registry containing map of policy type to policy
          factory.

        * tao/RT_PolicyFactory.h:
        * tao/RT_PolicyFactory.cpp:
        * tao/Messaging_PolicyFactory.h:
        * tao/Messaging_PolicyFactory.cpp:

          Newly added policy factory sources for real-time CORBA and
          Messaging related policies.

        * tao/Policy_Factory.h:
        * tao/Policy_Factory.cpp:

          Removed these files.  They have been superseded by the newly
          added RT_PolicyFactory.* files.

        * tao/Profile.cpp (policies):

          Updated this code to use the standard ORB::create_policy ()
          method which now queries the newly added policy factory
          registry.

        * tao/Request_Info.h:
        * tao/Request_Info.cpp:

          Deprecated these files.  They have been split into client side
          and server side files.

        * tao/ClientRequestInfo.h:
        * tao/ClientRequestInfo.cpp:

          New files based on the client side request information class
          from Request_Info.*.

          (get_request_policy):
          Implemented this method.  Obtain the policies in effect by
          invoking CORBA::Object::_get_policy().

        * tao/DomainC.h:
        * tao/DomainC.cpp:
        * tao/PortableServer/DomainS.h:
        * tao/PortableServer/DomainS.cpp:

          Updated interceptor code to work with the updates in
          `tao/PortableInterceptor.{h,i}'.

        * tao/PortableServer/ServerRequestInfo.h:
        * tao/PortableServer/ServerRequestInfo.cpp:

          New files based on the server side request information class
          from Request_Info.*.

        * tao/Interceptor.pidl:

          This PIDL source file has been superceded by
          Portable_Interceptor.pidl.  Removed.

        * tao/corba.h:

          Explicitly include the appropriate interceptor RequestInfo
          headers when interceptor support is enabled.  Previously they
          were pulled in indirectly.  This was necessary to due to an
          inter-header depencency improvement in PortableInterceptor.h.

          Include "tao/OctetSeqC.h" to pull in the CORBA::OctetSeq
          declarations.

        * tao/OctetSeq.pidl:

          Added instructions that describe the "proper" way to regenerate
          the corresponding stubs.

        * tao/OctetSeq.h:
        * tao/OctetSeq.i:
        * tao/OctetSeq.cpp:

          Regenerated these files with the proper library export
          settings.

        * tao/diffs/OcteqSeq.diff:

          Generated this diff against the vanilla generate OctetSeq
          stubs.  It was missing for some reason.

        * tao/StringSeq.pidl:

          Newly added PIDL source for the CORBA::StringSeq sequence.

        * tao/StringSeq.h:
        * tao/StringSeq.inl:
        * tao/StringSeq.cpp:

          Removed these files in favor of the below newly regenerated
          files since these files do not follow TAO naming conventions,
          and since they didn't have the proper Win32 library export
          linkage.

        * tao/StringSeqC.h:
        * tao/StringSeqC.i:
        * tao/StringSeqC.cpp:

          Regenerated these files with the proper library export
          settings.  They replace the above StringSeq.* sources.

        * tao/diffs/StringSeq.diff:

          Generated this diff against the vanilla generated StringSeq
          stubs.

        * tao/PortableInterceptorC.h:

          Corrected signatures for some pure virtual methods.  We actually
          want the CORBA::Environment argument for interfaces that are not
          inherited by application code, e.g. code that is used internally
          by TAO.

        * tao/diffs/PortableInterceptorC.h.diff:
        * tao/diffs/PortableInterceptorC.i.diff:
        * tao/diffs/PortableInterceptorC.cpp.diff:

          Removed these diffs in favor of the consolidated
          PortableInterceptor.diff below.  These diffs were out of date
          anyway.

        * tao/diffs/PortableInterceptor.diff:

          Newly generated diff against the updates made to
          PortableInterceptorC.* to correct erroneous earlier updates.

        * tao/DynamicC.cpp:

          Include `StrinqSeqC.h' instead of `StringSeq.h', in accordance
          with the filenames newly of the regenerated StringSeq stubs.

        * tao/diffs/Dynamic.diff:

          `StringSeq.h' is now `StringSeqC.h'.  Updated the diff to
          reflect that.

        * tao/diffs/InterceptorC.h.diff:
        * tao/diffs/InterceptorC.i.diff:
        * tao/diffs/InterceptorC.cpp.diff:

          Removed these diffs.  The files they were meant to patch are no
          longer exist in TAO.

        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/PortableServer/Makefile:
        * tao/PortableServer/Makefile.bor:
        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:

          Updated references of StringSeq to StringSeqC, corresponding to
          the newly regenerated CORBA::StringSeq stubs.

          Added new Portable Interceptor sources detailed above.

        * TAO_IDL/be/be_visitor_interface/interceptors_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interceptors_sh.cpp:

          Corrected spelling in generated code.

        * TAO_IDL/be/be_visitor_operation/interceptors_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:

          Updated generated code to agree with changes made in the ORB
          Core (e.g. class name changes, etc).

        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp
          (gen_marshal_and_invoke):
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp
          (visit_operation):

          Updated to call new interceptor related ORB core methods.

        * tests/Portable_Interceptors/Dynamic/interceptors.h:
        * tests/Portable_Interceptors/Dynamic/interceptors.cpp:

          Corrected nesting of pragma directive so that is within the
          "TAO_HAS_INTERCEPTORS" block.

          Moved no-op methods within the "TAO_HAS_INTERCEPTORS" block.
          This fixes a compilation error recently introduced when
          TAO_HAS_INTERCEPTORS is defined to be zero.

          Corrected all CORBA::Environment arguments so that they
          correctly match the base class methods they are overriding in
          both the native and emulated exception case.

        * tests/Portable_Interceptors/Dynamic/Echo_Client_ORBInitializer.h:
        * tests/Portable_Interceptors/Dynamic/Echo_Client_ORBInitializer.cpp:
        * tests/Portable_Interceptors/Dynamic/Echo_Server_ORBInitializer.h:
        * tests/Portable_Interceptors/Dynamic/Echo_Server_ORBInitializer.cpp:

          New sources that register the request interceptors in the
          standard way.  Previous this test used a proprietary interface.
          That proprietary interface was removed in the above sets of
          updates.

        * tests/Portable_Interceptors/Dynamic/client.cpp:
        * tests/Portable_Interceptors/Dynamic/server.cpp:

          Updated to register the above ORBInitializers instead of making
          proprietary registration calls (that no longer exist).

        * tests/Portable_Interceptors/Dynamic/PI_Dynamic.dsw:
        * tests/Portable_Interceptors/Dynamic/client.dsp:
        * tests/Portable_Interceptors/Dynamic/server.dsp:

          New MSVC workspace and project files for this test.

        * tests/Portable_Interceptors/Dynamic/Makefile:
        * tests/Portable_Interceptors/Dynamic/server.bor:
        * tests/Portable_Interceptors/Dynamic/client.bor:

          Updated these Makefiles with the newly added ORBInitializer
          sources.

Sat Oct 21 18:38:44 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ConstantDef_i.cpp:

          Changed a use of auto_ptr<> to use of
          ACE_Auto_Basic_Ptr<>, to get rid of a Win32 build
          warning.

Sat Oct 21 12:50:36 2000  Carlos O'Ryan  <coryan@uci.edu>

        * Makefile*:
          Updated dependencies.

Sat Oct 21 02:02:05 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/RTCORBA/Server_Declared/README:

          Updated command-line options, description and expected output.

Fri Oct 20 21:54:58 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/default_client.cpp: Fixed a cut and paste error.

Fri Oct 20 12:01:42 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Exception.cpp:
          Changed the return value of
          tao_insert_in_extractor_system_exception from
          CORBA::SystemException * to CORBA::Boolean.

Fri Oct 20 12:01:08 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Makefile.am :
        * tao/Makefile.bor:
          Updated to add the new files.

Fri Oct 20 10:49:30 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Exception.cpp:
          Fixed use of allocator in Exception extraction functions.

        * tao/PortableInterceptorC.h:
        * tao/Request_Info.h:
        * tao/Request_Info.cpp:
        * tao/PortableInterceptor.i:
          Fixed so it would compile in platforms with exceptions enabled.

        * tao/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:

Fri Oct 20 07:55:22 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/TCF_Loader.cpp:

          Removed the output of the text 'will it compile now',
          inserted by someone for debugging purposes.

Fri Oct 20 02:45:20 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/PortableServer/POA.h
        * tao/PortableServer/POA.cpp:

          Added proper #if RTCORBA protections.

        * tao/PortableServer/Makefile:

          Updated dependencies.

        * tests/RTCORBA/Server_Declared/run_test.pl:

          Fixed server arguments for unix.

Fri Oct 20 02:05:09 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/PortableServer/POA.h
        * tao/PortableServer/POA.i
        * tao/PortableServer/POA.cpp:

          - Changed <activate_object>, <activate_object_with_id>,
            <create_reference>, <create_reference_with_id> to use POA's
            server_priority rather than -1.  This ensures that
            servant/object's effective priority is stored right with it.

          - Added TAO_ORB_Core &orb_core_ member to TAO_POA_Policies.

          - Added RTCORBA::PriorityModelPolicy validation during POA
            creation (i.e., <validate_priority_model>)

          - Added RTCORBA::ServerProtocolPolicy validation during POA
            creation (i.e., <validate_server_protocol>)

          - Removed <validate_client_protocol> method because this policy
            doesn't need to be validated.

          - Added CORBA::Environment argument to <validity_check>, because
            different exception may need to be thrown based on which
            policies cause the problem.

          - Added validation logic to <valid_priority> method.

          - Invoke <valid_priority> only in <activate*> methods, in
            <create_reference*> methods this check happens when filter
            populates mprofile.

        * tao/ORB_Core.cpp (create_stub_object):

          Throw CORBA::BAD_PARAM if mprofile ends up being empty.  This
          may happen when none of the acceptor endpoints have the right
          priority for the object we are creating.

        * tao/ORB_Core.h:

          Make <open> method public.  It needs to be invoked from POA
          during policy validation procedures.

        * tests/RTCORBA/Server_Declared/run_test.pl:

          Fixed typo.

        * tests/RTCORBA/Server_Declared/server.cpp:

          Set id_uniqueness policy on the child poa to <MULTIPLE_ID>,
          in order to use the same servant for several objects.

Thu Oct 19 17:33:35 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORB_Core.cpp:
          Fixed default svc conf directives for the POA and the IORTable.
          Thanks to James Megquier <jmegq@bbn.com> for sending the
          patches.

        * tao/GIOP_Message_Acceptors.cpp:
          Remove obsolete comments.

Thu Oct 19 15:42:13 2000  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Add new files to the MSVC projects.

Thu Oct 19 14:30:59 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/DynamicC.i:
        * tao/DynamicC.h:
        * tao/DynamicC.cpp:
        * tao/PortableInterceptorC.i:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h :
          Regenerated so that they are properly locality constrained.
          This reduces the footprint.

        * tao/Dynamic.pidl:
        * tao/PortableInterceptor.pidl:
          Corrected idl typedefs to match the spec.

        * tao/orb.idl:
        * tao/corbafwd.h:
        * tao/corba.h:
        * tao/StringSeq.inl:
        * tao/StringSeq.h:
        * tao/StringSeq.cpp:
        * tao/Request_Info.h:
          Updates necessary to make the code work with the corrected pidl
          and the newly generated locality constrained stubs.

        Thanks to Ossama for helping with these changes.

        * tao/OctetSeq.pidl:
        * tao/OctetSeqC.i:
        * tao/OctetSeqC.h:
        * tao/OctetSeqC.cpp:
          Added the new pidl file for Octet Sequence and generated stubs.

        * tao/Makefile:
          Added the new files to the Makefile.

        * tao/diffs/Dynamic.diff:
        * tao/diffs/PortableInterceptorC.i.diff:
        * tao/diffs/PortableInterceptorC.h.diff:
        * tao/diffs/PortableInterceptorC.cpp.diff:
          Generated the diffs.

        * tests/Portable_Interceptors/Dynamic/interceptors.cpp:
        * tests/Portable_Interceptors/Dynamic/interceptors.h :
        * tests/Portable_Interceptors/Benchmark/interceptors.cpp:
        * tests/Portable_Interceptors/Benchmark/interceptors.h :
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.h :
          Added dummy virtual functions to get the code compiled.

Thu Oct 19 11:54:03 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:

          In code recently added to these files, replaced calls
          to be_predefined_type::base_type with
          be_predefined_type::primitive_base_type, to allow for
          a chain of typedefs in the IDL file. Thanks to
          J. Russell Noseworthy <rnosewor@objectsciences.com> for
          pointing out this bug.

Thu Oct 19 11:31:39 2000  Paul Calabrese  <calabrese_p@ociweb.com>

        * orbsvcs/LifeCycle_Service/Makefile:

          Allow the LifeCycle_Service server to be built by moving
          the block checking for minimum_corba down below
          the includes that define it.

Wed Oct 18 20:26:55 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/PortableServer/POA.cpp
        * tao/PortableServer/POA.h
        * tao/PortableServer/POA.i:

          - Added TAO_PriorityBandedConnectionsPolicy data member to
          TAO_POA_Policies.  We need to keep track of this policy
          separately so that we can perform error checking and use it in
          acceptor filters.

          - Added <make_filter> method to TAO_POA_Policies.  It creates
          an appropriate acceptor filter based on POA's policies.

          - Added <acceptor_filter_> data member to TAO_POA.  Rather than
          allocating new acceptor filter in each <key_to_stub_i> call, an
          appropriate filter is allocated once, during POA creation, and
          reused.

        * tao/PortableServer/Default_Acceptor_Filter.h
        * tao/PortableServer/RT_Acceptor_Filters.cpp
        * tao/PortableServer/RT_Acceptor_Filters.h
        * tao/PortableServer/RT_Acceptor_Filters.i:

          Moved Acceptor_Filter classes from POA.cpp into their own file.
          Added two new filters to deal with
          RTCORBA::PriorityBandedConnectionPolicy and
          RTCORBA::SERVER_DECLARED priority model.

        * tao/PortableServer/Makefile
        * tao/PortableServer/Makefile.bor:
        * tao/PortableServer/TAO_PortableServer.dsp
        * tao/PortableServer/TAO_PortableServer_Static.dsp

          Updated to include new filter files.

        * tests/RTCORBA/RTCORBA_tests.dsw:

          Added MT_Client_Protocol_Priority.dsw projects.

Wed Oct 18 10:20:10 2000  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/Exception.cpp (TAO_SYSTEM_EXCEPTION):
          Added helper functions for the insertion and extraction
          operators. This would help reduce the Foot Print since instead
          of the same code repeated for each of the 30 or so exceptions,
          there will be 30 or so invocations of these helper methods.

Wed Oct 18 10:49:59 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Had to put back the context substate and the set/unset
          code removed in the checkin below. It's necessary to
          keep the ACE_NESTED_CLASS macro from being generated
          in skeleton code for portable interceptors.

Tue Oct 17 16:08:13 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_arglist.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Replaced the several checks for the necessity of using
          the ACE_NESTED_CLASS macro in portable interceptor
          generated code with a single check: whether or not the
          scope of the declaration of the argument type in question
          is the same the scope of the visitor's context. This change
          also eliminates the need for the extra context sub-state
          added recently, so that was removed, along with the code to
          set and unset it. Thanks to Francois Bernier
          <fbernier@gel.ulaval.ca> for reporting the bug that led to
          these changes.

Tue Oct 17 01:13:25 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/RTCORBA/MT_Client_Protocol_Priority/Makefile
        * tests/RTCORBA/MT_Client_Protocol_Priority/Makefile.bor
        * tests/RTCORBA/MT_Client_Protocol_Priority/README
        * tests/RTCORBA/MT_Client_Protocol_Priority/MT_Client_Protocol_Priority.dsw
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.bor
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.cpp
        * tests/RTCORBA/MT_Client_Protocol_Priority/client.dsp
        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.bor
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.conf
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.cpp
        * tests/RTCORBA/MT_Client_Protocol_Priority/server.dsp
        * tests/RTCORBA/MT_Client_Protocol_Priority/test.idl

          Added new RTCORBA multithreaded test.  Several client threads of
          different priority and different ClientProtocolPolicy
          Current-level overrides concurrently make invocations on one
          object reference, which has a CLIENT_PROPAGATED priority model.

        * tests/RTCORBA/Makefile
        * tests/RTCORBA/Makefile.bor
        * tests/RTCORBA/README:

          Updated to include the new MT_Client_Protocol_Priority test.

Mon Oct 16 18:54:22 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_predefined_type.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_string.cpp:
        * TAO_IDL/include/ast_decl.h:

          Added boolean member to AST_Decl indicating
          whether or not the IDL type is anonymous. Also
          added accessor method, and an optional argument in
          the constructor. Finally, extra arguments were added
          to the call to the AST_Decl constructor for the supported
          node types which are anonymous (array, primitive type,
          string, wstring, and sequence).

Mon Oct 16 16:15:15 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/Pluggable.cpp
        * tao/Endpoint.i

          Initialize <priority> member to -1.  Since legal CORBA::Priority
          values start at 0, -1 is a good indicator that priority hasn't
          been set.

        * tao/Pool_Per_Endpoint.cpp (run):

          Throw DATA_CONVERSION exception if conversion from CORBA to
          native priority fails.

        * tests/RTCORBA/RTCORBA_tests.dsw:

          Added Server_Declared projects.

Mon Oct 16 15:38:06 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/RTCORBA/Server_Declared/Makefile
        * tests/RTCORBA/Server_Declared/Makefile.bor
        * tests/RTCORBA/Server_Declared/README
        * tests/RTCORBA/Server_Declared/Server_Declared.dsw
        * tests/RTCORBA/Server_Declared/client.bor
        * tests/RTCORBA/Server_Declared/client.cpp
        * tests/RTCORBA/Server_Declared/client.dsp
        * tests/RTCORBA/Server_Declared/run_test.pl
        * tests/RTCORBA/Server_Declared/server.bor
        * tests/RTCORBA/Server_Declared/server.conf
        * tests/RTCORBA/Server_Declared/server.cpp
        * tests/RTCORBA/Server_Declared/server.dsp
        * tests/RTCORBA/Server_Declared/test.idl

          Added a test for SERVER_DECLARED priority model.

        * tests/RTCORBA/Makefile
        * tests/RTCORBA/Makefile.bor
        * tests/RTCORBA/README:

          Updated to include the new Server_Declared test.

Mon Oct 16 14:14:21 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/be/be_enum.cpp:
        * TAO_IDL/be_include/be_enum.h:
        * TAO_IDL/include/ast_enum.h:

          Moved the method value_to_name() from be_enum to
          AST_Enum. The method is useful to visitors, so it
          needs to be available to visitors of AST_<node>
          as well as to visitors of be_<node>.

Sun Oct 15 18:58:16 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/RTCORBA/Client_Protocol/README:

          Added expected output.

        * tests/RTCORBA/Client_Protocol/client.cpp:

          Updated comment.

        * tests/RTCORBA/Client_Protocol/server.cpp:

          Set transport and orb protocol properties in the
          ClientProtocolPolicy to be non-nil.  This is a temporary change
          to make the test work until policy streaming code is fixed to
          handle nil properties.

Sun Oct 15 00:11:07 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/Profile.h
        * tao/Profile.cpp:

          Removed <reset_hint> and <addr_to_string> methods from
          TAO_Unknown_Profile since they were removed from TAO_Profile.

        * tao/Connector_Registry.cpp
        * tao/Invocation_Endpoint_Selectors.cpp:

          Added logic for handling TAO_Unknown_Profile(s), i.e., protocols
          the ORB does not understand, during profile selection and
          connection establishment.  When the ORB encounters an unknown
          profile, it transparently retries with the next appropriate one.
          (Handling unknown protocols worked in the past, but was broken
          with the introduction of Endpoint component to the PP framework.
          This change restores the functionality.)

        * tao/Invocation.cpp:

          Added comment.

Sat Oct 14 19:49:39 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/tests/RTCORBA/Client_Protocol/server.cpp:

          Fixed copy/paste error.

Sat Oct 14 17:15:13 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_argument.cpp:
        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_enum_val.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_native.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_type.cpp:
        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/ast/ast_union_label.cpp:
        * TAO_IDL/include/ast.h:
        * TAO_IDL/include/ast_argument.h:
        * TAO_IDL/include/ast_array.h:
        * TAO_IDL/include/ast_attribute.h:
        * TAO_IDL/include/ast_constant.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_enum.h:
        * TAO_IDL/include/ast_enum_val.h:
        * TAO_IDL/include/ast_exception.h:
        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/include/ast_field.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_interface_fwd.h:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_native.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/include/ast_predefined_type.h:
        * TAO_IDL/include/ast_root.h:
        * TAO_IDL/include/ast_sequence.h:
        * TAO_IDL/include/ast_string.h:
        * TAO_IDL/include/ast_structure.h:
        * TAO_IDL/include/ast_type.h:
        * TAO_IDL/include/ast_typedef.h:
        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_union_branch.h:
        * TAO_IDL/include/ast_union_label.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_scope.cpp:

          Renamed the recently added accept() method as ast_accept().
          Some compilers were confused by the accept() method in the
          be_<node> classes, even though it has a different signature.

Sat Oct 14 16:46:48 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/Invocation_Endpoint_Selectors.i:

          Added missing #if RTCORBA protection.  This fixes minimum CORBA
          build problems.

        * tao/ORB_Core.cpp (~TAO_ORB_Core):

          Fixed the scope of #if protection.

        * tao/Invocation_Endpoint_Selectors.cpp (get_selector):

          Fixed unused arg warning.

Sat Oct 14 00:09:48 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/Policies/Manipulation.cpp:

          Removed TAO::ClientPriorityPolicy from the test since it is
          disabled by default.

        * tests/Endpoint_Per_Priority/client.cpp
        * tests/Endpoint_Per_Priority/server.cpp
        * performance-tests/RTCORBA/Multiple_Endpoints/Endpoint_Per_Priority/client.cpp
        * performance-tests/RTCORBA/Multiple_Endpoints/Endpoint_Per_Priority/server.cpp:
        * tests/RTCORBA/Client_Propagated/client.cpp
        * tests/RTCORBA/Client_Propagated/server.cpp
        * tests/RTCORBA/Client_Protocol/client.cpp
        * tests/RTCORBA/Client_Protocol/server.cpp
        * tests/RTCORBA/Server_Protocol/client.cpp
        * tests/RTCORBA/Server_Protocol/server.cpp:

          Took care of unused arguments warnings (in the second <main>).

Fri Oct 13 21:35:52 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/RTCORBA/RTCORBA_tests.dsw
        * tests/RTCORBA/Makefile.bor
        * tests/RTCORBA/Makefile:
        * tests/RTCORBA/README:

          Added Client_Protocol test.

        * tests/RTCORBA/Client_Protocol/Makefile:

          Generated dependencies.

        * tests/RTCORBA/Client_Protocol/run_test.pl
        * tests/RTCORBA/Client_Protocol/README:

          Updated.

        * tests/RTCORBA/Client_Protocol/client.cpp
        * tests/RTCORBA/Client_Protocol/server.cpp:

          Fixed compile warnings/errors.

        * tests/RTCORBA/Client_Protocol/server.dsp
        * tests/RTCORBA/Client_Protocol/client.dsp:

          Changed project names.

        * tao/IIOP_Connector.cpp (connect)
        * tao/UIOP_Connector.cpp (connect)
        * tao/SHMIOP_Connector.cpp (connect)
        * tao/orbsvcs/orbsvcs/SSLIOP_Connector.cpp (connect)
        * tao/Connector_Registry.cpp (connect):

          Added debugging message.

        * tests/Endpoint_Per_Priority/client.cpp
        * tests/Endpoint_Per_Priority/server.cpp
        * performance-tests/RTCORBA/Multiple_Endpoints/Endpoint_Per_Priority/client.cpp
        * performance-tests/RTCORBA/Multiple_Endpoints/Endpoint_Per_Priority/server.cpp:

          Compile tests only if TAO::ClientPriorityPolicy is enabled.

Fri Oct 13 20:03:01 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tests/RTCORBA/Client_Protocol/Client_Protocol.dsw
        * tests/RTCORBA/Client_Protocol/Makefile
        * tests/RTCORBA/Client_Protocol/Makefile.bor
        * tests/RTCORBA/Client_Protocol/README
        * tests/RTCORBA/Client_Protocol/client.bor
        * tests/RTCORBA/Client_Protocol/client.cpp
        * tests/RTCORBA/Client_Protocol/client.dsp
        * tests/RTCORBA/Client_Protocol/run_test.pl
        * tests/RTCORBA/Client_Protocol/server.bor
        * tests/RTCORBA/Client_Protocol/server.cpp
        * tests/RTCORBA/Client_Protocol/server.dsp
        * tests/RTCORBA/Client_Protocol/test.idl:

          Added a test for RTCORBA::ClientProtocolPolicy policy.

Fri Oct 13 18:17:06 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:

          Added missing 'const' to code generation of request
          info class private member declaration for simple
          predefined types.

        * TAO_IDL/include/ast_visitor.h:

          Removed unnecessary #if defined (IDL_HAS_VALUETYPE) guard
          around two pure virtual functions.

Fri Oct 13 14:32:50 2000  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Dynamic/interceptors.cpp
          (receive_exception, send_exception):

          The CORBA::Exception::_info() method return an ACE_CString, not
          a const char *.  Invoked the ACE_CString::c_str() method to
          correct a warning.

Fri Oct 13 13:21:06 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/tao_idl.cpp:

          Added some missing commas in the functions that output
          the FE and BE version. Thanks to Craig Rodrigues
          <rodrigc@mediaone.net> for pointing this out and
          supplying a patch.

Fri Oct 13 11:27:03 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:

          Added a check for an imported node along with all the
          other checks that are there to decide whether to
          generate the ACE_NESTED_CLASS macro or not for the
          members of the request info subclasses constructor signature
          and private member declaration. If the member is imported,
          the full scoped name should be generated on all platforms.
          Thanks to Base V Paul <basev@wiproge.med.ge.com> for
          reporting this bug.

          While I was there, I added the above decision branch to
          all the other applicable data types. It had been added
          piecemeal up to now, as bugs were reported.

Fri Oct 13 10:06:03 2000  Jeff Parsons  <parsons@cs.wustl.edu>

        * TAO_IDL/include/ast_visitor.h:
        * TAO_IDL/ast/ast_visitor.cpp:

          New files containing the abstract class ast_visitor.
          Anyone writing a pluggable back end for the IDl
          compiler and who wishes to have the visitors
          traverse the AST_<node> classes instead of the
          be_<node> classes can subclass this class.

        * TAO_IDL/Makefile.FE:
        * TAO_IDL/TAO_IDL_FE_DLL.dsp:
        * TAO_IDL/TAO_IDL_FE_LIB.dsp:
        * TAO_IDL/TAI_IDL_FE.bor:
        * TAO_IDL/ast/Makefile.am:

          Added the above new files to the Makefiles and
          to the MSVC projects.

        * TAO_IDL/ast/ast_argument.cpp:
        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/ast/ast_attribute.cpp:
        * TAO_IDL/ast/ast_constant.cpp:
        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_enum_val.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_expression.cpp:
        * TAO_IDL/ast/ast_field.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_interface_fwd.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_native.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_predefined_type.cpp:
        * TAO_IDL/ast/ast_root.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_type.cpp:
        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/ast/ast_union_label.cpp:
        * TAO_IDL/include/ast.h:
        * TAO_IDL/include/ast_argument.h:
        * TAO_IDL/include/ast_array.h:
        * TAO_IDL/include/ast_attribute.h:
        * TAO_IDL/include/ast_constant.h:
        * TAO_IDL/include/ast_decl.h:
        * TAO_IDL/include/ast_enum.h:
        * TAO_IDL/include/ast_enum_val.h:
        * TAO_IDL/include/ast_exception.h:
        * TAO_IDL/include/ast_expression.h:
        * TAO_IDL/include/ast_field.h:
        * TAO_IDL/include/ast_interface.h:
        * TAO_IDL/include/ast_interface_fwd.h:
        * TAO_IDL/include/ast_module.h:
        * TAO_IDL/include/ast_native.h:
        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/include/ast_predefined_type.h:
        * TAO_IDL/include/ast_root.h:
        * TAO_IDL/include/ast_sequence.h:
        * TAO_IDL/include/ast_string.h:
        * TAO_IDL/include/ast_structure.h:
        * TAO_IDL/include/ast_type.h:
        * TAO_IDL/include/ast_typedef.h:
        * TAO_IDL/include/ast_union.h:
        * TAO_IDL/include/ast_union_branch.h:
        * TAO_IDL/include/ast_union_label.h:
        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_scope.cpp:

          Added virtual accept() method to the above classes,
          for use by the AST visitors.

        * TAO_IDL/be/be_argument.cpp:

          Cosmetic changes.

Fri 13 10:07:16 2000  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/Quoter/Quoter_i.cpp: Removed the code to move the
          Quoter object. This code was relying on the proprietary
          TAO_POA::forward_object () method. To implement the move ()
          operation in a standard way, the whole example would have
          needed to be rewritten using a PortableServer::ServantLocator.

        * examples/Quoter/client.cpp: Removed the code for moving
          the Quoter object.

        * examples/Quoter/README: Documented the step described above.

Fri Oct 13 06:28:57 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/IFR_Service/IFR_Service.bor:
          Fixed link problem by adding required libraries.

        * orbsvcs/orbsvcs/FaultTolerance.bor:
        * orbsvcs/orbsvcs/Makefile.bor:
        * orbsvcs/tests/FaultTolerance/*/*.bor:
          Added new makefiles for FaultTolerance library and tests.

        * tests/Collocation/*.bor:
          Changed DLL macros to fix case mismatch.

        * tests/IORManipulation/Makefile.bor:
        * tests/MProfile/client.bor:
          Fixed link problem by adding missing IORManip library.

          Thanks to Christopher Kohlhoff for providing these fixes.

Thu Oct 12 18:14:16 2000  Phillip DiCorpo  <dicorpo@cs.wustl.edu>

        * examples/Advanced/ch_12/client.cpp (operator<<):
        * examples/Advanced/ch_12/server.h:
        * examples/Advanced/ch_12/server.cpp: Added an #if 0 around the
          insertion operator to exceptions. We dont need these as TAO
          provides them already. Also, added the right environment
          variables for preinvoke & postinvoke operations.

        * examples/Advanced/ch_12/Makefile: Added the right libraries for
          linking.

          Thanks to Bala for helping me with this.

Thu Oct 12 14:24:03 2000  Ossama Othman  <ossama@uci.edu>

        * tao/Acceptor_Registry.cpp (open_default, open_i,
          extract_endpoint_version):

          Initialize major and minor endpoint versions to
          TAO_DEF_GIOP_MAJOR and TAO_DEF_GIOP_MINOR, respectively, instead
          of -1 so that a valid version is passed to pluggable protocol
          open() and/or open_default() methods.  This makes things less
          error prone, especially since initializing to -1 did not provide
          us with anything useful.

        * docs/Options.html:

          Updated ORB option documentation in accordance with the changes
          made to the TAO_ORB_Core::init() method described below.

        * tao/ORB_Core.cpp (init):

          Added warning message about the fact that the "-ORBPreconnect"
          option is obsolete, and that validate_connection() should be
          used instead.

          Removed support for the long obsolete
          "-ORB{Name,Trading,ImplRepo}ServiceIOR" options.  Their
          functionality is already provided by the standard -ORBInitRef
          ORB option.

        * tao/Connector_Registry.h (connect):

          Removed the default value for the ACE_Time_Value pointer
          argument.  There is no reason why it should have a default value
          since TAO's invocation code always passes an ACE_Time_Value when
          calling connect(), even if that value is zero.

        * tao/Connector_Registry.cpp (connect):
        * tao/Pluggable.h (connect):
        * tao/IIOP_Connector.h (connect):
        * tao/IIOP_Connector.cpp (connect):
        * tao/SHMIOP_Connector.h (connect):
        * tao/SHMIOP_Connector.cpp (connect):
        * tao/UIOP_Connector.h (connect):
        * tao/UIOP_Connector.cpp (connect):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h (connect):

          Added CORBA::Environment argument to the connect() call to make
          it possible to throw exceptions within that method.  Most
          pluggable protocols may not need this argument, and can rely on
          the GIOP_Invocation class to figure out the appropriate exception
          to throw, if any.  However, the SSLIOP pluggable protocol may
          need to throw the CORBA::NO_PERMISSION exception when attempting
          to connect to an endpoint.

        * tao/Invocation.cpp (start):

          Pass the CORBA::Environment variable ACE_TRY_ENV to the
          TAO_Connector_Registry::connect() call.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (connect):

          Only allow connection to the insecure IIOP port if the endpoint
          explicitly allows it, i.e. if the Security::NoProtection
          security association bit is set in the
          SSLIOP::SSL::target_supports field.  The server will soon
          perform the same permission check, so this check is an
          optimization since a connection will not be established
          needlessly, i.e. rejected due to lack of permission.

          Removed the check that causes an attempt to connect to the
          insecure port if the SSL port is set to zero.  The SSL port will
          never be set to zero on the client side.  It will default to
          port 684, the IANA assigned port for IIOP over SSL.

          Note that it is still possible for the standard non-SSLIOP aware
          IIOP pluggable protocol to attempt to connect to the insecure
          port.  In that case, the server will have to prevent the
          connection, and subsequently the request, from completing.  This
          feature will be added soon.

          If the endpoint requires an insecure connection, i.e. the
          Security::NoProtection security association bit in the
          SSLIOP::SSL::target_requires field is enabled, then prevent an
          SSL connection from occuring.  This seems silly, but nothing
          appears to be in the spec that states this can't be done.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp (TAO_SSLIOP_Endpoint):

          Pass pointer to entire SSLIOP::SSL component so that its
          entire contents may be copied, not just the port.  This is
          particularly necessary to make it possible to keep track of the
          security associations corresponding to the given endpoint.  If
          the pointer is zero, then initialize the SSLIOP::SSL component
          with conservative security association options, and set the port
          to be the IANA assigned port for IIOP over SSL, 684.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i (ssl_port):

          Removed this method.  It is more useful to return the entire
          SSLIOP::SSL component in most cases, hence the newly added
          ssl_component() accessor described below.

          (ssl_component):

          Accessor method that returns a constant reference to the
          SSLIOP::SSL component associated with the given SSLIOP endpoint.
          In most cases, we need to check the "target_supports" and
          "target_requires" fields, not just the "port" field.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp:

          The constructor now accepts an argument that sets the default
          value for the Security::NoProtection bit in the
          SSLIOP::SSL::target_supports field.  The need for this change
          will obviated once the security policy support is added.

          (create_mprofile, create_rt_mprofile):

          Pass pointer to the entire SSLIOP::SSL component, not just the
          port.  Its other fields are important for enforcing security.

          (verify_secure_configuration):

          New method that ensures neither the endpoint configuration nor
          the ORB configuration violate security measures.

          In order to support a secure connection, the SSLIOP::SSL tagged
          component must be embedded in the IOR.  This isn't possible if
          the user elects to disable standard profile components.
          Similarly, IIOP 1.0 does not support tagged components, which it
          makes it impossible to embed the SSLIOP::SSL tagged component
          within the IOR.  If the given object explicitly disallows
          insecure invocations and standard profile components are
          disabled, then return with an error since secure invocations
          cannot be supported without standard profile components.  Note
          that it isn't enough to support Security::NoProtection.
          Security::NoProtection must be required since "support" does not
          preclude the secure port from being used.

          (open, open_default):

          Call the newly added verify_secure_configuration() method prior
          to opening any endpoints to ensure that neither the endpoint
          configuration nor the ORB configuration violate security
          measures.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:

          The new "no_protection_" field is now used instead of the old
          "use_ssl_" field.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

          Deprecated the "-SSLDisable" option.  It has been superseded by
          the "-SSLNoProtection" option since it is better emphasizes the
          consequences of disabling SSL support, and since it is also
          applicable on the server side.

          (make_acceptor):

          Pass the newly added "no_protection_" field to the
          SSLIOP_Acceptor constructor.

Thu Oct 12 15:29:06 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Activate.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Activate.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.i:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp: Did
          some clean up of the code. Added a pointer to the ORB_Core in
          the TAO_FT_Service_Callback class so that the class is aware of
          the ORB_Core that activated him.

Thu Oct 12 15:25:21 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Stub.i: Removed a lock on the critical path.

Thu Oct 12 15:14:09 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/Invocation_Endpoint_Selectors.cpp:

          Fixed unused variables and other warnings/typos.

Thu Oct 12 15:12:39 2000  Balachandran Natarajan  <bala@cs.wustl.edu>

        * All the Makefiles have been updated.

Thu Oct 12 14:31:13 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/ORB_Core.h
        * tao/ORB_Core.i:

          Changed return types for all endpoint selector accessors to be
          the most derived types rather than the base type.

Thu Oct 12 13:16:05 2000  Marina Spivak  <marina@cs.wustl.edu>

        * tao/IIOP_Profile.cpp
        * tao/IIOP_Profile.h
        * tao/Profile.cpp
        * tao/Profile.h
        * tao/SHMIOP_Profile.cpp
        * tao/SHMIOP_Profile.h
        * tao/UIOP_Profile.cpp
        * tao/UIOP_Profile.h:

          Added <endpoint_count> method.

        * tao/orbconf.h:

          Disabled TAO_HAS_CLIENT_PRIORITY_POLICY by default.  This policy
          is deprecated.  New RTCORBA policies should be used instead.
          Users can still use Client_Priority_Policy by explicitly
          enabling it in orbconf.h, but enabling it disables the use of
          RTCORBA policies.

        * tao/TAOC.i:

          Moved streaming operators for Client_Prioririty_Policy inside
          the #ifdef protections.  They were outside causing the compilation
          to fail if the policy was disabled.

        * tao/ORB_Core.cpp
        * tao/ORB_Core.h
        * tao/ORB_Core.i:

          Added TAO_Endpoint_Selector_Factory and TAO_*_Selector data
          members to the ORB Core class.

        * tao/Stub.cpp (client_protocol):

          When figuring out effective ClientProtocolPolicy for the object,
          ORB default value should not be used - it creates conflict in
          case the policy is also set for the object on the server side.

        * tao/Invocation.h
        * tao/Invocation.cpp
        * tao/Invocation_Endpoint_Selectors.h:

          The logic for selection/reselection of a profile/endpoint used
          for an Invocation has been strategized.
          TAO_Invocation_Endpoint_Selector represents the interface for
          the strategy.  Added five concrete strategies: for the default
          case and for various combinations of RTCORBA policies.
          TAO_Endpoint_Selector_Factory is used to obtain the appropriate
          strategy for each invocation.  Note, that all selector
          strategies are stateless, and, therefore, can be used
          concurrently by multiple threads.  This makes it possible to use
          a preallocated set of selectors from the ORB_Core for all
          Invocations rather than dynamically allocating a new selector
          for each Invocation.

        * tao/TAO.dsp
        * tao/TAO_Static.dsp
        * tao/Makefile.bor
        * tao/Makefile:

          Updated.

Thu Oct 12 12:17:44 2000  Angelo  <corsaro@cs.wustl.edu>

        * TAO version 1.1.10 released.
