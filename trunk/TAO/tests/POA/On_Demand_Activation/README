// $Id$

On_Demand_Activation Tests:
==========================

Description:
===========

	ServantManagers:
	===============
		
	Servant managers are associated with POAs. A servant manager supplies
	 a POA with the ability to objects on demand when the POA receives a
	 request targeted at an inactive object. A servant manager is
	 registered with a POA as a callback object, to be invoked by the POA
	 when necessary.An application server that activates all its needed
	 objects at the beginning of execution does not need to use a servant
	 manager; it is used only for the case in which an object must be
	 activated during request processing.

	When the POA has the RETAIN policy it uses servant managers that are
	 ServantActivators. When the POA has the NON_RETAIN policy it uses
	 servant managers that are ServantLocators.

	server:
	======
		The test program server creates 2 POAs firstPOA and secondPOA.
	 firstPOA is created with a RETAIN,USER_ID,USE_SERVANT_MANAGER policy
	 and MyFooServantActivator is registered as its	servant Manager.
	 secondPOA is created with a NON_RETAIN,USER_ID,USE_SERVANT_MANAGER
	 policy	and MyFooServantLocator is registered as it servant Manager.

		It then creates an object reference from the string "firstFoo"
	 in firstPOA and prints its IOR.Similarly it creates an object
	 reference from the string "secondFoo" in secondPOA and prints its
	IOR. Finally it changes the state of the POA_Manager to 'active' and
	 runs the ORB.

	USAGE:
	======

	%server [-ORBhost host ] [-ORBport port] [-ORBobjrefstyle URL ]
	
			
	client:
	======
		The Foo client program is in the path
		
		TAO/tests/POA/Generic_Servant/client
		i.e ../Generic_Servant/client

	%client -k IOR

	where IOR is got from the server output.

To Test:
=======
	1. Run the server

 Servant Activator:
===================

	2. Get the IOR for "firstFOO"  from the server output .

	3. Run client -k IOR	

	4. You should get an output
		
		27
	
	   alongwith some diagnostic messages.

 Servant Locator:
=================
	
	2. Get the IOR for "secondFoo" from the server output

	3. Run client -k IOR

	4. The first time a client is run you should get an output
		
		2

	   alongwith some diagnostic messages.

	5. Subsequent runs of the client program results in the output
	   incremented by 2.

	6. Thus, the second run of client should give you an output 4.







