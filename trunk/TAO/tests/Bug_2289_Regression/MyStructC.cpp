// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// E:\doc_cvs\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:277


#include "MyStructC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "MyStructC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// E:\doc_cvs\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
}


// TAO_IDL - Generated from
// E:\doc_cvs\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_MyStruct[] =
  {
    { "myString", &CORBA::_tc_string }

  };
static TAO::TypeCode::Struct<char const *,
                      ::CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_MyStruct (
    ::CORBA::tk_struct,
    "IDL:MyStruct:1.0",
    "MyStruct",
    _tao_fields_MyStruct,
    1);

::CORBA::TypeCode_ptr const _tc_MyStruct =
  &_tao_tc_MyStruct;

// TAO_IDL - Generated from
// E:\doc_cvs\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void
MyStruct::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  MyStruct *_tao_tmp_pointer =
    static_cast<MyStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// E:\doc_cvs\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MyStruct &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<MyStruct *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<MyStruct>::insert_copy (
        _tao_any,
        MyStruct::_tao_any_destructor,
        _tc_MyStruct,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MyStruct *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MyStruct>::insert (
      _tao_any,
      MyStruct::_tao_any_destructor,
      _tc_MyStruct,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MyStruct *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MyStruct *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MyStruct *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MyStruct>::extract (
        _tao_any,
        MyStruct::_tao_any_destructor,
        _tc_MyStruct,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// E:\doc_cvs\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_cs.cpp:61

::CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const MyStruct &
  )
{
  ACE_DEBUG ((LM_ERROR, "Test Failed - attempt to marshal a MyStruct - optimisation is not working !!\n"));
  return 0;
//  return
//    (strm << _tao_aggregate.myString.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    MyStruct &
  )
{
  ACE_DEBUG ((LM_ERROR, "Test Failed - attempt to demarshal a MyStruct - optimisation is not working !!\n"));
  return 0;
//  return
//    (strm >> _tao_aggregate.myString.out ());
}
