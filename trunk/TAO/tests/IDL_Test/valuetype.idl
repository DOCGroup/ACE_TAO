// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO/tests/IDL_Test
//
// = FILENAME
//    valuetype.idl
//
// = DESCRIPTION
//    This file contains examples of IDL code that has
//    caused problems in the past for the TAO IDL
//    compiler. This test is to make sure the problems
//    stay fixed.
//
// = AUTHORS
//    Gary Duzan <gduzan@bbn.com>
//    Jeff Parsons <j.parsons@vanderbilt.edu>
//
// ============================================================================

#ifndef IDL_TEST_VALUETYPE_IDL
#define IDL_TEST_VALUETYPE_IDL

#include "included.idl"

// A valuetype factory can have exceptions, so the declaration must pull in
// an #include of SystemException.h.
valuetype MyValueType
{
  public string my_string_value;
  factory make_one ();
};

enum ValueSort2 {
  SYMBOL_TYPE2
};

union MyValueTypeUnion switch (ValueSort2) {
  case SYMBOL_TYPE2:
    MyValueType symbol_val;
};

// The original bug was caused by the default factory visitor
// constructing a temporary arg of this field type. When the
// arg was then destroyed, it called its base destroyer
// AST_Field::destroy() which in turn destroyed the member
// because it was anonymous. This declaration was copied from
// an unautomated TAO/tests directory and authored by Simon McQueen
// <sm@prismtechnologies>.
valuetype RecValueType
{
  private sequence<RecValueType> rec_value_types;
  private sequence<RecValueType,2> rec_value_types2;
};

// Inherits an anonymous sequence member, which was not named
// correctly in the original bug when used in the arglist for
// this valuetype's constructor from values.
valuetype GetsDeprecatedMember : IncludedBase
{
  public string StringMember;
};

#endif /* IDL_TEST_VALUETYPE_IDL */
