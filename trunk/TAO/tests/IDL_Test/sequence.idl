// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO/tests/IDL_Test
//
// = FILENAME
//    sequence.idl
//
// = DESCRIPTION
//    This file contains examples of IDL code that has 
//    caused problems in the past for the TAO IDL
//    compiler. This test is to make sure the problems
//    stay fixed.
//
// = AUTHORS
//    Jeff Parsons <parsons@cs.wustl.edu> and TAO users.
//
// ============================================================================


// Bounded string elements of a sequence,
// require the use of CORBA_Any::to_char.

interface seqTest 
{
  typedef sequence< string<12> > dozens;

  void send_dozen (inout dozens bouquets);
};

// CDR operator declarations and definitions 
// for the sequences were getting generated
// twice. Now there's an #if !defined guard
// around them.
struct twinStruct
  {
    sequence<short> and_;
    sequence<short> or_;
  };

// Nested sequences
typedef sequence<sequence<short, 5> > outside;

struct nestedSeqStruct
{
  sequence<sequence<outside>, 7> inside;
};

// Tests forward declared interface as element type.
// Had to override visit_interface_fwd()
// for the be_visitor_sequence_base_template_args
// visitor to fix this. Also had to separate calls
// to nested_type_name() into individual insertions
// into the code generating stream, because of side
// effects.
module Thwoik
{
  interface TestType;
};  

module Thwoik
{
  typedef sequence<TestType> ub_TestTypeSeq;
  typedef sequence<TestType, 3> bd_TestTypeSeq;
};

module Thwoik
{
  interface TestType {};
};

