// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO/tests/IDL_Test
//
// = FILENAME
//    sequence.idl
//
// = DESCRIPTION
//    This file contains examples of IDL code that has 
//    caused problems in the past for the TAO IDL
//    compiler. This test is to make sure the problems
//    stay fixed.
//
// = AUTHORS
//    Jeff Parsons <parsons@cs.wustl.edu> and TAO users.
//
// ============================================================================


// Bounded string elements of a sequence,
// require the use of CORBA_Any::to_char.

interface seqTest 
{
  typedef sequence< string<12> > dozens;

  void send_dozen (inout dozens bouquets);
};

// Anonymous sequence members must be unique types even if the
// sequence itself is not, so the member name has been
// incorported into the sequence class name. #if !defined guards
// are generated around code for the inner anonymous sequences.
struct twinStruct
  {
    sequence<sequence<short> > and_;
    sequence<sequence<short> > or_;
  };

// Nested sequences
typedef sequence<sequence<short, 5> > outside;

struct nestedSeqStruct
{
  sequence<sequence<outside>, 7> inside;
};

