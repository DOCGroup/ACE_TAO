// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO/tests/IDL_Test
//
// = FILENAME
//    reopened_modules.idl
//
// = DESCRIPTION
//    This file contains examples of IDL code that has 
//    caused problems in the past for the TAO IDL
//    compiler. This test is to make sure the problems
//    stay fixed.
//
// = AUTHORS
//    Jeff Parsons <parsons@cs.wustl.edu> and TAO users.
//
// ============================================================================

#include "including.idl"
#include "included.idl"

// These examples test the lookup abilities of the
// TAO IDL compiler, with reopened and/or #included
// modules.

module A 
{
  module B 
  {
    interface x1 {};
  };
};

module A 
{
  module B
  {
    module C 
    {
      interface x2 
      {
        // 'A::B::' should be implicit
        void op1 (in x1 obj);
        // 'A::' should be implicit
        void op2 (in B::x1 obj);
        // Just for reference
        void op3 (in A::B::x1 obj);
      };
    };
  };
};

// Each occurrence of Party and Person should be
// recognized as being in the same scope as the
// previous occurrence(s).

module dot 
{ 
  interface Party;

  interface Person 
    {
      attribute Party someParty;
    };
};

module dot 
{ 
  interface Party 
    {
      attribute Person somePerson;
    };
};

// Should be no problem in lookup of all the
// arguments in Operation.
module Outside
{
  module Reopened
    {
      typedef short Tricky;
    };

  typedef long Tricky;

  module Reopened
    {
      typedef float Newdef;
    };
};

interface OpHolder
  {

    void  Operation (in ::Outside::Tricky p1,
                     out ::Outside::Reopened::Tricky p2,
                     inout ::Outside::Reopened::Newdef p3);
  };

// This particular combination used to cause IDL compiler
// to go into an infinite loop looking for return type to
// getInfo(). Partial solution got rid of infinite loop, 
// but erroneously returned ::com from lookup.
module com {};

module com 
{
  module mr 
    {
      typedef short info;
    };
};

module com 
{
  interface IFace
    {
      com::mr::info getInfo ();
    };
};

// Uses members of a reopened module #included from
// included.idl and including.idl
interface gather
{
  void op (in Aok::Seq1Type inarg,
           inout Aok::pug inoutarg);
};
