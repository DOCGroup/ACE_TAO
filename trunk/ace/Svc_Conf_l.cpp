#define ACE_YY_NO_UNPUT
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define ACE_YY_FLEX_MAJOR_VERSION 2
#define ACE_YY_FLEX_MINOR_VERSION 5

#include "ace/OS.h"


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include /**/ <stdlib.h>
#include "ace/OS.h"

/* Use prototypes in function declarations. */
#define ACE_YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define ACE_YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define ACE_YY_USE_PROTOS
#define ACE_YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include /**/ <io.h>
#include /**/ <stdlib.h>
#define ACE_YY_USE_CONST
#define ACE_YY_USE_PROTOS
#endif

#ifdef ACE_YY_USE_CONST
#define ace_yyconst const
#else
#define ace_yyconst
#endif


#ifdef ACE_YY_USE_PROTOS
#define ACE_YY_PROTO(proto) proto
#else
#define ACE_YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define ACE_YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define ACE_YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN ace_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The ACE_YYSTATE alias is for lex
 * compatibility.
 */
#define ACE_YY_START ((ace_yy_start - 1) / 2)
#define ACE_YYSTATE ACE_YY_START

/* Action number for EOF rule of a given start state. */
#define ACE_YY_STATE_EOF(state) (ACE_YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define ACE_YY_NEW_FILE ace_yyrestart( ace_yyin )

#define ACE_YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define ACE_YY_BUF_SIZE 16384

typedef struct ace_yy_buffer_state *ACE_YY_BUFFER_STATE;

extern int ace_yyleng;
extern FILE *ace_yyin, *ace_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		ace_yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the ace_yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define ace_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up ace_yytext. */ \
		*ace_yy_cp = ace_yy_hold_char; \
		ACE_YY_RESTORE_ACE_YY_MORE_OFFSET \
		ace_yy_c_buf_p = ace_yy_cp = ace_yy_bp + n - ACE_YY_MORE_ADJ; \
		ACE_YY_DO_BEFORE_ACTION; /* set up ace_yytext again */ \
		} \
	while ( 0 )

#if 0
#define unput(c) ace_yyunput( c, ace_yytext_ptr )
#endif /* 0 */

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int ace_yy_size_t;


struct ace_yy_buffer_state
	{
	FILE *ace_yy_input_file;

	char *ace_yy_ch_buf;		/* input buffer */
	char *ace_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	ace_yy_size_t ace_yy_buf_size;

	/* Number of characters read into ace_yy_ch_buf, not including EOB
	 * characters.
	 */
	int ace_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int ace_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int ace_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int ace_yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int ace_yy_fill_buffer;

	int ace_yy_buffer_status;
#define ACE_YY_BUFFER_NEW 0
#define ACE_YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as ACE_YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ace_yyrestart()), so that the user can continue scanning by
	 * just pointing ace_yyin at a new input file.
	 */
#define ACE_YY_BUFFER_EOF_PENDING 2
	};

static ACE_YY_BUFFER_STATE ace_yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define ACE_YY_CURRENT_BUFFER ace_yy_current_buffer


/* ace_yy_hold_char holds the character lost when ace_yytext is formed. */
static char ace_yy_hold_char;

static int ace_yy_n_chars;		/* number of characters read into ace_yy_ch_buf */


int ace_yyleng;

/* Points to current character in buffer. */
static char *ace_yy_c_buf_p = (char *) 0;
static int ace_yy_init = 1;		/* whether we need to initialize */
static int ace_yy_start = 0;	/* start state number */

/* Flag which is used to allow ace_yywrap()'s to do buffer switches
 * instead of setting up a fresh ace_yyin.  A bit of a hack ...
 */
static int ace_yy_did_buffer_switch_on_eof;

void ace_yyrestart ACE_YY_PROTO(( FILE *input_file ));

void ace_yy_switch_to_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE new_buffer ));
void ace_yy_load_buffer_state ACE_YY_PROTO(( void ));
ACE_YY_BUFFER_STATE ace_yy_create_buffer ACE_YY_PROTO(( FILE *file, int size ));
void ace_yy_delete_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE b ));
void ace_yy_init_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE b, FILE *file ));
void ace_yy_flush_buffer ACE_YY_PROTO(( ACE_YY_BUFFER_STATE b ));
#define ACE_YY_FLUSH_BUFFER ace_yy_flush_buffer( ace_yy_current_buffer )

ACE_YY_BUFFER_STATE ace_yy_scan_buffer ACE_YY_PROTO(( char *base, ace_yy_size_t size ));
ACE_YY_BUFFER_STATE ace_yy_scan_string ACE_YY_PROTO(( ace_yyconst char *ace_yy_str ));
ACE_YY_BUFFER_STATE ace_yy_scan_bytes ACE_YY_PROTO(( ace_yyconst char *bytes, int len ));

static void *ace_yy_flex_alloc ACE_YY_PROTO(( ace_yy_size_t ));
static void *ace_yy_flex_realloc ACE_YY_PROTO(( void *, ace_yy_size_t ));
static void ace_yy_flex_free ACE_YY_PROTO(( void * ));

#define ace_yy_new_buffer ace_yy_create_buffer

#define ace_yy_set_interactive(is_interactive) \
	{ \
	if ( ! ace_yy_current_buffer ) \
		ace_yy_current_buffer = ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE ); \
	ace_yy_current_buffer->ace_yy_is_interactive = is_interactive; \
	}

#define ace_yy_set_bol(at_bol) \
	{ \
	if ( ! ace_yy_current_buffer ) \
		ace_yy_current_buffer = ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE ); \
	ace_yy_current_buffer->ace_yy_at_bol = at_bol; \
	}

#define ACE_YY_AT_BOL() (ace_yy_current_buffer->ace_yy_at_bol)

typedef unsigned char ACE_YY_CHAR;
FILE *ace_yyin = (FILE *) 0, *ace_yyout = (FILE *) 0;
typedef int ace_yy_state_type;
extern char *ace_yytext;
#define ace_yytext_ptr ace_yytext

static ace_yy_state_type ace_yy_get_previous_state ACE_YY_PROTO(( void ));
static ace_yy_state_type ace_yy_try_NUL_trans ACE_YY_PROTO(( ace_yy_state_type current_state ));
static int ace_yy_get_next_buffer ACE_YY_PROTO(( void ));
static void ace_yy_fatal_error ACE_YY_PROTO(( ace_yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up ace_yytext.
 */
#define ACE_YY_DO_BEFORE_ACTION \
	ace_yytext_ptr = ace_yy_bp; \
	ace_yyleng = (int) (ace_yy_cp - ace_yy_bp); \
	ace_yy_hold_char = *ace_yy_cp; \
	*ace_yy_cp = '\0'; \
	ace_yy_c_buf_p = ace_yy_cp;

#define ACE_YY_NUM_RULES 25
#define ACE_YY_END_OF_BUFFER 26
static ace_yyconst short int ace_yy_accept[107] =
    {   0,
        0,    0,    0,    0,    0,    0,   26,   24,   22,   23,
       24,   21,   24,   15,   16,   14,   21,   13,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   17,   18,   24,
       22,    0,   19,   21,    0,    0,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,    0,    1,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    8,   10,   20,   11,   20,   20,    6,    5,
        3,    7,   20,   20,    2,   20,    4,   20,   12,   20,

       20,   20,   20,   20,    9,    0
    } ;

static ace_yyconst int ace_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    5,    8,    5,    9,   10,
       11,   12,    5,    5,   13,   13,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    5,    5,
        5,    5,    5,    5,   16,   17,   17,   17,   18,   17,
       17,   17,   17,   17,   17,   17,   19,   17,   20,   17,
       17,   21,   22,   23,   17,   17,   17,   17,   17,   17,
        5,   13,    5,    5,   24,    5,   25,   26,   27,   28,

       29,   17,   17,   17,   30,   31,   17,   32,   33,   34,
       35,   36,   17,   37,   38,   39,   40,   41,   17,   17,
       42,   17,   43,    5,   44,   13,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static ace_yyconst int ace_yy_meta[45] =
    {   0,
        1,    1,    1,    2,    2,    2,    2,    3,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    2,    2
    } ;

static ace_yyconst short int ace_yy_base[112] =
    {   0,
        0,  132,    0,  127,    0,  123,  129,  437,   43,  437,
      122,  112,  109,  437,  437,  437,  102,  437,   38,   41,
       42,   51,   54,   55,   64,   65,   74,  437,  437,  104,
       56,   93,   86,   70,   69,   66,   65,   75,   78,   87,
       88,   96,   97,  107,  108,  111,  125,   58,  437,  129,
      137,  141,  145,  149,  153,  157,  163,  171,  175,  181,
      187,  193,  199,  203,  207,  213,  217,  223,  233,  234,
      242,  252,  253,  261,  262,  265,  271,  274,  277,  285,
      289,  300,  301,  310,  311,  320,  323,  324,  333,  334,
      343,  344,  347,  353,  356,  359,  365,  371,  368,  374,

      377,  386,  389,  390,  398,  437,  428,   49,  430,   45,
      433
    } ;

static ace_yyconst short int ace_yy_def[112] =
    {   0,
      106,    1,    1,    1,    1,    1,  106,  106,  106,  106,
      107,  108,  109,  106,  106,  106,  108,  106,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  106,  106,  111,
      106,  107,  107,  108,  108,  109,  109,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  111,  106,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,    0,  106,  106,  106,  106,
      106
    } ;

static ace_yyconst short int ace_yy_nxt[482] =
    {   0,
        8,    9,   10,    9,    8,   11,    8,   12,   13,   14,
       15,   16,   17,   17,   18,   19,   19,   19,   20,   19,
       19,   21,   19,   22,   23,   19,   19,   24,   19,   25,
       19,   19,   19,   19,   19,   19,   26,   27,   19,   19,
       19,   19,   28,   29,   31,   34,   31,   38,   34,   34,
       34,   34,   35,   34,   34,   35,   35,   31,   34,   31,
       49,   34,   34,   34,   40,  106,   34,   34,   35,   35,
       41,   34,   34,   37,   37,   39,   34,   34,   35,   35,
       42,   34,   34,  106,  106,   34,   34,   34,   35,  106,
       34,   33,  106,   45,   34,   34,   43,   44,   33,   34,

       34,  106,  106,   34,   34,   50,   49,   51,   34,   34,
      106,  106,   46,   47,   34,   34,  106,   37,   34,   34,
       34,  106,  106,   34,   52,  106,   35,   33,  106,   30,
       54,   55,   34,   30,   53,   58,   34,   34,   30,  106,
       56,   34,  106,  106,   34,   57,  106,   59,   34,   34,
      106,  106,   34,   34,   62,  106,   34,   34,  106,  106,
       34,   34,   60,  106,   34,   34,  106,  106,   61,   34,
       34,  106,  106,   65,   64,   34,  106,  106,   34,   66,
      106,   63,   34,   34,  106,  106,  106,   34,   34,  106,
      106,   67,  106,   34,   34,  106,  106,  106,  106,   34,

       34,  106,   68,   70,  106,   34,   34,  106,   73,   69,
       34,   34,  106,  106,   34,   34,   71,  106,   72,   34,
       34,  106,  106,  106,   34,   34,  106,  106,   74,   34,
       34,  106,  106,  106,  106,   34,  106,  106,  106,   76,
       34,   34,  106,   75,  106,   34,   34,  106,  106,   34,
      106,   77,  106,  106,   34,   79,  106,   78,   81,   34,
       34,  106,   80,  106,   34,   34,  106,  106,   34,   34,
       82,   84,   34,   34,   34,  106,  106,   34,   34,  106,
       83,   34,  106,   34,   34,  106,   34,   85,  106,   34,
       86,  106,   34,  106,   87,  106,   34,   34,  106,  106,

       88,   34,   89,  106,  106,   90,  106,   34,   34,  106,
      106,   91,   34,   34,  106,  106,  106,   34,   34,  106,
      106,   92,   34,   34,  106,  106,  106,   34,  106,  106,
       34,   34,   34,   93,  106,   34,   34,  106,  106,   94,
       34,   34,  106,  106,  106,   34,   34,  106,  106,   95,
       34,   34,  106,  106,   34,   34,   34,  106,  106,   34,
       34,  106,  106,   34,   96,   34,   34,  106,   34,  106,
      106,   34,   34,  106,   97,   34,   98,   34,   34,  106,
       34,   34,  106,   34,   34,  106,   34,   99,  106,   34,
      100,  106,  106,   34,  106,  106,   34,   34,   34,  101,

      106,   34,   34,  106,  106,   34,  106,  102,  106,  106,
       34,  106,  106,  106,  103,  104,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  105,   32,
       32,   36,   36,   48,   48,   48,    7,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106
    } ;

static ace_yyconst short int ace_yy_chk[482] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   19,    9,  110,   20,   21,
       19,  108,   19,   20,   21,   20,   21,   31,   22,   31,
       48,   23,   24,   22,   21,   22,   23,   24,   23,   24,
       21,   25,   26,   37,   36,   20,   25,   26,   25,   26,
       23,   27,   38,   35,   34,   39,   27,   38,   27,   38,
       39,   33,   39,   26,   40,   41,   24,   25,   32,   40,

       41,   40,   41,   42,   43,   39,   30,   40,   42,   43,
       42,   43,   27,   27,   44,   45,   17,   13,   46,   44,
       45,   44,   45,   46,   41,   46,   12,   11,    7,    6,
       43,   44,   47,    4,   42,   46,   50,   47,    2,   47,
       45,   50,    0,   50,   51,   45,    0,   46,   52,   51,
        0,   51,   53,   52,   51,   52,   54,   53,    0,   53,
       55,   54,   47,   54,   56,   55,    0,   55,   50,   56,
       57,   56,    0,   54,   53,   57,    0,   57,   58,   55,
        0,   52,   59,   58,    0,   58,    0,   59,   60,   59,
        0,   56,    0,   60,   61,   60,    0,    0,    0,   61,

       62,   61,   57,   59,    0,   62,   63,   62,   62,   58,
       64,   63,    0,   63,   65,   64,   60,   64,   61,   65,
       66,   65,    0,    0,   67,   66,    0,   66,   63,   67,
       68,   67,    0,    0,    0,   68,    0,   68,    0,   65,
       69,   70,    0,   64,    0,   69,   70,   69,   70,   71,
        0,   66,    0,    0,   71,   68,   71,   67,   70,   72,
       73,    0,   69,    0,   72,   73,   72,   73,   74,   75,
       71,   73,   76,   74,   75,   74,   75,   76,   77,   76,
       72,   78,    0,   77,   79,   77,   78,   74,   78,   79,
       75,   79,   80,    0,   76,    0,   81,   80,    0,   80,

       77,   81,   78,   81,    0,   79,    0,   82,   83,    0,
        0,   80,   82,   83,   82,   83,    0,   84,   85,    0,
        0,   81,   84,   85,   84,   85,    0,   86,    0,    0,
       87,   88,   86,   82,   86,   87,   88,   87,   88,   85,
       89,   90,    0,    0,    0,   89,   90,   89,   90,   87,
       91,   92,    0,    0,   93,   91,   92,   91,   92,   93,
       94,   93,    0,   95,   88,   94,   96,   94,   95,    0,
       95,   96,   97,   96,   93,   99,   94,   97,   98,   97,
       99,  100,   99,   98,  101,   98,  100,   96,  100,  101,
       98,  101,    0,  102,    0,    0,  103,  104,  102,  100,

      102,  103,  104,  103,  104,  105,    0,  101,    0,    0,
      105,    0,  105,    0,  102,  103,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  104,  107,
      107,  109,  109,  111,  111,  111,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106
    } ;

static ace_yy_state_type ace_yy_last_accepting_state;
static char *ace_yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define ace_yymore() ace_yymore_used_but_not_detected
#define ACE_YY_MORE_ADJ 0
#define ACE_YY_RESTORE_ACE_YY_MORE_OFFSET
char *ace_yytext;
#line 1 "Svc_Conf.l"
#define INITIAL 0
#line 2 "Svc_Conf.l"
// $Id$
// Sample lexical analysis for regular expression subset.  Must be
// compiled with FLEX and an ANSI C++ compiler.

// Lexical tokens values defined by YACC.
#include "ace/Svc_Conf.h"
#include "ace/Svc_Conf_Tokens.h"

ACE_RCSID(ace, Svc_Conf_l, "$Id$")

// Keeps track of the current line for debugging output.
int ace_yylineno = 1;

// Keeps track of the number of errors encountered so far.
int ace_yyerrno = 0;

// Used to parse service configurator directives from a string rather
// than from a svc.conf file.
const ACE_TCHAR *ace_yydirective = 0;

#define token(x)  x
#define PARAMETERS 1

#define NORMAL 2


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef ACE_YY_SKIP_ACE_YYWRAP
#ifdef __cplusplus
extern "C" int ace_yywrap ACE_YY_PROTO(( void ));
#else
extern int ace_yywrap ACE_YY_PROTO(( void ));
#endif
#endif

#ifndef ACE_YY_NO_UNPUT
static void ace_yyunput ACE_YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef ace_yytext_ptr
static void ace_yy_flex_strncpy ACE_YY_PROTO(( char *, ace_yyconst char *, int ));
#endif

#ifdef ACE_YY_NEED_STRLEN
static int ace_yy_flex_strlen ACE_YY_PROTO(( ace_yyconst char * ));
#endif

#ifndef ACE_YY_NO_INPUT
#ifdef __cplusplus
static int ace_yyinput ACE_YY_PROTO(( void ));
#else
static int input ACE_YY_PROTO(( void ));
#endif
#endif

#if ACE_YY_STACK_USED
static int ace_yy_start_stack_ptr = 0;
static int ace_yy_start_stack_depth = 0;
static int *ace_yy_start_stack = 0;
#ifndef ACE_YY_NO_PUSH_STATE
static void ace_yy_push_state ACE_YY_PROTO(( int new_state ));
#endif
#ifndef ACE_YY_NO_POP_STATE
static void ace_yy_pop_state ACE_YY_PROTO(( void ));
#endif
#ifndef ACE_YY_NO_TOP_STATE
static int ace_yy_top_state ACE_YY_PROTO(( void ));
#endif

#else
#define ACE_YY_NO_PUSH_STATE 1
#define ACE_YY_NO_POP_STATE 1
#define ACE_YY_NO_TOP_STATE 1
#endif

#ifdef ACE_YY_MALLOC_DECL
ACE_YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include /**/ <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef ACE_YY_READ_BUF_SIZE
#define ACE_YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ACE_SVC_CONF_ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ACE_SVC_CONF_ECHO (void) fwrite( ace_yytext, ace_yyleng, 1, ace_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or ACE_YY_NULL,
 * is returned in "result".
 */
#ifndef ACE_YY_INPUT
#define ACE_YY_INPUT(buf,result,max_size) \
	if ( ace_yy_current_buffer->ace_yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( ace_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( ace_yyin ) ) \
			ACE_YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, ace_yyin )) == 0) \
		  && ferror( ace_yyin ) ) \
		ACE_YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "ace_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef ace_yyterminate
#define ace_yyterminate() return ACE_YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef ACE_YY_START_STACK_INCR
#define ACE_YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef ACE_YY_FATAL_ERROR
#define ACE_YY_FATAL_ERROR(msg) ace_yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef ACE_YY_DECL
#define ACE_YY_DECL int ace_yylex ACE_YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after ace_yytext and ace_yyleng
 * have been set up.
 */
#ifndef ACE_YY_USER_ACTION
#define ACE_YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef ACE_YY_BREAK
#define ACE_YY_BREAK break;
#endif

#define ACE_YY_RULE_SETUP \
	if ( ace_yyleng > 0 ) \
		ace_yy_current_buffer->ace_yy_at_bol = \
				(ace_yytext[ace_yyleng - 1] == '\n'); \
	ACE_YY_USER_ACTION

ACE_YY_DECL
	{
	register ace_yy_state_type ace_yy_current_state;
	register char *ace_yy_cp = 0, *ace_yy_bp = 0;
	register int ace_yy_act;

#line 39 "Svc_Conf.l"



	if ( ace_yy_init )
		{
		ace_yy_init = 0;

#ifdef ACE_YY_USER_INIT
		ACE_YY_USER_INIT;
#endif

		if ( ! ace_yy_start )
			ace_yy_start = 1;	/* first start state */

		if ( ! ace_yyin )
			ace_yyin = stdin;

		if ( ! ace_yyout )
			ace_yyout = stdout;

		if ( ! ace_yy_current_buffer )
			ace_yy_current_buffer =
				ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE );

		ace_yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		ace_yy_cp = ace_yy_c_buf_p;

		/* Support of ace_yytext. */
		*ace_yy_cp = ace_yy_hold_char;

		/* ace_yy_bp points to the position in ace_yy_ch_buf of the start of
		 * the current run.
		 */
		ace_yy_bp = ace_yy_cp;

		ace_yy_current_state = ace_yy_start;
		ace_yy_current_state += ACE_YY_AT_BOL();
ace_yy_match:
		do
			{
			register ACE_YY_CHAR ace_yy_c = ace_yy_ec[ACE_YY_SC_TO_UI(*ace_yy_cp)];
			if ( ace_yy_accept[ace_yy_current_state] )
				{
				ace_yy_last_accepting_state = ace_yy_current_state;
				ace_yy_last_accepting_cpos = ace_yy_cp;
				}
			while ( ace_yy_chk[ace_yy_base[ace_yy_current_state] + ace_yy_c] != ace_yy_current_state )
				{
				ace_yy_current_state = (int) ace_yy_def[ace_yy_current_state];
				if ( ace_yy_current_state >= 107 )
					ace_yy_c = ace_yy_meta[(unsigned int) ace_yy_c];
				}
			ace_yy_current_state = ace_yy_nxt[ace_yy_base[ace_yy_current_state] + (unsigned int) ace_yy_c];
			++ace_yy_cp;
			}
		while ( ace_yy_base[ace_yy_current_state] != 437 );

ace_yy_find_action:
		ace_yy_act = ace_yy_accept[ace_yy_current_state];
		if ( ace_yy_act == 0 )
			{ /* have to back up */
			ace_yy_cp = ace_yy_last_accepting_cpos;
			ace_yy_current_state = ace_yy_last_accepting_state;
			ace_yy_act = ace_yy_accept[ace_yy_current_state];
			}

		ACE_YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( ace_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of ACE_YY_DO_BEFORE_ACTION */
			*ace_yy_cp = ace_yy_hold_char;
			ace_yy_cp = ace_yy_last_accepting_cpos;
			ace_yy_current_state = ace_yy_last_accepting_state;
			goto ace_yy_find_action;

case 1:
*ace_yy_cp = ace_yy_hold_char; /* undo effects of setting up ace_yytext */
ace_yy_c_buf_p = ace_yy_cp -= 1;
ACE_YY_DO_BEFORE_ACTION; /* set up ace_yytext again */
ACE_YY_RULE_SETUP
#line 41 "Svc_Conf.l"
; /* EMPTY */
	ACE_YY_BREAK
case 2:
ACE_YY_RULE_SETUP
#line 42 "Svc_Conf.l"
{ return token (ACE_DYNAMIC); }
        //	ACE_YY_BREAK
case 3:
ACE_YY_RULE_SETUP
#line 43 "Svc_Conf.l"
{ return token (ACE_STATIC); }
//	ACE_YY_BREAK
case 4:
ACE_YY_RULE_SETUP
#line 44 "Svc_Conf.l"
{ return token (ACE_SUSPEND); }
//	ACE_YY_BREAK
case 5:
ACE_YY_RULE_SETUP
#line 45 "Svc_Conf.l"
{ return token (ACE_RESUME); }
//	ACE_YY_BREAK
case 6:
ACE_YY_RULE_SETUP
#line 46 "Svc_Conf.l"
{ return token (ACE_REMOVE); }
//	ACE_YY_BREAK
case 7:
ACE_YY_RULE_SETUP
#line 47 "Svc_Conf.l"
{ return token (ACE_USTREAM); }
//	ACE_YY_BREAK
case 8:
ACE_YY_RULE_SETUP
#line 48 "Svc_Conf.l"
{ return token (ACE_MODULE_T); }
//	ACE_YY_BREAK
case 9:
ACE_YY_RULE_SETUP
#line 49 "Svc_Conf.l"
{ return token (ACE_SVC_OBJ_T); }
//	ACE_YY_BREAK
case 10:
ACE_YY_RULE_SETUP
#line 50 "Svc_Conf.l"
{ return token (ACE_STREAM_T); }
//	ACE_YY_BREAK
case 11:
ACE_YY_RULE_SETUP
#line 51 "Svc_Conf.l"
{ return token (ACE_ACTIVE); }
//	ACE_YY_BREAK
case 12:
ACE_YY_RULE_SETUP
#line 52 "Svc_Conf.l"
{ return token (ACE_INACTIVE); }
//	ACE_YY_BREAK
case 13:
ACE_YY_RULE_SETUP
#line 53 "Svc_Conf.l"
{ return token (ACE_COLON); }
//	ACE_YY_BREAK
case 14:
ACE_YY_RULE_SETUP
#line 54 "Svc_Conf.l"
{ return token (ACE_STAR); }
//	ACE_YY_BREAK
case 15:
ACE_YY_RULE_SETUP
#line 55 "Svc_Conf.l"
{ return token (ACE_LPAREN); }
//	ACE_YY_BREAK
case 16:
ACE_YY_RULE_SETUP
#line 56 "Svc_Conf.l"
{ return token (ACE_RPAREN); }
//	ACE_YY_BREAK
case 17:
ACE_YY_RULE_SETUP
#line 57 "Svc_Conf.l"
{ return token (ACE_LBRACE); }
//	ACE_YY_BREAK
case 18:
ACE_YY_RULE_SETUP
#line 58 "Svc_Conf.l"
{ return token (ACE_RBRACE); }
//	ACE_YY_BREAK
case 19:
ACE_YY_RULE_SETUP
#line 59 "Svc_Conf.l"
{ // Check for first type of string, i.e.,
                        // "double quotes" delimited.  
                        char *s = strrchr (ace_yytext, '"');
                        if (s == 0)
                          // Check for second type of string, i.e.,
                          // 'single quotes' delimited.
                          s = strrchr (ace_yytext, '\'');

                        ACE_ASSERT (s != 0);
                        // Eliminate the opening and closing double or
                        // single quotes.
                        *s = '\0';
			ace_yyleng -= 1;
                        ace_yylval.ident_ = ace_obstack->copy (ace_yytext + 1, ace_yyleng);
			return token (ACE_STRING); }
//	ACE_YY_BREAK
case 20:
ACE_YY_RULE_SETUP
#line 74 "Svc_Conf.l"
{
		        ace_yylval.ident_ = ace_obstack->copy (ace_yytext, ace_yyleng);
			return token (ACE_IDENT);
		      }
//	ACE_YY_BREAK
case 21:
ACE_YY_RULE_SETUP
#line 78 "Svc_Conf.l"
{
		        ace_yylval.ident_ = ace_obstack->copy (ace_yytext, ace_yyleng);
			return token (ACE_PATHNAME);
		      }
//	ACE_YY_BREAK
case 22:
ACE_YY_RULE_SETUP
#line 82 "Svc_Conf.l"
; /* EMPTY */
	ACE_YY_BREAK
case 23:
ACE_YY_RULE_SETUP
#line 83 "Svc_Conf.l"
{ ace_yylineno++; }
	ACE_YY_BREAK
case 24:
ACE_YY_RULE_SETUP
#line 84 "Svc_Conf.l"
{ ACE_ERROR ((LM_ERROR,
                                ACE_LIB_TEXT ("unknown character = (%d"), 
                                          *ace_yytext));
                        if (ACE_OS::ace_isprint (*ace_yytext))
                          ACE_ERROR ((LM_ERROR, ACE_LIB_TEXT ("|%c"), *ace_yytext));
                        ACE_ERROR ((LM_ERROR, ACE_LIB_TEXT (")\n")));
                      }
	ACE_YY_BREAK
case ACE_YY_STATE_EOF(INITIAL):
case ACE_YY_STATE_EOF(PARAMETERS):
case ACE_YY_STATE_EOF(NORMAL):
#line 91 "Svc_Conf.l"
{ ACE_YY_NEW_FILE; ace_yyterminate(); }
//	ACE_YY_BREAK
case 25:
ACE_YY_RULE_SETUP
#line 92 "Svc_Conf.l"
ACE_SVC_CONF_ECHO;
	ACE_YY_BREAK

	case ACE_YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int ace_yy_amount_of_matched_text = (int) (ace_yy_cp - ace_yytext_ptr) - 1;

		/* Undo the effects of ACE_YY_DO_BEFORE_ACTION. */
		*ace_yy_cp = ace_yy_hold_char;
		ACE_YY_RESTORE_ACE_YY_MORE_OFFSET

		if ( ace_yy_current_buffer->ace_yy_buffer_status == ACE_YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed ace_yyin at a new source and called
			 * ace_yylex().  If so, then we have to assure
			 * consistency between ace_yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			ace_yy_n_chars = ace_yy_current_buffer->ace_yy_n_chars;
			ace_yy_current_buffer->ace_yy_input_file = ace_yyin;
			ace_yy_current_buffer->ace_yy_buffer_status = ACE_YY_BUFFER_NORMAL;
			}

		/* Note that here we test for ace_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since ace_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( ace_yy_c_buf_p <= &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars] )
			{ /* This was really a NUL. */
			ace_yy_state_type ace_yy_next_state;

			ace_yy_c_buf_p = ace_yytext_ptr + ace_yy_amount_of_matched_text;

			ace_yy_current_state = ace_yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * ace_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			ace_yy_next_state = ace_yy_try_NUL_trans( ace_yy_current_state );

			ace_yy_bp = ace_yytext_ptr + ACE_YY_MORE_ADJ;

			if ( ace_yy_next_state )
				{
				/* Consume the NUL. */
				ace_yy_cp = ++ace_yy_c_buf_p;
				ace_yy_current_state = ace_yy_next_state;
				goto ace_yy_match;
				}

			else
				{
				ace_yy_cp = ace_yy_c_buf_p;
				goto ace_yy_find_action;
				}
			}

		else switch ( ace_yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				ace_yy_did_buffer_switch_on_eof = 0;

				if ( ace_yywrap() )
					{
					/* Note: because we've taken care in
					 * ace_yy_get_next_buffer() to have set up
					 * ace_yytext, we can now set up
					 * ace_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * ACE_YY_NULL, it'll still work - another
					 * ACE_YY_NULL will get returned.
					 */
					ace_yy_c_buf_p = ace_yytext_ptr + ACE_YY_MORE_ADJ;

					ace_yy_act = ACE_YY_STATE_EOF(ACE_YY_START);
					goto do_action;
					}

				else
					{
					if ( ! ace_yy_did_buffer_switch_on_eof )
						ACE_YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				ace_yy_c_buf_p =
					ace_yytext_ptr + ace_yy_amount_of_matched_text;

				ace_yy_current_state = ace_yy_get_previous_state();

				ace_yy_cp = ace_yy_c_buf_p;
				ace_yy_bp = ace_yytext_ptr + ACE_YY_MORE_ADJ;
				goto ace_yy_match;

			case EOB_ACT_LAST_MATCH:
				ace_yy_c_buf_p =
				&ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars];

				ace_yy_current_state = ace_yy_get_previous_state();

				ace_yy_cp = ace_yy_c_buf_p;
				ace_yy_bp = ace_yytext_ptr + ACE_YY_MORE_ADJ;
				goto ace_yy_find_action;
			}
		break;
		}

	default:
		ACE_YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of ace_yylex */


/* ace_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int ace_yy_get_next_buffer()
	{
	register char *dest = ace_yy_current_buffer->ace_yy_ch_buf;
	register char *source = ace_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( ace_yy_c_buf_p > &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars + 1] )
		ACE_YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( ace_yy_current_buffer->ace_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( ace_yy_c_buf_p - ace_yytext_ptr - ACE_YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (ace_yy_c_buf_p - ace_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( ace_yy_current_buffer->ace_yy_buffer_status == ACE_YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		ace_yy_current_buffer->ace_yy_n_chars = ace_yy_n_chars = 0;

	else
		{
		int num_to_read =
			ace_yy_current_buffer->ace_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef ACE_YY_USES_REJECT
			ACE_YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			ACE_YY_BUFFER_STATE b = ace_yy_current_buffer;

			int ace_yy_c_buf_p_offset =
				(int) (ace_yy_c_buf_p - b->ace_yy_ch_buf);

			if ( b->ace_yy_is_our_buffer )
				{
				int new_size = b->ace_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->ace_yy_buf_size += b->ace_yy_buf_size / 8;
				else
					b->ace_yy_buf_size *= 2;

				b->ace_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ace_yy_flex_realloc( (void *) b->ace_yy_ch_buf,
							 b->ace_yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->ace_yy_ch_buf = 0;

			if ( ! b->ace_yy_ch_buf )
				ACE_YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			ace_yy_c_buf_p = &b->ace_yy_ch_buf[ace_yy_c_buf_p_offset];

			num_to_read = ace_yy_current_buffer->ace_yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > ACE_YY_READ_BUF_SIZE )
			num_to_read = ACE_YY_READ_BUF_SIZE;

		/* Read in more data. */
		ACE_YY_INPUT( (&ace_yy_current_buffer->ace_yy_ch_buf[number_to_move]),
			ace_yy_n_chars, num_to_read );

		ace_yy_current_buffer->ace_yy_n_chars = ace_yy_n_chars;
		}

	if ( ace_yy_n_chars == 0 )
		{
		if ( number_to_move == ACE_YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ace_yyrestart( ace_yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			ace_yy_current_buffer->ace_yy_buffer_status =
				ACE_YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	ace_yy_n_chars += number_to_move;
	ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars] = ACE_YY_END_OF_BUFFER_CHAR;
	ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars + 1] = ACE_YY_END_OF_BUFFER_CHAR;

	ace_yytext_ptr = &ace_yy_current_buffer->ace_yy_ch_buf[0];

	return ret_val;
	}


/* ace_yy_get_previous_state - get the state just before the EOB char was reached */

static ace_yy_state_type ace_yy_get_previous_state()
	{
	register ace_yy_state_type ace_yy_current_state;
	register char *ace_yy_cp;

	ace_yy_current_state = ace_yy_start;
	ace_yy_current_state += ACE_YY_AT_BOL();

	for ( ace_yy_cp = ace_yytext_ptr + ACE_YY_MORE_ADJ; ace_yy_cp < ace_yy_c_buf_p; ++ace_yy_cp )
		{
		register ACE_YY_CHAR ace_yy_c = (*ace_yy_cp ? ace_yy_ec[ACE_YY_SC_TO_UI(*ace_yy_cp)] : 1);
		if ( ace_yy_accept[ace_yy_current_state] )
			{
			ace_yy_last_accepting_state = ace_yy_current_state;
			ace_yy_last_accepting_cpos = ace_yy_cp;
			}
		while ( ace_yy_chk[ace_yy_base[ace_yy_current_state] + ace_yy_c] != ace_yy_current_state )
			{
			ace_yy_current_state = (int) ace_yy_def[ace_yy_current_state];
			if ( ace_yy_current_state >= 107 )
				ace_yy_c = ace_yy_meta[(unsigned int) ace_yy_c];
			}
		ace_yy_current_state = ace_yy_nxt[ace_yy_base[ace_yy_current_state] + (unsigned int) ace_yy_c];
		}

	return ace_yy_current_state;
	}


/* ace_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = ace_yy_try_NUL_trans( current_state );
 */

#ifdef ACE_YY_USE_PROTOS
static ace_yy_state_type ace_yy_try_NUL_trans( ace_yy_state_type ace_yy_current_state )
#else
static ace_yy_state_type ace_yy_try_NUL_trans( ace_yy_current_state )
ace_yy_state_type ace_yy_current_state;
#endif
	{
	register int ace_yy_is_jam;
	register char *ace_yy_cp = ace_yy_c_buf_p;

	register ACE_YY_CHAR ace_yy_c = 1;
	if ( ace_yy_accept[ace_yy_current_state] )
		{
		ace_yy_last_accepting_state = ace_yy_current_state;
		ace_yy_last_accepting_cpos = ace_yy_cp;
		}
	while ( ace_yy_chk[ace_yy_base[ace_yy_current_state] + ace_yy_c] != ace_yy_current_state )
		{
		ace_yy_current_state = (int) ace_yy_def[ace_yy_current_state];
		if ( ace_yy_current_state >= 107 )
			ace_yy_c = ace_yy_meta[(unsigned int) ace_yy_c];
		}
	ace_yy_current_state = ace_yy_nxt[ace_yy_base[ace_yy_current_state] + (unsigned int) ace_yy_c];
	ace_yy_is_jam = (ace_yy_current_state == 106);

	return ace_yy_is_jam ? 0 : ace_yy_current_state;
	}


#ifndef ACE_YY_NO_UNPUT
#ifdef ACE_YY_USE_PROTOS
static void ace_yyunput( int c, register char *ace_yy_bp )
#else
static void ace_yyunput( c, ace_yy_bp )
int c;
register char *ace_yy_bp;
#endif
	{
	register char *ace_yy_cp = ace_yy_c_buf_p;

	/* undo effects of setting up ace_yytext */
	*ace_yy_cp = ace_yy_hold_char;

	if ( ace_yy_cp < ace_yy_current_buffer->ace_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = ace_yy_n_chars + 2;
		register char *dest = &ace_yy_current_buffer->ace_yy_ch_buf[
					ace_yy_current_buffer->ace_yy_buf_size + 2];
		register char *source =
				&ace_yy_current_buffer->ace_yy_ch_buf[number_to_move];

		while ( source > ace_yy_current_buffer->ace_yy_ch_buf )
			*--dest = *--source;

		ace_yy_cp += (int) (dest - source);
		ace_yy_bp += (int) (dest - source);
		ace_yy_current_buffer->ace_yy_n_chars =
			ace_yy_n_chars = ace_yy_current_buffer->ace_yy_buf_size;

		if ( ace_yy_cp < ace_yy_current_buffer->ace_yy_ch_buf + 2 )
			ACE_YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--ace_yy_cp = (char) c;


	ace_yytext_ptr = ace_yy_bp;
	ace_yy_hold_char = *ace_yy_cp;
	ace_yy_c_buf_p = ace_yy_cp;
	}
#endif	/* ifndef ACE_YY_NO_UNPUT */


#ifdef __cplusplus
static int ace_yyinput()
#else
static int input()
#endif
	{
	int c;

	*ace_yy_c_buf_p = ace_yy_hold_char;

	if ( *ace_yy_c_buf_p == ACE_YY_END_OF_BUFFER_CHAR )
		{
		/* ace_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( ace_yy_c_buf_p < &ace_yy_current_buffer->ace_yy_ch_buf[ace_yy_n_chars] )
			/* This was really a NUL. */
			*ace_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = ace_yy_c_buf_p - ace_yytext_ptr;
			++ace_yy_c_buf_p;

			switch ( ace_yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because ace_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ace_yyrestart( ace_yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( ace_yywrap() )
						return EOF;

					if ( ! ace_yy_did_buffer_switch_on_eof )
						ACE_YY_NEW_FILE;
#ifdef __cplusplus
					return ace_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					ace_yy_c_buf_p = ace_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) ace_yy_c_buf_p;	/* cast for 8-bit char's */
	*ace_yy_c_buf_p = '\0';	/* preserve ace_yytext */
	ace_yy_hold_char = *++ace_yy_c_buf_p;

	ace_yy_current_buffer->ace_yy_at_bol = (c == '\n');

	return c;
	}


#ifdef ACE_YY_USE_PROTOS
void ace_yyrestart( FILE *input_file )
#else
void ace_yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! ace_yy_current_buffer )
		ace_yy_current_buffer = ace_yy_create_buffer( ace_yyin, ACE_YY_BUF_SIZE );

	ace_yy_init_buffer( ace_yy_current_buffer, input_file );
	ace_yy_load_buffer_state();
	}


#ifdef ACE_YY_USE_PROTOS
void ace_yy_switch_to_buffer( ACE_YY_BUFFER_STATE new_buffer )
#else
void ace_yy_switch_to_buffer( new_buffer )
ACE_YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( ace_yy_current_buffer == new_buffer )
		return;

	if ( ace_yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*ace_yy_c_buf_p = ace_yy_hold_char;
		ace_yy_current_buffer->ace_yy_buf_pos = ace_yy_c_buf_p;
		ace_yy_current_buffer->ace_yy_n_chars = ace_yy_n_chars;
		}

	ace_yy_current_buffer = new_buffer;
	ace_yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (ace_yywrap()) processing, but the only time this flag
	 * is looked at is after ace_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	ace_yy_did_buffer_switch_on_eof = 1;
	}


#ifdef ACE_YY_USE_PROTOS
void ace_yy_load_buffer_state( void )
#else
void ace_yy_load_buffer_state()
#endif
	{
	ace_yy_n_chars = ace_yy_current_buffer->ace_yy_n_chars;
	ace_yytext_ptr = ace_yy_c_buf_p = ace_yy_current_buffer->ace_yy_buf_pos;
	ace_yyin = ace_yy_current_buffer->ace_yy_input_file;
	ace_yy_hold_char = *ace_yy_c_buf_p;
	}


#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_create_buffer( FILE *file, int size )
#else
ACE_YY_BUFFER_STATE ace_yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	ACE_YY_BUFFER_STATE b;

	b = (ACE_YY_BUFFER_STATE) ace_yy_flex_alloc( sizeof( struct ace_yy_buffer_state ) );
	if ( ! b )
		ACE_YY_FATAL_ERROR( "out of dynamic memory in ace_yy_create_buffer()" );

	b->ace_yy_buf_size = size;

	/* ace_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->ace_yy_ch_buf = (char *) ace_yy_flex_alloc( b->ace_yy_buf_size + 2 );
	if ( ! b->ace_yy_ch_buf )
		ACE_YY_FATAL_ERROR( "out of dynamic memory in ace_yy_create_buffer()" );

	b->ace_yy_is_our_buffer = 1;

	ace_yy_init_buffer( b, file );

	return b;
	}


#ifdef ACE_YY_USE_PROTOS
void ace_yy_delete_buffer( ACE_YY_BUFFER_STATE b )
#else
void ace_yy_delete_buffer( b )
ACE_YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == ace_yy_current_buffer )
		ace_yy_current_buffer = (ACE_YY_BUFFER_STATE) 0;

	if ( b->ace_yy_is_our_buffer )
		ace_yy_flex_free( (void *) b->ace_yy_ch_buf );

	ace_yy_flex_free( (void *) b );
	}


#ifndef ACE_YY_ALWAYS_INTERACTIVE
#ifndef ACE_YY_NEVER_INTERACTIVE
extern int nop_isatty ACE_YY_PROTO(( int ));
#endif
#endif

#ifdef ACE_YY_USE_PROTOS
void ace_yy_init_buffer( ACE_YY_BUFFER_STATE b, FILE *file )
#else
void ace_yy_init_buffer( b, file )
ACE_YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	ace_yy_flush_buffer( b );

	b->ace_yy_input_file = file;
	b->ace_yy_fill_buffer = 1;

#if ACE_YY_ALWAYS_INTERACTIVE
	b->ace_yy_is_interactive = 1;
#else
#if ACE_YY_NEVER_INTERACTIVE
	b->ace_yy_is_interactive = 0;
#else
	b->ace_yy_is_interactive = file ? (ACE_OS::isatty( fileno (file) ) > 0) : 0;
#endif
#endif
	}


#ifdef ACE_YY_USE_PROTOS
void ace_yy_flush_buffer( ACE_YY_BUFFER_STATE b )
#else
void ace_yy_flush_buffer( b )
ACE_YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->ace_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->ace_yy_ch_buf[0] = ACE_YY_END_OF_BUFFER_CHAR;
	b->ace_yy_ch_buf[1] = ACE_YY_END_OF_BUFFER_CHAR;

	b->ace_yy_buf_pos = &b->ace_yy_ch_buf[0];

	b->ace_yy_at_bol = 1;
	b->ace_yy_buffer_status = ACE_YY_BUFFER_NEW;

	if ( b == ace_yy_current_buffer )
		ace_yy_load_buffer_state();
	}


#ifndef ACE_YY_NO_SCAN_BUFFER
#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_scan_buffer( char *base, ace_yy_size_t size )
#else
ACE_YY_BUFFER_STATE ace_yy_scan_buffer( base, size )
char *base;
ace_yy_size_t size;
#endif
	{
	ACE_YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != ACE_YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != ACE_YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (ACE_YY_BUFFER_STATE) ace_yy_flex_alloc( sizeof( struct ace_yy_buffer_state ) );
	if ( ! b )
		ACE_YY_FATAL_ERROR( "out of dynamic memory in ace_yy_scan_buffer()" );

	b->ace_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->ace_yy_buf_pos = b->ace_yy_ch_buf = base;
	b->ace_yy_is_our_buffer = 0;
	b->ace_yy_input_file = 0;
	b->ace_yy_n_chars = b->ace_yy_buf_size;
	b->ace_yy_is_interactive = 0;
	b->ace_yy_at_bol = 1;
	b->ace_yy_fill_buffer = 0;
	b->ace_yy_buffer_status = ACE_YY_BUFFER_NEW;

	ace_yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef ACE_YY_NO_SCAN_STRING
#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_scan_string( ace_yyconst char *ace_yy_str )
#else
ACE_YY_BUFFER_STATE ace_yy_scan_string( ace_yy_str )
ace_yyconst char *ace_yy_str;
#endif
	{
	int len;
	for ( len = 0; ace_yy_str[len]; ++len )
		;

	return ace_yy_scan_bytes( ace_yy_str, len );
	}
#endif


#ifndef ACE_YY_NO_SCAN_BYTES
#ifdef ACE_YY_USE_PROTOS
ACE_YY_BUFFER_STATE ace_yy_scan_bytes( ace_yyconst char *bytes, int len )
#else
ACE_YY_BUFFER_STATE ace_yy_scan_bytes( bytes, len )
ace_yyconst char *bytes;
int len;
#endif
	{
	ACE_YY_BUFFER_STATE b;
	char *buf;
	ace_yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) ace_yy_flex_alloc( n );
	if ( ! buf )
		ACE_YY_FATAL_ERROR( "out of dynamic memory in ace_yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = ACE_YY_END_OF_BUFFER_CHAR;

	b = ace_yy_scan_buffer( buf, n );
	if ( ! b )
		ACE_YY_FATAL_ERROR( "bad buffer in ace_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->ace_yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef ACE_YY_NO_PUSH_STATE
#ifdef ACE_YY_USE_PROTOS
static void ace_yy_push_state( int new_state )
#else
static void ace_yy_push_state( new_state )
int new_state;
#endif
	{
	if ( ace_yy_start_stack_ptr >= ace_yy_start_stack_depth )
		{
		ace_yy_size_t new_size;

		ace_yy_start_stack_depth += ACE_YY_START_STACK_INCR;
		new_size = ace_yy_start_stack_depth * sizeof( int );

		if ( ! ace_yy_start_stack )
			ace_yy_start_stack = (int *) ace_yy_flex_alloc( new_size );

		else
			ace_yy_start_stack = (int *) ace_yy_flex_realloc(
					(void *) ace_yy_start_stack, new_size );

		if ( ! ace_yy_start_stack )
			ACE_YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	ace_yy_start_stack[ace_yy_start_stack_ptr++] = ACE_YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef ACE_YY_NO_POP_STATE
static void ace_yy_pop_state()
	{
	if ( --ace_yy_start_stack_ptr < 0 )
		ACE_YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(ace_yy_start_stack[ace_yy_start_stack_ptr]);
	}
#endif


#ifndef ACE_YY_NO_TOP_STATE
static int ace_yy_top_state()
	{
	return ace_yy_start_stack[ace_yy_start_stack_ptr - 1];
	}
#endif

#ifndef ACE_YY_EXIT_FAILURE
#define ACE_YY_EXIT_FAILURE 2
#endif

#ifdef ACE_YY_USE_PROTOS
static void ace_yy_fatal_error( ace_yyconst char msg[] )
#else
static void ace_yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( ACE_YY_EXIT_FAILURE );
	}



/* Redefine ace_yyless() so it works in section 3 code. */

#undef ace_yyless
#define ace_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up ace_yytext. */ \
		ace_yytext[ace_yyleng] = ace_yy_hold_char; \
		ace_yy_c_buf_p = ace_yytext + n; \
		ace_yy_hold_char = *ace_yy_c_buf_p; \
		*ace_yy_c_buf_p = '\0'; \
		ace_yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef ace_yytext_ptr
#ifdef ACE_YY_USE_PROTOS
static void ace_yy_flex_strncpy( char *s1, ace_yyconst char *s2, int n )
#else
static void ace_yy_flex_strncpy( s1, s2, n )
char *s1;
ace_yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef ACE_YY_NEED_STRLEN
#ifdef ACE_YY_USE_PROTOS
static int ace_yy_flex_strlen( ace_yyconst char *s )
#else
static int ace_yy_flex_strlen( s )
ace_yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef ACE_YY_USE_PROTOS
static void *ace_yy_flex_alloc( ace_yy_size_t size )
#else
static void *ace_yy_flex_alloc( size )
ace_yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef ACE_YY_USE_PROTOS
static void *ace_yy_flex_realloc( void *ptr, ace_yy_size_t size )
#else
static void *ace_yy_flex_realloc( ptr, size )
void *ptr;
ace_yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef ACE_YY_USE_PROTOS
static void ace_yy_flex_free( void *ptr )
#else
static void ace_yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ACE_MALLOC_T (ptr) );
	}

#if ACE_YY_MAIN
int main()
	{
	ace_yylex();
	return 0;
	}
#endif
#line 92 "Svc_Conf.l"

int
ace_yywrap (void)
{
  ::fflush (ace_yyin);
  ace_yytext[0] = '#';
  ace_yyleng = 0;

  // This needs to be freed to prevent a memory leak.
  ace_yy_delete_parse_buffer ();

  return 1;
}

void
ace_yy_delete_parse_buffer (void)
{
  if (ace_yy_current_buffer != 0) 
    {
      ace_yy_delete_buffer (ace_yy_current_buffer);
      ace_yy_current_buffer = 0;
    }
}
