#----------------------------------------------------------------------------
#       Borland Makefile
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
<%marker(top)%>
<%foreach(configurations)%>
!ifdef <%uc(configuration)%>
OCFLAGS      = <%if(optimize)%>-O2<%endif%><%foreach(defines)%> -D<%define%><%endfor%>
INTERMEDIATE = <%intermediate_dir%>\<%noextension(project_file)%>
LIBMODIFIER  = <%lib_modifier%>
<%if(postlinkrmext)%>
POSTLINKRM   = <%postlinkrmext%>
<%endif%>
<%if(exename)%>
EXEOUTPUTDIR = <%exeoutputdir(".")%>\\
<%endif%>
!else
<%endfor%>
!error You must define one of these valid configurations: <%configurations%>
<%foreach(configurations)%>
!endif
<%endfor%>

<%foreach(compilers)%>
OBJ_EXT      = <%obj_ext%>
DLL_EXT      = <%dll_ext%>
LIB_EXT      = <%lib_ext%>
EXE_EXT      = <%exe_ext%>
CC           = <%cc%>
RC           = <%rc%>
LINK         = <%link%>
TLIB         = <%tlib%>
THREADFLAGS  = <%thflags%>
DLLFLAGS     = <%dllflags%>
LIBFLAGS     = <%libflags%>
EXEFLAGS     = <%exeflags%>
<%endfor%>
<%if(exename)%>
NAME         = <%exename%>
<%else%>
<%if(sharedname)%>
NAME         = <%sharedname%>$(LIBMODIFIER)
<%else%>
<%if(staticname)%>
NAME         = <%staticname%>$(LIBMODIFIER)
<%endif%>
<%endif%>
<%endif%>
CPPDIR       = <%cppdir%>
<%if(exename || sharedname || staticname)%>

OBJFILES = \
<%foreach(source_files)%>
           $(INTERMEDIATE)\<%basenoextension(source_file)%>$(OBJ_EXT)<%fornotlast(" \\")%>
<%endfor%>
<%endif%>
<%if(libpaths)%>

LFLAGS   = \
<%foreach(libpaths)%>
           -L"<%libpath%>" -j"<%libpath%>"<%fornotlast(" \\")%>
<%endfor%>
<%endif%>

LIBFILES = \
<%foreach(libs)%>
           <%lib%>$(LIBMODIFIER)$(LIB_EXT) \
<%endfor%>
<%foreach(pure_libs)%>
           <%pure_lib%> \
<%endfor%>
<%foreach(lit_libs)%>
           <%lit_lib%>$(LIB_EXT) \
<%endfor%>
           <%common_libs%>

<%if(resource_files)%>

RESOURCE = \
<%foreach(resource_files)%>
           $(INTERMEDIATE)\<%noextension(resource_file)%>.res<%fornotlast(" \\")%>
<%endfor%>
<%endif%>

CFLAGS = \
<%if(pch_header)%>
<%foreach(pch_defines)%>
# Borland precompiled headers choke on some header files.
#         -D<%pch_define%> \
<%endfor%>
<%endif%> 
<%foreach(macros common_defines)%>
         -D<%macro%> \
<%endfor%>
<%foreach(includes)%>
         -I"<%include%>" \
<%endfor%>
<%if(type_is_static || need_staticflags)%>
<%if(staticflags)%>
<%foreach(staticflags)%>
         -D<%staticflag%> \
<%endfor%>
<%endif%>
<%else%>
<%if(dynamicflags)%>
<%foreach(dynamicflags)%>
         -D<%dynamicflag%> \
<%endfor%>
<%endif%>
<%endif%>
         $(DUMMY_VALUE_NOT_ENDING_IN_BACKSLASH)

<%if(pch_header)%>    

# Borland precompiled headers choke on some header files.
#PCH_HEADER=<%pch_header%>
<%endif%>
<%marker(macros)%>
<%marker(local)%>
<%if(custom_types)%>

GENERATED_DIRTY =<%foreach(custom_types)%><%foreach(custom_type->input_files)%><%if(custom_type->input_file->output_files)%><%foreach(custom_type->input_file->output_files)%> <%if(flag_overrides(custom_type->input_file, gendir))%><%flag_overrides(custom_type->input_file, gendir)%>\<%basename(custom_type->input_file->output_file)%><%else%><%custom_type->input_file->output_file%><%endif%><%endfor%><%endif%><%endfor%><%endfor%>
<%foreach(custom_types)%>
<%if(custom_types->libpath)%>
PATH := $(PATH);<%custom_type->libpath%>

<%endif%>
<%foreach(custom_type->input_files)%>
<%if(custom_type->input_file->output_files)%>
<%foreach(custom_type->input_file->output_files)%>
<%if(flag_overrides(custom_type->input_file, gendir))%><%flag_overrides(custom_type->input_file, gendir)%>\<%basename(custom_type->input_file->output_file)%><%else%><%custom_type->input_file->output_file%><%endif%>: <%custom_type->input_file%>
	<%custom_type->command%> <%if(pch_header)%><%if(custom_type->pch_option)%><%custom_type->pch_option%><%pch_header%> <%endif%><%endif%><%if(flag_overrides(custom_type->input_file, commandflags))%><%flag_overrides(custom_type->input_file, commandflags)%><%else%><%custom_type->commandflags%><%endif%> <%custom_type->input_file%> <%if(custom_type->output_option)%><%custom_type->output_option%> $@<%endif%>

<%endfor%>
<%endif%>
<%endfor%>
<%endfor%>
all: $(GENERATED_DIRTY)

<%endif%>
<%if(exename)%>
OUTPUTDIR = <%if(install)%><%install%>\\<%else%>$(EXEOUTPUTDIR)<%endif%>
all: $(OUTPUTDIR)$(NAME)$(EXE_EXT)

$(OUTPUTDIR)$(NAME)$(EXE_EXT): $(OBJFILES) $(RESOURCE)
	@if not exist "$(OUTPUTDIR)" mkdir "$(OUTPUTDIR)"
	$(LINK) @&&!
	$(EXEFLAGS) $(LFLAGS) <%startup_obj%> $(OBJFILES), $(OUTPUTDIR)$(NAME)$(EXE_EXT),, $(LIBFILES),, $(RESOURCE)
!
!ifdef POSTLINKRM
	if exist "$(OUTPUTDIR)$(NAME)$(POSTLINKRM)" del $(OUTPUTDIR)$(NAME)$(POSTLINKRM)
!endif

<%endif%>
<%if(sharedname)%>
OUTPUTDIR = <%if(dllout)%><%dllout%><%else%><%libout%><%endif%>\\
all: $(OUTPUTDIR)$(NAME)$(DLL_EXT)

$(OUTPUTDIR)$(NAME)$(DLL_EXT): $(OBJFILES) $(RESOURCE)
	@if not exist "$(OUTPUTDIR)" mkdir "$(OUTPUTDIR)"
	$(LINK) @&&!
	$(DLLFLAGS) $(LFLAGS) <%startup_obj%> $(OBJFILES), $(OUTPUTDIR)$(NAME)$(DLL_EXT),, $(LIBFILES),, $(RESOURCE)
!
!ifdef POSTLINKRM
	del $(OUTPUTDIR)$(NAME)$(POSTLINKRM)
!endif

<%endif%>
<%if(type_is_static)%>
<%if(staticname)%>
OUTPUTDIR = <%libout%>\\
all: $(OUTPUTDIR)$(NAME)$(LIB_EXT)

$(OUTPUTDIR)$(NAME)$(LIB_EXT): $(OBJFILES)
	@if not exist "$(OUTPUTDIR)" mkdir "$(OUTPUTDIR)"
	$(TLIB) $(LIBFLAGS) $(OUTPUTDIR)$(NAME)$(LIB_EXT) @&&!
+ $(**: = &^
+ )
!

<%endif%>
<%endif%>
.path$(OBJ_EXT) = $(INTERMEDIATE)

.path.cpp = $(CPPDIR)
.cpp$(OBJ_EXT):
	@if not exist "$(INTERMEDIATE)" mkdir "$(INTERMEDIATE)"
	$(CC) $(OCFLAGS) $(THREADFLAGS) $(CFLAGS) -c -n$(@D) $<

.path.cxx = $(CPPDIR)
.cxx$(OBJ_EXT):
	@if not exist "$(INTERMEDIATE)" mkdir "$(INTERMEDIATE)"
	$(CC) $(OCFLAGS) $(THREADFLAGS) $(CFLAGS) -c -n$(@D) $<

.path.cc = $(CPPDIR)
.cc$(OBJ_EXT):
	@if not exist "$(INTERMEDIATE)" mkdir "$(INTERMEDIATE)"
	$(CC) $(OCFLAGS) $(THREADFLAGS) $(CFLAGS) -c -n$(@D) $<

.path.C = $(CPPDIR)
.C$(OBJ_EXT):
	@if not exist "$(INTERMEDIATE)" mkdir "$(INTERMEDIATE)"
	$(CC) $(OCFLAGS) $(THREADFLAGS) $(CFLAGS) -c -n$(@D) $<

.path.c = $(CPPDIR)
.c$(OBJ_EXT):
	@if not exist "$(INTERMEDIATE)" mkdir "$(INTERMEDIATE)"
	$(CC) $(OCFLAGS) $(THREADFLAGS) $(CFLAGS) -c -n$(@D) $<

<%if(resource_files)%>
.path.res = $(INTERMEDIATE)

.path.rc = <%rcdir%>
.rc.res:
	@if not exist "$(INTERMEDIATE)" mkdir "$(INTERMEDIATE)"
	$(RC) -fo$@ $<

<%endif%>
clean:
	if exist "$(INTERMEDIATE)" rmdir /s/q $(INTERMEDIATE)

realclean: clean
<%if(custom_types)%>
	if exist "$(GENERATED_DIRTY)" del $(GENERATED_DIRTY)
<%endif%>
<%if(exename)%>
	if exist "$(OUTPUTDIR)$(NAME)$(EXE_EXT)" del $(OUTPUTDIR)$(NAME)$(EXE_EXT)
<%else%>
	if exist "$(OUTPUTDIR)$(NAME)$(LIB_EXT)" del $(OUTPUTDIR)$(NAME)$(LIB_EXT)
<%endif%>
<%if(sharedname)%>
	if exist "$(OUTPUTDIR)$(NAME)$(DLL_EXT)" del $(OUTPUTDIR)$(NAME)$(DLL_EXT)
<%endif%>

<%marker(bottom)%>
