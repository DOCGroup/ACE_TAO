# -*- perl -*-
# $Id$
#
# This script checkouts ACE from CVS, updates the "clone" directory,
# compiles $ACE_ROOT/ace and $ACE_ROOT/tests and finally runs
# $ACE_ROOT/tests/run_tests.sh.
#
# If it detects any problem it send email.
#
# DO NOT invoke this script from your crontab, use
# auto_compile_wrapper for that.
#
# This script requires Perl5.
#
# TODO: Modify the script or split it in such a way that the main copy
# can be obtained either using cvs or downloading the lastest beta
# from the WWW.
#

eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
    & eval 'exec perl -S $0 $argv:q'
    if 0;

# The first three lines above let this script run without specifying the
# full path to perl, as long as it is in the user's PATH.
# Taken from perlrun man page.

use File::Basename;
use FileHandle;
require POSIX;

use lib "$ENV{ACE_ROOT}/bin";
require run_all_list;

# This is the module we will checkout, someday someone could define a
# smaller module.
$MODULE='ACE_wrappers';

# This are the sub-directories (in the module) we really compile.

# Find out the command name.
$CMD = basename($0);

# Extract configuration information from command line.
# TODO: Some validation and checking should be done here.
$CHECKOUT = $ARGV[0];
$BUILD    = $ARGV[1];
$LOGDIR   = $ARGV[2];
$ADMIN    = $ARGV[3];
$MAIL = "mail";
if ($#ARGV >= 4) {
  $MAIL     = $ARGV[4];
}

if (0) {

  @BUILD_LIST = ('ace');
  @RUN_LIST = ('TAO/tests/OctetSeq , run_test.pl');
  $ADMIN = $ENV{'USER'};

} else {

@BUILD_LIST=
    ('ace',
     'netsvcs',
     'tests',
     'apps/gperf',
     'websvcs',
#     'TAO/tao',
#     'TAO/TAO_IDL',
#     'TAO/orbsvcs',
#     'TAO/tests',
#     'TAO/examples/POA',
#     'TAO/performance-tests');
     'TAO');

# We obtain our revision to report errors.
$REVISION='$Revision$ ';

# When an error is found we try to die gracefully and send some email
# to ADMIN.

$disable_file = $LOGDIR . '/.disable';
$histfile = $LOGDIR . '/history';
$LOGBASE = POSIX::strftime("%b%d_%Y.log", localtime);
$LOGFILE = $LOGDIR . '/' . $LOGBASE;
$HOST = `hostname`;
chop $HOST;
$LOG_NAME =  $HOST . "_" . $BUILD . "_" . $LOGBASE;

sub mydie {
  # First clear the lock, so the next execution works...
  unlink $disable_file; # Ignore errors!

  # Now send a summary of the errors to the ADMIN account...
  local $to = $ADMIN;

  open (MAIL, "|".$MAIL.' -s [AUTO_COMPILE] '.$to)
    || die ("Cannot open mail pipe for: $msg\n");

  print MAIL 'The following message is brought to you by: ', "\n";
  print MAIL $CMD, ' [', $REVISION, "] for $BUILD on $CHECKOUT\n";

  local $m;
  foreach $m (@_) {
    print MAIL $m, "\n";
  }

  print MAIL "\nPlease check the following log for more info:\n\n";
  print MAIL 'http://www.cs.wustl.edu/~bugzilla/auto_compile_logs/',
             $LOG_NAME, "\n\n";

  close (MAIL); # Ignore errors....

  # Now send the complete log to bugzilla...
  local $bugs = 'bugzilla'.'@cs.wustl.edu';
  open (MAIL, "|".$MAIL.' -s AUTO_COMPILE_LOG='.$LOG_NAME.' '.$bugs)
    || die ("Cannot open mail pipe for: $LOG_NAME\n");

  print MAIL 'This is the log for: ', "\n";
  print MAIL $CMD, ' [', $REVISION, "] for $BUILD on $CHECKOUT\n";

  print MAIL "\n================================================================\n";

 if (open (THELOG, "$LOGFILE"))
    {
      while (<THELOG>) {
	print MAIL $_;
      }
      close (THELOG);
    }
  close (MAIL); # Ignore errors....

  print HIST 'FAILED', "\n";
  exit 0;
}

### MAIN FUNCTION

open(HIST, '>>' . $histfile)
    # Do not use 'mydie' to report the problem, it tries to use HIST....
    || die "cannot open history file \"$histfile\"\n";

$date = localtime;

print HIST $CMD, ': running at ', $date, ' ';

if (-f $disable_file) {
  print HIST "DISABLED\n";

  local $to = $ENV{'USER'};
  open (MAIL, "|".$MAIL.' -s [AUTO_COMPILE] '.$to)
    || die ("Cannot open mail pipe for: $msg\n");

  print MAIL 'The following message is brought to you by: ', "\n";
  print MAIL $CMD, ' [', $REVISION, "] for $BUILD on $CHECKOUT\n";

  print MAIL "DISABLED\n";

  close (MAIL)
    || die ("Cannot send mail for DISABLED execution\n");

  exit 0;
}

open (DISABLE, '>' . $disable_file)
    || mydie "cannot open disable file";
print DISABLE "auto_compile <$date> is running\n";
close (DISABLE)
    || mydie "cannot close disable file";

open(LOG, '>' . $LOGFILE)
    || mydie "cannot open log file";

LOG->autoflush ();

# The following lines are useful when debugging the script or wrapper.
# print LOG $CHECKOUT, " ", $BUILD, " ", $LOGDIR, " ", $ADMIN, "\n";
#while (($key,$value) = each %ENV) {
#  print LOG $key, " = ", $value, "\n";
#}

chdir($CHECKOUT)
    || mydie "Cannot chdir to $CHECKOUT";

$date = localtime;
print LOG "$CMD: starting checkout at ", $date, "\n";
open(CVS, "cvs -q checkout -P $MODULE 2>&1 |")
    || mydie "cannot start checkout of $MODULE";

$conflicts = 0;
while (<CVS>) {
    if (m/^C /) {
	$conflicts = 1;
    }
    print LOG $_;
}
close(CVS)
    || mydie "error while checking out $MODULE";
$date = localtime;
print LOG "$CMD: checkout finished at ", $date, "\n";

if ($conflicts != 0) {
    mydie "conflicts on checkout";
}

chdir($MODULE)
    || mydie "cannot chdir to $MODULE";

$date = localtime;
print LOG "$CMD: starting clone at ", $date, "\n";
open(MAKE, "perl bin/create_ace_build -a -v $BUILD 2>&1 |")
    || mydie "cannot clone directory";
while(<MAKE>) {
    print LOG $_;
}
close(MAKE)
    || mydie "error while cloning ACE_ROOT";
$date = localtime;
print LOG "$CMD: clone finished at ", $date, "\n";

chdir('build/' . $BUILD)
    || mydie "cannot chdir to $BUILD";

# This is needed for real make run....
$ENV{'ACE_ROOT'} = $CHECKOUT . '/' . $MODULE . '/build/' . $BUILD;
$ENV{'TAO_ROOT'} = $CHECKOUT . '/' . $MODULE . '/build/' . $BUILD . '/TAO';

@failures = ();
$MAKEFLAGS .= "";
foreach $i (@BUILD_LIST) {
    $date = localtime;
    print LOG "$CMD: =============================================\n";
    print LOG "$CMD: make for $i started at ", $date, "\n";
    open(MAKE, "make -k $MAKEFLAGS -C $i 2>&1 |")
	|| mydie "cannot start make for $i";

    local $current_dir = $i;
    local $last_error = "";
    while (<MAKE>) {
        chop;
        if ($^O eq 'hpux'
            && m/^Warning:[ \t]+[0-9]+ future errors were detected/) {
            next;
        }
        print LOG $_, "\n";

	if (m/^make(\[[0-9]+\])?: Entering directory /) {
	    s/^make(\[[0-9]+\])?: Entering directory //;
	    s%^$ENV{'ACE_ROOT'}/%%;
	    $current_dir = $_;
	}
	if (m/error:/i || m/error /i
	    || m/^make(\[[0-9]+\])?: \*\*\*/) {
	    if ($last_error ne $current_dir) {
		push @failures, "Error while compiling in $current_dir \n";
		$last_error = $current_dir;
	    }
	}
	if (m/warning:/i || m/warning /i) {
	  if ($last_error ne $current_dir) {
	    push @failures, "Warning while compiling in $current_dir\n";
	    $last_error = $current_dir;
	  }
	}
    }
    if (close(MAKE) == 0) {
	push @failures, "errors while running make in $i";
    }
    $date = localtime;
    print LOG "$CMD: make for $i finished at ", $date, "\n";
    print LOG "$CMD: =============================================\n\n";
}

foreach $i (@RUN_LIST) {
    local @test_info = split (/\ \,\ /, $i);
    local $directory = $test_info[0];
    local $program = $test_info[1];

    $date = localtime;
    print LOG "$CMD: =============================================\n";
    print LOG "$CMD: running $program in $directory at ", $date, "\n";
    local $subdir =
	$CHECKOUT .'/'. $MODULE .'/build/'. $BUILD .'/'. $directory;
    chdir ($subdir)
	|| mydie "cannot chdir to $subdir";

    $run_error = 0;
    if (open(RUN, "perl $program 2>&1 |") == 0) {
	push @failures, "cannot run $program in $directory";
	next;
    }
    while (<RUN>) {
	print LOG $_;
	if (m/Error/
	    || m/FAILED/
	    || m/EXCEPTION/
	    || m/pure virtual /i) {
	  $run_error = 1;
	}
    }
    if (close(RUN) == 0) {
	push @failures, "Error when closing pipe for $program in $directory";
	next;
    }
    $date = localtime;
    print LOG "$CMD: $program finished ", $date, "\n";

    if ($run_error != 0) {
	push @failures,
	    "errors detected while running $program in $directory";
    }
}

if ($#failures >= 0) {
    mydie @failures;
}

close(LOG)
    || mydie "cannot close LOGFILE";

print HIST "OK\n";
close(HIST)
    || mydie "cannot close history file";

unlink $disable_file
    || mydie "cannot unlink disable file";

exit 0;
