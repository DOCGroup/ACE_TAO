The subdirectory illustrates a number of the ACE ASX framework
features using an ACE_Stream application called the Event Server.  For
more information on the design and use of the ACE ASX framework please
see http://www.cs.wustl.edu/~schmidt/C++-USENIX-94.ps.gz and
http://www.cs.wustl.edu/~schmidt/DSEJ-94.ps.gz

The Event Server example works as follows:

1. When the ./Event_Server/event_server executable is run it
   creates two SOCK_Acceptors, which listen for and accept
   incoming connections from Consumers and Suppliers.

2. The ./Event_Server/Transceiver/transceiver application plays
   the role of Consumer and Supplier.  It can be started multiple
   times.  Each call should be either:  

   % transceiver -p XYZ -h hostname

   or 

   % transceiver -p ABC -h hostname

   where XYZ and ABC are the Consumer listening port and the Supplier 
   listening port, respectively, on the event server and "hostname" is
   the name of the machine the event_server is running.  I typically
   run the Consumer(s) and Supplier(s) in different windows.

3. Once the Consumer(s) and Supplier(s) are connected, you can type
   data from any Supplier window.  This data will be routed
   through the Modules/Tasks in an event_server's Stream and
   be forwarded to the Consumer(s).  Note that you can also
   send messages from the Consumer(s) to Supplier(s), but the
   Event Server will warn you about this since it's not really
   kosher...

4. When you want to shut down the tranceivers or event server
   just type ^C (which generates a SIGINT) or type any input
   in the window running the Event Server.

What makes this example particularly interesting is that once you've
got the hang of this basic architecture, you can "push" new filtering
Modules onto the event_server Stream and modify the application's
behavior transparently.

