name: windows

on:
  push:
  pull_request:
  schedule:
    - cron: '0 1 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: VS2019WChar
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: x64
            BuildConfiguration: Debug
            vcpkgarch: x64-windows
            vcpkglibdir: debug/lib
<<<<<<< HEAD
<<<<<<< HEAD
            vcpkgpackages: 'openssl xerces-c[xmlch-wchar]'
=======
            vcpkgpackages: '"openssl", "xerces-c[xmlch-wchar]", "zlib"'
>>>>>>> d3ae481ff4c (Try vcpkg.json)
=======
            vcpkgpackages: '"openssl", {"name": "xerces-c", "features": ["xmlch-wchar"]}, "zlib"'
>>>>>>> cbedceeb2e8 (Single line vcpkg.json and updated wchar xercesc feature)
            OptionalFeatures: uses_wchar=1
          - name: VS2019Debug64
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: x64
            BuildConfiguration: Debug
            vcpkgarch: x64-windows
            vcpkglibdir: debug/lib
<<<<<<< HEAD
            vcpkgpackages: openssl xerces-c
=======
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
>>>>>>> d3ae481ff4c (Try vcpkg.json)
          - name: VS2019Release64
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: x64
            BuildConfiguration: Release
            vcpkgarch: x64-windows
            vcpkglibdir: lib
<<<<<<< HEAD
            vcpkgpackages: openssl xerces-c
=======
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
>>>>>>> d3ae481ff4c (Try vcpkg.json)
          - name: VS2019Debug32
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: Win32
            BuildConfiguration: Debug
            vcpkgarch: x86-windows
            vcpkglibdir: debug/lib
<<<<<<< HEAD
            vcpkgpackages: openssl xerces-c
=======
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
>>>>>>> d3ae481ff4c (Try vcpkg.json)
          - name: VS2019Release32
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: Win32
            BuildConfiguration: Release
            vcpkgarch: x86-windows
            vcpkglibdir: lib
<<<<<<< HEAD
            vcpkgpackages: openssl xerces-c
=======
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
>>>>>>> d3ae481ff4c (Try vcpkg.json)
          - name: VS2019Debug64Cxx17
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: x64
            BuildConfiguration: Debug
            vcpkgarch: x64-windows
            vcpkglibdir: debug/lib
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
            OptionalMpcArgs: -value_template LanguageStandard=stdcpp17
          - name: VS2019Debug64Cxx20
            vmimage: windows-2019
            mpctype: vs2019
            BuildPlatform: x64
            BuildConfiguration: Debug
            vcpkgarch: x64-windows
            vcpkglibdir: debug/lib
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
            OptionalMpcArgs: -value_template LanguageStandard=stdcpp20
<<<<<<< HEAD
=======
          - name: VS2022WChar
            vmimage: windows-2022
            mpctype: vs2022
            BuildPlatform: x64
            BuildConfiguration: Debug
            vcpkgarch: x64-windows
            vcpkglibdir: debug/lib
            vcpkgpackages: '"openssl", {"name": "xerces-c", "features": ["xmlch-wchar"]}, "zlib"'
            OptionalFeatures: uses_wchar=1
          - name: VS2022Debug64
            vmimage: windows-2022
            mpctype: vs2022
            BuildPlatform: x64
            BuildConfiguration: Debug
            vcpkgarch: x64-windows
            vcpkglibdir: debug/lib
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
          - name: VS2022Release64
            vmimage: windows-2022
            mpctype: vs2022
            BuildPlatform: x64
            BuildConfiguration: Release
            vcpkgarch: x64-windows
            vcpkglibdir: lib
            vcpkgpackages: '"openssl", "xerces-c", "zlib"'
>>>>>>> d3ae481ff4c (Try vcpkg.json)
    runs-on: ${{ matrix.vmimage }}
    name: ${{ matrix.name }}
    env:
      ACE_ROOT: ${{ github.workspace }}/ACE
      TAO_ROOT: ${{ github.workspace }}/TAO
      MPC_ROOT: ${{ github.workspace }}/MPC
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      XERCESC_INCDIR: ${{ github.workspace }}/vcpkg/installed/${{ matrix.vcpkgarch }}/include
      XERCESC_LIBDIR: ${{ github.workspace }}/vcpkg/installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      SSL_INCDIR: ${{ github.workspace }}/vcpkg/installed/${{ matrix.vcpkgarch }}/include
      SSL_LIBDIR: ${{ github.workspace }}/vcpkg/installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
<<<<<<< HEAD
=======
      ZLIB_INCDIR: ${{ github.workspace }}/vcpkg/installed/${{ matrix.vcpkgarch }}/include
      ZLIB_LIBDIR: ${{ github.workspace }}/vcpkg/installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
=======
      XERCESC_INCDIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/${{ matrix.vcpkgarch }}/include
      XERCESC_LIBDIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      SSL_INCDIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/${{ matrix.vcpkgarch }}/include
      SSL_LIBDIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      ZLIB_INCDIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/${{ matrix.vcpkgarch }}/include
      ZLIB_LIBDIR: ${{ github.workspace }}/vcpkg/vcpkg_installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
>>>>>>> 02dd01dfbad (Different install path)
=======
      XERCESC_INCDIR: ${{ github.workspace }}/vcpkg_installed/installed/${{ matrix.vcpkgarch }}/include
      XERCESC_LIBDIR: ${{ github.workspace }}/vcpkg_installed/installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      SSL_INCDIR: ${{ github.workspace }}/vcpkg_installed/installed/${{ matrix.vcpkgarch }}/include
      SSL_LIBDIR: ${{ github.workspace }}/vcpkg_installed/installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      ZLIB_INCDIR: ${{ github.workspace }}/vcpkg_installed/installed/${{ matrix.vcpkgarch }}/include
      ZLIB_LIBDIR: ${{ github.workspace }}/vcpkg_installed/installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
>>>>>>> e2a73f709b2 (Another path attempt)
=======
      XERCESC_INCDIR: ${{ github.workspace }}/vcpkg_installed/${{ matrix.vcpkgarch }}/include
      XERCESC_LIBDIR: ${{ github.workspace }}/vcpkg_installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      SSL_INCDIR: ${{ github.workspace }}/vcpkg_installed/${{ matrix.vcpkgarch }}/include
      SSL_LIBDIR: ${{ github.workspace }}/vcpkg_installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
      ZLIB_INCDIR: ${{ github.workspace }}/vcpkg_installed/${{ matrix.vcpkgarch }}/include
      ZLIB_LIBDIR: ${{ github.workspace }}/vcpkg_installed/${{ matrix.vcpkgarch }}/${{ matrix.vcpkglibdir }}
>>>>>>> eb6c324131f (Path changes)
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkgarch }}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 00b5590e8f1 (vcpkg triplet is now an environment variable)
=======
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg
>>>>>>> 9c95a92d0cc (Set VCPKG_INSTALLED_DIR)
=======
>>>>>>> 52f7f73a695 (Fixed json)
=======
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed
>>>>>>> 7ff6fc7440e (Set VCPKG_INSTALLED_DIR)
    steps:
    - name: checkout ACE/TAO
      uses: actions/checkout@v2
    - name: checkout MPC
      uses: actions/checkout@v2
      with:
        repository: DOCGroup/MPC
        path: ${{ env.MPC_ROOT }}
    - name: create vcpkg.json
      run: |
        '{"name": "tao","version-string": "githubaction","dependencies": [ ${{ matrix.vcpkgpackages }} ]}' > vcpkg.json
      shell: pwsh
    - name: Install vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: cef0b3ec767df6e83806899fe9525f6cf8d7bc91
        appendedCacheKey: ${{ matrix.name }}
        runVcpkgInstall: true
    - name: create $ACE_ROOT/ace/config.h
      run: |
        '#include "ace/config-win32.h"' > ${env:ACE_ROOT}/ace/config.h
      shell: pwsh
    - name: create $ACE_ROOT/bin/MakeProjectCreator/config/default.features
      run: |
        echo "ipv6=1" | out-file -encoding ASCII ${env:ACE_ROOT}/bin/MakeProjectCreator/config/default.features
        echo "xerces3=1" | out-file -encoding ASCII ${env:ACE_ROOT}/bin/MakeProjectCreator/config/default.features
        echo "ssl=1" | out-file -append -encoding ASCII ${env:ACE_ROOT}/bin/MakeProjectCreator/config/default.features
        echo "openssl11=1" | out-file -append -encoding ASCII ${env:ACE_ROOT}/bin/MakeProjectCreator/config/default.features
        echo "versioned_namespace=1" | out-file -append -encoding ASCII ${env:ACE_ROOT}/bin/MakeProjectCreator/config/default.features
      shell: pwsh
    - name: Add optional features ${{ matrix.OptionalFeatures }}
      run: |
        echo "${{ matrix.OptionalFeatures }}" | out-file -append -encoding ASCII ${env:ACE_ROOT}/bin/MakeProjectCreator/config/default.features
      shell: pwsh
      if: matrix.OptionalFeatures != ''
    - name: Run mwc.pl on $(TAO_ROOT)/TAO_ACE.mwc
      run: |
        perl ${env:ACE_ROOT}/bin/mwc.pl -type ${{ matrix.mpctype }} ${env:TAO_ROOT}/TAO_ACE.mwc -workers 4 ${{ matrix.OptionalMpcArgs }}
      shell: pwsh
    - name: Run mwc.pl on $(ACE_ROOT)/tests/tests.mwc
      run: |
        perl ${env:ACE_ROOT}/bin/mwc.pl -type ${{ matrix.mpctype }} ${env:ACE_ROOT}/tests/tests.mwc -workers 4 ${{ matrix.OptionalMpcArgs }}
      shell: pwsh
    - name: Run mwc.pl on $(TAO_ROOT)/tests/IDL_Test
      run: |
        perl ${env:ACE_ROOT}/bin/mwc.pl -type ${{ matrix.mpctype }} ${env:TAO_ROOT}/tests/IDL_Test -workers 4 ${{ matrix.OptionalMpcArgs }}
      shell: pwsh
    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1
    - name: Build solution TAO/TAO_ACE.sln
      run: msbuild -maxcpucount -p:Platform=${{ matrix.BuildPlatform }} -p:Configuration=${{ matrix.BuildConfiguration }} TAO/TAO_ACE.sln
    - name: Build solution ACE/tests/tests.sln
      run: msbuild -maxcpucount -p:Platform=${{ matrix.BuildPlatform }} -p:Configuration=${{ matrix.BuildConfiguration }} ACE/tests/tests.sln
    - name: Build solution TAO/tests/IDL_Test/IDL_Test.sln
      run: msbuild -maxcpucount -p:Platform=${{ matrix.BuildPlatform }} -p:Configuration=${{ matrix.BuildConfiguration }} TAO/tests/IDL_Test/IDL_Test.sln
