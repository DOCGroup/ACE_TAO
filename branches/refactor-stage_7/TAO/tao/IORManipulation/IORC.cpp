// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:302


#include "IORManip_Loader.h"
#include "tao/Typecode.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IORC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:60

// Arg traits specializations.
namespace TAO
{
};

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:63

TAO_IOP::EmptyProfileList::EmptyProfileList (void)
  : CORBA::UserException (
        "IDL:TAO_IOP/EmptyProfileList:1.0",
        "EmptyProfileList"
      )
{
}

TAO_IOP::EmptyProfileList::~EmptyProfileList (void)
{
}

TAO_IOP::EmptyProfileList::EmptyProfileList (const ::TAO_IOP::EmptyProfileList &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

TAO_IOP::EmptyProfileList&
TAO_IOP::EmptyProfileList::operator= (const ::TAO_IOP::EmptyProfileList &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void TAO_IOP::EmptyProfileList::_tao_any_destructor (void *_tao_void_pointer)
{
  EmptyProfileList *_tao_tmp_pointer =
    ACE_static_cast (EmptyProfileList*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

TAO_IOP::EmptyProfileList *
TAO_IOP::EmptyProfileList::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/EmptyProfileList:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (EmptyProfileList *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *TAO_IOP::EmptyProfileList::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::EmptyProfileList, 0);
  return retval;
}

CORBA::Exception *
TAO_IOP::EmptyProfileList::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::TAO_IOP::EmptyProfileList (*this),
      0
    );
  return result;
}

void TAO_IOP::EmptyProfileList::_raise (void) const
{
  TAO_RAISE (*this);
}

void TAO_IOP::EmptyProfileList::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void TAO_IOP::EmptyProfileList::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr TAO_IOP::EmptyProfileList::_type (void) const
{
  return ::TAO_IOP::_tc_EmptyProfileList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_EmptyProfileList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x456d7074),
  ACE_NTOHL (0x7950726f),
  ACE_NTOHL (0x66696c65),
  ACE_NTOHL (0x4c697374),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:TAO_IOP/EmptyProfileList:1.0
    17,
  ACE_NTOHL (0x456d7074),
  ACE_NTOHL (0x7950726f),
  ACE_NTOHL (0x66696c65),
  ACE_NTOHL (0x4c697374),
  ACE_NTOHL (0x0),  // name = EmptyProfileList
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_EmptyProfileList (
    CORBA::tk_except,
    sizeof (_oc_TAO_IOP_EmptyProfileList),
    (char *) &_oc_TAO_IOP_EmptyProfileList,
    0,
    sizeof (TAO_IOP::EmptyProfileList)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_EmptyProfileList =
    &_tc_TAO_tc_TAO_IOP_EmptyProfileList;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:63

TAO_IOP::NotFound::NotFound (void)
  : CORBA::UserException (
        "IDL:TAO_IOP/NotFound:1.0",
        "NotFound"
      )
{
}

TAO_IOP::NotFound::~NotFound (void)
{
}

TAO_IOP::NotFound::NotFound (const ::TAO_IOP::NotFound &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

TAO_IOP::NotFound&
TAO_IOP::NotFound::operator= (const ::TAO_IOP::NotFound &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void TAO_IOP::NotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  NotFound *_tao_tmp_pointer =
    ACE_static_cast (NotFound*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

TAO_IOP::NotFound *
TAO_IOP::NotFound::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/NotFound:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (NotFound *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *TAO_IOP::NotFound::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::NotFound, 0);
  return retval;
}

CORBA::Exception *
TAO_IOP::NotFound::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::TAO_IOP::NotFound (*this),
      0
    );
  return result;
}

void TAO_IOP::NotFound::_raise (void) const
{
  TAO_RAISE (*this);
}

void TAO_IOP::NotFound::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void TAO_IOP::NotFound::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr TAO_IOP::NotFound::_type (void) const
{
  return ::TAO_IOP::_tc_NotFound;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_NotFound[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  25,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x4e6f7446),
  ACE_NTOHL (0x6f756e64),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:TAO_IOP/NotFound:1.0
    9,
  ACE_NTOHL (0x4e6f7446),
  ACE_NTOHL (0x6f756e64),
  ACE_NTOHL (0x0),  // name = NotFound
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_NotFound (
    CORBA::tk_except,
    sizeof (_oc_TAO_IOP_NotFound),
    (char *) &_oc_TAO_IOP_NotFound,
    0,
    sizeof (TAO_IOP::NotFound)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_NotFound =
    &_tc_TAO_tc_TAO_IOP_NotFound;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:63

TAO_IOP::Duplicate::Duplicate (void)
  : CORBA::UserException (
        "IDL:TAO_IOP/Duplicate:1.0",
        "Duplicate"
      )
{
}

TAO_IOP::Duplicate::~Duplicate (void)
{
}

TAO_IOP::Duplicate::Duplicate (const ::TAO_IOP::Duplicate &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

TAO_IOP::Duplicate&
TAO_IOP::Duplicate::operator= (const ::TAO_IOP::Duplicate &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void TAO_IOP::Duplicate::_tao_any_destructor (void *_tao_void_pointer)
{
  Duplicate *_tao_tmp_pointer =
    ACE_static_cast (Duplicate*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

TAO_IOP::Duplicate *
TAO_IOP::Duplicate::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/Duplicate:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (Duplicate *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *TAO_IOP::Duplicate::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::Duplicate, 0);
  return retval;
}

CORBA::Exception *
TAO_IOP::Duplicate::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::TAO_IOP::Duplicate (*this),
      0
    );
  return result;
}

void TAO_IOP::Duplicate::_raise (void) const
{
  TAO_RAISE (*this);
}

void TAO_IOP::Duplicate::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void TAO_IOP::Duplicate::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr TAO_IOP::Duplicate::_type (void) const
{
  return ::TAO_IOP::_tc_Duplicate;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_Duplicate[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x4475706c),
  ACE_NTOHL (0x69636174),
  ACE_NTOHL (0x653a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:TAO_IOP/Duplicate:1.0
    10,
  ACE_NTOHL (0x4475706c),
  ACE_NTOHL (0x69636174),
  ACE_NTOHL (0x65000000),  // name = Duplicate
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_Duplicate (
    CORBA::tk_except,
    sizeof (_oc_TAO_IOP_Duplicate),
    (char *) &_oc_TAO_IOP_Duplicate,
    0,
    sizeof (TAO_IOP::Duplicate)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_Duplicate =
    &_tc_TAO_tc_TAO_IOP_Duplicate;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:63

TAO_IOP::Invalid_IOR::Invalid_IOR (void)
  : CORBA::UserException (
        "IDL:TAO_IOP/Invalid_IOR:1.0",
        "Invalid_IOR"
      )
{
}

TAO_IOP::Invalid_IOR::~Invalid_IOR (void)
{
}

TAO_IOP::Invalid_IOR::Invalid_IOR (const ::TAO_IOP::Invalid_IOR &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

TAO_IOP::Invalid_IOR&
TAO_IOP::Invalid_IOR::operator= (const ::TAO_IOP::Invalid_IOR &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void TAO_IOP::Invalid_IOR::_tao_any_destructor (void *_tao_void_pointer)
{
  Invalid_IOR *_tao_tmp_pointer =
    ACE_static_cast (Invalid_IOR*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

TAO_IOP::Invalid_IOR *
TAO_IOP::Invalid_IOR::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/Invalid_IOR:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (Invalid_IOR *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *TAO_IOP::Invalid_IOR::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::Invalid_IOR, 0);
  return retval;
}

CORBA::Exception *
TAO_IOP::Invalid_IOR::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::TAO_IOP::Invalid_IOR (*this),
      0
    );
  return result;
}

void TAO_IOP::Invalid_IOR::_raise (void) const
{
  TAO_RAISE (*this);
}

void TAO_IOP::Invalid_IOR::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void TAO_IOP::Invalid_IOR::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr TAO_IOP::Invalid_IOR::_type (void) const
{
  return ::TAO_IOP::_tc_Invalid_IOR;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_Invalid_IOR[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  28,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c69645f),
  ACE_NTOHL (0x494f523a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:TAO_IOP/Invalid_IOR:1.0
    12,
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c69645f),
  ACE_NTOHL (0x494f5200),  // name = Invalid_IOR
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_Invalid_IOR (
    CORBA::tk_except,
    sizeof (_oc_TAO_IOP_Invalid_IOR),
    (char *) &_oc_TAO_IOP_Invalid_IOR,
    0,
    sizeof (TAO_IOP::Invalid_IOR)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_Invalid_IOR =
    &_tc_TAO_tc_TAO_IOP_Invalid_IOR;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:63

TAO_IOP::MultiProfileList::MultiProfileList (void)
  : CORBA::UserException (
        "IDL:TAO_IOP/MultiProfileList:1.0",
        "MultiProfileList"
      )
{
}

TAO_IOP::MultiProfileList::~MultiProfileList (void)
{
}

TAO_IOP::MultiProfileList::MultiProfileList (const ::TAO_IOP::MultiProfileList &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

TAO_IOP::MultiProfileList&
TAO_IOP::MultiProfileList::operator= (const ::TAO_IOP::MultiProfileList &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void TAO_IOP::MultiProfileList::_tao_any_destructor (void *_tao_void_pointer)
{
  MultiProfileList *_tao_tmp_pointer =
    ACE_static_cast (MultiProfileList*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

TAO_IOP::MultiProfileList *
TAO_IOP::MultiProfileList::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:TAO_IOP/MultiProfileList:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (MultiProfileList *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *TAO_IOP::MultiProfileList::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO_IOP::MultiProfileList, 0);
  return retval;
}

CORBA::Exception *
TAO_IOP::MultiProfileList::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::TAO_IOP::MultiProfileList (*this),
      0
    );
  return result;
}

void TAO_IOP::MultiProfileList::_raise (void) const
{
  TAO_RAISE (*this);
}

void TAO_IOP::MultiProfileList::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void TAO_IOP::MultiProfileList::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr TAO_IOP::MultiProfileList::_type (void) const
{
  return ::TAO_IOP::_tc_MultiProfileList;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_MultiProfileList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x4d756c74),
  ACE_NTOHL (0x6950726f),
  ACE_NTOHL (0x66696c65),
  ACE_NTOHL (0x4c697374),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:TAO_IOP/MultiProfileList:1.0
    17,
  ACE_NTOHL (0x4d756c74),
  ACE_NTOHL (0x6950726f),
  ACE_NTOHL (0x66696c65),
  ACE_NTOHL (0x4c697374),
  ACE_NTOHL (0x0),  // name = MultiProfileList
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_MultiProfileList (
    CORBA::tk_except,
    sizeof (_oc_TAO_IOP_MultiProfileList),
    (char *) &_oc_TAO_IOP_MultiProfileList,
    0,
    sizeof (TAO_IOP::MultiProfileList)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_MultiProfileList =
    &_tc_TAO_tc_TAO_IOP_MultiProfileList;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for TAO_IOP::TAO_IOR_Property.

TAO_IOP::TAO_IOR_Property_ptr
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Property>::tao_duplicate (
    TAO_IOP::TAO_IOR_Property_ptr p
  )
{
  return TAO_IOP::TAO_IOR_Property::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Property>::tao_release (
    TAO_IOP::TAO_IOR_Property_ptr p
  )
{
  CORBA::release (p);
}

TAO_IOP::TAO_IOR_Property_ptr
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Property>::tao_nil (void)
{
  return TAO_IOP::TAO_IOR_Property::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Property>::tao_marshal (
    TAO_IOP::TAO_IOR_Property_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker *
(*TAO_IOP__TAO_TAO_IOR_Property_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

TAO_IOP::TAO_IOR_Property::TAO_IOR_Property (void)
{}

TAO_IOP::TAO_IOR_Property::~TAO_IOR_Property (void)
{}

void
TAO_IOP::TAO_IOR_Property::_tao_any_destructor (void *_tao_void_pointer)
{
  TAO_IOR_Property *_tao_tmp_pointer =
    ACE_static_cast (TAO_IOR_Property *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

TAO_IOP::TAO_IOR_Property_ptr
TAO_IOP::TAO_IOR_Property::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return TAO_IOR_Property::_nil ();
    }

  TAO_IOR_Property_ptr proxy =
    dynamic_cast<TAO_IOR_Property_ptr> (_tao_objref);

  return TAO_IOR_Property::_duplicate (proxy);
}

TAO_IOP::TAO_IOR_Property_ptr
TAO_IOP::TAO_IOR_Property::_duplicate (TAO_IOR_Property_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

CORBA::Boolean
TAO_IOP::TAO_IOR_Property::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:TAO_IOP/TAO_IOR_Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* TAO_IOP::TAO_IOR_Property::_interface_repository_id (void) const
{
  return "IDL:TAO_IOP/TAO_IOR_Property:1.0";
}

CORBA::Boolean
TAO_IOP::TAO_IOR_Property::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_TAO_IOR_Property[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f525f),
  ACE_NTOHL (0x50726f70),
  ACE_NTOHL (0x65727479),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:TAO_IOP/TAO_IOR_Property:1.0
    17,
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f525f),
  ACE_NTOHL (0x50726f70),
  ACE_NTOHL (0x65727479),
  ACE_NTOHL (0x0),  // name = TAO_IOR_Property
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_TAO_IOR_Property (
    CORBA::tk_objref,
    sizeof (_oc_TAO_IOP_TAO_IOR_Property),
    (char *) &_oc_TAO_IOP_TAO_IOR_Property,
    0,
    sizeof (TAO_IOP::TAO_IOR_Property)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_TAO_IOR_Property =
    &_tc_TAO_tc_TAO_IOP_TAO_IOR_Property;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for TAO_IOP::TAO_IOR_Manipulation.

TAO_IOP::TAO_IOR_Manipulation_ptr
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Manipulation>::tao_duplicate (
    TAO_IOP::TAO_IOR_Manipulation_ptr p
  )
{
  return TAO_IOP::TAO_IOR_Manipulation::_duplicate (p);
}

void
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Manipulation>::tao_release (
    TAO_IOP::TAO_IOR_Manipulation_ptr p
  )
{
  CORBA::release (p);
}

TAO_IOP::TAO_IOR_Manipulation_ptr
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Manipulation>::tao_nil (void)
{
  return TAO_IOP::TAO_IOR_Manipulation::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<TAO_IOP::TAO_IOR_Manipulation>::tao_marshal (
    TAO_IOP::TAO_IOR_Manipulation_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker *
(*TAO_IOP__TAO_TAO_IOR_Manipulation_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_TAO_IOP_TAO_IOR_MANIPULATION_IORLIST_CS_)
#define _TAO_IOP_TAO_IOR_MANIPULATION_IORLIST_CS_

TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (void)
{}

TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (
    CORBA::ULong max
  )
  : TAO_Unbounded_Pseudo_Sequence<
        CORBA::Object
      >
    (max)
{}

TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Object_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Pseudo_Sequence<
        CORBA::Object
      >
    (max, length, buffer, release)
{}

TAO_IOP::TAO_IOR_Manipulation::IORList::IORList (
    const IORList &seq
  )
  : TAO_Unbounded_Pseudo_Sequence<
        CORBA::Object
      >
    (seq)
{}

TAO_IOP::TAO_IOR_Manipulation::IORList::~IORList (void)
{}

void TAO_IOP::TAO_IOR_Manipulation::IORList::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  IORList * _tao_tmp_pointer =
    ACE_static_cast (IORList *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_TAO_IOR_Manipulation_IORList[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f525f),
  ACE_NTOHL (0x4d616e69),
  ACE_NTOHL (0x70756c61),
  ACE_NTOHL (0x74696f6e),
  ACE_NTOHL (0x2f494f52),
  ACE_NTOHL (0x4c697374),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:TAO_IOP/TAO_IOR_Manipulation/IORList:1.0
    8,
  ACE_NTOHL (0x494f524c),
  ACE_NTOHL (0x69737400),  // name = IORList
    CORBA::tk_sequence, // typecode kind
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref,
    52, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      29,
      ACE_NTOHL (0x49444c3a),
      ACE_NTOHL (0x6f6d672e),
      ACE_NTOHL (0x6f72672f),
      ACE_NTOHL (0x434f5242),
      ACE_NTOHL (0x412f4f62),
      ACE_NTOHL (0x6a656374),
      ACE_NTOHL (0x3a312e30),
      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Object:1.0
            7,
      ACE_NTOHL (0x4f626a65),
      ACE_NTOHL (0x63740000),  // name = Object

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_TAO_IOR_Manipulation_IORList (
    CORBA::tk_alias,
    sizeof (_oc_TAO_IOP_TAO_IOR_Manipulation_IORList),
    (char *) &_oc_TAO_IOP_TAO_IOR_Manipulation_IORList,
    0,
    sizeof (TAO_IOP::TAO_IOR_Manipulation::IORList)
  );

::CORBA::TypeCode_ptr TAO_IOP::TAO_IOR_Manipulation::_tc_IORList =
  &_tc_TAO_tc_TAO_IOP_TAO_IOR_Manipulation_IORList;

TAO_IOP::TAO_IOR_Manipulation::TAO_IOR_Manipulation (void)
{}

TAO_IOP::TAO_IOR_Manipulation::~TAO_IOR_Manipulation (void)
{}

void
TAO_IOP::TAO_IOR_Manipulation::_tao_any_destructor (void *_tao_void_pointer)
{
  TAO_IOR_Manipulation *_tao_tmp_pointer =
    ACE_static_cast (TAO_IOR_Manipulation *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

TAO_IOP::TAO_IOR_Manipulation_ptr
TAO_IOP::TAO_IOR_Manipulation::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return TAO_IOR_Manipulation::_nil ();
    }

  TAO_IOR_Manipulation_ptr proxy =
    dynamic_cast<TAO_IOR_Manipulation_ptr> (_tao_objref);

  return TAO_IOR_Manipulation::_duplicate (proxy);
}

TAO_IOP::TAO_IOR_Manipulation_ptr
TAO_IOP::TAO_IOR_Manipulation::_duplicate (TAO_IOR_Manipulation_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

CORBA::Boolean
TAO_IOP::TAO_IOR_Manipulation::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:TAO_IOP/TAO_IOR_Manipulation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* TAO_IOP::TAO_IOR_Manipulation::_interface_repository_id (void) const
{
  return "IDL:TAO_IOP/TAO_IOR_Manipulation:1.0";
}

CORBA::Boolean
TAO_IOP::TAO_IOR_Manipulation::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_TAO_IOP_TAO_IOR_Manipulation[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f502f),
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f525f),
  ACE_NTOHL (0x4d616e69),
  ACE_NTOHL (0x70756c61),
  ACE_NTOHL (0x74696f6e),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:TAO_IOP/TAO_IOR_Manipulation:1.0
    21,
  ACE_NTOHL (0x54414f5f),
  ACE_NTOHL (0x494f525f),
  ACE_NTOHL (0x4d616e69),
  ACE_NTOHL (0x70756c61),
  ACE_NTOHL (0x74696f6e),
  ACE_NTOHL (0x0),  // name = TAO_IOR_Manipulation
  };

static CORBA::TypeCode _tc_TAO_tc_TAO_IOP_TAO_IOR_Manipulation (
    CORBA::tk_objref,
    sizeof (_oc_TAO_IOP_TAO_IOR_Manipulation),
    (char *) &_oc_TAO_IOP_TAO_IOR_Manipulation,
    0,
    sizeof (TAO_IOP::TAO_IOR_Manipulation)
  );

namespace TAO_IOP
{
  ::CORBA::TypeCode_ptr _tc_TAO_IOR_Manipulation =
    &_tc_TAO_tc_TAO_IOP_TAO_IOR_Manipulation;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::EmptyProfileList>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;

  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }

  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;

  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const TAO_IOP::EmptyProfileList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::EmptyProfileList>::insert_copy (
      _tao_any,
      TAO_IOP::EmptyProfileList::_tao_any_destructor,
      TAO_IOP::_tc_EmptyProfileList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::EmptyProfileList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::EmptyProfileList>::insert (
      _tao_any,
      TAO_IOP::EmptyProfileList::_tao_any_destructor,
      TAO_IOP::_tc_EmptyProfileList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::EmptyProfileList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const TAO_IOP::EmptyProfileList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const TAO_IOP::EmptyProfileList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TAO_IOP::EmptyProfileList>::extract (
        _tao_any,
        TAO_IOP::EmptyProfileList::_tao_any_destructor,
        TAO_IOP::_tc_EmptyProfileList,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::NotFound>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;

  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }

  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;

  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const TAO_IOP::NotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::NotFound>::insert_copy (
      _tao_any,
      TAO_IOP::NotFound::_tao_any_destructor,
      TAO_IOP::_tc_NotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::NotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::NotFound>::insert (
      _tao_any,
      TAO_IOP::NotFound::_tao_any_destructor,
      TAO_IOP::_tc_NotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::NotFound *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const TAO_IOP::NotFound *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const TAO_IOP::NotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TAO_IOP::NotFound>::extract (
        _tao_any,
        TAO_IOP::NotFound::_tao_any_destructor,
        TAO_IOP::_tc_NotFound,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::Duplicate>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;

  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }

  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;

  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const TAO_IOP::Duplicate &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::Duplicate>::insert_copy (
      _tao_any,
      TAO_IOP::Duplicate::_tao_any_destructor,
      TAO_IOP::_tc_Duplicate,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::Duplicate *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::Duplicate>::insert (
      _tao_any,
      TAO_IOP::Duplicate::_tao_any_destructor,
      TAO_IOP::_tc_Duplicate,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::Duplicate *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const TAO_IOP::Duplicate *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const TAO_IOP::Duplicate *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TAO_IOP::Duplicate>::extract (
        _tao_any,
        TAO_IOP::Duplicate::_tao_any_destructor,
        TAO_IOP::_tc_Duplicate,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::Invalid_IOR>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;

  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }

  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;

  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const TAO_IOP::Invalid_IOR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::Invalid_IOR>::insert_copy (
      _tao_any,
      TAO_IOP::Invalid_IOR::_tao_any_destructor,
      TAO_IOP::_tc_Invalid_IOR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::Invalid_IOR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::Invalid_IOR>::insert (
      _tao_any,
      TAO_IOP::Invalid_IOR::_tao_any_destructor,
      TAO_IOP::_tc_Invalid_IOR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::Invalid_IOR *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const TAO_IOP::Invalid_IOR *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const TAO_IOP::Invalid_IOR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TAO_IOP::Invalid_IOR>::extract (
        _tao_any,
        TAO_IOP::Invalid_IOR::_tao_any_destructor,
        TAO_IOP::_tc_Invalid_IOR,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::MultiProfileList>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;

  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }

  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;

  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const TAO_IOP::MultiProfileList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::MultiProfileList>::insert_copy (
      _tao_any,
      TAO_IOP::MultiProfileList::_tao_any_destructor,
      TAO_IOP::_tc_MultiProfileList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::MultiProfileList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::MultiProfileList>::insert (
      _tao_any,
      TAO_IOP::MultiProfileList::_tao_any_destructor,
      TAO_IOP::_tc_MultiProfileList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::MultiProfileList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const TAO_IOP::MultiProfileList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const TAO_IOP::MultiProfileList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TAO_IOP::MultiProfileList>::extract (
        _tao_any,
        TAO_IOP::MultiProfileList::_tao_any_destructor,
        TAO_IOP::_tc_MultiProfileList,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Property>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Property>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Property>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Property_ptr _tao_elem
  )
{
  TAO_IOP::TAO_IOR_Property_ptr _tao_objptr =
    TAO_IOP::TAO_IOR_Property::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Property_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Property>::insert (
      _tao_any,
      TAO_IOP::TAO_IOR_Property::_tao_any_destructor,
      TAO_IOP::_tc_TAO_IOR_Property,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Property_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Property>::extract (
        _tao_any,
        TAO_IOP::TAO_IOR_Property::_tao_any_destructor,
        TAO_IOP::_tc_TAO_IOR_Property,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Manipulation>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Manipulation>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Manipulation>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Manipulation_ptr _tao_elem
  )
{
  TAO_IOP::TAO_IOR_Manipulation_ptr _tao_objptr =
    TAO_IOP::TAO_IOR_Manipulation::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Manipulation_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Manipulation>::insert (
      _tao_any,
      TAO_IOP::TAO_IOR_Manipulation::_tao_any_destructor,
      TAO_IOP::_tc_TAO_IOR_Manipulation,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Manipulation_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<TAO_IOP::TAO_IOR_Manipulation>::extract (
        _tao_any,
        TAO_IOP::TAO_IOR_Manipulation::_tao_any_destructor,
        TAO_IOP::_tc_TAO_IOR_Manipulation,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const TAO_IOP::TAO_IOR_Manipulation::IORList &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::TAO_IOR_Manipulation::IORList>::insert_copy (
      _tao_any,
      TAO_IOP::TAO_IOR_Manipulation::IORList::_tao_any_destructor,
      TAO_IOP::TAO_IOR_Manipulation::_tc_IORList,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Manipulation::IORList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TAO_IOP::TAO_IOR_Manipulation::IORList>::insert (
      _tao_any,
      TAO_IOP::TAO_IOR_Manipulation::IORList::_tao_any_destructor,
      TAO_IOP::TAO_IOR_Manipulation::_tc_IORList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    TAO_IOP::TAO_IOR_Manipulation::IORList *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const TAO_IOP::TAO_IOR_Manipulation::IORList *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const TAO_IOP::TAO_IOR_Manipulation::IORList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TAO_IOP::TAO_IOR_Manipulation::IORList>::extract (
        _tao_any,
        TAO_IOP::TAO_IOR_Manipulation::IORList::_tao_any_destructor,
        TAO_IOP::TAO_IOR_Manipulation::_tc_IORList,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::TAO_IOR_Manipulation::IORList>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<TAO_IOP::TAO_IOR_Manipulation::IORList>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:1702

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO::Any_Dual_Impl_T<
        TAO_IOP::EmptyProfileList
      >;

  template class
    TAO::Any_Dual_Impl_T<
        TAO_IOP::NotFound
      >;

  template class
    TAO::Any_Dual_Impl_T<
        TAO_IOP::Duplicate
      >;

  template class
    TAO::Any_Dual_Impl_T<
        TAO_IOP::Invalid_IOR
      >;

  template class
    TAO::Any_Dual_Impl_T<
        TAO_IOP::MultiProfileList
      >;

  template class
    TAO::Objref_Traits<
        TAO_IOP::TAO_IOR_Property
      >;

  template class
    TAO_Objref_Var_T<
        TAO_IOP::TAO_IOR_Property
      >;

  template class
    TAO_Objref_Out_T<
        TAO_IOP::TAO_IOR_Property
      >;

  template class
    TAO::Any_Impl_T<
        TAO_IOP::TAO_IOR_Property
      >;

  template class
    TAO_Pseudo_Object_Manager<
        CORBA::Object
      >;

  template class
    TAO_MngSeq_Var_T<
        TAO_IOP::TAO_IOR_Manipulation::IORList,
        TAO_Pseudo_Object_Manager<
            CORBA::Object
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        TAO_IOP::TAO_IOR_Manipulation::IORList,
        TAO_Pseudo_Object_Manager<
            CORBA::Object
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        TAO_IOP::TAO_IOR_Manipulation::IORList,
        TAO_IOP::TAO_IOR_Manipulation::IORList_var,
        TAO_Pseudo_Object_Manager<
            CORBA::Object
          >
      >;

  template class
    TAO::Any_Dual_Impl_T<
        TAO_IOP::TAO_IOR_Manipulation::IORList
      >;

  template class
    TAO::Objref_Traits<
        TAO_IOP::TAO_IOR_Manipulation
      >;

  template class
    TAO_Objref_Var_T<
        TAO_IOP::TAO_IOR_Manipulation
      >;

  template class
    TAO_Objref_Out_T<
        TAO_IOP::TAO_IOR_Manipulation
      >;

  template class
    TAO::Any_Impl_T<
        TAO_IOP::TAO_IOR_Manipulation
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        TAO_IOP::EmptyProfileList \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        TAO_IOP::NotFound \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        TAO_IOP::Duplicate \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        TAO_IOP::Invalid_IOR \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        TAO_IOP::MultiProfileList \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        TAO_IOP::TAO_IOR_Property \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        TAO_IOP::TAO_IOR_Property
      >

# pragma instantiate \
    TAO_Objref_Out_T< \
        TAO_IOP::TAO_IOR_Property
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        TAO_IOP::TAO_IOR_Property \
      >

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        TAO_IOP::TAO_IOR_Manipulation::IORList, \
        TAO_Pseudo_Object_Manager< \
            CORBA::Object \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        TAO_IOP::TAO_IOR_Manipulation::IORList, \
        TAO_Pseudo_Object_Manager< \
            CORBA::Object \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        TAO_IOP::TAO_IOR_Manipulation::IORList, \
        TAO_IOP::TAO_IOR_Manipulation::IORList_var, \
        TAO_Pseudo_Object_Manager< \
            CORBA::Object \
          > \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        TAO_IOP::TAO_IOR_Manipulation::IORList \
      >

# pragma instantiate \
    TAO::Objref_Traits< \
        TAO_IOP::TAO_IOR_Manipulation \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        TAO_IOP::TAO_IOR_Manipulation
      >

# pragma instantiate \
    TAO_Objref_Out_T< \
        TAO_IOP::TAO_IOR_Manipulation
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        TAO_IOP::TAO_IOR_Manipulation \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
