// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:301


#include "IFR_BaseC.h"
#include "tao/Stub.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IFR_BaseC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:60

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:436

#if !defined (_CORBA_ANY__ARG_TRAITS_CS_)
#define _CORBA_ANY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Any>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Any,
            CORBA::Any_var,
            CORBA::Any_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:391

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_CS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::DefinitionKind>
    : public
        Basic_Arg_Traits_T<
            CORBA::DefinitionKind
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Contained>
    : public
        Object_Arg_Traits_T<
            CORBA::Contained_ptr,
            CORBA::Contained_var,
            CORBA::Contained_out,
            TAO::Objref_Traits<CORBA::Contained>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:472

#if !defined (_CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_CS_)
#define _CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Contained::Description>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Contained::Description,
            CORBA::Contained::Description_var,
            CORBA::Contained::Description_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_REPOSITORY__ARG_TRAITS_CS_)
#define _CORBA_REPOSITORY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Repository>
    : public
        Object_Arg_Traits_T<
            CORBA::Repository_ptr,
            CORBA::Repository_var,
            CORBA::Repository_out,
            TAO::Objref_Traits<CORBA::Repository>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_CS_)
#define _CORBA_CONTAINER__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Container>
    : public
        Object_Arg_Traits_T<
            CORBA::Container_ptr,
            CORBA::Container_var,
            CORBA::Container_out,
            TAO::Objref_Traits<CORBA::Container>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Container::DescriptionSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Container::DescriptionSeq,
            CORBA::Container::DescriptionSeq_var,
            CORBA::Container::DescriptionSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_MODULEDEF__ARG_TRAITS_CS_)
#define _CORBA_MODULEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ModuleDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ModuleDef_ptr,
            CORBA::ModuleDef_var,
            CORBA::ModuleDef_out,
            TAO::Objref_Traits<CORBA::ModuleDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONSTANTDEF__ARG_TRAITS_CS_)
#define _CORBA_CONSTANTDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ConstantDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ConstantDef_ptr,
            CORBA::ConstantDef_var,
            CORBA::ConstantDef_out,
            TAO::Objref_Traits<CORBA::ConstantDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::IDLType>
    : public
        Object_Arg_Traits_T<
            CORBA::IDLType_ptr,
            CORBA::IDLType_var,
            CORBA::IDLType_out,
            TAO::Objref_Traits<CORBA::IDLType>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_STRUCTDEF__ARG_TRAITS_CS_)
#define _CORBA_STRUCTDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::StructDef>
    : public
        Object_Arg_Traits_T<
            CORBA::StructDef_ptr,
            CORBA::StructDef_var,
            CORBA::StructDef_out,
            TAO::Objref_Traits<CORBA::StructDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_UNIONDEF__ARG_TRAITS_CS_)
#define _CORBA_UNIONDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::UnionDef>
    : public
        Object_Arg_Traits_T<
            CORBA::UnionDef_ptr,
            CORBA::UnionDef_var,
            CORBA::UnionDef_out,
            TAO::Objref_Traits<CORBA::UnionDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMDEF__ARG_TRAITS_CS_)
#define _CORBA_ENUMDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::EnumDef>
    : public
        Object_Arg_Traits_T<
            CORBA::EnumDef_ptr,
            CORBA::EnumDef_var,
            CORBA::EnumDef_out,
            TAO::Objref_Traits<CORBA::EnumDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ALIASDEF__ARG_TRAITS_CS_)
#define _CORBA_ALIASDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AliasDef>
    : public
        Object_Arg_Traits_T<
            CORBA::AliasDef_ptr,
            CORBA::AliasDef_var,
            CORBA::AliasDef_out,
            TAO::Objref_Traits<CORBA::AliasDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::InterfaceDef_ptr,
            CORBA::InterfaceDef_var,
            CORBA::InterfaceDef_out,
            TAO::Objref_Traits<CORBA::InterfaceDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceDefSeq,
            CORBA::InterfaceDefSeq_var,
            CORBA::InterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_EXCEPTIONDEF__ARG_TRAITS_CS_)
#define _CORBA_EXCEPTIONDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExceptionDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ExceptionDef_ptr,
            CORBA::ExceptionDef_var,
            CORBA::ExceptionDef_out,
            TAO::Objref_Traits<CORBA::ExceptionDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_NATIVEDEF__ARG_TRAITS_CS_)
#define _CORBA_NATIVEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::NativeDef>
    : public
        Object_Arg_Traits_T<
            CORBA::NativeDef_ptr,
            CORBA::NativeDef_var,
            CORBA::NativeDef_out,
            TAO::Objref_Traits<CORBA::NativeDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ValueDef_ptr,
            CORBA::ValueDef_var,
            CORBA::ValueDef_out,
            TAO::Objref_Traits<CORBA::ValueDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ValueDefSeq,
            CORBA::ValueDefSeq_var,
            CORBA::ValueDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEBOXDEF__ARG_TRAITS_CS_)
#define _CORBA_VALUEBOXDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ValueBoxDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ValueBoxDef_ptr,
            CORBA::ValueBoxDef_var,
            CORBA::ValueBoxDef_out,
            TAO::Objref_Traits<CORBA::ValueBoxDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AbstractInterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::AbstractInterfaceDef_ptr,
            CORBA::AbstractInterfaceDef_var,
            CORBA::AbstractInterfaceDef_out,
            TAO::Objref_Traits<CORBA::AbstractInterfaceDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AbstractInterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::AbstractInterfaceDefSeq,
            CORBA::AbstractInterfaceDefSeq_var,
            CORBA::AbstractInterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_LOCALINTERFACEDEF__ARG_TRAITS_CS_)
#define _CORBA_LOCALINTERFACEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::LocalInterfaceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::LocalInterfaceDef_ptr,
            CORBA::LocalInterfaceDef_var,
            CORBA::LocalInterfaceDef_out,
            TAO::Objref_Traits<CORBA::LocalInterfaceDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_EXTVALUEDEF__ARG_TRAITS_CS_)
#define _CORBA_EXTVALUEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtValueDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ExtValueDef_ptr,
            CORBA::ExtValueDef_var,
            CORBA::ExtValueDef_out,
            TAO::Objref_Traits<CORBA::ExtValueDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_CONTAINEDSEQ__ARG_TRAITS_CS_)
#define _CORBA_CONTAINEDSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ContainedSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ContainedSeq,
            CORBA::ContainedSeq_var,
            CORBA::ContainedSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::StructMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::StructMemberSeq,
            CORBA::StructMemberSeq_var,
            CORBA::StructMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_CS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InitializerSeq,
            CORBA::InitializerSeq_var,
            CORBA::InitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtInitializerSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExtInitializerSeq,
            CORBA::ExtInitializerSeq_var,
            CORBA::ExtInitializerSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::UnionMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::UnionMemberSeq,
            CORBA::UnionMemberSeq_var,
            CORBA::UnionMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::EnumMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::EnumMemberSeq,
            CORBA::EnumMemberSeq_var,
            CORBA::EnumMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Identifier[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4964), 
  ACE_NTOHL (0x656e7469), 
  ACE_NTOHL (0x66696572), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
    11,
  ACE_NTOHL (0x4964656e), 
  ACE_NTOHL (0x74696669), 
  ACE_NTOHL (0x65720000),  // name = Identifier
    CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_Identifier (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_Identifier),
    (char *) &_oc_CORBA_Identifier,
    0,
    sizeof (CORBA::Identifier)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_Identifier =
    &_tc_TAO_tc_CORBA_Identifier;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ScopedName[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5363), 
  ACE_NTOHL (0x6f706564), 
  ACE_NTOHL (0x4e616d65), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ScopedName:1.0
    11,
  ACE_NTOHL (0x53636f70), 
  ACE_NTOHL (0x65644e61), 
  ACE_NTOHL (0x6d650000),  // name = ScopedName
    CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ScopedName (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ScopedName),
    (char *) &_oc_CORBA_ScopedName,
    0,
    sizeof (CORBA::ScopedName)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ScopedName =
    &_tc_TAO_tc_CORBA_ScopedName;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_RepositoryId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5265), 
  ACE_NTOHL (0x706f7369), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x49643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
    13,
  ACE_NTOHL (0x5265706f), 
  ACE_NTOHL (0x7369746f), 
  ACE_NTOHL (0x72794964), 
  ACE_NTOHL (0x0),  // name = RepositoryId
    CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_RepositoryId (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_RepositoryId),
    (char *) &_oc_CORBA_RepositoryId,
    0,
    sizeof (CORBA::RepositoryId)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_RepositoryId =
    &_tc_TAO_tc_CORBA_RepositoryId;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_DefinitionKind[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4465), 
  ACE_NTOHL (0x66696e69), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x4b696e64), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/DefinitionKind:1.0
  15,
  ACE_NTOHL (0x44656669), 
  ACE_NTOHL (0x6e697469), 
  ACE_NTOHL (0x6f6e4b69), 
  ACE_NTOHL (0x6e640000),  // name = DefinitionKind
  36, // member count
  8,
  ACE_NTOHL (0x646b5f6e), 
  ACE_NTOHL (0x6f6e6500),  // name = dk_none
  7,
  ACE_NTOHL (0x646b5f61), 
  ACE_NTOHL (0x6c6c0000),  // name = dk_all
  13,
  ACE_NTOHL (0x646b5f41), 
  ACE_NTOHL (0x74747269), 
  ACE_NTOHL (0x62757465), 
  ACE_NTOHL (0x0),  // name = dk_Attribute
  12,
  ACE_NTOHL (0x646b5f43), 
  ACE_NTOHL (0x6f6e7374), 
  ACE_NTOHL (0x616e7400),  // name = dk_Constant
  13,
  ACE_NTOHL (0x646b5f45), 
  ACE_NTOHL (0x78636570), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = dk_Exception
  13,
  ACE_NTOHL (0x646b5f49), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x0),  // name = dk_Interface
  10,
  ACE_NTOHL (0x646b5f4d), 
  ACE_NTOHL (0x6f64756c), 
  ACE_NTOHL (0x65000000),  // name = dk_Module
  13,
  ACE_NTOHL (0x646b5f4f), 
  ACE_NTOHL (0x70657261), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = dk_Operation
  11,
  ACE_NTOHL (0x646b5f54), 
  ACE_NTOHL (0x79706564), 
  ACE_NTOHL (0x65660000),  // name = dk_Typedef
  9,
  ACE_NTOHL (0x646b5f41), 
  ACE_NTOHL (0x6c696173), 
  ACE_NTOHL (0x0),  // name = dk_Alias
  10,
  ACE_NTOHL (0x646b5f53), 
  ACE_NTOHL (0x74727563), 
  ACE_NTOHL (0x74000000),  // name = dk_Struct
  9,
  ACE_NTOHL (0x646b5f55), 
  ACE_NTOHL (0x6e696f6e), 
  ACE_NTOHL (0x0),  // name = dk_Union
  8,
  ACE_NTOHL (0x646b5f45), 
  ACE_NTOHL (0x6e756d00),  // name = dk_Enum
  13,
  ACE_NTOHL (0x646b5f50), 
  ACE_NTOHL (0x72696d69), 
  ACE_NTOHL (0x74697665), 
  ACE_NTOHL (0x0),  // name = dk_Primitive
  10,
  ACE_NTOHL (0x646b5f53), 
  ACE_NTOHL (0x7472696e), 
  ACE_NTOHL (0x67000000),  // name = dk_String
  12,
  ACE_NTOHL (0x646b5f53), 
  ACE_NTOHL (0x65717565), 
  ACE_NTOHL (0x6e636500),  // name = dk_Sequence
  9,
  ACE_NTOHL (0x646b5f41), 
  ACE_NTOHL (0x72726179), 
  ACE_NTOHL (0x0),  // name = dk_Array
  14,
  ACE_NTOHL (0x646b5f52), 
  ACE_NTOHL (0x65706f73), 
  ACE_NTOHL (0x69746f72), 
  ACE_NTOHL (0x79000000),  // name = dk_Repository
  11,
  ACE_NTOHL (0x646b5f57), 
  ACE_NTOHL (0x73747269), 
  ACE_NTOHL (0x6e670000),  // name = dk_Wstring
  9,
  ACE_NTOHL (0x646b5f46), 
  ACE_NTOHL (0x69786564), 
  ACE_NTOHL (0x0),  // name = dk_Fixed
  9,
  ACE_NTOHL (0x646b5f56), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x0),  // name = dk_Value
  12,
  ACE_NTOHL (0x646b5f56), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x426f7800),  // name = dk_ValueBox
  15,
  ACE_NTOHL (0x646b5f56), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x4d656d62), 
  ACE_NTOHL (0x65720000),  // name = dk_ValueMember
  10,
  ACE_NTOHL (0x646b5f4e), 
  ACE_NTOHL (0x61746976), 
  ACE_NTOHL (0x65000000),  // name = dk_Native
  21,
  ACE_NTOHL (0x646b5f41), 
  ACE_NTOHL (0x62737472), 
  ACE_NTOHL (0x61637449), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x0),  // name = dk_AbstractInterface
  18,
  ACE_NTOHL (0x646b5f4c), 
  ACE_NTOHL (0x6f63616c), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65000000),  // name = dk_LocalInterface
  13,
  ACE_NTOHL (0x646b5f43), 
  ACE_NTOHL (0x6f6d706f), 
  ACE_NTOHL (0x6e656e74), 
  ACE_NTOHL (0x0),  // name = dk_Component
  8,
  ACE_NTOHL (0x646b5f48), 
  ACE_NTOHL (0x6f6d6500),  // name = dk_Home
  11,
  ACE_NTOHL (0x646b5f46), 
  ACE_NTOHL (0x6163746f), 
  ACE_NTOHL (0x72790000),  // name = dk_Factory
  10,
  ACE_NTOHL (0x646b5f46), 
  ACE_NTOHL (0x696e6465), 
  ACE_NTOHL (0x72000000),  // name = dk_Finder
  9,
  ACE_NTOHL (0x646b5f45), 
  ACE_NTOHL (0x6d697473), 
  ACE_NTOHL (0x0),  // name = dk_Emits
  13,
  ACE_NTOHL (0x646b5f50), 
  ACE_NTOHL (0x75626c69), 
  ACE_NTOHL (0x73686573), 
  ACE_NTOHL (0x0),  // name = dk_Publishes
  12,
  ACE_NTOHL (0x646b5f43), 
  ACE_NTOHL (0x6f6e7375), 
  ACE_NTOHL (0x6d657300),  // name = dk_Consumes
  12,
  ACE_NTOHL (0x646b5f50), 
  ACE_NTOHL (0x726f7669), 
  ACE_NTOHL (0x64657300),  // name = dk_Provides
  8,
  ACE_NTOHL (0x646b5f55), 
  ACE_NTOHL (0x73657300),  // name = dk_Uses
  9,
  ACE_NTOHL (0x646b5f45), 
  ACE_NTOHL (0x76656e74), 
  ACE_NTOHL (0x0),  // name = dk_Event
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_DefinitionKind (
    CORBA::tk_enum,
    sizeof (_oc_CORBA_DefinitionKind),
    (char *) &_oc_CORBA_DefinitionKind,
    0,
    sizeof (CORBA::DefinitionKind)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_DefinitionKind =
    &_tc_TAO_tc_CORBA_DefinitionKind;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::IRObject.

CORBA::IRObject_ptr
TAO::Objref_Traits<CORBA::IRObject>::tao_duplicate (
    CORBA::IRObject_ptr p
  )
{
  return CORBA::IRObject::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::IRObject>::tao_release (
    CORBA::IRObject_ptr p
  )
{
  CORBA::release (p);
}

CORBA::IRObject_ptr
TAO::Objref_Traits<CORBA::IRObject>::tao_nil (void)
{
  return CORBA::IRObject::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::IRObject>::tao_marshal (
    CORBA::IRObject_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::DefinitionKind CORBA::IRObject::def_kind (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IRObject_Proxy_Broker_ == 0)
    {
      CORBA_IRObject_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::DefinitionKind>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_def_kind",
      13,
      this->the_TAO_IRObject_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::IRObject::destroy (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IRObject_Proxy_Broker_ == 0)
    {
      CORBA_IRObject_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "destroy",
      7,
      this->the_TAO_IRObject_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::IRObject::IRObject (int collocated)
 : the_TAO_IRObject_Proxy_Broker_ (0)
{
  this->CORBA_IRObject_setup_collocation (collocated);
}

void
CORBA::IRObject::CORBA_IRObject_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_IRObject_Proxy_Broker_ =
        ::CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer (this);
    }
}

CORBA::IRObject::~IRObject (void)
{}

void 
CORBA::IRObject::_tao_any_destructor (void *_tao_void_pointer)
{
  IRObject *_tao_tmp_pointer =
    ACE_static_cast (IRObject *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::IRObject_ptr
CORBA::IRObject::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IRObject>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/IRObject:1.0",
        CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::IRObject_ptr
CORBA::IRObject::_duplicate (IRObject_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::IRObject::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::IRObject::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/IRObject:1.0";
}

CORBA::Boolean
CORBA::IRObject::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_IRObject[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4952), 
  ACE_NTOHL (0x4f626a65), 
  ACE_NTOHL (0x63743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/IRObject:1.0
    9,
  ACE_NTOHL (0x49524f62), 
  ACE_NTOHL (0x6a656374), 
  ACE_NTOHL (0x0),  // name = IRObject
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_IRObject (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_IRObject),
    (char *) &_oc_CORBA_IRObject,
    0,
    sizeof (CORBA::IRObject)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_IRObject =
    &_tc_TAO_tc_CORBA_IRObject;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_VersionSpec[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5665), 
  ACE_NTOHL (0x7273696f), 
  ACE_NTOHL (0x6e537065), 
  ACE_NTOHL (0x633a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
    12,
  ACE_NTOHL (0x56657273), 
  ACE_NTOHL (0x696f6e53), 
  ACE_NTOHL (0x70656300),  // name = VersionSpec
    CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_VersionSpec (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_VersionSpec),
    (char *) &_oc_CORBA_VersionSpec,
    0,
    sizeof (CORBA::VersionSpec)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_VersionSpec =
    &_tc_TAO_tc_CORBA_VersionSpec;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::Contained.

CORBA::Contained_ptr
TAO::Objref_Traits<CORBA::Contained>::tao_duplicate (
    CORBA::Contained_ptr p
  )
{
  return CORBA::Contained::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::Contained>::tao_release (
    CORBA::Contained_ptr p
  )
{
  CORBA::release (p);
}

CORBA::Contained_ptr
TAO::Objref_Traits<CORBA::Contained>::tao_nil (void)
{
  return CORBA::Contained::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::Contained>::tao_marshal (
    CORBA::Contained_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::id (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::RepositoryId>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_id",
      7,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::id (
    const char * id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_id",
      7,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::name (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Identifier>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_name",
      9,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::name (
    const char * name
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_name",
      9,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::version (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::VersionSpec>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_version",
      12,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::version (
    const char * version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_version",
      12,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Container_ptr CORBA::Contained::defined_in (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Container>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_defined_in",
      15,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

char * CORBA::Contained::absolute_name (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ScopedName>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_absolute_name",
      18,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Repository_ptr CORBA::Contained::containing_repository (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Repository>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_containing_repository",
      26,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Contained_Description[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65642f), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained/Description:1.0
    12,
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e00),  // name = Description
  2, // member count
    5,
  ACE_NTOHL (0x6b696e64), 
  ACE_NTOHL (0x0),  // name = kind
    CORBA::tk_enum, // typecode kind
  684, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
    37,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4465), 
    ACE_NTOHL (0x66696e69), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x4b696e64), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/DefinitionKind:1.0
    15,
    ACE_NTOHL (0x44656669), 
    ACE_NTOHL (0x6e697469), 
    ACE_NTOHL (0x6f6e4b69), 
    ACE_NTOHL (0x6e640000),  // name = DefinitionKind
    36, // member count
    8,
    ACE_NTOHL (0x646b5f6e), 
    ACE_NTOHL (0x6f6e6500),  // name = dk_none
    7,
    ACE_NTOHL (0x646b5f61), 
    ACE_NTOHL (0x6c6c0000),  // name = dk_all
    13,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x74747269), 
    ACE_NTOHL (0x62757465), 
    ACE_NTOHL (0x0),  // name = dk_Attribute
    12,
    ACE_NTOHL (0x646b5f43), 
    ACE_NTOHL (0x6f6e7374), 
    ACE_NTOHL (0x616e7400),  // name = dk_Constant
    13,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x78636570), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x0),  // name = dk_Exception
    13,
    ACE_NTOHL (0x646b5f49), 
    ACE_NTOHL (0x6e746572), 
    ACE_NTOHL (0x66616365), 
    ACE_NTOHL (0x0),  // name = dk_Interface
    10,
    ACE_NTOHL (0x646b5f4d), 
    ACE_NTOHL (0x6f64756c), 
    ACE_NTOHL (0x65000000),  // name = dk_Module
    13,
    ACE_NTOHL (0x646b5f4f), 
    ACE_NTOHL (0x70657261), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x0),  // name = dk_Operation
    11,
    ACE_NTOHL (0x646b5f54), 
    ACE_NTOHL (0x79706564), 
    ACE_NTOHL (0x65660000),  // name = dk_Typedef
    9,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x6c696173), 
    ACE_NTOHL (0x0),  // name = dk_Alias
    10,
    ACE_NTOHL (0x646b5f53), 
    ACE_NTOHL (0x74727563), 
    ACE_NTOHL (0x74000000),  // name = dk_Struct
    9,
    ACE_NTOHL (0x646b5f55), 
    ACE_NTOHL (0x6e696f6e), 
    ACE_NTOHL (0x0),  // name = dk_Union
    8,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x6e756d00),  // name = dk_Enum
    13,
    ACE_NTOHL (0x646b5f50), 
    ACE_NTOHL (0x72696d69), 
    ACE_NTOHL (0x74697665), 
    ACE_NTOHL (0x0),  // name = dk_Primitive
    10,
    ACE_NTOHL (0x646b5f53), 
    ACE_NTOHL (0x7472696e), 
    ACE_NTOHL (0x67000000),  // name = dk_String
    12,
    ACE_NTOHL (0x646b5f53), 
    ACE_NTOHL (0x65717565), 
    ACE_NTOHL (0x6e636500),  // name = dk_Sequence
    9,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x72726179), 
    ACE_NTOHL (0x0),  // name = dk_Array
    14,
    ACE_NTOHL (0x646b5f52), 
    ACE_NTOHL (0x65706f73), 
    ACE_NTOHL (0x69746f72), 
    ACE_NTOHL (0x79000000),  // name = dk_Repository
    11,
    ACE_NTOHL (0x646b5f57), 
    ACE_NTOHL (0x73747269), 
    ACE_NTOHL (0x6e670000),  // name = dk_Wstring
    9,
    ACE_NTOHL (0x646b5f46), 
    ACE_NTOHL (0x69786564), 
    ACE_NTOHL (0x0),  // name = dk_Fixed
    9,
    ACE_NTOHL (0x646b5f56), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x0),  // name = dk_Value
    12,
    ACE_NTOHL (0x646b5f56), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x426f7800),  // name = dk_ValueBox
    15,
    ACE_NTOHL (0x646b5f56), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x4d656d62), 
    ACE_NTOHL (0x65720000),  // name = dk_ValueMember
    10,
    ACE_NTOHL (0x646b5f4e), 
    ACE_NTOHL (0x61746976), 
    ACE_NTOHL (0x65000000),  // name = dk_Native
    21,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x62737472), 
    ACE_NTOHL (0x61637449), 
    ACE_NTOHL (0x6e746572), 
    ACE_NTOHL (0x66616365), 
    ACE_NTOHL (0x0),  // name = dk_AbstractInterface
    18,
    ACE_NTOHL (0x646b5f4c), 
    ACE_NTOHL (0x6f63616c), 
    ACE_NTOHL (0x496e7465), 
    ACE_NTOHL (0x72666163), 
    ACE_NTOHL (0x65000000),  // name = dk_LocalInterface
    13,
    ACE_NTOHL (0x646b5f43), 
    ACE_NTOHL (0x6f6d706f), 
    ACE_NTOHL (0x6e656e74), 
    ACE_NTOHL (0x0),  // name = dk_Component
    8,
    ACE_NTOHL (0x646b5f48), 
    ACE_NTOHL (0x6f6d6500),  // name = dk_Home
    11,
    ACE_NTOHL (0x646b5f46), 
    ACE_NTOHL (0x6163746f), 
    ACE_NTOHL (0x72790000),  // name = dk_Factory
    10,
    ACE_NTOHL (0x646b5f46), 
    ACE_NTOHL (0x696e6465), 
    ACE_NTOHL (0x72000000),  // name = dk_Finder
    9,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x6d697473), 
    ACE_NTOHL (0x0),  // name = dk_Emits
    13,
    ACE_NTOHL (0x646b5f50), 
    ACE_NTOHL (0x75626c69), 
    ACE_NTOHL (0x73686573), 
    ACE_NTOHL (0x0),  // name = dk_Publishes
    12,
    ACE_NTOHL (0x646b5f43), 
    ACE_NTOHL (0x6f6e7375), 
    ACE_NTOHL (0x6d657300),  // name = dk_Consumes
    12,
    ACE_NTOHL (0x646b5f50), 
    ACE_NTOHL (0x726f7669), 
    ACE_NTOHL (0x64657300),  // name = dk_Provides
    8,
    ACE_NTOHL (0x646b5f55), 
    ACE_NTOHL (0x73657300),  // name = dk_Uses
    9,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x76656e74), 
    ACE_NTOHL (0x0),  // name = dk_Event
    
  6,
  ACE_NTOHL (0x76616c75), 
  ACE_NTOHL (0x65000000),  // name = value
    CORBA::tk_any,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_Contained_Description (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_Contained_Description),
    (char *) &_oc_CORBA_Contained_Description,
    0,
    sizeof (CORBA::Contained::Description)
  );

::CORBA::TypeCode_ptr CORBA::Contained::_tc_Description =
  &_tc_TAO_tc_CORBA_Contained_Description;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::Contained::Description::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Description *_tao_tmp_pointer =
    ACE_static_cast (Description *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Contained::Description * CORBA::Contained::describe (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Contained::Description>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "describe",
      8,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::Contained::move (
    CORBA::Container_ptr new_container,
    const char * new_name,
    const char * new_version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Contained_Proxy_Broker_ == 0)
    {
      CORBA_Contained_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Container>::in_arg_val _tao_new_container (new_container);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_new_name (new_name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_new_version (new_version);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_new_container,
      &_tao_new_name,
      &_tao_new_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "move",
      4,
      this->the_TAO_Contained_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::Contained::Contained (int collocated)
 : the_TAO_Contained_Proxy_Broker_ (0)
{
  this->CORBA_Contained_setup_collocation (collocated);
}

void
CORBA::Contained::CORBA_Contained_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_Contained_Proxy_Broker_ =
        ::CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IRObject_setup_collocation (collocated);
}

CORBA::Contained::~Contained (void)
{}

void 
CORBA::Contained::_tao_any_destructor (void *_tao_void_pointer)
{
  Contained *_tao_tmp_pointer =
    ACE_static_cast (Contained *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::Contained_ptr
CORBA::Contained::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Contained>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Contained:1.0",
        CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Contained_ptr
CORBA::Contained::_duplicate (Contained_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::Contained::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::Contained::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/Contained:1.0";
}

CORBA::Boolean
CORBA::Contained::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Contained[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained:1.0
    10,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x64000000),  // name = Contained
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_Contained (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_Contained),
    (char *) &_oc_CORBA_Contained,
    0,
    sizeof (CORBA::Contained)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_Contained =
    &_tc_TAO_tc_CORBA_Contained;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_INTERFACEDEFSEQ_CS_)
#define _CORBA_INTERFACEDEFSEQ_CS_

CORBA::InterfaceDefSeq::InterfaceDefSeq (void)
{}

CORBA::InterfaceDefSeq::InterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >
    (max)
{}

CORBA::InterfaceDefSeq::InterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::InterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::InterfaceDefSeq::InterfaceDefSeq (
    const InterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >
    (seq)
{}

CORBA::InterfaceDefSeq::~InterfaceDefSeq (void)
{}

void CORBA::InterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  InterfaceDefSeq * _tao_tmp_pointer =
    ACE_static_cast (InterfaceDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InterfaceDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65665365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/InterfaceDefSeq:1.0
    16,
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x53657100),  // name = InterfaceDefSeq
    CORBA::tk_sequence, // typecode kind
  80, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    64, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f496e), 
      ACE_NTOHL (0x74657266), 
      ACE_NTOHL (0x61636544), 
      ACE_NTOHL (0x65663a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/InterfaceDef:1.0
            13,
      ACE_NTOHL (0x496e7465), 
      ACE_NTOHL (0x72666163), 
      ACE_NTOHL (0x65446566), 
      ACE_NTOHL (0x0),  // name = InterfaceDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_InterfaceDefSeq),
    (char *) &_oc_CORBA_InterfaceDefSeq,
    0,
    sizeof (CORBA::InterfaceDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_InterfaceDefSeq =
    &_tc_TAO_tc_CORBA_InterfaceDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_VALUEDEFSEQ_CS_)
#define _CORBA_VALUEDEFSEQ_CS_

CORBA::ValueDefSeq::ValueDefSeq (void)
{}

CORBA::ValueDefSeq::ValueDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >
    (max)
{}

CORBA::ValueDefSeq::ValueDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ValueDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ValueDefSeq::ValueDefSeq (
    const ValueDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >
    (seq)
{}

CORBA::ValueDefSeq::~ValueDefSeq (void)
{}

void CORBA::ValueDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ValueDefSeq * _tao_tmp_pointer =
    ACE_static_cast (ValueDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ValueDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5661), 
  ACE_NTOHL (0x6c756544), 
  ACE_NTOHL (0x65665365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ValueDefSeq:1.0
    12,
  ACE_NTOHL (0x56616c75), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x53657100),  // name = ValueDefSeq
    CORBA::tk_sequence, // typecode kind
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    56, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      31,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5661), 
      ACE_NTOHL (0x6c756544), 
      ACE_NTOHL (0x65663a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ValueDef:1.0
            9,
      ACE_NTOHL (0x56616c75), 
      ACE_NTOHL (0x65446566), 
      ACE_NTOHL (0x0),  // name = ValueDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ValueDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ValueDefSeq),
    (char *) &_oc_CORBA_ValueDefSeq,
    0,
    sizeof (CORBA::ValueDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ValueDefSeq =
    &_tc_TAO_tc_CORBA_ValueDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ_CS_

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (void)
{}

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >
    (max)
{}

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::AbstractInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (
    const AbstractInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >
    (seq)
{}

CORBA::AbstractInterfaceDefSeq::~AbstractInterfaceDefSeq (void)
{}

void CORBA::AbstractInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  AbstractInterfaceDefSeq * _tao_tmp_pointer =
    ACE_static_cast (AbstractInterfaceDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AbstractInterfaceDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  46,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4162), 
  ACE_NTOHL (0x73747261), 
  ACE_NTOHL (0x6374496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65665365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/AbstractInterfaceDefSeq:1.0
    24,
  ACE_NTOHL (0x41627374), 
  ACE_NTOHL (0x72616374), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x53657100),  // name = AbstractInterfaceDefSeq
    CORBA::tk_sequence, // typecode kind
  96, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    80, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      43,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4162), 
      ACE_NTOHL (0x73747261), 
      ACE_NTOHL (0x6374496e), 
      ACE_NTOHL (0x74657266), 
      ACE_NTOHL (0x61636544), 
      ACE_NTOHL (0x65663a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AbstractInterfaceDef:1.0
            21,
      ACE_NTOHL (0x41627374), 
      ACE_NTOHL (0x72616374), 
      ACE_NTOHL (0x496e7465), 
      ACE_NTOHL (0x72666163), 
      ACE_NTOHL (0x65446566), 
      ACE_NTOHL (0x0),  // name = AbstractInterfaceDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_AbstractInterfaceDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_AbstractInterfaceDefSeq),
    (char *) &_oc_CORBA_AbstractInterfaceDefSeq,
    0,
    sizeof (CORBA::AbstractInterfaceDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AbstractInterfaceDefSeq =
    &_tc_TAO_tc_CORBA_AbstractInterfaceDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_LOCALINTERFACEDEFSEQ_CS_

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (void)
{}

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >
    (max)
{}

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::LocalInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (
    const LocalInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >
    (seq)
{}

CORBA::LocalInterfaceDefSeq::~LocalInterfaceDefSeq (void)
{}

void CORBA::LocalInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  LocalInterfaceDefSeq * _tao_tmp_pointer =
    ACE_static_cast (LocalInterfaceDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_LocalInterfaceDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4c6f), 
  ACE_NTOHL (0x63616c49), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44656653), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/LocalInterfaceDefSeq:1.0
    21,
  ACE_NTOHL (0x4c6f6361), 
  ACE_NTOHL (0x6c496e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x66536571), 
  ACE_NTOHL (0x0),  // name = LocalInterfaceDefSeq
    CORBA::tk_sequence, // typecode kind
  88, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    72, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      40,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4c6f), 
      ACE_NTOHL (0x63616c49), 
      ACE_NTOHL (0x6e746572), 
      ACE_NTOHL (0x66616365), 
      ACE_NTOHL (0x4465663a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/LocalInterfaceDef:1.0
            18,
      ACE_NTOHL (0x4c6f6361), 
      ACE_NTOHL (0x6c496e74), 
      ACE_NTOHL (0x65726661), 
      ACE_NTOHL (0x63654465), 
      ACE_NTOHL (0x66000000),  // name = LocalInterfaceDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_LocalInterfaceDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_LocalInterfaceDefSeq),
    (char *) &_oc_CORBA_LocalInterfaceDefSeq,
    0,
    sizeof (CORBA::LocalInterfaceDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_LocalInterfaceDefSeq =
    &_tc_TAO_tc_CORBA_LocalInterfaceDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTINTERFACEDEFSEQ_CS_

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (void)
{}

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >
    (max)
{}

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtInterfaceDefSeq::ExtInterfaceDefSeq (
    const ExtInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >
    (seq)
{}

CORBA::ExtInterfaceDefSeq::~ExtInterfaceDefSeq (void)
{}

void CORBA::ExtInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtInterfaceDefSeq * _tao_tmp_pointer =
    ACE_static_cast (ExtInterfaceDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtInterfaceDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x66536571), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ExtInterfaceDefSeq:1.0
    19,
  ACE_NTOHL (0x45787449), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44656653), 
  ACE_NTOHL (0x65710000),  // name = ExtInterfaceDefSeq
    CORBA::tk_sequence, // typecode kind
  84, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    68, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      38,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x74496e74), 
      ACE_NTOHL (0x65726661), 
      ACE_NTOHL (0x63654465), 
      ACE_NTOHL (0x663a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtInterfaceDef:1.0
            16,
      ACE_NTOHL (0x45787449), 
      ACE_NTOHL (0x6e746572), 
      ACE_NTOHL (0x66616365), 
      ACE_NTOHL (0x44656600),  // name = ExtInterfaceDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtInterfaceDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExtInterfaceDefSeq),
    (char *) &_oc_CORBA_ExtInterfaceDefSeq,
    0,
    sizeof (CORBA::ExtInterfaceDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtInterfaceDefSeq =
    &_tc_TAO_tc_CORBA_ExtInterfaceDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXTVALUEDEFSEQ_CS_)
#define _CORBA_EXTVALUEDEFSEQ_CS_

CORBA::ExtValueDefSeq::ExtValueDefSeq (void)
{}

CORBA::ExtValueDefSeq::ExtValueDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >
    (max)
{}

CORBA::ExtValueDefSeq::ExtValueDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtValueDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtValueDefSeq::ExtValueDefSeq (
    const ExtValueDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >
    (seq)
{}

CORBA::ExtValueDefSeq::~ExtValueDefSeq (void)
{}

void CORBA::ExtValueDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtValueDefSeq * _tao_tmp_pointer =
    ACE_static_cast (ExtValueDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtValueDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x7456616c), 
  ACE_NTOHL (0x75654465), 
  ACE_NTOHL (0x66536571), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ExtValueDefSeq:1.0
    15,
  ACE_NTOHL (0x45787456), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x44656653), 
  ACE_NTOHL (0x65710000),  // name = ExtValueDefSeq
    CORBA::tk_sequence, // typecode kind
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    60, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x7456616c), 
      ACE_NTOHL (0x75654465), 
      ACE_NTOHL (0x663a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtValueDef:1.0
            12,
      ACE_NTOHL (0x45787456), 
      ACE_NTOHL (0x616c7565), 
      ACE_NTOHL (0x44656600),  // name = ExtValueDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtValueDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExtValueDefSeq),
    (char *) &_oc_CORBA_ExtValueDefSeq,
    0,
    sizeof (CORBA::ExtValueDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtValueDefSeq =
    &_tc_TAO_tc_CORBA_ExtValueDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (void)
{}

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >
    (max)
{}

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtAbstractInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtAbstractInterfaceDefSeq::ExtAbstractInterfaceDefSeq (
    const ExtAbstractInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >
    (seq)
{}

CORBA::ExtAbstractInterfaceDefSeq::~ExtAbstractInterfaceDefSeq (void)
{}

void CORBA::ExtAbstractInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtAbstractInterfaceDefSeq * _tao_tmp_pointer =
    ACE_static_cast (ExtAbstractInterfaceDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtAbstractInterfaceDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  49,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74416273), 
  ACE_NTOHL (0x74726163), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x66536571), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ExtAbstractInterfaceDefSeq:1.0
    27,
  ACE_NTOHL (0x45787441), 
  ACE_NTOHL (0x62737472), 
  ACE_NTOHL (0x61637449), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44656653), 
  ACE_NTOHL (0x65710000),  // name = ExtAbstractInterfaceDefSeq
    CORBA::tk_sequence, // typecode kind
  100, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    84, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      46,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x74416273), 
      ACE_NTOHL (0x74726163), 
      ACE_NTOHL (0x74496e74), 
      ACE_NTOHL (0x65726661), 
      ACE_NTOHL (0x63654465), 
      ACE_NTOHL (0x663a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0
            24,
      ACE_NTOHL (0x45787441), 
      ACE_NTOHL (0x62737472), 
      ACE_NTOHL (0x61637449), 
      ACE_NTOHL (0x6e746572), 
      ACE_NTOHL (0x66616365), 
      ACE_NTOHL (0x44656600),  // name = ExtAbstractInterfaceDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtAbstractInterfaceDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExtAbstractInterfaceDefSeq),
    (char *) &_oc_CORBA_ExtAbstractInterfaceDefSeq,
    0,
    sizeof (CORBA::ExtAbstractInterfaceDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtAbstractInterfaceDefSeq =
    &_tc_TAO_tc_CORBA_ExtAbstractInterfaceDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXTLOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTLOCALINTERFACEDEFSEQ_CS_

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (void)
{}

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >
    (max)
{}

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtLocalInterfaceDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExtLocalInterfaceDefSeq::ExtLocalInterfaceDefSeq (
    const ExtLocalInterfaceDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >
    (seq)
{}

CORBA::ExtLocalInterfaceDefSeq::~ExtLocalInterfaceDefSeq (void)
{}

void CORBA::ExtLocalInterfaceDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtLocalInterfaceDefSeq * _tao_tmp_pointer =
    ACE_static_cast (ExtLocalInterfaceDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtLocalInterfaceDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  46,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x744c6f63), 
  ACE_NTOHL (0x616c496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65665365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtLocalInterfaceDefSeq:1.0
    24,
  ACE_NTOHL (0x4578744c), 
  ACE_NTOHL (0x6f63616c), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x53657100),  // name = ExtLocalInterfaceDefSeq
    CORBA::tk_sequence, // typecode kind
  96, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    80, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      43,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x744c6f63), 
      ACE_NTOHL (0x616c496e), 
      ACE_NTOHL (0x74657266), 
      ACE_NTOHL (0x61636544), 
      ACE_NTOHL (0x65663a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0
            21,
      ACE_NTOHL (0x4578744c), 
      ACE_NTOHL (0x6f63616c), 
      ACE_NTOHL (0x496e7465), 
      ACE_NTOHL (0x72666163), 
      ACE_NTOHL (0x65446566), 
      ACE_NTOHL (0x0),  // name = ExtLocalInterfaceDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtLocalInterfaceDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExtLocalInterfaceDefSeq),
    (char *) &_oc_CORBA_ExtLocalInterfaceDefSeq,
    0,
    sizeof (CORBA::ExtLocalInterfaceDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtLocalInterfaceDefSeq =
    &_tc_TAO_tc_CORBA_ExtLocalInterfaceDefSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_CONTAINEDSEQ_CS_)
#define _CORBA_CONTAINEDSEQ_CS_

CORBA::ContainedSeq::ContainedSeq (void)
{}

CORBA::ContainedSeq::ContainedSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >
    (max)
{}

CORBA::ContainedSeq::ContainedSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Contained_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >
    (max, length, buffer, release)
{}

CORBA::ContainedSeq::ContainedSeq (
    const ContainedSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >
    (seq)
{}

CORBA::ContainedSeq::~ContainedSeq (void)
{}

void CORBA::ContainedSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ContainedSeq * _tao_tmp_pointer =
    ACE_static_cast (ContainedSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ContainedSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e656453), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContainedSeq:1.0
    13,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x64536571), 
  ACE_NTOHL (0x0),  // name = ContainedSeq
    CORBA::tk_sequence, // typecode kind
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    56, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      32,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f436f), 
      ACE_NTOHL (0x6e746169), 
      ACE_NTOHL (0x6e65643a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained:1.0
            10,
      ACE_NTOHL (0x436f6e74), 
      ACE_NTOHL (0x61696e65), 
      ACE_NTOHL (0x64000000),  // name = Contained
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ContainedSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ContainedSeq),
    (char *) &_oc_CORBA_ContainedSeq,
    0,
    sizeof (CORBA::ContainedSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ContainedSeq =
    &_tc_TAO_tc_CORBA_ContainedSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_StructMember[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5374), 
  ACE_NTOHL (0x72756374), 
  ACE_NTOHL (0x4d656d62), 
  ACE_NTOHL (0x65723a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
    13,
  ACE_NTOHL (0x53747275), 
  ACE_NTOHL (0x63744d65), 
  ACE_NTOHL (0x6d626572), 
  ACE_NTOHL (0x0),  // name = StructMember
  3, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

  9,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x5f646566), 
  ACE_NTOHL (0x0),  // name = type_def
    CORBA::tk_objref, // typecode kind
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4944), 
    ACE_NTOHL (0x4c547970), 
    ACE_NTOHL (0x653a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
        8,
    ACE_NTOHL (0x49444c54), 
    ACE_NTOHL (0x79706500),  // name = IDLType
    
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_StructMember (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_StructMember),
    (char *) &_oc_CORBA_StructMember,
    0,
    sizeof (CORBA::StructMember)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_StructMember =
    &_tc_TAO_tc_CORBA_StructMember;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::StructMember::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  StructMember *_tao_tmp_pointer =
    ACE_static_cast (StructMember *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_STRUCTMEMBERSEQ_CS_)
#define _CORBA_STRUCTMEMBERSEQ_CS_

CORBA::StructMemberSeq::StructMemberSeq (void)
{}

CORBA::StructMemberSeq::StructMemberSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::StructMember
      >
    (max)
{}

CORBA::StructMemberSeq::StructMemberSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::StructMember * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::StructMember
      >
    (max, length, buffer, release)
{}

CORBA::StructMemberSeq::StructMemberSeq (
    const StructMemberSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::StructMember
      >
    (seq)
{}

CORBA::StructMemberSeq::~StructMemberSeq (void)
{}

void CORBA::StructMemberSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  StructMemberSeq * _tao_tmp_pointer =
    ACE_static_cast (StructMemberSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_StructMemberSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5374), 
  ACE_NTOHL (0x72756374), 
  ACE_NTOHL (0x4d656d62), 
  ACE_NTOHL (0x65725365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
    16,
  ACE_NTOHL (0x53747275), 
  ACE_NTOHL (0x63744d65), 
  ACE_NTOHL (0x6d626572), 
  ACE_NTOHL (0x53657100),  // name = StructMemberSeq
    CORBA::tk_sequence, // typecode kind
  264, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    248, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5374), 
      ACE_NTOHL (0x72756374), 
      ACE_NTOHL (0x4d656d62), 
      ACE_NTOHL (0x65723a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
            13,
      ACE_NTOHL (0x53747275), 
      ACE_NTOHL (0x63744d65), 
      ACE_NTOHL (0x6d626572), 
      ACE_NTOHL (0x0),  // name = StructMember
      3, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      5,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x0),  // name = type
            CORBA::tk_TypeCode,

      9,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x5f646566), 
      ACE_NTOHL (0x0),  // name = type_def
            CORBA::tk_objref, // typecode kind
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4944), 
        ACE_NTOHL (0x4c547970), 
        ACE_NTOHL (0x653a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                8,
        ACE_NTOHL (0x49444c54), 
        ACE_NTOHL (0x79706500),  // name = IDLType
        

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_StructMemberSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_StructMemberSeq),
    (char *) &_oc_CORBA_StructMemberSeq,
    0,
    sizeof (CORBA::StructMemberSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_StructMemberSeq =
    &_tc_TAO_tc_CORBA_StructMemberSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Initializer[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x69746961), 
  ACE_NTOHL (0x6c697a65), 
  ACE_NTOHL (0x723a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/Initializer:1.0
    12,
  ACE_NTOHL (0x496e6974), 
  ACE_NTOHL (0x69616c69), 
  ACE_NTOHL (0x7a657200),  // name = Initializer
  2, // member count
    8,
  ACE_NTOHL (0x6d656d62), 
  ACE_NTOHL (0x65727300),  // name = members
    CORBA::tk_alias, // typecode kind for typedefs
  340, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5374), 
    ACE_NTOHL (0x72756374), 
    ACE_NTOHL (0x4d656d62), 
    ACE_NTOHL (0x65725365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
        16,
    ACE_NTOHL (0x53747275), 
    ACE_NTOHL (0x63744d65), 
    ACE_NTOHL (0x6d626572), 
    ACE_NTOHL (0x53657100),  // name = StructMemberSeq
        CORBA::tk_sequence, // typecode kind
    264, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      248, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5374), 
        ACE_NTOHL (0x72756374), 
        ACE_NTOHL (0x4d656d62), 
        ACE_NTOHL (0x65723a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
                13,
        ACE_NTOHL (0x53747275), 
        ACE_NTOHL (0x63744d65), 
        ACE_NTOHL (0x6d626572), 
        ACE_NTOHL (0x0),  // name = StructMember
        3, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,

        9,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x5f646566), 
        ACE_NTOHL (0x0),  // name = type_def
                CORBA::tk_objref, // typecode kind
        52, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          30,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4944), 
          ACE_NTOHL (0x4c547970), 
          ACE_NTOHL (0x653a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                    8,
          ACE_NTOHL (0x49444c54), 
          ACE_NTOHL (0x79706500),  // name = IDLType
          

      0U,


  5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_Initializer (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_Initializer),
    (char *) &_oc_CORBA_Initializer,
    0,
    sizeof (CORBA::Initializer)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_Initializer =
    &_tc_TAO_tc_CORBA_Initializer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::Initializer::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Initializer *_tao_tmp_pointer =
    ACE_static_cast (Initializer *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_INITIALIZERSEQ_CS_)
#define _CORBA_INITIALIZERSEQ_CS_

CORBA::InitializerSeq::InitializerSeq (void)
{}

CORBA::InitializerSeq::InitializerSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Initializer
      >
    (max)
{}

CORBA::InitializerSeq::InitializerSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Initializer * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Initializer
      >
    (max, length, buffer, release)
{}

CORBA::InitializerSeq::InitializerSeq (
    const InitializerSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Initializer
      >
    (seq)
{}

CORBA::InitializerSeq::~InitializerSeq (void)
{}

void CORBA::InitializerSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  InitializerSeq * _tao_tmp_pointer =
    ACE_static_cast (InitializerSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InitializerSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x69746961), 
  ACE_NTOHL (0x6c697a65), 
  ACE_NTOHL (0x72536571), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/InitializerSeq:1.0
    15,
  ACE_NTOHL (0x496e6974), 
  ACE_NTOHL (0x69616c69), 
  ACE_NTOHL (0x7a657253), 
  ACE_NTOHL (0x65710000),  // name = InitializerSeq
    CORBA::tk_sequence, // typecode kind
  528, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    512, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f496e), 
      ACE_NTOHL (0x69746961), 
      ACE_NTOHL (0x6c697a65), 
      ACE_NTOHL (0x723a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/Initializer:1.0
            12,
      ACE_NTOHL (0x496e6974), 
      ACE_NTOHL (0x69616c69), 
      ACE_NTOHL (0x7a657200),  // name = Initializer
      2, // member count
            8,
      ACE_NTOHL (0x6d656d62), 
      ACE_NTOHL (0x65727300),  // name = members
            CORBA::tk_alias, // typecode kind for typedefs
      340, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        38,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5374), 
        ACE_NTOHL (0x72756374), 
        ACE_NTOHL (0x4d656d62), 
        ACE_NTOHL (0x65725365), 
        ACE_NTOHL (0x713a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
                16,
        ACE_NTOHL (0x53747275), 
        ACE_NTOHL (0x63744d65), 
        ACE_NTOHL (0x6d626572), 
        ACE_NTOHL (0x53657100),  // name = StructMemberSeq
                CORBA::tk_sequence, // typecode kind
        264, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          248, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            35,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f5374), 
            ACE_NTOHL (0x72756374), 
            ACE_NTOHL (0x4d656d62), 
            ACE_NTOHL (0x65723a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
                        13,
            ACE_NTOHL (0x53747275), 
            ACE_NTOHL (0x63744d65), 
            ACE_NTOHL (0x6d626572), 
            ACE_NTOHL (0x0),  // name = StructMember
            3, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,

            9,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x5f646566), 
            ACE_NTOHL (0x0),  // name = type_def
                        CORBA::tk_objref, // typecode kind
            52, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              30,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4944), 
              ACE_NTOHL (0x4c547970), 
              ACE_NTOHL (0x653a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                            8,
              ACE_NTOHL (0x49444c54), 
              ACE_NTOHL (0x79706500),  // name = IDLType
              

          0U,


      5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_InitializerSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_InitializerSeq),
    (char *) &_oc_CORBA_InitializerSeq,
    0,
    sizeof (CORBA::InitializerSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_InitializerSeq =
    &_tc_TAO_tc_CORBA_InitializerSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExceptionDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x63657074), 
  ACE_NTOHL (0x696f6e44), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
    21,
  ACE_NTOHL (0x45786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = ExceptionDescription
  5, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExceptionDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ExceptionDescription),
    (char *) &_oc_CORBA_ExceptionDescription,
    0,
    sizeof (CORBA::ExceptionDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExceptionDescription =
    &_tc_TAO_tc_CORBA_ExceptionDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ExceptionDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ExceptionDescription *_tao_tmp_pointer =
    ACE_static_cast (ExceptionDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CS_)
#define _CORBA_EXCDESCRIPTIONSEQ_CS_

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (void)
{}

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >
    (max)
{}

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExceptionDescription * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >
    (max, length, buffer, release)
{}

CORBA::ExcDescriptionSeq::ExcDescriptionSeq (
    const ExcDescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >
    (seq)
{}

CORBA::ExcDescriptionSeq::~ExcDescriptionSeq (void)
{}

void CORBA::ExcDescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExcDescriptionSeq * _tao_tmp_pointer =
    ACE_static_cast (ExcDescriptionSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExcDescriptionSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x63446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x5365713a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
    18,
  ACE_NTOHL (0x45786344), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e5365), 
  ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
    CORBA::tk_sequence, // typecode kind
  476, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    460, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      43,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x63657074), 
      ACE_NTOHL (0x696f6e44), 
      ACE_NTOHL (0x65736372), 
      ACE_NTOHL (0x69707469), 
      ACE_NTOHL (0x6f6e3a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
            21,
      ACE_NTOHL (0x45786365), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e446573), 
      ACE_NTOHL (0x63726970), 
      ACE_NTOHL (0x74696f6e), 
      ACE_NTOHL (0x0),  // name = ExceptionDescription
      5, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      3,
      ACE_NTOHL (0x69640000),  // name = id
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      11,
      ACE_NTOHL (0x64656669), 
      ACE_NTOHL (0x6e65645f), 
      ACE_NTOHL (0x696e0000),  // name = defined_in
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      8,
      ACE_NTOHL (0x76657273), 
      ACE_NTOHL (0x696f6e00),  // name = version
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5665), 
        ACE_NTOHL (0x7273696f), 
        ACE_NTOHL (0x6e537065), 
        ACE_NTOHL (0x633a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                12,
        ACE_NTOHL (0x56657273), 
        ACE_NTOHL (0x696f6e53), 
        ACE_NTOHL (0x70656300),  // name = VersionSpec
                CORBA::tk_string, 
        0U, // string length

      5,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x0),  // name = type
            CORBA::tk_TypeCode,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExcDescriptionSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExcDescriptionSeq),
    (char *) &_oc_CORBA_ExcDescriptionSeq,
    0,
    sizeof (CORBA::ExcDescriptionSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExcDescriptionSeq =
    &_tc_TAO_tc_CORBA_ExcDescriptionSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtInitializer[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74496e69), 
  ACE_NTOHL (0x7469616c), 
  ACE_NTOHL (0x697a6572), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ExtInitializer:1.0
    15,
  ACE_NTOHL (0x45787449), 
  ACE_NTOHL (0x6e697469), 
  ACE_NTOHL (0x616c697a), 
  ACE_NTOHL (0x65720000),  // name = ExtInitializer
  3, // member count
    8,
  ACE_NTOHL (0x6d656d62), 
  ACE_NTOHL (0x65727300),  // name = members
    CORBA::tk_alias, // typecode kind for typedefs
  340, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5374), 
    ACE_NTOHL (0x72756374), 
    ACE_NTOHL (0x4d656d62), 
    ACE_NTOHL (0x65725365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
        16,
    ACE_NTOHL (0x53747275), 
    ACE_NTOHL (0x63744d65), 
    ACE_NTOHL (0x6d626572), 
    ACE_NTOHL (0x53657100),  // name = StructMemberSeq
        CORBA::tk_sequence, // typecode kind
    264, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      248, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5374), 
        ACE_NTOHL (0x72756374), 
        ACE_NTOHL (0x4d656d62), 
        ACE_NTOHL (0x65723a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
                13,
        ACE_NTOHL (0x53747275), 
        ACE_NTOHL (0x63744d65), 
        ACE_NTOHL (0x6d626572), 
        ACE_NTOHL (0x0),  // name = StructMember
        3, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,

        9,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x5f646566), 
        ACE_NTOHL (0x0),  // name = type_def
                CORBA::tk_objref, // typecode kind
        52, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          30,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4944), 
          ACE_NTOHL (0x4c547970), 
          ACE_NTOHL (0x653a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                    8,
          ACE_NTOHL (0x49444c54), 
          ACE_NTOHL (0x79706500),  // name = IDLType
          

      0U,


  11,
  ACE_NTOHL (0x65786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e730000),  // name = exceptions
    CORBA::tk_alias, // typecode kind for typedefs
  556, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    40,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4578), 
    ACE_NTOHL (0x63446573), 
    ACE_NTOHL (0x63726970), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x5365713a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
        18,
    ACE_NTOHL (0x45786344), 
    ACE_NTOHL (0x65736372), 
    ACE_NTOHL (0x69707469), 
    ACE_NTOHL (0x6f6e5365), 
    ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    476, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      460, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63657074), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                21,
        ACE_NTOHL (0x45786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = ExceptionDescription
        5, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,


      0U,


  5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtInitializer (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ExtInitializer),
    (char *) &_oc_CORBA_ExtInitializer,
    0,
    sizeof (CORBA::ExtInitializer)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtInitializer =
    &_tc_TAO_tc_CORBA_ExtInitializer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ExtInitializer::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ExtInitializer *_tao_tmp_pointer =
    ACE_static_cast (ExtInitializer *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXTINITIALIZERSEQ_CS_)
#define _CORBA_EXTINITIALIZERSEQ_CS_

CORBA::ExtInitializerSeq::ExtInitializerSeq (void)
{}

CORBA::ExtInitializerSeq::ExtInitializerSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >
    (max)
{}

CORBA::ExtInitializerSeq::ExtInitializerSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtInitializer * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >
    (max, length, buffer, release)
{}

CORBA::ExtInitializerSeq::ExtInitializerSeq (
    const ExtInitializerSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >
    (seq)
{}

CORBA::ExtInitializerSeq::~ExtInitializerSeq (void)
{}

void CORBA::ExtInitializerSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtInitializerSeq * _tao_tmp_pointer =
    ACE_static_cast (ExtInitializerSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtInitializerSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74496e69), 
  ACE_NTOHL (0x7469616c), 
  ACE_NTOHL (0x697a6572), 
  ACE_NTOHL (0x5365713a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExtInitializerSeq:1.0
    18,
  ACE_NTOHL (0x45787449), 
  ACE_NTOHL (0x6e697469), 
  ACE_NTOHL (0x616c697a), 
  ACE_NTOHL (0x65725365), 
  ACE_NTOHL (0x71000000),  // name = ExtInitializerSeq
    CORBA::tk_sequence, // typecode kind
  1116, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    1100, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      37,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x74496e69), 
      ACE_NTOHL (0x7469616c), 
      ACE_NTOHL (0x697a6572), 
      ACE_NTOHL (0x3a312e30), 
      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ExtInitializer:1.0
            15,
      ACE_NTOHL (0x45787449), 
      ACE_NTOHL (0x6e697469), 
      ACE_NTOHL (0x616c697a), 
      ACE_NTOHL (0x65720000),  // name = ExtInitializer
      3, // member count
            8,
      ACE_NTOHL (0x6d656d62), 
      ACE_NTOHL (0x65727300),  // name = members
            CORBA::tk_alias, // typecode kind for typedefs
      340, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        38,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5374), 
        ACE_NTOHL (0x72756374), 
        ACE_NTOHL (0x4d656d62), 
        ACE_NTOHL (0x65725365), 
        ACE_NTOHL (0x713a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
                16,
        ACE_NTOHL (0x53747275), 
        ACE_NTOHL (0x63744d65), 
        ACE_NTOHL (0x6d626572), 
        ACE_NTOHL (0x53657100),  // name = StructMemberSeq
                CORBA::tk_sequence, // typecode kind
        264, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          248, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            35,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f5374), 
            ACE_NTOHL (0x72756374), 
            ACE_NTOHL (0x4d656d62), 
            ACE_NTOHL (0x65723a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
                        13,
            ACE_NTOHL (0x53747275), 
            ACE_NTOHL (0x63744d65), 
            ACE_NTOHL (0x6d626572), 
            ACE_NTOHL (0x0),  // name = StructMember
            3, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,

            9,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x5f646566), 
            ACE_NTOHL (0x0),  // name = type_def
                        CORBA::tk_objref, // typecode kind
            52, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              30,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4944), 
              ACE_NTOHL (0x4c547970), 
              ACE_NTOHL (0x653a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                            8,
              ACE_NTOHL (0x49444c54), 
              ACE_NTOHL (0x79706500),  // name = IDLType
              

          0U,


      11,
      ACE_NTOHL (0x65786365), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e730000),  // name = exceptions
            CORBA::tk_alias, // typecode kind for typedefs
      556, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        40,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x5365713a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                18,
        ACE_NTOHL (0x45786344), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e5365), 
        ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                CORBA::tk_sequence, // typecode kind
        476, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          460, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            43,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f4578), 
            ACE_NTOHL (0x63657074), 
            ACE_NTOHL (0x696f6e44), 
            ACE_NTOHL (0x65736372), 
            ACE_NTOHL (0x69707469), 
            ACE_NTOHL (0x6f6e3a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                        21,
            ACE_NTOHL (0x45786365), 
            ACE_NTOHL (0x7074696f), 
            ACE_NTOHL (0x6e446573), 
            ACE_NTOHL (0x63726970), 
            ACE_NTOHL (0x74696f6e), 
            ACE_NTOHL (0x0),  // name = ExceptionDescription
            5, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            3,
            ACE_NTOHL (0x69640000),  // name = id
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            11,
            ACE_NTOHL (0x64656669), 
            ACE_NTOHL (0x6e65645f), 
            ACE_NTOHL (0x696e0000),  // name = defined_in
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            8,
            ACE_NTOHL (0x76657273), 
            ACE_NTOHL (0x696f6e00),  // name = version
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              34,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5665), 
              ACE_NTOHL (0x7273696f), 
              ACE_NTOHL (0x6e537065), 
              ACE_NTOHL (0x633a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                            12,
              ACE_NTOHL (0x56657273), 
              ACE_NTOHL (0x696f6e53), 
              ACE_NTOHL (0x70656300),  // name = VersionSpec
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,


          0U,


      5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtInitializerSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExtInitializerSeq),
    (char *) &_oc_CORBA_ExtInitializerSeq,
    0,
    sizeof (CORBA::ExtInitializerSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtInitializerSeq =
    &_tc_TAO_tc_CORBA_ExtInitializerSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_UnionMember[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f556e), 
  ACE_NTOHL (0x696f6e4d), 
  ACE_NTOHL (0x656d6265), 
  ACE_NTOHL (0x723a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/UnionMember:1.0
    12,
  ACE_NTOHL (0x556e696f), 
  ACE_NTOHL (0x6e4d656d), 
  ACE_NTOHL (0x62657200),  // name = UnionMember
  4, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  6,
  ACE_NTOHL (0x6c616265), 
  ACE_NTOHL (0x6c000000),  // name = label
    CORBA::tk_any,

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

  9,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x5f646566), 
  ACE_NTOHL (0x0),  // name = type_def
    CORBA::tk_objref, // typecode kind
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4944), 
    ACE_NTOHL (0x4c547970), 
    ACE_NTOHL (0x653a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
        8,
    ACE_NTOHL (0x49444c54), 
    ACE_NTOHL (0x79706500),  // name = IDLType
    
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_UnionMember (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_UnionMember),
    (char *) &_oc_CORBA_UnionMember,
    0,
    sizeof (CORBA::UnionMember)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_UnionMember =
    &_tc_TAO_tc_CORBA_UnionMember;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::UnionMember::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  UnionMember *_tao_tmp_pointer =
    ACE_static_cast (UnionMember *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_UNIONMEMBERSEQ_CS_)
#define _CORBA_UNIONMEMBERSEQ_CS_

CORBA::UnionMemberSeq::UnionMemberSeq (void)
{}

CORBA::UnionMemberSeq::UnionMemberSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >
    (max)
{}

CORBA::UnionMemberSeq::UnionMemberSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::UnionMember * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >
    (max, length, buffer, release)
{}

CORBA::UnionMemberSeq::UnionMemberSeq (
    const UnionMemberSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >
    (seq)
{}

CORBA::UnionMemberSeq::~UnionMemberSeq (void)
{}

void CORBA::UnionMemberSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  UnionMemberSeq * _tao_tmp_pointer =
    ACE_static_cast (UnionMemberSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_UnionMemberSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f556e), 
  ACE_NTOHL (0x696f6e4d), 
  ACE_NTOHL (0x656d6265), 
  ACE_NTOHL (0x72536571), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/UnionMemberSeq:1.0
    15,
  ACE_NTOHL (0x556e696f), 
  ACE_NTOHL (0x6e4d656d), 
  ACE_NTOHL (0x62657253), 
  ACE_NTOHL (0x65710000),  // name = UnionMemberSeq
    CORBA::tk_sequence, // typecode kind
  276, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    260, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      34,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f556e), 
      ACE_NTOHL (0x696f6e4d), 
      ACE_NTOHL (0x656d6265), 
      ACE_NTOHL (0x723a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/UnionMember:1.0
            12,
      ACE_NTOHL (0x556e696f), 
      ACE_NTOHL (0x6e4d656d), 
      ACE_NTOHL (0x62657200),  // name = UnionMember
      4, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      6,
      ACE_NTOHL (0x6c616265), 
      ACE_NTOHL (0x6c000000),  // name = label
            CORBA::tk_any,

      5,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x0),  // name = type
            CORBA::tk_TypeCode,

      9,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x5f646566), 
      ACE_NTOHL (0x0),  // name = type_def
            CORBA::tk_objref, // typecode kind
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4944), 
        ACE_NTOHL (0x4c547970), 
        ACE_NTOHL (0x653a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                8,
        ACE_NTOHL (0x49444c54), 
        ACE_NTOHL (0x79706500),  // name = IDLType
        

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_UnionMemberSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_UnionMemberSeq),
    (char *) &_oc_CORBA_UnionMemberSeq,
    0,
    sizeof (CORBA::UnionMemberSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_UnionMemberSeq =
    &_tc_TAO_tc_CORBA_UnionMemberSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_ENUMMEMBERSEQ_CS_)
#define _CORBA_ENUMMEMBERSEQ_CS_

CORBA::EnumMemberSeq::EnumMemberSeq (void)
{}

CORBA::EnumMemberSeq::EnumMemberSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_String_Sequence
    (max)
{}

CORBA::EnumMemberSeq::EnumMemberSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    char * * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_String_Sequence
    (max, length, buffer, release)
{}

CORBA::EnumMemberSeq::EnumMemberSeq (
    const EnumMemberSeq &seq
  )
  : TAO_Unbounded_String_Sequence
    (seq)
{}

CORBA::EnumMemberSeq::~EnumMemberSeq (void)
{}

void CORBA::EnumMemberSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  EnumMemberSeq * _tao_tmp_pointer =
    ACE_static_cast (EnumMemberSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_EnumMemberSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f456e), 
  ACE_NTOHL (0x756d4d65), 
  ACE_NTOHL (0x6d626572), 
  ACE_NTOHL (0x5365713a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/EnumMemberSeq:1.0
    14,
  ACE_NTOHL (0x456e756d), 
  ACE_NTOHL (0x4d656d62), 
  ACE_NTOHL (0x65725365), 
  ACE_NTOHL (0x71000000),  // name = EnumMemberSeq
    CORBA::tk_sequence, // typecode kind
  84, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_alias, // typecode kind for typedefs
    68, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      33,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4964), 
      ACE_NTOHL (0x656e7469), 
      ACE_NTOHL (0x66696572), 
      ACE_NTOHL (0x3a312e30), 
      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
            11,
      ACE_NTOHL (0x4964656e), 
      ACE_NTOHL (0x74696669), 
      ACE_NTOHL (0x65720000),  // name = Identifier
            CORBA::tk_string, 
      0U, // string length

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_EnumMemberSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_EnumMemberSeq),
    (char *) &_oc_CORBA_EnumMemberSeq,
    0,
    sizeof (CORBA::EnumMemberSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_EnumMemberSeq =
    &_tc_TAO_tc_CORBA_EnumMemberSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::Container.

CORBA::Container_ptr
TAO::Objref_Traits<CORBA::Container>::tao_duplicate (
    CORBA::Container_ptr p
  )
{
  return CORBA::Container::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::Container>::tao_release (
    CORBA::Container_ptr p
  )
{
  CORBA::release (p);
}

CORBA::Container_ptr
TAO::Objref_Traits<CORBA::Container>::tao_nil (void)
{
  return CORBA::Container::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::Container>::tao_marshal (
    CORBA::Container_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Contained_ptr CORBA::Container::lookup (
    const char * search_name
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Contained>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ScopedName>::in_arg_val _tao_search_name (search_name);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_search_name
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "lookup",
      6,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ContainedSeq * CORBA::Container::contents (
    CORBA::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ContainedSeq>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::DefinitionKind>::in_arg_val _tao_limit_type (limit_type);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited (exclude_inherited);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_limit_type,
      &_tao_exclude_inherited
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "contents",
      8,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ContainedSeq * CORBA::Container::lookup_name (
    const char * search_name,
    CORBA::Long levels_to_search,
    CORBA::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ContainedSeq>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_search_name (search_name);
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_levels_to_search (levels_to_search);
  TAO::Arg_Traits<CORBA::DefinitionKind>::in_arg_val _tao_limit_type (limit_type);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited (exclude_inherited);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_search_name,
      &_tao_levels_to_search,
      &_tao_limit_type,
      &_tao_exclude_inherited
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "lookup_name",
      11,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Container_Description[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65722f), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Container/Description:1.0
    12,
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e00),  // name = Description
  3, // member count
    17,
  ACE_NTOHL (0x636f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x645f6f62), 
  ACE_NTOHL (0x6a656374), 
  ACE_NTOHL (0x0),  // name = contained_object
    CORBA::tk_objref, // typecode kind
  56, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    32,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f436f), 
    ACE_NTOHL (0x6e746169), 
    ACE_NTOHL (0x6e65643a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained:1.0
        10,
    ACE_NTOHL (0x436f6e74), 
    ACE_NTOHL (0x61696e65), 
    ACE_NTOHL (0x64000000),  // name = Contained
    
  5,
  ACE_NTOHL (0x6b696e64), 
  ACE_NTOHL (0x0),  // name = kind
    CORBA::tk_enum, // typecode kind
  684, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
    37,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4465), 
    ACE_NTOHL (0x66696e69), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x4b696e64), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/DefinitionKind:1.0
    15,
    ACE_NTOHL (0x44656669), 
    ACE_NTOHL (0x6e697469), 
    ACE_NTOHL (0x6f6e4b69), 
    ACE_NTOHL (0x6e640000),  // name = DefinitionKind
    36, // member count
    8,
    ACE_NTOHL (0x646b5f6e), 
    ACE_NTOHL (0x6f6e6500),  // name = dk_none
    7,
    ACE_NTOHL (0x646b5f61), 
    ACE_NTOHL (0x6c6c0000),  // name = dk_all
    13,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x74747269), 
    ACE_NTOHL (0x62757465), 
    ACE_NTOHL (0x0),  // name = dk_Attribute
    12,
    ACE_NTOHL (0x646b5f43), 
    ACE_NTOHL (0x6f6e7374), 
    ACE_NTOHL (0x616e7400),  // name = dk_Constant
    13,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x78636570), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x0),  // name = dk_Exception
    13,
    ACE_NTOHL (0x646b5f49), 
    ACE_NTOHL (0x6e746572), 
    ACE_NTOHL (0x66616365), 
    ACE_NTOHL (0x0),  // name = dk_Interface
    10,
    ACE_NTOHL (0x646b5f4d), 
    ACE_NTOHL (0x6f64756c), 
    ACE_NTOHL (0x65000000),  // name = dk_Module
    13,
    ACE_NTOHL (0x646b5f4f), 
    ACE_NTOHL (0x70657261), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x0),  // name = dk_Operation
    11,
    ACE_NTOHL (0x646b5f54), 
    ACE_NTOHL (0x79706564), 
    ACE_NTOHL (0x65660000),  // name = dk_Typedef
    9,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x6c696173), 
    ACE_NTOHL (0x0),  // name = dk_Alias
    10,
    ACE_NTOHL (0x646b5f53), 
    ACE_NTOHL (0x74727563), 
    ACE_NTOHL (0x74000000),  // name = dk_Struct
    9,
    ACE_NTOHL (0x646b5f55), 
    ACE_NTOHL (0x6e696f6e), 
    ACE_NTOHL (0x0),  // name = dk_Union
    8,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x6e756d00),  // name = dk_Enum
    13,
    ACE_NTOHL (0x646b5f50), 
    ACE_NTOHL (0x72696d69), 
    ACE_NTOHL (0x74697665), 
    ACE_NTOHL (0x0),  // name = dk_Primitive
    10,
    ACE_NTOHL (0x646b5f53), 
    ACE_NTOHL (0x7472696e), 
    ACE_NTOHL (0x67000000),  // name = dk_String
    12,
    ACE_NTOHL (0x646b5f53), 
    ACE_NTOHL (0x65717565), 
    ACE_NTOHL (0x6e636500),  // name = dk_Sequence
    9,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x72726179), 
    ACE_NTOHL (0x0),  // name = dk_Array
    14,
    ACE_NTOHL (0x646b5f52), 
    ACE_NTOHL (0x65706f73), 
    ACE_NTOHL (0x69746f72), 
    ACE_NTOHL (0x79000000),  // name = dk_Repository
    11,
    ACE_NTOHL (0x646b5f57), 
    ACE_NTOHL (0x73747269), 
    ACE_NTOHL (0x6e670000),  // name = dk_Wstring
    9,
    ACE_NTOHL (0x646b5f46), 
    ACE_NTOHL (0x69786564), 
    ACE_NTOHL (0x0),  // name = dk_Fixed
    9,
    ACE_NTOHL (0x646b5f56), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x0),  // name = dk_Value
    12,
    ACE_NTOHL (0x646b5f56), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x426f7800),  // name = dk_ValueBox
    15,
    ACE_NTOHL (0x646b5f56), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x4d656d62), 
    ACE_NTOHL (0x65720000),  // name = dk_ValueMember
    10,
    ACE_NTOHL (0x646b5f4e), 
    ACE_NTOHL (0x61746976), 
    ACE_NTOHL (0x65000000),  // name = dk_Native
    21,
    ACE_NTOHL (0x646b5f41), 
    ACE_NTOHL (0x62737472), 
    ACE_NTOHL (0x61637449), 
    ACE_NTOHL (0x6e746572), 
    ACE_NTOHL (0x66616365), 
    ACE_NTOHL (0x0),  // name = dk_AbstractInterface
    18,
    ACE_NTOHL (0x646b5f4c), 
    ACE_NTOHL (0x6f63616c), 
    ACE_NTOHL (0x496e7465), 
    ACE_NTOHL (0x72666163), 
    ACE_NTOHL (0x65000000),  // name = dk_LocalInterface
    13,
    ACE_NTOHL (0x646b5f43), 
    ACE_NTOHL (0x6f6d706f), 
    ACE_NTOHL (0x6e656e74), 
    ACE_NTOHL (0x0),  // name = dk_Component
    8,
    ACE_NTOHL (0x646b5f48), 
    ACE_NTOHL (0x6f6d6500),  // name = dk_Home
    11,
    ACE_NTOHL (0x646b5f46), 
    ACE_NTOHL (0x6163746f), 
    ACE_NTOHL (0x72790000),  // name = dk_Factory
    10,
    ACE_NTOHL (0x646b5f46), 
    ACE_NTOHL (0x696e6465), 
    ACE_NTOHL (0x72000000),  // name = dk_Finder
    9,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x6d697473), 
    ACE_NTOHL (0x0),  // name = dk_Emits
    13,
    ACE_NTOHL (0x646b5f50), 
    ACE_NTOHL (0x75626c69), 
    ACE_NTOHL (0x73686573), 
    ACE_NTOHL (0x0),  // name = dk_Publishes
    12,
    ACE_NTOHL (0x646b5f43), 
    ACE_NTOHL (0x6f6e7375), 
    ACE_NTOHL (0x6d657300),  // name = dk_Consumes
    12,
    ACE_NTOHL (0x646b5f50), 
    ACE_NTOHL (0x726f7669), 
    ACE_NTOHL (0x64657300),  // name = dk_Provides
    8,
    ACE_NTOHL (0x646b5f55), 
    ACE_NTOHL (0x73657300),  // name = dk_Uses
    9,
    ACE_NTOHL (0x646b5f45), 
    ACE_NTOHL (0x76656e74), 
    ACE_NTOHL (0x0),  // name = dk_Event
    
  6,
  ACE_NTOHL (0x76616c75), 
  ACE_NTOHL (0x65000000),  // name = value
    CORBA::tk_any,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_Container_Description (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_Container_Description),
    (char *) &_oc_CORBA_Container_Description,
    0,
    sizeof (CORBA::Container::Description)
  );

::CORBA::TypeCode_ptr CORBA::Container::_tc_Description =
  &_tc_TAO_tc_CORBA_Container_Description;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::Container::Description::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Description *_tao_tmp_pointer =
    ACE_static_cast (Description *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CS_

CORBA::Container::DescriptionSeq::DescriptionSeq (void)
{}

CORBA::Container::DescriptionSeq::DescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >
    (max)
{}

CORBA::Container::DescriptionSeq::DescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Container::Description * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >
    (max, length, buffer, release)
{}

CORBA::Container::DescriptionSeq::DescriptionSeq (
    const DescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >
    (seq)
{}

CORBA::Container::DescriptionSeq::~DescriptionSeq (void)
{}

void CORBA::Container::DescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  DescriptionSeq * _tao_tmp_pointer =
    ACE_static_cast (DescriptionSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Container_DescriptionSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  47,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65722f), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e53), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/Container/DescriptionSeq:1.0
    15,
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e53), 
  ACE_NTOHL (0x65710000),  // name = DescriptionSeq
    CORBA::tk_sequence, // typecode kind
  896, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    880, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      44,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f436f), 
      ACE_NTOHL (0x6e746169), 
      ACE_NTOHL (0x6e65722f), 
      ACE_NTOHL (0x44657363), 
      ACE_NTOHL (0x72697074), 
      ACE_NTOHL (0x696f6e3a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Container/Description:1.0
            12,
      ACE_NTOHL (0x44657363), 
      ACE_NTOHL (0x72697074), 
      ACE_NTOHL (0x696f6e00),  // name = Description
      3, // member count
            17,
      ACE_NTOHL (0x636f6e74), 
      ACE_NTOHL (0x61696e65), 
      ACE_NTOHL (0x645f6f62), 
      ACE_NTOHL (0x6a656374), 
      ACE_NTOHL (0x0),  // name = contained_object
            CORBA::tk_objref, // typecode kind
      56, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6e746169), 
        ACE_NTOHL (0x6e65643a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained:1.0
                10,
        ACE_NTOHL (0x436f6e74), 
        ACE_NTOHL (0x61696e65), 
        ACE_NTOHL (0x64000000),  // name = Contained
        
      5,
      ACE_NTOHL (0x6b696e64), 
      ACE_NTOHL (0x0),  // name = kind
            CORBA::tk_enum, // typecode kind
      684, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
        37,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4465), 
        ACE_NTOHL (0x66696e69), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x4b696e64), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/DefinitionKind:1.0
        15,
        ACE_NTOHL (0x44656669), 
        ACE_NTOHL (0x6e697469), 
        ACE_NTOHL (0x6f6e4b69), 
        ACE_NTOHL (0x6e640000),  // name = DefinitionKind
        36, // member count
        8,
        ACE_NTOHL (0x646b5f6e), 
        ACE_NTOHL (0x6f6e6500),  // name = dk_none
        7,
        ACE_NTOHL (0x646b5f61), 
        ACE_NTOHL (0x6c6c0000),  // name = dk_all
        13,
        ACE_NTOHL (0x646b5f41), 
        ACE_NTOHL (0x74747269), 
        ACE_NTOHL (0x62757465), 
        ACE_NTOHL (0x0),  // name = dk_Attribute
        12,
        ACE_NTOHL (0x646b5f43), 
        ACE_NTOHL (0x6f6e7374), 
        ACE_NTOHL (0x616e7400),  // name = dk_Constant
        13,
        ACE_NTOHL (0x646b5f45), 
        ACE_NTOHL (0x78636570), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = dk_Exception
        13,
        ACE_NTOHL (0x646b5f49), 
        ACE_NTOHL (0x6e746572), 
        ACE_NTOHL (0x66616365), 
        ACE_NTOHL (0x0),  // name = dk_Interface
        10,
        ACE_NTOHL (0x646b5f4d), 
        ACE_NTOHL (0x6f64756c), 
        ACE_NTOHL (0x65000000),  // name = dk_Module
        13,
        ACE_NTOHL (0x646b5f4f), 
        ACE_NTOHL (0x70657261), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = dk_Operation
        11,
        ACE_NTOHL (0x646b5f54), 
        ACE_NTOHL (0x79706564), 
        ACE_NTOHL (0x65660000),  // name = dk_Typedef
        9,
        ACE_NTOHL (0x646b5f41), 
        ACE_NTOHL (0x6c696173), 
        ACE_NTOHL (0x0),  // name = dk_Alias
        10,
        ACE_NTOHL (0x646b5f53), 
        ACE_NTOHL (0x74727563), 
        ACE_NTOHL (0x74000000),  // name = dk_Struct
        9,
        ACE_NTOHL (0x646b5f55), 
        ACE_NTOHL (0x6e696f6e), 
        ACE_NTOHL (0x0),  // name = dk_Union
        8,
        ACE_NTOHL (0x646b5f45), 
        ACE_NTOHL (0x6e756d00),  // name = dk_Enum
        13,
        ACE_NTOHL (0x646b5f50), 
        ACE_NTOHL (0x72696d69), 
        ACE_NTOHL (0x74697665), 
        ACE_NTOHL (0x0),  // name = dk_Primitive
        10,
        ACE_NTOHL (0x646b5f53), 
        ACE_NTOHL (0x7472696e), 
        ACE_NTOHL (0x67000000),  // name = dk_String
        12,
        ACE_NTOHL (0x646b5f53), 
        ACE_NTOHL (0x65717565), 
        ACE_NTOHL (0x6e636500),  // name = dk_Sequence
        9,
        ACE_NTOHL (0x646b5f41), 
        ACE_NTOHL (0x72726179), 
        ACE_NTOHL (0x0),  // name = dk_Array
        14,
        ACE_NTOHL (0x646b5f52), 
        ACE_NTOHL (0x65706f73), 
        ACE_NTOHL (0x69746f72), 
        ACE_NTOHL (0x79000000),  // name = dk_Repository
        11,
        ACE_NTOHL (0x646b5f57), 
        ACE_NTOHL (0x73747269), 
        ACE_NTOHL (0x6e670000),  // name = dk_Wstring
        9,
        ACE_NTOHL (0x646b5f46), 
        ACE_NTOHL (0x69786564), 
        ACE_NTOHL (0x0),  // name = dk_Fixed
        9,
        ACE_NTOHL (0x646b5f56), 
        ACE_NTOHL (0x616c7565), 
        ACE_NTOHL (0x0),  // name = dk_Value
        12,
        ACE_NTOHL (0x646b5f56), 
        ACE_NTOHL (0x616c7565), 
        ACE_NTOHL (0x426f7800),  // name = dk_ValueBox
        15,
        ACE_NTOHL (0x646b5f56), 
        ACE_NTOHL (0x616c7565), 
        ACE_NTOHL (0x4d656d62), 
        ACE_NTOHL (0x65720000),  // name = dk_ValueMember
        10,
        ACE_NTOHL (0x646b5f4e), 
        ACE_NTOHL (0x61746976), 
        ACE_NTOHL (0x65000000),  // name = dk_Native
        21,
        ACE_NTOHL (0x646b5f41), 
        ACE_NTOHL (0x62737472), 
        ACE_NTOHL (0x61637449), 
        ACE_NTOHL (0x6e746572), 
        ACE_NTOHL (0x66616365), 
        ACE_NTOHL (0x0),  // name = dk_AbstractInterface
        18,
        ACE_NTOHL (0x646b5f4c), 
        ACE_NTOHL (0x6f63616c), 
        ACE_NTOHL (0x496e7465), 
        ACE_NTOHL (0x72666163), 
        ACE_NTOHL (0x65000000),  // name = dk_LocalInterface
        13,
        ACE_NTOHL (0x646b5f43), 
        ACE_NTOHL (0x6f6d706f), 
        ACE_NTOHL (0x6e656e74), 
        ACE_NTOHL (0x0),  // name = dk_Component
        8,
        ACE_NTOHL (0x646b5f48), 
        ACE_NTOHL (0x6f6d6500),  // name = dk_Home
        11,
        ACE_NTOHL (0x646b5f46), 
        ACE_NTOHL (0x6163746f), 
        ACE_NTOHL (0x72790000),  // name = dk_Factory
        10,
        ACE_NTOHL (0x646b5f46), 
        ACE_NTOHL (0x696e6465), 
        ACE_NTOHL (0x72000000),  // name = dk_Finder
        9,
        ACE_NTOHL (0x646b5f45), 
        ACE_NTOHL (0x6d697473), 
        ACE_NTOHL (0x0),  // name = dk_Emits
        13,
        ACE_NTOHL (0x646b5f50), 
        ACE_NTOHL (0x75626c69), 
        ACE_NTOHL (0x73686573), 
        ACE_NTOHL (0x0),  // name = dk_Publishes
        12,
        ACE_NTOHL (0x646b5f43), 
        ACE_NTOHL (0x6f6e7375), 
        ACE_NTOHL (0x6d657300),  // name = dk_Consumes
        12,
        ACE_NTOHL (0x646b5f50), 
        ACE_NTOHL (0x726f7669), 
        ACE_NTOHL (0x64657300),  // name = dk_Provides
        8,
        ACE_NTOHL (0x646b5f55), 
        ACE_NTOHL (0x73657300),  // name = dk_Uses
        9,
        ACE_NTOHL (0x646b5f45), 
        ACE_NTOHL (0x76656e74), 
        ACE_NTOHL (0x0),  // name = dk_Event
        
      6,
      ACE_NTOHL (0x76616c75), 
      ACE_NTOHL (0x65000000),  // name = value
            CORBA::tk_any,


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_Container_DescriptionSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_Container_DescriptionSeq),
    (char *) &_oc_CORBA_Container_DescriptionSeq,
    0,
    sizeof (CORBA::Container::DescriptionSeq)
  );

::CORBA::TypeCode_ptr CORBA::Container::_tc_DescriptionSeq =
  &_tc_TAO_tc_CORBA_Container_DescriptionSeq;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Container::DescriptionSeq * CORBA::Container::describe_contents (
    CORBA::DefinitionKind limit_type,
    CORBA::Boolean exclude_inherited,
    CORBA::Long max_returned_objs
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Container::DescriptionSeq>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::DefinitionKind>::in_arg_val _tao_limit_type (limit_type);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited (exclude_inherited);
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_max_returned_objs (max_returned_objs);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_limit_type,
      &_tao_exclude_inherited,
      &_tao_max_returned_objs
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "describe_contents",
      17,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ModuleDef_ptr CORBA::Container::create_module (
    const char * id,
    const char * name,
    const char * version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ModuleDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "create_module",
      13,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ConstantDef_ptr CORBA::Container::create_constant (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    const CORBA::Any & value
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ConstantDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_type (type);
  TAO::Arg_Traits<CORBA::Any>::in_arg_val _tao_value (value);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_type,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      6,
      "create_constant",
      15,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::StructDef_ptr CORBA::Container::create_struct (
    const char * id,
    const char * name,
    const char * version,
    const CORBA::StructMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::StructDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::StructMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_struct",
      13,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::UnionDef_ptr CORBA::Container::create_union (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr discriminator_type,
    const CORBA::UnionMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::UnionDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_discriminator_type (discriminator_type);
  TAO::Arg_Traits<CORBA::UnionMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_discriminator_type,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      6,
      "create_union",
      12,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::EnumDef_ptr CORBA::Container::create_enum (
    const char * id,
    const char * name,
    const char * version,
    const CORBA::EnumMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::EnumDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::EnumMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_enum",
      11,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::AliasDef_ptr CORBA::Container::create_alias (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr original_type
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::AliasDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_original_type (original_type);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_original_type
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_alias",
      12,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::InterfaceDef_ptr CORBA::Container::create_interface (
    const char * id,
    const char * name,
    const char * version,
    const CORBA::InterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::InterfaceDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_interface",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ValueDef_ptr CORBA::Container::create_value (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    CORBA::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const CORBA::ValueDefSeq & abstract_base_values,
    const CORBA::InterfaceDefSeq & supported_interfaces,
    const CORBA::InitializerSeq & initializers
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ValueDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom (is_custom);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract (is_abstract);
  TAO::Arg_Traits<CORBA::ValueDef>::in_arg_val _tao_base_value (base_value);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable (is_truncatable);
  TAO::Arg_Traits<CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values (abstract_base_values);
  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
  TAO::Arg_Traits<CORBA::InitializerSeq>::in_arg_val _tao_initializers (initializers);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_is_custom,
      &_tao_is_abstract,
      &_tao_base_value,
      &_tao_is_truncatable,
      &_tao_abstract_base_values,
      &_tao_supported_interfaces,
      &_tao_initializers
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      11,
      "create_value",
      12,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ValueBoxDef_ptr CORBA::Container::create_value_box (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr original_type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ValueBoxDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_original_type_def (original_type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_original_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_value_box",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExceptionDef_ptr CORBA::Container::create_exception (
    const char * id,
    const char * name,
    const char * version,
    const CORBA::StructMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExceptionDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::StructMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_exception",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::NativeDef_ptr CORBA::Container::create_native (
    const char * id,
    const char * name,
    const char * version
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::NativeDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "create_native",
      13,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::AbstractInterfaceDef_ptr CORBA::Container::create_abstract_interface (
    const char * id,
    const char * name,
    const char * version,
    const CORBA::AbstractInterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::AbstractInterfaceDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::AbstractInterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_abstract_interface",
      25,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::LocalInterfaceDef_ptr CORBA::Container::create_local_interface (
    const char * id,
    const char * name,
    const char * version,
    const CORBA::InterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::LocalInterfaceDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      5,
      "create_local_interface",
      22,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExtValueDef_ptr CORBA::Container::create_ext_value (
    const char * id,
    const char * name,
    const char * version,
    CORBA::Boolean is_custom,
    CORBA::Boolean is_abstract,
    CORBA::ValueDef_ptr base_value,
    CORBA::Boolean is_truncatable,
    const CORBA::ValueDefSeq & abstract_base_values,
    const CORBA::InterfaceDefSeq & supported_interfaces,
    const CORBA::ExtInitializerSeq & initializers
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Container_Proxy_Broker_ == 0)
    {
      CORBA_Container_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExtValueDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom (is_custom);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract (is_abstract);
  TAO::Arg_Traits<CORBA::ValueDef>::in_arg_val _tao_base_value (base_value);
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable (is_truncatable);
  TAO::Arg_Traits<CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values (abstract_base_values);
  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces (supported_interfaces);
  TAO::Arg_Traits<CORBA::ExtInitializerSeq>::in_arg_val _tao_initializers (initializers);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_is_custom,
      &_tao_is_abstract,
      &_tao_base_value,
      &_tao_is_truncatable,
      &_tao_abstract_base_values,
      &_tao_supported_interfaces,
      &_tao_initializers
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      11,
      "create_ext_value",
      16,
      this->the_TAO_Container_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::Container::Container (int collocated)
 : the_TAO_Container_Proxy_Broker_ (0)
{
  this->CORBA_Container_setup_collocation (collocated);
}

void
CORBA::Container::CORBA_Container_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_Container_Proxy_Broker_ =
        ::CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IRObject_setup_collocation (collocated);
}

CORBA::Container::~Container (void)
{}

void 
CORBA::Container::_tao_any_destructor (void *_tao_void_pointer)
{
  Container *_tao_tmp_pointer =
    ACE_static_cast (Container *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::Container_ptr
CORBA::Container::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Container>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Container:1.0",
        CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Container_ptr
CORBA::Container::_duplicate (Container_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::Container::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::Container::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/Container:1.0";
}

CORBA::Boolean
CORBA::Container::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Container[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Container:1.0
    10,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x72000000),  // name = Container
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_Container (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_Container),
    (char *) &_oc_CORBA_Container,
    0,
    sizeof (CORBA::Container)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_Container =
    &_tc_TAO_tc_CORBA_Container;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::IDLType.

CORBA::IDLType_ptr
TAO::Objref_Traits<CORBA::IDLType>::tao_duplicate (
    CORBA::IDLType_ptr p
  )
{
  return CORBA::IDLType::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::IDLType>::tao_release (
    CORBA::IDLType_ptr p
  )
{
  CORBA::release (p);
}

CORBA::IDLType_ptr
TAO::Objref_Traits<CORBA::IDLType>::tao_nil (void)
{
  return CORBA::IDLType::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::IDLType>::tao_marshal (
    CORBA::IDLType_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::IDLType::type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IDLType_Proxy_Broker_ == 0)
    {
      CORBA_IDLType_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_type",
      9,
      this->the_TAO_IDLType_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::IDLType::IDLType (int collocated)
 : the_TAO_IDLType_Proxy_Broker_ (0)
{
  this->CORBA_IDLType_setup_collocation (collocated);
}

void
CORBA::IDLType::CORBA_IDLType_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_IDLType_Proxy_Broker_ =
        ::CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IRObject_setup_collocation (collocated);
}

CORBA::IDLType::~IDLType (void)
{}

void 
CORBA::IDLType::_tao_any_destructor (void *_tao_void_pointer)
{
  IDLType *_tao_tmp_pointer =
    ACE_static_cast (IDLType *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::IDLType_ptr
CORBA::IDLType::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IDLType>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/IDLType:1.0",
        CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::IDLType_ptr
CORBA::IDLType::_duplicate (IDLType_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::IDLType::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::IDLType::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/IDLType:1.0";
}

CORBA::Boolean
CORBA::IDLType::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_IDLType[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4944), 
  ACE_NTOHL (0x4c547970), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
    8,
  ACE_NTOHL (0x49444c54), 
  ACE_NTOHL (0x79706500),  // name = IDLType
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_IDLType (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_IDLType),
    (char *) &_oc_CORBA_IDLType,
    0,
    sizeof (CORBA::IDLType)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_IDLType =
    &_tc_TAO_tc_CORBA_IDLType;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::TypedefDef.

CORBA::TypedefDef_ptr
TAO::Objref_Traits<CORBA::TypedefDef>::tao_duplicate (
    CORBA::TypedefDef_ptr p
  )
{
  return CORBA::TypedefDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::TypedefDef>::tao_release (
    CORBA::TypedefDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::TypedefDef_ptr
TAO::Objref_Traits<CORBA::TypedefDef>::tao_nil (void)
{
  return CORBA::TypedefDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::TypedefDef>::tao_marshal (
    CORBA::TypedefDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::TypedefDef::TypedefDef (int collocated)
 : the_TAO_TypedefDef_Proxy_Broker_ (0)
{
  this->CORBA_TypedefDef_setup_collocation (collocated);
}

void
CORBA::TypedefDef::CORBA_TypedefDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_TypedefDef_Proxy_Broker_ =
        ::CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation (collocated);
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::TypedefDef::~TypedefDef (void)
{}

void 
CORBA::TypedefDef::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedefDef *_tao_tmp_pointer =
    ACE_static_cast (TypedefDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<TypedefDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/TypedefDef:1.0",
        CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::TypedefDef_ptr
CORBA::TypedefDef::_duplicate (TypedefDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::TypedefDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::TypedefDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/TypedefDef:1.0";
}

CORBA::Boolean
CORBA::TypedefDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_TypedefDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5479), 
  ACE_NTOHL (0x70656465), 
  ACE_NTOHL (0x66446566), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/TypedefDef:1.0
    11,
  ACE_NTOHL (0x54797065), 
  ACE_NTOHL (0x64656644), 
  ACE_NTOHL (0x65660000),  // name = TypedefDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_TypedefDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_TypedefDef),
    (char *) &_oc_CORBA_TypedefDef,
    0,
    sizeof (CORBA::TypedefDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_TypedefDef =
    &_tc_TAO_tc_CORBA_TypedefDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_TypeDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5479), 
  ACE_NTOHL (0x70654465), 
  ACE_NTOHL (0x73637269), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/TypeDescription:1.0
    16,
  ACE_NTOHL (0x54797065), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e00),  // name = TypeDescription
  5, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_TypeDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_TypeDescription),
    (char *) &_oc_CORBA_TypeDescription,
    0,
    sizeof (CORBA::TypeDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_TypeDescription =
    &_tc_TAO_tc_CORBA_TypeDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::TypeDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  TypeDescription *_tao_tmp_pointer =
    ACE_static_cast (TypeDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::DefinitionKind _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CORBA::DefinitionKind>::insert (
      _tao_any,
      CORBA::_tc_DefinitionKind,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::DefinitionKind &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CORBA::DefinitionKind>::extract (
        _tao_any,
        CORBA::_tc_DefinitionKind,
        _tao_elem 
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::IRObject>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::IRObject_ptr _tao_elem
  )
{
  CORBA::IRObject_ptr _tao_objptr =
    CORBA::IRObject::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::IRObject_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::IRObject>::insert (
      _tao_any,
      CORBA::IRObject::_tao_any_destructor,
      CORBA::_tc_IRObject,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::IRObject_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::IRObject>::extract (
        _tao_any,
        CORBA::IRObject::_tao_any_destructor,
        CORBA::_tc_IRObject,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::Contained>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Contained_ptr _tao_elem
  )
{
  CORBA::Contained_ptr _tao_objptr =
    CORBA::Contained::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Contained_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::Contained>::insert (
      _tao_any,
      CORBA::Contained::_tao_any_destructor,
      CORBA::_tc_Contained,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Contained_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::Contained>::extract (
        _tao_any,
        CORBA::Contained::_tao_any_destructor,
        CORBA::_tc_Contained,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::Contained::Description &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Contained::Description>::insert_copy (
      _tao_any,
      CORBA::Contained::Description::_tao_any_destructor,
      CORBA::Contained::_tc_Description,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Contained::Description *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Contained::Description>::insert (
      _tao_any,
      CORBA::Contained::Description::_tao_any_destructor,
      CORBA::Contained::_tc_Description,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Contained::Description *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::Contained::Description *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::Contained::Description *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::Contained::Description>::extract (
        _tao_any,
        CORBA::Contained::Description::_tao_any_destructor,
        CORBA::Contained::_tc_Description,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::InterfaceDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceDefSeq>::insert_copy (
      _tao_any,
      CORBA::InterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_InterfaceDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceDefSeq>::insert (
      _tao_any,
      CORBA::InterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_InterfaceDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InterfaceDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::InterfaceDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::InterfaceDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::InterfaceDefSeq>::extract (
        _tao_any,
        CORBA::InterfaceDefSeq::_tao_any_destructor,
        CORBA::_tc_InterfaceDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ValueDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ValueDefSeq>::insert_copy (
      _tao_any,
      CORBA::ValueDefSeq::_tao_any_destructor,
      CORBA::_tc_ValueDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ValueDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ValueDefSeq>::insert (
      _tao_any,
      CORBA::ValueDefSeq::_tao_any_destructor,
      CORBA::_tc_ValueDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ValueDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ValueDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ValueDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ValueDefSeq>::extract (
        _tao_any,
        CORBA::ValueDefSeq::_tao_any_destructor,
        CORBA::_tc_ValueDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::AbstractInterfaceDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::AbstractInterfaceDefSeq>::insert_copy (
      _tao_any,
      CORBA::AbstractInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_AbstractInterfaceDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AbstractInterfaceDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::AbstractInterfaceDefSeq>::insert (
      _tao_any,
      CORBA::AbstractInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_AbstractInterfaceDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AbstractInterfaceDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::AbstractInterfaceDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::AbstractInterfaceDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::AbstractInterfaceDefSeq>::extract (
        _tao_any,
        CORBA::AbstractInterfaceDefSeq::_tao_any_destructor,
        CORBA::_tc_AbstractInterfaceDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::LocalInterfaceDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::LocalInterfaceDefSeq>::insert_copy (
      _tao_any,
      CORBA::LocalInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_LocalInterfaceDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::LocalInterfaceDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::LocalInterfaceDefSeq>::insert (
      _tao_any,
      CORBA::LocalInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_LocalInterfaceDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::LocalInterfaceDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::LocalInterfaceDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::LocalInterfaceDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::LocalInterfaceDefSeq>::extract (
        _tao_any,
        CORBA::LocalInterfaceDefSeq::_tao_any_destructor,
        CORBA::_tc_LocalInterfaceDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtInterfaceDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtInterfaceDefSeq>::insert_copy (
      _tao_any,
      CORBA::ExtInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtInterfaceDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtInterfaceDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtInterfaceDefSeq>::insert (
      _tao_any,
      CORBA::ExtInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtInterfaceDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtInterfaceDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtInterfaceDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtInterfaceDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtInterfaceDefSeq>::extract (
        _tao_any,
        CORBA::ExtInterfaceDefSeq::_tao_any_destructor,
        CORBA::_tc_ExtInterfaceDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtValueDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtValueDefSeq>::insert_copy (
      _tao_any,
      CORBA::ExtValueDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtValueDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtValueDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtValueDefSeq>::insert (
      _tao_any,
      CORBA::ExtValueDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtValueDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtValueDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtValueDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtValueDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtValueDefSeq>::extract (
        _tao_any,
        CORBA::ExtValueDefSeq::_tao_any_destructor,
        CORBA::_tc_ExtValueDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtAbstractInterfaceDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtAbstractInterfaceDefSeq>::insert_copy (
      _tao_any,
      CORBA::ExtAbstractInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtAbstractInterfaceDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAbstractInterfaceDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtAbstractInterfaceDefSeq>::insert (
      _tao_any,
      CORBA::ExtAbstractInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtAbstractInterfaceDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtAbstractInterfaceDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtAbstractInterfaceDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtAbstractInterfaceDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtAbstractInterfaceDefSeq>::extract (
        _tao_any,
        CORBA::ExtAbstractInterfaceDefSeq::_tao_any_destructor,
        CORBA::_tc_ExtAbstractInterfaceDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtLocalInterfaceDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtLocalInterfaceDefSeq>::insert_copy (
      _tao_any,
      CORBA::ExtLocalInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtLocalInterfaceDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtLocalInterfaceDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtLocalInterfaceDefSeq>::insert (
      _tao_any,
      CORBA::ExtLocalInterfaceDefSeq::_tao_any_destructor,
      CORBA::_tc_ExtLocalInterfaceDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtLocalInterfaceDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtLocalInterfaceDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtLocalInterfaceDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtLocalInterfaceDefSeq>::extract (
        _tao_any,
        CORBA::ExtLocalInterfaceDefSeq::_tao_any_destructor,
        CORBA::_tc_ExtLocalInterfaceDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ContainedSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ContainedSeq>::insert_copy (
      _tao_any,
      CORBA::ContainedSeq::_tao_any_destructor,
      CORBA::_tc_ContainedSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ContainedSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ContainedSeq>::insert (
      _tao_any,
      CORBA::ContainedSeq::_tao_any_destructor,
      CORBA::_tc_ContainedSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ContainedSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ContainedSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ContainedSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ContainedSeq>::extract (
        _tao_any,
        CORBA::ContainedSeq::_tao_any_destructor,
        CORBA::_tc_ContainedSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::StructMember &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::StructMember>::insert_copy (
      _tao_any,
      CORBA::StructMember::_tao_any_destructor,
      CORBA::_tc_StructMember,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::StructMember *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::StructMember>::insert (
      _tao_any,
      CORBA::StructMember::_tao_any_destructor,
      CORBA::_tc_StructMember,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::StructMember *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::StructMember *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::StructMember *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::StructMember>::extract (
        _tao_any,
        CORBA::StructMember::_tao_any_destructor,
        CORBA::_tc_StructMember,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::StructMemberSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::StructMemberSeq>::insert_copy (
      _tao_any,
      CORBA::StructMemberSeq::_tao_any_destructor,
      CORBA::_tc_StructMemberSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::StructMemberSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::StructMemberSeq>::insert (
      _tao_any,
      CORBA::StructMemberSeq::_tao_any_destructor,
      CORBA::_tc_StructMemberSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::StructMemberSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::StructMemberSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::StructMemberSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::StructMemberSeq>::extract (
        _tao_any,
        CORBA::StructMemberSeq::_tao_any_destructor,
        CORBA::_tc_StructMemberSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::Initializer &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Initializer>::insert_copy (
      _tao_any,
      CORBA::Initializer::_tao_any_destructor,
      CORBA::_tc_Initializer,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Initializer *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Initializer>::insert (
      _tao_any,
      CORBA::Initializer::_tao_any_destructor,
      CORBA::_tc_Initializer,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Initializer *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::Initializer *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::Initializer *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::Initializer>::extract (
        _tao_any,
        CORBA::Initializer::_tao_any_destructor,
        CORBA::_tc_Initializer,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::InitializerSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InitializerSeq>::insert_copy (
      _tao_any,
      CORBA::InitializerSeq::_tao_any_destructor,
      CORBA::_tc_InitializerSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InitializerSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InitializerSeq>::insert (
      _tao_any,
      CORBA::InitializerSeq::_tao_any_destructor,
      CORBA::_tc_InitializerSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InitializerSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::InitializerSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::InitializerSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::InitializerSeq>::extract (
        _tao_any,
        CORBA::InitializerSeq::_tao_any_destructor,
        CORBA::_tc_InitializerSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExceptionDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExceptionDescription>::insert_copy (
      _tao_any,
      CORBA::ExceptionDescription::_tao_any_destructor,
      CORBA::_tc_ExceptionDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExceptionDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExceptionDescription>::insert (
      _tao_any,
      CORBA::ExceptionDescription::_tao_any_destructor,
      CORBA::_tc_ExceptionDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExceptionDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExceptionDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExceptionDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExceptionDescription>::extract (
        _tao_any,
        CORBA::ExceptionDescription::_tao_any_destructor,
        CORBA::_tc_ExceptionDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExcDescriptionSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExcDescriptionSeq>::insert_copy (
      _tao_any,
      CORBA::ExcDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_ExcDescriptionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExcDescriptionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExcDescriptionSeq>::insert (
      _tao_any,
      CORBA::ExcDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_ExcDescriptionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExcDescriptionSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExcDescriptionSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExcDescriptionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExcDescriptionSeq>::extract (
        _tao_any,
        CORBA::ExcDescriptionSeq::_tao_any_destructor,
        CORBA::_tc_ExcDescriptionSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtInitializer &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtInitializer>::insert_copy (
      _tao_any,
      CORBA::ExtInitializer::_tao_any_destructor,
      CORBA::_tc_ExtInitializer,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtInitializer *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtInitializer>::insert (
      _tao_any,
      CORBA::ExtInitializer::_tao_any_destructor,
      CORBA::_tc_ExtInitializer,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtInitializer *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtInitializer *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtInitializer *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtInitializer>::extract (
        _tao_any,
        CORBA::ExtInitializer::_tao_any_destructor,
        CORBA::_tc_ExtInitializer,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtInitializerSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtInitializerSeq>::insert_copy (
      _tao_any,
      CORBA::ExtInitializerSeq::_tao_any_destructor,
      CORBA::_tc_ExtInitializerSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtInitializerSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtInitializerSeq>::insert (
      _tao_any,
      CORBA::ExtInitializerSeq::_tao_any_destructor,
      CORBA::_tc_ExtInitializerSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtInitializerSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtInitializerSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtInitializerSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtInitializerSeq>::extract (
        _tao_any,
        CORBA::ExtInitializerSeq::_tao_any_destructor,
        CORBA::_tc_ExtInitializerSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::UnionMember &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::UnionMember>::insert_copy (
      _tao_any,
      CORBA::UnionMember::_tao_any_destructor,
      CORBA::_tc_UnionMember,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::UnionMember *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::UnionMember>::insert (
      _tao_any,
      CORBA::UnionMember::_tao_any_destructor,
      CORBA::_tc_UnionMember,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::UnionMember *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::UnionMember *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::UnionMember *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::UnionMember>::extract (
        _tao_any,
        CORBA::UnionMember::_tao_any_destructor,
        CORBA::_tc_UnionMember,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::UnionMemberSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::UnionMemberSeq>::insert_copy (
      _tao_any,
      CORBA::UnionMemberSeq::_tao_any_destructor,
      CORBA::_tc_UnionMemberSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::UnionMemberSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::UnionMemberSeq>::insert (
      _tao_any,
      CORBA::UnionMemberSeq::_tao_any_destructor,
      CORBA::_tc_UnionMemberSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::UnionMemberSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::UnionMemberSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::UnionMemberSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::UnionMemberSeq>::extract (
        _tao_any,
        CORBA::UnionMemberSeq::_tao_any_destructor,
        CORBA::_tc_UnionMemberSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::EnumMemberSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::EnumMemberSeq>::insert_copy (
      _tao_any,
      CORBA::EnumMemberSeq::_tao_any_destructor,
      CORBA::_tc_EnumMemberSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::EnumMemberSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::EnumMemberSeq>::insert (
      _tao_any,
      CORBA::EnumMemberSeq::_tao_any_destructor,
      CORBA::_tc_EnumMemberSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::EnumMemberSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::EnumMemberSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::EnumMemberSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::EnumMemberSeq>::extract (
        _tao_any,
        CORBA::EnumMemberSeq::_tao_any_destructor,
        CORBA::_tc_EnumMemberSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::Container>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Container_ptr _tao_elem
  )
{
  CORBA::Container_ptr _tao_objptr =
    CORBA::Container::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Container_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::Container>::insert (
      _tao_any,
      CORBA::Container::_tao_any_destructor,
      CORBA::_tc_Container,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Container_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::Container>::extract (
        _tao_any,
        CORBA::Container::_tao_any_destructor,
        CORBA::_tc_Container,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::Container::Description &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Container::Description>::insert_copy (
      _tao_any,
      CORBA::Container::Description::_tao_any_destructor,
      CORBA::Container::_tc_Description,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Container::Description *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Container::Description>::insert (
      _tao_any,
      CORBA::Container::Description::_tao_any_destructor,
      CORBA::Container::_tc_Description,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Container::Description *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::Container::Description *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::Container::Description *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::Container::Description>::extract (
        _tao_any,
        CORBA::Container::Description::_tao_any_destructor,
        CORBA::Container::_tc_Description,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::Container::DescriptionSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Container::DescriptionSeq>::insert_copy (
      _tao_any,
      CORBA::Container::DescriptionSeq::_tao_any_destructor,
      CORBA::Container::_tc_DescriptionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Container::DescriptionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::Container::DescriptionSeq>::insert (
      _tao_any,
      CORBA::Container::DescriptionSeq::_tao_any_destructor,
      CORBA::Container::_tc_DescriptionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Container::DescriptionSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::Container::DescriptionSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::Container::DescriptionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::Container::DescriptionSeq>::extract (
        _tao_any,
        CORBA::Container::DescriptionSeq::_tao_any_destructor,
        CORBA::Container::_tc_DescriptionSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::IDLType>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::IDLType_ptr _tao_elem
  )
{
  CORBA::IDLType_ptr _tao_objptr =
    CORBA::IDLType::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::IDLType_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::IDLType>::insert (
      _tao_any,
      CORBA::IDLType::_tao_any_destructor,
      CORBA::_tc_IDLType,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::IDLType_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::IDLType>::extract (
        _tao_any,
        CORBA::IDLType::_tao_any_destructor,
        CORBA::_tc_IDLType,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::TypedefDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::TypedefDef_ptr _tao_elem
  )
{
  CORBA::TypedefDef_ptr _tao_objptr =
    CORBA::TypedefDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::TypedefDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::TypedefDef>::insert (
      _tao_any,
      CORBA::TypedefDef::_tao_any_destructor,
      CORBA::_tc_TypedefDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::TypedefDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::TypedefDef>::extract (
        _tao_any,
        CORBA::TypedefDef::_tao_any_destructor,
        CORBA::_tc_TypedefDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::TypeDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::TypeDescription>::insert_copy (
      _tao_any,
      CORBA::TypeDescription::_tao_any_destructor,
      CORBA::_tc_TypeDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::TypeDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::TypeDescription>::insert (
      _tao_any,
      CORBA::TypeDescription::_tao_any_destructor,
      CORBA::_tc_TypeDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::TypeDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::TypeDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::TypeDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::TypeDescription>::extract (
        _tao_any,
        CORBA::TypeDescription::_tao_any_destructor,
        CORBA::_tc_TypeDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::IRObject_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::IRObject_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::IRObject RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Contained_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Contained_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::Contained RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_InterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_InterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::InterfaceDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_InterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ValueDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ValueDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ValueDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ValueDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AbstractInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::AbstractInterfaceDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AbstractInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_AbstractInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::LocalInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::LocalInterfaceDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::LocalInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_LocalInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExtInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtInterfaceDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExtInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExtValueDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtValueDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtValueDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtValueDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExtValueDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExtAbstractInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtAbstractInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtAbstractInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtAbstractInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExtAbstractInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExtLocalInterfaceDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtLocalInterfaceDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtLocalInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>::tao_marshal (
                _tao_sequence[i].in (), strm
              );
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtLocalInterfaceDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExtLocalInterfaceDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ContainedSeq_CPP_
#define _TAO_CDR_OP_CORBA_ContainedSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ContainedSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            _tao_sequence[i].in ()->marshal (strm);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ContainedSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ContainedSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_StructMemberSeq_CPP_
#define _TAO_CDR_OP_CORBA_StructMemberSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StructMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::StructMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_StructMemberSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_InitializerSeq_CPP_
#define _TAO_CDR_OP_CORBA_InitializerSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InitializerSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InitializerSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_InitializerSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExcDescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExcDescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExcDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExcDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExcDescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExtInitializerSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtInitializerSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtInitializerSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtInitializerSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExtInitializerSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_UnionMemberSeq_CPP_
#define _TAO_CDR_OP_CORBA_UnionMemberSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::UnionMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::UnionMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_UnionMemberSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_EnumMemberSeq_CPP_
#define _TAO_CDR_OP_CORBA_EnumMemberSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::EnumMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::EnumMemberSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        
      }
    
    return _tao_marshal_flag;
  
  }

return 0;
}

#endif /* _TAO_CDR_OP_CORBA_EnumMemberSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_Container_DescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_Container_DescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Container::DescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Container::DescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_Container_DescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Container_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Container_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::Container RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::IDLType_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::IDLType_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::IDLType RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::TypedefDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::TypedefDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::TypedefDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/root.cpp:1702

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::DefinitionKind>;

  template class TAO::Basic_Arg_Traits_T<CORBA::DefinitionKind>;

#endif /* end #if !defined */

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::DefinitionKind
      >;

  template class TAO::Objref_Traits<CORBA::IRObject>;

  template class
    TAO_Objref_Var_T<
        CORBA::IRObject,
        TAO::Objref_Traits<CORBA::IRObject>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::IRObject,
        TAO::Objref_Traits<CORBA::IRObject>
      >;

  template class
    TAO::Narrow_Utils<CORBA::IRObject>;

  template class
    TAO::Any_Impl_T<
        CORBA::IRObject
      >;

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Contained>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Contained_ptr,
        CORBA::Contained_var,
        CORBA::Contained_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Contained::Description>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::Contained::Description,
        CORBA::Contained::Description_var,
        CORBA::Contained::Description_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::Contained::Description
      >;

  template class
    TAO_Var_Base_T<
        CORBA::Contained::Description
      >;

  template class
    TAO_Out_T<
        CORBA::Contained::Description,
        CORBA::Contained::Description_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::Contained::Description
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::Contained::Description,
        CORBA::Contained::Description_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::Container_ptr
      >;

  template class TAO::Objref_Traits<CORBA::Contained>;

  template class
    TAO_Objref_Var_T<
        CORBA::Contained,
        TAO::Objref_Traits<CORBA::Contained>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::Contained,
        TAO::Objref_Traits<CORBA::Contained>
      >;

  template class
    TAO::Narrow_Utils<CORBA::Contained>;

  template class
    TAO::Any_Impl_T<
        CORBA::Contained
      >;

#if !defined (_CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Repository>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Repository_ptr,
        CORBA::Repository_var,
        CORBA::Repository_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Container>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Container_ptr,
        CORBA::Container_var,
        CORBA::Container_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::Contained_ptr,
        CORBA::Contained_var
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::ContainedSeq,
        CORBA::ContainedSeq_var
      >;

  template class
    TAO::In_Basic_Argument_T<
        CORBA::DefinitionKind
      >;

  template class
    TAO_Var_Var_T<
        CORBA::Container::Description
      >;

  template class
    TAO_Var_Base_T<
        CORBA::Container::Description
      >;

  template class
    TAO_Out_T<
        CORBA::Container::Description,
        CORBA::Container::Description_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::Container::Description
      >;

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Container::DescriptionSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::DescriptionSeq_var,
        CORBA::Container::DescriptionSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::Description
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::Description
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::DescriptionSeq_var,
        CORBA::Container::Description
      >;

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::Container::Description
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::Container::DescriptionSeq
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::Container::DescriptionSeq,
        CORBA::Container::DescriptionSeq_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ModuleDef_ptr,
        CORBA::ModuleDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ConstantDef_ptr,
        CORBA::ConstantDef_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::IDLType_ptr
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::StructDef_ptr,
        CORBA::StructDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::StructMemberSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::UnionDef_ptr,
        CORBA::UnionDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::UnionMemberSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::EnumDef_ptr,
        CORBA::EnumDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::EnumMemberSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::AliasDef_ptr,
        CORBA::AliasDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::InterfaceDef_ptr,
        CORBA::InterfaceDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::InterfaceDefSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ValueDef_ptr,
        CORBA::ValueDef_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::ValueDef_ptr
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ValueDefSeq
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::InitializerSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ValueBoxDef_ptr,
        CORBA::ValueBoxDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ExceptionDef_ptr,
        CORBA::ExceptionDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::NativeDef_ptr,
        CORBA::NativeDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::AbstractInterfaceDef_ptr,
        CORBA::AbstractInterfaceDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::AbstractInterfaceDefSeq
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::LocalInterfaceDef_ptr,
        CORBA::LocalInterfaceDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ExtValueDef_ptr,
        CORBA::ExtValueDef_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ExtInitializerSeq
      >;

  template class TAO::Objref_Traits<CORBA::Container>;

  template class
    TAO_Objref_Var_T<
        CORBA::Container,
        TAO::Objref_Traits<CORBA::Container>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::Container,
        TAO::Objref_Traits<CORBA::Container>
      >;

  template class
    TAO::Narrow_Utils<CORBA::Container>;

  template class
    TAO::Any_Impl_T<
        CORBA::Container
      >;

#if !defined (_CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ModuleDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ModuleDef_ptr,
        CORBA::ModuleDef_var,
        CORBA::ModuleDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ConstantDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ConstantDef_ptr,
        CORBA::ConstantDef_var,
        CORBA::ConstantDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::IDLType>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::IDLType_ptr,
        CORBA::IDLType_var,
        CORBA::IDLType_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::IDLType>;

  template class
    TAO_Objref_Var_T<
        CORBA::IDLType,
        TAO::Objref_Traits<CORBA::IDLType>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::IDLType,
        TAO::Objref_Traits<CORBA::IDLType>
      >;

  template class
    TAO::Narrow_Utils<CORBA::IDLType>;

  template class
    TAO::Any_Impl_T<
        CORBA::IDLType
      >;

#if !defined (_CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::StructDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::StructDef_ptr,
        CORBA::StructDef_var,
        CORBA::StructDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::UnionDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::UnionDef_ptr,
        CORBA::UnionDef_var,
        CORBA::UnionDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::EnumDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::EnumDef_ptr,
        CORBA::EnumDef_var,
        CORBA::EnumDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::AliasDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::AliasDef_ptr,
        CORBA::AliasDef_var,
        CORBA::AliasDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InterfaceDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::InterfaceDef_ptr,
        CORBA::InterfaceDef_var,
        CORBA::InterfaceDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InterfaceDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::InterfaceDefSeq,
        CORBA::InterfaceDefSeq_var,
        CORBA::InterfaceDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::InterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::InterfaceDef,
            CORBA::InterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::InterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::InterfaceDef,
            CORBA::InterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::InterfaceDefSeq,
        CORBA::InterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::InterfaceDef,
            CORBA::InterfaceDef_var
          >
      >;

#if !defined (_CORBA_INTERFACEDEFSEQ_CS_)
#define _CORBA_INTERFACEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::InterfaceDef,
        CORBA::InterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::InterfaceDefSeq
      >;

#if !defined (_CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExceptionDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ExceptionDef_ptr,
        CORBA::ExceptionDef_var,
        CORBA::ExceptionDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::NativeDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::NativeDef_ptr,
        CORBA::NativeDef_var,
        CORBA::NativeDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ValueDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ValueDef_ptr,
        CORBA::ValueDef_var,
        CORBA::ValueDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ValueDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ValueDefSeq,
        CORBA::ValueDefSeq_var,
        CORBA::ValueDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ValueDef,
        CORBA::ValueDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ValueDefSeq,
        TAO_Object_Manager<
            CORBA::ValueDef,
            CORBA::ValueDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ValueDefSeq,
        TAO_Object_Manager<
            CORBA::ValueDef,
            CORBA::ValueDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ValueDefSeq,
        CORBA::ValueDefSeq_var,
        TAO_Object_Manager<
            CORBA::ValueDef,
            CORBA::ValueDef_var
          >
      >;

#if !defined (_CORBA_VALUEDEFSEQ_CS_)
#define _CORBA_VALUEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ValueDef,
        CORBA::ValueDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ValueDefSeq
      >;

#if !defined (_CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ValueBoxDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ValueBoxDef_ptr,
        CORBA::ValueBoxDef_var,
        CORBA::ValueBoxDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::AbstractInterfaceDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::AbstractInterfaceDef_ptr,
        CORBA::AbstractInterfaceDef_var,
        CORBA::AbstractInterfaceDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::AbstractInterfaceDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::AbstractInterfaceDefSeq,
        CORBA::AbstractInterfaceDefSeq_var,
        CORBA::AbstractInterfaceDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::AbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::AbstractInterfaceDef,
            CORBA::AbstractInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::AbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::AbstractInterfaceDef,
            CORBA::AbstractInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::AbstractInterfaceDefSeq,
        CORBA::AbstractInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::AbstractInterfaceDef,
            CORBA::AbstractInterfaceDef_var
          >
      >;

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::AbstractInterfaceDef,
        CORBA::AbstractInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::AbstractInterfaceDefSeq
      >;

#if !defined (_CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::LocalInterfaceDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::LocalInterfaceDef_ptr,
        CORBA::LocalInterfaceDef_var,
        CORBA::LocalInterfaceDef_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::LocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::LocalInterfaceDef,
            CORBA::LocalInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::LocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::LocalInterfaceDef,
            CORBA::LocalInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::LocalInterfaceDefSeq,
        CORBA::LocalInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::LocalInterfaceDef,
            CORBA::LocalInterfaceDef_var
          >
      >;

#if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_LOCALINTERFACEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::LocalInterfaceDef,
        CORBA::LocalInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::LocalInterfaceDefSeq
      >;

  template class
    TAO_Object_Manager<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtInterfaceDef,
            CORBA::ExtInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtInterfaceDef,
            CORBA::ExtInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtInterfaceDefSeq,
        CORBA::ExtInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtInterfaceDef,
            CORBA::ExtInterfaceDef_var
          >
      >;

#if !defined (_CORBA_EXTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTINTERFACEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtInterfaceDef,
        CORBA::ExtInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtInterfaceDefSeq
      >;

#if !defined (_CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExtValueDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ExtValueDef_ptr,
        CORBA::ExtValueDef_var,
        CORBA::ExtValueDef_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtValueDefSeq,
        TAO_Object_Manager<
            CORBA::ExtValueDef,
            CORBA::ExtValueDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtValueDefSeq,
        TAO_Object_Manager<
            CORBA::ExtValueDef,
            CORBA::ExtValueDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtValueDefSeq,
        CORBA::ExtValueDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtValueDef,
            CORBA::ExtValueDef_var
          >
      >;

#if !defined (_CORBA_EXTVALUEDEFSEQ_CS_)
#define _CORBA_EXTVALUEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtValueDef,
        CORBA::ExtValueDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtValueDefSeq
      >;

  template class
    TAO_Object_Manager<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtAbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtAbstractInterfaceDef,
            CORBA::ExtAbstractInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtAbstractInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtAbstractInterfaceDef,
            CORBA::ExtAbstractInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtAbstractInterfaceDefSeq,
        CORBA::ExtAbstractInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtAbstractInterfaceDef,
            CORBA::ExtAbstractInterfaceDef_var
          >
      >;

#if !defined (_CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtAbstractInterfaceDef,
        CORBA::ExtAbstractInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtAbstractInterfaceDefSeq
      >;

  template class
    TAO_Object_Manager<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExtLocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtLocalInterfaceDef,
            CORBA::ExtLocalInterfaceDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtLocalInterfaceDefSeq,
        TAO_Object_Manager<
            CORBA::ExtLocalInterfaceDef,
            CORBA::ExtLocalInterfaceDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExtLocalInterfaceDefSeq,
        CORBA::ExtLocalInterfaceDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExtLocalInterfaceDef,
            CORBA::ExtLocalInterfaceDef_var
          >
      >;

#if !defined (_CORBA_EXTLOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTLOCALINTERFACEDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExtLocalInterfaceDef,
        CORBA::ExtLocalInterfaceDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtLocalInterfaceDefSeq
      >;

#if !defined (_CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ContainedSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ContainedSeq,
        CORBA::ContainedSeq_var,
        CORBA::ContainedSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::Contained,
        CORBA::Contained_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ContainedSeq,
        TAO_Object_Manager<
            CORBA::Contained,
            CORBA::Contained_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ContainedSeq,
        TAO_Object_Manager<
            CORBA::Contained,
            CORBA::Contained_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ContainedSeq,
        CORBA::ContainedSeq_var,
        TAO_Object_Manager<
            CORBA::Contained,
            CORBA::Contained_var
          >
      >;

#if !defined (_CORBA_CONTAINEDSEQ_CS_)
#define _CORBA_CONTAINEDSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::Contained,
        CORBA::Contained_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ContainedSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::StructMember
      >;

  template class
    TAO_Var_Base_T<
        CORBA::StructMember
      >;

  template class
    TAO_Out_T<
        CORBA::StructMember,
        CORBA::StructMember_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::StructMember
      >;

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::StructMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::StructMemberSeq,
        CORBA::StructMemberSeq_var,
        CORBA::StructMemberSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::StructMemberSeq,
        CORBA::StructMember
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::StructMemberSeq,
        CORBA::StructMember
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::StructMemberSeq,
        CORBA::StructMemberSeq_var,
        CORBA::StructMember
      >;

#if !defined (_CORBA_STRUCTMEMBERSEQ_CS_)
#define _CORBA_STRUCTMEMBERSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::StructMember
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::StructMemberSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::Initializer
      >;

  template class
    TAO_Var_Base_T<
        CORBA::Initializer
      >;

  template class
    TAO_Out_T<
        CORBA::Initializer,
        CORBA::Initializer_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::Initializer
      >;

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InitializerSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::InitializerSeq,
        CORBA::InitializerSeq_var,
        CORBA::InitializerSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::InitializerSeq,
        CORBA::Initializer
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::InitializerSeq,
        CORBA::Initializer
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::InitializerSeq,
        CORBA::InitializerSeq_var,
        CORBA::Initializer
      >;

#if !defined (_CORBA_INITIALIZERSEQ_CS_)
#define _CORBA_INITIALIZERSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::Initializer
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::InitializerSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Out_T<
        CORBA::ExceptionDescription,
        CORBA::ExceptionDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExceptionDescription
      >;

  template class
    TAO_VarSeq_Var_T<
        CORBA::ExcDescriptionSeq,
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExcDescriptionSeq,
        CORBA::ExceptionDescription
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::ExcDescriptionSeq,
        CORBA::ExcDescriptionSeq_var,
        CORBA::ExceptionDescription
      >;

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CS_)
#define _CORBA_EXCDESCRIPTIONSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::ExceptionDescription
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExcDescriptionSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::ExtInitializer
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ExtInitializer
      >;

  template class
    TAO_Out_T<
        CORBA::ExtInitializer,
        CORBA::ExtInitializer_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtInitializer
      >;

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExtInitializerSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializerSeq_var,
        CORBA::ExtInitializerSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializer
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializer
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::ExtInitializerSeq,
        CORBA::ExtInitializerSeq_var,
        CORBA::ExtInitializer
      >;

#if !defined (_CORBA_EXTINITIALIZERSEQ_CS_)
#define _CORBA_EXTINITIALIZERSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::ExtInitializer
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtInitializerSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::UnionMember
      >;

  template class
    TAO_Var_Base_T<
        CORBA::UnionMember
      >;

  template class
    TAO_Out_T<
        CORBA::UnionMember,
        CORBA::UnionMember_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::UnionMember
      >;

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::UnionMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::UnionMemberSeq,
        CORBA::UnionMemberSeq_var,
        CORBA::UnionMemberSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMember
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMember
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::UnionMemberSeq,
        CORBA::UnionMemberSeq_var,
        CORBA::UnionMember
      >;

#if !defined (_CORBA_UNIONMEMBERSEQ_CS_)
#define _CORBA_UNIONMEMBERSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::UnionMember
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::UnionMemberSeq
      >;

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::EnumMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::EnumMemberSeq,
        CORBA::EnumMemberSeq_var,
        CORBA::EnumMemberSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_MngSeq_Var_T<
        CORBA::EnumMemberSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::EnumMemberSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::EnumMemberSeq,
        CORBA::EnumMemberSeq_var,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::EnumMemberSeq
      >;

  template class TAO::Objref_Traits<CORBA::TypedefDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::TypedefDef,
        TAO::Objref_Traits<CORBA::TypedefDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::TypedefDef,
        TAO::Objref_Traits<CORBA::TypedefDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::TypedefDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::TypedefDef
      >;

  template class
    TAO_Var_Var_T<
        CORBA::TypeDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::TypeDescription
      >;

  template class
    TAO_Out_T<
        CORBA::TypeDescription,
        CORBA::TypeDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::TypeDescription
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#if !defined (_CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_DEFINITIONKIND__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::DefinitionKind>

# pragma instantiate TAO::Basic_Arg_Traits_T<CORBA::DefinitionKind>

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::DefinitionKind \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::IRObject>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::IRObject, \
        TAO::Objref_Traits<CORBA::IRObject> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::IRObject, \
        TAO::Objref_Traits<CORBA::IRObject> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::IRObject>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::IRObject \
      >

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Contained>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Contained_ptr, \
        CORBA::Contained_var, \
        CORBA::Contained_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED_DESCRIPTION__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Contained::Description>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::Contained::Description, \
        CORBA::Contained::Description_var, \
        CORBA::Contained::Description_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::Contained::Description \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::Contained::Description \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::Contained::Description, \
        CORBA::Contained::Description_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::Contained::Description \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::Container_ptr \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::Contained>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::Contained, \
        TAO::Objref_Traits<CORBA::Contained> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::Contained, \
        TAO::Objref_Traits<CORBA::Contained> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::Contained>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::Contained \
      >

#if !defined (_CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_REPOSITORY__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Repository>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Repository_ptr, \
        CORBA::Repository_var, \
        CORBA::Repository_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Container>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Container_ptr, \
        CORBA::Container_var, \
        CORBA::Container_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::In_Basic_Argument_T< \
        CORBA::DefinitionKind \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::Container::Description, \
        CORBA::Container::Description_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::Container::Description \
      >

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Container::DescriptionSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::DescriptionSeq_var, \
        CORBA::Container::DescriptionSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::Description \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::Container::DescriptionSeq, \
        CORBA::Container::DescriptionSeq_var, \
        CORBA::Container::Description \
      >

#if !defined (_CORBA_CONTAINER_DESCRIPTIONSEQ_CS_)
#define _CORBA_CONTAINER_DESCRIPTIONSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::Container::Description \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::Container::DescriptionSeq \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::IDLType_ptr \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::StructMemberSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::UnionMemberSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::EnumMemberSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::InterfaceDefSeq \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::ValueDef_ptr \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ValueDefSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::InitializerSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::AbstractInterfaceDefSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ExtInitializerSeq \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::Container>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::Container, \
        TAO::Objref_Traits<CORBA::Container> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::Container, \
        TAO::Objref_Traits<CORBA::Container> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::Container>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::Container \
      >

#if !defined (_CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_MODULEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ModuleDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ModuleDef_ptr, \
        CORBA::ModuleDef_var, \
        CORBA::ModuleDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONSTANTDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ConstantDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ConstantDef_ptr, \
        CORBA::ConstantDef_var, \
        CORBA::ConstantDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::IDLType>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::IDLType_ptr, \
        CORBA::IDLType_var, \
        CORBA::IDLType_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::IDLType>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::IDLType, \
        TAO::Objref_Traits<CORBA::IDLType> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::IDLType, \
        TAO::Objref_Traits<CORBA::IDLType> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::IDLType>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::IDLType \
      >

#if !defined (_CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::StructDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::StructDef_ptr, \
        CORBA::StructDef_var, \
        CORBA::StructDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::UnionDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::UnionDef_ptr, \
        CORBA::UnionDef_var, \
        CORBA::UnionDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::EnumDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::EnumDef_ptr, \
        CORBA::EnumDef_var, \
        CORBA::EnumDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ALIASDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::AliasDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::AliasDef_ptr, \
        CORBA::AliasDef_var, \
        CORBA::AliasDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InterfaceDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::InterfaceDef_ptr, \
        CORBA::InterfaceDef_var, \
        CORBA::InterfaceDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InterfaceDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::InterfaceDefSeq, \
        CORBA::InterfaceDefSeq_var, \
        CORBA::InterfaceDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::InterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::InterfaceDef, \
            CORBA::InterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::InterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::InterfaceDef, \
            CORBA::InterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::InterfaceDefSeq, \
        CORBA::InterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::InterfaceDef, \
            CORBA::InterfaceDef_var \
          > \
      >

#if !defined (_CORBA_INTERFACEDEFSEQ_CS_)
#define _CORBA_INTERFACEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::InterfaceDef, \
        CORBA::InterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::InterfaceDefSeq \
      >

#if !defined (_CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXCEPTIONDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExceptionDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ExceptionDef_ptr, \
        CORBA::ExceptionDef_var, \
        CORBA::ExceptionDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_NATIVEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::NativeDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::NativeDef_ptr, \
        CORBA::NativeDef_var, \
        CORBA::NativeDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ValueDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ValueDef_ptr, \
        CORBA::ValueDef_var, \
        CORBA::ValueDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ValueDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ValueDefSeq, \
        CORBA::ValueDefSeq_var, \
        CORBA::ValueDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ValueDef, \
            CORBA::ValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ValueDef, \
            CORBA::ValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ValueDefSeq, \
        CORBA::ValueDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ValueDef, \
            CORBA::ValueDef_var \
          > \
      >

#if !defined (_CORBA_VALUEDEFSEQ_CS_)
#define _CORBA_VALUEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ValueDef, \
        CORBA::ValueDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ValueDefSeq \
      >

#if !defined (_CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_VALUEBOXDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ValueBoxDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ValueBoxDef_ptr, \
        CORBA::ValueBoxDef_var, \
        CORBA::ValueBoxDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::AbstractInterfaceDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::AbstractInterfaceDef_ptr, \
        CORBA::AbstractInterfaceDef_var, \
        CORBA::AbstractInterfaceDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::AbstractInterfaceDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::AbstractInterfaceDefSeq, \
        CORBA::AbstractInterfaceDefSeq_var, \
        CORBA::AbstractInterfaceDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::AbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::AbstractInterfaceDef, \
            CORBA::AbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::AbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::AbstractInterfaceDef, \
            CORBA::AbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::AbstractInterfaceDefSeq, \
        CORBA::AbstractInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::AbstractInterfaceDef, \
            CORBA::AbstractInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_ABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_ABSTRACTINTERFACEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::AbstractInterfaceDef, \
        CORBA::AbstractInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::AbstractInterfaceDefSeq \
      >

#if !defined (_CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_LOCALINTERFACEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::LocalInterfaceDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::LocalInterfaceDef_ptr, \
        CORBA::LocalInterfaceDef_var, \
        CORBA::LocalInterfaceDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::LocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::LocalInterfaceDef, \
            CORBA::LocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::LocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::LocalInterfaceDef, \
            CORBA::LocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::LocalInterfaceDefSeq, \
        CORBA::LocalInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::LocalInterfaceDef, \
            CORBA::LocalInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_LOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_LOCALINTERFACEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::LocalInterfaceDef, \
        CORBA::LocalInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::LocalInterfaceDefSeq \
      >

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtInterfaceDef, \
            CORBA::ExtInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtInterfaceDef, \
            CORBA::ExtInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtInterfaceDefSeq, \
        CORBA::ExtInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtInterfaceDef, \
            CORBA::ExtInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_EXTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTINTERFACEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtInterfaceDef, \
        CORBA::ExtInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtInterfaceDefSeq \
      >

#if !defined (_CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTVALUEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExtValueDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ExtValueDef_ptr, \
        CORBA::ExtValueDef_var, \
        CORBA::ExtValueDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtValueDef, \
            CORBA::ExtValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtValueDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtValueDef, \
            CORBA::ExtValueDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtValueDefSeq, \
        CORBA::ExtValueDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtValueDef, \
            CORBA::ExtValueDef_var \
          > \
      >

#if !defined (_CORBA_EXTVALUEDEFSEQ_CS_)
#define _CORBA_EXTVALUEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtValueDef, \
        CORBA::ExtValueDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtValueDefSeq \
      >

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtAbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtAbstractInterfaceDef, \
            CORBA::ExtAbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtAbstractInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtAbstractInterfaceDef, \
            CORBA::ExtAbstractInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtAbstractInterfaceDefSeq, \
        CORBA::ExtAbstractInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtAbstractInterfaceDef, \
            CORBA::ExtAbstractInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTABSTRACTINTERFACEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtAbstractInterfaceDef, \
        CORBA::ExtAbstractInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtAbstractInterfaceDefSeq \
      >

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExtLocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtLocalInterfaceDef, \
            CORBA::ExtLocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtLocalInterfaceDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExtLocalInterfaceDef, \
            CORBA::ExtLocalInterfaceDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExtLocalInterfaceDefSeq, \
        CORBA::ExtLocalInterfaceDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExtLocalInterfaceDef, \
            CORBA::ExtLocalInterfaceDef_var \
          > \
      >

#if !defined (_CORBA_EXTLOCALINTERFACEDEFSEQ_CS_)
#define _CORBA_EXTLOCALINTERFACEDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExtLocalInterfaceDef, \
        CORBA::ExtLocalInterfaceDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtLocalInterfaceDefSeq \
      >

#if !defined (_CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINEDSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ContainedSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ContainedSeq, \
        CORBA::ContainedSeq_var, \
        CORBA::ContainedSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ContainedSeq, \
        TAO_Object_Manager< \
            CORBA::Contained, \
            CORBA::Contained_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ContainedSeq, \
        TAO_Object_Manager< \
            CORBA::Contained, \
            CORBA::Contained_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ContainedSeq, \
        CORBA::ContainedSeq_var, \
        TAO_Object_Manager< \
            CORBA::Contained, \
            CORBA::Contained_var \
          > \
      >

#if !defined (_CORBA_CONTAINEDSEQ_CS_)
#define _CORBA_CONTAINEDSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::Contained, \
        CORBA::Contained_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ContainedSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::StructMember, \
        CORBA::StructMember_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::StructMember \
      >

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::StructMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::StructMemberSeq, \
        CORBA::StructMemberSeq_var, \
        CORBA::StructMemberSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMember \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::StructMemberSeq, \
        CORBA::StructMemberSeq_var, \
        CORBA::StructMember \
      >

#if !defined (_CORBA_STRUCTMEMBERSEQ_CS_)
#define _CORBA_STRUCTMEMBERSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::StructMember \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::StructMemberSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::Initializer, \
        CORBA::Initializer_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::Initializer \
      >

#if !defined (_CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InitializerSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::InitializerSeq, \
        CORBA::InitializerSeq_var, \
        CORBA::InitializerSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::InitializerSeq, \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::InitializerSeq, \
        CORBA::Initializer \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::InitializerSeq, \
        CORBA::InitializerSeq_var, \
        CORBA::Initializer \
      >

#if !defined (_CORBA_INITIALIZERSEQ_CS_)
#define _CORBA_INITIALIZERSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::Initializer \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::InitializerSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ExceptionDescription, \
        CORBA::ExceptionDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExceptionDescription \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExcDescriptionSeq_var, \
        CORBA::ExceptionDescription \
      >

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CS_)
#define _CORBA_EXCDESCRIPTIONSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::ExceptionDescription \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExcDescriptionSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ExtInitializer, \
        CORBA::ExtInitializer_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtInitializer \
      >

#if !defined (_CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTINITIALIZERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExtInitializerSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializerSeq_var, \
        CORBA::ExtInitializerSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializer \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::ExtInitializerSeq, \
        CORBA::ExtInitializerSeq_var, \
        CORBA::ExtInitializer \
      >

#if !defined (_CORBA_EXTINITIALIZERSEQ_CS_)
#define _CORBA_EXTINITIALIZERSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::ExtInitializer \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtInitializerSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::UnionMember, \
        CORBA::UnionMember_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::UnionMember \
      >

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::UnionMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMemberSeq_var, \
        CORBA::UnionMemberSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMember \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMemberSeq_var, \
        CORBA::UnionMember \
      >

#if !defined (_CORBA_UNIONMEMBERSEQ_CS_)
#define _CORBA_UNIONMEMBERSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::UnionMember \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::UnionMemberSeq \
      >

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::EnumMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::EnumMemberSeq, \
        CORBA::EnumMemberSeq_var, \
        CORBA::EnumMemberSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::EnumMemberSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::EnumMemberSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::EnumMemberSeq, \
        CORBA::EnumMemberSeq_var, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::EnumMemberSeq \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::TypedefDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::TypedefDef, \
        TAO::Objref_Traits<CORBA::TypedefDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::TypedefDef, \
        TAO::Objref_Traits<CORBA::TypedefDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::TypedefDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::TypedefDef \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::TypeDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::TypeDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::TypeDescription, \
        CORBA::TypeDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::TypeDescription \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

