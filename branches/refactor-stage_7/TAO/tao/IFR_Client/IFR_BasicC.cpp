// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:302


#include "IFR_BasicC.h"
#include "tao/Stub.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "IFR_BasicC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:60

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:436

#if !defined (_CORBA_ANY__ARG_TRAITS_CS_)
#define _CORBA_ANY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Any>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::Any,
            CORBA::Any_var,
            CORBA::Any_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::Contained>
    : public
        Object_Arg_Traits_T<
            CORBA::Contained_ptr,
            CORBA::Contained_var,
            CORBA::Contained_out,
            TAO::Objref_Traits<CORBA::Contained>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::IDLType>
    : public
        Object_Arg_Traits_T<
            CORBA::IDLType_ptr,
            CORBA::IDLType_var,
            CORBA::IDLType_out,
            TAO::Objref_Traits<CORBA::IDLType>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:472

#if !defined (_CORBA_INTERFACEDEF_FULLINTERFACEDESCRIPTION__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEF_FULLINTERFACEDESCRIPTION__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDef::FullInterfaceDescription>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceDef::FullInterfaceDescription,
            CORBA::InterfaceDef::FullInterfaceDescription_var,
            CORBA::InterfaceDef::FullInterfaceDescription_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceDefSeq,
            CORBA::InterfaceDefSeq_var,
            CORBA::InterfaceDefSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_STRUCTMEMBERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::StructMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::StructMemberSeq,
            CORBA::StructMemberSeq_var,
            CORBA::StructMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_EXCDESCRIPTIONSEQ__ARG_TRAITS_CS_)
#define _CORBA_EXCDESCRIPTIONSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExcDescriptionSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExcDescriptionSeq,
            CORBA::ExcDescriptionSeq_var,
            CORBA::ExcDescriptionSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_UNIONMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_UNIONMEMBERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::UnionMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::UnionMemberSeq,
            CORBA::UnionMemberSeq_var,
            CORBA::UnionMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_ENUMMEMBERSEQ__ARG_TRAITS_CS_)
#define _CORBA_ENUMMEMBERSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::EnumMemberSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::EnumMemberSeq,
            CORBA::EnumMemberSeq_var,
            CORBA::EnumMemberSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_PRIMITIVEDEF__ARG_TRAITS_CS_)
#define _CORBA_PRIMITIVEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::PrimitiveDef>
    : public
        Object_Arg_Traits_T<
            CORBA::PrimitiveDef_ptr,
            CORBA::PrimitiveDef_var,
            CORBA::PrimitiveDef_out,
            TAO::Objref_Traits<CORBA::PrimitiveDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_STRINGDEF__ARG_TRAITS_CS_)
#define _CORBA_STRINGDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::StringDef>
    : public
        Object_Arg_Traits_T<
            CORBA::StringDef_ptr,
            CORBA::StringDef_var,
            CORBA::StringDef_out,
            TAO::Objref_Traits<CORBA::StringDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCEDEF__ARG_TRAITS_CS_)
#define _CORBA_SEQUENCEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::SequenceDef>
    : public
        Object_Arg_Traits_T<
            CORBA::SequenceDef_ptr,
            CORBA::SequenceDef_var,
            CORBA::SequenceDef_out,
            TAO::Objref_Traits<CORBA::SequenceDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ARRAYDEF__ARG_TRAITS_CS_)
#define _CORBA_ARRAYDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ArrayDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ArrayDef_ptr,
            CORBA::ArrayDef_var,
            CORBA::ArrayDef_out,
            TAO::Objref_Traits<CORBA::ArrayDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_WSTRINGDEF__ARG_TRAITS_CS_)
#define _CORBA_WSTRINGDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::WstringDef>
    : public
        Object_Arg_Traits_T<
            CORBA::WstringDef_ptr,
            CORBA::WstringDef_var,
            CORBA::WstringDef_out,
            TAO::Objref_Traits<CORBA::WstringDef>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_FIXEDDEF__ARG_TRAITS_CS_)
#define _CORBA_FIXEDDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::FixedDef>
    : public
        Object_Arg_Traits_T<
            CORBA::FixedDef_ptr,
            CORBA::FixedDef_var,
            CORBA::FixedDef_out,
            TAO::Objref_Traits<CORBA::FixedDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:391

#if !defined (_CORBA_PRIMITIVEKIND__ARG_TRAITS_CS_)
#define _CORBA_PRIMITIVEKIND__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::PrimitiveKind>
    : public
        Basic_Arg_Traits_T<
            CORBA::PrimitiveKind
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_CS_)
#define _CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExceptionDefSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExceptionDefSeq,
            CORBA::ExceptionDefSeq_var,
            CORBA::ExceptionDefSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:391

#if !defined (_CORBA_ATTRIBUTEMODE__ARG_TRAITS_CS_)
#define _CORBA_ATTRIBUTEMODE__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AttributeMode>
    : public
        Basic_Arg_Traits_T<
            CORBA::AttributeMode
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_ATTRIBUTEDEF__ARG_TRAITS_CS_)
#define _CORBA_ATTRIBUTEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::AttributeDef>
    : public
        Object_Arg_Traits_T<
            CORBA::AttributeDef_ptr,
            CORBA::AttributeDef_var,
            CORBA::AttributeDef_out,
            TAO::Objref_Traits<CORBA::AttributeDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:472

#if !defined (_CORBA_EXTATTRIBUTEDESCRIPTION__ARG_TRAITS_CS_)
#define _CORBA_EXTATTRIBUTEDESCRIPTION__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtAttributeDescription>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ExtAttributeDescription,
            CORBA::ExtAttributeDescription_var,
            CORBA::ExtAttributeDescription_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_EXTATTRIBUTEDEF__ARG_TRAITS_CS_)
#define _CORBA_EXTATTRIBUTEDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ExtAttributeDef>
    : public
        Object_Arg_Traits_T<
            CORBA::ExtAttributeDef_ptr,
            CORBA::ExtAttributeDef_var,
            CORBA::ExtAttributeDef_out,
            TAO::Objref_Traits<CORBA::ExtAttributeDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:391

#if !defined (_CORBA_OPERATIONMODE__ARG_TRAITS_CS_)
#define _CORBA_OPERATIONMODE__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::OperationMode>
    : public
        Basic_Arg_Traits_T<
            CORBA::OperationMode
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_CS_)
#define _CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ParDescriptionSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ParDescriptionSeq,
            CORBA::ParDescriptionSeq_var,
            CORBA::ParDescriptionSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:263

#if !defined (_CORBA_CONTEXTIDSEQ__ARG_TRAITS_CS_)
#define _CORBA_CONTEXTIDSEQ__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::ContextIdSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ContextIdSeq,
            CORBA::ContextIdSeq_var,
            CORBA::ContextIdSeq_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_OPERATIONDEF__ARG_TRAITS_CS_)
#define _CORBA_OPERATIONDEF__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::OperationDef>
    : public
        Object_Arg_Traits_T<
            CORBA::OperationDef_ptr,
            CORBA::OperationDef_var,
            CORBA::OperationDef_out,
            TAO::Objref_Traits<CORBA::OperationDef>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:472

#if !defined (_CORBA_INTERFACEATTREXTENSION_EXTFULLINTERFACEDESCRIPTION__ARG_TRAITS_CS_)
#define _CORBA_INTERFACEATTREXTENSION_EXTFULLINTERFACEDESCRIPTION__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_IFR_Client_Export Arg_Traits<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription,
            CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_var,
            CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_out
          >
  {
  };

#endif /* end #if !defined */
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_PrimitiveKind[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5072), 
  ACE_NTOHL (0x696d6974), 
  ACE_NTOHL (0x6976654b), 
  ACE_NTOHL (0x696e643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/PrimitiveKind:1.0
  14,
  ACE_NTOHL (0x5072696d), 
  ACE_NTOHL (0x69746976), 
  ACE_NTOHL (0x654b696e), 
  ACE_NTOHL (0x64000000),  // name = PrimitiveKind
  22, // member count
  8,
  ACE_NTOHL (0x706b5f6e), 
  ACE_NTOHL (0x756c6c00),  // name = pk_null
  8,
  ACE_NTOHL (0x706b5f76), 
  ACE_NTOHL (0x6f696400),  // name = pk_void
  9,
  ACE_NTOHL (0x706b5f73), 
  ACE_NTOHL (0x686f7274), 
  ACE_NTOHL (0x0),  // name = pk_short
  8,
  ACE_NTOHL (0x706b5f6c), 
  ACE_NTOHL (0x6f6e6700),  // name = pk_long
  10,
  ACE_NTOHL (0x706b5f75), 
  ACE_NTOHL (0x73686f72), 
  ACE_NTOHL (0x74000000),  // name = pk_ushort
  9,
  ACE_NTOHL (0x706b5f75), 
  ACE_NTOHL (0x6c6f6e67), 
  ACE_NTOHL (0x0),  // name = pk_ulong
  9,
  ACE_NTOHL (0x706b5f66), 
  ACE_NTOHL (0x6c6f6174), 
  ACE_NTOHL (0x0),  // name = pk_float
  10,
  ACE_NTOHL (0x706b5f64), 
  ACE_NTOHL (0x6f75626c), 
  ACE_NTOHL (0x65000000),  // name = pk_double
  11,
  ACE_NTOHL (0x706b5f62), 
  ACE_NTOHL (0x6f6f6c65), 
  ACE_NTOHL (0x616e0000),  // name = pk_boolean
  8,
  ACE_NTOHL (0x706b5f63), 
  ACE_NTOHL (0x68617200),  // name = pk_char
  9,
  ACE_NTOHL (0x706b5f6f), 
  ACE_NTOHL (0x63746574), 
  ACE_NTOHL (0x0),  // name = pk_octet
  7,
  ACE_NTOHL (0x706b5f61), 
  ACE_NTOHL (0x6e790000),  // name = pk_any
  12,
  ACE_NTOHL (0x706b5f54), 
  ACE_NTOHL (0x79706543), 
  ACE_NTOHL (0x6f646500),  // name = pk_TypeCode
  13,
  ACE_NTOHL (0x706b5f50), 
  ACE_NTOHL (0x72696e63), 
  ACE_NTOHL (0x6970616c), 
  ACE_NTOHL (0x0),  // name = pk_Principal
  10,
  ACE_NTOHL (0x706b5f73), 
  ACE_NTOHL (0x7472696e), 
  ACE_NTOHL (0x67000000),  // name = pk_string
  10,
  ACE_NTOHL (0x706b5f6f), 
  ACE_NTOHL (0x626a7265), 
  ACE_NTOHL (0x66000000),  // name = pk_objref
  12,
  ACE_NTOHL (0x706b5f6c), 
  ACE_NTOHL (0x6f6e676c), 
  ACE_NTOHL (0x6f6e6700),  // name = pk_longlong
  13,
  ACE_NTOHL (0x706b5f75), 
  ACE_NTOHL (0x6c6f6e67), 
  ACE_NTOHL (0x6c6f6e67), 
  ACE_NTOHL (0x0),  // name = pk_ulonglong
  14,
  ACE_NTOHL (0x706b5f6c), 
  ACE_NTOHL (0x6f6e6764), 
  ACE_NTOHL (0x6f75626c), 
  ACE_NTOHL (0x65000000),  // name = pk_longdouble
  9,
  ACE_NTOHL (0x706b5f77), 
  ACE_NTOHL (0x63686172), 
  ACE_NTOHL (0x0),  // name = pk_wchar
  11,
  ACE_NTOHL (0x706b5f77), 
  ACE_NTOHL (0x73747269), 
  ACE_NTOHL (0x6e670000),  // name = pk_wstring
  14,
  ACE_NTOHL (0x706b5f76), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x5f626173), 
  ACE_NTOHL (0x65000000),  // name = pk_value_base
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_PrimitiveKind (
    CORBA::tk_enum,
    sizeof (_oc_CORBA_PrimitiveKind),
    (char *) &_oc_CORBA_PrimitiveKind,
    0,
    sizeof (CORBA::PrimitiveKind)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_PrimitiveKind =
    &_tc_TAO_tc_CORBA_PrimitiveKind;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::Repository.

CORBA::Repository_ptr
TAO::Objref_Traits<CORBA::Repository>::tao_duplicate (
    CORBA::Repository_ptr p
  )
{
  return CORBA::Repository::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::Repository>::tao_release (
    CORBA::Repository_ptr p
  )
{
  CORBA::release (p);
}

CORBA::Repository_ptr
TAO::Objref_Traits<CORBA::Repository>::tao_nil (void)
{
  return CORBA::Repository::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::Repository>::tao_marshal (
    CORBA::Repository_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_Repository_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Contained_ptr CORBA::Repository::lookup_id (
    const char * search_id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Contained>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_search_id (search_id);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_search_id
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "lookup_id",
      9,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::Repository::get_canonical_typecode (
    CORBA::TypeCode_ptr tc
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::TypeCode>::in_arg_val _tao_tc (tc);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_tc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "get_canonical_typecode",
      22,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::PrimitiveDef_ptr CORBA::Repository::get_primitive (
    CORBA::PrimitiveKind kind
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::PrimitiveDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::PrimitiveKind>::in_arg_val _tao_kind (kind);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_kind
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "get_primitive",
      13,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::StringDef_ptr CORBA::Repository::create_string (
    CORBA::ULong bound
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::StringDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_bound (bound);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_bound
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "create_string",
      13,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::WstringDef_ptr CORBA::Repository::create_wstring (
    CORBA::ULong bound
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::WstringDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_bound (bound);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_bound
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "create_wstring",
      14,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::SequenceDef_ptr CORBA::Repository::create_sequence (
    CORBA::ULong bound,
    CORBA::IDLType_ptr element_type
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::SequenceDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_bound (bound);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_element_type (element_type);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_bound,
      &_tao_element_type
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "create_sequence",
      15,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ArrayDef_ptr CORBA::Repository::create_array (
    CORBA::ULong length,
    CORBA::IDLType_ptr element_type
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ArrayDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_length (length);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_element_type (element_type);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_length,
      &_tao_element_type
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "create_array",
      12,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::FixedDef_ptr CORBA::Repository::create_fixed (
    CORBA::UShort digits,
    CORBA::Short scale
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Repository_Proxy_Broker_ == 0)
    {
      CORBA_Repository_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::FixedDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::UShort>::in_arg_val _tao_digits (digits);
  TAO::Arg_Traits<CORBA::Short>::in_arg_val _tao_scale (scale);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_digits,
      &_tao_scale
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "create_fixed",
      12,
      this->the_TAO_Repository_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::Repository::Repository (int collocated)
 : the_TAO_Repository_Proxy_Broker_ (0)
{
  this->CORBA_Repository_setup_collocation (collocated);
}

void
CORBA::Repository::CORBA_Repository_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_Repository_Proxy_Broker_ =
        ::CORBA__TAO_Repository_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Container_setup_collocation (collocated);
}

CORBA::Repository::~Repository (void)
{}

void 
CORBA::Repository::_tao_any_destructor (void *_tao_void_pointer)
{
  Repository *_tao_tmp_pointer =
    ACE_static_cast (Repository *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::Repository_ptr
CORBA::Repository::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<Repository>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/Repository:1.0",
        CORBA__TAO_Repository_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::Repository_ptr
CORBA::Repository::_duplicate (Repository_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::Repository::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Repository:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::Repository::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/Repository:1.0";
}

CORBA::Boolean
CORBA::Repository::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_Repository[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5265), 
  ACE_NTOHL (0x706f7369), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Repository:1.0
    11,
  ACE_NTOHL (0x5265706f), 
  ACE_NTOHL (0x7369746f), 
  ACE_NTOHL (0x72790000),  // name = Repository
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_Repository (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_Repository),
    (char *) &_oc_CORBA_Repository,
    0,
    sizeof (CORBA::Repository)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_Repository =
    &_tc_TAO_tc_CORBA_Repository;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ModuleDef.

CORBA::ModuleDef_ptr
TAO::Objref_Traits<CORBA::ModuleDef>::tao_duplicate (
    CORBA::ModuleDef_ptr p
  )
{
  return CORBA::ModuleDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ModuleDef>::tao_release (
    CORBA::ModuleDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ModuleDef_ptr
TAO::Objref_Traits<CORBA::ModuleDef>::tao_nil (void)
{
  return CORBA::ModuleDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ModuleDef>::tao_marshal (
    CORBA::ModuleDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::ModuleDef::ModuleDef (int collocated)
 : the_TAO_ModuleDef_Proxy_Broker_ (0)
{
  this->CORBA_ModuleDef_setup_collocation (collocated);
}

void
CORBA::ModuleDef::CORBA_ModuleDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ModuleDef_Proxy_Broker_ =
        ::CORBA__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Container_setup_collocation (collocated);
  this->CORBA_Contained_setup_collocation (collocated);
}

CORBA::ModuleDef::~ModuleDef (void)
{}

void 
CORBA::ModuleDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ModuleDef *_tao_tmp_pointer =
    ACE_static_cast (ModuleDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ModuleDef_ptr
CORBA::ModuleDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ModuleDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ModuleDef:1.0",
        CORBA__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ModuleDef_ptr
CORBA::ModuleDef::_duplicate (ModuleDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ModuleDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ModuleDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ModuleDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ModuleDef:1.0";
}

CORBA::Boolean
CORBA::ModuleDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ModuleDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4d6f), 
  ACE_NTOHL (0x64756c65), 
  ACE_NTOHL (0x4465663a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ModuleDef:1.0
    10,
  ACE_NTOHL (0x4d6f6475), 
  ACE_NTOHL (0x6c654465), 
  ACE_NTOHL (0x66000000),  // name = ModuleDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ModuleDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ModuleDef),
    (char *) &_oc_CORBA_ModuleDef,
    0,
    sizeof (CORBA::ModuleDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ModuleDef =
    &_tc_TAO_tc_CORBA_ModuleDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ModuleDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4d6f), 
  ACE_NTOHL (0x64756c65), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ModuleDescription:1.0
    18,
  ACE_NTOHL (0x4d6f6475), 
  ACE_NTOHL (0x6c654465), 
  ACE_NTOHL (0x73637269), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e000000),  // name = ModuleDescription
  4, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ModuleDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ModuleDescription),
    (char *) &_oc_CORBA_ModuleDescription,
    0,
    sizeof (CORBA::ModuleDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ModuleDescription =
    &_tc_TAO_tc_CORBA_ModuleDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ModuleDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ModuleDescription *_tao_tmp_pointer =
    ACE_static_cast (ModuleDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ConstantDef.

CORBA::ConstantDef_ptr
TAO::Objref_Traits<CORBA::ConstantDef>::tao_duplicate (
    CORBA::ConstantDef_ptr p
  )
{
  return CORBA::ConstantDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ConstantDef>::tao_release (
    CORBA::ConstantDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ConstantDef_ptr
TAO::Objref_Traits<CORBA::ConstantDef>::tao_nil (void)
{
  return CORBA::ConstantDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ConstantDef>::tao_marshal (
    CORBA::ConstantDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ConstantDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::ConstantDef::type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConstantDef_Proxy_Broker_ == 0)
    {
      CORBA_ConstantDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_type",
      9,
      this->the_TAO_ConstantDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::ConstantDef::type_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConstantDef_Proxy_Broker_ == 0)
    {
      CORBA_ConstantDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_type_def",
      13,
      this->the_TAO_ConstantDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ConstantDef::type_def (
    CORBA::IDLType_ptr type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConstantDef_Proxy_Broker_ == 0)
    {
      CORBA_ConstantDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_type_def (type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_type_def",
      13,
      this->the_TAO_ConstantDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::Any * CORBA::ConstantDef::value (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConstantDef_Proxy_Broker_ == 0)
    {
      CORBA_ConstantDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::Any>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_value",
      10,
      this->the_TAO_ConstantDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ConstantDef::value (
    const CORBA::Any & value
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConstantDef_Proxy_Broker_ == 0)
    {
      CORBA_ConstantDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Any>::in_arg_val _tao_value (value);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_value",
      10,
      this->the_TAO_ConstantDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::ConstantDef::ConstantDef (int collocated)
 : the_TAO_ConstantDef_Proxy_Broker_ (0)
{
  this->CORBA_ConstantDef_setup_collocation (collocated);
}

void
CORBA::ConstantDef::CORBA_ConstantDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ConstantDef_Proxy_Broker_ =
        ::CORBA__TAO_ConstantDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation (collocated);
}

CORBA::ConstantDef::~ConstantDef (void)
{}

void 
CORBA::ConstantDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ConstantDef *_tao_tmp_pointer =
    ACE_static_cast (ConstantDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ConstantDef_ptr
CORBA::ConstantDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ConstantDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ConstantDef:1.0",
        CORBA__TAO_ConstantDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ConstantDef_ptr
CORBA::ConstantDef::_duplicate (ConstantDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ConstantDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ConstantDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ConstantDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ConstantDef:1.0";
}

CORBA::Boolean
CORBA::ConstantDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ConstantDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e737461), 
  ACE_NTOHL (0x6e744465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ConstantDef:1.0
    12,
  ACE_NTOHL (0x436f6e73), 
  ACE_NTOHL (0x74616e74), 
  ACE_NTOHL (0x44656600),  // name = ConstantDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ConstantDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ConstantDef),
    (char *) &_oc_CORBA_ConstantDef,
    0,
    sizeof (CORBA::ConstantDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ConstantDef =
    &_tc_TAO_tc_CORBA_ConstantDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ConstantDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  42,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e737461), 
  ACE_NTOHL (0x6e744465), 
  ACE_NTOHL (0x73637269), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ConstantDescription:1.0
    20,
  ACE_NTOHL (0x436f6e73), 
  ACE_NTOHL (0x74616e74), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e00),  // name = ConstantDescription
  6, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

  6,
  ACE_NTOHL (0x76616c75), 
  ACE_NTOHL (0x65000000),  // name = value
    CORBA::tk_any,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ConstantDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ConstantDescription),
    (char *) &_oc_CORBA_ConstantDescription,
    0,
    sizeof (CORBA::ConstantDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ConstantDescription =
    &_tc_TAO_tc_CORBA_ConstantDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ConstantDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ConstantDescription *_tao_tmp_pointer =
    ACE_static_cast (ConstantDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::StructDef.

CORBA::StructDef_ptr
TAO::Objref_Traits<CORBA::StructDef>::tao_duplicate (
    CORBA::StructDef_ptr p
  )
{
  return CORBA::StructDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::StructDef>::tao_release (
    CORBA::StructDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::StructDef_ptr
TAO::Objref_Traits<CORBA::StructDef>::tao_nil (void)
{
  return CORBA::StructDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::StructDef>::tao_marshal (
    CORBA::StructDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_StructDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::StructMemberSeq * CORBA::StructDef::members (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructDef_Proxy_Broker_ == 0)
    {
      CORBA_StructDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::StructMemberSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_members",
      12,
      this->the_TAO_StructDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::StructDef::members (
    const CORBA::StructMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructDef_Proxy_Broker_ == 0)
    {
      CORBA_StructDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::StructMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_members",
      12,
      this->the_TAO_StructDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::StructDef::StructDef (int collocated)
 : the_TAO_StructDef_Proxy_Broker_ (0)
{
  this->CORBA_StructDef_setup_collocation (collocated);
}

void
CORBA::StructDef::CORBA_StructDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_StructDef_Proxy_Broker_ =
        ::CORBA__TAO_StructDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_TypedefDef_setup_collocation (collocated);
  this->CORBA_Container_setup_collocation (collocated);
}

CORBA::StructDef::~StructDef (void)
{}

void 
CORBA::StructDef::_tao_any_destructor (void *_tao_void_pointer)
{
  StructDef *_tao_tmp_pointer =
    ACE_static_cast (StructDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::StructDef_ptr
CORBA::StructDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<StructDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/StructDef:1.0",
        CORBA__TAO_StructDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::StructDef_ptr
CORBA::StructDef::_duplicate (StructDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::StructDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/StructDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::StructDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/StructDef:1.0";
}

CORBA::Boolean
CORBA::StructDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_StructDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5374), 
  ACE_NTOHL (0x72756374), 
  ACE_NTOHL (0x4465663a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/StructDef:1.0
    10,
  ACE_NTOHL (0x53747275), 
  ACE_NTOHL (0x63744465), 
  ACE_NTOHL (0x66000000),  // name = StructDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_StructDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_StructDef),
    (char *) &_oc_CORBA_StructDef,
    0,
    sizeof (CORBA::StructDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_StructDef =
    &_tc_TAO_tc_CORBA_StructDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::UnionDef.

CORBA::UnionDef_ptr
TAO::Objref_Traits<CORBA::UnionDef>::tao_duplicate (
    CORBA::UnionDef_ptr p
  )
{
  return CORBA::UnionDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::UnionDef>::tao_release (
    CORBA::UnionDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::UnionDef_ptr
TAO::Objref_Traits<CORBA::UnionDef>::tao_nil (void)
{
  return CORBA::UnionDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::UnionDef>::tao_marshal (
    CORBA::UnionDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_UnionDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::UnionDef::discriminator_type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UnionDef_Proxy_Broker_ == 0)
    {
      CORBA_UnionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_discriminator_type",
      23,
      this->the_TAO_UnionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::UnionDef::discriminator_type_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UnionDef_Proxy_Broker_ == 0)
    {
      CORBA_UnionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_discriminator_type_def",
      27,
      this->the_TAO_UnionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::UnionDef::discriminator_type_def (
    CORBA::IDLType_ptr discriminator_type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UnionDef_Proxy_Broker_ == 0)
    {
      CORBA_UnionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_discriminator_type_def (discriminator_type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_discriminator_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_discriminator_type_def",
      27,
      this->the_TAO_UnionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::UnionMemberSeq * CORBA::UnionDef::members (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UnionDef_Proxy_Broker_ == 0)
    {
      CORBA_UnionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::UnionMemberSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_members",
      12,
      this->the_TAO_UnionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::UnionDef::members (
    const CORBA::UnionMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UnionDef_Proxy_Broker_ == 0)
    {
      CORBA_UnionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::UnionMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_members",
      12,
      this->the_TAO_UnionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::UnionDef::UnionDef (int collocated)
 : the_TAO_UnionDef_Proxy_Broker_ (0)
{
  this->CORBA_UnionDef_setup_collocation (collocated);
}

void
CORBA::UnionDef::CORBA_UnionDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_UnionDef_Proxy_Broker_ =
        ::CORBA__TAO_UnionDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_TypedefDef_setup_collocation (collocated);
  this->CORBA_Container_setup_collocation (collocated);
}

CORBA::UnionDef::~UnionDef (void)
{}

void 
CORBA::UnionDef::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionDef *_tao_tmp_pointer =
    ACE_static_cast (UnionDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::UnionDef_ptr
CORBA::UnionDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<UnionDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/UnionDef:1.0",
        CORBA__TAO_UnionDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::UnionDef_ptr
CORBA::UnionDef::_duplicate (UnionDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::UnionDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/UnionDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::UnionDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/UnionDef:1.0";
}

CORBA::Boolean
CORBA::UnionDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_UnionDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f556e), 
  ACE_NTOHL (0x696f6e44), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/UnionDef:1.0
    9,
  ACE_NTOHL (0x556e696f), 
  ACE_NTOHL (0x6e446566), 
  ACE_NTOHL (0x0),  // name = UnionDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_UnionDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_UnionDef),
    (char *) &_oc_CORBA_UnionDef,
    0,
    sizeof (CORBA::UnionDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_UnionDef =
    &_tc_TAO_tc_CORBA_UnionDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::EnumDef.

CORBA::EnumDef_ptr
TAO::Objref_Traits<CORBA::EnumDef>::tao_duplicate (
    CORBA::EnumDef_ptr p
  )
{
  return CORBA::EnumDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::EnumDef>::tao_release (
    CORBA::EnumDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::EnumDef_ptr
TAO::Objref_Traits<CORBA::EnumDef>::tao_nil (void)
{
  return CORBA::EnumDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::EnumDef>::tao_marshal (
    CORBA::EnumDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_EnumDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::EnumMemberSeq * CORBA::EnumDef::members (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EnumDef_Proxy_Broker_ == 0)
    {
      CORBA_EnumDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::EnumMemberSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_members",
      12,
      this->the_TAO_EnumDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::EnumDef::members (
    const CORBA::EnumMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EnumDef_Proxy_Broker_ == 0)
    {
      CORBA_EnumDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::EnumMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_members",
      12,
      this->the_TAO_EnumDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::EnumDef::EnumDef (int collocated)
 : the_TAO_EnumDef_Proxy_Broker_ (0)
{
  this->CORBA_EnumDef_setup_collocation (collocated);
}

void
CORBA::EnumDef::CORBA_EnumDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_EnumDef_Proxy_Broker_ =
        ::CORBA__TAO_EnumDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_TypedefDef_setup_collocation (collocated);
}

CORBA::EnumDef::~EnumDef (void)
{}

void 
CORBA::EnumDef::_tao_any_destructor (void *_tao_void_pointer)
{
  EnumDef *_tao_tmp_pointer =
    ACE_static_cast (EnumDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::EnumDef_ptr
CORBA::EnumDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<EnumDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/EnumDef:1.0",
        CORBA__TAO_EnumDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::EnumDef_ptr
CORBA::EnumDef::_duplicate (EnumDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::EnumDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/EnumDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::EnumDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/EnumDef:1.0";
}

CORBA::Boolean
CORBA::EnumDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_EnumDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f456e), 
  ACE_NTOHL (0x756d4465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/EnumDef:1.0
    8,
  ACE_NTOHL (0x456e756d), 
  ACE_NTOHL (0x44656600),  // name = EnumDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_EnumDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_EnumDef),
    (char *) &_oc_CORBA_EnumDef,
    0,
    sizeof (CORBA::EnumDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_EnumDef =
    &_tc_TAO_tc_CORBA_EnumDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::AliasDef.

CORBA::AliasDef_ptr
TAO::Objref_Traits<CORBA::AliasDef>::tao_duplicate (
    CORBA::AliasDef_ptr p
  )
{
  return CORBA::AliasDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::AliasDef>::tao_release (
    CORBA::AliasDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::AliasDef_ptr
TAO::Objref_Traits<CORBA::AliasDef>::tao_nil (void)
{
  return CORBA::AliasDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::AliasDef>::tao_marshal (
    CORBA::AliasDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_AliasDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::AliasDef::original_type_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AliasDef_Proxy_Broker_ == 0)
    {
      CORBA_AliasDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_original_type_def",
      22,
      this->the_TAO_AliasDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::AliasDef::original_type_def (
    CORBA::IDLType_ptr original_type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AliasDef_Proxy_Broker_ == 0)
    {
      CORBA_AliasDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_original_type_def (original_type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_original_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_original_type_def",
      22,
      this->the_TAO_AliasDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::AliasDef::AliasDef (int collocated)
 : the_TAO_AliasDef_Proxy_Broker_ (0)
{
  this->CORBA_AliasDef_setup_collocation (collocated);
}

void
CORBA::AliasDef::CORBA_AliasDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_AliasDef_Proxy_Broker_ =
        ::CORBA__TAO_AliasDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_TypedefDef_setup_collocation (collocated);
}

CORBA::AliasDef::~AliasDef (void)
{}

void 
CORBA::AliasDef::_tao_any_destructor (void *_tao_void_pointer)
{
  AliasDef *_tao_tmp_pointer =
    ACE_static_cast (AliasDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::AliasDef_ptr
CORBA::AliasDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<AliasDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/AliasDef:1.0",
        CORBA__TAO_AliasDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::AliasDef_ptr
CORBA::AliasDef::_duplicate (AliasDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::AliasDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/AliasDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::AliasDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/AliasDef:1.0";
}

CORBA::Boolean
CORBA::AliasDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AliasDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f416c), 
  ACE_NTOHL (0x69617344), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AliasDef:1.0
    9,
  ACE_NTOHL (0x416c6961), 
  ACE_NTOHL (0x73446566), 
  ACE_NTOHL (0x0),  // name = AliasDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_AliasDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_AliasDef),
    (char *) &_oc_CORBA_AliasDef,
    0,
    sizeof (CORBA::AliasDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AliasDef =
    &_tc_TAO_tc_CORBA_AliasDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::NativeDef.

CORBA::NativeDef_ptr
TAO::Objref_Traits<CORBA::NativeDef>::tao_duplicate (
    CORBA::NativeDef_ptr p
  )
{
  return CORBA::NativeDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::NativeDef>::tao_release (
    CORBA::NativeDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::NativeDef_ptr
TAO::Objref_Traits<CORBA::NativeDef>::tao_nil (void)
{
  return CORBA::NativeDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::NativeDef>::tao_marshal (
    CORBA::NativeDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_NativeDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::NativeDef::NativeDef (int collocated)
 : the_TAO_NativeDef_Proxy_Broker_ (0)
{
  this->CORBA_NativeDef_setup_collocation (collocated);
}

void
CORBA::NativeDef::CORBA_NativeDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_NativeDef_Proxy_Broker_ =
        ::CORBA__TAO_NativeDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_TypedefDef_setup_collocation (collocated);
}

CORBA::NativeDef::~NativeDef (void)
{}

void 
CORBA::NativeDef::_tao_any_destructor (void *_tao_void_pointer)
{
  NativeDef *_tao_tmp_pointer =
    ACE_static_cast (NativeDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::NativeDef_ptr
CORBA::NativeDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<NativeDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/NativeDef:1.0",
        CORBA__TAO_NativeDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::NativeDef_ptr
CORBA::NativeDef::_duplicate (NativeDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::NativeDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/TypedefDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/NativeDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::NativeDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/NativeDef:1.0";
}

CORBA::Boolean
CORBA::NativeDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_NativeDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4e61), 
  ACE_NTOHL (0x74697665), 
  ACE_NTOHL (0x4465663a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/NativeDef:1.0
    10,
  ACE_NTOHL (0x4e617469), 
  ACE_NTOHL (0x76654465), 
  ACE_NTOHL (0x66000000),  // name = NativeDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_NativeDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_NativeDef),
    (char *) &_oc_CORBA_NativeDef,
    0,
    sizeof (CORBA::NativeDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_NativeDef =
    &_tc_TAO_tc_CORBA_NativeDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::PrimitiveDef.

CORBA::PrimitiveDef_ptr
TAO::Objref_Traits<CORBA::PrimitiveDef>::tao_duplicate (
    CORBA::PrimitiveDef_ptr p
  )
{
  return CORBA::PrimitiveDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::PrimitiveDef>::tao_release (
    CORBA::PrimitiveDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::PrimitiveDef_ptr
TAO::Objref_Traits<CORBA::PrimitiveDef>::tao_nil (void)
{
  return CORBA::PrimitiveDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::PrimitiveDef>::tao_marshal (
    CORBA::PrimitiveDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_PrimitiveDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::PrimitiveKind CORBA::PrimitiveDef::kind (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PrimitiveDef_Proxy_Broker_ == 0)
    {
      CORBA_PrimitiveDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::PrimitiveKind>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_kind",
      9,
      this->the_TAO_PrimitiveDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::PrimitiveDef::PrimitiveDef (int collocated)
 : the_TAO_PrimitiveDef_Proxy_Broker_ (0)
{
  this->CORBA_PrimitiveDef_setup_collocation (collocated);
}

void
CORBA::PrimitiveDef::CORBA_PrimitiveDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_PrimitiveDef_Proxy_Broker_ =
        ::CORBA__TAO_PrimitiveDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::PrimitiveDef::~PrimitiveDef (void)
{}

void 
CORBA::PrimitiveDef::_tao_any_destructor (void *_tao_void_pointer)
{
  PrimitiveDef *_tao_tmp_pointer =
    ACE_static_cast (PrimitiveDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::PrimitiveDef_ptr
CORBA::PrimitiveDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PrimitiveDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/PrimitiveDef:1.0",
        CORBA__TAO_PrimitiveDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::PrimitiveDef_ptr
CORBA::PrimitiveDef::_duplicate (PrimitiveDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::PrimitiveDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/PrimitiveDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::PrimitiveDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/PrimitiveDef:1.0";
}

CORBA::Boolean
CORBA::PrimitiveDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_PrimitiveDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5072), 
  ACE_NTOHL (0x696d6974), 
  ACE_NTOHL (0x69766544), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/PrimitiveDef:1.0
    13,
  ACE_NTOHL (0x5072696d), 
  ACE_NTOHL (0x69746976), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x0),  // name = PrimitiveDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_PrimitiveDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_PrimitiveDef),
    (char *) &_oc_CORBA_PrimitiveDef,
    0,
    sizeof (CORBA::PrimitiveDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_PrimitiveDef =
    &_tc_TAO_tc_CORBA_PrimitiveDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::StringDef.

CORBA::StringDef_ptr
TAO::Objref_Traits<CORBA::StringDef>::tao_duplicate (
    CORBA::StringDef_ptr p
  )
{
  return CORBA::StringDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::StringDef>::tao_release (
    CORBA::StringDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::StringDef_ptr
TAO::Objref_Traits<CORBA::StringDef>::tao_nil (void)
{
  return CORBA::StringDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::StringDef>::tao_marshal (
    CORBA::StringDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_StringDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::ULong CORBA::StringDef::bound (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StringDef_Proxy_Broker_ == 0)
    {
      CORBA_StringDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ULong>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_bound",
      10,
      this->the_TAO_StringDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::StringDef::bound (
    CORBA::ULong bound
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StringDef_Proxy_Broker_ == 0)
    {
      CORBA_StringDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_bound (bound);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_bound
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_bound",
      10,
      this->the_TAO_StringDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::StringDef::StringDef (int collocated)
 : the_TAO_StringDef_Proxy_Broker_ (0)
{
  this->CORBA_StringDef_setup_collocation (collocated);
}

void
CORBA::StringDef::CORBA_StringDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_StringDef_Proxy_Broker_ =
        ::CORBA__TAO_StringDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::StringDef::~StringDef (void)
{}

void 
CORBA::StringDef::_tao_any_destructor (void *_tao_void_pointer)
{
  StringDef *_tao_tmp_pointer =
    ACE_static_cast (StringDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::StringDef_ptr
CORBA::StringDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<StringDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/StringDef:1.0",
        CORBA__TAO_StringDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::StringDef_ptr
CORBA::StringDef::_duplicate (StringDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::StringDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/StringDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::StringDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/StringDef:1.0";
}

CORBA::Boolean
CORBA::StringDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_StringDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5374), 
  ACE_NTOHL (0x72696e67), 
  ACE_NTOHL (0x4465663a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/StringDef:1.0
    10,
  ACE_NTOHL (0x53747269), 
  ACE_NTOHL (0x6e674465), 
  ACE_NTOHL (0x66000000),  // name = StringDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_StringDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_StringDef),
    (char *) &_oc_CORBA_StringDef,
    0,
    sizeof (CORBA::StringDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_StringDef =
    &_tc_TAO_tc_CORBA_StringDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::WstringDef.

CORBA::WstringDef_ptr
TAO::Objref_Traits<CORBA::WstringDef>::tao_duplicate (
    CORBA::WstringDef_ptr p
  )
{
  return CORBA::WstringDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::WstringDef>::tao_release (
    CORBA::WstringDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::WstringDef_ptr
TAO::Objref_Traits<CORBA::WstringDef>::tao_nil (void)
{
  return CORBA::WstringDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::WstringDef>::tao_marshal (
    CORBA::WstringDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_WstringDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::ULong CORBA::WstringDef::bound (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_WstringDef_Proxy_Broker_ == 0)
    {
      CORBA_WstringDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ULong>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_bound",
      10,
      this->the_TAO_WstringDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::WstringDef::bound (
    CORBA::ULong bound
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_WstringDef_Proxy_Broker_ == 0)
    {
      CORBA_WstringDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_bound (bound);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_bound
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_bound",
      10,
      this->the_TAO_WstringDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::WstringDef::WstringDef (int collocated)
 : the_TAO_WstringDef_Proxy_Broker_ (0)
{
  this->CORBA_WstringDef_setup_collocation (collocated);
}

void
CORBA::WstringDef::CORBA_WstringDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_WstringDef_Proxy_Broker_ =
        ::CORBA__TAO_WstringDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::WstringDef::~WstringDef (void)
{}

void 
CORBA::WstringDef::_tao_any_destructor (void *_tao_void_pointer)
{
  WstringDef *_tao_tmp_pointer =
    ACE_static_cast (WstringDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::WstringDef_ptr
CORBA::WstringDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<WstringDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/WstringDef:1.0",
        CORBA__TAO_WstringDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::WstringDef_ptr
CORBA::WstringDef::_duplicate (WstringDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::WstringDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/WstringDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::WstringDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/WstringDef:1.0";
}

CORBA::Boolean
CORBA::WstringDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_WstringDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5773), 
  ACE_NTOHL (0x7472696e), 
  ACE_NTOHL (0x67446566), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/WstringDef:1.0
    11,
  ACE_NTOHL (0x57737472), 
  ACE_NTOHL (0x696e6744), 
  ACE_NTOHL (0x65660000),  // name = WstringDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_WstringDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_WstringDef),
    (char *) &_oc_CORBA_WstringDef,
    0,
    sizeof (CORBA::WstringDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_WstringDef =
    &_tc_TAO_tc_CORBA_WstringDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::SequenceDef.

CORBA::SequenceDef_ptr
TAO::Objref_Traits<CORBA::SequenceDef>::tao_duplicate (
    CORBA::SequenceDef_ptr p
  )
{
  return CORBA::SequenceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::SequenceDef>::tao_release (
    CORBA::SequenceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::SequenceDef_ptr
TAO::Objref_Traits<CORBA::SequenceDef>::tao_nil (void)
{
  return CORBA::SequenceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::SequenceDef>::tao_marshal (
    CORBA::SequenceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_SequenceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::ULong CORBA::SequenceDef::bound (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceDef_Proxy_Broker_ == 0)
    {
      CORBA_SequenceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ULong>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_bound",
      10,
      this->the_TAO_SequenceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::SequenceDef::bound (
    CORBA::ULong bound
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceDef_Proxy_Broker_ == 0)
    {
      CORBA_SequenceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_bound (bound);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_bound
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_bound",
      10,
      this->the_TAO_SequenceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::SequenceDef::element_type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceDef_Proxy_Broker_ == 0)
    {
      CORBA_SequenceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_element_type",
      17,
      this->the_TAO_SequenceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::SequenceDef::element_type_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceDef_Proxy_Broker_ == 0)
    {
      CORBA_SequenceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_element_type_def",
      21,
      this->the_TAO_SequenceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::SequenceDef::element_type_def (
    CORBA::IDLType_ptr element_type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceDef_Proxy_Broker_ == 0)
    {
      CORBA_SequenceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_element_type_def (element_type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_element_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_element_type_def",
      21,
      this->the_TAO_SequenceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::SequenceDef::SequenceDef (int collocated)
 : the_TAO_SequenceDef_Proxy_Broker_ (0)
{
  this->CORBA_SequenceDef_setup_collocation (collocated);
}

void
CORBA::SequenceDef::CORBA_SequenceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_SequenceDef_Proxy_Broker_ =
        ::CORBA__TAO_SequenceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::SequenceDef::~SequenceDef (void)
{}

void 
CORBA::SequenceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  SequenceDef *_tao_tmp_pointer =
    ACE_static_cast (SequenceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::SequenceDef_ptr
CORBA::SequenceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<SequenceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/SequenceDef:1.0",
        CORBA__TAO_SequenceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::SequenceDef_ptr
CORBA::SequenceDef::_duplicate (SequenceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::SequenceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/SequenceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::SequenceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/SequenceDef:1.0";
}

CORBA::Boolean
CORBA::SequenceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_SequenceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5365), 
  ACE_NTOHL (0x7175656e), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/SequenceDef:1.0
    12,
  ACE_NTOHL (0x53657175), 
  ACE_NTOHL (0x656e6365), 
  ACE_NTOHL (0x44656600),  // name = SequenceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_SequenceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_SequenceDef),
    (char *) &_oc_CORBA_SequenceDef,
    0,
    sizeof (CORBA::SequenceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_SequenceDef =
    &_tc_TAO_tc_CORBA_SequenceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ArrayDef.

CORBA::ArrayDef_ptr
TAO::Objref_Traits<CORBA::ArrayDef>::tao_duplicate (
    CORBA::ArrayDef_ptr p
  )
{
  return CORBA::ArrayDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ArrayDef>::tao_release (
    CORBA::ArrayDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ArrayDef_ptr
TAO::Objref_Traits<CORBA::ArrayDef>::tao_nil (void)
{
  return CORBA::ArrayDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ArrayDef>::tao_marshal (
    CORBA::ArrayDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ArrayDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::ULong CORBA::ArrayDef::length (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ArrayDef_Proxy_Broker_ == 0)
    {
      CORBA_ArrayDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ULong>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_length",
      11,
      this->the_TAO_ArrayDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ArrayDef::length (
    CORBA::ULong length
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ArrayDef_Proxy_Broker_ == 0)
    {
      CORBA_ArrayDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ULong>::in_arg_val _tao_length (length);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_length
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_length",
      11,
      this->the_TAO_ArrayDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::ArrayDef::element_type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ArrayDef_Proxy_Broker_ == 0)
    {
      CORBA_ArrayDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_element_type",
      17,
      this->the_TAO_ArrayDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::ArrayDef::element_type_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ArrayDef_Proxy_Broker_ == 0)
    {
      CORBA_ArrayDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_element_type_def",
      21,
      this->the_TAO_ArrayDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ArrayDef::element_type_def (
    CORBA::IDLType_ptr element_type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ArrayDef_Proxy_Broker_ == 0)
    {
      CORBA_ArrayDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_element_type_def (element_type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_element_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_element_type_def",
      21,
      this->the_TAO_ArrayDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::ArrayDef::ArrayDef (int collocated)
 : the_TAO_ArrayDef_Proxy_Broker_ (0)
{
  this->CORBA_ArrayDef_setup_collocation (collocated);
}

void
CORBA::ArrayDef::CORBA_ArrayDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ArrayDef_Proxy_Broker_ =
        ::CORBA__TAO_ArrayDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::ArrayDef::~ArrayDef (void)
{}

void 
CORBA::ArrayDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ArrayDef *_tao_tmp_pointer =
    ACE_static_cast (ArrayDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ArrayDef_ptr
CORBA::ArrayDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ArrayDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ArrayDef:1.0",
        CORBA__TAO_ArrayDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ArrayDef_ptr
CORBA::ArrayDef::_duplicate (ArrayDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ArrayDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ArrayDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ArrayDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ArrayDef:1.0";
}

CORBA::Boolean
CORBA::ArrayDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ArrayDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4172), 
  ACE_NTOHL (0x72617944), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ArrayDef:1.0
    9,
  ACE_NTOHL (0x41727261), 
  ACE_NTOHL (0x79446566), 
  ACE_NTOHL (0x0),  // name = ArrayDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ArrayDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ArrayDef),
    (char *) &_oc_CORBA_ArrayDef,
    0,
    sizeof (CORBA::ArrayDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ArrayDef =
    &_tc_TAO_tc_CORBA_ArrayDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ExceptionDef.

CORBA::ExceptionDef_ptr
TAO::Objref_Traits<CORBA::ExceptionDef>::tao_duplicate (
    CORBA::ExceptionDef_ptr p
  )
{
  return CORBA::ExceptionDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ExceptionDef>::tao_release (
    CORBA::ExceptionDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ExceptionDef_ptr
TAO::Objref_Traits<CORBA::ExceptionDef>::tao_nil (void)
{
  return CORBA::ExceptionDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ExceptionDef>::tao_marshal (
    CORBA::ExceptionDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ExceptionDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::ExceptionDef::type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExceptionDef_Proxy_Broker_ == 0)
    {
      CORBA_ExceptionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_type",
      9,
      this->the_TAO_ExceptionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::StructMemberSeq * CORBA::ExceptionDef::members (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExceptionDef_Proxy_Broker_ == 0)
    {
      CORBA_ExceptionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::StructMemberSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_members",
      12,
      this->the_TAO_ExceptionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ExceptionDef::members (
    const CORBA::StructMemberSeq & members
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExceptionDef_Proxy_Broker_ == 0)
    {
      CORBA_ExceptionDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::StructMemberSeq>::in_arg_val _tao_members (members);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_members
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_members",
      12,
      this->the_TAO_ExceptionDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::ExceptionDef::ExceptionDef (int collocated)
 : the_TAO_ExceptionDef_Proxy_Broker_ (0)
{
  this->CORBA_ExceptionDef_setup_collocation (collocated);
}

void
CORBA::ExceptionDef::CORBA_ExceptionDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ExceptionDef_Proxy_Broker_ =
        ::CORBA__TAO_ExceptionDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation (collocated);
  this->CORBA_Container_setup_collocation (collocated);
}

CORBA::ExceptionDef::~ExceptionDef (void)
{}

void 
CORBA::ExceptionDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ExceptionDef *_tao_tmp_pointer =
    ACE_static_cast (ExceptionDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ExceptionDef_ptr
CORBA::ExceptionDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ExceptionDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ExceptionDef:1.0",
        CORBA__TAO_ExceptionDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ExceptionDef_ptr
CORBA::ExceptionDef::_duplicate (ExceptionDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ExceptionDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ExceptionDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ExceptionDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ExceptionDef:1.0";
}

CORBA::Boolean
CORBA::ExceptionDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExceptionDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x63657074), 
  ACE_NTOHL (0x696f6e44), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDef:1.0
    13,
  ACE_NTOHL (0x45786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e446566), 
  ACE_NTOHL (0x0),  // name = ExceptionDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExceptionDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ExceptionDef),
    (char *) &_oc_CORBA_ExceptionDef,
    0,
    sizeof (CORBA::ExceptionDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExceptionDef =
    &_tc_TAO_tc_CORBA_ExceptionDef;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXCEPTIONDEFSEQ_CS_)
#define _CORBA_EXCEPTIONDEFSEQ_CS_

CORBA::ExceptionDefSeq::ExceptionDefSeq (void)
{}

CORBA::ExceptionDefSeq::ExceptionDefSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExceptionDef,
        CORBA::ExceptionDef_var
      >
    (max)
{}

CORBA::ExceptionDefSeq::ExceptionDefSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExceptionDef_ptr * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExceptionDef,
        CORBA::ExceptionDef_var
      >
    (max, length, buffer, release)
{}

CORBA::ExceptionDefSeq::ExceptionDefSeq (
    const ExceptionDefSeq &seq
  )
  : TAO_Unbounded_Object_Sequence<
        CORBA::ExceptionDef,
        CORBA::ExceptionDef_var
      >
    (seq)
{}

CORBA::ExceptionDefSeq::~ExceptionDefSeq (void)
{}

void CORBA::ExceptionDefSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExceptionDefSeq * _tao_tmp_pointer =
    ACE_static_cast (ExceptionDefSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExceptionDefSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x63657074), 
  ACE_NTOHL (0x696f6e44), 
  ACE_NTOHL (0x65665365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExceptionDefSeq:1.0
    16,
  ACE_NTOHL (0x45786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e446566), 
  ACE_NTOHL (0x53657100),  // name = ExceptionDefSeq
    CORBA::tk_sequence, // typecode kind
  80, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    64, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x63657074), 
      ACE_NTOHL (0x696f6e44), 
      ACE_NTOHL (0x65663a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDef:1.0
            13,
      ACE_NTOHL (0x45786365), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e446566), 
      ACE_NTOHL (0x0),  // name = ExceptionDef
      
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExceptionDefSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExceptionDefSeq),
    (char *) &_oc_CORBA_ExceptionDefSeq,
    0,
    sizeof (CORBA::ExceptionDefSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExceptionDefSeq =
    &_tc_TAO_tc_CORBA_ExceptionDefSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AttributeMode[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4174), 
  ACE_NTOHL (0x74726962), 
  ACE_NTOHL (0x7574654d), 
  ACE_NTOHL (0x6f64653a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
  14,
  ACE_NTOHL (0x41747472), 
  ACE_NTOHL (0x69627574), 
  ACE_NTOHL (0x654d6f64), 
  ACE_NTOHL (0x65000000),  // name = AttributeMode
  2, // member count
  12,
  ACE_NTOHL (0x41545452), 
  ACE_NTOHL (0x5f4e4f52), 
  ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
  14,
  ACE_NTOHL (0x41545452), 
  ACE_NTOHL (0x5f524541), 
  ACE_NTOHL (0x444f4e4c), 
  ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_AttributeMode (
    CORBA::tk_enum,
    sizeof (_oc_CORBA_AttributeMode),
    (char *) &_oc_CORBA_AttributeMode,
    0,
    sizeof (CORBA::AttributeMode)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AttributeMode =
    &_tc_TAO_tc_CORBA_AttributeMode;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::AttributeDef.

CORBA::AttributeDef_ptr
TAO::Objref_Traits<CORBA::AttributeDef>::tao_duplicate (
    CORBA::AttributeDef_ptr p
  )
{
  return CORBA::AttributeDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::AttributeDef>::tao_release (
    CORBA::AttributeDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::AttributeDef_ptr
TAO::Objref_Traits<CORBA::AttributeDef>::tao_nil (void)
{
  return CORBA::AttributeDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::AttributeDef>::tao_marshal (
    CORBA::AttributeDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_AttributeDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::AttributeDef::type (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_AttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_type",
      9,
      this->the_TAO_AttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::AttributeDef::type_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_AttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_type_def",
      13,
      this->the_TAO_AttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::AttributeDef::type_def (
    CORBA::IDLType_ptr type_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_AttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_type_def (type_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_type_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_type_def",
      13,
      this->the_TAO_AttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::AttributeMode CORBA::AttributeDef::mode (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_AttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::AttributeMode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_mode",
      9,
      this->the_TAO_AttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::AttributeDef::mode (
    CORBA::AttributeMode mode
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_AttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::AttributeMode>::in_arg_val _tao_mode (mode);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_mode
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_mode",
      9,
      this->the_TAO_AttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::AttributeDef::AttributeDef (int collocated)
 : the_TAO_AttributeDef_Proxy_Broker_ (0)
{
  this->CORBA_AttributeDef_setup_collocation (collocated);
}

void
CORBA::AttributeDef::CORBA_AttributeDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_AttributeDef_Proxy_Broker_ =
        ::CORBA__TAO_AttributeDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation (collocated);
}

CORBA::AttributeDef::~AttributeDef (void)
{}

void 
CORBA::AttributeDef::_tao_any_destructor (void *_tao_void_pointer)
{
  AttributeDef *_tao_tmp_pointer =
    ACE_static_cast (AttributeDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::AttributeDef_ptr
CORBA::AttributeDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<AttributeDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/AttributeDef:1.0",
        CORBA__TAO_AttributeDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::AttributeDef_ptr
CORBA::AttributeDef::_duplicate (AttributeDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::AttributeDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/AttributeDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::AttributeDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/AttributeDef:1.0";
}

CORBA::Boolean
CORBA::AttributeDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AttributeDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4174), 
  ACE_NTOHL (0x74726962), 
  ACE_NTOHL (0x75746544), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDef:1.0
    13,
  ACE_NTOHL (0x41747472), 
  ACE_NTOHL (0x69627574), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x0),  // name = AttributeDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_AttributeDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_AttributeDef),
    (char *) &_oc_CORBA_AttributeDef,
    0,
    sizeof (CORBA::AttributeDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AttributeDef =
    &_tc_TAO_tc_CORBA_AttributeDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AttributeDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4174), 
  ACE_NTOHL (0x74726962), 
  ACE_NTOHL (0x75746544), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDescription:1.0
    21,
  ACE_NTOHL (0x41747472), 
  ACE_NTOHL (0x69627574), 
  ACE_NTOHL (0x65446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = AttributeDescription
  6, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

  5,
  ACE_NTOHL (0x6d6f6465), 
  ACE_NTOHL (0x0),  // name = mode
    CORBA::tk_enum, // typecode kind
  104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
    36,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4174), 
    ACE_NTOHL (0x74726962), 
    ACE_NTOHL (0x7574654d), 
    ACE_NTOHL (0x6f64653a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
    14,
    ACE_NTOHL (0x41747472), 
    ACE_NTOHL (0x69627574), 
    ACE_NTOHL (0x654d6f64), 
    ACE_NTOHL (0x65000000),  // name = AttributeMode
    2, // member count
    12,
    ACE_NTOHL (0x41545452), 
    ACE_NTOHL (0x5f4e4f52), 
    ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
    14,
    ACE_NTOHL (0x41545452), 
    ACE_NTOHL (0x5f524541), 
    ACE_NTOHL (0x444f4e4c), 
    ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
    
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_AttributeDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_AttributeDescription),
    (char *) &_oc_CORBA_AttributeDescription,
    0,
    sizeof (CORBA::AttributeDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AttributeDescription =
    &_tc_TAO_tc_CORBA_AttributeDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::AttributeDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  AttributeDescription *_tao_tmp_pointer =
    ACE_static_cast (AttributeDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtAttributeDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  46,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74417474), 
  ACE_NTOHL (0x72696275), 
  ACE_NTOHL (0x74654465), 
  ACE_NTOHL (0x73637269), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAttributeDescription:1.0
    24,
  ACE_NTOHL (0x45787441), 
  ACE_NTOHL (0x74747269), 
  ACE_NTOHL (0x62757465), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e00),  // name = ExtAttributeDescription
  8, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

  5,
  ACE_NTOHL (0x6d6f6465), 
  ACE_NTOHL (0x0),  // name = mode
    CORBA::tk_enum, // typecode kind
  104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
    36,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4174), 
    ACE_NTOHL (0x74726962), 
    ACE_NTOHL (0x7574654d), 
    ACE_NTOHL (0x6f64653a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
    14,
    ACE_NTOHL (0x41747472), 
    ACE_NTOHL (0x69627574), 
    ACE_NTOHL (0x654d6f64), 
    ACE_NTOHL (0x65000000),  // name = AttributeMode
    2, // member count
    12,
    ACE_NTOHL (0x41545452), 
    ACE_NTOHL (0x5f4e4f52), 
    ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
    14,
    ACE_NTOHL (0x41545452), 
    ACE_NTOHL (0x5f524541), 
    ACE_NTOHL (0x444f4e4c), 
    ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
    
  15,
  ACE_NTOHL (0x6765745f), 
  ACE_NTOHL (0x65786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e730000),  // name = get_exceptions
    CORBA::tk_alias, // typecode kind for typedefs
  556, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    40,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4578), 
    ACE_NTOHL (0x63446573), 
    ACE_NTOHL (0x63726970), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x5365713a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
        18,
    ACE_NTOHL (0x45786344), 
    ACE_NTOHL (0x65736372), 
    ACE_NTOHL (0x69707469), 
    ACE_NTOHL (0x6f6e5365), 
    ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    476, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      460, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63657074), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                21,
        ACE_NTOHL (0x45786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = ExceptionDescription
        5, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,


      0U,


  15,
  ACE_NTOHL (0x7075745f), 
  ACE_NTOHL (0x65786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e730000),  // name = put_exceptions
    CORBA::tk_alias, // typecode kind for typedefs
  556, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    40,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4578), 
    ACE_NTOHL (0x63446573), 
    ACE_NTOHL (0x63726970), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x5365713a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
        18,
    ACE_NTOHL (0x45786344), 
    ACE_NTOHL (0x65736372), 
    ACE_NTOHL (0x69707469), 
    ACE_NTOHL (0x6f6e5365), 
    ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    476, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      460, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63657074), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                21,
        ACE_NTOHL (0x45786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = ExceptionDescription
        5, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,


      0U,


};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtAttributeDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ExtAttributeDescription),
    (char *) &_oc_CORBA_ExtAttributeDescription,
    0,
    sizeof (CORBA::ExtAttributeDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtAttributeDescription =
    &_tc_TAO_tc_CORBA_ExtAttributeDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ExtAttributeDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ExtAttributeDescription *_tao_tmp_pointer =
    ACE_static_cast (ExtAttributeDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ExtAttributeDef.

CORBA::ExtAttributeDef_ptr
TAO::Objref_Traits<CORBA::ExtAttributeDef>::tao_duplicate (
    CORBA::ExtAttributeDef_ptr p
  )
{
  return CORBA::ExtAttributeDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ExtAttributeDef>::tao_release (
    CORBA::ExtAttributeDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ExtAttributeDef_ptr
TAO::Objref_Traits<CORBA::ExtAttributeDef>::tao_nil (void)
{
  return CORBA::ExtAttributeDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ExtAttributeDef>::tao_marshal (
    CORBA::ExtAttributeDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ExtAttributeDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExcDescriptionSeq * CORBA::ExtAttributeDef::get_exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExtAttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_ExtAttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExcDescriptionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_get_exceptions",
      19,
      this->the_TAO_ExtAttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ExtAttributeDef::get_exceptions (
    const CORBA::ExcDescriptionSeq & get_exceptions
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExtAttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_ExtAttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ExcDescriptionSeq>::in_arg_val _tao_get_exceptions (get_exceptions);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_get_exceptions
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_get_exceptions",
      19,
      this->the_TAO_ExtAttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExcDescriptionSeq * CORBA::ExtAttributeDef::set_exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExtAttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_ExtAttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExcDescriptionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_set_exceptions",
      19,
      this->the_TAO_ExtAttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::ExtAttributeDef::set_exceptions (
    const CORBA::ExcDescriptionSeq & set_exceptions
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExtAttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_ExtAttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ExcDescriptionSeq>::in_arg_val _tao_set_exceptions (set_exceptions);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_set_exceptions
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_set_exceptions",
      19,
      this->the_TAO_ExtAttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExtAttributeDescription * CORBA::ExtAttributeDef::describe_attribute (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ExtAttributeDef_Proxy_Broker_ == 0)
    {
      CORBA_ExtAttributeDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExtAttributeDescription>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "describe_attribute",
      18,
      this->the_TAO_ExtAttributeDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::ExtAttributeDef::ExtAttributeDef (int collocated)
 : the_TAO_ExtAttributeDef_Proxy_Broker_ (0)
{
  this->CORBA_ExtAttributeDef_setup_collocation (collocated);
}

void
CORBA::ExtAttributeDef::CORBA_ExtAttributeDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ExtAttributeDef_Proxy_Broker_ =
        ::CORBA__TAO_ExtAttributeDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_AttributeDef_setup_collocation (collocated);
}

CORBA::ExtAttributeDef::~ExtAttributeDef (void)
{}

void 
CORBA::ExtAttributeDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ExtAttributeDef *_tao_tmp_pointer =
    ACE_static_cast (ExtAttributeDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ExtAttributeDef_ptr
CORBA::ExtAttributeDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ExtAttributeDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ExtAttributeDef:1.0",
        CORBA__TAO_ExtAttributeDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ExtAttributeDef_ptr
CORBA::ExtAttributeDef::_duplicate (ExtAttributeDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ExtAttributeDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/AttributeDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ExtAttributeDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ExtAttributeDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ExtAttributeDef:1.0";
}

CORBA::Boolean
CORBA::ExtAttributeDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtAttributeDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74417474), 
  ACE_NTOHL (0x72696275), 
  ACE_NTOHL (0x74654465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAttributeDef:1.0
    16,
  ACE_NTOHL (0x45787441), 
  ACE_NTOHL (0x74747269), 
  ACE_NTOHL (0x62757465), 
  ACE_NTOHL (0x44656600),  // name = ExtAttributeDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtAttributeDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ExtAttributeDef),
    (char *) &_oc_CORBA_ExtAttributeDef,
    0,
    sizeof (CORBA::ExtAttributeDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtAttributeDef =
    &_tc_TAO_tc_CORBA_ExtAttributeDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_OperationMode[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4f70), 
  ACE_NTOHL (0x65726174), 
  ACE_NTOHL (0x696f6e4d), 
  ACE_NTOHL (0x6f64653a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
  14,
  ACE_NTOHL (0x4f706572), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e4d6f64), 
  ACE_NTOHL (0x65000000),  // name = OperationMode
  2, // member count
  10,
  ACE_NTOHL (0x4f505f4e), 
  ACE_NTOHL (0x4f524d41), 
  ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
  10,
  ACE_NTOHL (0x4f505f4f), 
  ACE_NTOHL (0x4e455741), 
  ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_OperationMode (
    CORBA::tk_enum,
    sizeof (_oc_CORBA_OperationMode),
    (char *) &_oc_CORBA_OperationMode,
    0,
    sizeof (CORBA::OperationMode)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_OperationMode =
    &_tc_TAO_tc_CORBA_OperationMode;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ParameterDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5061), 
  ACE_NTOHL (0x72616d65), 
  ACE_NTOHL (0x74657244), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
    21,
  ACE_NTOHL (0x50617261), 
  ACE_NTOHL (0x6d657465), 
  ACE_NTOHL (0x72446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = ParameterDescription
  4, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

  9,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x5f646566), 
  ACE_NTOHL (0x0),  // name = type_def
    CORBA::tk_objref, // typecode kind
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    30,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4944), 
    ACE_NTOHL (0x4c547970), 
    ACE_NTOHL (0x653a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
        8,
    ACE_NTOHL (0x49444c54), 
    ACE_NTOHL (0x79706500),  // name = IDLType
    
  5,
  ACE_NTOHL (0x6d6f6465), 
  ACE_NTOHL (0x0),  // name = mode
    CORBA::tk_enum, // typecode kind
  116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
    36,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5061), 
    ACE_NTOHL (0x72616d65), 
    ACE_NTOHL (0x7465724d), 
    ACE_NTOHL (0x6f64653a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
    14,
    ACE_NTOHL (0x50617261), 
    ACE_NTOHL (0x6d657465), 
    ACE_NTOHL (0x724d6f64), 
    ACE_NTOHL (0x65000000),  // name = ParameterMode
    3, // member count
    9,
    ACE_NTOHL (0x50415241), 
    ACE_NTOHL (0x4d5f494e), 
    ACE_NTOHL (0x0),  // name = PARAM_IN
    10,
    ACE_NTOHL (0x50415241), 
    ACE_NTOHL (0x4d5f4f55), 
    ACE_NTOHL (0x54000000),  // name = PARAM_OUT
    12,
    ACE_NTOHL (0x50415241), 
    ACE_NTOHL (0x4d5f494e), 
    ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
    
};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ParameterDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_ParameterDescription),
    (char *) &_oc_CORBA_ParameterDescription,
    0,
    sizeof (CORBA::ParameterDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ParameterDescription =
    &_tc_TAO_tc_CORBA_ParameterDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::ParameterDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ParameterDescription *_tao_tmp_pointer =
    ACE_static_cast (ParameterDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_PARDESCRIPTIONSEQ_CS_)
#define _CORBA_PARDESCRIPTIONSEQ_CS_

CORBA::ParDescriptionSeq::ParDescriptionSeq (void)
{}

CORBA::ParDescriptionSeq::ParDescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::ParameterDescription
      >
    (max)
{}

CORBA::ParDescriptionSeq::ParDescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ParameterDescription * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::ParameterDescription
      >
    (max, length, buffer, release)
{}

CORBA::ParDescriptionSeq::ParDescriptionSeq (
    const ParDescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::ParameterDescription
      >
    (seq)
{}

CORBA::ParDescriptionSeq::~ParDescriptionSeq (void)
{}

void CORBA::ParDescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ParDescriptionSeq * _tao_tmp_pointer =
    ACE_static_cast (ParDescriptionSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ParDescriptionSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5061), 
  ACE_NTOHL (0x72446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x5365713a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
    18,
  ACE_NTOHL (0x50617244), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e5365), 
  ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
    CORBA::tk_sequence, // typecode kind
  416, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    400, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      43,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5061), 
      ACE_NTOHL (0x72616d65), 
      ACE_NTOHL (0x74657244), 
      ACE_NTOHL (0x65736372), 
      ACE_NTOHL (0x69707469), 
      ACE_NTOHL (0x6f6e3a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
            21,
      ACE_NTOHL (0x50617261), 
      ACE_NTOHL (0x6d657465), 
      ACE_NTOHL (0x72446573), 
      ACE_NTOHL (0x63726970), 
      ACE_NTOHL (0x74696f6e), 
      ACE_NTOHL (0x0),  // name = ParameterDescription
      4, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      5,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x0),  // name = type
            CORBA::tk_TypeCode,

      9,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x5f646566), 
      ACE_NTOHL (0x0),  // name = type_def
            CORBA::tk_objref, // typecode kind
      52, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        30,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4944), 
        ACE_NTOHL (0x4c547970), 
        ACE_NTOHL (0x653a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                8,
        ACE_NTOHL (0x49444c54), 
        ACE_NTOHL (0x79706500),  // name = IDLType
        
      5,
      ACE_NTOHL (0x6d6f6465), 
      ACE_NTOHL (0x0),  // name = mode
            CORBA::tk_enum, // typecode kind
      116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
        36,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5061), 
        ACE_NTOHL (0x72616d65), 
        ACE_NTOHL (0x7465724d), 
        ACE_NTOHL (0x6f64653a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
        14,
        ACE_NTOHL (0x50617261), 
        ACE_NTOHL (0x6d657465), 
        ACE_NTOHL (0x724d6f64), 
        ACE_NTOHL (0x65000000),  // name = ParameterMode
        3, // member count
        9,
        ACE_NTOHL (0x50415241), 
        ACE_NTOHL (0x4d5f494e), 
        ACE_NTOHL (0x0),  // name = PARAM_IN
        10,
        ACE_NTOHL (0x50415241), 
        ACE_NTOHL (0x4d5f4f55), 
        ACE_NTOHL (0x54000000),  // name = PARAM_OUT
        12,
        ACE_NTOHL (0x50415241), 
        ACE_NTOHL (0x4d5f494e), 
        ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
        

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ParDescriptionSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ParDescriptionSeq),
    (char *) &_oc_CORBA_ParDescriptionSeq,
    0,
    sizeof (CORBA::ParDescriptionSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ParDescriptionSeq =
    &_tc_TAO_tc_CORBA_ParDescriptionSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ContextIdentifier[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746578), 
  ACE_NTOHL (0x74496465), 
  ACE_NTOHL (0x6e746966), 
  ACE_NTOHL (0x6965723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
    18,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x65787449), 
  ACE_NTOHL (0x64656e74), 
  ACE_NTOHL (0x69666965), 
  ACE_NTOHL (0x72000000),  // name = ContextIdentifier
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ContextIdentifier (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ContextIdentifier),
    (char *) &_oc_CORBA_ContextIdentifier,
    0,
    sizeof (CORBA::ContextIdentifier)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ContextIdentifier =
    &_tc_TAO_tc_CORBA_ContextIdentifier;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_CONTEXTIDSEQ_CS_)
#define _CORBA_CONTEXTIDSEQ_CS_

CORBA::ContextIdSeq::ContextIdSeq (void)
{}

CORBA::ContextIdSeq::ContextIdSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_String_Sequence
    (max)
{}

CORBA::ContextIdSeq::ContextIdSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    char * * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_String_Sequence
    (max, length, buffer, release)
{}

CORBA::ContextIdSeq::ContextIdSeq (
    const ContextIdSeq &seq
  )
  : TAO_Unbounded_String_Sequence
    (seq)
{}

CORBA::ContextIdSeq::~ContextIdSeq (void)
{}

void CORBA::ContextIdSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ContextIdSeq * _tao_tmp_pointer =
    ACE_static_cast (ContextIdSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ContextIdSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f436f), 
  ACE_NTOHL (0x6e746578), 
  ACE_NTOHL (0x74496453), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
    13,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x65787449), 
  ACE_NTOHL (0x64536571), 
  ACE_NTOHL (0x0),  // name = ContextIdSeq
    CORBA::tk_sequence, // typecode kind
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_alias, // typecode kind for typedefs
    148, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      40,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f436f), 
      ACE_NTOHL (0x6e746578), 
      ACE_NTOHL (0x74496465), 
      ACE_NTOHL (0x6e746966), 
      ACE_NTOHL (0x6965723a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
            18,
      ACE_NTOHL (0x436f6e74), 
      ACE_NTOHL (0x65787449), 
      ACE_NTOHL (0x64656e74), 
      ACE_NTOHL (0x69666965), 
      ACE_NTOHL (0x72000000),  // name = ContextIdentifier
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ContextIdSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ContextIdSeq),
    (char *) &_oc_CORBA_ContextIdSeq,
    0,
    sizeof (CORBA::ContextIdSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ContextIdSeq =
    &_tc_TAO_tc_CORBA_ContextIdSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::OperationDef.

CORBA::OperationDef_ptr
TAO::Objref_Traits<CORBA::OperationDef>::tao_duplicate (
    CORBA::OperationDef_ptr p
  )
{
  return CORBA::OperationDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::OperationDef>::tao_release (
    CORBA::OperationDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::OperationDef_ptr
TAO::Objref_Traits<CORBA::OperationDef>::tao_nil (void)
{
  return CORBA::OperationDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::OperationDef>::tao_marshal (
    CORBA::OperationDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_OperationDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::TypeCode_ptr CORBA::OperationDef::result (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::TypeCode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_result",
      11,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::IDLType_ptr CORBA::OperationDef::result_def (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::IDLType>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_result_def",
      15,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::OperationDef::result_def (
    CORBA::IDLType_ptr result_def
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_result_def (result_def);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_result_def
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_result_def",
      15,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ParDescriptionSeq * CORBA::OperationDef::params (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ParDescriptionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_params",
      11,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::OperationDef::params (
    const CORBA::ParDescriptionSeq & params
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ParDescriptionSeq>::in_arg_val _tao_params (params);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_params
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_params",
      11,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::OperationMode CORBA::OperationDef::mode (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::OperationMode>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_mode",
      9,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::OperationDef::mode (
    CORBA::OperationMode mode
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::OperationMode>::in_arg_val _tao_mode (mode);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_mode
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_mode",
      9,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ContextIdSeq * CORBA::OperationDef::contexts (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ContextIdSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_contexts",
      13,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::OperationDef::contexts (
    const CORBA::ContextIdSeq & contexts
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ContextIdSeq>::in_arg_val _tao_contexts (contexts);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_contexts
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_contexts",
      13,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExceptionDefSeq * CORBA::OperationDef::exceptions (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_exceptions",
      15,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::OperationDef::exceptions (
    const CORBA::ExceptionDefSeq & exceptions
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OperationDef_Proxy_Broker_ == 0)
    {
      CORBA_OperationDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions (exceptions);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_exceptions
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_exceptions",
      15,
      this->the_TAO_OperationDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA::OperationDef::OperationDef (int collocated)
 : the_TAO_OperationDef_Proxy_Broker_ (0)
{
  this->CORBA_OperationDef_setup_collocation (collocated);
}

void
CORBA::OperationDef::CORBA_OperationDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_OperationDef_Proxy_Broker_ =
        ::CORBA__TAO_OperationDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Contained_setup_collocation (collocated);
}

CORBA::OperationDef::~OperationDef (void)
{}

void 
CORBA::OperationDef::_tao_any_destructor (void *_tao_void_pointer)
{
  OperationDef *_tao_tmp_pointer =
    ACE_static_cast (OperationDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::OperationDef_ptr
CORBA::OperationDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<OperationDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/OperationDef:1.0",
        CORBA__TAO_OperationDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::OperationDef_ptr
CORBA::OperationDef::_duplicate (OperationDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::OperationDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/OperationDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::OperationDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/OperationDef:1.0";
}

CORBA::Boolean
CORBA::OperationDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_OperationDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4f70), 
  ACE_NTOHL (0x65726174), 
  ACE_NTOHL (0x696f6e44), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDef:1.0
    13,
  ACE_NTOHL (0x4f706572), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e446566), 
  ACE_NTOHL (0x0),  // name = OperationDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_OperationDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_OperationDef),
    (char *) &_oc_CORBA_OperationDef,
    0,
    sizeof (CORBA::OperationDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_OperationDef =
    &_tc_TAO_tc_CORBA_OperationDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_OperationDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4f70), 
  ACE_NTOHL (0x65726174), 
  ACE_NTOHL (0x696f6e44), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
    21,
  ACE_NTOHL (0x4f706572), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = OperationDescription
  9, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  7,
  ACE_NTOHL (0x72657375), 
  ACE_NTOHL (0x6c740000),  // name = result
    CORBA::tk_TypeCode,

  5,
  ACE_NTOHL (0x6d6f6465), 
  ACE_NTOHL (0x0),  // name = mode
    CORBA::tk_enum, // typecode kind
  100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
    36,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f70), 
    ACE_NTOHL (0x65726174), 
    ACE_NTOHL (0x696f6e4d), 
    ACE_NTOHL (0x6f64653a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
    14,
    ACE_NTOHL (0x4f706572), 
    ACE_NTOHL (0x6174696f), 
    ACE_NTOHL (0x6e4d6f64), 
    ACE_NTOHL (0x65000000),  // name = OperationMode
    2, // member count
    10,
    ACE_NTOHL (0x4f505f4e), 
    ACE_NTOHL (0x4f524d41), 
    ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
    10,
    ACE_NTOHL (0x4f505f4f), 
    ACE_NTOHL (0x4e455741), 
    ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
    
  9,
  ACE_NTOHL (0x636f6e74), 
  ACE_NTOHL (0x65787473), 
  ACE_NTOHL (0x0),  // name = contexts
    CORBA::tk_alias, // typecode kind for typedefs
  236, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f436f), 
    ACE_NTOHL (0x6e746578), 
    ACE_NTOHL (0x74496453), 
    ACE_NTOHL (0x65713a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
        13,
    ACE_NTOHL (0x436f6e74), 
    ACE_NTOHL (0x65787449), 
    ACE_NTOHL (0x64536571), 
    ACE_NTOHL (0x0),  // name = ContextIdSeq
        CORBA::tk_sequence, // typecode kind
    164, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_alias, // typecode kind for typedefs
      148, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        40,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6e746578), 
        ACE_NTOHL (0x74496465), 
        ACE_NTOHL (0x6e746966), 
        ACE_NTOHL (0x6965723a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                18,
        ACE_NTOHL (0x436f6e74), 
        ACE_NTOHL (0x65787449), 
        ACE_NTOHL (0x64656e74), 
        ACE_NTOHL (0x69666965), 
        ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length


      0U,


  11,
  ACE_NTOHL (0x70617261), 
  ACE_NTOHL (0x6d657465), 
  ACE_NTOHL (0x72730000),  // name = parameters
    CORBA::tk_alias, // typecode kind for typedefs
  496, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    40,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5061), 
    ACE_NTOHL (0x72446573), 
    ACE_NTOHL (0x63726970), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x5365713a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
        18,
    ACE_NTOHL (0x50617244), 
    ACE_NTOHL (0x65736372), 
    ACE_NTOHL (0x69707469), 
    ACE_NTOHL (0x6f6e5365), 
    ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    416, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      400, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5061), 
        ACE_NTOHL (0x72616d65), 
        ACE_NTOHL (0x74657244), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                21,
        ACE_NTOHL (0x50617261), 
        ACE_NTOHL (0x6d657465), 
        ACE_NTOHL (0x72446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = ParameterDescription
        4, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,

        9,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x5f646566), 
        ACE_NTOHL (0x0),  // name = type_def
                CORBA::tk_objref, // typecode kind
        52, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          30,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4944), 
          ACE_NTOHL (0x4c547970), 
          ACE_NTOHL (0x653a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                    8,
          ACE_NTOHL (0x49444c54), 
          ACE_NTOHL (0x79706500),  // name = IDLType
          
        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
                CORBA::tk_enum, // typecode kind
        116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5061), 
          ACE_NTOHL (0x72616d65), 
          ACE_NTOHL (0x7465724d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
          14,
          ACE_NTOHL (0x50617261), 
          ACE_NTOHL (0x6d657465), 
          ACE_NTOHL (0x724d6f64), 
          ACE_NTOHL (0x65000000),  // name = ParameterMode
          3, // member count
          9,
          ACE_NTOHL (0x50415241), 
          ACE_NTOHL (0x4d5f494e), 
          ACE_NTOHL (0x0),  // name = PARAM_IN
          10,
          ACE_NTOHL (0x50415241), 
          ACE_NTOHL (0x4d5f4f55), 
          ACE_NTOHL (0x54000000),  // name = PARAM_OUT
          12,
          ACE_NTOHL (0x50415241), 
          ACE_NTOHL (0x4d5f494e), 
          ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
          

      0U,


  11,
  ACE_NTOHL (0x65786365), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e730000),  // name = exceptions
    CORBA::tk_alias, // typecode kind for typedefs
  556, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    40,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4578), 
    ACE_NTOHL (0x63446573), 
    ACE_NTOHL (0x63726970), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x5365713a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
        18,
    ACE_NTOHL (0x45786344), 
    ACE_NTOHL (0x65736372), 
    ACE_NTOHL (0x69707469), 
    ACE_NTOHL (0x6f6e5365), 
    ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    476, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      460, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63657074), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                21,
        ACE_NTOHL (0x45786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = ExceptionDescription
        5, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,


      0U,


};

static CORBA::TypeCode _tc_TAO_tc_CORBA_OperationDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_OperationDescription),
    (char *) &_oc_CORBA_OperationDescription,
    0,
    sizeof (CORBA::OperationDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_OperationDescription =
    &_tc_TAO_tc_CORBA_OperationDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::OperationDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  OperationDescription *_tao_tmp_pointer =
    ACE_static_cast (OperationDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_REPOSITORYIDSEQ_CS_)
#define _CORBA_REPOSITORYIDSEQ_CS_

CORBA::RepositoryIdSeq::RepositoryIdSeq (void)
{}

CORBA::RepositoryIdSeq::RepositoryIdSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_String_Sequence
    (max)
{}

CORBA::RepositoryIdSeq::RepositoryIdSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    char * * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_String_Sequence
    (max, length, buffer, release)
{}

CORBA::RepositoryIdSeq::RepositoryIdSeq (
    const RepositoryIdSeq &seq
  )
  : TAO_Unbounded_String_Sequence
    (seq)
{}

CORBA::RepositoryIdSeq::~RepositoryIdSeq (void)
{}

void CORBA::RepositoryIdSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  RepositoryIdSeq * _tao_tmp_pointer =
    ACE_static_cast (RepositoryIdSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_RepositoryIdSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f5265), 
  ACE_NTOHL (0x706f7369), 
  ACE_NTOHL (0x746f7279), 
  ACE_NTOHL (0x49645365), 
  ACE_NTOHL (0x713a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
    16,
  ACE_NTOHL (0x5265706f), 
  ACE_NTOHL (0x7369746f), 
  ACE_NTOHL (0x72794964), 
  ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
    CORBA::tk_sequence, // typecode kind
  88, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_alias, // typecode kind for typedefs
    72, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      35,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f5265), 
      ACE_NTOHL (0x706f7369), 
      ACE_NTOHL (0x746f7279), 
      ACE_NTOHL (0x49643a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
            13,
      ACE_NTOHL (0x5265706f), 
      ACE_NTOHL (0x7369746f), 
      ACE_NTOHL (0x72794964), 
      ACE_NTOHL (0x0),  // name = RepositoryId
            CORBA::tk_string, 
      0U, // string length

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_RepositoryIdSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_RepositoryIdSeq),
    (char *) &_oc_CORBA_RepositoryIdSeq,
    0,
    sizeof (CORBA::RepositoryIdSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_RepositoryIdSeq =
    &_tc_TAO_tc_CORBA_RepositoryIdSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_OPDESCRIPTIONSEQ_CS_)
#define _CORBA_OPDESCRIPTIONSEQ_CS_

CORBA::OpDescriptionSeq::OpDescriptionSeq (void)
{}

CORBA::OpDescriptionSeq::OpDescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::OperationDescription
      >
    (max)
{}

CORBA::OpDescriptionSeq::OpDescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::OperationDescription * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::OperationDescription
      >
    (max, length, buffer, release)
{}

CORBA::OpDescriptionSeq::OpDescriptionSeq (
    const OpDescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::OperationDescription
      >
    (seq)
{}

CORBA::OpDescriptionSeq::~OpDescriptionSeq (void)
{}

void CORBA::OpDescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  OpDescriptionSeq * _tao_tmp_pointer =
    ACE_static_cast (OpDescriptionSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_OpDescriptionSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4f70), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e53), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
    17,
  ACE_NTOHL (0x4f704465), 
  ACE_NTOHL (0x73637269), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e536571), 
  ACE_NTOHL (0x0),  // name = OpDescriptionSeq
    CORBA::tk_sequence, // typecode kind
  1956, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    1940, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      43,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4f70), 
      ACE_NTOHL (0x65726174), 
      ACE_NTOHL (0x696f6e44), 
      ACE_NTOHL (0x65736372), 
      ACE_NTOHL (0x69707469), 
      ACE_NTOHL (0x6f6e3a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
            21,
      ACE_NTOHL (0x4f706572), 
      ACE_NTOHL (0x6174696f), 
      ACE_NTOHL (0x6e446573), 
      ACE_NTOHL (0x63726970), 
      ACE_NTOHL (0x74696f6e), 
      ACE_NTOHL (0x0),  // name = OperationDescription
      9, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      3,
      ACE_NTOHL (0x69640000),  // name = id
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      11,
      ACE_NTOHL (0x64656669), 
      ACE_NTOHL (0x6e65645f), 
      ACE_NTOHL (0x696e0000),  // name = defined_in
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      8,
      ACE_NTOHL (0x76657273), 
      ACE_NTOHL (0x696f6e00),  // name = version
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5665), 
        ACE_NTOHL (0x7273696f), 
        ACE_NTOHL (0x6e537065), 
        ACE_NTOHL (0x633a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                12,
        ACE_NTOHL (0x56657273), 
        ACE_NTOHL (0x696f6e53), 
        ACE_NTOHL (0x70656300),  // name = VersionSpec
                CORBA::tk_string, 
        0U, // string length

      7,
      ACE_NTOHL (0x72657375), 
      ACE_NTOHL (0x6c740000),  // name = result
            CORBA::tk_TypeCode,

      5,
      ACE_NTOHL (0x6d6f6465), 
      ACE_NTOHL (0x0),  // name = mode
            CORBA::tk_enum, // typecode kind
      100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
        36,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f70), 
        ACE_NTOHL (0x65726174), 
        ACE_NTOHL (0x696f6e4d), 
        ACE_NTOHL (0x6f64653a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
        14,
        ACE_NTOHL (0x4f706572), 
        ACE_NTOHL (0x6174696f), 
        ACE_NTOHL (0x6e4d6f64), 
        ACE_NTOHL (0x65000000),  // name = OperationMode
        2, // member count
        10,
        ACE_NTOHL (0x4f505f4e), 
        ACE_NTOHL (0x4f524d41), 
        ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
        10,
        ACE_NTOHL (0x4f505f4f), 
        ACE_NTOHL (0x4e455741), 
        ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
        
      9,
      ACE_NTOHL (0x636f6e74), 
      ACE_NTOHL (0x65787473), 
      ACE_NTOHL (0x0),  // name = contexts
            CORBA::tk_alias, // typecode kind for typedefs
      236, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f436f), 
        ACE_NTOHL (0x6e746578), 
        ACE_NTOHL (0x74496453), 
        ACE_NTOHL (0x65713a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
                13,
        ACE_NTOHL (0x436f6e74), 
        ACE_NTOHL (0x65787449), 
        ACE_NTOHL (0x64536571), 
        ACE_NTOHL (0x0),  // name = ContextIdSeq
                CORBA::tk_sequence, // typecode kind
        164, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_alias, // typecode kind for typedefs
          148, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            40,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f436f), 
            ACE_NTOHL (0x6e746578), 
            ACE_NTOHL (0x74496465), 
            ACE_NTOHL (0x6e746966), 
            ACE_NTOHL (0x6965723a), 
            ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                        18,
            ACE_NTOHL (0x436f6e74), 
            ACE_NTOHL (0x65787449), 
            ACE_NTOHL (0x64656e74), 
            ACE_NTOHL (0x69666965), 
            ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length


          0U,


      11,
      ACE_NTOHL (0x70617261), 
      ACE_NTOHL (0x6d657465), 
      ACE_NTOHL (0x72730000),  // name = parameters
            CORBA::tk_alias, // typecode kind for typedefs
      496, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        40,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5061), 
        ACE_NTOHL (0x72446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x5365713a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
                18,
        ACE_NTOHL (0x50617244), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e5365), 
        ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
                CORBA::tk_sequence, // typecode kind
        416, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          400, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            43,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f5061), 
            ACE_NTOHL (0x72616d65), 
            ACE_NTOHL (0x74657244), 
            ACE_NTOHL (0x65736372), 
            ACE_NTOHL (0x69707469), 
            ACE_NTOHL (0x6f6e3a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                        21,
            ACE_NTOHL (0x50617261), 
            ACE_NTOHL (0x6d657465), 
            ACE_NTOHL (0x72446573), 
            ACE_NTOHL (0x63726970), 
            ACE_NTOHL (0x74696f6e), 
            ACE_NTOHL (0x0),  // name = ParameterDescription
            4, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,

            9,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x5f646566), 
            ACE_NTOHL (0x0),  // name = type_def
                        CORBA::tk_objref, // typecode kind
            52, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              30,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4944), 
              ACE_NTOHL (0x4c547970), 
              ACE_NTOHL (0x653a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                            8,
              ACE_NTOHL (0x49444c54), 
              ACE_NTOHL (0x79706500),  // name = IDLType
              
            5,
            ACE_NTOHL (0x6d6f6465), 
            ACE_NTOHL (0x0),  // name = mode
                        CORBA::tk_enum, // typecode kind
            116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
              36,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5061), 
              ACE_NTOHL (0x72616d65), 
              ACE_NTOHL (0x7465724d), 
              ACE_NTOHL (0x6f64653a), 
              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
              14,
              ACE_NTOHL (0x50617261), 
              ACE_NTOHL (0x6d657465), 
              ACE_NTOHL (0x724d6f64), 
              ACE_NTOHL (0x65000000),  // name = ParameterMode
              3, // member count
              9,
              ACE_NTOHL (0x50415241), 
              ACE_NTOHL (0x4d5f494e), 
              ACE_NTOHL (0x0),  // name = PARAM_IN
              10,
              ACE_NTOHL (0x50415241), 
              ACE_NTOHL (0x4d5f4f55), 
              ACE_NTOHL (0x54000000),  // name = PARAM_OUT
              12,
              ACE_NTOHL (0x50415241), 
              ACE_NTOHL (0x4d5f494e), 
              ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
              

          0U,


      11,
      ACE_NTOHL (0x65786365), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e730000),  // name = exceptions
            CORBA::tk_alias, // typecode kind for typedefs
      556, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        40,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x5365713a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                18,
        ACE_NTOHL (0x45786344), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e5365), 
        ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                CORBA::tk_sequence, // typecode kind
        476, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          460, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            43,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f4578), 
            ACE_NTOHL (0x63657074), 
            ACE_NTOHL (0x696f6e44), 
            ACE_NTOHL (0x65736372), 
            ACE_NTOHL (0x69707469), 
            ACE_NTOHL (0x6f6e3a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                        21,
            ACE_NTOHL (0x45786365), 
            ACE_NTOHL (0x7074696f), 
            ACE_NTOHL (0x6e446573), 
            ACE_NTOHL (0x63726970), 
            ACE_NTOHL (0x74696f6e), 
            ACE_NTOHL (0x0),  // name = ExceptionDescription
            5, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            3,
            ACE_NTOHL (0x69640000),  // name = id
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            11,
            ACE_NTOHL (0x64656669), 
            ACE_NTOHL (0x6e65645f), 
            ACE_NTOHL (0x696e0000),  // name = defined_in
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            8,
            ACE_NTOHL (0x76657273), 
            ACE_NTOHL (0x696f6e00),  // name = version
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              34,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5665), 
              ACE_NTOHL (0x7273696f), 
              ACE_NTOHL (0x6e537065), 
              ACE_NTOHL (0x633a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                            12,
              ACE_NTOHL (0x56657273), 
              ACE_NTOHL (0x696f6e53), 
              ACE_NTOHL (0x70656300),  // name = VersionSpec
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,


          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_OpDescriptionSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_OpDescriptionSeq),
    (char *) &_oc_CORBA_OpDescriptionSeq,
    0,
    sizeof (CORBA::OpDescriptionSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_OpDescriptionSeq =
    &_tc_TAO_tc_CORBA_OpDescriptionSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_ATTRDESCRIPTIONSEQ_CS_)
#define _CORBA_ATTRDESCRIPTIONSEQ_CS_

CORBA::AttrDescriptionSeq::AttrDescriptionSeq (void)
{}

CORBA::AttrDescriptionSeq::AttrDescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::AttributeDescription
      >
    (max)
{}

CORBA::AttrDescriptionSeq::AttrDescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::AttributeDescription * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::AttributeDescription
      >
    (max, length, buffer, release)
{}

CORBA::AttrDescriptionSeq::AttrDescriptionSeq (
    const AttrDescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::AttributeDescription
      >
    (seq)
{}

CORBA::AttrDescriptionSeq::~AttrDescriptionSeq (void)
{}

void CORBA::AttrDescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  AttrDescriptionSeq * _tao_tmp_pointer =
    ACE_static_cast (AttrDescriptionSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AttrDescriptionSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4174), 
  ACE_NTOHL (0x74724465), 
  ACE_NTOHL (0x73637269), 
  ACE_NTOHL (0x7074696f), 
  ACE_NTOHL (0x6e536571), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/AttrDescriptionSeq:1.0
    19,
  ACE_NTOHL (0x41747472), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e53), 
  ACE_NTOHL (0x65710000),  // name = AttrDescriptionSeq
    CORBA::tk_sequence, // typecode kind
  600, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    584, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      43,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4174), 
      ACE_NTOHL (0x74726962), 
      ACE_NTOHL (0x75746544), 
      ACE_NTOHL (0x65736372), 
      ACE_NTOHL (0x69707469), 
      ACE_NTOHL (0x6f6e3a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDescription:1.0
            21,
      ACE_NTOHL (0x41747472), 
      ACE_NTOHL (0x69627574), 
      ACE_NTOHL (0x65446573), 
      ACE_NTOHL (0x63726970), 
      ACE_NTOHL (0x74696f6e), 
      ACE_NTOHL (0x0),  // name = AttributeDescription
      6, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      3,
      ACE_NTOHL (0x69640000),  // name = id
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      11,
      ACE_NTOHL (0x64656669), 
      ACE_NTOHL (0x6e65645f), 
      ACE_NTOHL (0x696e0000),  // name = defined_in
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      8,
      ACE_NTOHL (0x76657273), 
      ACE_NTOHL (0x696f6e00),  // name = version
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5665), 
        ACE_NTOHL (0x7273696f), 
        ACE_NTOHL (0x6e537065), 
        ACE_NTOHL (0x633a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                12,
        ACE_NTOHL (0x56657273), 
        ACE_NTOHL (0x696f6e53), 
        ACE_NTOHL (0x70656300),  // name = VersionSpec
                CORBA::tk_string, 
        0U, // string length

      5,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x0),  // name = type
            CORBA::tk_TypeCode,

      5,
      ACE_NTOHL (0x6d6f6465), 
      ACE_NTOHL (0x0),  // name = mode
            CORBA::tk_enum, // typecode kind
      104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
        36,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4174), 
        ACE_NTOHL (0x74726962), 
        ACE_NTOHL (0x7574654d), 
        ACE_NTOHL (0x6f64653a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
        14,
        ACE_NTOHL (0x41747472), 
        ACE_NTOHL (0x69627574), 
        ACE_NTOHL (0x654d6f64), 
        ACE_NTOHL (0x65000000),  // name = AttributeMode
        2, // member count
        12,
        ACE_NTOHL (0x41545452), 
        ACE_NTOHL (0x5f4e4f52), 
        ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
        14,
        ACE_NTOHL (0x41545452), 
        ACE_NTOHL (0x5f524541), 
        ACE_NTOHL (0x444f4e4c), 
        ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
        

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_AttrDescriptionSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_AttrDescriptionSeq),
    (char *) &_oc_CORBA_AttrDescriptionSeq,
    0,
    sizeof (CORBA::AttrDescriptionSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AttrDescriptionSeq =
    &_tc_TAO_tc_CORBA_AttrDescriptionSeq;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:66

#if !defined (_CORBA_EXTATTRDESCRIPTIONSEQ_CS_)
#define _CORBA_EXTATTRDESCRIPTIONSEQ_CS_

CORBA::ExtAttrDescriptionSeq::ExtAttrDescriptionSeq (void)
{}

CORBA::ExtAttrDescriptionSeq::ExtAttrDescriptionSeq (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtAttributeDescription
      >
    (max)
{}

CORBA::ExtAttrDescriptionSeq::ExtAttrDescriptionSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExtAttributeDescription * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtAttributeDescription
      >
    (max, length, buffer, release)
{}

CORBA::ExtAttrDescriptionSeq::ExtAttrDescriptionSeq (
    const ExtAttrDescriptionSeq &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::ExtAttributeDescription
      >
    (seq)
{}

CORBA::ExtAttrDescriptionSeq::~ExtAttrDescriptionSeq (void)
{}

void CORBA::ExtAttrDescriptionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  ExtAttrDescriptionSeq * _tao_tmp_pointer =
    ACE_static_cast (ExtAttrDescriptionSeq *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtAttrDescriptionSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74417474), 
  ACE_NTOHL (0x72446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x5365713a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExtAttrDescriptionSeq:1.0
    22,
  ACE_NTOHL (0x45787441), 
  ACE_NTOHL (0x74747244), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e5365), 
  ACE_NTOHL (0x71000000),  // name = ExtAttrDescriptionSeq
    CORBA::tk_sequence, // typecode kind
  1772, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_struct, // typecode kind
    1756, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      46,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x434f5242), 
      ACE_NTOHL (0x412f4578), 
      ACE_NTOHL (0x74417474), 
      ACE_NTOHL (0x72696275), 
      ACE_NTOHL (0x74654465), 
      ACE_NTOHL (0x73637269), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e3a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAttributeDescription:1.0
            24,
      ACE_NTOHL (0x45787441), 
      ACE_NTOHL (0x74747269), 
      ACE_NTOHL (0x62757465), 
      ACE_NTOHL (0x44657363), 
      ACE_NTOHL (0x72697074), 
      ACE_NTOHL (0x696f6e00),  // name = ExtAttributeDescription
      8, // member count
            5,
      ACE_NTOHL (0x6e616d65), 
      ACE_NTOHL (0x0),  // name = name
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        33,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4964), 
        ACE_NTOHL (0x656e7469), 
        ACE_NTOHL (0x66696572), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                11,
        ACE_NTOHL (0x4964656e), 
        ACE_NTOHL (0x74696669), 
        ACE_NTOHL (0x65720000),  // name = Identifier
                CORBA::tk_string, 
        0U, // string length

      3,
      ACE_NTOHL (0x69640000),  // name = id
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      11,
      ACE_NTOHL (0x64656669), 
      ACE_NTOHL (0x6e65645f), 
      ACE_NTOHL (0x696e0000),  // name = defined_in
            CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      8,
      ACE_NTOHL (0x76657273), 
      ACE_NTOHL (0x696f6e00),  // name = version
            CORBA::tk_alias, // typecode kind for typedefs
      68, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        34,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5665), 
        ACE_NTOHL (0x7273696f), 
        ACE_NTOHL (0x6e537065), 
        ACE_NTOHL (0x633a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                12,
        ACE_NTOHL (0x56657273), 
        ACE_NTOHL (0x696f6e53), 
        ACE_NTOHL (0x70656300),  // name = VersionSpec
                CORBA::tk_string, 
        0U, // string length

      5,
      ACE_NTOHL (0x74797065), 
      ACE_NTOHL (0x0),  // name = type
            CORBA::tk_TypeCode,

      5,
      ACE_NTOHL (0x6d6f6465), 
      ACE_NTOHL (0x0),  // name = mode
            CORBA::tk_enum, // typecode kind
      104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
        36,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4174), 
        ACE_NTOHL (0x74726962), 
        ACE_NTOHL (0x7574654d), 
        ACE_NTOHL (0x6f64653a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
        14,
        ACE_NTOHL (0x41747472), 
        ACE_NTOHL (0x69627574), 
        ACE_NTOHL (0x654d6f64), 
        ACE_NTOHL (0x65000000),  // name = AttributeMode
        2, // member count
        12,
        ACE_NTOHL (0x41545452), 
        ACE_NTOHL (0x5f4e4f52), 
        ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
        14,
        ACE_NTOHL (0x41545452), 
        ACE_NTOHL (0x5f524541), 
        ACE_NTOHL (0x444f4e4c), 
        ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
        
      15,
      ACE_NTOHL (0x6765745f), 
      ACE_NTOHL (0x65786365), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e730000),  // name = get_exceptions
            CORBA::tk_alias, // typecode kind for typedefs
      556, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        40,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x5365713a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                18,
        ACE_NTOHL (0x45786344), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e5365), 
        ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                CORBA::tk_sequence, // typecode kind
        476, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          460, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            43,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f4578), 
            ACE_NTOHL (0x63657074), 
            ACE_NTOHL (0x696f6e44), 
            ACE_NTOHL (0x65736372), 
            ACE_NTOHL (0x69707469), 
            ACE_NTOHL (0x6f6e3a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                        21,
            ACE_NTOHL (0x45786365), 
            ACE_NTOHL (0x7074696f), 
            ACE_NTOHL (0x6e446573), 
            ACE_NTOHL (0x63726970), 
            ACE_NTOHL (0x74696f6e), 
            ACE_NTOHL (0x0),  // name = ExceptionDescription
            5, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            3,
            ACE_NTOHL (0x69640000),  // name = id
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            11,
            ACE_NTOHL (0x64656669), 
            ACE_NTOHL (0x6e65645f), 
            ACE_NTOHL (0x696e0000),  // name = defined_in
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            8,
            ACE_NTOHL (0x76657273), 
            ACE_NTOHL (0x696f6e00),  // name = version
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              34,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5665), 
              ACE_NTOHL (0x7273696f), 
              ACE_NTOHL (0x6e537065), 
              ACE_NTOHL (0x633a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                            12,
              ACE_NTOHL (0x56657273), 
              ACE_NTOHL (0x696f6e53), 
              ACE_NTOHL (0x70656300),  // name = VersionSpec
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,


          0U,


      15,
      ACE_NTOHL (0x7075745f), 
      ACE_NTOHL (0x65786365), 
      ACE_NTOHL (0x7074696f), 
      ACE_NTOHL (0x6e730000),  // name = put_exceptions
            CORBA::tk_alias, // typecode kind for typedefs
      556, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        40,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x63446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x5365713a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                18,
        ACE_NTOHL (0x45786344), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e5365), 
        ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                CORBA::tk_sequence, // typecode kind
        476, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_struct, // typecode kind
          460, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            43,
            ACE_NTOHL (0x49444c3a), 
            ACE_NTOHL (0x6f6d672e), 
            ACE_NTOHL (0x6f72672f), 
            ACE_NTOHL (0x434f5242), 
            ACE_NTOHL (0x412f4578), 
            ACE_NTOHL (0x63657074), 
            ACE_NTOHL (0x696f6e44), 
            ACE_NTOHL (0x65736372), 
            ACE_NTOHL (0x69707469), 
            ACE_NTOHL (0x6f6e3a31), 
            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                        21,
            ACE_NTOHL (0x45786365), 
            ACE_NTOHL (0x7074696f), 
            ACE_NTOHL (0x6e446573), 
            ACE_NTOHL (0x63726970), 
            ACE_NTOHL (0x74696f6e), 
            ACE_NTOHL (0x0),  // name = ExceptionDescription
            5, // member count
                        5,
            ACE_NTOHL (0x6e616d65), 
            ACE_NTOHL (0x0),  // name = name
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              33,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4964), 
              ACE_NTOHL (0x656e7469), 
              ACE_NTOHL (0x66696572), 
              ACE_NTOHL (0x3a312e30), 
              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                            11,
              ACE_NTOHL (0x4964656e), 
              ACE_NTOHL (0x74696669), 
              ACE_NTOHL (0x65720000),  // name = Identifier
                            CORBA::tk_string, 
              0U, // string length

            3,
            ACE_NTOHL (0x69640000),  // name = id
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            11,
            ACE_NTOHL (0x64656669), 
            ACE_NTOHL (0x6e65645f), 
            ACE_NTOHL (0x696e0000),  // name = defined_in
                        CORBA::tk_alias, // typecode kind for typedefs
            72, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              35,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5265), 
              ACE_NTOHL (0x706f7369), 
              ACE_NTOHL (0x746f7279), 
              ACE_NTOHL (0x49643a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                            13,
              ACE_NTOHL (0x5265706f), 
              ACE_NTOHL (0x7369746f), 
              ACE_NTOHL (0x72794964), 
              ACE_NTOHL (0x0),  // name = RepositoryId
                            CORBA::tk_string, 
              0U, // string length

            8,
            ACE_NTOHL (0x76657273), 
            ACE_NTOHL (0x696f6e00),  // name = version
                        CORBA::tk_alias, // typecode kind for typedefs
            68, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              34,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5665), 
              ACE_NTOHL (0x7273696f), 
              ACE_NTOHL (0x6e537065), 
              ACE_NTOHL (0x633a312e), 
              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                            12,
              ACE_NTOHL (0x56657273), 
              ACE_NTOHL (0x696f6e53), 
              ACE_NTOHL (0x70656300),  // name = VersionSpec
                            CORBA::tk_string, 
              0U, // string length

            5,
            ACE_NTOHL (0x74797065), 
            ACE_NTOHL (0x0),  // name = type
                        CORBA::tk_TypeCode,


          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtAttrDescriptionSeq (
    CORBA::tk_alias,
    sizeof (_oc_CORBA_ExtAttrDescriptionSeq),
    (char *) &_oc_CORBA_ExtAttrDescriptionSeq,
    0,
    sizeof (CORBA::ExtAttrDescriptionSeq)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtAttrDescriptionSeq =
    &_tc_TAO_tc_CORBA_ExtAttrDescriptionSeq;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::InterfaceDef.

CORBA::InterfaceDef_ptr
TAO::Objref_Traits<CORBA::InterfaceDef>::tao_duplicate (
    CORBA::InterfaceDef_ptr p
  )
{
  return CORBA::InterfaceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::InterfaceDef>::tao_release (
    CORBA::InterfaceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::InterfaceDef_ptr
TAO::Objref_Traits<CORBA::InterfaceDef>::tao_nil (void)
{
  return CORBA::InterfaceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::InterfaceDef>::tao_marshal (
    CORBA::InterfaceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_InterfaceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::InterfaceDefSeq * CORBA::InterfaceDef::base_interfaces (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceDef_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_base_interfaces",
      20,
      this->the_TAO_InterfaceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

void CORBA::InterfaceDef::base_interfaces (
    const CORBA::InterfaceDefSeq & base_interfaces
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceDef_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces (base_interfaces);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_base_interfaces
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_base_interfaces",
      20,
      this->the_TAO_InterfaceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

CORBA::Boolean CORBA::InterfaceDef::is_a (
    const char * interface_id
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceDef_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_interface_id (interface_id);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_interface_id
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "is_a",
      4,
      this->the_TAO_InterfaceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InterfaceDef_FullInterfaceDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  60,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65662f46), 
  ACE_NTOHL (0x756c6c49), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/InterfaceDef/FullInterfaceDescription:1.0
    25,
  ACE_NTOHL (0x46756c6c), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = FullInterfaceDescription
  8, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x6f706572), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e730000),  // name = operations
    CORBA::tk_alias, // typecode kind for typedefs
  2036, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    39,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f70), 
    ACE_NTOHL (0x44657363), 
    ACE_NTOHL (0x72697074), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x65713a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
        17,
    ACE_NTOHL (0x4f704465), 
    ACE_NTOHL (0x73637269), 
    ACE_NTOHL (0x7074696f), 
    ACE_NTOHL (0x6e536571), 
    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    1956, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      1940, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f70), 
        ACE_NTOHL (0x65726174), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
                21,
        ACE_NTOHL (0x4f706572), 
        ACE_NTOHL (0x6174696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = OperationDescription
        9, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        7,
        ACE_NTOHL (0x72657375), 
        ACE_NTOHL (0x6c740000),  // name = result
                CORBA::tk_TypeCode,

        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
                CORBA::tk_enum, // typecode kind
        100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4f70), 
          ACE_NTOHL (0x65726174), 
          ACE_NTOHL (0x696f6e4d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
          14,
          ACE_NTOHL (0x4f706572), 
          ACE_NTOHL (0x6174696f), 
          ACE_NTOHL (0x6e4d6f64), 
          ACE_NTOHL (0x65000000),  // name = OperationMode
          2, // member count
          10,
          ACE_NTOHL (0x4f505f4e), 
          ACE_NTOHL (0x4f524d41), 
          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
          10,
          ACE_NTOHL (0x4f505f4f), 
          ACE_NTOHL (0x4e455741), 
          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
          
        9,
        ACE_NTOHL (0x636f6e74), 
        ACE_NTOHL (0x65787473), 
        ACE_NTOHL (0x0),  // name = contexts
                CORBA::tk_alias, // typecode kind for typedefs
        236, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f436f), 
          ACE_NTOHL (0x6e746578), 
          ACE_NTOHL (0x74496453), 
          ACE_NTOHL (0x65713a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
                    13,
          ACE_NTOHL (0x436f6e74), 
          ACE_NTOHL (0x65787449), 
          ACE_NTOHL (0x64536571), 
          ACE_NTOHL (0x0),  // name = ContextIdSeq
                    CORBA::tk_sequence, // typecode kind
          164, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_alias, // typecode kind for typedefs
            148, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              40,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f436f), 
              ACE_NTOHL (0x6e746578), 
              ACE_NTOHL (0x74496465), 
              ACE_NTOHL (0x6e746966), 
              ACE_NTOHL (0x6965723a), 
              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                            18,
              ACE_NTOHL (0x436f6e74), 
              ACE_NTOHL (0x65787449), 
              ACE_NTOHL (0x64656e74), 
              ACE_NTOHL (0x69666965), 
              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length


            0U,


        11,
        ACE_NTOHL (0x70617261), 
        ACE_NTOHL (0x6d657465), 
        ACE_NTOHL (0x72730000),  // name = parameters
                CORBA::tk_alias, // typecode kind for typedefs
        496, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5061), 
          ACE_NTOHL (0x72446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
                    18,
          ACE_NTOHL (0x50617244), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          416, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            400, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5061), 
              ACE_NTOHL (0x72616d65), 
              ACE_NTOHL (0x74657244), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                            21,
              ACE_NTOHL (0x50617261), 
              ACE_NTOHL (0x6d657465), 
              ACE_NTOHL (0x72446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ParameterDescription
              4, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
                            CORBA::tk_TypeCode,

              9,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x5f646566), 
              ACE_NTOHL (0x0),  // name = type_def
                            CORBA::tk_objref, // typecode kind
              52, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                30,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4944), 
                ACE_NTOHL (0x4c547970), 
                ACE_NTOHL (0x653a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                                8,
                ACE_NTOHL (0x49444c54), 
                ACE_NTOHL (0x79706500),  // name = IDLType
                
              5,
              ACE_NTOHL (0x6d6f6465), 
              ACE_NTOHL (0x0),  // name = mode
                            CORBA::tk_enum, // typecode kind
              116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                36,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5061), 
                ACE_NTOHL (0x72616d65), 
                ACE_NTOHL (0x7465724d), 
                ACE_NTOHL (0x6f64653a), 
                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
                14,
                ACE_NTOHL (0x50617261), 
                ACE_NTOHL (0x6d657465), 
                ACE_NTOHL (0x724d6f64), 
                ACE_NTOHL (0x65000000),  // name = ParameterMode
                3, // member count
                9,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f494e), 
                ACE_NTOHL (0x0),  // name = PARAM_IN
                10,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f4f55), 
                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
                12,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f494e), 
                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
                

            0U,


        11,
        ACE_NTOHL (0x65786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e730000),  // name = exceptions
                CORBA::tk_alias, // typecode kind for typedefs
        556, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4578), 
          ACE_NTOHL (0x63446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                    18,
          ACE_NTOHL (0x45786344), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          476, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            460, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4578), 
              ACE_NTOHL (0x63657074), 
              ACE_NTOHL (0x696f6e44), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                            21,
              ACE_NTOHL (0x45786365), 
              ACE_NTOHL (0x7074696f), 
              ACE_NTOHL (0x6e446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ExceptionDescription
              5, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              3,
              ACE_NTOHL (0x69640000),  // name = id
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              11,
              ACE_NTOHL (0x64656669), 
              ACE_NTOHL (0x6e65645f), 
              ACE_NTOHL (0x696e0000),  // name = defined_in
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              8,
              ACE_NTOHL (0x76657273), 
              ACE_NTOHL (0x696f6e00),  // name = version
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                34,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5665), 
                ACE_NTOHL (0x7273696f), 
                ACE_NTOHL (0x6e537065), 
                ACE_NTOHL (0x633a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                12,
                ACE_NTOHL (0x56657273), 
                ACE_NTOHL (0x696f6e53), 
                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
                            CORBA::tk_TypeCode,


            0U,



      0U,


  11,
  ACE_NTOHL (0x61747472), 
  ACE_NTOHL (0x69627574), 
  ACE_NTOHL (0x65730000),  // name = attributes
    CORBA::tk_alias, // typecode kind for typedefs
  684, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    41,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4174), 
    ACE_NTOHL (0x74724465), 
    ACE_NTOHL (0x73637269), 
    ACE_NTOHL (0x7074696f), 
    ACE_NTOHL (0x6e536571), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/AttrDescriptionSeq:1.0
        19,
    ACE_NTOHL (0x41747472), 
    ACE_NTOHL (0x44657363), 
    ACE_NTOHL (0x72697074), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x65710000),  // name = AttrDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    600, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      584, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4174), 
        ACE_NTOHL (0x74726962), 
        ACE_NTOHL (0x75746544), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AttributeDescription:1.0
                21,
        ACE_NTOHL (0x41747472), 
        ACE_NTOHL (0x69627574), 
        ACE_NTOHL (0x65446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = AttributeDescription
        6, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,

        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
                CORBA::tk_enum, // typecode kind
        104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4174), 
          ACE_NTOHL (0x74726962), 
          ACE_NTOHL (0x7574654d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
          14,
          ACE_NTOHL (0x41747472), 
          ACE_NTOHL (0x69627574), 
          ACE_NTOHL (0x654d6f64), 
          ACE_NTOHL (0x65000000),  // name = AttributeMode
          2, // member count
          12,
          ACE_NTOHL (0x41545452), 
          ACE_NTOHL (0x5f4e4f52), 
          ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
          14,
          ACE_NTOHL (0x41545452), 
          ACE_NTOHL (0x5f524541), 
          ACE_NTOHL (0x444f4e4c), 
          ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
          

      0U,


  16,
  ACE_NTOHL (0x62617365), 
  ACE_NTOHL (0x5f696e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63657300),  // name = base_interfaces
    CORBA::tk_alias, // typecode kind for typedefs
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49645365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
        16,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
        CORBA::tk_sequence, // typecode kind
    88, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      0U,


  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceDef_FullInterfaceDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_InterfaceDef_FullInterfaceDescription),
    (char *) &_oc_CORBA_InterfaceDef_FullInterfaceDescription,
    0,
    sizeof (CORBA::InterfaceDef::FullInterfaceDescription)
  );

::CORBA::TypeCode_ptr CORBA::InterfaceDef::_tc_FullInterfaceDescription =
  &_tc_TAO_tc_CORBA_InterfaceDef_FullInterfaceDescription;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::InterfaceDef::FullInterfaceDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  FullInterfaceDescription *_tao_tmp_pointer =
    ACE_static_cast (FullInterfaceDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::InterfaceDef::FullInterfaceDescription * CORBA::InterfaceDef::describe_interface (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceDef_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::InterfaceDef::FullInterfaceDescription>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "describe_interface",
      18,
      this->the_TAO_InterfaceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::AttributeDef_ptr CORBA::InterfaceDef::create_attribute (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::AttributeMode mode
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceDef_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::AttributeDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_type (type);
  TAO::Arg_Traits<CORBA::AttributeMode>::in_arg_val _tao_mode (mode);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_type,
      &_tao_mode
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      6,
      "create_attribute",
      16,
      this->the_TAO_InterfaceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::OperationDef_ptr CORBA::InterfaceDef::create_operation (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr result,
    CORBA::OperationMode mode,
    const CORBA::ParDescriptionSeq & params,
    const CORBA::ExceptionDefSeq & exceptions,
    const CORBA::ContextIdSeq & contexts
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceDef_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceDef_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::OperationDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_result (result);
  TAO::Arg_Traits<CORBA::OperationMode>::in_arg_val _tao_mode (mode);
  TAO::Arg_Traits<CORBA::ParDescriptionSeq>::in_arg_val _tao_params (params);
  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions (exceptions);
  TAO::Arg_Traits<CORBA::ContextIdSeq>::in_arg_val _tao_contexts (contexts);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_result,
      &_tao_mode,
      &_tao_params,
      &_tao_exceptions,
      &_tao_contexts
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      9,
      "create_operation",
      16,
      this->the_TAO_InterfaceDef_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::InterfaceDef::InterfaceDef (int collocated)
 : the_TAO_InterfaceDef_Proxy_Broker_ (0)
{
  this->CORBA_InterfaceDef_setup_collocation (collocated);
}

void
CORBA::InterfaceDef::CORBA_InterfaceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_InterfaceDef_Proxy_Broker_ =
        ::CORBA__TAO_InterfaceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_Container_setup_collocation (collocated);
  this->CORBA_Contained_setup_collocation (collocated);
  this->CORBA_IDLType_setup_collocation (collocated);
}

CORBA::InterfaceDef::~InterfaceDef (void)
{}

void 
CORBA::InterfaceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  InterfaceDef *_tao_tmp_pointer =
    ACE_static_cast (InterfaceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::InterfaceDef_ptr
CORBA::InterfaceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<InterfaceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/InterfaceDef:1.0",
        CORBA__TAO_InterfaceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::InterfaceDef_ptr
CORBA::InterfaceDef::_duplicate (InterfaceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::InterfaceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::InterfaceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/InterfaceDef:1.0";
}

CORBA::Boolean
CORBA::InterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InterfaceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/InterfaceDef:1.0
    13,
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x0),  // name = InterfaceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_InterfaceDef),
    (char *) &_oc_CORBA_InterfaceDef,
    0,
    sizeof (CORBA::InterfaceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_InterfaceDef =
    &_tc_TAO_tc_CORBA_InterfaceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InterfaceDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x69707469), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/InterfaceDescription:1.0
    21,
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = InterfaceDescription
  5, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  16,
  ACE_NTOHL (0x62617365), 
  ACE_NTOHL (0x5f696e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63657300),  // name = base_interfaces
    CORBA::tk_alias, // typecode kind for typedefs
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49645365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
        16,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
        CORBA::tk_sequence, // typecode kind
    88, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      0U,


};

static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_InterfaceDescription),
    (char *) &_oc_CORBA_InterfaceDescription,
    0,
    sizeof (CORBA::InterfaceDescription)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_InterfaceDescription =
    &_tc_TAO_tc_CORBA_InterfaceDescription;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::InterfaceDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  InterfaceDescription *_tao_tmp_pointer =
    ACE_static_cast (InterfaceDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::InterfaceAttrExtension.

CORBA::InterfaceAttrExtension_ptr
TAO::Objref_Traits<CORBA::InterfaceAttrExtension>::tao_duplicate (
    CORBA::InterfaceAttrExtension_ptr p
  )
{
  return CORBA::InterfaceAttrExtension::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::InterfaceAttrExtension>::tao_release (
    CORBA::InterfaceAttrExtension_ptr p
  )
{
  CORBA::release (p);
}

CORBA::InterfaceAttrExtension_ptr
TAO::Objref_Traits<CORBA::InterfaceAttrExtension>::tao_nil (void)
{
  return CORBA::InterfaceAttrExtension::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::InterfaceAttrExtension>::tao_marshal (
    CORBA::InterfaceAttrExtension_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_InterfaceAttrExtension_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InterfaceAttrExtension_ExtFullInterfaceDescription[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  73,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636541), 
  ACE_NTOHL (0x74747245), 
  ACE_NTOHL (0x7874656e), 
  ACE_NTOHL (0x73696f6e), 
  ACE_NTOHL (0x2f457874), 
  ACE_NTOHL (0x46756c6c), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446573), 
  ACE_NTOHL (0x63726970), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/InterfaceAttrExtension/ExtFullInterfaceDescription:1.0
    28,
  ACE_NTOHL (0x45787446), 
  ACE_NTOHL (0x756c6c49), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44657363), 
  ACE_NTOHL (0x72697074), 
  ACE_NTOHL (0x696f6e00),  // name = ExtFullInterfaceDescription
  8, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    33,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4964), 
    ACE_NTOHL (0x656e7469), 
    ACE_NTOHL (0x66696572), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
        11,
    ACE_NTOHL (0x4964656e), 
    ACE_NTOHL (0x74696669), 
    ACE_NTOHL (0x65720000),  // name = Identifier
        CORBA::tk_string, 
    0U, // string length

  3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x64656669), 
  ACE_NTOHL (0x6e65645f), 
  ACE_NTOHL (0x696e0000),  // name = defined_in
    CORBA::tk_alias, // typecode kind for typedefs
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    35,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
        13,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x0),  // name = RepositoryId
        CORBA::tk_string, 
    0U, // string length

  8,
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x696f6e00),  // name = version
    CORBA::tk_alias, // typecode kind for typedefs
  68, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5665), 
    ACE_NTOHL (0x7273696f), 
    ACE_NTOHL (0x6e537065), 
    ACE_NTOHL (0x633a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
        12,
    ACE_NTOHL (0x56657273), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x70656300),  // name = VersionSpec
        CORBA::tk_string, 
    0U, // string length

  11,
  ACE_NTOHL (0x6f706572), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e730000),  // name = operations
    CORBA::tk_alias, // typecode kind for typedefs
  2036, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    39,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f70), 
    ACE_NTOHL (0x44657363), 
    ACE_NTOHL (0x72697074), 
    ACE_NTOHL (0x696f6e53), 
    ACE_NTOHL (0x65713a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OpDescriptionSeq:1.0
        17,
    ACE_NTOHL (0x4f704465), 
    ACE_NTOHL (0x73637269), 
    ACE_NTOHL (0x7074696f), 
    ACE_NTOHL (0x6e536571), 
    ACE_NTOHL (0x0),  // name = OpDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    1956, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      1940, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        43,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f70), 
        ACE_NTOHL (0x65726174), 
        ACE_NTOHL (0x696f6e44), 
        ACE_NTOHL (0x65736372), 
        ACE_NTOHL (0x69707469), 
        ACE_NTOHL (0x6f6e3a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OperationDescription:1.0
                21,
        ACE_NTOHL (0x4f706572), 
        ACE_NTOHL (0x6174696f), 
        ACE_NTOHL (0x6e446573), 
        ACE_NTOHL (0x63726970), 
        ACE_NTOHL (0x74696f6e), 
        ACE_NTOHL (0x0),  // name = OperationDescription
        9, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        7,
        ACE_NTOHL (0x72657375), 
        ACE_NTOHL (0x6c740000),  // name = result
                CORBA::tk_TypeCode,

        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
                CORBA::tk_enum, // typecode kind
        100, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4f70), 
          ACE_NTOHL (0x65726174), 
          ACE_NTOHL (0x696f6e4d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/OperationMode:1.0
          14,
          ACE_NTOHL (0x4f706572), 
          ACE_NTOHL (0x6174696f), 
          ACE_NTOHL (0x6e4d6f64), 
          ACE_NTOHL (0x65000000),  // name = OperationMode
          2, // member count
          10,
          ACE_NTOHL (0x4f505f4e), 
          ACE_NTOHL (0x4f524d41), 
          ACE_NTOHL (0x4c000000),  // name = OP_NORMAL
          10,
          ACE_NTOHL (0x4f505f4f), 
          ACE_NTOHL (0x4e455741), 
          ACE_NTOHL (0x59000000),  // name = OP_ONEWAY
          
        9,
        ACE_NTOHL (0x636f6e74), 
        ACE_NTOHL (0x65787473), 
        ACE_NTOHL (0x0),  // name = contexts
                CORBA::tk_alias, // typecode kind for typedefs
        236, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f436f), 
          ACE_NTOHL (0x6e746578), 
          ACE_NTOHL (0x74496453), 
          ACE_NTOHL (0x65713a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContextIdSeq:1.0
                    13,
          ACE_NTOHL (0x436f6e74), 
          ACE_NTOHL (0x65787449), 
          ACE_NTOHL (0x64536571), 
          ACE_NTOHL (0x0),  // name = ContextIdSeq
                    CORBA::tk_sequence, // typecode kind
          164, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_alias, // typecode kind for typedefs
            148, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              40,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f436f), 
              ACE_NTOHL (0x6e746578), 
              ACE_NTOHL (0x74496465), 
              ACE_NTOHL (0x6e746966), 
              ACE_NTOHL (0x6965723a), 
              ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ContextIdentifier:1.0
                            18,
              ACE_NTOHL (0x436f6e74), 
              ACE_NTOHL (0x65787449), 
              ACE_NTOHL (0x64656e74), 
              ACE_NTOHL (0x69666965), 
              ACE_NTOHL (0x72000000),  // name = ContextIdentifier
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length


            0U,


        11,
        ACE_NTOHL (0x70617261), 
        ACE_NTOHL (0x6d657465), 
        ACE_NTOHL (0x72730000),  // name = parameters
                CORBA::tk_alias, // typecode kind for typedefs
        496, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5061), 
          ACE_NTOHL (0x72446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParDescriptionSeq:1.0
                    18,
          ACE_NTOHL (0x50617244), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ParDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          416, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            400, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f5061), 
              ACE_NTOHL (0x72616d65), 
              ACE_NTOHL (0x74657244), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ParameterDescription:1.0
                            21,
              ACE_NTOHL (0x50617261), 
              ACE_NTOHL (0x6d657465), 
              ACE_NTOHL (0x72446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ParameterDescription
              4, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
                            CORBA::tk_TypeCode,

              9,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x5f646566), 
              ACE_NTOHL (0x0),  // name = type_def
                            CORBA::tk_objref, // typecode kind
              52, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                30,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4944), 
                ACE_NTOHL (0x4c547970), 
                ACE_NTOHL (0x653a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
                                8,
                ACE_NTOHL (0x49444c54), 
                ACE_NTOHL (0x79706500),  // name = IDLType
                
              5,
              ACE_NTOHL (0x6d6f6465), 
              ACE_NTOHL (0x0),  // name = mode
                            CORBA::tk_enum, // typecode kind
              116, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
                36,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5061), 
                ACE_NTOHL (0x72616d65), 
                ACE_NTOHL (0x7465724d), 
                ACE_NTOHL (0x6f64653a), 
                ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ParameterMode:1.0
                14,
                ACE_NTOHL (0x50617261), 
                ACE_NTOHL (0x6d657465), 
                ACE_NTOHL (0x724d6f64), 
                ACE_NTOHL (0x65000000),  // name = ParameterMode
                3, // member count
                9,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f494e), 
                ACE_NTOHL (0x0),  // name = PARAM_IN
                10,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f4f55), 
                ACE_NTOHL (0x54000000),  // name = PARAM_OUT
                12,
                ACE_NTOHL (0x50415241), 
                ACE_NTOHL (0x4d5f494e), 
                ACE_NTOHL (0x4f555400),  // name = PARAM_INOUT
                

            0U,


        11,
        ACE_NTOHL (0x65786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e730000),  // name = exceptions
                CORBA::tk_alias, // typecode kind for typedefs
        556, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4578), 
          ACE_NTOHL (0x63446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                    18,
          ACE_NTOHL (0x45786344), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          476, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            460, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4578), 
              ACE_NTOHL (0x63657074), 
              ACE_NTOHL (0x696f6e44), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                            21,
              ACE_NTOHL (0x45786365), 
              ACE_NTOHL (0x7074696f), 
              ACE_NTOHL (0x6e446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ExceptionDescription
              5, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              3,
              ACE_NTOHL (0x69640000),  // name = id
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              11,
              ACE_NTOHL (0x64656669), 
              ACE_NTOHL (0x6e65645f), 
              ACE_NTOHL (0x696e0000),  // name = defined_in
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              8,
              ACE_NTOHL (0x76657273), 
              ACE_NTOHL (0x696f6e00),  // name = version
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                34,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5665), 
                ACE_NTOHL (0x7273696f), 
                ACE_NTOHL (0x6e537065), 
                ACE_NTOHL (0x633a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                12,
                ACE_NTOHL (0x56657273), 
                ACE_NTOHL (0x696f6e53), 
                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
                            CORBA::tk_TypeCode,


            0U,



      0U,


  11,
  ACE_NTOHL (0x61747472), 
  ACE_NTOHL (0x69627574), 
  ACE_NTOHL (0x65730000),  // name = attributes
    CORBA::tk_alias, // typecode kind for typedefs
  1860, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    44,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4578), 
    ACE_NTOHL (0x74417474), 
    ACE_NTOHL (0x72446573), 
    ACE_NTOHL (0x63726970), 
    ACE_NTOHL (0x74696f6e), 
    ACE_NTOHL (0x5365713a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExtAttrDescriptionSeq:1.0
        22,
    ACE_NTOHL (0x45787441), 
    ACE_NTOHL (0x74747244), 
    ACE_NTOHL (0x65736372), 
    ACE_NTOHL (0x69707469), 
    ACE_NTOHL (0x6f6e5365), 
    ACE_NTOHL (0x71000000),  // name = ExtAttrDescriptionSeq
        CORBA::tk_sequence, // typecode kind
    1772, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_struct, // typecode kind
      1756, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        46,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4578), 
        ACE_NTOHL (0x74417474), 
        ACE_NTOHL (0x72696275), 
        ACE_NTOHL (0x74654465), 
        ACE_NTOHL (0x73637269), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e3a312e), 
        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAttributeDescription:1.0
                24,
        ACE_NTOHL (0x45787441), 
        ACE_NTOHL (0x74747269), 
        ACE_NTOHL (0x62757465), 
        ACE_NTOHL (0x44657363), 
        ACE_NTOHL (0x72697074), 
        ACE_NTOHL (0x696f6e00),  // name = ExtAttributeDescription
        8, // member count
                5,
        ACE_NTOHL (0x6e616d65), 
        ACE_NTOHL (0x0),  // name = name
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          33,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4964), 
          ACE_NTOHL (0x656e7469), 
          ACE_NTOHL (0x66696572), 
          ACE_NTOHL (0x3a312e30), 
          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                    11,
          ACE_NTOHL (0x4964656e), 
          ACE_NTOHL (0x74696669), 
          ACE_NTOHL (0x65720000),  // name = Identifier
                    CORBA::tk_string, 
          0U, // string length

        3,
        ACE_NTOHL (0x69640000),  // name = id
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        11,
        ACE_NTOHL (0x64656669), 
        ACE_NTOHL (0x6e65645f), 
        ACE_NTOHL (0x696e0000),  // name = defined_in
                CORBA::tk_alias, // typecode kind for typedefs
        72, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          35,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5265), 
          ACE_NTOHL (0x706f7369), 
          ACE_NTOHL (0x746f7279), 
          ACE_NTOHL (0x49643a31), 
          ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                    13,
          ACE_NTOHL (0x5265706f), 
          ACE_NTOHL (0x7369746f), 
          ACE_NTOHL (0x72794964), 
          ACE_NTOHL (0x0),  // name = RepositoryId
                    CORBA::tk_string, 
          0U, // string length

        8,
        ACE_NTOHL (0x76657273), 
        ACE_NTOHL (0x696f6e00),  // name = version
                CORBA::tk_alias, // typecode kind for typedefs
        68, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          34,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f5665), 
          ACE_NTOHL (0x7273696f), 
          ACE_NTOHL (0x6e537065), 
          ACE_NTOHL (0x633a312e), 
          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                    12,
          ACE_NTOHL (0x56657273), 
          ACE_NTOHL (0x696f6e53), 
          ACE_NTOHL (0x70656300),  // name = VersionSpec
                    CORBA::tk_string, 
          0U, // string length

        5,
        ACE_NTOHL (0x74797065), 
        ACE_NTOHL (0x0),  // name = type
                CORBA::tk_TypeCode,

        5,
        ACE_NTOHL (0x6d6f6465), 
        ACE_NTOHL (0x0),  // name = mode
                CORBA::tk_enum, // typecode kind
        104, // encapsulation length
TAO_ENCAP_BYTE_ORDER, // byte order
          36,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4174), 
          ACE_NTOHL (0x74726962), 
          ACE_NTOHL (0x7574654d), 
          ACE_NTOHL (0x6f64653a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/AttributeMode:1.0
          14,
          ACE_NTOHL (0x41747472), 
          ACE_NTOHL (0x69627574), 
          ACE_NTOHL (0x654d6f64), 
          ACE_NTOHL (0x65000000),  // name = AttributeMode
          2, // member count
          12,
          ACE_NTOHL (0x41545452), 
          ACE_NTOHL (0x5f4e4f52), 
          ACE_NTOHL (0x4d414c00),  // name = ATTR_NORMAL
          14,
          ACE_NTOHL (0x41545452), 
          ACE_NTOHL (0x5f524541), 
          ACE_NTOHL (0x444f4e4c), 
          ACE_NTOHL (0x59000000),  // name = ATTR_READONLY
          
        15,
        ACE_NTOHL (0x6765745f), 
        ACE_NTOHL (0x65786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e730000),  // name = get_exceptions
                CORBA::tk_alias, // typecode kind for typedefs
        556, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4578), 
          ACE_NTOHL (0x63446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                    18,
          ACE_NTOHL (0x45786344), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          476, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            460, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4578), 
              ACE_NTOHL (0x63657074), 
              ACE_NTOHL (0x696f6e44), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                            21,
              ACE_NTOHL (0x45786365), 
              ACE_NTOHL (0x7074696f), 
              ACE_NTOHL (0x6e446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ExceptionDescription
              5, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              3,
              ACE_NTOHL (0x69640000),  // name = id
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              11,
              ACE_NTOHL (0x64656669), 
              ACE_NTOHL (0x6e65645f), 
              ACE_NTOHL (0x696e0000),  // name = defined_in
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              8,
              ACE_NTOHL (0x76657273), 
              ACE_NTOHL (0x696f6e00),  // name = version
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                34,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5665), 
                ACE_NTOHL (0x7273696f), 
                ACE_NTOHL (0x6e537065), 
                ACE_NTOHL (0x633a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                12,
                ACE_NTOHL (0x56657273), 
                ACE_NTOHL (0x696f6e53), 
                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
                            CORBA::tk_TypeCode,


            0U,


        15,
        ACE_NTOHL (0x7075745f), 
        ACE_NTOHL (0x65786365), 
        ACE_NTOHL (0x7074696f), 
        ACE_NTOHL (0x6e730000),  // name = put_exceptions
                CORBA::tk_alias, // typecode kind for typedefs
        556, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          40,
          ACE_NTOHL (0x49444c3a), 
          ACE_NTOHL (0x6f6d672e), 
          ACE_NTOHL (0x6f72672f), 
          ACE_NTOHL (0x434f5242), 
          ACE_NTOHL (0x412f4578), 
          ACE_NTOHL (0x63446573), 
          ACE_NTOHL (0x63726970), 
          ACE_NTOHL (0x74696f6e), 
          ACE_NTOHL (0x5365713a), 
          ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/ExcDescriptionSeq:1.0
                    18,
          ACE_NTOHL (0x45786344), 
          ACE_NTOHL (0x65736372), 
          ACE_NTOHL (0x69707469), 
          ACE_NTOHL (0x6f6e5365), 
          ACE_NTOHL (0x71000000),  // name = ExcDescriptionSeq
                    CORBA::tk_sequence, // typecode kind
          476, // encapsulation length
            TAO_ENCAP_BYTE_ORDER, // byte order
            CORBA::tk_struct, // typecode kind
            460, // encapsulation length
              TAO_ENCAP_BYTE_ORDER, // byte order
              43,
              ACE_NTOHL (0x49444c3a), 
              ACE_NTOHL (0x6f6d672e), 
              ACE_NTOHL (0x6f72672f), 
              ACE_NTOHL (0x434f5242), 
              ACE_NTOHL (0x412f4578), 
              ACE_NTOHL (0x63657074), 
              ACE_NTOHL (0x696f6e44), 
              ACE_NTOHL (0x65736372), 
              ACE_NTOHL (0x69707469), 
              ACE_NTOHL (0x6f6e3a31), 
              ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExceptionDescription:1.0
                            21,
              ACE_NTOHL (0x45786365), 
              ACE_NTOHL (0x7074696f), 
              ACE_NTOHL (0x6e446573), 
              ACE_NTOHL (0x63726970), 
              ACE_NTOHL (0x74696f6e), 
              ACE_NTOHL (0x0),  // name = ExceptionDescription
              5, // member count
                            5,
              ACE_NTOHL (0x6e616d65), 
              ACE_NTOHL (0x0),  // name = name
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                33,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f4964), 
                ACE_NTOHL (0x656e7469), 
                ACE_NTOHL (0x66696572), 
                ACE_NTOHL (0x3a312e30), 
                ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
                                11,
                ACE_NTOHL (0x4964656e), 
                ACE_NTOHL (0x74696669), 
                ACE_NTOHL (0x65720000),  // name = Identifier
                                CORBA::tk_string, 
                0U, // string length

              3,
              ACE_NTOHL (0x69640000),  // name = id
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              11,
              ACE_NTOHL (0x64656669), 
              ACE_NTOHL (0x6e65645f), 
              ACE_NTOHL (0x696e0000),  // name = defined_in
                            CORBA::tk_alias, // typecode kind for typedefs
              72, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                35,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5265), 
                ACE_NTOHL (0x706f7369), 
                ACE_NTOHL (0x746f7279), 
                ACE_NTOHL (0x49643a31), 
                ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                                13,
                ACE_NTOHL (0x5265706f), 
                ACE_NTOHL (0x7369746f), 
                ACE_NTOHL (0x72794964), 
                ACE_NTOHL (0x0),  // name = RepositoryId
                                CORBA::tk_string, 
                0U, // string length

              8,
              ACE_NTOHL (0x76657273), 
              ACE_NTOHL (0x696f6e00),  // name = version
                            CORBA::tk_alias, // typecode kind for typedefs
              68, // encapsulation length
                TAO_ENCAP_BYTE_ORDER, // byte order
                34,
                ACE_NTOHL (0x49444c3a), 
                ACE_NTOHL (0x6f6d672e), 
                ACE_NTOHL (0x6f72672f), 
                ACE_NTOHL (0x434f5242), 
                ACE_NTOHL (0x412f5665), 
                ACE_NTOHL (0x7273696f), 
                ACE_NTOHL (0x6e537065), 
                ACE_NTOHL (0x633a312e), 
                ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
                                12,
                ACE_NTOHL (0x56657273), 
                ACE_NTOHL (0x696f6e53), 
                ACE_NTOHL (0x70656300),  // name = VersionSpec
                                CORBA::tk_string, 
                0U, // string length

              5,
              ACE_NTOHL (0x74797065), 
              ACE_NTOHL (0x0),  // name = type
                            CORBA::tk_TypeCode,


            0U,



      0U,


  16,
  ACE_NTOHL (0x62617365), 
  ACE_NTOHL (0x5f696e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63657300),  // name = base_interfaces
    CORBA::tk_alias, // typecode kind for typedefs
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    38,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f5265), 
    ACE_NTOHL (0x706f7369), 
    ACE_NTOHL (0x746f7279), 
    ACE_NTOHL (0x49645365), 
    ACE_NTOHL (0x713a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/RepositoryIdSeq:1.0
        16,
    ACE_NTOHL (0x5265706f), 
    ACE_NTOHL (0x7369746f), 
    ACE_NTOHL (0x72794964), 
    ACE_NTOHL (0x53657100),  // name = RepositoryIdSeq
        CORBA::tk_sequence, // typecode kind
    88, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_alias, // typecode kind for typedefs
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        35,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f5265), 
        ACE_NTOHL (0x706f7369), 
        ACE_NTOHL (0x746f7279), 
        ACE_NTOHL (0x49643a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
                13,
        ACE_NTOHL (0x5265706f), 
        ACE_NTOHL (0x7369746f), 
        ACE_NTOHL (0x72794964), 
        ACE_NTOHL (0x0),  // name = RepositoryId
                CORBA::tk_string, 
        0U, // string length

      0U,


  5,
  ACE_NTOHL (0x74797065), 
  ACE_NTOHL (0x0),  // name = type
    CORBA::tk_TypeCode,

};

static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceAttrExtension_ExtFullInterfaceDescription (
    CORBA::tk_struct,
    sizeof (_oc_CORBA_InterfaceAttrExtension_ExtFullInterfaceDescription),
    (char *) &_oc_CORBA_InterfaceAttrExtension_ExtFullInterfaceDescription,
    0,
    sizeof (CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription)
  );

::CORBA::TypeCode_ptr CORBA::InterfaceAttrExtension::_tc_ExtFullInterfaceDescription =
  &_tc_TAO_tc_CORBA_InterfaceAttrExtension_ExtFullInterfaceDescription;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66

void 
CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  ExtFullInterfaceDescription *_tao_tmp_pointer =
    ACE_static_cast (ExtFullInterfaceDescription *, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription * CORBA::InterfaceAttrExtension::describe_ext_interface (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceAttrExtension_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceAttrExtension_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>::ret_val _tao_retval;
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "describe_ext_interface",
      22,
      this->the_TAO_InterfaceAttrExtension_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::ExtAttributeDef_ptr CORBA::InterfaceAttrExtension::create_ext_attribute (
    const char * id,
    const char * name,
    const char * version,
    CORBA::IDLType_ptr type,
    CORBA::AttributeMode mode,
    const CORBA::ExceptionDefSeq & get_exceptions,
    const CORBA::ExceptionDefSeq & set_exceptions
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_InterfaceAttrExtension_Proxy_Broker_ == 0)
    {
      CORBA_InterfaceAttrExtension_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }
  
  TAO::Arg_Traits<CORBA::ExtAttributeDef>::ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::RepositoryId>::in_arg_val _tao_id (id);
  TAO::Arg_Traits<CORBA::Identifier>::in_arg_val _tao_name (name);
  TAO::Arg_Traits<CORBA::VersionSpec>::in_arg_val _tao_version (version);
  TAO::Arg_Traits<CORBA::IDLType>::in_arg_val _tao_type (type);
  TAO::Arg_Traits<CORBA::AttributeMode>::in_arg_val _tao_mode (mode);
  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::in_arg_val _tao_get_exceptions (get_exceptions);
  TAO::Arg_Traits<CORBA::ExceptionDefSeq>::in_arg_val _tao_set_exceptions (set_exceptions);
  
  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_id,
      &_tao_name,
      &_tao_version,
      &_tao_type,
      &_tao_mode,
      &_tao_get_exceptions,
      &_tao_set_exceptions
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      8,
      "create_ext_attribute",
      20,
      this->the_TAO_InterfaceAttrExtension_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

CORBA::InterfaceAttrExtension::InterfaceAttrExtension (int collocated)
 : the_TAO_InterfaceAttrExtension_Proxy_Broker_ (0)
{
  this->CORBA_InterfaceAttrExtension_setup_collocation (collocated);
}

void
CORBA::InterfaceAttrExtension::CORBA_InterfaceAttrExtension_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_InterfaceAttrExtension_Proxy_Broker_ =
        ::CORBA__TAO_InterfaceAttrExtension_Proxy_Broker_Factory_function_pointer (this);
    }
}

CORBA::InterfaceAttrExtension::~InterfaceAttrExtension (void)
{}

void 
CORBA::InterfaceAttrExtension::_tao_any_destructor (void *_tao_void_pointer)
{
  InterfaceAttrExtension *_tao_tmp_pointer =
    ACE_static_cast (InterfaceAttrExtension *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::InterfaceAttrExtension_ptr
CORBA::InterfaceAttrExtension::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<InterfaceAttrExtension>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0",
        CORBA__TAO_InterfaceAttrExtension_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::InterfaceAttrExtension_ptr
CORBA::InterfaceAttrExtension::_duplicate (InterfaceAttrExtension_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::InterfaceAttrExtension::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::InterfaceAttrExtension::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0";
}

CORBA::Boolean
CORBA::InterfaceAttrExtension::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_InterfaceAttrExtension[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  45,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636541), 
  ACE_NTOHL (0x74747245), 
  ACE_NTOHL (0x7874656e), 
  ACE_NTOHL (0x73696f6e), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/InterfaceAttrExtension:1.0
    23,
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65417474), 
  ACE_NTOHL (0x72457874), 
  ACE_NTOHL (0x656e7369), 
  ACE_NTOHL (0x6f6e0000),  // name = InterfaceAttrExtension
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceAttrExtension (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_InterfaceAttrExtension),
    (char *) &_oc_CORBA_InterfaceAttrExtension,
    0,
    sizeof (CORBA::InterfaceAttrExtension)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_InterfaceAttrExtension =
    &_tc_TAO_tc_CORBA_InterfaceAttrExtension;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ExtInterfaceDef.

CORBA::ExtInterfaceDef_ptr
TAO::Objref_Traits<CORBA::ExtInterfaceDef>::tao_duplicate (
    CORBA::ExtInterfaceDef_ptr p
  )
{
  return CORBA::ExtInterfaceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ExtInterfaceDef>::tao_release (
    CORBA::ExtInterfaceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ExtInterfaceDef_ptr
TAO::Objref_Traits<CORBA::ExtInterfaceDef>::tao_nil (void)
{
  return CORBA::ExtInterfaceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ExtInterfaceDef>::tao_marshal (
    CORBA::ExtInterfaceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ExtInterfaceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::ExtInterfaceDef::ExtInterfaceDef (int collocated)
 : the_TAO_ExtInterfaceDef_Proxy_Broker_ (0)
{
  this->CORBA_ExtInterfaceDef_setup_collocation (collocated);
}

void
CORBA::ExtInterfaceDef::CORBA_ExtInterfaceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ExtInterfaceDef_Proxy_Broker_ =
        ::CORBA__TAO_ExtInterfaceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_InterfaceDef_setup_collocation (collocated);
  this->CORBA_InterfaceAttrExtension_setup_collocation (collocated);
}

CORBA::ExtInterfaceDef::~ExtInterfaceDef (void)
{}

void 
CORBA::ExtInterfaceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ExtInterfaceDef *_tao_tmp_pointer =
    ACE_static_cast (ExtInterfaceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ExtInterfaceDef_ptr
CORBA::ExtInterfaceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ExtInterfaceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ExtInterfaceDef:1.0",
        CORBA__TAO_ExtInterfaceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ExtInterfaceDef_ptr
CORBA::ExtInterfaceDef::_duplicate (ExtInterfaceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ExtInterfaceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ExtInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ExtInterfaceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ExtInterfaceDef:1.0";
}

CORBA::Boolean
CORBA::ExtInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtInterfaceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtInterfaceDef:1.0
    16,
  ACE_NTOHL (0x45787449), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44656600),  // name = ExtInterfaceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtInterfaceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ExtInterfaceDef),
    (char *) &_oc_CORBA_ExtInterfaceDef,
    0,
    sizeof (CORBA::ExtInterfaceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtInterfaceDef =
    &_tc_TAO_tc_CORBA_ExtInterfaceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::AbstractInterfaceDef.

CORBA::AbstractInterfaceDef_ptr
TAO::Objref_Traits<CORBA::AbstractInterfaceDef>::tao_duplicate (
    CORBA::AbstractInterfaceDef_ptr p
  )
{
  return CORBA::AbstractInterfaceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::AbstractInterfaceDef>::tao_release (
    CORBA::AbstractInterfaceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::AbstractInterfaceDef_ptr
TAO::Objref_Traits<CORBA::AbstractInterfaceDef>::tao_nil (void)
{
  return CORBA::AbstractInterfaceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::AbstractInterfaceDef>::tao_marshal (
    CORBA::AbstractInterfaceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_AbstractInterfaceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::AbstractInterfaceDef::AbstractInterfaceDef (int collocated)
 : the_TAO_AbstractInterfaceDef_Proxy_Broker_ (0)
{
  this->CORBA_AbstractInterfaceDef_setup_collocation (collocated);
}

void
CORBA::AbstractInterfaceDef::CORBA_AbstractInterfaceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_AbstractInterfaceDef_Proxy_Broker_ =
        ::CORBA__TAO_AbstractInterfaceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_InterfaceDef_setup_collocation (collocated);
}

CORBA::AbstractInterfaceDef::~AbstractInterfaceDef (void)
{}

void 
CORBA::AbstractInterfaceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  AbstractInterfaceDef *_tao_tmp_pointer =
    ACE_static_cast (AbstractInterfaceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::AbstractInterfaceDef_ptr
CORBA::AbstractInterfaceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<AbstractInterfaceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0",
        CORBA__TAO_AbstractInterfaceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::AbstractInterfaceDef_ptr
CORBA::AbstractInterfaceDef::_duplicate (AbstractInterfaceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::AbstractInterfaceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::AbstractInterfaceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0";
}

CORBA::Boolean
CORBA::AbstractInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_AbstractInterfaceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4162), 
  ACE_NTOHL (0x73747261), 
  ACE_NTOHL (0x6374496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AbstractInterfaceDef:1.0
    21,
  ACE_NTOHL (0x41627374), 
  ACE_NTOHL (0x72616374), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x0),  // name = AbstractInterfaceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_AbstractInterfaceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_AbstractInterfaceDef),
    (char *) &_oc_CORBA_AbstractInterfaceDef,
    0,
    sizeof (CORBA::AbstractInterfaceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_AbstractInterfaceDef =
    &_tc_TAO_tc_CORBA_AbstractInterfaceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ExtAbstractInterfaceDef.

CORBA::ExtAbstractInterfaceDef_ptr
TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>::tao_duplicate (
    CORBA::ExtAbstractInterfaceDef_ptr p
  )
{
  return CORBA::ExtAbstractInterfaceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>::tao_release (
    CORBA::ExtAbstractInterfaceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ExtAbstractInterfaceDef_ptr
TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>::tao_nil (void)
{
  return CORBA::ExtAbstractInterfaceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>::tao_marshal (
    CORBA::ExtAbstractInterfaceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ExtAbstractInterfaceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::ExtAbstractInterfaceDef::ExtAbstractInterfaceDef (int collocated)
 : the_TAO_ExtAbstractInterfaceDef_Proxy_Broker_ (0)
{
  this->CORBA_ExtAbstractInterfaceDef_setup_collocation (collocated);
}

void
CORBA::ExtAbstractInterfaceDef::CORBA_ExtAbstractInterfaceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ExtAbstractInterfaceDef_Proxy_Broker_ =
        ::CORBA__TAO_ExtAbstractInterfaceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_AbstractInterfaceDef_setup_collocation (collocated);
  this->CORBA_InterfaceAttrExtension_setup_collocation (collocated);
}

CORBA::ExtAbstractInterfaceDef::~ExtAbstractInterfaceDef (void)
{}

void 
CORBA::ExtAbstractInterfaceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ExtAbstractInterfaceDef *_tao_tmp_pointer =
    ACE_static_cast (ExtAbstractInterfaceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ExtAbstractInterfaceDef_ptr
CORBA::ExtAbstractInterfaceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ExtAbstractInterfaceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0",
        CORBA__TAO_ExtAbstractInterfaceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ExtAbstractInterfaceDef_ptr
CORBA::ExtAbstractInterfaceDef::_duplicate (ExtAbstractInterfaceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ExtAbstractInterfaceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ExtAbstractInterfaceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0";
}

CORBA::Boolean
CORBA::ExtAbstractInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtAbstractInterfaceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  46,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x74416273), 
  ACE_NTOHL (0x74726163), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x663a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0
    24,
  ACE_NTOHL (0x45787441), 
  ACE_NTOHL (0x62737472), 
  ACE_NTOHL (0x61637449), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x44656600),  // name = ExtAbstractInterfaceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtAbstractInterfaceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ExtAbstractInterfaceDef),
    (char *) &_oc_CORBA_ExtAbstractInterfaceDef,
    0,
    sizeof (CORBA::ExtAbstractInterfaceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtAbstractInterfaceDef =
    &_tc_TAO_tc_CORBA_ExtAbstractInterfaceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::LocalInterfaceDef.

CORBA::LocalInterfaceDef_ptr
TAO::Objref_Traits<CORBA::LocalInterfaceDef>::tao_duplicate (
    CORBA::LocalInterfaceDef_ptr p
  )
{
  return CORBA::LocalInterfaceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::LocalInterfaceDef>::tao_release (
    CORBA::LocalInterfaceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::LocalInterfaceDef_ptr
TAO::Objref_Traits<CORBA::LocalInterfaceDef>::tao_nil (void)
{
  return CORBA::LocalInterfaceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::LocalInterfaceDef>::tao_marshal (
    CORBA::LocalInterfaceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_LocalInterfaceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::LocalInterfaceDef::LocalInterfaceDef (int collocated)
 : the_TAO_LocalInterfaceDef_Proxy_Broker_ (0)
{
  this->CORBA_LocalInterfaceDef_setup_collocation (collocated);
}

void
CORBA::LocalInterfaceDef::CORBA_LocalInterfaceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_LocalInterfaceDef_Proxy_Broker_ =
        ::CORBA__TAO_LocalInterfaceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_InterfaceDef_setup_collocation (collocated);
}

CORBA::LocalInterfaceDef::~LocalInterfaceDef (void)
{}

void 
CORBA::LocalInterfaceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  LocalInterfaceDef *_tao_tmp_pointer =
    ACE_static_cast (LocalInterfaceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::LocalInterfaceDef_ptr
CORBA::LocalInterfaceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<LocalInterfaceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/LocalInterfaceDef:1.0",
        CORBA__TAO_LocalInterfaceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::LocalInterfaceDef_ptr
CORBA::LocalInterfaceDef::_duplicate (LocalInterfaceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::LocalInterfaceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::LocalInterfaceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/LocalInterfaceDef:1.0";
}

CORBA::Boolean
CORBA::LocalInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_LocalInterfaceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4c6f), 
  ACE_NTOHL (0x63616c49), 
  ACE_NTOHL (0x6e746572), 
  ACE_NTOHL (0x66616365), 
  ACE_NTOHL (0x4465663a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/LocalInterfaceDef:1.0
    18,
  ACE_NTOHL (0x4c6f6361), 
  ACE_NTOHL (0x6c496e74), 
  ACE_NTOHL (0x65726661), 
  ACE_NTOHL (0x63654465), 
  ACE_NTOHL (0x66000000),  // name = LocalInterfaceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_LocalInterfaceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_LocalInterfaceDef),
    (char *) &_oc_CORBA_LocalInterfaceDef,
    0,
    sizeof (CORBA::LocalInterfaceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_LocalInterfaceDef =
    &_tc_TAO_tc_CORBA_LocalInterfaceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

#if defined (_MSC_VER)

// Traits specializations for CORBA::ExtLocalInterfaceDef.

CORBA::ExtLocalInterfaceDef_ptr
TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>::tao_duplicate (
    CORBA::ExtLocalInterfaceDef_ptr p
  )
{
  return CORBA::ExtLocalInterfaceDef::_duplicate (p);
}

void
TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>::tao_release (
    CORBA::ExtLocalInterfaceDef_ptr p
  )
{
  CORBA::release (p);
}

CORBA::ExtLocalInterfaceDef_ptr
TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>::tao_nil (void)
{
  return CORBA::ExtLocalInterfaceDef::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>::tao_marshal (
    CORBA::ExtLocalInterfaceDef_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

#endif /* _MSC_VER */

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CORBA__TAO_ExtLocalInterfaceDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

CORBA::ExtLocalInterfaceDef::ExtLocalInterfaceDef (int collocated)
 : the_TAO_ExtLocalInterfaceDef_Proxy_Broker_ (0)
{
  this->CORBA_ExtLocalInterfaceDef_setup_collocation (collocated);
}

void
CORBA::ExtLocalInterfaceDef::CORBA_ExtLocalInterfaceDef_setup_collocation (int collocated)
{
  if (collocated)
    {
      this->the_TAO_ExtLocalInterfaceDef_Proxy_Broker_ =
        ::CORBA__TAO_ExtLocalInterfaceDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBA_LocalInterfaceDef_setup_collocation (collocated);
  this->CORBA_InterfaceAttrExtension_setup_collocation (collocated);
}

CORBA::ExtLocalInterfaceDef::~ExtLocalInterfaceDef (void)
{}

void 
CORBA::ExtLocalInterfaceDef::_tao_any_destructor (void *_tao_void_pointer)
{
  ExtLocalInterfaceDef *_tao_tmp_pointer =
    ACE_static_cast (ExtLocalInterfaceDef *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

CORBA::ExtLocalInterfaceDef_ptr
CORBA::ExtLocalInterfaceDef::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<ExtLocalInterfaceDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0",
        CORBA__TAO_ExtLocalInterfaceDef_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

CORBA::ExtLocalInterfaceDef_ptr
CORBA::ExtLocalInterfaceDef::_duplicate (ExtLocalInterfaceDef_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
CORBA::ExtLocalInterfaceDef::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IRObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Contained:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/IDLType:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* CORBA::ExtLocalInterfaceDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0";
}

CORBA::Boolean
CORBA::ExtLocalInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CORBA_ExtLocalInterfaceDef[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x434f5242), 
  ACE_NTOHL (0x412f4578), 
  ACE_NTOHL (0x744c6f63), 
  ACE_NTOHL (0x616c496e), 
  ACE_NTOHL (0x74657266), 
  ACE_NTOHL (0x61636544), 
  ACE_NTOHL (0x65663a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0
    21,
  ACE_NTOHL (0x4578744c), 
  ACE_NTOHL (0x6f63616c), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72666163), 
  ACE_NTOHL (0x65446566), 
  ACE_NTOHL (0x0),  // name = ExtLocalInterfaceDef
  };

static CORBA::TypeCode _tc_TAO_tc_CORBA_ExtLocalInterfaceDef (
    CORBA::tk_objref,
    sizeof (_oc_CORBA_ExtLocalInterfaceDef),
    (char *) &_oc_CORBA_ExtLocalInterfaceDef,
    0,
    sizeof (CORBA::ExtLocalInterfaceDef)
  );

namespace CORBA
{
  ::CORBA::TypeCode_ptr _tc_ExtLocalInterfaceDef =
    &_tc_TAO_tc_CORBA_ExtLocalInterfaceDef;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::PrimitiveKind _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CORBA::PrimitiveKind>::insert (
      _tao_any,
      CORBA::_tc_PrimitiveKind,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::PrimitiveKind &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CORBA::PrimitiveKind>::extract (
        _tao_any,
        CORBA::_tc_PrimitiveKind,
        _tao_elem 
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::Repository>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Repository_ptr _tao_elem
  )
{
  CORBA::Repository_ptr _tao_objptr =
    CORBA::Repository::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::Repository_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::Repository>::insert (
      _tao_any,
      CORBA::Repository::_tao_any_destructor,
      CORBA::_tc_Repository,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::Repository_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::Repository>::extract (
        _tao_any,
        CORBA::Repository::_tao_any_destructor,
        CORBA::_tc_Repository,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ModuleDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ModuleDef_ptr _tao_elem
  )
{
  CORBA::ModuleDef_ptr _tao_objptr =
    CORBA::ModuleDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ModuleDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ModuleDef>::insert (
      _tao_any,
      CORBA::ModuleDef::_tao_any_destructor,
      CORBA::_tc_ModuleDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ModuleDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ModuleDef>::extract (
        _tao_any,
        CORBA::ModuleDef::_tao_any_destructor,
        CORBA::_tc_ModuleDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ModuleDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ModuleDescription>::insert_copy (
      _tao_any,
      CORBA::ModuleDescription::_tao_any_destructor,
      CORBA::_tc_ModuleDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ModuleDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ModuleDescription>::insert (
      _tao_any,
      CORBA::ModuleDescription::_tao_any_destructor,
      CORBA::_tc_ModuleDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ModuleDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ModuleDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ModuleDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ModuleDescription>::extract (
        _tao_any,
        CORBA::ModuleDescription::_tao_any_destructor,
        CORBA::_tc_ModuleDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ConstantDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ConstantDef_ptr _tao_elem
  )
{
  CORBA::ConstantDef_ptr _tao_objptr =
    CORBA::ConstantDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ConstantDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ConstantDef>::insert (
      _tao_any,
      CORBA::ConstantDef::_tao_any_destructor,
      CORBA::_tc_ConstantDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ConstantDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ConstantDef>::extract (
        _tao_any,
        CORBA::ConstantDef::_tao_any_destructor,
        CORBA::_tc_ConstantDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ConstantDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ConstantDescription>::insert_copy (
      _tao_any,
      CORBA::ConstantDescription::_tao_any_destructor,
      CORBA::_tc_ConstantDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ConstantDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ConstantDescription>::insert (
      _tao_any,
      CORBA::ConstantDescription::_tao_any_destructor,
      CORBA::_tc_ConstantDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ConstantDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ConstantDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ConstantDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ConstantDescription>::extract (
        _tao_any,
        CORBA::ConstantDescription::_tao_any_destructor,
        CORBA::_tc_ConstantDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::StructDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::StructDef_ptr _tao_elem
  )
{
  CORBA::StructDef_ptr _tao_objptr =
    CORBA::StructDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::StructDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::StructDef>::insert (
      _tao_any,
      CORBA::StructDef::_tao_any_destructor,
      CORBA::_tc_StructDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::StructDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::StructDef>::extract (
        _tao_any,
        CORBA::StructDef::_tao_any_destructor,
        CORBA::_tc_StructDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::UnionDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::UnionDef_ptr _tao_elem
  )
{
  CORBA::UnionDef_ptr _tao_objptr =
    CORBA::UnionDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::UnionDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::UnionDef>::insert (
      _tao_any,
      CORBA::UnionDef::_tao_any_destructor,
      CORBA::_tc_UnionDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::UnionDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::UnionDef>::extract (
        _tao_any,
        CORBA::UnionDef::_tao_any_destructor,
        CORBA::_tc_UnionDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::EnumDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::EnumDef_ptr _tao_elem
  )
{
  CORBA::EnumDef_ptr _tao_objptr =
    CORBA::EnumDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::EnumDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::EnumDef>::insert (
      _tao_any,
      CORBA::EnumDef::_tao_any_destructor,
      CORBA::_tc_EnumDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::EnumDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::EnumDef>::extract (
        _tao_any,
        CORBA::EnumDef::_tao_any_destructor,
        CORBA::_tc_EnumDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::AliasDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AliasDef_ptr _tao_elem
  )
{
  CORBA::AliasDef_ptr _tao_objptr =
    CORBA::AliasDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AliasDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::AliasDef>::insert (
      _tao_any,
      CORBA::AliasDef::_tao_any_destructor,
      CORBA::_tc_AliasDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AliasDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::AliasDef>::extract (
        _tao_any,
        CORBA::AliasDef::_tao_any_destructor,
        CORBA::_tc_AliasDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::NativeDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::NativeDef_ptr _tao_elem
  )
{
  CORBA::NativeDef_ptr _tao_objptr =
    CORBA::NativeDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::NativeDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::NativeDef>::insert (
      _tao_any,
      CORBA::NativeDef::_tao_any_destructor,
      CORBA::_tc_NativeDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::NativeDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::NativeDef>::extract (
        _tao_any,
        CORBA::NativeDef::_tao_any_destructor,
        CORBA::_tc_NativeDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::PrimitiveDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::PrimitiveDef_ptr _tao_elem
  )
{
  CORBA::PrimitiveDef_ptr _tao_objptr =
    CORBA::PrimitiveDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::PrimitiveDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::PrimitiveDef>::insert (
      _tao_any,
      CORBA::PrimitiveDef::_tao_any_destructor,
      CORBA::_tc_PrimitiveDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::PrimitiveDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::PrimitiveDef>::extract (
        _tao_any,
        CORBA::PrimitiveDef::_tao_any_destructor,
        CORBA::_tc_PrimitiveDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::StringDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::StringDef_ptr _tao_elem
  )
{
  CORBA::StringDef_ptr _tao_objptr =
    CORBA::StringDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::StringDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::StringDef>::insert (
      _tao_any,
      CORBA::StringDef::_tao_any_destructor,
      CORBA::_tc_StringDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::StringDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::StringDef>::extract (
        _tao_any,
        CORBA::StringDef::_tao_any_destructor,
        CORBA::_tc_StringDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::WstringDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::WstringDef_ptr _tao_elem
  )
{
  CORBA::WstringDef_ptr _tao_objptr =
    CORBA::WstringDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::WstringDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::WstringDef>::insert (
      _tao_any,
      CORBA::WstringDef::_tao_any_destructor,
      CORBA::_tc_WstringDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::WstringDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::WstringDef>::extract (
        _tao_any,
        CORBA::WstringDef::_tao_any_destructor,
        CORBA::_tc_WstringDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::SequenceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::SequenceDef_ptr _tao_elem
  )
{
  CORBA::SequenceDef_ptr _tao_objptr =
    CORBA::SequenceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::SequenceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::SequenceDef>::insert (
      _tao_any,
      CORBA::SequenceDef::_tao_any_destructor,
      CORBA::_tc_SequenceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::SequenceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::SequenceDef>::extract (
        _tao_any,
        CORBA::SequenceDef::_tao_any_destructor,
        CORBA::_tc_SequenceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ArrayDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ArrayDef_ptr _tao_elem
  )
{
  CORBA::ArrayDef_ptr _tao_objptr =
    CORBA::ArrayDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ArrayDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ArrayDef>::insert (
      _tao_any,
      CORBA::ArrayDef::_tao_any_destructor,
      CORBA::_tc_ArrayDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ArrayDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ArrayDef>::extract (
        _tao_any,
        CORBA::ArrayDef::_tao_any_destructor,
        CORBA::_tc_ArrayDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ExceptionDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExceptionDef_ptr _tao_elem
  )
{
  CORBA::ExceptionDef_ptr _tao_objptr =
    CORBA::ExceptionDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExceptionDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ExceptionDef>::insert (
      _tao_any,
      CORBA::ExceptionDef::_tao_any_destructor,
      CORBA::_tc_ExceptionDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExceptionDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ExceptionDef>::extract (
        _tao_any,
        CORBA::ExceptionDef::_tao_any_destructor,
        CORBA::_tc_ExceptionDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExceptionDefSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExceptionDefSeq>::insert_copy (
      _tao_any,
      CORBA::ExceptionDefSeq::_tao_any_destructor,
      CORBA::_tc_ExceptionDefSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExceptionDefSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExceptionDefSeq>::insert (
      _tao_any,
      CORBA::ExceptionDefSeq::_tao_any_destructor,
      CORBA::_tc_ExceptionDefSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExceptionDefSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExceptionDefSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExceptionDefSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExceptionDefSeq>::extract (
        _tao_any,
        CORBA::ExceptionDefSeq::_tao_any_destructor,
        CORBA::_tc_ExceptionDefSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AttributeMode _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CORBA::AttributeMode>::insert (
      _tao_any,
      CORBA::_tc_AttributeMode,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AttributeMode &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CORBA::AttributeMode>::extract (
        _tao_any,
        CORBA::_tc_AttributeMode,
        _tao_elem 
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::AttributeDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AttributeDef_ptr _tao_elem
  )
{
  CORBA::AttributeDef_ptr _tao_objptr =
    CORBA::AttributeDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AttributeDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::AttributeDef>::insert (
      _tao_any,
      CORBA::AttributeDef::_tao_any_destructor,
      CORBA::_tc_AttributeDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AttributeDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::AttributeDef>::extract (
        _tao_any,
        CORBA::AttributeDef::_tao_any_destructor,
        CORBA::_tc_AttributeDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::AttributeDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::AttributeDescription>::insert_copy (
      _tao_any,
      CORBA::AttributeDescription::_tao_any_destructor,
      CORBA::_tc_AttributeDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AttributeDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::AttributeDescription>::insert (
      _tao_any,
      CORBA::AttributeDescription::_tao_any_destructor,
      CORBA::_tc_AttributeDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AttributeDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::AttributeDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::AttributeDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::AttributeDescription>::extract (
        _tao_any,
        CORBA::AttributeDescription::_tao_any_destructor,
        CORBA::_tc_AttributeDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtAttributeDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtAttributeDescription>::insert_copy (
      _tao_any,
      CORBA::ExtAttributeDescription::_tao_any_destructor,
      CORBA::_tc_ExtAttributeDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAttributeDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtAttributeDescription>::insert (
      _tao_any,
      CORBA::ExtAttributeDescription::_tao_any_destructor,
      CORBA::_tc_ExtAttributeDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtAttributeDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtAttributeDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtAttributeDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtAttributeDescription>::extract (
        _tao_any,
        CORBA::ExtAttributeDescription::_tao_any_destructor,
        CORBA::_tc_ExtAttributeDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ExtAttributeDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAttributeDef_ptr _tao_elem
  )
{
  CORBA::ExtAttributeDef_ptr _tao_objptr =
    CORBA::ExtAttributeDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAttributeDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ExtAttributeDef>::insert (
      _tao_any,
      CORBA::ExtAttributeDef::_tao_any_destructor,
      CORBA::_tc_ExtAttributeDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtAttributeDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ExtAttributeDef>::extract (
        _tao_any,
        CORBA::ExtAttributeDef::_tao_any_destructor,
        CORBA::_tc_ExtAttributeDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::OperationMode _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CORBA::OperationMode>::insert (
      _tao_any,
      CORBA::_tc_OperationMode,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::OperationMode &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CORBA::OperationMode>::extract (
        _tao_any,
        CORBA::_tc_OperationMode,
        _tao_elem 
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ParameterDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ParameterDescription>::insert_copy (
      _tao_any,
      CORBA::ParameterDescription::_tao_any_destructor,
      CORBA::_tc_ParameterDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ParameterDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ParameterDescription>::insert (
      _tao_any,
      CORBA::ParameterDescription::_tao_any_destructor,
      CORBA::_tc_ParameterDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ParameterDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ParameterDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ParameterDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ParameterDescription>::extract (
        _tao_any,
        CORBA::ParameterDescription::_tao_any_destructor,
        CORBA::_tc_ParameterDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ParDescriptionSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ParDescriptionSeq>::insert_copy (
      _tao_any,
      CORBA::ParDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_ParDescriptionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ParDescriptionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ParDescriptionSeq>::insert (
      _tao_any,
      CORBA::ParDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_ParDescriptionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ParDescriptionSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ParDescriptionSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ParDescriptionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ParDescriptionSeq>::extract (
        _tao_any,
        CORBA::ParDescriptionSeq::_tao_any_destructor,
        CORBA::_tc_ParDescriptionSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ContextIdSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ContextIdSeq>::insert_copy (
      _tao_any,
      CORBA::ContextIdSeq::_tao_any_destructor,
      CORBA::_tc_ContextIdSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ContextIdSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ContextIdSeq>::insert (
      _tao_any,
      CORBA::ContextIdSeq::_tao_any_destructor,
      CORBA::_tc_ContextIdSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ContextIdSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ContextIdSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ContextIdSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ContextIdSeq>::extract (
        _tao_any,
        CORBA::ContextIdSeq::_tao_any_destructor,
        CORBA::_tc_ContextIdSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::OperationDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::OperationDef_ptr _tao_elem
  )
{
  CORBA::OperationDef_ptr _tao_objptr =
    CORBA::OperationDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::OperationDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::OperationDef>::insert (
      _tao_any,
      CORBA::OperationDef::_tao_any_destructor,
      CORBA::_tc_OperationDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::OperationDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::OperationDef>::extract (
        _tao_any,
        CORBA::OperationDef::_tao_any_destructor,
        CORBA::_tc_OperationDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::OperationDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::OperationDescription>::insert_copy (
      _tao_any,
      CORBA::OperationDescription::_tao_any_destructor,
      CORBA::_tc_OperationDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::OperationDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::OperationDescription>::insert (
      _tao_any,
      CORBA::OperationDescription::_tao_any_destructor,
      CORBA::_tc_OperationDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::OperationDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::OperationDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::OperationDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::OperationDescription>::extract (
        _tao_any,
        CORBA::OperationDescription::_tao_any_destructor,
        CORBA::_tc_OperationDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::RepositoryIdSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::RepositoryIdSeq>::insert_copy (
      _tao_any,
      CORBA::RepositoryIdSeq::_tao_any_destructor,
      CORBA::_tc_RepositoryIdSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::RepositoryIdSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::RepositoryIdSeq>::insert (
      _tao_any,
      CORBA::RepositoryIdSeq::_tao_any_destructor,
      CORBA::_tc_RepositoryIdSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::RepositoryIdSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::RepositoryIdSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::RepositoryIdSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::RepositoryIdSeq>::extract (
        _tao_any,
        CORBA::RepositoryIdSeq::_tao_any_destructor,
        CORBA::_tc_RepositoryIdSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::OpDescriptionSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::OpDescriptionSeq>::insert_copy (
      _tao_any,
      CORBA::OpDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_OpDescriptionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::OpDescriptionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::OpDescriptionSeq>::insert (
      _tao_any,
      CORBA::OpDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_OpDescriptionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::OpDescriptionSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::OpDescriptionSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::OpDescriptionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::OpDescriptionSeq>::extract (
        _tao_any,
        CORBA::OpDescriptionSeq::_tao_any_destructor,
        CORBA::_tc_OpDescriptionSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::AttrDescriptionSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::AttrDescriptionSeq>::insert_copy (
      _tao_any,
      CORBA::AttrDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_AttrDescriptionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AttrDescriptionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::AttrDescriptionSeq>::insert (
      _tao_any,
      CORBA::AttrDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_AttrDescriptionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AttrDescriptionSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::AttrDescriptionSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::AttrDescriptionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::AttrDescriptionSeq>::extract (
        _tao_any,
        CORBA::AttrDescriptionSeq::_tao_any_destructor,
        CORBA::_tc_AttrDescriptionSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::ExtAttrDescriptionSeq &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtAttrDescriptionSeq>::insert_copy (
      _tao_any,
      CORBA::ExtAttrDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_ExtAttrDescriptionSeq,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAttrDescriptionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::ExtAttrDescriptionSeq>::insert (
      _tao_any,
      CORBA::ExtAttrDescriptionSeq::_tao_any_destructor,
      CORBA::_tc_ExtAttrDescriptionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtAttrDescriptionSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::ExtAttrDescriptionSeq *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::ExtAttrDescriptionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::ExtAttrDescriptionSeq>::extract (
        _tao_any,
        CORBA::ExtAttrDescriptionSeq::_tao_any_destructor,
        CORBA::_tc_ExtAttrDescriptionSeq,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::InterfaceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceDef_ptr _tao_elem
  )
{
  CORBA::InterfaceDef_ptr _tao_objptr =
    CORBA::InterfaceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::InterfaceDef>::insert (
      _tao_any,
      CORBA::InterfaceDef::_tao_any_destructor,
      CORBA::_tc_InterfaceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InterfaceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::InterfaceDef>::extract (
        _tao_any,
        CORBA::InterfaceDef::_tao_any_destructor,
        CORBA::_tc_InterfaceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::InterfaceDef::FullInterfaceDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceDef::FullInterfaceDescription>::insert_copy (
      _tao_any,
      CORBA::InterfaceDef::FullInterfaceDescription::_tao_any_destructor,
      CORBA::InterfaceDef::_tc_FullInterfaceDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceDef::FullInterfaceDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceDef::FullInterfaceDescription>::insert (
      _tao_any,
      CORBA::InterfaceDef::FullInterfaceDescription::_tao_any_destructor,
      CORBA::InterfaceDef::_tc_FullInterfaceDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InterfaceDef::FullInterfaceDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::InterfaceDef::FullInterfaceDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::InterfaceDef::FullInterfaceDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::InterfaceDef::FullInterfaceDescription>::extract (
        _tao_any,
        CORBA::InterfaceDef::FullInterfaceDescription::_tao_any_destructor,
        CORBA::InterfaceDef::_tc_FullInterfaceDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::InterfaceDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceDescription>::insert_copy (
      _tao_any,
      CORBA::InterfaceDescription::_tao_any_destructor,
      CORBA::_tc_InterfaceDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceDescription>::insert (
      _tao_any,
      CORBA::InterfaceDescription::_tao_any_destructor,
      CORBA::_tc_InterfaceDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InterfaceDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::InterfaceDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::InterfaceDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::InterfaceDescription>::extract (
        _tao_any,
        CORBA::InterfaceDescription::_tao_any_destructor,
        CORBA::_tc_InterfaceDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::InterfaceAttrExtension>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceAttrExtension_ptr _tao_elem
  )
{
  CORBA::InterfaceAttrExtension_ptr _tao_objptr =
    CORBA::InterfaceAttrExtension::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceAttrExtension_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::InterfaceAttrExtension>::insert (
      _tao_any,
      CORBA::InterfaceAttrExtension::_tao_any_destructor,
      CORBA::_tc_InterfaceAttrExtension,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InterfaceAttrExtension_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::InterfaceAttrExtension>::extract (
        _tao_any,
        CORBA::InterfaceAttrExtension::_tao_any_destructor,
        CORBA::_tc_InterfaceAttrExtension,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>::insert_copy (
      _tao_any,
      CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription::_tao_any_destructor,
      CORBA::InterfaceAttrExtension::_tc_ExtFullInterfaceDescription,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>::insert (
      _tao_any,
      CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription::_tao_any_destructor,
      CORBA::InterfaceAttrExtension::_tc_ExtFullInterfaceDescription,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>::extract (
        _tao_any,
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription::_tao_any_destructor,
        CORBA::InterfaceAttrExtension::_tc_ExtFullInterfaceDescription,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ExtInterfaceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtInterfaceDef_ptr _tao_elem
  )
{
  CORBA::ExtInterfaceDef_ptr _tao_objptr =
    CORBA::ExtInterfaceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtInterfaceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ExtInterfaceDef>::insert (
      _tao_any,
      CORBA::ExtInterfaceDef::_tao_any_destructor,
      CORBA::_tc_ExtInterfaceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtInterfaceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ExtInterfaceDef>::extract (
        _tao_any,
        CORBA::ExtInterfaceDef::_tao_any_destructor,
        CORBA::_tc_ExtInterfaceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::AbstractInterfaceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AbstractInterfaceDef_ptr _tao_elem
  )
{
  CORBA::AbstractInterfaceDef_ptr _tao_objptr =
    CORBA::AbstractInterfaceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::AbstractInterfaceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::AbstractInterfaceDef>::insert (
      _tao_any,
      CORBA::AbstractInterfaceDef::_tao_any_destructor,
      CORBA::_tc_AbstractInterfaceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::AbstractInterfaceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::AbstractInterfaceDef>::extract (
        _tao_any,
        CORBA::AbstractInterfaceDef::_tao_any_destructor,
        CORBA::_tc_AbstractInterfaceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ExtAbstractInterfaceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAbstractInterfaceDef_ptr _tao_elem
  )
{
  CORBA::ExtAbstractInterfaceDef_ptr _tao_objptr =
    CORBA::ExtAbstractInterfaceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtAbstractInterfaceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ExtAbstractInterfaceDef>::insert (
      _tao_any,
      CORBA::ExtAbstractInterfaceDef::_tao_any_destructor,
      CORBA::_tc_ExtAbstractInterfaceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtAbstractInterfaceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ExtAbstractInterfaceDef>::extract (
        _tao_any,
        CORBA::ExtAbstractInterfaceDef::_tao_any_destructor,
        CORBA::_tc_ExtAbstractInterfaceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::LocalInterfaceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::LocalInterfaceDef_ptr _tao_elem
  )
{
  CORBA::LocalInterfaceDef_ptr _tao_objptr =
    CORBA::LocalInterfaceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::LocalInterfaceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::LocalInterfaceDef>::insert (
      _tao_any,
      CORBA::LocalInterfaceDef::_tao_any_destructor,
      CORBA::_tc_LocalInterfaceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::LocalInterfaceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::LocalInterfaceDef>::extract (
        _tao_any,
        CORBA::LocalInterfaceDef::_tao_any_destructor,
        CORBA::_tc_LocalInterfaceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<CORBA::ExtLocalInterfaceDef>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtLocalInterfaceDef_ptr _tao_elem
  )
{
  CORBA::ExtLocalInterfaceDef_ptr _tao_objptr =
    CORBA::ExtLocalInterfaceDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    CORBA::ExtLocalInterfaceDef_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<CORBA::ExtLocalInterfaceDef>::insert (
      _tao_any,
      CORBA::ExtLocalInterfaceDef::_tao_any_destructor,
      CORBA::_tc_ExtLocalInterfaceDef,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CORBA::ExtLocalInterfaceDef_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<CORBA::ExtLocalInterfaceDef>::extract (
        _tao_any,
        CORBA::ExtLocalInterfaceDef::_tao_any_destructor,
        CORBA::_tc_ExtLocalInterfaceDef,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::Repository_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::Repository_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::Repository RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_Repository_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ModuleDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ModuleDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ModuleDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ConstantDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ConstantDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ConstantDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ConstantDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StructDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::StructDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::StructDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_StructDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::UnionDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::UnionDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::UnionDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_UnionDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::EnumDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::EnumDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::EnumDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_EnumDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AliasDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AliasDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::AliasDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_AliasDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::NativeDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::NativeDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::NativeDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_NativeDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::PrimitiveDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::PrimitiveDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::PrimitiveDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_PrimitiveDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::StringDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::StringDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::StringDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_StringDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::WstringDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::WstringDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::WstringDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_WstringDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::SequenceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::SequenceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::SequenceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_SequenceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ArrayDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ArrayDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ArrayDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ArrayDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExceptionDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExceptionDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ExceptionDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ExceptionDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExceptionDefSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExceptionDefSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExceptionDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag =
            _tao_sequence[i].in ()->marshal (strm);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExceptionDefSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExceptionDefSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AttributeDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AttributeDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::AttributeDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_AttributeDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtAttributeDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtAttributeDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ExtAttributeDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ExtAttributeDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ParDescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_ParDescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ParDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ParDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ParDescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ContextIdSeq_CPP_
#define _TAO_CDR_OP_CORBA_ContextIdSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ContextIdSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ContextIdSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        
      }
    
    return _tao_marshal_flag;
  
  }

return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ContextIdSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::OperationDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::OperationDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::OperationDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_OperationDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_RepositoryIdSeq_CPP_
#define _TAO_CDR_OP_CORBA_RepositoryIdSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::RepositoryIdSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::RepositoryIdSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        
      }
    
    return _tao_marshal_flag;
  
  }

return 0;
}

#endif /* _TAO_CDR_OP_CORBA_RepositoryIdSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_OpDescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_OpDescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::OpDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::OpDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_OpDescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_AttrDescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_AttrDescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AttrDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AttrDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_AttrDescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:95

#if !defined _TAO_CDR_OP_CORBA_ExtAttrDescriptionSeq_CPP_
#define _TAO_CDR_OP_CORBA_ExtAttrDescriptionSeq_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtAttrDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtAttrDescriptionSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_CDR_OP_CORBA_ExtAttrDescriptionSeq_CPP_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::InterfaceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_InterfaceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceAttrExtension_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceAttrExtension_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::InterfaceAttrExtension RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_InterfaceAttrExtension_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtInterfaceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ExtInterfaceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ExtInterfaceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AbstractInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AbstractInterfaceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::AbstractInterfaceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_AbstractInterfaceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtAbstractInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtAbstractInterfaceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ExtAbstractInterfaceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ExtAbstractInterfaceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::LocalInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::LocalInterfaceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::LocalInterfaceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_LocalInterfaceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExtLocalInterfaceDef_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExtLocalInterfaceDef_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if ((strm >> obj.inout ()) == 0)
    {
      return 0;
    }
  
  typedef ::CORBA::ExtLocalInterfaceDef RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CORBA__TAO_ExtLocalInterfaceDef_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/root.cpp:1702

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Contained>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Contained_ptr,
        CORBA::Contained_var,
        CORBA::Contained_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::Contained_ptr,
        CORBA::Contained_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::PrimitiveDef_ptr,
        CORBA::PrimitiveDef_var
      >;

  template class
    TAO::In_Basic_Argument_T<
        CORBA::PrimitiveKind
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::StringDef_ptr,
        CORBA::StringDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::WstringDef_ptr,
        CORBA::WstringDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::SequenceDef_ptr,
        CORBA::SequenceDef_var
      >;

  template class
    TAO::In_Object_Argument_T<
        CORBA::IDLType_ptr
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ArrayDef_ptr,
        CORBA::ArrayDef_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::FixedDef_ptr,
        CORBA::FixedDef_var
      >;

  template class TAO::Objref_Traits<CORBA::Repository>;

  template class
    TAO_Objref_Var_T<
        CORBA::Repository,
        TAO::Objref_Traits<CORBA::Repository>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::Repository,
        TAO::Objref_Traits<CORBA::Repository>
      >;

  template class
    TAO::Narrow_Utils<CORBA::Repository>;

  template class
    TAO::Any_Impl_T<
        CORBA::Repository
      >;

  template class TAO::Objref_Traits<CORBA::ModuleDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ModuleDef,
        TAO::Objref_Traits<CORBA::ModuleDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ModuleDef,
        TAO::Objref_Traits<CORBA::ModuleDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ModuleDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ModuleDef
      >;

  template class TAO::Objref_Traits<CORBA::ConstantDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ConstantDef,
        TAO::Objref_Traits<CORBA::ConstantDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ConstantDef,
        TAO::Objref_Traits<CORBA::ConstantDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ConstantDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ConstantDef
      >;

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::IDLType>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::IDLType_ptr,
        CORBA::IDLType_var,
        CORBA::IDLType_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::StructDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::StructDef,
        TAO::Objref_Traits<CORBA::StructDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::StructDef,
        TAO::Objref_Traits<CORBA::StructDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::StructDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::StructDef
      >;

  template class TAO::Objref_Traits<CORBA::UnionDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::UnionDef,
        TAO::Objref_Traits<CORBA::UnionDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::UnionDef,
        TAO::Objref_Traits<CORBA::UnionDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::UnionDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::UnionDef
      >;

  template class TAO::Objref_Traits<CORBA::EnumDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::EnumDef,
        TAO::Objref_Traits<CORBA::EnumDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::EnumDef,
        TAO::Objref_Traits<CORBA::EnumDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::EnumDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::EnumDef
      >;

  template class TAO::Objref_Traits<CORBA::AliasDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::AliasDef,
        TAO::Objref_Traits<CORBA::AliasDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::AliasDef,
        TAO::Objref_Traits<CORBA::AliasDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::AliasDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::AliasDef
      >;

#if !defined (_CORBA_INTERFACEDEF_FULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF_FULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InterfaceDef::FullInterfaceDescription>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::InterfaceDef::FullInterfaceDescription,
        CORBA::InterfaceDef::FullInterfaceDescription_var,
        CORBA::InterfaceDef::FullInterfaceDescription_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::OpDescriptionSeq,
        CORBA::OperationDescription
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::OpDescriptionSeq,
        CORBA::OperationDescription
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::OpDescriptionSeq,
        CORBA::OpDescriptionSeq_var,
        CORBA::OperationDescription
      >;

#if !defined (_CORBA_OPDESCRIPTIONSEQ_CS_)
#define _CORBA_OPDESCRIPTIONSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::OperationDescription
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::OpDescriptionSeq
      >;

  template class
    TAO_VarSeq_Var_T<
        CORBA::AttrDescriptionSeq,
        CORBA::AttributeDescription
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::AttrDescriptionSeq,
        CORBA::AttributeDescription
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::AttrDescriptionSeq,
        CORBA::AttrDescriptionSeq_var,
        CORBA::AttributeDescription
      >;

#if !defined (_CORBA_ATTRDESCRIPTIONSEQ_CS_)
#define _CORBA_ATTRDESCRIPTIONSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::AttributeDescription
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::AttrDescriptionSeq
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::RepositoryIdSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::RepositoryIdSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::RepositoryIdSeq,
        CORBA::RepositoryIdSeq_var,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::RepositoryIdSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::InterfaceDef::FullInterfaceDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::InterfaceDef::FullInterfaceDescription
      >;

  template class
    TAO_Out_T<
        CORBA::InterfaceDef::FullInterfaceDescription,
        CORBA::InterfaceDef::FullInterfaceDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::InterfaceDef::FullInterfaceDescription
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::InterfaceDef::FullInterfaceDescription,
        CORBA::InterfaceDef::FullInterfaceDescription_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::AttributeDef_ptr,
        CORBA::AttributeDef_var
      >;

  template class
    TAO::In_Basic_Argument_T<
        CORBA::AttributeMode
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::OperationDef_ptr,
        CORBA::OperationDef_var
      >;

  template class
    TAO::In_Basic_Argument_T<
        CORBA::OperationMode
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ParDescriptionSeq
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ExceptionDefSeq
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        CORBA::ContextIdSeq
      >;

  template class TAO::Objref_Traits<CORBA::InterfaceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::InterfaceDef,
        TAO::Objref_Traits<CORBA::InterfaceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::InterfaceDef,
        TAO::Objref_Traits<CORBA::InterfaceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::InterfaceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::InterfaceDef
      >;

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InterfaceDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::InterfaceDefSeq,
        CORBA::InterfaceDefSeq_var,
        CORBA::InterfaceDefSeq_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::ExceptionDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ExceptionDef,
        TAO::Objref_Traits<CORBA::ExceptionDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ExceptionDef,
        TAO::Objref_Traits<CORBA::ExceptionDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ExceptionDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ExceptionDef
      >;

  template class TAO::Objref_Traits<CORBA::NativeDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::NativeDef,
        TAO::Objref_Traits<CORBA::NativeDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::NativeDef,
        TAO::Objref_Traits<CORBA::NativeDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::NativeDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::NativeDef
      >;

  template class TAO::Objref_Traits<CORBA::AbstractInterfaceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::AbstractInterfaceDef,
        TAO::Objref_Traits<CORBA::AbstractInterfaceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::AbstractInterfaceDef,
        TAO::Objref_Traits<CORBA::AbstractInterfaceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::AbstractInterfaceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::AbstractInterfaceDef
      >;

  template class TAO::Objref_Traits<CORBA::LocalInterfaceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::LocalInterfaceDef,
        TAO::Objref_Traits<CORBA::LocalInterfaceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::LocalInterfaceDef,
        TAO::Objref_Traits<CORBA::LocalInterfaceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::LocalInterfaceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::LocalInterfaceDef
      >;

  template class TAO::Objref_Traits<CORBA::ExtInterfaceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ExtInterfaceDef,
        TAO::Objref_Traits<CORBA::ExtInterfaceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ExtInterfaceDef,
        TAO::Objref_Traits<CORBA::ExtInterfaceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ExtInterfaceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ExtInterfaceDef
      >;

  template class TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ExtAbstractInterfaceDef,
        TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ExtAbstractInterfaceDef,
        TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ExtAbstractInterfaceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ExtAbstractInterfaceDef
      >;

  template class TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ExtLocalInterfaceDef,
        TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ExtLocalInterfaceDef,
        TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ExtLocalInterfaceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ExtLocalInterfaceDef
      >;

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::StructMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::StructMemberSeq,
        CORBA::StructMemberSeq_var,
        CORBA::StructMemberSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExcDescriptionSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ExcDescriptionSeq,
        CORBA::ExcDescriptionSeq_var,
        CORBA::ExcDescriptionSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::UnionMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::UnionMemberSeq,
        CORBA::UnionMemberSeq_var,
        CORBA::UnionMemberSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::EnumMemberSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::EnumMemberSeq,
        CORBA::EnumMemberSeq_var,
        CORBA::EnumMemberSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_PRIMITIVEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_PRIMITIVEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::PrimitiveDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::PrimitiveDef_ptr,
        CORBA::PrimitiveDef_var,
        CORBA::PrimitiveDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::PrimitiveDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::PrimitiveDef,
        TAO::Objref_Traits<CORBA::PrimitiveDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::PrimitiveDef,
        TAO::Objref_Traits<CORBA::PrimitiveDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::PrimitiveDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::PrimitiveDef
      >;

#if !defined (_CORBA_STRINGDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRINGDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::StringDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::StringDef_ptr,
        CORBA::StringDef_var,
        CORBA::StringDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::StringDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::StringDef,
        TAO::Objref_Traits<CORBA::StringDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::StringDef,
        TAO::Objref_Traits<CORBA::StringDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::StringDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::StringDef
      >;

#if !defined (_CORBA_SEQUENCEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::SequenceDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::SequenceDef_ptr,
        CORBA::SequenceDef_var,
        CORBA::SequenceDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::SequenceDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::SequenceDef,
        TAO::Objref_Traits<CORBA::SequenceDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::SequenceDef,
        TAO::Objref_Traits<CORBA::SequenceDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::SequenceDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::SequenceDef
      >;

#if !defined (_CORBA_ARRAYDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ARRAYDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ArrayDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ArrayDef_ptr,
        CORBA::ArrayDef_var,
        CORBA::ArrayDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::ArrayDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ArrayDef,
        TAO::Objref_Traits<CORBA::ArrayDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ArrayDef,
        TAO::Objref_Traits<CORBA::ArrayDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ArrayDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ArrayDef
      >;

#if !defined (_CORBA_WSTRINGDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_WSTRINGDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::WstringDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::WstringDef_ptr,
        CORBA::WstringDef_var,
        CORBA::WstringDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::WstringDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::WstringDef,
        TAO::Objref_Traits<CORBA::WstringDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::WstringDef,
        TAO::Objref_Traits<CORBA::WstringDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::WstringDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::WstringDef
      >;

#if !defined (_CORBA_FIXEDDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_FIXEDDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::FixedDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::FixedDef_ptr,
        CORBA::FixedDef_var,
        CORBA::FixedDef_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_PRIMITIVEKIND__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_PRIMITIVEKIND__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::PrimitiveKind>;

  template class TAO::Basic_Arg_Traits_T<CORBA::PrimitiveKind>;

#endif /* end #if !defined */

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::PrimitiveKind
      >;

  template class
    TAO_Var_Var_T<
        CORBA::ModuleDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ModuleDescription
      >;

  template class
    TAO_Out_T<
        CORBA::ModuleDescription,
        CORBA::ModuleDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ModuleDescription
      >;

  template class
    TAO_Var_Var_T<
        CORBA::ConstantDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ConstantDescription
      >;

  template class
    TAO_Out_T<
        CORBA::ConstantDescription,
        CORBA::ConstantDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ConstantDescription
      >;

#if !defined (_CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExceptionDefSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ExceptionDefSeq,
        CORBA::ExceptionDefSeq_var,
        CORBA::ExceptionDefSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Object_Manager<
        CORBA::ExceptionDef,
        CORBA::ExceptionDef_va,
      >;

  template class
    TAO_MngSeq_Var_T<
        CORBA::ExceptionDefSeq,
        TAO_Object_Manager<
            CORBA::ExceptionDef,
            CORBA::ExceptionDef_var
          >
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExceptionDefSeq,
        TAO_Object_Manager<
            CORBA::ExceptionDef,
            CORBA::ExceptionDef_var
          >
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ExceptionDefSeq,
        CORBA::ExceptionDefSeq_var,
        TAO_Object_Manager<
            CORBA::ExceptionDef,
            CORBA::ExceptionDef_var
          >
      >;

#if !defined (_CORBA_EXCEPTIONDEFSEQ_CS_)
#define _CORBA_EXCEPTIONDEFSEQ_CS_

  template class
    TAO_Unbounded_Object_Sequence<
        CORBA::ExceptionDef,
        CORBA::ExceptionDef_var
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExceptionDefSeq
      >;

#if !defined (_CORBA_ATTRIBUTEMODE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ATTRIBUTEMODE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::AttributeMode>;

  template class TAO::Basic_Arg_Traits_T<CORBA::AttributeMode>;

#endif /* end #if !defined */

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::AttributeMode
      >;

#if !defined (_CORBA_ATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::AttributeDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::AttributeDef_ptr,
        CORBA::AttributeDef_var,
        CORBA::AttributeDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::AttributeDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::AttributeDef,
        TAO::Objref_Traits<CORBA::AttributeDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::AttributeDef,
        TAO::Objref_Traits<CORBA::AttributeDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::AttributeDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::AttributeDef
      >;

  template class
    TAO_Var_Var_T<
        CORBA::AttributeDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::AttributeDescription
      >;

  template class
    TAO_Out_T<
        CORBA::AttributeDescription,
        CORBA::AttributeDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::AttributeDescription
      >;

#if !defined (_CORBA_EXTATTRIBUTEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTATTRIBUTEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExtAttributeDescription>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ExtAttributeDescription,
        CORBA::ExtAttributeDescription_var,
        CORBA::ExtAttributeDescription_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::ExtAttributeDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ExtAttributeDescription
      >;

  template class
    TAO_Out_T<
        CORBA::ExtAttributeDescription,
        CORBA::ExtAttributeDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtAttributeDescription
      >;

#if !defined (_CORBA_EXTATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ExtAttributeDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::ExtAttributeDef_ptr,
        CORBA::ExtAttributeDef_var,
        CORBA::ExtAttributeDef_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::ExtAttributeDescription,
        CORBA::ExtAttributeDescription_var
      >;

  template class TAO::Objref_Traits<CORBA::ExtAttributeDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::ExtAttributeDef,
        TAO::Objref_Traits<CORBA::ExtAttributeDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::ExtAttributeDef,
        TAO::Objref_Traits<CORBA::ExtAttributeDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::ExtAttributeDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::ExtAttributeDef
      >;

#if !defined (_CORBA_OPERATIONMODE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_OPERATIONMODE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::OperationMode>;

  template class TAO::Basic_Arg_Traits_T<CORBA::OperationMode>;

#endif /* end #if !defined */

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::OperationMode
      >;

  template class
    TAO_Var_Var_T<
        CORBA::ParameterDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::ParameterDescription
      >;

  template class
    TAO_Out_T<
        CORBA::ParameterDescription,
        CORBA::ParameterDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ParameterDescription
      >;

#if !defined (_CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ParDescriptionSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ParDescriptionSeq,
        CORBA::ParDescriptionSeq_var,
        CORBA::ParDescriptionSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_VarSeq_Var_T<
        CORBA::ParDescriptionSeq,
        CORBA::ParameterDescription
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ParDescriptionSeq,
        CORBA::ParameterDescription
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::ParDescriptionSeq,
        CORBA::ParDescriptionSeq_var,
        CORBA::ParameterDescription
      >;

#if !defined (_CORBA_PARDESCRIPTIONSEQ_CS_)
#define _CORBA_PARDESCRIPTIONSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::ParameterDescription
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ParDescriptionSeq
      >;

#if !defined (_CORBA_CONTEXTIDSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTEXTIDSEQ__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::ContextIdSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::ContextIdSeq,
        CORBA::ContextIdSeq_var,
        CORBA::ContextIdSeq_out
      >;

#endif /* end #if !defined */

  template class
    TAO_MngSeq_Var_T<
        CORBA::ContextIdSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ContextIdSeq,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO_MngSeq_Out_T<
        CORBA::ContextIdSeq,
        CORBA::ContextIdSeq_var,
        TAO_SeqElem_String_Manager
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ContextIdSeq
      >;

#if !defined (_CORBA_OPERATIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_OPERATIONDEF__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::OperationDef>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::OperationDef_ptr,
        CORBA::OperationDef_var,
        CORBA::OperationDef_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<CORBA::OperationDef>;

  template class
    TAO_Objref_Var_T<
        CORBA::OperationDef,
        TAO::Objref_Traits<CORBA::OperationDef>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::OperationDef,
        TAO::Objref_Traits<CORBA::OperationDef>
      >;

  template class
    TAO::Narrow_Utils<CORBA::OperationDef>;

  template class
    TAO::Any_Impl_T<
        CORBA::OperationDef
      >;

  template class
    TAO_Var_Var_T<
        CORBA::OperationDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::OperationDescription
      >;

  template class
    TAO_Out_T<
        CORBA::OperationDescription,
        CORBA::OperationDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::OperationDescription
      >;

  template class
    TAO_VarSeq_Var_T<
        CORBA::ExtAttrDescriptionSeq,
        CORBA::ExtAttributeDescription
      >;

  template class
    TAO_Seq_Var_Base_T<
        CORBA::ExtAttrDescriptionSeq,
        CORBA::ExtAttributeDescription
      >;

  template class
    TAO_Seq_Out_T<
        CORBA::ExtAttrDescriptionSeq,
        CORBA::ExtAttrDescriptionSeq_var,
        CORBA::ExtAttributeDescription
      >;

#if !defined (_CORBA_EXTATTRDESCRIPTIONSEQ_CS_)
#define _CORBA_EXTATTRDESCRIPTIONSEQ_CS_

  template class
    TAO_Unbounded_Sequence<
        CORBA::ExtAttributeDescription
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::ExtAttrDescriptionSeq
      >;

  template class
    TAO_Var_Var_T<
        CORBA::InterfaceDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::InterfaceDescription
      >;

  template class
    TAO_Out_T<
        CORBA::InterfaceDescription,
        CORBA::InterfaceDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::InterfaceDescription
      >;

#if !defined (_CORBA_INTERFACEATTREXTENSION_EXTFULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEATTREXTENSION_EXTFULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription,
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_var,
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Var_Var_T<
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription
      >;

  template class
    TAO_Var_Base_T<
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription
      >;

  template class
    TAO_Out_T<
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription,
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_var
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription,
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::ExtAttributeDef_ptr,
        CORBA::ExtAttributeDef_var
      >;

  template class TAO::Objref_Traits<CORBA::InterfaceAttrExtension>;

  template class
    TAO_Objref_Var_T<
        CORBA::InterfaceAttrExtension,
        TAO::Objref_Traits<CORBA::InterfaceAttrExtension>
      >;
  
  template class
    TAO_Objref_Out_T<
        CORBA::InterfaceAttrExtension,
        TAO::Objref_Traits<CORBA::InterfaceAttrExtension>
      >;

  template class
    TAO::Narrow_Utils<CORBA::InterfaceAttrExtension>;

  template class
    TAO::Any_Impl_T<
        CORBA::InterfaceAttrExtension
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#if !defined (_CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTAINED__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Contained>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Contained_ptr, \
        CORBA::Contained_var, \
        CORBA::Contained_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::In_Basic_Argument_T< \
        CORBA::PrimitiveKind \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        CORBA::IDLType_ptr \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::Repository>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::Repository, \
        TAO::Objref_Traits<CORBA::Repository> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::Repository, \
        TAO::Objref_Traits<CORBA::Repository> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::Repository>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::Repository \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::ModuleDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ModuleDef, \
        TAO::Objref_Traits<CORBA::ModuleDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ModuleDef, \
        TAO::Objref_Traits<CORBA::ModuleDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ModuleDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ModuleDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::ConstantDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ConstantDef, \
        TAO::Objref_Traits<CORBA::ConstantDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ConstantDef, \
        TAO::Objref_Traits<CORBA::ConstantDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ConstantDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ConstantDef \
      >

#if !defined (_CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_IDLTYPE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::IDLType>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::IDLType_ptr, \
        CORBA::IDLType_var, \
        CORBA::IDLType_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::StructDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::StructDef, \
        TAO::Objref_Traits<CORBA::StructDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::StructDef, \
        TAO::Objref_Traits<CORBA::StructDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::StructDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::StructDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::UnionDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::UnionDef, \
        TAO::Objref_Traits<CORBA::UnionDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::UnionDef, \
        TAO::Objref_Traits<CORBA::UnionDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::UnionDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::UnionDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::EnumDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::EnumDef, \
        TAO::Objref_Traits<CORBA::EnumDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::EnumDef, \
        TAO::Objref_Traits<CORBA::EnumDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::EnumDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::EnumDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::AliasDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::AliasDef, \
        TAO::Objref_Traits<CORBA::AliasDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::AliasDef, \
        TAO::Objref_Traits<CORBA::AliasDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::AliasDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::AliasDef \
      >

#if !defined (_CORBA_INTERFACEDEF_FULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEDEF_FULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InterfaceDef::FullInterfaceDescription>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::InterfaceDef::FullInterfaceDescription, \
        CORBA::InterfaceDef::FullInterfaceDescription_var, \
        CORBA::InterfaceDef::FullInterfaceDescription_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::OpDescriptionSeq, \
        CORBA::OperationDescription \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::OpDescriptionSeq, \
        CORBA::OperationDescription \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::OpDescriptionSeq, \
        CORBA::OpDescriptionSeq_var, \
        CORBA::OperationDescription \
      >

#if !defined (_CORBA_OPDESCRIPTIONSEQ_CS_)
#define _CORBA_OPDESCRIPTIONSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::OperationDescription \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::OpDescriptionSeq \
      >

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::AttrDescriptionSeq, \
        CORBA::AttributeDescription \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::AttrDescriptionSeq, \
        CORBA::AttributeDescription \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::AttrDescriptionSeq, \
        CORBA::AttrDescriptionSeq_var, \
        CORBA::AttributeDescription \
      >

#if !defined (_CORBA_ATTRDESCRIPTIONSEQ_CS_)
#define _CORBA_ATTRDESCRIPTIONSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::AttributeDescription \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::AttrDescriptionSeq \
      >

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::RepositoryIdSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::RepositoryIdSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::RepositoryIdSeq, \
        CORBA::RepositoryIdSeq_var, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::RepositoryIdSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::InterfaceDef::FullInterfaceDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::InterfaceDef::FullInterfaceDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::InterfaceDef::FullInterfaceDescription, \
        CORBA::InterfaceDef::FullInterfaceDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::InterfaceDef::FullInterfaceDescription \
      >

# pragma instantiate \
    TAO::In_Basic_Argument_T< \
        CORBA::AttributeMode \
      >

# pragma instantiate \
    TAO::In_Basic_Argument_T< \
        CORBA::OperationMode \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ParDescriptionSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ExceptionDefSeq \
      >

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        CORBA::ContextIdSeq \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::InterfaceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::InterfaceDef, \
        TAO::Objref_Traits<CORBA::InterfaceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::InterfaceDef, \
        TAO::Objref_Traits<CORBA::InterfaceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::InterfaceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::InterfaceDef \
      >

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InterfaceDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::InterfaceDefSeq, \
        CORBA::InterfaceDefSeq_var, \
        CORBA::InterfaceDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::ExceptionDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ExceptionDef, \
        TAO::Objref_Traits<CORBA::ExceptionDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ExceptionDef, \
        TAO::Objref_Traits<CORBA::ExceptionDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ExceptionDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ExceptionDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::NativeDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::NativeDef, \
        TAO::Objref_Traits<CORBA::NativeDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::NativeDef, \
        TAO::Objref_Traits<CORBA::NativeDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::NativeDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::NativeDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::AbstractInterfaceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::AbstractInterfaceDef, \
        TAO::Objref_Traits<CORBA::AbstractInterfaceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::AbstractInterfaceDef, \
        TAO::Objref_Traits<CORBA::AbstractInterfaceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::AbstractInterfaceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::AbstractInterfaceDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::LocalInterfaceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::LocalInterfaceDef, \
        TAO::Objref_Traits<CORBA::LocalInterfaceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::LocalInterfaceDef, \
        TAO::Objref_Traits<CORBA::LocalInterfaceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::LocalInterfaceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::LocalInterfaceDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::ExtInterfaceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ExtInterfaceDef, \
        TAO::Objref_Traits<CORBA::ExtInterfaceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ExtInterfaceDef, \
        TAO::Objref_Traits<CORBA::ExtInterfaceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ExtInterfaceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ExtInterfaceDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ExtAbstractInterfaceDef, \
        TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ExtAbstractInterfaceDef, \
        TAO::Objref_Traits<CORBA::ExtAbstractInterfaceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ExtAbstractInterfaceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ExtAbstractInterfaceDef \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ExtLocalInterfaceDef, \
        TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ExtLocalInterfaceDef, \
        TAO::Objref_Traits<CORBA::ExtLocalInterfaceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ExtLocalInterfaceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ExtLocalInterfaceDef \
      >

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::StructMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::StructMemberSeq, \
        CORBA::StructMemberSeq_var, \
        CORBA::StructMemberSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExcDescriptionSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ExcDescriptionSeq, \
        CORBA::ExcDescriptionSeq_var, \
        CORBA::ExcDescriptionSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::UnionMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::UnionMemberSeq, \
        CORBA::UnionMemberSeq_var, \
        CORBA::UnionMemberSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::EnumMemberSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::EnumMemberSeq, \
        CORBA::EnumMemberSeq_var, \
        CORBA::EnumMemberSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_PRIMITIVEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_PRIMITIVEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::PrimitiveDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::PrimitiveDef_ptr, \
        CORBA::PrimitiveDef_var, \
        CORBA::PrimitiveDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::PrimitiveDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::PrimitiveDef, \
        TAO::Objref_Traits<CORBA::PrimitiveDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::PrimitiveDef, \
        TAO::Objref_Traits<CORBA::PrimitiveDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::PrimitiveDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::PrimitiveDef \
      >

#if !defined (_CORBA_STRINGDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_STRINGDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::StringDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::StringDef_ptr, \
        CORBA::StringDef_var, \
        CORBA::StringDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::StringDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::StringDef, \
        TAO::Objref_Traits<CORBA::StringDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::StringDef, \
        TAO::Objref_Traits<CORBA::StringDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::StringDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::StringDef \
      >

#if !defined (_CORBA_SEQUENCEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::SequenceDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::SequenceDef_ptr, \
        CORBA::SequenceDef_var, \
        CORBA::SequenceDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::SequenceDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::SequenceDef, \
        TAO::Objref_Traits<CORBA::SequenceDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::SequenceDef, \
        TAO::Objref_Traits<CORBA::SequenceDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::SequenceDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::SequenceDef \
      >

#if !defined (_CORBA_ARRAYDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ARRAYDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ArrayDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ArrayDef_ptr, \
        CORBA::ArrayDef_var, \
        CORBA::ArrayDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::ArrayDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ArrayDef, \
        TAO::Objref_Traits<CORBA::ArrayDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ArrayDef, \
        TAO::Objref_Traits<CORBA::ArrayDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ArrayDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ArrayDef \
      >

#if !defined (_CORBA_WSTRINGDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_WSTRINGDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::WstringDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::WstringDef_ptr, \
        CORBA::WstringDef_var, \
        CORBA::WstringDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::WstringDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::WstringDef, \
        TAO::Objref_Traits<CORBA::WstringDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::WstringDef, \
        TAO::Objref_Traits<CORBA::WstringDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::WstringDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::WstringDef \
      >

#if !defined (_CORBA_FIXEDDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_FIXEDDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::FixedDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::FixedDef_ptr, \
        CORBA::FixedDef_var, \
        CORBA::FixedDef_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_PRIMITIVEKIND__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_PRIMITIVEKIND__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::PrimitiveKind>

# pragma instantiate TAO::Basic_Arg_Traits_T<CORBA::PrimitiveKind>

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::PrimitiveKind \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ModuleDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ModuleDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ModuleDescription, \
        CORBA::ModuleDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ModuleDescription \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ConstantDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ConstantDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ConstantDescription, \
        CORBA::ConstantDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ConstantDescription \
      >

#if !defined (_CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXCEPTIONDEFSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExceptionDefSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ExceptionDefSeq, \
        CORBA::ExceptionDefSeq_var, \
        CORBA::ExceptionDefSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ExceptionDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExceptionDef, \
            CORBA::ExceptionDef_var \
          > \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExceptionDefSeq, \
        TAO_Object_Manager< \
            CORBA::ExceptionDef, \
            CORBA::ExceptionDef_var \
          > \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ExceptionDefSeq, \
        CORBA::ExceptionDefSeq_var, \
        TAO_Object_Manager< \
            CORBA::ExceptionDef, \
            CORBA::ExceptionDef_var \
          > \
      >

#if !defined (_CORBA_EXCEPTIONDEFSEQ_CS_)
#define _CORBA_EXCEPTIONDEFSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Object_Sequence< \
        CORBA::ExceptionDef, \
        CORBA::ExceptionDef_var \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExceptionDefSeq \
      >

#if !defined (_CORBA_ATTRIBUTEMODE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ATTRIBUTEMODE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::AttributeMode>

# pragma instantiate TAO::Basic_Arg_Traits_T<CORBA::AttributeMode>

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::AttributeMode \
      >

#if !defined (_CORBA_ATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_ATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::AttributeDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::AttributeDef_ptr, \
        CORBA::AttributeDef_var, \
        CORBA::AttributeDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::AttributeDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::AttributeDef, \
        TAO::Objref_Traits<CORBA::AttributeDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::AttributeDef, \
        TAO::Objref_Traits<CORBA::AttributeDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::AttributeDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::AttributeDef \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::AttributeDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::AttributeDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::AttributeDescription, \
        CORBA::AttributeDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::AttributeDescription \
      >

#if !defined (_CORBA_EXTATTRIBUTEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTATTRIBUTEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExtAttributeDescription>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ExtAttributeDescription, \
        CORBA::ExtAttributeDescription_var, \
        CORBA::ExtAttributeDescription_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ExtAttributeDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ExtAttributeDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ExtAttributeDescription, \
        CORBA::ExtAttributeDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtAttributeDescription \
      >

#if !defined (_CORBA_EXTATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_EXTATTRIBUTEDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ExtAttributeDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::ExtAttributeDef_ptr, \
        CORBA::ExtAttributeDef_var, \
        CORBA::ExtAttributeDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::ExtAttributeDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::ExtAttributeDef, \
        TAO::Objref_Traits<CORBA::ExtAttributeDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::ExtAttributeDef, \
        TAO::Objref_Traits<CORBA::ExtAttributeDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::ExtAttributeDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::ExtAttributeDef \
      >

#if !defined (_CORBA_OPERATIONMODE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_OPERATIONMODE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::OperationMode>

# pragma instantiate TAO::Basic_Arg_Traits_T<CORBA::OperationMode>

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::OperationMode \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::ParameterDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::ParameterDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::ParameterDescription, \
        CORBA::ParameterDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ParameterDescription \
      >

#if !defined (_CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_PARDESCRIPTIONSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ParDescriptionSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ParDescriptionSeq, \
        CORBA::ParDescriptionSeq_var, \
        CORBA::ParDescriptionSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::ParDescriptionSeq, \
        CORBA::ParameterDescription \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ParDescriptionSeq, \
        CORBA::ParameterDescription \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::ParDescriptionSeq, \
        CORBA::ParDescriptionSeq_var, \
        CORBA::ParameterDescription \
      >

#if !defined (_CORBA_PARDESCRIPTIONSEQ_CS_)
#define _CORBA_PARDESCRIPTIONSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::ParameterDescription \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ParDescriptionSeq \
      >

#if !defined (_CORBA_CONTEXTIDSEQ__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_CONTEXTIDSEQ__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::ContextIdSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::ContextIdSeq, \
        CORBA::ContextIdSeq_var, \
        CORBA::ContextIdSeq_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        CORBA::ContextIdSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ContextIdSeq, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO_MngSeq_Out_T< \
        CORBA::ContextIdSeq, \
        CORBA::ContextIdSeq_var, \
        TAO_SeqElem_String_Manager \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ContextIdSeq \
      >

#if !defined (_CORBA_OPERATIONDEF__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_OPERATIONDEF__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::OperationDef>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::OperationDef_ptr, \
        CORBA::OperationDef_var, \
        CORBA::OperationDef_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<CORBA::OperationDef>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::OperationDef, \
        TAO::Objref_Traits<CORBA::OperationDef> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::OperationDef, \
        TAO::Objref_Traits<CORBA::OperationDef> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::OperationDef>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::OperationDef \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::OperationDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::OperationDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::OperationDescription, \
        CORBA::OperationDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::OperationDescription \
      >

# pragma instantiate \
    TAO_VarSeq_Var_T< \
        CORBA::ExtAttrDescriptionSeq, \
        CORBA::ExtAttributeDescription \
      >

# pragma instantiate \
    TAO_Seq_Var_Base_T< \
        CORBA::ExtAttrDescriptionSeq, \
        CORBA::ExtAttributeDescription \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        CORBA::ExtAttrDescriptionSeq, \
        CORBA::ExtAttrDescriptionSeq_var, \
        CORBA::ExtAttributeDescription \
      >

#if !defined (_CORBA_EXTATTRDESCRIPTIONSEQ_CS_)
#define _CORBA_EXTATTRDESCRIPTIONSEQ_CS_

# pragma instantiate \
    TAO_Unbounded_Sequence< \
        CORBA::ExtAttributeDescription \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::ExtAttrDescriptionSeq \
      >

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::InterfaceDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::InterfaceDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::InterfaceDescription, \
        CORBA::InterfaceDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::InterfaceDescription \
      >

#if !defined (_CORBA_INTERFACEATTREXTENSION_EXTFULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_INTERFACEATTREXTENSION_EXTFULLINTERFACEDESCRIPTION__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription, \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_var, \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Var_Var_T< \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription \
      >

# pragma instantiate \
    TAO_Var_Base_T< \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription \
      >

# pragma instantiate \
    TAO_Out_T< \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription, \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription_var \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription \
      >

# pragma instantiate TAO::Objref_Traits<CORBA::InterfaceAttrExtension>

# pragma instantiate \
    TAO_Objref_Var_T< \
        CORBA::InterfaceAttrExtension, \
        TAO::Objref_Traits<CORBA::InterfaceAttrExtension> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        CORBA::InterfaceAttrExtension, \
        TAO::Objref_Traits<CORBA::InterfaceAttrExtension> \
      >

# pragma instantiate \
    TAO::Narrow_Utils<CORBA::InterfaceAttrExtension>

# pragma instantiate \
    TAO::Any_Impl_T< \
        CORBA::InterfaceAttrExtension \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

