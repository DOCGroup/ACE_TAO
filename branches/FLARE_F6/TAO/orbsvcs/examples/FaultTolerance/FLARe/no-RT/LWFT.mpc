// -*- MPC -*-
// $Id$

project(*idl): taoidldefaults {
  idlflags    += -Wb,export_macro=TAO_LWFT_Export \
                 -Wb,export_include=lwft_export.h

  IDL_Files {
    StateSynchronizationAgent.idl
    ReplicatedApplication.idl
    LWFTDataStructures.idl
    LWFT.idl
    monitor.idl
  }
  
  IDL_Files {
    idlflags += -SS
    ObjectReferenceFactory.idl
  }
  
  custom_only = 1
}

project(*Common) : pi_server, interceptors, iorinterceptor {
  after += *idl
  sharedname = LWFT_Common
  dynamicflags = TAO_LWFT_BUILD_DLL
  
  // This feature is mysteriously turned off in vc_warnings.mpb,
  // but we seem to need it here, for ArgPair.cpp
  specific(vc8, vc9, nmake) {
    macros += _SCL_SECURE_NO_WARNINGS
  }
  
  IDL_Files {
  }
  
  Source_Files {
    AppOptions.cpp
    ArgPair.cpp
    AppSideMonitor_Thread.cpp
    AppSideMonitor_Handler.cpp
    AppSideReg.cpp
    Hello.cpp
    IOR_Interceptor.cpp
    LWFTDataStructuresC.cpp
    LWFTDataStructuresS.cpp
    LWFTC.cpp
    LWFTS.cpp
    monitorC.cpp
    monitorS.cpp
    ObjectReferenceFactory.cpp
    ObjectReferenceFactoryC.cpp
    ServerORBInitializer.cpp
    Timer.cpp
    StateSynchronizationAgentC.cpp
    StateSynchronizationAgentS.cpp
    ReplicatedApplicationC.cpp
    ReplicatedApplicationS.cpp
  }
}


project(*server): pi_server, interceptors, iorinterceptor, splicelib {

  after += *Common *StateSyncAgent
  libs += LWFT_Common LWFT_StateSyncAgent
  exename = server 
  includes += $(TAO_ROOT)/tao
  
  IDL_Files {
  }
  
  Source_Files {
    ServerTask.cpp
    test_i.cpp
    server.cpp
  }
  
  Header_Files {
  }
  
  Inline_Files {
  }
  
  Template_Files {
  }
}

project(*StateSyncAgent) : portableserver, splicelib {
  after += *Common 
  dynamicflags = SSA_BUILD_DLL
  libs += LWFT_Common 
  sharedname = LWFT_StateSyncAgent
  includes += $(TAO_ROOT)/tao
  
  IDL_Files {
  }

  Source_Files {
    StateSynchronizationAgent_i.cpp
    StatefulObject.cpp
    CorbaStateUpdate.cpp
    StateSyncAgentTask.cpp
  }

  Header_Files {
    ssa_export.h
  }
  
  Inline_Files {
  }
  
  Template_Files {
    DDSStateReaderListener_T.cpp
    DDSStateUpdate_T.cpp
  }
}

project(*StateTopic) : portableserver, splicelib_with_idl {
  idlflags += -Wb,export_macro=State_TS_Export \
              -Wb,export_include=state_ts_export.h

  verbatim(gnuace, macros) {
    override no_hidden_visibility = 1
  } 

  dynamicflags += STATE_TS_BUILD_DLL
  macros += DDS_API=State_TS_Export
  sharedname = LWFT_StateTopic
  idlflags += -SS
  includes += $(TAO_ROOT)/tao

  SpliceTypeSupport_Files {
    State.idl >> StateDcps.idl StateDcps_impl.cpp StateSplDcps.cpp
  }
  
  IDL_Files {
    State.idl
    StateDcps.idl
  }

  Source_Files {
    StateC.cpp
    StateDcpsC.cpp
    StateDcps_impl.cpp
    StateSplDcps.cpp
  }
  
  Inline_Files {
    StateC.inl
    StateDcpsC.inl
  }
  
  Template_Files {
  }
}

project(*client): pi_server, interceptors {
  after += *Common
  libs += LWFT_Common
  exename = client
  
  IDL_Files {
  }
  
  Source_Files {
    Agent.cpp
    client.cpp
    Client_ORBInitializer.cpp
    Client_Request_Interceptor.cpp
  }
  
  Inline_Files {
  }
  
  Template_Files {
  }
}

project(*HostMonitor): taoserver, naming {
  after += *Common
  libs += LWFT_Common
  exename = host_monitor
  
  IDL_Files {
  }
  
  Source_Files {
    Failure_Handler.cpp
    HMOptions.cpp
    host_monitor.cpp
    HostMonitorImpl.cpp
    LinuxCPULoadCalculator.cpp
    Monitor_Thread.cpp
    RM_Proxy.cpp
    Utilization_Monitor.cpp
  }
  
  Inline_Files {
  }
  
  Template_Files {
  }
}

project(*ReplicationManager): taoserver, naming {
  after += *Common
  libs += LWFT_Common
  exename = ReplicationManager
  
  IDL_Files {
  }
  
  Source_Files {
    ReplicationManager.cpp
    ReplicationManager_process.cpp
    RMOptions.cpp
  }
  
  Inline_Files {
  }
  
  Template_Files {
  }
}
