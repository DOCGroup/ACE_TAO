// -*- MPC -*-
// $Id$

project(*Common) : pi_server, interceptors, iorinterceptor, orbsvcs_output {
  sharedname = LWFT_Common
  idlflags += -Wb,export_macro=LWFT_Common_Export \
              -Wb,export_include=lwft_common_export.h
  dynamicflags = LWFT_COMMON_BUILD_DLL
  
  IDL_Files {
    LWFTDataStructures.idl
  }
  
  Source_Files {
    Barrier_Guard.cpp
    LWFTDataStructuresC.cpp
    LWFTDataStructuresS.cpp
    Timer.cpp
  }
  
  Header_Files {
    lwft_common_export.h
  }
  
  Template_Files {
  }
}

project(*Client) : pi_server, interceptors, naming, orbsvcs_output {
  after += *ReplicationManager
  libs += LWFT_Common LWFT_ReplicationManager
  idlflags += -St \
              -Wb,export_macro=LWFT_Client_Export \
              -Wb,export_include=lwft_client_export.h
  dynamicflags = LWFT_CLIENT_BUILD_DLL
  sharedname = LWFT_Client
  
  IDL_Files {
    ForwardingAgent.idl
  }
  
  Source_Files {
    Client_ORBInitializer.cpp
    Client_Request_Interceptor.cpp
    ForwardingAgent.cpp
    ForwardingAgentC.cpp
    ForwardingAgentS.cpp
    LWFT_Client_Init.cpp
  }
  
  Header_Files {
    Client_ORBInitializer.h
    Client_Request_Interceptor.h
    ForwardingAgent.h
    ForwardingAgentC.h
    ForwardingAgentS.h
    lwft_client_export.h
    LWFT_Client_Init.h
  }
  
  Inline_Files {
    ForwardingAgentC.inl
    ForwardingAgentS.inl
  }
  
  Template_Files {
  }
}

project(*Server) : iorinterceptor, orbsvcs_output {
  after += *Common
  libs += LWFT_Common
  sharedname = LWFT_Server
  idlflags += -Wb,stub_export_macro=LWFT_Server_Export \
              -Wb,stub_export_include=lwft_server_export.h \
              -Wb,skel_export_macro=HostMonitor_Export \
              -Wb,skel_export_include=host_monitor_export.h
  dynamicflags = LWFT_SERVER_BUILD_DLL
  
  IDL_Files {
    HostMonitor.idl
  }
  
  IDL_Files {
    idlflags += -SS
    ObjectReferenceFactory.idl
  }
  
  Source_Files {
    AppOptions.cpp
    AppSideMonitor_Thread.cpp
    AppSideMonitor_Handler.cpp
    AppSideReg.cpp
    HostMonitorC.cpp
    IOR_Interceptor.cpp
    LWFT_Server_Init.cpp
    ObjectReferenceFactory.cpp
    ObjectReferenceFactoryC.cpp
    ServerORBInitializer.cpp
  }
  
  Header_Files {
    lwft_server_export.h
    HostMonitorC.h
  }
  
  Inline_Files {
    HostMonitorC.inl
    ObjectReferenceFactoryC.inl
  }
  
  Template_Files {
  }
}

project(*StateSyncAgent) : portableserver, orbsvcs_output, lwft_dds , splicelib {
  after += *Common
  idlflags += -Wb,export_macro=SSA_Export \
              -Wb,export_include=ssa_export.h
  dynamicflags = SSA_BUILD_DLL
  libs += LWFT_Common 
  sharedname = LWFT_StateSyncAgent
  
  IDL_Files {
    StateSynchronizationAgent.idl
    ReplicatedApplication.idl
  }

  Source_Files {
    CorbaStateUpdate.cpp
    DDSFailure.cpp
    ReplicatedApplicationC.cpp
    ReplicatedApplicationS.cpp
    StatefulObject.cpp
    StateSyncAgentTask.cpp
    StateSynchronizationAgentC.cpp
    StateSynchronizationAgentS.cpp
    StateSynchronizationAgent_i.cpp
  }

  Header_Files {
    DDSStateReaderListener_T.h
    DDSStateUpdate_T.h
    ssa_export.h
  }
  
  Inline_Files {
    ReplicatedApplicationC.inl
    ReplicatedApplicationS.inl
    StateSynchronizationAgentC.inl
    StateSynchronizationAgentS.inl
  }
  
  Template_Files {
    DDSStateReaderListener_T.cpp
    DDSStateUpdate_T.cpp
  }
}

project(*ReplicationManager) : portableserver, orbsvcs_output {
  after += *Common *StateSyncAgent
  libs += LWFT_Common \
          LWFT_StateSyncAgent
  sharedname = LWFT_ReplicationManager
  dynamicflags = RM_BUILD_DLL
  idlflags += -Wb,export_macro=RM_Export \
              -Wb,export_include=rm_export.h
              
  IDL_Files {
    ReplicationManager.idl
  }
  
  Source_Files {
    ReplicationManagerC.cpp
    ReplicationManagerS.cpp
  }
  
  Header_Files {
    ReplicationManagerC.h
    ReplicationManagerS.h
    rm_export.h
  }
  
  Inline_Files {
    ReplicationManagerC.inl
    ReplicationManagerS.inl
  }
}

project(*ReplicationManagerImpl) : portableserver, orbsvcs_output, lwft_server {
  after += *Client
  libs += LWFT_Client
  dynamicflags = RM_IMPL_BUILD_DLL
  sharedname = LWFT_ReplicationManagerImpl
  
  IDL_Files {
    idlflags -= -Sa -St
    AppInfo.idl
  }
  
  Source_Files {
    ReplicationManager.cpp
    AppInfoC.cpp
  }
  
  Header_Files {
    ReplicationManager.h
    rm_impl_export.h
  }
  
  Inline_Files {
  }
  
  Template_Files {
  }
}

project(*HostMonitor) : ace_mc, portableserver, naming, orbsvcs_output {
  after += *ReplicationManager *Server
  libs += LWFT_Common \
          LWFT_Server \
          LWFT_ReplicationManager
  sharedname = LWFT_HostMonitor
  dynamicflags = HOSTMONITOR_BUILD_DLL
  
  IDL_Files {
  }
  
  Source_Files {
    Failure_Handler.cpp
    HMOptions.cpp
    HostMonitorImpl.cpp
    HostMonitorS.cpp
    Monitor_Manager.cpp
    Monitor_Thread.cpp
    RM_Proxy.cpp
    Utilization_Monitor.cpp
  }
  
  Header_Files {
    CPULoadCalculator.h
    host_monitor_export.h
    HostMonitorS.h
    Monitor_Manager.h
  }
  
  Inline_Files {
    HostMonitorS.inl
    Monitor_Manager.inl
  }
  
  Template_Files {
  }
}

