// $Id$

#ifndef HELLO_IDL
#define HELLO_IDL

#pragma ciao lem "HelloE.idl"
#pragma ciao lem "HelloAE.idl"
#pragma ciao ami4ccm interface "Hello::MyFoo"
#pragma ciao ami4ccm interface "Hello::MyDerived"
#pragma ciao ami4ccm interface "Hello::MyBar"
#pragma ciao ami4ccm interface "Foo::MyFoo"
#pragma ciao ami4ccm interface "Foo::MyBar"
#pragma ciao ami4ccm interface "Bar::One"
#pragma ciao ami4ccm interface "Bar::Two"
#pragma ciao ami4ccm interface "Bar::Three"

#pragma ciao ami4ccm idl "HelloA.idl"

module Hello
{
  enum test_enum
  {
    ZERO,
    ONE,
    TWO
  };

  exception InternalError
    {
      long id;
      string error_string;
    };

  interface MyFoo
    {
      long foo_return (in string in_str, out string answer)
        raises (InternalError);
      void foo_no_return (in string in_str, out string answer)
        raises (InternalError);
      void hello (out long answer)
        raises (InternalError);
      void no_answer (in string in_str)
        raises (InternalError);
      test_enum enum_return(in string in_str)
        raises (InternalError); 
      void enum_no_return(in string in_str, 
                          in test_enum in_test,
                          out test_enum out_test)
        raises (InternalError); 

      attribute short rw_attrib
        getraises (InternalError)
        setraises (InternalError);

      readonly attribute short ro_attrib
        raises (InternalError);
    };

  interface MyDerived : MyFoo
    {
      long do_someting (in string str);
      attribute long my_attribute;
    };

  interface MyBar : MyDerived
    {
      double bar_return (in string in_str, in string answer)
        raises (InternalError);
      void bye (out long answer, out double db)
        raises (InternalError);
      attribute short rw_bar_attrib
        getraises (InternalError)
        setraises (InternalError);
      readonly attribute short ro_bar_attrib
        raises (InternalError);
    };
};

module Foo
{
  struct TestTopic 
    {
      string key;
      long x;
    };

  interface MyFoo
    {
      long myop (in TestTopic topic);
    };

  interface MyBar : MyFoo
    {
      TestTopic mybarop (in string str, in long lg, out double db);
    };

};

module Bar
{
  struct TestTopic 
    {
      string key;
      long x;
    };

  interface One
    {
      long myop (in TestTopic topic);
    };

  interface Two
    {
      TestTopic mybarop (in string str, in long lg, out double db);
    };

  interface Three : One, Two
    {
    };
};

#endif
