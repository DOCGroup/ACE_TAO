//$Id$
// TrafficClassQOSProvisioning.idl

// The software supporting this interface is
// governed by Government Purpose Rights
// Contract No: NBCHC030132
// Telcordia Technologies, Inc.
// 1 Technology Drive
// Piscataway, NJ 08854-4157

// Author: Ravi Vaidyanathan <vravi@research.telcordia.com>, Telcordia Technologies
//         Murray Conarty <murray.conarty@prismtechnologies.com>  
// Date: December 4, 2003

 
// This IDL will serve as an interface to qoS provisioning
// parameters in the network for scheduling and buffer management 


#ifndef _TRAFFIC_CLASSQOS_PROVISIONING_
#define _TRAFFIC_CLASSQOS_PROVISIONING_



module mil { module darpa { module arms { module mlrm {
module BandwidthBroker {

  // Definitions

  // This exception is raised when trafficClassProvisioner fails
  exception TrafficClassProvisionerException {
	string reason;
  };

 interface Configuration
 {
  
  // *************************************************************************
  //  A configuration defines a set of traffic classes
  // that together form a full scheduling and buffer management specification
  // for a particular mode of operation (e.g., battle mode,normal operation)
  // A traffic or service class defines a Per 
  // Hop Behavior for a set of markings that could encompass DSCP,
  // IP precedence or L2 CoS. Traffic belonging to the same class regardless 
  // of the original DSCP, CoS or IP Precedence value gets the same treatment.
  // *************************************************************************
  
  typedef sequence <short, 64> dscpSeq;
  typedef sequence <string> classSeq;
  attribute          string configName;
  attribute 	     classSeq	configClasses;


  // definitions for QoS

  // Buffer Discard mechanism
  enum DropScheme {
	TAIL_DROP,
	RED 
  };

  // RED drop threshold
  struct RedDropInfo { 
	short redDropThr1;	// RED low drop threshold
	short redDropThr2;	// RED high drop threshold
  };

  // DROP threshold information based on scheme
  union DropSchemeInfo switch (DropScheme) {
	case TAIL_DROP: short tailDropThr;
	case RED: RedDropInfo redDrop;
  };

  // Queue directions
  enum QDir {
	INPUT,
	OUTPUT
  };

  // Marking type
  enum DSCPType {
	L2_COS,
	IP_PREC,
	DSCP
  };

  // create a new class in the specified config
  void addClassToConfig        (in string className, 	// String identifier for the class
				in QDir	dir,		// Specifies operations on INPUT or OUTPUT qs
				in DSCPType type,	// Specifies type of marking
				in dscpSeq dscp,   	// class marking, from 0-63. This could map to 
							// DSCP, IP Precedence or L2 CoS
							// Note that multiple DSCP can map to a single class
			
				in short weight, 	// scheduling weight for the class (%)
				in boolean strictPrio,	// indicate whether this class has strict
							// priority - if this is true, scheduling
							// weight is ignored

				in short qSize,		// size of the queue (ratio %)

				in DropSchemeInfo dropThr)  
	raises (TrafficClassProvisionerException);
  

  // delete a class
  void delClassFromConfig (in string className)	// Class name
	raises (TrafficClassProvisionerException);

  }; // end of Configuration interface

 interface QoSProvisioner
 {
   
  // ****************************************************************************************
  // Functions pertaining to QoS Provisioning. A configuration defines a set of traffic classs
  // that together form a full scheduling and buffer management specification for a particular
  // mode of operation (e.g., battle mode). A configuration is applied to a 
  // group of nodes or a domain.
  // **********************************************************************************************
  typedef sequence <string> nodeSeq;

  Configuration createConfig (in string configName)	       //   Creates a new  configuration 
	        raises (TrafficClassProvisionerException);

  void delConfig    (in Configuration configName)	 // Deletes the specified configuration 
       raises (TrafficClassProvisionerException);

  // loads the specified configuration onto set of nodes

  void loadConfig   (in Configuration configName, 	// config to be loaded
		     in nodeSeq nodes)  		// nodes on which config is to be loaded	
       raises (TrafficClassProvisionerException);

  // removes the specified configuration from a set of nodes

  void resetConfig  (in Configuration configName, 	// config to be reset
		     in nodeSeq nodes)   		// nodes on which config is to be reset	
	raises (TrafficClassProvisionerException);
  
  }; //end of QoSProvisioner interface

}; //end of the module 

 }; }; }; };
#endif // _TRAFFIC_CLASSQOS_PROVISIONING_
