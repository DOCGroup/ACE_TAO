//$Id$
// FlowProvisioning.idl
// The software supporting this interface
// is governed by Government Purpose Rights
// Contract No: NBCHC030132
// Telcordia Technologies, Inc.
// 1 Technology Drive
// Piscataway, NJ 08854-4157

// Authors: Ravi Vaidyanathan <vravi@research.telcordia.com>, 
//          Murray Conarty <murray.conarty@prismtechnologies.com>
// Date: December 4, 2003; modified December 6, 2003


// This IDL will serve as an interface to provision per flow management
// parameters in the network, in response to individual requests to
// the Bandwidth Broker

#ifndef _FLOW_PROVISIONING_IDL_
#define _FLOW_PROVISIONING_IDL_

#include "CommonDef.idl"

module mil { module darpa { module arms { module mlrm {
module BandwidthBroker {

 interface FlowProvisioner
 {
  // Marking type

  enum TrustState{
	L2_COS, 	// trust the L2-COS marking of the incoming packet
	IP_PREC,	// trust the IP Precedence marking of the incoming packet
	DSCP, 		// trust the DSCP marking of the incoming packet
	none 		// do not trust marking of the incoming packet
  };

  // Action for packets in Excess
  enum ExceedAction {
	DROP,
	MARKDOWN
  };

  // Markdown type
  enum MarkdownType {
	NORMAL,
	EXCESS
  };

  typedef sequence <string> nodeSeq;
  typedef sequence <string> intfSeq;
  
  
  // This structure defines an aggregate flow
  struct FlowInfo {
  	CommonDef::ProtocolType proto;	// {tcp,udp,ip,igmp,icmp}
  	CommonDef::IPAddress srcIP;    	// source ip address of application flow
  	CommonDef::PortInfo srcPorts;	// source port number(s)
  	CommonDef::IPAddress destIP;   	// dest IP address of the application flow 
  	CommonDef::PortInfo destPorts;	// dest port number(s)
	long dscp;			// DSCP to match on 
  };


  // This exception is raised when flowProvisioner fails
  exception FlowProvisionerException {
	    string reason;
  };

  // Adds policing information for an aggregate flow
  // Note that the addFlow method provisions network elements, no corresponding
  // load method is available
  // LIMITATIONS - for a given <nodeName, portName> pair, only one ACL is allowed
  // ACL Name is constructed as nodeName_switchPortName - after discarding special chars

         void addFlow  (in string nodeName,	   // node on which flow is to be provisioned
			in string switchPortName, // port or interface on which flow is to be policed
		   	in string policerID,    //unique policer ID for the switch; could be flowID	
		   	in TrustState trust,	// Specifies trust state, i.e. marking not performed Das
		   	in short dscp,   	// class marking, from 0-63. This could map to 
						// DSCP, IP Precedence or L2 CoS

			in FlowInfo flow,	// flow definition

		   	in long rate,    	// requested forward bandwidth (kbps)
		   	in long burst,		// burst size to be allowed (kb)
			in long excessRate,	// Excess rate 
		        in ExceedAction normal, // exceed Action for normal rate, drop or markdown
			in ExceedAction excess) // exceed Action for excess rate, drop or markdown
	       raises (FlowProvisionerException);

  // deletes policing information for an aggregate flow
        void delFlow   (in string nodeName,	  // node on which flow is to be deleted
			in string switchPortName, // port or interface on which flow is to be deleted
		   	in string policerID )	 // specifies the policer to be deleted
	      raises (FlowProvisionerException);
 
  // Deletes policing information for an aggregate flow but is
  // stateless.  The deletion must exactly match the original addFlow parameters.
        void delFlowSL (in string nodeName,	   // node on which flow is to be provisioned
			in string switchPortName, // port or interface on which flow is to be policed
		   	in string policerID,    //unique policer ID for the switch; could be flowID	
		   	in TrustState trust,	// Specifies trust state, i.e. marking not performed Das
		   	in short dscp,   	// class marking, from 0-63. This could map to 
						// DSCP, IP Precedence or L2 CoS

			in FlowInfo flow,	// flow definition

		   	in long rate,    	// requested forward bandwidth (kbps)
		   	in long burst,		// burst size to be allowed (kb)
			in long excessRate,	// Excess rate 
		        in ExceedAction normal, // exceed Action for normal rate, drop or markdown
			in ExceedAction excess) // exceed Action for excess rate, drop or markdown
	       raises (FlowProvisionerException);

  // LIMITATIONS: Markdown DSCP must be specified at the node level and is not supported per policer
  // Markdown information - This is the marking for packets that exceed their allocated capacity

        void addMarkdown (in MarkdownType type, // Specifies type of markdown, NORMAL or EXCESS
		   	  in short dscp,   	   // class marking, from 0-63. This could map to 
						   // DSCP, IP Precedence or L2 CoS
		   	  in short markdownDscp, // Markdown class marking, from 0-63
			  in nodeSeq nodes)     // Nodes on which markdown DSCP is to be loaded 
	     raises (FlowProvisionerException);

  // Methods to install a named policy that contains the scheduling and buffer managememnt
  // parameters for differentiated treatment on a single node, for the given set of 
  // interfaces. Eventually this functionality will be supported via a separate 
  // full-featured IDL. The current functionality only permits installation of a named policy

	void addQoSPolicy (in string nodeName,	// node on which to install the policy
			   in intfSeq intfs, 	// interfaces on which policy is configured
			   in string policyName)// name of the policy
	     raises (FlowProvisionerException);

			
 }; // end FlowProvisioner interface

}; // end module flowProvisioner

 }; }; }; };
#endif // _FLOW_PROVISIONING_IDL_
