/*====================================================================

OpenCCM: The Open CORBA Component Model Platform
Copyright (C) 2000-2003 INRIA - USTL - LIFL - GOAL
Contact: openccm@objectweb.org

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA

Initial developer(s): Philippe Merle, Mathieu Vadet.
Contributor(s): Raphael Marvie, Sylvain Leblanc, Romain Rouvoy,
Jérôme Moroy.

====================================================================*/

/**
 * This OMG IDL file contains the Components module
 * defined by the CORBA Components Specification 3.0.
 *
 * See the following OMG documents:
 *  - formal/2002-06-65 (CORBA Components Specification 3.0)
 *  - ptc/2002-08-02 (Components 1.1 RTF Interim Report)
 *  - ptc/2002-08-03 (edited CORBA Components Specification)
 *
 * @author <a href="mailto:Philippe.Merle@lifl.fr">Philippe Merle</a>
 *         <a href="mailto:Mathieu.Vadet@lifl.fr">Mathieu Vadet</a>
 */

#ifndef _COMPONENTS_IDL_
#define _COMPONENTS_IDL_

// ======================================================================
//
// The __OMG_IDL_3__ macro is defined by default in OpenCCM compilers.
// Import required modules if compiled with OpenCCM
// else include required OMG IDL files.
//
#ifdef __OMG_IDL_3__

// Importation of the CORBA module.
import CORBA;

#else

// Inclusion of the CORBA module.
#include <CORBA.idl>
#include <TypeCode.idl>
#include <CosPropertyService.idl>

#endif /* ifdef __OMG_IDL_3__ */
//
// ======================================================================

// This specification was written by the OMG.
#pragma prefix "omg.org"

/**
 *
 * The Components module is defined by the CORBA Components Specification.
 *
 */
module Components
{
    // From Chapter 6.9: Component Deployment

    module Deployment
    {
        // Predeclaration of the Container interface
        // because it is used in operation CCMHome::get_container.
        interface Container;
    };

    // From Chapter 1: Component Model

    // As this is not explicitly defined but used in Chapter 1
    // then this could be merged with Components::Deployment::InvalidConfiguration!
    //
    exception InvalidConfiguration { };

    // Explicitly defined in Chapter 1

    typedef string FeatureName;

    typedef sequence<FeatureName> NameList;

    exception InvalidName { };

    exception InvalidConnection { };

    exception AlreadyConnected { };

    exception NoConnection { };

    exception ExceededConnectionLimit { };

    exception CookieRequired { };

    exception WrongComponentType { };

    exception NoKeyAvailable { };

    exception DuplicateKeyValue { };

    exception InvalidKey { };

    exception UnknownKeyValue { };

    typedef unsigned long FailureReason;

    exception CreateFailure
    {
        FailureReason reason;
    };

    exception FinderFailure
    {
        FailureReason reason;
    };

    exception RemoveFailure
    {
        FailureReason reason;
    };

    valuetype PortDescription
    {
        public FeatureName name;
        public ::CORBA::RepositoryId type_id;
    };

    valuetype FacetDescription : PortDescription
    {
        public Object facet_ref;
    };
    typedef sequence<FacetDescription> FacetDescriptions;

    interface Navigation
    {
        Object provide_facet (in FeatureName name)
            raises (InvalidName);

        FacetDescriptions get_all_facets();

        FacetDescriptions get_named_facets (in NameList names)
            raises (InvalidName);

        boolean same_component (in Object object_ref);
    };

    valuetype Cookie
    {
        private CORBA::OctetSeq cookieValue;
    };

    valuetype ConnectionDescription
    {
        public Cookie ck;
        public Object objref;
    };
    typedef sequence<ConnectionDescription> ConnectionDescriptions;

    valuetype ReceptacleDescription : PortDescription
    {
        public boolean is_multiple;
        public ConnectionDescriptions connections;
    };
    typedef sequence<ReceptacleDescription> ReceptacleDescriptions;

    interface Receptacles
    {
        Cookie connect ( in FeatureName name, in Object connection )
            raises (
                    InvalidName,
                    InvalidConnection,
                    AlreadyConnected,
                    ExceededConnectionLimit);


        //
        // Change done according to the OMG issue 4983 resolved
        // in the OMG Components 1.1 RTF Interim Report, see
        // OMG TC documents ptc/2002-08-02 and ptc/2002-08-03
        //
        Object disconnect (
                           in FeatureName name,
                           in Cookie ck) raises (
                                                 InvalidName,
                                                 InvalidConnection,
                                                 CookieRequired,
                                                 NoConnection);

        ConnectionDescriptions get_connections (
                                                in FeatureName name) raises (InvalidName);

        ReceptacleDescriptions get_all_receptacles ();

        ReceptacleDescriptions get_named_receptacles (
                                                      in NameList names) raises(InvalidName);
    };

    abstract valuetype EventBase { };

    exception BadEventType
    {
        CORBA::RepositoryId expected_event_type;
    };

    interface EventConsumerBase
    {
        void push_event(in EventBase evt) raises (BadEventType);
    };

    valuetype ConsumerDescription : PortDescription
    {
        public EventConsumerBase consumer;
    };
    typedef sequence<ConsumerDescription> ConsumerDescriptions;

    valuetype EmitterDescription : PortDescription
    {
        public EventConsumerBase consumer;
    };
    typedef sequence<EmitterDescription> EmitterDescriptions;

    valuetype SubscriberDescription
    {
        public Cookie ck;
        public EventConsumerBase consumer;
    };
    typedef sequence<SubscriberDescription> SubscriberDescriptions;

    valuetype PublisherDescription : PortDescription
    {
        public SubscriberDescriptions consumers;
    };
    typedef sequence<PublisherDescription> PublisherDescriptions;

    interface Events
    {
        EventConsumerBase get_consumer (in FeatureName sink_name)
            raises (InvalidName);

        Cookie subscribe (in FeatureName publisher_name,
                          in EventConsumerBase subscriber)
            raises (InvalidName, InvalidConnection,
                    ExceededConnectionLimit);
        //
        // Change done according to the OMG issue 4983 resolved
        // in the OMG Components 1.1 RTF Interim Report, see
        // OMG TC documents ptc/2002-08-02 and ptc/2002-08-03
        //
        EventConsumerBase unsubscribe (in FeatureName publisher_name,
                                       in Cookie ck)
            raises (InvalidName, InvalidConnection);

        void connect_consumer (in FeatureName emitter_name,
                               in EventConsumerBase consumer)
            raises (InvalidName, AlreadyConnected,
                    InvalidConnection);

        EventConsumerBase disconnect_consumer (
                                               in FeatureName source_name)
            raises (InvalidName, NoConnection);

        ConsumerDescriptions get_all_consumers ();

        ConsumerDescriptions get_named_consumers (
                                                  in NameList names)
            raises (InvalidName);

        EmitterDescriptions get_all_emitters ();

        EmitterDescriptions get_named_emitters (in NameList names)
            raises (InvalidName);

        PublisherDescriptions get_all_publishers ();

        PublisherDescriptions get_named_publishers (in NameList names)
            raises (InvalidName);
    };

    abstract valuetype PrimaryKeyBase { };

    interface CCMObject;

    // OpenCCM specific
    typedef sequence<CCMObject> CCMObjects;

    interface CCMHome
    {
        CORBA::IRObject get_component_def();

        CORBA::IRObject get_home_def ();

        void remove_component (in CCMObject comp)
            raises (RemoveFailure);
        //
        // CHANGE FROM SPEC : NEW OPERATION
        //
        void remove_home()
            raises (RemoveFailure);

        // OpenCCM specific.
        //
        // Obtains all components managed by the home.
        //
        CCMObjects get_components();

        // OpenCCM specific
        //
        // Resolution for the OMG issue #6001.
        //
        // Obtains the Container where the home is installed.
        //
        Deployment::Container get_container();
    };

    interface KeylessCCMHome
    {
        CCMObject create_component() raises (CreateFailure);
    };

    exception HomeNotFound { };

    //registration interface required by DCI
    //Fred adding:release 0.8
    interface HomeRegistration
    {
        ::Components::Cookie
        register_home(in ::Components::CCMHome home_ref,
                      in ::CORBA::RepositoryId home_repid,
                      in ::CORBA::RepositoryId component_repid,
                      in string name);

         void
         unregister_home(in ::Components::Cookie ck)
         raises(CookieRequired);
    };


    interface HomeFinder
    {
        CCMHome find_home_by_component_type (
                                             in CORBA::RepositoryId comp_repid)raises (HomeNotFound);

        CCMHome find_home_by_home_type (
                                        in CORBA::RepositoryId home_repid) raises (HomeNotFound);

        CCMHome find_home_by_name (
                                   in string home_name) raises (HomeNotFound);
    };

    interface Configurator
    {
        void configure (in CCMObject comp)
            raises (WrongComponentType);
    };

    valuetype ConfigValue
    {
        public FeatureName name;
        public any value;
    };
    typedef sequence<ConfigValue> ConfigValues;

    interface StandardConfigurator : Configurator
    {
        void set_configuration (in ConfigValues descr);
    };

    interface HomeConfiguration : CCMHome
    {
        void set_configurator (in Configurator cfg);

        void set_configuration_values (in ConfigValues config);

        void complete_component_configuration (in boolean b);

        void disable_home_configuration();
    };

    valuetype ComponentPortDescription
    {
        public FacetDescriptions facets;
        public ReceptacleDescriptions receptacles;
        public ConsumerDescriptions consumers;
        public EmitterDescriptions emitters;
        public PublisherDescriptions publishers;
    };

    interface CCMObject : Navigation, Receptacles, Events
    {
        CORBA::IRObject get_component_def ( );

        CCMHome get_ccm_home( );

        PrimaryKeyBase get_primary_key( ) raises (NoKeyAvailable);

        void configuration_complete( ) raises (InvalidConfiguration);

        void remove() raises (RemoveFailure);

        ComponentPortDescription get_all_ports ();
    };

    // From Chapter 3: CCM Implementation Framework

    // Required here but defined in Chapter 4.

    enum CCMExceptionReason
        {
            SYSTEM_ERROR,
            CREATE_ERROR,
            REMOVE_ERROR,
            DUPLICATE_KEY,
            FIND_ERROR,
            OBJECT_NOT_FOUND,
            NO_SUCH_ENTITY
        };

    exception CCMException
    {
        CCMExceptionReason reason;
    };

    // Explicitly defined in Chapter 3

    //
    //  WARNING : change from the spec to be able to set the context
    //            without the use of SessionContext or EntityContext callback
    //            interfaces
    //

    exception IllegalState { };

    local interface CCMContext
    {
        // NOT IMPLEMENTED CURRENTLY
        // Principal get_caller_principal();

        CCMHome get_CCM_home();

        // NOT IMPLEMENTED CURRENTLY
        // boolean get_rollback_only() raises (IllegalState);

        // NOT IMPLEMENTED CURRENTLY
        // Transaction::UserTransaction get_user_transaction()
        //              raises (IllegalState);

        // NOT IMPLEMENTED CURRENTLY
        // boolean is_caller_in_role (in string role);

        // NOT IMPLEMENTED CURRENTLY
        // void set_rollback_only() raises (IllegalState);
    };

    local interface SessionContext : CCMContext
    {
        Object get_CCM_object() raises (IllegalState);
    };

    //
    //  ISSUE : change the location of configuration_complete operation
    //          see SPEC_BUGS for details
    //
    local interface EnterpriseComponent
    {
        //            void set_ccm_context(in CCMContext ctx)
        //           raises(CCMException);

        void configuration_complete()
            raises (InvalidConfiguration);
    };

    local interface ExecutorLocator : EnterpriseComponent
    {
        Object obtain_executor (in string name)
            raises (CCMException);

        void release_executor (in Object exc)
            raises (CCMException);
    };
    //
    //  end of changes
    //

    local interface SessionComponent : EnterpriseComponent
    {
        void set_session_context(in SessionContext ctx)
            raises(CCMException);

        void ccm_activate()
            raises(CCMException);

        void ccm_passivate()
            raises(CCMException);

        void ccm_remove()
            raises(CCMException);
    };

    local interface HomeExecutorBase {};

    local interface ExecutorSegmentBase {};

    // From Chapter 6.9: Component Deployment

    typedef sequence<CCMHome> CCMHomes;

    module Deployment
    {
        typedef FailureReason InvalidConfigurationReason;
        const InvalidConfigurationReason UnknownConfigValueName = 0;
        const InvalidConfigurationReason InvalidConfigValueType = 1;
        const InvalidConfigurationReason ConfigValueRequired = 2;
        const InvalidConfigurationReason ConfigValueNotExpected = 3;

        exception InvalidConfiguration
        {
            InvalidConfigurationReason reason;
            FeatureName name;
        };

        typedef string UUID;

        typedef string Location;

        exception UnknownImplId { };

        exception InvalidLocation { };

        exception InstallationFailure
        {
            FailureReason reason;
        };

        interface ComponentInstallation
        {
            void install(in UUID implUUID,
                         in Location component_loc)
                raises (InvalidLocation, InstallationFailure);

            void replace(in UUID implUUID,
                         in Location component_loc)
                raises (InvalidLocation, InstallationFailure);

            void remove(in UUID implUUID)
                raises (UnknownImplId, RemoveFailure);

            Location get_implementation(in UUID implUUID)
                raises(UnknownImplId, InstallationFailure);
        };

        interface Assembly;

        exception InvalidAssembly { };

        interface AssemblyFactory
        {
            //
            // Change done according to the OMG issue 5577 resolved
            // in the OMG Components 1.1 RTF Interim Report, see
            // OMG TC documents ptc/2002-08-02 and ptc/2002-08-03
            //
            Cookie create_assembly(in Location assembly_loc)
                raises (InvalidLocation, CreateFailure);

            Assembly lookup(in Cookie c)
                raises (InvalidAssembly);

            void destroy(in Cookie c)
                raises (InvalidAssembly, RemoveFailure);
        };

        enum AssemblyState { INACTIVE,  INSERVICE };

        interface Assembly
        {
            void build() raises (CreateFailure);

            void tear_down() raises (RemoveFailure);

            AssemblyState get_state();
        };

        interface ComponentServer;
        typedef sequence<ComponentServer> ComponentServers;

        interface ServerActivator
        {
            ComponentServer create_component_server(in ConfigValues config)
                raises(CreateFailure, InvalidConfiguration);

            void remove_component_server(in ComponentServer server)
                raises(RemoveFailure);

            ComponentServers get_component_servers();
        };

        // Already defined at the beginning of this file.
        // interface Container;

        typedef sequence<Container> Containers;

        interface ComponentServer
        {
            readonly attribute ConfigValues configuration;

            ServerActivator get_server_activator();

            Container create_container(in ConfigValues config)
                raises (CreateFailure, InvalidConfiguration);

            void remove_container(in Container cref) raises (RemoveFailure);

            Containers get_containers();

            void remove() raises (RemoveFailure);
        };

        exception ImplEntryPointNotFound { };

        interface Container
        {
            readonly attribute ConfigValues configuration;

            ComponentServer get_component_server();

            CCMHome install_home(in UUID id,
                                 in string entrypt,
                                 in ConfigValues config)
                raises (UnknownImplId,
                        ImplEntryPointNotFound,
                        InstallationFailure,
                        InvalidConfiguration);

            void remove_home(in CCMHome href) raises (RemoveFailure);

            CCMHomes get_homes();

            void remove() raises (RemoveFailure);
        };

    }; /* end module Deployment */
    
    //added for ECM support
    const FeatureName HOME_SERVANT_FEATURE_NAME="HomeServantFeatureName";
    
    const FeatureName VALUE_FACTORY_FEATURE_NAME="ValueFactoryFeatureName";
    
    
    struct ValueFactoryEntrypoint {
        string code_location;
        string repid;
        string value_entrypoint;
        string factory_entrypoint;
    };   
       
    typedef  sequence <ValueFactoryEntrypoint> valueFactoryEntrypointSeq;
    
    typedef string URIScheme ;
    
    const URIScheme FILEINARCHIVE_URI="fileinarchive";

}; /* end module Components */

#endif /* ifndef _COMPONENTS_IDL_ */
