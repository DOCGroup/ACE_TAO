
#ifndef MRTYPES_IDL
#define MRTYPES_IDL

// Monitoring and Reaction Types

#include "CosPropertyService.idl"
#ifndef __OMG_IDL_3__

#include "Components.idl"

#endif

module mil {
  module darpa {
    module arms {
      module mlrm {

	enum ExceptionClass {
	  PERFORMANCE_EXCEPTION,
	  LIVENESS_EXCEPTION
	};

	enum ExceptionScope {
	  APPLICATION_SCOPE,
	  NODE_SCOPE,
	  STRING_SCOPE,
	  POOL_SCOPE,
	  NETWORK_LINK_SCOPE,
	  NETWORK_DEVICE_SCOPE,
	  NETWORK_PATH_SCOPE
	};

        eventtype MLRMException {
	  public ExceptionClass class;
	  public ExceptionScope scope_;		// "scope" is a PSDL keyword
	  public string description;
	  public CosPropertyService::Properties details;
	};

	// XXX - We don't have the ability to use extended eventtypes
	// XXX   for now, so just copy structure.

	// eventtype Condition : MLRMException {};
	eventtype Condition {
	  public ExceptionClass class;
	  public ExceptionScope scope_;		// "scope" is a PSDL keyword
	  public string description;
	  public CosPropertyService::Properties details;
	};

	// XXX - eventtype sequences are broken for now
	// typedef sequence<Condition> Conditions;

	// eventtype Problem : MLRMException {
	//   public Conditions contributors;
	// };

	eventtype Problem {
	  public ExceptionClass class;
	  public ExceptionScope scope_;		// "scope" is a PSDL keyword
	  public string description;
	  public CosPropertyService::Properties details;
	  // public Conditions contributors;
	};

	// eventtype BasicCondition : Condition {};
	// eventtype BasicProblem : Problem {};

	typedef CosPropertyService::Properties DeterminatorPolicy;

	interface Determinator {
	  // Called by child determinators before publishing to
	  // check if the child's problem is already part of the
	  // parent's problem.
	  boolean suppress(in Problem p);

	  // Sets policy for determining what constitutes a problem.
	  attribute DeterminatorPolicy determ_policy;
	};

	typedef CosPropertyService::Properties ReactionPolicy;

	interface ReactionCoordinator {
	  // Sets policy for how to react to problems.
	  attribute ReactionPolicy react_policy;
	};

      };
    };
  };
};

#endif
