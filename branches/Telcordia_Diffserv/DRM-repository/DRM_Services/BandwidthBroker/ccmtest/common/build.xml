<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- ==================================================================== -->
<!--                                                                      -->
<!-- OpenCCM: The Open CORBA Component Model Platform                     -->
<!-- Copyright (C) 2000-2003 INRIA - USTL - LIFL - GOAL                   -->
<!-- Contact: openccm@objectweb.org                                       -->
<!--                                                                      -->
<!-- This library is free software; you can redistribute it and/or        -->
<!-- modify it under the terms of the GNU Lesser General Public           -->
<!-- License as published by the Free Software Foundation; either         -->
<!-- version 2.1 of the License, or any later version.                    -->
<!--                                                                      -->
<!-- This library is distributed in the hope that it will be useful,      -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of       -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU     -->
<!-- Lesser General Public License for more details.                      -->
<!--                                                                      -->
<!-- You should have received a copy of the GNU Lesser General Public     -->
<!-- License along with this library; if not, write to the Free Software  -->
<!-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 -->
<!-- USA                                                                  -->
<!--                                                                      -->
<!-- Initial developer(s): Romain Rouvoy, Philippe Merle.                 -->
<!-- Contributor(s): Sylvain Leblanc, Christophe Demarey.                 -->
<!--                 Jerome Offroy, Mike Gratsas,                         -->
<!--                 Christophe Contreras.                                -->
<!--                                                                      -->
<!-- ==================================================================== -->

<!-- ==================================================================== -->
<!--                                                                      -->
<!--  Common part for the OpenCCM's demonstration builds.                 -->
<!--    It contains usual application build process including:            -->
<!--      -IDL3, IDL2, CIDL compilations using OpenCCM's production chain -->
<!--      -Java code compilation (stubs + skeletons + implementations)    -->
<!--                                                                      -->
<!--    It is highly recommended to use this file for your applications,  -->
<!--      including it as it's done from our demos                        -->
<!--      ( with of course any needed adaptation ;-) )                    -->
<!--        then a <antcall target="application_full"/>                   -->
<!--        will do the job right . DON'T FORGET THE                     -->
<!--          ../common/build.properties                                  -->
<!--                                                                      -->
<!-- ==================================================================== -->

<project name="OpenCCM_demo_build" default="build_app_archives">

  <!-- Will allow usage of local environment variables -->
  <property environment="user.environment"/>

  <!-- The common/build.properties uses the application's name for        -->
  <!--   determination of idl3, cidl, idl2, local and cif idl filenames.  -->
  <!-- It also define common resource names like src, generated, idl,     -->
  <!--   stubs, skeletons, classes directories, packages and JAR names.   -->
  <!-- Its path may be overridden, this is a default value for our demos. -->
  <property name="path.to.common.files" value="../common"/>
  <property file="${path.to.common.files}/build.properties" />

  <import file="${user.environment.OpenCCM_HOMEDIR}/ant/openccm.xml"/>

  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- Define the project class path.                                     -->
  <!--                                                                    -->
  <!-- ================================================================== -->

  <path id="project.class.path">

    <!-- This allows the specialization of the build CLASSPATH            -->
    <!--  the calling application's build can provide extra JARs          -->
    <!--  filling "demo.specific.classpath" BEFORE importing  this file   -->
    <path refid="demo.specific.classpath" />

    <path refid="orb.classpath" />
    <path refid="jre.classpath" />

    <!-- ================================================================ -->
    <!--                                                                  -->
    <!-- All the required OpenCCM JAR files.                              -->
    <!--                                                                  -->
    <!-- ================================================================ -->

    <!-- The OpenCCM runtime.                                             -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/OpenCCM_Runtime.jar" />

    <!-- The OpenCCM production platform.                                 -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/OpenCCM_Platform.jar" />

    <!-- The OpenCCM CORBA wrapper.                                       -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/CORBA.jar" />

    <!-- The OpenCCM plugins.                                             -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/OpenCCM_Plugins.jar" />


     <!-- Temporary required for classes:                                 -->
    <!-- * org.objectweb.corba.util.LocalObjectBase                       -->
    <!-- * ...                                                            -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/OpenCCM_Utils.jar" />

    <!-- Temporary required for classes:                                  -->
    <!-- * org.objectweb.openccm.Deployment.CCMHomeLocal              -->
    <!-- * ...                                                            -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/OpenCCM_Deployment.jar" />


    <!-- Adding the explorer archive                                      -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/ow_util_explorer.jar" />
    <!-- Adding the ccm explorer archive                                  -->
    <pathelement path="${OpenCCM_HOMEDIR}/lib/ow_ccm_explorer.jar" />

    <pathelement path="${OpenCCM_HOMEDIR}/lib/ow_openccm_production.jar" />
    <pathelement path="${OpenCCM_HOMEDIR}/lib/ots/jdbc2_0-stdext.jar" />
    <pathelement path="${OpenCCM_HOMEDIR}/lib/ots/jta_1.0.1.jar" />
    <pathelement path="${OpenCCM_HOMEDIR}/lib/ots/openorb_ots-1.3.0.jar" />
  </path>

  <!-- ================================================================== -->
  <!-- The main steps.                                                    -->
  <!-- ================================================================== -->
  <target name="build_app_archives" depends="application_step4"/>

  <target name="application_step0" depends="-antcontrib.init">
    <echo message=" * Step 0: Clean" />
    <antcall target="application_clean" />
  </target>
  <target name="application_step1" depends="application_step0">
    <echo message="" />
    <echo message=" * Step 1: Initialisation" />
    <antcall target="application_create_directories" />
    <antcall target="monolog_setup" />
  </target>
  <target name="application_step2" depends="application_step1,openccm_tasks">
    <echo message="" />
    <echo message=" * Step 2: Generation" />
    <antcall target="application_generation" />
    <antcall target="application_generate_stubs" />
  </target>
  <target name="application_step3" depends="application_step2">
    <echo message="" />
    <echo message=" * Step 3: Compilation" />
    <antcall target="application_compile_stubs" />
    <antcall target="application_compile_skeletons" />
    <antcall target="application_compile_implementations" />
  </target>
  <target name="application_step4" depends="application_step3">
    <echo message="" />
    <echo message=" * Step 4: Archiving ( FINAL STEP )" />
  </target>

  <!-- ================================================================== -->
  <!-- Clean up old and generated files.                                  -->
  <!-- ================================================================== -->

  <target name="application_reset" depends="application_clean">
    <delete failonerror="false">
      <fileset dir="${application.root.dir}">
        <exclude name="build.xml"/>
        <include name="build.*"/>
        <include name="bin/cp.bat"/>
        <include name="demo.xml" />
        <include name="*log*"/>
      </fileset>
    </delete>
  </target>

  <target name="application_clean">
    <echo message="  ==> Cleaning application &lt;${application.name}&gt;" />
    <delete dir="${application.archives.dir}" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${application.gen.dir}" includeEmptyDirs="true" failonerror="false" />
  </target>

  <!-- ================================================================== -->
  <!-- Create directories.                                                -->
  <!-- ================================================================== -->

  <target name="application_create_directories">
    <echo message="  ==> Creating target and archives directories" />
    <mkdir dir="${application.gen.dir}" />
    <mkdir dir="${application.gen.idl.dir}" />
    <mkdir dir="${application.gen.stubs.dir}" />
    <mkdir dir="${application.gen.skel.dir}" />
    <mkdir dir="${application.class.dir}" />
    <mkdir dir="${application.dependencies.dir}" />
    <mkdir dir="${application.archives.dir}" />
    <mkdir dir="${ecm.servant.application.class.dir}"/>
  </target>

  <!-- ================================================================== -->
  <!-- Generate the OMG IDL2 file and OpenCCM skeletons.                  -->
  <!-- ================================================================== -->


  <target name="application_generation">
  
    <openccm>
      <ir3_feed>
<!--        <file name="${OpenCCM_HOMEDIR}/idl/CosNaming.idl"/>
        <file name="${OpenCCM_HOMEDIR}/idl/CosTrading.idl"/>
-->
          <file name ="${user.environment.DRM_ROOT}/${application.arms.basedir}/idl-include/CosPropertyService.idl" />
          <file name="${user.environment.DRM_ROOT}/${application.drmservices.basedir}/common/mr/MRTypes.idl" />
        <file name="${application.root.dir}/${application.idl3.name}"/>
        <cpp>
          <includepath name="${OpenCCM_HOMEDIR}/idl"/>
        </cpp>
      </ir3_feed>

          
      <ir3_idl2 scope="mil::darpa::arms::mlrm"
                destfile="${application.gen.idl.dir}/${application.idl2.name}">
<!--        <include name="CosNaming.idl" />
        <include name="CosTrading.idl" />
-->
        <include name="CORBA.idl" />
        <include name="TypeCode.idl" />
        <include name="CosPropertyService.idl" />
      </ir3_idl2>

      <ir3_java scope="mil::darpa::arms::mlrm" 
                destdir="${application.gen.skel.dir}" />

      <cidl_cif file="${application.root.dir}/${application.cidl.name}"
                destfile="${application.gen.idl.dir}/${application.idl2.cif.name}"
                destdir="${application.gen.skel.dir}"
                dependenciesdir="${application.dependencies.dir}">
        <userinclude name="${application.idl2.local.name}"/>
      </cidl_cif>
   </openccm>
  </target>

  <target name="ecm_generation"  if="ecm.install.dir">
  	<echo message="   * Generating ECM servant " />
	  <echo message="execute ${ecm.install.dir}/bin/ir3_servant.bat ${application.gen.ecm.servant.dir}"/>
	  <exec executable="${ecm.install.dir}/bin/ir3_servant.bat">
	    <arg line =" --outputdir ${application.gen.ecm.servant.dir} ${application.name} "/>
	  </exec>	
	  
	  <echo message=" * Generation ECM container interceptor"/>
	  <exec executable="${ecm.install.dir}/bin/ir3_copi.bat">
	    <arg line =" -d ${application.gen.ecm.servant.dir} ${application.name} "/>
	  </exec>	
  </target>

  <!-- ================================================================== -->
  <!-- Generate Java CORBA 2 stubs.                                       -->
  <!-- ================================================================== -->
  <target name="application_generate_stubs">
    <echo message="  ==> Generating ${application.name} CORBA 2 stubs" />
    <!-- Remote interfaces -->
    <idl2java file="${application.gen.idl.dir}/${application.idl2.name}"
              destdir="${application.gen.stubs.dir}"
              includes="${application.gen.idl.dir},${OpenCCM_HOMEDIR}/idl,${user.environment.DRM_ROOT}/${application.arms.basedir}/idl-include" >
      <mapping idlpkg="${application.name}"
javapkg="${application.idl2java.package}"/>
    </idl2java>
    <!-- Local interfaces -->
    <idl2java file="${application.gen.idl.dir}/${application.idl2.local.name}"
              destdir="${application.gen.stubs.dir}"
              includes="${application.gen.idl.dir},${OpenCCM_HOMEDIR}/idl,${user.environment.DRM_ROOT}/${application.arms.basedir}/idl-include" >
      <mapping idlpkg="${application.name}"
javapkg="${application.idl2java.package}"/>
    </idl2java>
    <!-- CIF interfaces -->
    <idl2java file="${application.gen.idl.dir}/${application.idl2.cif.name}"
              destdir="${application.gen.stubs.dir}"
              includes="${application.gen.idl.dir},${OpenCCM_HOMEDIR}/idl,${user.environment.DRM_ROOT}/${application.arms.basedir}/idl-include" >
      <mapping idlpkg="${application.name}"
javapkg="${application.idl2java.package}"/>
    </idl2java>
  </target>

  <!-- ================================================================== -->
  <!-- Compile generated Java CORBA 2 stubs.                              -->
  <!-- ================================================================== -->

  <target name="application_compile_stubs">
    <echo message="  ==> Compiling generated Java CORBA 2 stubs." />
    <antcall target="openccm.javac">
      <param name="srcdir" value="${application.gen.stubs.dir}" />
      <param name="destdir" value="${application.class.dir}" />
      <!--param name="files" value="${application.pkg.dir}/**/*.java" /-->
      <param name="files" value="mil/darpa/arms/mlrm/**/*.java" />
    </antcall>
  </target>

  <!-- ================================================================== -->
  <!-- Compile generated Java OpenCCM skeletons.                          -->
  <!-- ================================================================== -->

  <target name="application_compile_skeletons">
    <echo message="  ==> Compiling generated Java OpenCCM skeletons." />
    <antcall target="openccm.javac">
      <param name="srcdir" value="${application.gen.skel.dir}" />
      <param name="destdir" value="${application.class.dir}" />
      <param name="files" value="${application.pkg.dir}/**/*.java" />
    </antcall>
  </target>

  <!-- ================================================================== -->
  <!-- Compile all Java implementation sources.                           -->
  <!-- ================================================================== -->

  <target name="application_compile_implementations">
    <echo message="  ==> Compiling all Java implementation sources." />
    <antcall target="openccm.javac">
      <param name="srcdir" value="${application.src.dir}" />
      <param name="destdir" value="${application.class.dir}" />
      <param name="files" value="**/*.java" />
    </antcall>
  </target>


  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- Javac with OpenCCM bootclass and class paths set.                  -->
  <!--                                                                    -->
  <!-- Parameters are:                                                    -->
  <!-- * srcdir  The directory containing Java source files.              -->
  <!-- * destdir The directory containing Java class files.               -->
  <!-- * files   The files to compile.                                    -->
  <!--                                                                    -->
  <!-- ================================================================== -->

  <target name="openccm.javac">
    <javac failonerror="true"
           srcdir="${srcdir}"
           destdir="${destdir}"
           debug="${javac.debug}">
      <classpath refid="project.class.path" />
<!--      <bootclasspath refid="project.boot.class.path" />-->
      <include name="${files}" />
    </javac>
  </target>


  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- Target name: monolog_setup                                         -->
  <!--                                                                    -->
  <!-- Description: writes Monolog's config file to point an output dir   -->
  <!--                                                                    -->
  <!-- Parameters:                                                        -->
  <!--                                                                    -->
  <!--   Name             Description                                     -->
  <!--                                                                    -->
  <!-- Use example:                                                       -->
  <!--                                                                    -->
  <!--   <antcall target="monolog_setup" />                               -->
  <!--                                                                    -->
  <!-- ================================================================== -->

  <target name="monolog_setup">
    <path id="monolog.output.dir">
        <pathelement location="${OpenCCM_CONFIG_DIR}/log/" />
    </path>
    <pathconvert targetos="unix" property="monolog.output.dir.unix" refid="monolog.output.dir"/>

    <echo message="  ==> Copying Monolog property files" />
    <copy todir="${application.root.dir}" overwrite="true">
      <fileset dir="${OpenCCM_HOMEDIR}/ant" includes="monolog.CCM.properties"/>
      <filterset>
        <filter token="MONOLOG_DEFAULT_OUTPUT_DIR" value="${monolog.output.dir.unix}/" />
      </filterset>
    </copy>
  </target>

</project>
