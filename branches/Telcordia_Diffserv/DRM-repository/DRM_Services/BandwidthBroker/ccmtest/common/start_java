#! /bin/sh -f
# ====================================================================
#
# OpenCCM: The Open CORBA Component Model Platform
# Copyright (C) 2000-2004 INRIA - USTL - LIFL - GOAL
# Contact: openccm@objectweb.org
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
# Initial developer(s): Philippe Merle.
# Contributor(s): Christophe Demarey, Jerome Offroy, Briclet Frédéric.
#
# ====================================================================
#
# Starting a demonstration.
#
# $1: demonstration name.
#
# ====================================================================

demo_name=$1

# =====================
# Compute Command Line.
# =====================

if [ $# -lt 1 ]
then
    echo "usage: start_java <demo_name> [--ots] [--trace] [--monolithic | --xml]"
    exit 1
fi

with_ots="false"
with_trace="false"
with_trader="false"
with_tracing="false"
xml="true"
run_id=cif
services_args=
services_list=
assembly_zip=archives/${demo_name}.aar

for arg in $@;
do
    case $arg in
    "--trace")
        with_trace="true"
        services_args="${services_args} --trace"
        services_list="${services_list} Trace "
        ;;
    "--ots")
        with_ots="true"
        services_args="${services_args} --ots"
        services_list="${services_list} Transactional "
        ;;
    "--tracing")
        with_tracing="true"
        services_args="${services_args} --tracing"
        services_list="${services_list} Tracing "
        ;;
    "--xml")
        xml="true"
        ;;
    "--monolithic")
        run_id=monolithic
        ;;
    "--trader")
        with_trader="true"
        ;;
    "-h")
        echo "usage: start_java <demo_name> [--ots] [--trace] [--tracing] [--monolithic | --xml ] [--trader]"
        exit 1
        ;;
    *)
    esac
done

# Ant compilation if needed.
#
if [ ! -f generated/idl/${demo_name}.idl -o ! -f archives/${demo_name}.aar ]
then
    ./build.sh
fi

# =================
# Install platform.
# =================

# Install the OpenCCM Platform.
#
ccm_install

# =======================
# Start the Name Service.
# =======================

#ns_start
#ns_set $NS_IOR
# Obtain the IOR of the started Name Service.
#


#Uncomment the line below to use TAO(or another)  NameService
#Start the TAO naming service( with -o option)  and set the variable
#NS_IOR to point to the ior file generated 

#cp $NS_IOR $OpenCCM_CONFIG_DIR/NameService.IOR

#Comment the line below if you are not using the Jacorb NS
ns_start


ior_NS=`ns_ior`

# ==========================
# Start the Trading Service.
# ==========================

if [ "$with_trader" = "true" ]
then
    trader_start
fi

# ==============================
# Start the Transaction Service.
# ==============================

if [ "$with_ots" = "true" ]
then
    ots_start

    # Obtain the IOR of the started Transaction Service.
    #
    ior_OTS=`ots_ior`
fi

# ==========================
# Start the COACH Tracing Service.
# ==========================

if [ "$with_tracing" = "true" ]
then
    coach_tracing_start
fi

# =========================================================================
# Start Java Component Servers named ComponentServer1 and ComponentServer2.
# =========================================================================

jcs_start $services_args ComponentClient
sleep 5
# jcs_start $service_args ComponentBWServer
# sleep 5
# jcs_start $services_args ComponentFPServer
# sleep 5

# ==========================================================
# Start a default main_node to use deployment functionnality.
# ==========================================================

dci_start $services_args DefaultDCI
sleep 2

# ==========================================================
# Start a default main_node to use deployment functionnality.
# ==========================================================

factory_start $services_args DefaultFactory
sleep 1

# ==========================================================
# Start a default main_node to use deployment functionnality.
# ==========================================================

node_start $services_args MainNode
sleep 1

# ========================
# Start the demonstration.
# ========================

echo "Starting demonstration $demo_name with [${services_list}] deployment"

if [ "$xml" = "true" ]
then
    ccm_deploy -F DefaultFactory $services_args $assembly_zip
else
    jvm_args="-Dior_ns=$ior_NS"

    if [ "$with_ots" = "true" ]
    then
        jvm_args="$jvm_args -Dior_ots=$ior_OTS"
        run_id=${run_id}_ots
    fi

    if [ "$with_trace" = "true" ]
    then
        jvm_args="$jvm_args"
        run_id=${run_id}_trace
    fi

    if [ "$with_tracing" = "true" ]
    then
        jvm_args="$jvm_args"
        run_id=${run_id}_tracing
    fi

    launcher.sh exec "$jvm_args" "--runid ${run_id} ${demo_name}.xml"
fi

echo "The demonstration $demo_name is ready to be used ..."

ccm_browser 
