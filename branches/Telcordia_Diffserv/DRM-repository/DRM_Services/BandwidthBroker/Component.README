The Bandwidth Broker can be built in two ways:
- the original object server version, in which you run a process for
each part (BB, FP, etc.).  See other .README files for this
- this newer OpenCCM (component) based version

This file describes building and running the OpenCCM-based version.
(To facilitate easy experimentation in Emulab, we have also created 
a .ns file and an image with OpenCCM-0.9 installed and configured. See
Instructions for Emulab at the end of the section.)

1. Install OpenCCM 0.9 if you don't have it already

2. Set up to build component version of BB 

- export the env variables:
	- OpenCCM_HOMEDIR=/opt/openccm	#(or wherever openccm is installed)
- cd to the directory where this README file lives

Following 2 steps may be temporary until a better sol'n is found
	- cp idl-include/MRTypes.idl.component idl-include/MRTypes.idl
	- cp idl-include/CosPropertyService.idl.component idl-include/CosPropertyService.idl

3. Do the build (note that build is done using
buildComponent.xml and commonComponent.xml rather than build.xml and
common.xml which are used for the object server version of the build)
:
	- ant -f buildComponent.xml
	  This may take a somewhat long time.  After the first time you
	  successfully build, you can 'export IDL_BYPASS=1' and
	  subsequent builds will skip the process of generating from
	  IDL.  The result of the build is the file archives/BBComponents.aar

4. Set up DB.  Follow instructions in BandwidthBroker.README.
Basically you need to load the arms-initdb.sql and
telcordia-lab-fault.sql (or other appropriate configuration) into
ARMSBB database.  These can be found under src/db.

5. Run it:
	- make sure env variables are set:
		- OpenCCM_CONFIG_DIR=<somewhere>/OpenCCM_CONFIG_DIR
		  (log files will go under here as will stdout, which
		  goes in a file called ComponentServer1.output)
		- PATH=$PATH:<installDir>/openccm/bin/
		- PATH=$PATH:<installDir>/openccm/examples/common/
	- in this directory (where README lives) 
	  run: 'start_java BBComponents --xml'
	  Toward the end of starting the components, there will be a
	  dialog box in which you must enter router authorization.
	  Enter 'darparms' in the text field, check the loopback box
	  (so the FP doesn't send commands to the routers), and click OK.
	  After all components are configured, the test client component
	  calls the BB to setup a flow.
	- to kill it, call 'stop_java'  Currently, this throws some
	  exceptions, so you also need to kill some java processes
	  afterwards.

Other tips:
- when you run start_java, it also brings up the openccm explorer.
You can use this to add new test components, connect them to the BB,
and cause them to issue commands to create/delete/modify flows.  (will
add more details later)
	- note: displaying openccm explorer across the internet is
	impossibly slow due to X11.  If you need to do this (say, from
	Emulab), then use VNC.
- start_java is fairly heavyweight.  If you are doing development and
need to start and stop often, you can just stop/start the component
server and apps, leaving the rest of the infrastructure (name server, DCI,
factory, etc.) running.  Scripts to do this are in deploy/bin:
	- openccmPlatform{Start|Stop].sh
	- openccmApp[Start|Stop].sh
	Note that these must be run from the directory where this README file
	lives.
--------------------------------------------------------------

Instructions for Emulab.

1. Here is the .ns file. The .ns file can be copied from the
Experiment ID BB-component.
	#generated by Netbuild 1.03
	 ns [new Simulator] 
	source tb_compat.tcl 
	set bb [$ns node] 
	tb-set-hardware $bb pc3000 
	tb-set-node-os $bb bb-component2 
	$ns rtproto Static 
	$ns run 
	#netbuild-generated ns file ends. 
2.  Source in ~fdpo/.bash_profile or see as a sample for setting
various environment variables such as OpenCCM_HOMEDIR,
OpenCCM_CONFIG-DIR and OpenCCM paths.  
3. The build command ant -f buildComponent.xml may need to be run using
sudo to overcome file owenership problems. 
4.  A sample session (in Emulab) to setup the DB after starting the
mysqld daemon with: 
sudo /usr/sbin/mysqld_safe &

	mysql -u arms -parms <  src/db/arms-initdb.sql
	mysql -u arms -parms < src/db/telcordia-lab-fault.sql

5. The run step (start_java) for deplying the components and stop
steps (stop_java) are as described above.
