<?xml version="1.0"?>
<!DOCTYPE paradigm SYSTEM "edf.dtd">

<paradigm name="SIML" guid="{84BE62A4-EC0C-4FAF-9BE2-F3D0C4327213}" cdate="Thu Aug 17 19:52:17 2006" mdate="Thu Aug 17 19:52:17 2006" >

	<comment>System Integration Modeling Language (SIML) is a domain-specific modeling 
language that allows integration of systems using different middleware 
technologies like CORBA Component Model (CCM) and Web Services.</comment>

	<author>Krishnakumar B</author>

	<folder name = "RootFolder" metaref = "1000"  subfolders = "PICML::ComponentAnalyses PICML::ComponentBuild PICML::ComponentImplementations PICML::ComponentPackages PICML::ComponentTypes PICML::DeploymentPlans PICML::ImplementationArtifacts PICML::InterfaceDefinitions PICML::PackageConfigurations PICML::PathDiagrams PICML::PredefinedTypes PICML::Targets PICML::TopLevelPackages PICML::WorkerLibraries" rootobjects = "SIML::System WSML::Definitions WSML::Schema WSML::SchemaBuiltins" >
		<constraint type="function" name="AllParams" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;;ocl::Set;
			parts (InParameter) + parts (InoutParameter) + parts (OutParameter)]]>
		</constraint>
		<constraint type="function" name="ComponentParentType" defdfornamesp = "PICML">
			<![CDATA[method;gme::FCO;;gme::FCO;
			if self.isInstance()
then
   let myType = self.type() in
   if myType.isType()
   then
      myType
   else
      myType.ComponentParentType()
   endif
else
   self
endif]]>
		</constraint>
		<constraint type="function" name="ConnectorParents" defdfornamesp = "PICML">
			<![CDATA[method;gme::Reference;;ocl::Bag;
			self.connectedFCOs(publish)->iterate (c : gme::FCO; acc = Bag{} | acc + Bag{c.parent()})]]>
		</constraint>
		<constraint type="function" name="MonolithicImpls" defdfornamesp = "PICML">
			<![CDATA[method;gme::Atom;;ocl::Set;
			self.connectedFCOs(Implementation)->iterate
 (i: gme::Reference; acc = Set{} | acc + Set{i.refersTo()})]]>
		</constraint>
		<constraint type="function" name="allAscendants" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;visited: ocl::Set;ocl::Set;
			let parents = self.ascendants() in
   let visited = visited.including(self) in
   parents->iterate( i : gme::Model ; accu = Set{} |
      if ( visited.includes(i) or i = self ) then
         accu.including(i)
      else
         accu.including(i) + i.allAscendants(visited)
      endif
)]]>
		</constraint>
		<constraint type="function" name="allFileScopeDecls" defdfornamesp = "PICML">
			<![CDATA[method;gme::Folder;;ocl::Set;
			let closure = self.models ("File") in
          if (closure->size < 1) then
          Set{}
          else
          closure->iterate (x ; accu = Set{} | accu
          + x.parts ()
          - x.parts ("FileRef")
          - x.parts ("ComponentRef")
          - x.parts ("ManagesComponent"))
          endif]]>
		</constraint>
		<constraint type="function" name="allOps" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;top: gme::Model;ocl::Set;
			let ret = localOps () + inheritedOps (top) + supportedOps () + inheritedSupportedOps () in
          ret]]>
		</constraint>
		<constraint type="function" name="ascendants" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;;ocl::Set;
			self.referenceParts(Inherits)->iterate
 (i: gme::Reference; acc = Set{} | acc + Set{i.refersTo()})]]>
		</constraint>
		<constraint type="function" name="inheritedOps" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;top : gme::Model;ocl::Set;
			let parents = self.referenceParts ("Inherits") in
          parents->iterate (ref; accu = Set{} | accu +
          (let parent = ref.refersTo ().oclAsType (gme::Model) in
          if (parent == top) then Set{}
          else
          parent.localOps () + parent.inheritedOps (top)
          endif))]]>
		</constraint>
		<constraint type="function" name="inheritedSupportedOps" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;;ocl::Set;
			let parents= referenceParts ("Inherits") in
          parents->iterate (ref; accu = Set{} | accu +
          (let parent = ref.refersTo ().oclAsType (gme::Model) in
          parent.supportedOps () + parent.inheritedSupportedOps ()))]]>
		</constraint>
		<constraint type="function" name="inheritsRecursive" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;top : gme::Model;ocl::Set;
			let inherits = referenceParts ("Inherits") in
          inherits->iterate (ref; accu = Set{} | accu +
          (let parent = ref.refersTo ().oclAsType (gme::Model) in
          Set {parent} +
          (if (parent != top) then parent.inheritsRecursive (top)
          else Set {}
          endif)))]]>
		</constraint>
		<constraint type="function" name="localOps" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;;ocl::Set;
			self.parts ("OnewayOperation") + self.parts ("TwowayOperation") +
          self.parts ("FactoryOperation") + self.parts ("LookupOperation")]]>
		</constraint>
		<constraint type="function" name="supportedOps" defdfornamesp = "PICML">
			<![CDATA[method;gme::Model;;ocl::Set;
			let supported_set = referenceParts ("Supports") in
          supported_set->iterate (ref; accu = Set{} | accu +
          (let supported = ref.refersTo ().oclAsType (gme::Model) in
          supported.localOps () + supported.inheritedOps (supported)))]]>
		</constraint>
		<attrdef name="Abstract" metaref = "6412" valuetype = "boolean" defvalue = "false">
			<dispname>Abstract:</dispname>
			<regnode name="help" value = "Flag that specifys if the worker is abstract. An abstract worker is one that cannot be used directly in a class as a worker. However, it can be subclassed by other workers."></regnode>
		</attrdef>
		<attrdef name="DataValue" metaref = "1001" valuetype = "string" defvalue = "">
			<dispname>value</dispname>
		</attrdef>
		<attrdef name="DocText" metaref = "7229" valuetype = "string" defvalue = "">
			<regnode name="multiLine" value = "10"></regnode>
		</attrdef>
		<attrdef name="Location" metaref = "6413" valuetype = "string" defvalue = "">
			<dispname>Location</dispname>
			<regnode name="help" value = "Specifies the location of the object on disk. It can be a relative or absolute location."></regnode>
		</attrdef>
		<attrdef name="LogAction" metaref = "6414" valuetype = "boolean" defvalue = "false">
			<dispname>Enable Logging:</dispname>
			<regnode name="help" value = "This determines whether or not to log an action. The semantics of logging is dependent on the interpreter."></regnode>
		</attrdef>
		<attrdef name="Mixed" metaref = "1002" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="ORBServices" metaref = "1022" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="Order" metaref = "7230" valuetype = "integer" defvalue = "0">
			<regnode name="help" value = "Determines the processing order of child Elements of an Element"></regnode>
		</attrdef>
		<attrdef name="Period" metaref = "6415" valuetype = "integer" defvalue = "1000">
			<dispname>Period (msec):</dispname>
			<regnode name="help" value = "The period of the action. The units of value is milliseconds."></regnode>
		</attrdef>
		<attrdef name="Postcondition" metaref = "6416" valuetype = "string" defvalue = "">
			<dispname>Postcondition:</dispname>
			<regnode name="help" value = "Defines the effects of executing the previous action."></regnode>
		</attrdef>
		<attrdef name="Precondition" metaref = "6417" valuetype = "string" defvalue = "">
			<dispname>Precondition:</dispname>
			<regnode name="help" value = "Defines the condition that allows execution of the next action."></regnode>
		</attrdef>
		<attrdef name="PrefixTag" metaref = "1023" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="Probability" metaref = "6418" valuetype = "double" defvalue = "1.0">
			<dispname>Probability</dispname>
			<regnode name="help" value = "The probability of the action occurring."></regnode>
		</attrdef>
		<attrdef name="Repetitions" metaref = "6419" valuetype = "integer" defvalue = "1">
			<dispname>Number of Repeitions:</dispname>
			<regnode name="help" value = "Specifies the number of repetitions for an operation. Actions with 0 repetitions are considered non-repetitive actions."></regnode>
		</attrdef>
		<attrdef name="ResourceUsageKind" metaref = "1024" valuetype = "enum" defvalue = "None">
			<dispname>resourceUsage</dispname>
			<enumitem dispname = "None" value = "None"></enumitem>
			<enumitem dispname = "InstanceUsesResource" value = "InstanceUsesResource"></enumitem>
			<enumitem dispname = "ResourceUsesInstance" value = "ResourceUsesInstance"></enumitem>
			<enumitem dispname = "PortUsesResource" value = "PortUsesResource"></enumitem>
			<enumitem dispname = "ResourceUsesPort" value = "ResourceUsesPort"></enumitem>
		</attrdef>
		<attrdef name="SatisfierPropertyKind" metaref = "1025" valuetype = "enum" defvalue = "Quantity">
			<dispname>kind</dispname>
			<enumitem dispname = "Quantity" value = "Quantity"></enumitem>
			<enumitem dispname = "Capacity" value = "Capacity"></enumitem>
			<enumitem dispname = "Minimum" value = "Minimum"></enumitem>
			<enumitem dispname = "Maximum" value = "Maximum"></enumitem>
			<enumitem dispname = "Selection" value = "Selection"></enumitem>
			<enumitem dispname = "Attribute" value = "Attribute"></enumitem>
		</attrdef>
		<attrdef name="SpecifyIdTag" metaref = "1026" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="UUID" metaref = "1027" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="Value" metaref = "1003" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="VersionTag" metaref = "1028" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="benchmarkIterations" metaref = "1029" valuetype = "integer" defvalue = "">
		</attrdef>
		<attrdef name="componentPort" metaref = "1031" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="configuration" metaref = "1032" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="dstPortName" metaref = "7227" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="dynamic" metaref = "3175" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="encodingStyle" metaref = "1004" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="exclusiveProvider" metaref = "1036" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="exclusiveUser" metaref = "1037" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="fileName" metaref = "1038" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="id" metaref = "1005" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="iterations" metaref = "1041" valuetype = "integer" defvalue = "">
		</attrdef>
		<attrdef name="label" metaref = "1042" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="language" metaref = "6402" valuetype = "enum" defvalue = "CPP">
			<enumitem dispname = "CPP" value = "CPP"></enumitem>
			<enumitem dispname = "Java" value = "Java"></enumitem>
			<enumitem dispname = "CSharp" value = "CSharp"></enumitem>
		</attrdef>
		<attrdef name="libraryexport" metaref = "1043" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="location" metaref = "1044" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="optional" metaref = "1045" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="out_event_port_type" metaref = "1046" valuetype = "enum" defvalue = "DirectConnect">
			<enumitem dispname = "DirectConnect" value = "DirectConnect"></enumitem>
			<enumitem dispname = "RTEventChannel" value = "RTEventChannel"></enumitem>
		</attrdef>
		<attrdef name="parameterOrder" metaref = "1007" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="priority" metaref = "1048" valuetype = "integer" defvalue = "-1">
		</attrdef>
		<attrdef name="rate" metaref = "1050" valuetype = "integer" defvalue = "-1">
		</attrdef>
		<attrdef name="required" metaref = "1008" valuetype = "boolean" defvalue = "false">
		</attrdef>
		<attrdef name="requiredName" metaref = "1051" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="requiredType" metaref = "1052" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="requiredUUID" metaref = "1053" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="resolution" metaref = "1054" valuetype = "enum" defvalue = "microseconds">
			<enumitem dispname = "seconds" value = "seconds"></enumitem>
			<enumitem dispname = "miliseconds" value = "miliseconds"></enumitem>
			<enumitem dispname = "microseconds" value = "microseconds"></enumitem>
		</attrdef>
		<attrdef name="resourcePort" metaref = "1055" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="resourceType" metaref = "1056" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="schemaLocation" metaref = "1009" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="schemaType" metaref = "7231" valuetype = "enum" defvalue = "local">
			<enumitem dispname = "local" value = "local"></enumitem>
			<enumitem dispname = "element" value = "element"></enumitem>
			<enumitem dispname = "attribute" value = "attribute"></enumitem>
			<enumitem dispname = "complexType" value = "complexType"></enumitem>
			<enumitem dispname = "simpleType" value = "simpleType"></enumitem>
			<enumitem dispname = "include" value = "include"></enumitem>
			<enumitem dispname = "import" value = "import"></enumitem>
			<enumitem dispname = "redefine" value = "redefine"></enumitem>
			<enumitem dispname = "any" value = "any"></enumitem>
			<enumitem dispname = "anyAttribute" value = "anyAttribute"></enumitem>
			<enumitem dispname = "group" value = "group"></enumitem>
			<enumitem dispname = "attributeGroup" value = "attributeGroup"></enumitem>
			<enumitem dispname = "key" value = "key"></enumitem>
			<enumitem dispname = "keyref" value = "keyref"></enumitem>
			<enumitem dispname = "unique" value = "unique"></enumitem>
			<enumitem dispname = "annotation" value = "annotation"></enumitem>
			<enumitem dispname = "documentation" value = "documentation"></enumitem>
			<enumitem dispname = "appinfo" value = "appinfo"></enumitem>
			<enumitem dispname = "notation" value = "notation"></enumitem>
		</attrdef>
		<attrdef name="sharedname" metaref = "1057" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="soapAction" metaref = "1010" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="srcPortName" metaref = "7228" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="style" metaref = "1011" valuetype = "enum" defvalue = "document">
			<enumitem dispname = "document" value = "document"></enumitem>
			<enumitem dispname = "rpc" value = "rpc"></enumitem>
		</attrdef>
		<attrdef name="timeperiod" metaref = "1059" valuetype = "integer" defvalue = "">
		</attrdef>
		<attrdef name="transport" metaref = "1012" valuetype = "string" defvalue = "">
		</attrdef>
		<attrdef name="typeCode" metaref = "1554" valuetype = "enum" defvalue = "string">
			<enumitem dispname = "string" value = "string"></enumitem>
			<enumitem dispname = "boolean" value = "boolean"></enumitem>
			<enumitem dispname = "float" value = "float"></enumitem>
			<enumitem dispname = "double" value = "double"></enumitem>
			<enumitem dispname = "decimal" value = "decimal"></enumitem>
			<enumitem dispname = "duration" value = "duration"></enumitem>
			<enumitem dispname = "dateTime" value = "dateTime"></enumitem>
			<enumitem dispname = "time" value = "time"></enumitem>
			<enumitem dispname = "date" value = "date"></enumitem>
			<enumitem dispname = "gYearMonth" value = "gYearMonth"></enumitem>
			<enumitem dispname = "gYear" value = "gYear"></enumitem>
			<enumitem dispname = "gMonthDay" value = "gMonthDay"></enumitem>
			<enumitem dispname = "gDay" value = "gDay"></enumitem>
			<enumitem dispname = "gMonth" value = "gMonth"></enumitem>
			<enumitem dispname = "hexBinary" value = "hexBinary"></enumitem>
			<enumitem dispname = "base64Binary" value = "base64Binary"></enumitem>
			<enumitem dispname = "anyURI" value = "anyURI"></enumitem>
			<enumitem dispname = "QName" value = "QName"></enumitem>
			<enumitem dispname = "NOTATION" value = "NOTATION"></enumitem>
			<enumitem dispname = "normalizedString" value = "normalizedString"></enumitem>
			<enumitem dispname = "token" value = "token"></enumitem>
			<enumitem dispname = "language" value = "language"></enumitem>
			<enumitem dispname = "IDREFS" value = "IDREFS"></enumitem>
			<enumitem dispname = "ENTITIES" value = "ENTITIES"></enumitem>
			<enumitem dispname = "NMTOKEN" value = "NMTOKEN"></enumitem>
			<enumitem dispname = "NMTOKENS" value = "NMTOKENS"></enumitem>
			<enumitem dispname = "name" value = "name"></enumitem>
			<enumitem dispname = "NCName" value = "NCName"></enumitem>
			<enumitem dispname = "ID" value = "ID"></enumitem>
			<enumitem dispname = "IDREF" value = "IDREF"></enumitem>
			<enumitem dispname = "ENTITY" value = "ENTITY"></enumitem>
			<enumitem dispname = "integer" value = "integer"></enumitem>
			<enumitem dispname = "nonPositiveInteger" value = "nonPositiveInteger"></enumitem>
			<enumitem dispname = "negativeInteger" value = "negativeInteger"></enumitem>
			<enumitem dispname = "long" value = "long"></enumitem>
			<enumitem dispname = "int" value = "int"></enumitem>
			<enumitem dispname = "short" value = "short"></enumitem>
			<enumitem dispname = "byte" value = "byte"></enumitem>
			<enumitem dispname = "nonNegativeInteger" value = "nonNegativeInteger"></enumitem>
			<enumitem dispname = "unsignedLong" value = "unsignedLong"></enumitem>
			<enumitem dispname = "unsignedInt" value = "unsignedInt"></enumitem>
			<enumitem dispname = "unsignedShort" value = "unsignedShort"></enumitem>
			<enumitem dispname = "unsignedByte" value = "unsignedByte"></enumitem>
			<enumitem dispname = "positiveInteger" value = "positiveInteger"></enumitem>
		</attrdef>
		<attrdef name="use" metaref = "1013" valuetype = "enum" defvalue = "literal">
			<enumitem dispname = "literal" value = "literal"></enumitem>
			<enumitem dispname = "encoded" value = "encoded"></enumitem>
		</attrdef>
		<attrdef name="warmup" metaref = "1061" valuetype = "integer" defvalue = "">
		</attrdef>
		<atom name = "PICML::Average" metaref = "1063" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Average.bmp"></regnode>
		</atom>
		<atom name = "PICML::Boolean" metaref = "1064" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::Byte" metaref = "1065" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::ComponentPackage" metaref = "1066"  attributes = "UUID label">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="SingleComponentInteface" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.connectedFCOs(PackageInterface)->size() = 1 
or
self.connectedFCOs(Implementation)->forAll (i : Reference | i.refersTo().kindName() = "ComponentAssembly")
]]>
				<dispname>A ComponentPackage that contains a reference to a MonolithicImplementation should also refer to the corresponding component interface</dispname>
			</constraint>
			<constraint name="UniqueMonolithicImpls" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let impls = self.bagConnectedFCOs(Implementation) in
   impls->isUnique (a : ComponentImplementationReference | a.refersTo().name.trim())
     and
   impls->isUnique (a: ComponentImplementationReference | a.name.trim())]]>
				<dispname>Monolithic Implementations of a ComponentPackage should be unique</dispname>
			</constraint>
			<constraint name="UniqueUUID" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let packages = project.allInstancesOf (ComponentPackage) in
   packages->forAll 
                       (x : ComponentPackage | 
                          self <> x implies 
                                   (
                                     (  x.UUID.trim() <> self.UUID.trim()  )
                                     or
                                     ( x.UUID.trim() = ""  or self.UUID.trim() = "")
                                   ) 
                       )]]>
				<dispname>Every Component Package should have a unique UUID</dispname>
			</constraint>
			<constraint name="ValidPICML::ImplementationdstCardinality66" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Implementation ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentPackage as &quot;dst&quot; over PICML::Implementation, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageInterfacedstCardinality116" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::PackageInterface ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentPackage as &quot;dst&quot; over PICML::PackageInterface, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="ComponentPackage.bmp"></regnode>
		</atom>
		<atom name = "PICML::DisplayNode" metaref = "2844" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::DstEdgedstCardinality42" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::DstEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;dst&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgesrcCardinality129" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::SrcEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;src&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="vertex.bmp"></regnode>
		</atom>
		<atom name = "PICML::Edge" metaref = "2089" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::DstEdgesrcCardinality41" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::DstEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Edge as &quot;src&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgedstCardinality130" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::SrcEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Edge as &quot;dst&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="Connector.bmp"></regnode>
		</atom>
		<atom name = "PICML::EnumValue" metaref = "1069" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="enumvalue.bmp"></regnode>
		</atom>
		<atom name = "PICML::Environment" metaref = "6420" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Node.bmp"></regnode>
				<regnode name = "isNameEnabled" value ="false"></regnode>
		</atom>
		<atom name = "PICML::ExternalReferenceEndPoint" metaref = "2847"  attributes = "location">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="ExternalReferenceEndPoint.bmp"></regnode>
		</atom>
		<atom name = "PICML::FixedIterationBenchmarks" metaref = "1071"  attributes = "benchmarkIterations">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::BenchmarkCharacteristicsdstCardinality26" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::BenchmarkCharacteristics ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::BenchmarkType as &quot;dst&quot; over PICML::BenchmarkCharacteristics, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="Discrete-Benchmark.bmp"></regnode>
		</atom>
		<atom name = "PICML::GenericObject" metaref = "1072" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::GenericValue" metaref = "1073" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::GenericValueObject" metaref = "1074" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::ImplementationArtifact" metaref = "1075"  attributes = "configuration UUID label location">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="UniqueDependencies" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let artifacts = self.bagConnectedFCOs(ArtifactDependsOn) in
   artifacts->isUnique (a : ImplementationArtifactReference | a.refersTo().name().trim())]]>
				<dispname>Dependent artifacts of an implementation artifact should be unique</dispname>
			</constraint>
			<constraint name="UniqueDependentArtifacts" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let artifacts = self.bagConnectedFCOs(ArtifactDependency) in
   artifacts->isUnique (a : ImplementationArtifact |  a.name().trim() )]]>
				<dispname>Dependent artifacts of an implementation artifact should be unique</dispname>
			</constraint>
				<regnode name = "icon" value ="ImplementationArtifact.bmp"></regnode>
		</atom>
		<atom name = "PICML::ImplementationDependency" metaref = "1076"  attributes = "requiredType">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="ImplementationDependency.bmp"></regnode>
		</atom>
		<atom name = "PICML::Jitter" metaref = "1077" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Jitter.bmp"></regnode>
		</atom>
		<atom name = "PICML::Label" metaref = "1078" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::LabelConnectionsrcCardinality83" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::LabelConnection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Label as &quot;src&quot; over PICML::LabelConnection, has to match 1.</dispname>
			</constraint>
				<regnode name = "icon" value ="label.bmp"></regnode>
		</atom>
		<atom name = "PICML::LongInteger" metaref = "1080" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::Maximum" metaref = "1081" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Max.bmp"></regnode>
		</atom>
		<atom name = "PICML::Minimum" metaref = "1082" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Min.bmp"></regnode>
		</atom>
		<atom name = "PICML::MonolithicImplementation" metaref = "1083"  attributes = "UUID label">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="RequiredInterface" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.connectedFCOs (Implements)->size() = 1]]>
				<dispname>Every MonolithicComponentImplementation should implement a Component interface.</dispname>
			</constraint>
			<constraint name="UniqueArtifacts" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let artifacts = self.bagConnectedFCOs(MonolithprimaryArtifact) in
  artifacts->isUnique (a : ImplementationArtifactReference |  a.name().trim())]]>
				<dispname>Primary Artifacts of a MonolithicImplementation should be unique</dispname>
			</constraint>
			<constraint name="ValidPICML::ImplementsdstCardinality72" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Implements ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentImplementation as &quot;dst&quot; over PICML::Implements, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::MonolithprimaryArtifactdstCardinality96" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::MonolithprimaryArtifact ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MonolithicImplementation as &quot;dst&quot; over PICML::MonolithprimaryArtifact, has to match 1..*.</dispname>
			</constraint>
				<regnode name = "icon" value ="MonolithicImplementation.bmp"></regnode>
		</atom>
		<atom name = "PICML::PackageConfiguration" metaref = "1085"  attributes = "UUID label">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="UniquePackageConfiguration" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let folder = project.allInstancesOf(PackageConfiguration) in
          folder->isUnique (e1 : PackageConfiguration | e1.name)]]>
				<dispname>PackageConfiguration should be unique within a project</dispname>
			</constraint>
			<constraint name="UniqueUUID" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let packages = project.allInstancesOf (PackageConfiguration) in
   packages->forAll 
                       (x : PackageConfiguration | 
                          self <> x implies 
                                   (
                                     (  x.UUID.trim() <> self.UUID.trim()  )
                                     or
                                     ( x.UUID.trim() = ""  or self.UUID.trim() = "")
                                   ) 
                       )]]>
				<dispname>Every PackageConfiguration should have a unique UUID</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfBasePackagedstCardinality102" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::PackageConfBasePackage ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PackageConfiguration as &quot;dst&quot; over PICML::PackageConfBasePackage, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfReferencedstCardinality106" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::PackageConfReference ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PackageConfiguration as &quot;dst&quot; over PICML::PackageConfReference, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfSpecializedConfigdstCardinality110" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::PackageConfSpecializedConfig ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PackageConfiguration as &quot;dst&quot; over PICML::PackageConfSpecializedConfig, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="PackageConfiguration.bmp"></regnode>
		</atom>
		<atom name = "PICML::PeriodicBenchmarks" metaref = "1086"  attributes = "timeperiod">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::BenchmarkCharacteristicsdstCardinality26" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::BenchmarkCharacteristics ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::BenchmarkType as &quot;dst&quot; over PICML::BenchmarkCharacteristics, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="Periodic-Bench.bmp"></regnode>
		</atom>
		<atom name = "PICML::PrivateFlag" metaref = "1087" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::MakeMemberPrivatesrcCardinality85" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::MakeMemberPrivate ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PrivateFlag as &quot;src&quot; over PICML::MakeMemberPrivate, has to match 1.</dispname>
			</constraint>
				<regnode name = "icon" value ="private.bmp"></regnode>
				<regnode name = "isNameEnabled" value ="false"></regnode>
		</atom>
		<atom name = "PICML::PublishConnector" metaref = "2848" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="MatchingPublishConsumer" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let consumers = self.connectedFCOs(deliverTo) in
   let publishers = self.connectedFCOs(publish) in
      publishers->forAll ( i : OutEventPort | 
          let supertypes = i.refersTo().oclAsType(gme::Model).allAscendants(Set{}) in
             consumers->forAll (j: InEventPort |
                    supertypes->one (k: gme::FCO | k.name() = j.refersTo().name()  )
             or i.refersTo().name() = j.refersTo().name()   )
)]]>
				<dispname>An OutEventPort connected to an InEventPort via a PublishConnector should be of the same type or a subtype of InEventPort</dispname>
			</constraint>
			<constraint name="Require2Connections" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.connectedFCOs(publish)->size() = 1 and self.connectedFCOs(deliverTo)->size() >= 1]]>
				<dispname>A PublishConnector should connect one OutEventPort with one or more InEventPorts</dispname>
			</constraint>
			<constraint name="ValidPICML::publishsrcCardinality149" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::publish ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PublishConnector as &quot;src&quot; over PICML::publish, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPublishHierarchy" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.connectedFCOs(publish)->forAll (x : FCO | x.parent() <> self.parent()) 
and
self.connectedFCOs(deliverTo)->forAll (x : FCO | x.parent() <> self.parent())]]>
				<dispname>A PublishConnector cannot be used to make connections between In/OutEventPorts that are delegates and not ports of component instances</dispname>
			</constraint>
				<regnode name = "icon" value ="Connector.bmp"></regnode>
		</atom>
		<atom name = "PICML::QoSConnector" metaref = "3455" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::EventSinkPublishdstCardinality50" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::EventSinkPublish ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::QoSConnector as &quot;dst&quot; over PICML::EventSinkPublish, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::EventSourcePublishsrcCardinality53" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::EventSourcePublish ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::QoSConnector as &quot;src&quot; over PICML::EventSourcePublish, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::FacetInvokedstCardinality62" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::FacetInvoke ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::QoSConnector as &quot;dst&quot; over PICML::FacetInvoke, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::RecepInvokesrcCardinality123" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::RecepInvoke ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::QoSConnector as &quot;src&quot; over PICML::RecepInvoke, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="Connector.bmp"></regnode>
		</atom>
		<atom name = "PICML::RealNumber" metaref = "1091" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::ShortInteger" metaref = "1092" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::State" metaref = "6421" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="HasPrecondition" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let conns = self.attachingConnections ("src", Transition) in

conns->size > 1 implies
  conns->forAll (iter : Transition | 
                        iter.Precondition.trim ().size > 0)
]]>
				<dispname>States with more than one transition must define a precondition for all transitions.</dispname>
			</constraint>
			<constraint name="ValidPICML::FinishdstCardinality64" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Finish ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::State as &quot;dst&quot; over PICML::Finish, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="State.bmp"></regnode>
				<regnode name = "isNameEnabled" value ="false"></regnode>
		</atom>
		<atom name = "PICML::String" metaref = "1093" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::Task" metaref = "1094" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::WorkLoadOperationConnectionsrcCardinality137" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::WorkLoadOperationConnection ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Task as &quot;src&quot; over PICML::WorkLoadOperationConnection, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="task.bmp"></regnode>
		</atom>
		<atom name = "PICML::TimeProbe" metaref = "1095" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::TimerConnectionsrcCardinality131" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::TimerConnection ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::TimeProbe as &quot;src&quot; over PICML::TimerConnection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TimerEventSinkConnsrcCardinality133" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::TimerEventSinkConn ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::TimeProbe as &quot;src&quot; over PICML::TimerEventSinkConn, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="timer.bmp"></regnode>
		</atom>
		<atom name = "PICML::TopLevelPackage" metaref = "1096" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::packagedstCardinality148" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::package ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::TopLevelPackage as &quot;dst&quot; over PICML::package, has to match 1.</dispname>
			</constraint>
				<regnode name = "icon" value ="TopLevelPackage.bmp"></regnode>
		</atom>
		<atom name = "PICML::TriggerBenchmarks" metaref = "1097" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::BenchmarkCharacteristicsdstCardinality26" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::BenchmarkCharacteristics ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::BenchmarkType as &quot;dst&quot; over PICML::BenchmarkCharacteristics, has to match 0..1.</dispname>
			</constraint>
				<regnode name = "icon" value ="Trigger-Bench.bmp"></regnode>
		</atom>
		<atom name = "PICML::TypeEncoding" metaref = "1098" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "PICML::TypeKind" metaref = "1099" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
		</atom>
		<atom name = "SIML::Module" metaref = "6405" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="module.gif"></regnode>
		</atom>
		<atom name = "WSML::AtomicType" metaref = "7232"  attributes = "typeCode">
				<regnode name = "namePosition" value ="4"></regnode>
		</atom>
		<atom name = "WSML::Attribute" metaref = "1014"  attributes = "Value">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="attribute.bmp"></regnode>
		</atom>
		<atom name = "WSML::SOAPAddress" metaref = "1015"  attributes = "required location">
				<regnode name = "namePosition" value ="4"></regnode>
			<attrdef name="location" metaref = "7233" valuetype = "string" defvalue = "">
			</attrdef>
				<regnode name = "icon" value ="address.bmp"></regnode>
		</atom>
		<atom name = "WSML::SOAPBinding" metaref = "1017"  attributes = "required transport style">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="soapbinding.gif"></regnode>
		</atom>
		<atom name = "WSML::SOAPBody" metaref = "1018"  attributes = "use required encodingStyle namespace">
				<regnode name = "namePosition" value ="4"></regnode>
			<attrdef name="namespace" metaref = "7234" valuetype = "string" defvalue = "">
			</attrdef>
		</atom>
		<atom name = "WSML::SOAPFault" metaref = "1020"  attributes = "use required encodingStyle namespace">
				<regnode name = "namePosition" value ="4"></regnode>
			<attrdef name="namespace" metaref = "7235" valuetype = "string" defvalue = "">
			</attrdef>
		</atom>
		<atom name = "WSML::SOAPHeaderFault" metaref = "7236"  attributes = "use required encodingStyle namespace">
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidWSML::HeaderMessagedstCardinality166" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::HeaderMessage ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::SOAPHeaders as &quot;dst&quot; over WSML::HeaderMessage, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::HeaderPartdstCardinality168" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::HeaderPart ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::SOAPHeaders as &quot;dst&quot; over WSML::HeaderPart, has to match 1.</dispname>
			</constraint>
			<attrdef name="namespace" metaref = "7237" valuetype = "string" defvalue = "">
			</attrdef>
		</atom>
		<atom name = "WSML::SOAPOperation" metaref = "7238"  attributes = "required soapAction style">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="operation.gif"></regnode>
		</atom>
		<set name = "PICML::CollocationGroup" metaref = "1100" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "mName" value ="members"></regnode>
				<regnode name = "sName" value ="setCollocationGroup"></regnode>
				<regnode name = "icon" value ="ComponentSet"></regnode>
			<pointerspec name = "set">
				<pointeritem desc = "PICML::ComponentAssemblyReference"></pointeritem>
				<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				<pointeritem desc = "PICML::SharedComponentReference"></pointeritem>
			</pointerspec>
		</set>
		<set name = "PICML::TaskSet" metaref = "1101" attributes = "priority rate" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "mName" value ="members"></regnode>
				<regnode name = "sName" value ="setTaskSet"></regnode>
				<regnode name = "icon" value ="taskset.bmp"></regnode>
			<constraint name="ValidPICML::WorkloadCharacteristicssrcCardinality139" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::WorkloadCharacteristics ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::TaskSet as &quot;src&quot; over PICML::WorkloadCharacteristics, has to match 1.</dispname>
			</constraint>
			<pointerspec name = "set">
				<pointeritem desc = "PICML::Task"></pointeritem>
			</pointerspec>
		</set>
		<set name = "PICML::Workspaces" metaref = "1102" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "mName" value ="members"></regnode>
				<regnode name = "sName" value ="setWorkspace"></regnode>
				<regnode name = "icon" value ="Workspace.bmp"></regnode>
			<pointerspec name = "set">
				<pointeritem desc = "PICML::Project"></pointeritem>
			</pointerspec>
		</set>
		<connection name = "PICML::ArtifactDependency" metaref = "1103" >
				<regnode name = "labelFormatStr" value ="dependsOn"></regnode>
				<regnode name = "sName" value ="srcArtifactDependency"></regnode>
				<regnode name = "dName" value ="dstArtifactDependency"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ArtifactDependsOn" metaref = "1104" >
				<regnode name = "labelFormatStr" value ="dependsOn"></regnode>
				<regnode name = "sName" value ="srcArtifactDependsOn"></regnode>
				<regnode name = "dName" value ="dstArtifactDependsOn"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ImplementationArtifactReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ArtifactDeployRequirement" metaref = "1105" >
				<regnode name = "labelFormatStr" value ="deployRequirement"></regnode>
				<regnode name = "sName" value ="srcArtifactDeployRequirement"></regnode>
				<regnode name = "dName" value ="dstArtifactDeployRequirement"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Requirement"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ArtifactExecParameter" metaref = "1106" >
				<regnode name = "labelFormatStr" value ="execParameter"></regnode>
				<regnode name = "sName" value ="srcArtifactExecParameter"></regnode>
				<regnode name = "dName" value ="dstArtifactExecParameter"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ArtifactInfoProperty" metaref = "1107" >
				<regnode name = "labelFormatStr" value ="infoProperty"></regnode>
				<regnode name = "sName" value ="srcArtifactInfoProperty"></regnode>
				<regnode name = "dName" value ="dstArtifactInfoProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AssemblyConfigProperty" metaref = "2849" >
				<regnode name = "labelFormatStr" value ="configProperty"></regnode>
				<regnode name = "sName" value ="srcAssemblyConfigProperty"></regnode>
				<regnode name = "dName" value ="dstAssemblyConfigProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AssemblyDeployRequirement" metaref = "2850" >
				<regnode name = "labelFormatStr" value ="deployRequirement"></regnode>
				<regnode name = "sName" value ="srcAssemblyDeployRequirement"></regnode>
				<regnode name = "dName" value ="dstAssemblyDeployRequirement"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PublishConnector"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Requirement"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AssemblyselectRequirement" metaref = "2851" >
				<regnode name = "labelFormatStr" value ="selectRequirement"></regnode>
				<regnode name = "sName" value ="srcAssemblyselectRequirement"></regnode>
				<regnode name = "dName" value ="dstAssemblyselectRequirement"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Requirement"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AttributeDelegate" metaref = "2852" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "sName" value ="srcAttributeDelegate"></regnode>
				<regnode name = "dName" value ="dstAttributeDelegate"></regnode>
				<regnode name = "color" value ="0x408080"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::AttributeMapping"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::Attribute"></pointeritem>
					<pointeritem desc = "PICML::Component PICML::ReadonlyAttribute"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::Attribute"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ReadonlyAttribute"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AttributeMappingDelegate" metaref = "2853" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "sName" value ="srcAttributeMappingDelegate"></regnode>
				<regnode name = "dName" value ="dstAttributeMappingDelegate"></regnode>
				<regnode name = "color" value ="0x008080"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::AttributeMapping"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::AttributeMapping"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AttributeMappingValue" metaref = "2854" >
				<regnode name = "labelFormatStr" value ="attValue"></regnode>
				<regnode name = "sName" value ="srcAttributeMappingValue"></regnode>
				<regnode name = "dName" value ="dstAttributeMappingValue"></regnode>
				<regnode name = "color" value ="0x808000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::AttributeMapping"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::AttributeMapping"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::AttributeValue" metaref = "2855" >
				<regnode name = "labelFormatStr" value ="attValue"></regnode>
				<regnode name = "sName" value ="srcAttributeValue"></regnode>
				<regnode name = "dName" value ="dstAttributeValue"></regnode>
				<regnode name = "color" value ="0x800080"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::Attribute"></pointeritem>
					<pointeritem desc = "PICML::Component PICML::ReadonlyAttribute"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::Attribute"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ReadonlyAttribute"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::BenchmarkCharacteristics" metaref = "1115" >
				<regnode name = "sName" value ="srcBenchmarkCharacteristics"></regnode>
				<regnode name = "dName" value ="dstBenchmarkCharacteristics"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::FixedIterationBenchmarks"></pointeritem>
					<pointeritem desc = "PICML::PeriodicBenchmarks"></pointeritem>
					<pointeritem desc = "PICML::TriggerBenchmarks"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Latency"></pointeritem>
					<pointeritem desc = "PICML::Throughput"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Bridge2Interconnect" metaref = "1116" >
				<regnode name = "sName" value ="srcBridge2Interconnect"></regnode>
				<regnode name = "dName" value ="dstBridge2Interconnect"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Bridge"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Interconnect"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ComponentConfigProperty" metaref = "1117" >
				<regnode name = "labelFormatStr" value ="configProperty"></regnode>
				<regnode name = "sName" value ="srcComponentConfigProperty"></regnode>
				<regnode name = "dName" value ="dstComponentConfigProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ComponentInfoProperty" metaref = "1118" >
				<regnode name = "labelFormatStr" value ="infoProperty"></regnode>
				<regnode name = "sName" value ="srcComponentInfoProperty"></regnode>
				<regnode name = "dName" value ="dstComponentInfoProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ComponentOperation" metaref = "1119" >
				<regnode name = "labelFormatStr" value ="benchmarks"></regnode>
				<regnode name = "sName" value ="srcComponentOperation"></regnode>
				<regnode name = "dName" value ="dstComponentOperation"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::OperationRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::CompRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ComponentProperty" metaref = "1120" >
				<regnode name = "labelFormatStr" value ="property"></regnode>
				<regnode name = "sName" value ="srcComponentProperty"></regnode>
				<regnode name = "dName" value ="dstComponentProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentPropertyDescription"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ConfigProperty" metaref = "1121" >
				<regnode name = "labelFormatStr" value ="configProperty"></regnode>
				<regnode name = "sName" value ="srcConfigProperty"></regnode>
				<regnode name = "dName" value ="dstConfigProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::CriticalPath" metaref = "3062" >
				<regnode name = "labelFormatStr" value ="CriticalPath"></regnode>
				<regnode name = "sName" value ="srcCriticalPath"></regnode>
				<regnode name = "dName" value ="dstCriticalPath"></regnode>
				<regnode name = "color" value ="0xFF0000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::PathReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::DstEdge" metaref = "2094" >
				<regnode name = "sName" value ="srcDstEdge"></regnode>
				<regnode name = "dName" value ="dstDstEdge"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ConnectedComponent"></pointeritem>
					<pointeritem desc = "PICML::DisplayNode"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Edge"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::EdgeProperty" metaref = "3063" >
				<regnode name = "sName" value ="srcPropertyConnector"></regnode>
				<regnode name = "dName" value ="dstPropertyConnector"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Edge"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Effect" metaref = "6422" attributes = "Postcondition" >
				<regnode name = "sName" value ="srcInputEffect"></regnode>
				<regnode name = "dName" value ="dstInputEffect"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Action"></pointeritem>
					<pointeritem desc = "PICML::CompositeAction"></pointeritem>
					<pointeritem desc = "PICML::InputAction"></pointeritem>
					<pointeritem desc = "PICML::OutputAction"></pointeritem>
					<pointeritem desc = "PICML::PeriodicAction"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::State"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::EventSinkDelegate" metaref = "2856" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "sName" value ="srcEventSinkDelegate"></regnode>
				<regnode name = "dName" value ="dstEventSinkDelegate"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::EventSinkPublish" metaref = "6423" >
				<regnode name = "sName" value ="srcEventSinkPublish"></regnode>
				<regnode name = "dName" value ="dstEventSinkPublish"></regnode>
				<regnode name = "color" value ="0x00FF00"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
				<regnode name= "dstLabel1" value="PublishDst"/>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::QoSConnector"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::EventSourceDelegate" metaref = "2857" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "sName" value ="srcEventSourceDelegate"></regnode>
				<regnode name = "dName" value ="dstEventSourceDelegate"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::EventSourcePublish" metaref = "6424" >
				<regnode name = "sName" value ="srcEventSourcePublish"></regnode>
				<regnode name = "dName" value ="dstEventSourcePublish"></regnode>
				<regnode name = "color" value ="0x00FF00"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
				<regnode name= "srcLabel1" value="PublishSrc"/>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::QoSConnector"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ExtResourceConn" metaref = "1124" >
				<regnode name = "sName" value ="srcExtResourceConn"></regnode>
				<regnode name = "dName" value ="dstExtResourceConn"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ExecutorProject"></pointeritem>
					<pointeritem desc = "PICML::ServantProject"></pointeritem>
					<pointeritem desc = "PICML::StubProject"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ExternalResources"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ExternalDelegate" metaref = "2858" >
				<regnode name = "labelFormatStr" value ="references"></regnode>
				<regnode name = "sName" value ="srcExternalDelegate"></regnode>
				<regnode name = "dName" value ="dstExternalDelegate"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ExternalReferenceEndPoint"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::FacetDelegate" metaref = "2859" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "sName" value ="srcFacetDelegate"></regnode>
				<regnode name = "dName" value ="dstFacetDelegate"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::FacetInvoke" metaref = "6425" >
				<regnode name = "sName" value ="srcFacetInvoke"></regnode>
				<regnode name = "dName" value ="dstFacetInvoke"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
				<regnode name= "dstLabel1" value="InvokeDst"/>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::QoSConnector"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Finish" metaref = "6426" >
				<regnode name = "sName" value ="srcFinish"></regnode>
				<regnode name = "dName" value ="dstFinish"></regnode>
				<regnode name = "color" value ="0xFF00FF"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::State"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::InputAction"></pointeritem>
					<pointeritem desc = "PICML::PeriodicAction"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Implementation" metaref = "1127" >
				<regnode name = "labelFormatStr" value ="implementation"></regnode>
				<regnode name = "sName" value ="srcImplementation"></regnode>
				<regnode name = "dName" value ="dstImplementation"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentPackage"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentImplementationReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ImplementationCapability" metaref = "1128" >
				<regnode name = "labelFormatStr" value ="capability"></regnode>
				<regnode name = "sName" value ="srcImplementationCapability"></regnode>
				<regnode name = "dName" value ="dstImplementationCapability"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Capability"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ImplementationDependsOn" metaref = "1129" >
				<regnode name = "labelFormatStr" value ="dependsOn"></regnode>
				<regnode name = "sName" value ="srcImplementationDependsOn"></regnode>
				<regnode name = "dName" value ="dstImplementationDependsOn"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ImplementationDependency"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Implements" metaref = "1130" >
				<regnode name = "labelFormatStr" value ="implements"></regnode>
				<regnode name = "sName" value ="srcImplements"></regnode>
				<regnode name = "dName" value ="dstImplements"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::InfoProperty" metaref = "1133" >
				<regnode name = "labelFormatStr" value ="infoProperty"></regnode>
				<regnode name = "sName" value ="srcInfoProperty"></regnode>
				<regnode name = "dName" value ="dstInfoProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Input" metaref = "6427" >
				<regnode name = "sName" value ="srcInput"></regnode>
				<regnode name = "dName" value ="dstInput"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::InputAction"></pointeritem>
					<pointeritem desc = "PICML::PeriodicAction"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::InstanceMapping" metaref = "1134" >
				<regnode name = "labelFormatStr" value ="runsOn"></regnode>
				<regnode name = "sName" value ="srcInstanceMapping"></regnode>
				<regnode name = "dName" value ="dstInstanceMapping"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::CollocationGroup"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::NodeReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Interconnect2Bridge" metaref = "1135" >
				<regnode name = "sName" value ="srcInterconnect2Bridge"></regnode>
				<regnode name = "dName" value ="dstInterconnect2Bridge"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Interconnect"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Bridge"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Interconnect2Node" metaref = "1136" >
				<regnode name = "sName" value ="srcInterconnect2Node"></regnode>
				<regnode name = "dName" value ="dstInterconnect2Node"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Interconnect"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Node"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::LabelConnection" metaref = "1137" >
				<regnode name = "sName" value ="srcLabelConnection"></regnode>
				<regnode name = "dName" value ="dstLabelConnection"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Member"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Label"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::MakeMemberPrivate" metaref = "1138" >
				<regnode name = "sName" value ="srcMakeMemberPrivate"></regnode>
				<regnode name = "dName" value ="dstMakeMemberPrivate"></regnode>
				<regnode name = "color" value ="0xFF0000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Member"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::PrivateFlag"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ManagesComponent" metaref = "1139" >
				<regnode name = "sName" value ="srcManagesComponent"></regnode>
				<regnode name = "dName" value ="dstManagesComponent"></regnode>
				<regnode name = "color" value ="0x00FF00"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::MetricConnection" metaref = "1140" >
				<regnode name = "labelFormatStr" value ="measures"></regnode>
				<regnode name = "sName" value ="srcMetricConnection"></regnode>
				<regnode name = "dName" value ="dstMetricConnection"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::OperationRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Latency"></pointeritem>
					<pointeritem desc = "PICML::Throughput"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::MonolithDeployRequirement" metaref = "1141" >
				<regnode name = "labelFormatStr" value ="deployRequirement"></regnode>
				<regnode name = "sName" value ="srcMonolithDeployRequirement"></regnode>
				<regnode name = "dName" value ="dstMonolithDeployRequirement"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ImplementationRequirement"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::MonolithExecParameter" metaref = "1142" >
				<regnode name = "labelFormatStr" value ="execParameter"></regnode>
				<regnode name = "sName" value ="srcMonolithExecParameter"></regnode>
				<regnode name = "dName" value ="dstMonolithExecParameter"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::MonolithprimaryArtifact" metaref = "1143" >
				<regnode name = "labelFormatStr" value ="primaryArtifact"></regnode>
				<regnode name = "sName" value ="srcMonolithprimaryArtifact"></regnode>
				<regnode name = "dName" value ="dstMonolithprimaryArtifact"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ImplementationArtifactReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::MultiInput" metaref = "6428" >
				<regnode name = "sName" value ="srcMultiInput"></regnode>
				<regnode name = "dName" value ="dstMultiInput"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Environment"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::InputAction"></pointeritem>
					<pointeritem desc = "PICML::PeriodicAction"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Node2Interconnect" metaref = "1144" >
				<regnode name = "sName" value ="srcNode2Interconnect"></regnode>
				<regnode name = "dName" value ="dstNode2Interconnect"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Node"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Interconnect"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageConfBasePackage" metaref = "1145" >
				<regnode name = "labelFormatStr" value ="basePackage"></regnode>
				<regnode name = "sName" value ="srcPackageConfBasePackage"></regnode>
				<regnode name = "dName" value ="dstPackageConfBasePackage"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PackageConfiguration"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentPackage"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageConfConfigProperty" metaref = "1146" >
				<regnode name = "labelFormatStr" value ="configProperty"></regnode>
				<regnode name = "sName" value ="srcPackageConfConfigProperty"></regnode>
				<regnode name = "dName" value ="dstPackageConfConfigProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PackageConfiguration"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageConfReference" metaref = "1147" >
				<regnode name = "labelFormatStr" value ="reference"></regnode>
				<regnode name = "sName" value ="srcPackageConfReference"></regnode>
				<regnode name = "dName" value ="dstPackageConfReference"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PackageConfiguration"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentPackageReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageConfSelectRequirement" metaref = "1148" >
				<regnode name = "labelFormatStr" value ="selectRequirement"></regnode>
				<regnode name = "sName" value ="srcPackageConfSelectRequirement"></regnode>
				<regnode name = "dName" value ="dstPackageConfSelectRequirement"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PackageConfiguration"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Requirement"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageConfSpecializedConfig" metaref = "1149" >
				<regnode name = "labelFormatStr" value ="specializedConfig"></regnode>
				<regnode name = "sName" value ="srcPackageConfSpecializedConfig"></regnode>
				<regnode name = "dName" value ="dstPackageConfSpecializedConfig"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PackageConfiguration"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageConfigProperty" metaref = "1150" >
				<regnode name = "labelFormatStr" value ="configProperty"></regnode>
				<regnode name = "sName" value ="srcPackageConfigProperty"></regnode>
				<regnode name = "dName" value ="dstPackageConfigProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentPackage"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageInfoProperty" metaref = "1151" >
				<regnode name = "labelFormatStr" value ="infoProperty"></regnode>
				<regnode name = "sName" value ="srcPackageInfoProperty"></regnode>
				<regnode name = "dName" value ="dstPackageInfoProperty"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentPackage"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PackageInterface" metaref = "1152" >
				<regnode name = "labelFormatStr" value ="realizes"></regnode>
				<regnode name = "sName" value ="srcPackageInterface"></regnode>
				<regnode name = "dName" value ="dstPackageInterface"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::ComponentPackage"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PathProperty" metaref = "3064" >
				<regnode name = "labelFormatStr" value ="pathProperty"></regnode>
				<regnode name = "sName" value ="srcPathProperty"></regnode>
				<regnode name = "dName" value ="dstPathProperty"></regnode>
				<regnode name = "color" value ="0x00F000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Path"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Property"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::PortQoS" metaref = "6429" >
				<regnode name = "sName" value ="srcPortQoS"></regnode>
				<regnode name = "dName" value ="dstPortQoS"></regnode>
				<regnode name = "color" value ="0xf4a460"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::Component PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::Component PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::Component PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::QoSCharRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::QoSReq" metaref = "6430" >
				<regnode name = "sName" value ="srcQoSReq"></regnode>
				<regnode name = "dName" value ="dstQoSReq"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::QoSConnector"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::QoSCharRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::RecepInvoke" metaref = "6431" >
				<regnode name = "sName" value ="srcRecepInvoke"></regnode>
				<regnode name = "dName" value ="dstRecepInvoke"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
				<regnode name= "srcLabel1" value="InvokeSrc"/>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::QoSConnector"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::ReceptacleDelegate" metaref = "2860" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "sName" value ="srcReceptacleDelegate"></regnode>
				<regnode name = "dName" value ="dstReceptacleDelegate"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Shares" metaref = "1155" >
				<regnode name = "labelFormatStr" value ="shares"></regnode>
				<regnode name = "sName" value ="srcShares"></regnode>
				<regnode name = "dName" value ="dstShares"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Node"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::SharedResource"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::SrcEdge" metaref = "2101" >
				<regnode name = "sName" value ="srcSrcEdge"></regnode>
				<regnode name = "dName" value ="dstSrcEdge"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Edge"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ConnectedComponent"></pointeritem>
					<pointeritem desc = "PICML::DisplayNode"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::TimerConnection" metaref = "1156" >
				<regnode name = "labelFormatStr" value ="getTime"></regnode>
				<regnode name = "sName" value ="srcTimerConnection"></regnode>
				<regnode name = "dName" value ="dstTimerConnection"></regnode>
				<regnode name = "color" value ="0xFF0000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::OperationRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::TimeProbe"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::TimerEventSinkConn" metaref = "1157" >
				<regnode name = "labelFormatStr" value ="getTime"></regnode>
				<regnode name = "sName" value ="srcTimerEventSinkConn"></regnode>
				<regnode name = "dName" value ="dstTimerEventSinkConn"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::EventRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::TimeProbe"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::Transition" metaref = "6432" attributes = "Precondition" >
				<regnode name = "sName" value ="srcInternalPrecondition"></regnode>
				<regnode name = "dName" value ="dstInternalPrecondition"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::State"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Action"></pointeritem>
					<pointeritem desc = "PICML::CompositeAction"></pointeritem>
					<pointeritem desc = "PICML::InputAction"></pointeritem>
					<pointeritem desc = "PICML::OutputAction"></pointeritem>
					<pointeritem desc = "PICML::PeriodicAction"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::WorkLoadOperationConnection" metaref = "1160" >
				<regnode name = "sName" value ="srcWorkLoadOperationConnection"></regnode>
				<regnode name = "dName" value ="dstWorkLoadOperationConnection"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::OperationRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Task"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::WorkloadCharacteristics" metaref = "1161" >
				<regnode name = "sName" value ="srcWorkloadCharacteristics"></regnode>
				<regnode name = "dName" value ="dstWorkloadCharacteristics"></regnode>
				<regnode name = "color" value ="0x0000FF"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Latency"></pointeritem>
					<pointeritem desc = "PICML::Throughput"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::TaskSet"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::deliverTo" metaref = "2861" >
				<regnode name = "labelFormatStr" value ="deliverTo"></regnode>
				<regnode name = "sName" value ="srcdeliverTo"></regnode>
				<regnode name = "dName" value ="dstdeliverTo"></regnode>
				<regnode name = "color" value ="0x008000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::PublishConnector"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::emit" metaref = "2862" >
				<regnode name = "labelFormatStr" value ="emits"></regnode>
				<regnode name = "sName" value ="srcemit"></regnode>
				<regnode name = "dName" value ="dstemit"></regnode>
				<regnode name = "color" value ="0x8F0000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::InEventPort"></pointeritem>
					<pointeritem desc = "PICML::InEventPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::invoke" metaref = "2863" >
				<regnode name = "labelFormatStr" value ="invokes"></regnode>
				<regnode name = "sName" value ="srcinvoke"></regnode>
				<regnode name = "dName" value ="dstinvoke"></regnode>
				<regnode name = "color" value ="0x00008F"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="dash"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::RequiredRequestPort"></pointeritem>
					<pointeritem desc = "PICML::RequiredRequestPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::Component PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::ProvidedRequestPort"></pointeritem>
					<pointeritem desc = "PICML::ProvidedRequestPort"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::package" metaref = "1165" >
				<regnode name = "labelFormatStr" value ="package"></regnode>
				<regnode name = "sName" value ="srcpackage"></regnode>
				<regnode name = "dName" value ="dstpackage"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::TopLevelPackage"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::PackageConfigurationReference"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "PICML::publish" metaref = "2864" >
				<regnode name = "labelFormatStr" value ="publish"></regnode>
				<regnode name = "sName" value ="srcpublish"></regnode>
				<regnode name = "dName" value ="dstpublish"></regnode>
				<regnode name = "color" value ="0x008000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "PICML::Component PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssembly PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentAssemblyReference PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::ComponentRef PICML::OutEventPort"></pointeritem>
					<pointeritem desc = "PICML::OutEventPort"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "PICML::PublishConnector"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "SIML::PortProxy" metaref = "6406" attributes = "language dstPortName srcPortName" >
				<regnode name = "labelFormatStr" value ="delegatesTo"></regnode>
				<regnode name = "color" value ="0x0000F0"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "SIML::Module"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "SIML::Module"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::BindingPortType" metaref = "7239" >
				<regnode name = "labelFormatStr" value ="boundPortType"></regnode>
				<regnode name = "sName" value ="srcBindingPortType"></regnode>
				<regnode name = "dName" value ="dstBindingPortType"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::Binding"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::PortType"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::BindsOperation" metaref = "7240" >
				<regnode name = "labelFormatStr" value ="bindsOperation"></regnode>
				<regnode name = "sName" value ="srcBindsOperation"></regnode>
				<regnode name = "dName" value ="dstBindsOperation"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::BindingOperation"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::OperationRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::BodyBinding" metaref = "7241" >
				<regnode name = "labelFormatStr" value ="bodyBinding"></regnode>
				<regnode name = "sName" value ="srcBodyBinding"></regnode>
				<regnode name = "dName" value ="dstBodyBinding"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::InputRef"></pointeritem>
					<pointeritem desc = "WSML::OutputRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::SOAPBody"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::BodyParts" metaref = "7242" >
				<regnode name = "labelFormatStr" value ="bodyParts"></regnode>
				<regnode name = "sName" value ="srcBodyParts"></regnode>
				<regnode name = "dName" value ="dstBodyParts"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::SOAPBody"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::PartRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::FaultMessage" metaref = "7243" >
				<regnode name = "labelFormatStr" value ="faultMessageType"></regnode>
				<regnode name = "sName" value ="srcFaultMessage"></regnode>
				<regnode name = "dName" value ="dstFaultMessage"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::Fault"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::MessageRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::HeaderBinding" metaref = "7244" >
				<regnode name = "labelFormatStr" value ="headerBinding"></regnode>
				<regnode name = "sName" value ="srcHeaderBinding"></regnode>
				<regnode name = "dName" value ="dstHeaderBinding"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::InputRef"></pointeritem>
					<pointeritem desc = "WSML::OutputRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::SOAPHeader"></pointeritem>
					<pointeritem desc = "WSML::SOAPHeaderFault"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::HeaderMessage" metaref = "1030" >
				<regnode name = "labelFormatStr" value ="headerMessage"></regnode>
				<regnode name = "sName" value ="srcHeaderMessage"></regnode>
				<regnode name = "dName" value ="dstHeaderMessage"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::SOAPHeader"></pointeritem>
					<pointeritem desc = "WSML::SOAPHeaderFault"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::MessageRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::HeaderPart" metaref = "7245" >
				<regnode name = "labelFormatStr" value ="headerPart"></regnode>
				<regnode name = "sName" value ="srcHeaderPart"></regnode>
				<regnode name = "dName" value ="dstHeaderPart"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::SOAPHeader"></pointeritem>
					<pointeritem desc = "WSML::SOAPHeaderFault"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::PartRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::InputMessage" metaref = "7246" >
				<regnode name = "labelFormatStr" value ="inputMessageType"></regnode>
				<regnode name = "sName" value ="srcInputMessage"></regnode>
				<regnode name = "dName" value ="dstInputMessage"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::Input"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::MessageRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::OutputMessage" metaref = "1033" >
				<regnode name = "labelFormatStr" value ="outputMessageType"></regnode>
				<regnode name = "sName" value ="srcOutputMessage"></regnode>
				<regnode name = "dName" value ="dstOutputMessage"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::Output"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::MessageRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::PortBinding" metaref = "1034" >
				<regnode name = "labelFormatStr" value ="boundPort"></regnode>
				<regnode name = "sName" value ="srcPortBinding"></regnode>
				<regnode name = "dName" value ="dstPortBinding"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="arrow"></regnode>
				<regnode name = "srcStyle" value ="butt"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::Port"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::BindingRef"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<connection name = "WSML::SOAPFaultExtension" metaref = "1035" >
				<regnode name = "labelFormatStr" value ="soapFault"></regnode>
				<regnode name = "sName" value ="srcSOAPFaultExtension"></regnode>
				<regnode name = "dName" value ="dstSOAPFaultExtension"></regnode>
				<regnode name = "color" value ="0x000000"></regnode>
				<regnode name = "dstStyle" value ="butt"></regnode>
				<regnode name = "srcStyle" value ="diamond"></regnode>
				<regnode name = "lineType" value ="solid"></regnode>
			<connjoint>
				<pointerspec name = "src">
					<pointeritem desc = "WSML::FaultRef"></pointeritem>
				</pointerspec>
				<pointerspec name = "dst">
					<pointeritem desc = "WSML::SOAPFault"></pointeritem>
				</pointerspec>
			</connjoint>
		</connection>
		<reference name = "PICML::Alias" metaref = "1167" attributes = "VersionTag SpecifyIdTag">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyAlias"></regnode>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference to a named type must be assigned</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<regnode name = "icon" value ="alias.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::AttributeMapping" metaref = "2865">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyAttributeMapping"></regnode>
			<constraint name="MatchingAttributeMappingDelegateType" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let myAttr : Model = self.refersTo() in
let attrs = myAttr.referenceParts(AttributeMember) in
let delegates = self.connectedFCOs(AttributeMappingDelegate) in
    attrs->forAll (attr : Reference | 
                      delegates->forAll (x : AttributeMapping | 
                          let refAttr : Model = x.refersTo() in
                               refAttr.referenceParts(AttributeMember)->forAll (prop : Reference |
                                    attr.refersTo().kindName() = prop.refersTo().kindName()   )  )  )]]>
				<dispname>An AttributeMapping can only be used to delegate values to AttributeMappings of the same type</dispname>
			</constraint>
			<constraint name="MatchingPropertyType" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let attr: Model = self.refersTo() in
let attrType = attr.referenceParts(AttributeMember) in
let props = self.connectedFCOs(AttributeMappingValue) in
    attrType->forAll (myType : Reference | 
                      props->forAll (x : Property | x.referenceParts(DataType)->forAll (prop : Reference |
                         myType.refersTo().kindName() = prop.refersTo().kindName()   )  )  )]]>
				<dispname>An AttributeMapping can only be used to delegate property values to attributes of the same type</dispname>
			</constraint>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>Null references are prohibited</dispname>
			</constraint>
			<constraint name="SingleValue" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeMappingValue)->size() <= 1]]>
				<dispname>An AttributeMapping can only have a single Property value associated with it.</dispname>
			</constraint>
			<constraint name="ValidPICML::AttributeMappingDelegatesrcCardinality19" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::AttributeMappingDelegate ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::AttributeMapping as &quot;src&quot; over PICML::AttributeMappingDelegate, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::AttributeMappingValuedstCardinality22" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::AttributeMappingValue ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::AttributeMapping as &quot;dst&quot; over PICML::AttributeMappingValue, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.connectedFCOs(AttributeMappingDelegate)->forAll (x | x.parent() = self.parent() implies x <> self)]]>
				<dispname>An AttributeMapping of an assembly can only be delegated to an AttributeMapping in a different assembly</dispname>
			</constraint>
			<regnode name = "icon" value ="AttributeMapping.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Attribute"></pointeritem>
				<pointeritem desc = "PICML::ReadonlyAttribute"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::AttributeMember" metaref = "1169">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyAttributeMember"></regnode>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="member.bmp"></regnode>
			<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Boxed" metaref = "1170" attributes = "VersionTag SpecifyIdTag">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyBoxed"></regnode>
			<constraint name="NoBoxedValueDef" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[let boxedref = refersTo () in
          boxedref.kindName <> "ValueDef" and boxedref.kindName <> "EventDef"]]>
				<dispname>It is redundant and illegal to box a ValueDef or an EventDef</dispname>
			</constraint>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference to a named type must be assigned</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<regnode name = "icon" value ="boxed.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Collection" metaref = "1171" attributes = "VersionTag SpecifyIdTag">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyCollection"></regnode>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference to a named type must be assigned</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<regnode name = "icon" value ="variablecollection.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::CompRef" metaref = "1172">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyCompRef"></regnode>
			<constraint name="ValidPICML::ComponentOperationsrcCardinality33" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::ComponentOperation ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::CompRef as &quot;src&quot; over PICML::ComponentOperation, has to match 1.</dispname>
			</constraint>
			<regnode name = "icon" value ="componentref.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Component"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ComponentAssemblyReference" metaref = "1173">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyComponentAssemblyReference"></regnode>
			<constraint name="InstanceOnly" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let parent = self.parent() in
   if (parent.isNull()) then
      true
   else
      parent.kindName = "DeploymentPlan" implies self.refersTo().isInstance()
   endif]]>
				<dispname>A Deployment Plan can only contain references to instances of components/component assemblies; references to component/assembly types are not allowed.</dispname>
			</constraint>
			<constraint name="InstanceReferenceOnly" eventmask = "0x80000004" depth = "1" priority = "1">
				<![CDATA[let parent = self.parent() in
   if (parent.isNull()) then
      true
   else
      parent.kindName = "ComponentAssembly" => self.refersTo().isInstance()
   endif]]>
				<dispname>A ComponentAssemblyReference or a ComponentRef within a component assembly can only refer to an assembly instance, or a component instance respectively. </dispname>
			</constraint>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>Null references are prohibited</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x80000000" depth = "1" priority = "1">
				<![CDATA[self.refersTo().parent() <> self.parent()]]>
				<dispname>A ComponentAssemblyReference/ComponentRef cannot be defined within the same assembly that contains the referred ComponentAssembly/Component.</dispname>
			</constraint>
			<regnode name = "icon" value ="componentref.bmp"></regnode>
			<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ComponentImplementationReference" metaref = "1174">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyComponentImplementationReference"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>Null references are disallowed</dispname>
			</constraint>
			<regnode name = "icon" value ="componentref.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ComponentAssembly"></pointeritem>
				<pointeritem desc = "PICML::MonolithicImplementation"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ComponentPackageReference" metaref = "1175" attributes = "requiredType requiredUUID requiredName">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyComponentPackageReference"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>ComponentImplementationReference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="PackageReference.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ComponentPackage"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ComponentRef" metaref = "1176">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyComponentRef"></regnode>
			<constraint name="InstanceOnly" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let parent = self.parent() in
   if (parent.isNull()) then
      true
   else
      parent.kindName = "DeploymentPlan" implies self.refersTo().isInstance()
   endif]]>
				<dispname>A Deployment Plan can only contain references to instances of components/component assemblies; references to component/assembly types are not allowed.</dispname>
			</constraint>
			<constraint name="InstanceReferenceOnly" eventmask = "0x80000004" depth = "1" priority = "1">
				<![CDATA[let parent = self.parent() in
   if (parent.isNull()) then
      true
   else
      parent.kindName = "ComponentAssembly" => self.refersTo().isInstance()
   endif]]>
				<dispname>A ComponentAssemblyReference or a ComponentRef within a component assembly can only refer to an assembly instance, or a component instance respectively. </dispname>
			</constraint>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="ValidPICML::ImplementssrcCardinality71" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Implements ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentRef as &quot;src&quot; over PICML::Implements, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageInterfacesrcCardinality115" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::PackageInterface ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentRef as &quot;src&quot; over PICML::PackageInterface, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x80000000" depth = "1" priority = "1">
				<![CDATA[self.refersTo().parent() <> self.parent()]]>
				<dispname>A ComponentAssemblyReference/ComponentRef cannot be defined within the same assembly that contains the referred ComponentAssembly/Component.</dispname>
			</constraint>
			<regnode name = "icon" value ="componentref.bmp"></regnode>
			<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Component"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Constant" metaref = "1177" attributes = "VersionTag SpecifyIdTag value">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyConstant"></regnode>
			<constraint name="LegalConstantType" eventmask = "0x400" depth = "1" priority = "1">
				<![CDATA[let x = refersTo () in
          x.isTypeOf (String) or
          x.isTypeOf (LongInteger) or
          x.isTypeOf (Enum) or
          x.isTypeOf (ShortInteger) or
          x.isTypeOf (RealNumber) or
          x.isTypeOf (Byte) or
          x.isTypeOf (Boolean)]]>
				<dispname>A Constant must be a Boolean, Byte, ShortInteger, LongInteger, RealNumber, String or Enum</dispname>
			</constraint>
			<constraint name="LegalConstantValue" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let x = refersTo () in
    let y = value.toInteger () in
          (x.isTypeOf (Boolean) implies ((y = 0 or y = 1) or (let z = value.trim ().toUpper () in z = "TRUE" or z = "FALSE"))) and
          (x.isTypeOf (Byte) implies (y >= 0 and y < 256)) and
          (x.isTypeOf (ShortInteger) implies (y > -32769 and y < 32768)) and
          (x.isTypeOf (LongInteger) implies (value.toReal () >= -2147483648 and value.toReal () <= 2147483647)) and
          (x.isTypeOf (RealNumber) implies value.trim ().match ("^\-?[0-9]+\.[0-9]*$")) and
          (x.isTypeOf (Enum) implies x.oclAsType (gme::Model).parts ()->collect (w : gme::FCO | w.name)->exists (z : ocl::String | z = value.trim ()))]]>
				<dispname>Constant&apos;s value does not match type or is out of range</dispname>
			</constraint>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<attrdef name="value" metaref = "6523" valuetype = "string" defvalue = "">
			</attrdef>
			<regnode name = "icon" value ="const.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::DataType" metaref = "1179">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyDataType"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>DataType should reference a PredefinedType and cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="DataType.bmp"></regnode>
			<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Discriminator" metaref = "1180">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyDiscriminator"></regnode>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference to a named type must be assigned</dispname>
			</constraint>
			<regnode name = "icon" value ="discriminator.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::EventRef" metaref = "1181">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyEventRef"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="eventref.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Event"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ExceptionRef" metaref = "1182">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyExceptionRef"></regnode>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="exceptionref.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Exception"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ExternalResources" metaref = "1183">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyExternalResources"></regnode>
			<regnode name = "icon" value ="ImplementationArtifactReference.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::FileRef" metaref = "1184">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyFileRef"></regnode>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="fileref.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::File"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::GetException" metaref = "1185">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyGetException"></regnode>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="getexception.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Exception"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ImplementationArtifactReference" metaref = "1186">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyImplementationArtifactReference"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>ImplementationArtifactReference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="ImplementationArtifactReference.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ImplementationArtifact"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::InEventPort" metaref = "1187" attributes = "VersionTag optional exclusiveUser SpecifyIdTag exclusiveProvider">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyInEventPort"></regnode>
			<constraint name="MatchingEventSink" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let consumers = self.connectedFCOs(EventSinkDelegate)  in
 consumers->forAll ( i : InEventPort |  self.refersTo().name() = i.refersTo().name() )]]>
				<dispname>An InEventPort can only be delegated to another InEventPort of the same type</dispname>
			</constraint>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="ValidEmitsHierarchy" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(emit)->forAll (x : Connection | x.parent() <> self.parent())]]>
				<dispname>Within a single assembly, an InEventPort can be connected to an OutEventPort when they are both ports of component instances</dispname>
			</constraint>
			<constraint name="ValidPICML::DstEdgedstCardinality42" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::DstEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;dst&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::InputdstCardinality76" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Input ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InEventPort as &quot;dst&quot; over PICML::Input, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgesrcCardinality129" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::SrcEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;src&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.connectedFCOs(EventSinkDelegate)->forAll ( x | x.parent() = self.parent() implies x <> self)]]>
				<dispname>Only InEventPorts of a component instance can be delegated</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<regnode name = "icon" value ="ineventport.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Event"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::InParameter" metaref = "1188">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyInParameter"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="in.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Inherits" metaref = "1189">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyInherits"></regnode>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="inherits.bmp"></regnode>
			<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::InoutParameter" metaref = "1190">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyInoutParameter"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="inout.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::LookupKey" metaref = "1191">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyLookupKey"></regnode>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="lookupkey.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Member" metaref = "1192">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyMember"></regnode>
			<constraint name="NonNullReference" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[not refersTo ().isNull ()]]>
				<dispname>A reference to a named type must be assigned</dispname>
			</constraint>
			<constraint name="ParentNameClash" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[name <> parent ().name]]>
				<dispname>A member may not have the same name as its container.</dispname>
			</constraint>
			<constraint name="ValidPICML::MakeMemberPrivatedstCardinality86" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::MakeMemberPrivate ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Member as &quot;dst&quot; over PICML::MakeMemberPrivate, has to match 0..1.</dispname>
			</constraint>
			<regnode name = "icon" value ="member.bmp"></regnode>
			<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::NodeReference" metaref = "1193">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyNodeReference"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>NodeReference cannot be null</dispname>
			</constraint>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Node"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::OperationRef" metaref = "1194">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyOperationRef"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentOperationdstCardinality34" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::ComponentOperation ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::OperationRef as &quot;dst&quot; over PICML::ComponentOperation, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::MetricConnectiondstCardinality90" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::MetricConnection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::OperationRef as &quot;dst&quot; over PICML::MetricConnection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TimerConnectiondstCardinality132" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::TimerConnection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::OperationRef as &quot;dst&quot; over PICML::TimerConnection, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::WorkLoadOperationConnectiondstCardinality138" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::WorkLoadOperationConnection ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::OperationRef as &quot;dst&quot; over PICML::WorkLoadOperationConnection, has to match 0..1.</dispname>
			</constraint>
			<regnode name = "icon" value ="operationref.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::FactoryOperation"></pointeritem>
				<pointeritem desc = "PICML::LookupOperation"></pointeritem>
				<pointeritem desc = "PICML::OnewayOperation"></pointeritem>
				<pointeritem desc = "PICML::TwowayOperation"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::OutEventPort" metaref = "1195" attributes = "VersionTag optional exclusiveUser SpecifyIdTag exclusiveProvider single_destination out_event_port_type">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyOutEventPort"></regnode>
			<constraint name="MatchingEmitConsumer" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let consumers = self.connectedFCOs(emit)  in
 consumers->forAll ( i : InEventPort | 
     let supertypes = self.refersTo().oclAsType(gme::Model).allAscendants(Set{}) in
         supertypes->one (k: gme::FCO | k.name() = i.refersTo().name())
     or self.refersTo().name() = i.refersTo().name()
)]]>
				<dispname>An OutEventPort should be connected to an InEventPort of the same type, or the OutEventPort should be a subtype of InEventPort</dispname>
			</constraint>
			<constraint name="MatchingEventDelegate" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let publishers = self.connectedFCOs(EventSourceDelegate)  in
 publishers->forAll ( i : OutEventPort |  self.refersTo().name() = i.refersTo().name() 
                              and
                              self.single_destination = i.single_destination)]]>
				<dispname>An OutEventPort can only be delegated to another OutEventPort of the same type and should have consistent values for single_destination attribute</dispname>
			</constraint>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="SingleConsumer" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(emit)->size() <= 1]]>
				<dispname>Every OutEventPort can emit events to only one InEventPort</dispname>
			</constraint>
			<constraint name="ValidEmitsHierarchy" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(emit)->forAll (x : Connection | x.parent() <> self.parent()) ]]>
				<dispname>Within a single assembly, an InEventPort can be connected to an OutEventPort only when they are both ports of component instances</dispname>
			</constraint>
			<constraint name="ValidEventConnection" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[if self.single_destination
then
     self.attachingConnections(publish)->size() = 0
else
     self.attachingConnections(emit)->size() = 0
endif
]]>
				<dispname>The type of an OutEventPort&apos;s connections  must agree with the value of its single_destination attribute.</dispname>
			</constraint>
			<constraint name="ValidPICML::DstEdgedstCardinality42" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::DstEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;dst&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::EventSourcePublishdstCardinality54" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::EventSourcePublish ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::OutEventPort as &quot;dst&quot; over PICML::EventSourcePublish, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgesrcCardinality129" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::SrcEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;src&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::emitdstCardinality144" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::emit ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::OutEventPort as &quot;dst&quot; over PICML::emit, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.connectedFCOs(EventSourceDelegate)->forAll ( x | x.parent() = self.parent() implies x <> self)]]>
				<dispname>Only OutEventPorts of a component instance can be delegated</dispname>
			</constraint>
			<constraint name="ValidPublishConnection" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let connectors = self.connectedFCOs (publish) in
     connectors->forAll ( c1, c2 |  c1 <> c2 => c1.parent() <> c2.parent() )]]>
				<dispname>An OutEventPort can only be connected to multiple PublishConnectors  when shared between a ComponentAssembly/Component and it&apos;s reference.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<attrdef name="single_destination" metaref = "6524" valuetype = "boolean" defvalue = "false">
			</attrdef>
			<regnode name = "icon" value ="outeventport.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Event"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::OutParameter" metaref = "1197">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyOutParameter"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="out.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::PackageConfigurationReference" metaref = "1198">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyPackageConfigurationReference"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>PackageConfigurationReference cannot be null</dispname>
			</constraint>
			<constraint name="ValidPICML::packagesrcCardinality147" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::package ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PackageConfigurationReference as &quot;src&quot; over PICML::package, has to match 1.</dispname>
			</constraint>
			<regnode name = "icon" value ="PackageConfigurationReference.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::PackageConfiguration"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::PathReference" metaref = "3065">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyPathReference"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>Null references are disallowed</dispname>
			</constraint>
			<constraint name="ValidPICML::CriticalPathsrcCardinality39" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::CriticalPath ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::PathReference as &quot;src&quot; over PICML::CriticalPath, has to match 0..1.</dispname>
			</constraint>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Path"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ProvidedRequestPort" metaref = "1199" attributes = "VersionTag optional exclusiveUser SpecifyIdTag exclusiveProvider">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyProvidedRequestPort"></regnode>
			<constraint name="MatchingFacet" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let consumers = self.connectedFCOs(FacetDelegate)  in
 consumers->forAll ( i : InEventPort |  self.refersTo().name() = i.refersTo().name() )]]>
				<dispname>A ProvidedRequestPort can only be delegated to another ProvidedRequestPort of the same type</dispname>
			</constraint>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="ValidInvokesHierarchy" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(invoke)->forAll (x : Connection | x.parent() <> self.parent()) ]]>
				<dispname>Within a single assembly, a ProvidedRequestPort can only be connected to a RequiredRequestPort when they are both ports of component instances</dispname>
			</constraint>
			<constraint name="ValidPICML::DstEdgedstCardinality42" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::DstEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;dst&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgesrcCardinality129" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::SrcEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;src&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.connectedFCOs(FacetDelegate)->forAll ( x | x.parent() = self.parent() implies x <> self)]]>
				<dispname>Only ProvidedRequestPorts of a component instance can be delegated</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<regnode name = "icon" value ="providedrequestport.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::QoSCharRef" metaref = "3472">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyQoSCharRef"></regnode>
			<constraint name="NoNullQoSCharReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>Null References to QoS charcteristics is not allowed.</dispname>
			</constraint>
			<pointerspec name = "ref">
			</pointerspec>
		</reference>
		<reference name = "PICML::RequiredRequestPort" metaref = "1201" attributes = "VersionTag optional exclusiveUser SpecifyIdTag exclusiveProvider multiple_connections">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyRequiredRequestPort"></regnode>
			<constraint name="MatchingProvidedRequestPort" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let facets = self.connectedFCOs(invoke) in
  facets->forAll ( i : ProvidedRequestPort | 
     let supertypes = i.refersTo().oclAsType(gme::Model).allAscendants(Set{}) in
         (supertypes->one (k: gme::FCO | k.name() = self.refersTo().name())
             or self.refersTo().name() = i.refersTo().name() )
         
)]]>
				<dispname>A RequiredRequestPort should be connected to a ProvidedRequestPort of the same type, or the RequiredRequestPort should be a supertype of ProvidedRequestPort</dispname>
			</constraint>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<constraint name="ValidInvokesHierarchy" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(invoke)->forAll (x : Connection | x.parent() <> self.parent()) ]]>
				<dispname>Within a single assembly, an RequiredRequestPort can only be connected to an ProvidedRequestPort when they are both ports of component instances</dispname>
			</constraint>
			<constraint name="ValidPICML::DstEdgedstCardinality42" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::DstEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;dst&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgesrcCardinality129" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::SrcEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;src&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidParent" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.connectedFCOs(ReceptacleDelegate)->forAll (x | x.parent()  = self.parent() implies x <> self)]]>
				<dispname>Only RequiredRequestPorts of a component instance can be delegated</dispname>
			</constraint>
			<constraint name="ValidReceptacleConnection" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.multiple_connections => self.attachingConnections(invoke)->size() <= 1
]]>
				<dispname>A RequiredRequestPort can be connected to multiple ProvidedRequestPorts only if its multiple_connections attribute is true.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<attrdef name="multiple_connections" metaref = "6525" valuetype = "boolean" defvalue = "false">
			</attrdef>
			<regnode name = "icon" value ="requiredrequestport.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::ReturnType" metaref = "1203">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyReturnType"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo().isNull()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="return.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Aggregate"></pointeritem>
				<pointeritem desc = "PICML::Alias"></pointeritem>
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Boxed"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::Collection"></pointeritem>
				<pointeritem desc = "PICML::Component"></pointeritem>
				<pointeritem desc = "PICML::ComponentFactory"></pointeritem>
				<pointeritem desc = "PICML::Enum"></pointeritem>
				<pointeritem desc = "PICML::Event"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::Object"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::SwitchedAggregate"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
				<pointeritem desc = "PICML::ValueObject"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::SetException" metaref = "1204">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbySetException"></regnode>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="setexception.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Exception"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::SharedComponentReference" metaref = "3182">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbySharedComponentReference"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::ComponentRef"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Supports" metaref = "1205">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbySupports"></regnode>
			<constraint name="NoNullReference" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>A reference cannot be null</dispname>
			</constraint>
			<regnode name = "icon" value ="supports.bmp"></regnode>
			<regnode name = "isNameEnabled" value ="false"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Object"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::Variable" metaref = "6433">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyVariable"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>Undefined variable (null reference)</dispname>
			</constraint>
			<regnode name = "icon" value ="member.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Boolean"></pointeritem>
				<pointeritem desc = "PICML::Byte"></pointeritem>
				<pointeritem desc = "PICML::GenericObject"></pointeritem>
				<pointeritem desc = "PICML::GenericValue"></pointeritem>
				<pointeritem desc = "PICML::GenericValueObject"></pointeritem>
				<pointeritem desc = "PICML::LongInteger"></pointeritem>
				<pointeritem desc = "PICML::RealNumber"></pointeritem>
				<pointeritem desc = "PICML::ShortInteger"></pointeritem>
				<pointeritem desc = "PICML::String"></pointeritem>
				<pointeritem desc = "PICML::TypeEncoding"></pointeritem>
				<pointeritem desc = "PICML::TypeKind"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "PICML::WorkerType" metaref = "6434">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyWorkerType"></regnode>
			<constraint name="NotNull" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not self.refersTo ().isNull ()]]>
				<dispname>Undefined type (null reference)</dispname>
			</constraint>
			<regnode name = "icon" value ="workerref.gif"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "PICML::Worker"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::BindingRef" metaref = "7247">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyBindingRef"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::Binding"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::FaultRef" metaref = "7248">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyFaultRef"></regnode>
			<constraint name="ValidWSML::SOAPFaultExtensiondstCardinality176" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::SOAPFaultExtension ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::FaultRef as &quot;dst&quot; over WSML::SOAPFaultExtension, has to match 1.</dispname>
			</constraint>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::Fault"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::InputRef" metaref = "7249">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyInputRef"></regnode>
			<constraint name="ValidWSML::BodyBindingdstCardinality158" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::BodyBinding ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::IORef as &quot;dst&quot; over WSML::BodyBinding, has to match 1.</dispname>
			</constraint>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::Input"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::MessageRef" metaref = "7250">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyMessageRef"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::Message"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::OperationRef" metaref = "1039">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyOperationRef"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::NotificationOperation"></pointeritem>
				<pointeritem desc = "WSML::OneWayOperation"></pointeritem>
				<pointeritem desc = "WSML::RequestResponseOperation"></pointeritem>
				<pointeritem desc = "WSML::SolicitResponseOperation"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::OutputRef" metaref = "1040">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyOutputRef"></regnode>
			<constraint name="ValidWSML::BodyBindingdstCardinality158" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::BodyBinding ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::IORef as &quot;dst&quot; over WSML::BodyBinding, has to match 1.</dispname>
			</constraint>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::Output"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::Part" metaref = "7251">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyPart"></regnode>
			<regnode name = "icon" value ="part.bmp"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::AtomicType"></pointeritem>
				<pointeritem desc = "WSML::Element"></pointeritem>
			</pointerspec>
		</reference>
		<reference name = "WSML::PartRef" metaref = "7252">
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "rName" value ="ref"></regnode>
				<regnode name = "rrName" value ="referedbyPartRef"></regnode>
			<pointerspec name = "ref">
				<pointeritem desc = "WSML::Part"></pointeritem>
			</pointerspec>
		</reference>
		<model name = "PICML::Action" metaref = "6435" attributes = "Repetitions LogAction" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "isTypeShown" value ="true"></regnode>
			<constraint name="ValidPICML::EffectdstCardinality46" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Effect ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ActionBase as &quot;dst&quot; over PICML::Effect, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TransitionsrcCardinality135" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Transition ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ActionBase as &quot;src&quot; over PICML::Transition, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Property" metaref = "6526" kind = "PICML::Property"></role>
			<aspect name = "Behavior" metaref = "3706" attributes = "Repetitions LogAction" >
				<part metaref = "6527" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Aggregate" metaref = "1206" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="aggregate.bmp"></regnode>
			<constraint name="UniqueMemberNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[parts (Member)->forAll (x, y : gme::Reference |  x <> y implies x.name <> y.name)]]>
				<dispname>Members of an aggregate type must have unique names</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::Member" metaref = "6528" kind = "PICML::Member"></role>
			<aspect name = "InterfaceDefinition" metaref = "3709" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6529" role = "PICML::Member" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ArtifactContainer" metaref = "1210" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="UniqueImplementationArtifactReferences" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let artifacts = self.referenceParts(ImplementationArtifactReference) in
   artifacts->isUnique (i : ImplementationArtifactReference | i.name.trim())]]>
				<dispname>ImplementationArtifactReferences should have unique names</dispname>
			</constraint>
			<constraint name="UniqueImplementationArtifacts" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let artifacts = self.atomParts(ImplementationArtifact) in
   artifacts->isUnique (i : ImplementationArtifact | i.name.trim())]]>
				<dispname>Implementation Artifacts should have unique names</dispname>
			</constraint>
			<constraint name="ValidPICML::ArtifactContainerPartCardinality177" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ImplementationArtifact" ) -> size in
                     (partCount >= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ArtifactContainer, has to match 1..*.</dispname>
			</constraint>
			<role name = "PICML::ArtifactDependency" metaref = "6530" kind = "PICML::ArtifactDependency"></role>
			<role name = "PICML::ArtifactDependsOn" metaref = "6531" kind = "PICML::ArtifactDependsOn"></role>
			<role name = "PICML::ArtifactDeployRequirement" metaref = "6532" kind = "PICML::ArtifactDeployRequirement"></role>
			<role name = "PICML::ArtifactExecParameter" metaref = "6533" kind = "PICML::ArtifactExecParameter"></role>
			<role name = "PICML::ArtifactInfoProperty" metaref = "6534" kind = "PICML::ArtifactInfoProperty"></role>
			<role name = "PICML::ImplementationArtifact" metaref = "6535" kind = "PICML::ImplementationArtifact"></role>
			<role name = "PICML::ImplementationArtifactReference" metaref = "6536" kind = "PICML::ImplementationArtifactReference"></role>
			<role name = "PICML::Property" metaref = "6537" kind = "PICML::Property"></role>
			<role name = "PICML::Requirement" metaref = "6538" kind = "PICML::Requirement"></role>
			<aspect name = "Packaging" metaref = "3722" >
				<part metaref = "6539" role = "PICML::ArtifactDependency" primary = "yes" linked = "no"></part>
				<part metaref = "6540" role = "PICML::ArtifactDependsOn" primary = "yes" linked = "no"></part>
				<part metaref = "6541" role = "PICML::ArtifactDeployRequirement" primary = "yes" linked = "no"></part>
				<part metaref = "6542" role = "PICML::ArtifactExecParameter" primary = "yes" linked = "no"></part>
				<part metaref = "6543" role = "PICML::ArtifactInfoProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6544" role = "PICML::ImplementationArtifact" primary = "yes" linked = "no"></part>
				<part metaref = "6545" role = "PICML::ImplementationArtifactReference" primary = "yes" linked = "no"></part>
				<part metaref = "6546" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "6547" role = "PICML::Requirement" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Attribute" metaref = "1230" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="readonlyattribute.bmp"></regnode>
				<regnode name = "icon" value ="attribute.bmp"></regnode>
			<constraint name="DelegateOrValue" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeValue)->size = 1 implies self.attachingConnections(AttributeDelegate)->size = 0]]>
				<dispname>A value can be specified for an Attribute directly, or it can have a value delegated to it via an AttributeMapping, but not both.</dispname>
			</constraint>
			<constraint name="MatchingAttributeDelegateType" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let attrs = self.referenceParts(AttributeMember) in 
let delegates = self.connectedFCOs(AttributeDelegate) in
    attrs->forAll (attr : Reference | 
                      delegates->forAll (x : AttributeMapping | 
                          let refAttr : Model = x.refersTo() in
                               refAttr.referenceParts(AttributeMember)->forAll (prop : Reference |
                                    attr.refersTo().kindName() = prop.refersTo().kindName()   )  )  )]]>
				<dispname>An AttributeMapping can be used to delegate values to attributes of the same type</dispname>
			</constraint>
			<constraint name="MatchingPropertyType" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let attrs = self.referenceParts(AttributeMember) in 
let props = self.connectedFCOs(AttributeValue) in
    attrs->forAll (attr : Reference | 
                      props->forAll (x : Property | x.referenceParts(DataType)->forAll (prop : Reference |
                         attr.refersTo().kindName() = prop.refersTo().kindName()   )  )  )]]>
				<dispname>The type of the value of a property should match the type of the attribute.</dispname>
			</constraint>
			<constraint name="SingleDelegate" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeDelegate)->size() <= 1]]>
				<dispname>An attribute can be delegated to from only one AttributeMapping</dispname>
			</constraint>
			<constraint name="SingleValue" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeValue)->size() <= 1]]>
				<dispname>Only one value can be specified for an attribute</dispname>
			</constraint>
			<constraint name="ValidPICML::AttributeDelegatesrcCardinality17" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::AttributeDelegate ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ReadonlyAttribute as &quot;src&quot; over PICML::AttributeDelegate, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::AttributeValuedstCardinality24" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::AttributeValue ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ReadonlyAttribute as &quot;dst&quot; over PICML::AttributeValue, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ReadonlyAttributePartCardinality200" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::AttributeMember" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ReadonlyAttribute, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::AttributeMember" metaref = "6548" kind = "PICML::AttributeMember"></role>
			<role name = "PICML::GetException" metaref = "6549" kind = "PICML::GetException"></role>
			<role name = "PICML::SetException" metaref = "6550" kind = "PICML::SetException"></role>
			<aspect name = "InterfaceDefinition" metaref = "3737" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6551" role = "PICML::AttributeMember" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6552" role = "PICML::GetException" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6553" role = "PICML::SetException" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::BenchmarkAnalysis" metaref = "1238" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "PICML::Average" metaref = "6554" kind = "PICML::Average"></role>
			<role name = "PICML::BenchmarkCharacteristics" metaref = "6555" kind = "PICML::BenchmarkCharacteristics"></role>
			<role name = "PICML::CompRef" metaref = "6556" kind = "PICML::CompRef"></role>
			<role name = "PICML::ComponentOperation" metaref = "6557" kind = "PICML::ComponentOperation"></role>
			<role name = "PICML::Event" metaref = "6558" kind = "PICML::Event"></role>
			<role name = "PICML::EventRef" metaref = "6559" kind = "PICML::EventRef"></role>
			<role name = "PICML::FactoryOperation" metaref = "6560" kind = "PICML::FactoryOperation"></role>
			<role name = "PICML::FixedIterationBenchmarks" metaref = "6561" kind = "PICML::FixedIterationBenchmarks"></role>
			<role name = "PICML::Jitter" metaref = "6562" kind = "PICML::Jitter"></role>
			<role name = "PICML::Latency" metaref = "6563" kind = "PICML::Latency"></role>
			<role name = "PICML::LookupOperation" metaref = "6564" kind = "PICML::LookupOperation"></role>
			<role name = "PICML::Maximum" metaref = "6565" kind = "PICML::Maximum"></role>
			<role name = "PICML::MetricConnection" metaref = "6566" kind = "PICML::MetricConnection"></role>
			<role name = "PICML::Minimum" metaref = "6567" kind = "PICML::Minimum"></role>
			<role name = "PICML::OnewayOperation" metaref = "6568" kind = "PICML::OnewayOperation"></role>
			<role name = "PICML::OperationRef" metaref = "6569" kind = "PICML::OperationRef"></role>
			<role name = "PICML::PeriodicBenchmarks" metaref = "6570" kind = "PICML::PeriodicBenchmarks"></role>
			<role name = "PICML::Task" metaref = "6571" kind = "PICML::Task"></role>
			<role name = "PICML::TaskSet" metaref = "6572" kind = "PICML::TaskSet"></role>
			<role name = "PICML::Throughput" metaref = "6573" kind = "PICML::Throughput"></role>
			<role name = "PICML::TimeProbe" metaref = "6574" kind = "PICML::TimeProbe"></role>
			<role name = "PICML::TimerConnection" metaref = "6575" kind = "PICML::TimerConnection"></role>
			<role name = "PICML::TimerEventSinkConn" metaref = "6576" kind = "PICML::TimerEventSinkConn"></role>
			<role name = "PICML::TriggerBenchmarks" metaref = "6577" kind = "PICML::TriggerBenchmarks"></role>
			<role name = "PICML::TwowayOperation" metaref = "6578" kind = "PICML::TwowayOperation"></role>
			<role name = "PICML::WorkLoadOperationConnection" metaref = "6579" kind = "PICML::WorkLoadOperationConnection"></role>
			<role name = "PICML::WorkloadCharacteristics" metaref = "6580" kind = "PICML::WorkloadCharacteristics"></role>
			<aspect name = "ComponentMetrics" metaref = "3771" >
				<part metaref = "6581" role = "PICML::BenchmarkCharacteristics" primary = "yes" linked = "no"></part>
				<part metaref = "6582" role = "PICML::CompRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6583" role = "PICML::ComponentOperation" primary = "yes" linked = "no"></part>
				<part metaref = "6584" role = "PICML::EventRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6585" role = "PICML::FixedIterationBenchmarks" primary = "yes" linked = "no"></part>
				<part metaref = "6586" role = "PICML::Latency" primary = "yes" linked = "no"></part>
				<part metaref = "6587" role = "PICML::MetricConnection" primary = "yes" linked = "no"></part>
				<part metaref = "6588" role = "PICML::OperationRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6589" role = "PICML::PeriodicBenchmarks" primary = "yes" linked = "no"></part>
				<part metaref = "6590" role = "PICML::Task" primary = "yes" linked = "no"></part>
				<part metaref = "6591" role = "PICML::TaskSet" primary = "yes" linked = "no"></part>
				<part metaref = "6592" role = "PICML::Throughput" primary = "yes" linked = "no"></part>
				<part metaref = "6593" role = "PICML::TimeProbe" primary = "yes" linked = "no"></part>
				<part metaref = "6594" role = "PICML::TimerConnection" primary = "yes" linked = "no"></part>
				<part metaref = "6595" role = "PICML::TimerEventSinkConn" primary = "yes" linked = "no"></part>
				<part metaref = "6596" role = "PICML::TriggerBenchmarks" primary = "yes" linked = "no"></part>
				<part metaref = "6597" role = "PICML::WorkLoadOperationConnection" primary = "yes" linked = "no"></part>
				<part metaref = "6598" role = "PICML::WorkloadCharacteristics" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Bridge" metaref = "1285" attributes = "label" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Bridge"></regnode>
			<constraint name="ValidPICML::Bridge2InterconnectdstCardinality28" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Bridge2Interconnect ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Bridge as &quot;dst&quot; over PICML::Bridge2Interconnect, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidPICML::Interconnect2BridgesrcCardinality79" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Interconnect2Bridge ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Bridge as &quot;src&quot; over PICML::Interconnect2Bridge, has to match 1..*.</dispname>
			</constraint>
			<role name = "PICML::Resource" metaref = "6599" kind = "PICML::Resource"></role>
			<aspect name = "Target" metaref = "3791" attributes = "label" >
				<part metaref = "6600" role = "PICML::Resource" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Capability" metaref = "1289" attributes = "resourceType" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Capability.bmp"></regnode>
			<constraint name="AtleastOneResourceType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.resourceType <> ""]]>
				<dispname>ResourceType should contain atleast one element</dispname>
			</constraint>
			<constraint name="NoCapacityOrQuantity" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let sp = self.modelParts(SatisfierProperty) in
          sp->forAll (elem : SatisfierProperty | elem.SatisfierPropertyKind <> #Capacity && elem.SatisfierPropertyKind <> #Quantity)]]>
				<dispname>Capability elements cannot have a SatisfierProperty with kind Capacity or Quantity</dispname>
			</constraint>
			<role name = "PICML::SatisfierProperty" metaref = "6601" kind = "PICML::SatisfierProperty"></role>
			<aspect name = "Packaging" metaref = "3801" attributes = "resourceType" >
				<part metaref = "6602" role = "PICML::SatisfierProperty" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Component" metaref = "1293" attributes = "VersionTag SpecifyIdTag UUID label" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="component.bmp"></regnode>
				<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
				<regnode name = "isTypeShown" value ="true"></regnode>
			<constraint name="InstanceOnly" eventmask = "0x80000004" depth = "1" priority = "1">
				<![CDATA[let parent = self.parent() in
   if (parent.isNull()) then
      true
   else
      parent.kindName = "ComponentAssembly" implies self.isInstance()
   endif]]>
				<dispname>Only assembly or component instances can be created inside a Component Assembly</dispname>
			</constraint>
			<constraint name="NoDeriveAndSupport" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[referenceParts ("Inherits")->size > 0 implies referenceParts ("Supports")->size = 0]]>
				<dispname>A derived Component or ComponentFactory may not directly support an Object</dispname>
			</constraint>
			<constraint name="NoEmitsUsesPortNameClash" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[referenceParts ()->forAll (
  a, b : gme::Reference | (a.oclAsType (OutEventPort).single_destination = true
                                        and b.isTypeOf (RequiredRequestPort)
                                       )
  implies
    a.name <> b.name)]]>
				<dispname>None of a Component&apos;s RequiredRequestPort names can be the same as any of its single-destination OutEventPort names</dispname>
			</constraint>
			<constraint name="NoInheritsAndSupports" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[parts ("Inherits")->size () > 0 implies parts ("Supports")->size () = 0]]>
				<dispname>A component that has a base component may not also support interfaces</dispname>
			</constraint>
			<constraint name="NoSameTypePortNameClash" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[referenceParts (InEventPort)->forAll (a, b : gme::Reference | a <> b implies a.name <> b.name)
and
referenceParts (OutEventPort)->forAll (a, b : gme::Reference | a <> b implies a.name <> b.name)
and
referenceParts (ProvidedRequestPort)->forAll (a, b : gme::Reference | a <> b implies a.name <> b.name)
and
referenceParts (RequiredRequestPort)->forAll (a, b : gme::Reference | a <> b implies a.name <> b.name)]]>
				<dispname>A Component&apos;s ports of the category must all have unique names</dispname>
			</constraint>
			<constraint name="NonRedundantProperties" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.bagConnectedFCOs (AssemblyConfigProperty)->isUnique( x: Property | x.name().trim())]]>
				<dispname>A Property can be associated with a Component only once.</dispname>
			</constraint>
			<constraint name="OneParent" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.parts ("Inherits")->size < 2]]>
				<dispname>ComponentDef and ComponentManager may have only one parent</dispname>
			</constraint>
			<constraint name="PropertyAsAttribute" eventmask = "0x800" depth = "1" priority = "2">
				<![CDATA[let properties = self.connectedFCOs(AssemblyConfigProperty) in
  properties->forAll (x : AssemblyConfigProperty |
        let attributes = self.modelParts(ReadonlyAttribute) in
             not attributes->exists (attr : ReadonlyAttribute |
                           x.name() = attr.name() )) ]]>
				<dispname>A Property has the same name as an Attribute of the Component.  To specify values for the Component&apos;s attributes, connect the Property direcly to the attribute available as a port.</dispname>
			</constraint>
			<constraint name="UniqueUUID" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let components = project.allInstancesOf (Component) in
   components->forAll  (x : Component | 
                         (self <> x)  
                            implies
                         (
                            (  x.UUID.trim() <> self.UUID.trim()  )
                              or
                            (  x.UUID.trim() = ""  or  self.UUID.trim() = ""   )
                         )
              )
                         ]]>
				<dispname>Every Component instance should have a unique UUID</dispname>
			</constraint>
			<constraint name="UniqueWorkerType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let workers = self->parts (WorkerType) in
   workers->isUnique (iter : WorkerType | iter->name ())]]>
				<dispname>Component contains duplicate worker names</dispname>
			</constraint>
			<constraint name="UnknownOutput" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let actions = self.parts (OutputAction) in
let outports = self.parts (OutEventPort) in

actions.forAll (
    action : OutputAction |
    outports.exists (
        outport : OutEventPort | outport->name () = action->name ()))]]>
				<dispname>The component contains a known output action. Please verify the names of output actions match the name of a output port.</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentPartCardinality178" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::Environment" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::Component, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::Action" metaref = "6603" kind = "PICML::Action"></role>
			<role name = "PICML::Attribute" metaref = "6604" kind = "PICML::Attribute"></role>
			<role name = "PICML::CompositeAction" metaref = "6605" kind = "PICML::CompositeAction"></role>
			<role name = "PICML::Effect" metaref = "6606" kind = "PICML::Effect"></role>
			<role name = "PICML::Environment" metaref = "6607" kind = "PICML::Environment"></role>
			<role name = "PICML::Finish" metaref = "6608" kind = "PICML::Finish"></role>
			<role name = "PICML::InEventPort" metaref = "6609" kind = "PICML::InEventPort"></role>
			<role name = "PICML::Input" metaref = "6610" kind = "PICML::Input"></role>
			<role name = "PICML::InputAction" metaref = "6611" kind = "PICML::InputAction"></role>
			<role name = "PICML::MultiInput" metaref = "6612" kind = "PICML::MultiInput"></role>
			<role name = "PICML::OutEventPort" metaref = "6613" kind = "PICML::OutEventPort"></role>
			<role name = "PICML::OutputAction" metaref = "6614" kind = "PICML::OutputAction"></role>
			<role name = "PICML::PeriodicAction" metaref = "6615" kind = "PICML::PeriodicAction"></role>
			<role name = "PICML::ProvidedRequestPort" metaref = "6616" kind = "PICML::ProvidedRequestPort"></role>
			<role name = "PICML::ReadonlyAttribute" metaref = "6617" kind = "PICML::ReadonlyAttribute"></role>
			<role name = "PICML::RequiredRequestPort" metaref = "6618" kind = "PICML::RequiredRequestPort"></role>
			<role name = "PICML::State" metaref = "6619" kind = "PICML::State"></role>
			<role name = "PICML::Supports" metaref = "6620" kind = "PICML::Supports"></role>
			<role name = "PICML::Transition" metaref = "6621" kind = "PICML::Transition"></role>
			<role name = "PICML::Variable" metaref = "6622" kind = "PICML::Variable"></role>
			<role name = "PICML::WorkerType" metaref = "6623" kind = "PICML::WorkerType"></role>
			<aspect name = "InterfaceDefinition" metaref = "3824" attributes = "VersionTag SpecifyIdTag UUID label" >
				<part metaref = "6624" role = "PICML::Attribute" primary = "yes" linked = "yes"></part>
				<part metaref = "6625" role = "PICML::InEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6626" role = "PICML::OutEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6627" role = "PICML::ProvidedRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6628" role = "PICML::ReadonlyAttribute" primary = "yes" linked = "yes"></part>
				<part metaref = "6629" role = "PICML::RequiredRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6630" role = "PICML::Supports" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
			<aspect name = "Behavior" metaref = "3832" attributes = "VersionTag SpecifyIdTag UUID label" >
				<part metaref = "6631" role = "PICML::Action" primary = "yes" linked = "no"></part>
				<part metaref = "6632" role = "PICML::CompositeAction" primary = "yes" linked = "no"></part>
				<part metaref = "6633" role = "PICML::Effect" primary = "yes" linked = "no"></part>
				<part metaref = "6634" role = "PICML::Environment" primary = "yes" linked = "no"></part>
				<part metaref = "6635" role = "PICML::Finish" primary = "yes" linked = "no"></part>
				<part metaref = "6636" role = "PICML::InEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6637" role = "PICML::Input" primary = "yes" linked = "no"></part>
				<part metaref = "6638" role = "PICML::InputAction" primary = "yes" linked = "no"></part>
				<part metaref = "6639" role = "PICML::MultiInput" primary = "yes" linked = "no"></part>
				<part metaref = "6640" role = "PICML::OutEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6641" role = "PICML::OutputAction" primary = "yes" linked = "no"></part>
				<part metaref = "6642" role = "PICML::PeriodicAction" primary = "yes" linked = "no"></part>
				<part metaref = "6643" role = "PICML::ProvidedRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6644" role = "PICML::RequiredRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6645" role = "PICML::State" primary = "yes" linked = "no"></part>
				<part metaref = "6646" role = "PICML::Transition" primary = "yes" linked = "no"></part>
				<part metaref = "6647" role = "PICML::Variable" primary = "yes" linked = "no"></part>
				<part metaref = "6648" role = "PICML::WorkerType" primary = "yes" kindaspect = "Behavior" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ComponentAssembly" metaref = "1309" attributes = "UUID label" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="component.bmp"></regnode>
				<regnode name = "decorator" value ="MGA.Decorator.IDMLDecorator"></regnode>
				<regnode name = "isTypeShown" value ="true"></regnode>
			<constraint name="InstanceOnly" eventmask = "0x80000004" depth = "1" priority = "1">
				<![CDATA[let parent = self.parent() in
   if (parent.isNull()) then
      true
   else
      parent.kindName = "ComponentAssembly" implies self.isInstance()
   endif]]>
				<dispname>Only assembly or component instances can be created inside a Component Assembly</dispname>
			</constraint>
			<constraint name="RequiredComponentPackage" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let instances = self.modelParts(Component) in
let packages = project.allInstancesOf (ComponentPackage) in
instances->forAll (x : Component |
    let myType = x.ComponentParentType() in
         packages->exists (pkg: ComponentPackage | 
               let pkgInterfaces = pkg.connectedFCOs(PackageInterface) in 
               let mimpls = pkg.MonolithicImpls() in
               mimpls->size() >= 1 and pkgInterfaces->size() = 1 and
               mimpls->forAll (impl  : MonolithicImplementation | 
                     let impleIfs = impl.connectedFCOs(Implements) in 
                          impleIfs->size() = 1 and
                          impleIfs->forAll (ref1 : Reference | 
                                              pkgInterfaces->forAll (ref2 : Reference |  
                                                                     ref1.refersTo().name = ref2.refersTo().name
                                                                      and 
                                                                     ref1.refersTo().name = myType.name() 
                                                                    )
                                           ) 
                               )
                          )
                   )]]>
				<dispname>Every component instance in an assembly should have a corresponding MonolithicImplementation implementing its interface and packaged in a ComponentPackage.</dispname>
			</constraint>
			<constraint name="RequiredMonolithicImplementation" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let instances = self.modelParts(Component) in
let monolithicImpls = project.allInstancesOf (MonolithicImplementation) in
instances->forAll (x : Component | 
         let myType = x.ComponentParentType() in
                 monolithicImpls->exists ( impl : MonolithicImplementation | 
                    let interfaces = impl.connectedFCOs(Implements) in
                     interfaces->size() = 1 and
                         interfaces->exists (interface : Reference |
                             interface.refersTo().name() = myType.name() )  ) )
                                                            ]]>
				<dispname>Every component instance in an assembly should have a corresponding MonolithicImplementation, or there should exist a MonolithicImplementation for the corresponding component type</dispname>
			</constraint>
			<constraint name="UniqueAttributeMappingNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts(AttributeMapping)->isUnique( x : AttributeMapping | x.name().trim())]]>
				<dispname>AttributeMappings used in a ComponentAssembly should have unique names</dispname>
			</constraint>
			<constraint name="UniqueConnectorNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let connectors = self.atomParts(PublishConnector) in
          connectors->isUnique (i : PublishConnector | i.name.trim())]]>
				<dispname>Connectors used in a ComponentAssembly should have unique names</dispname>
			</constraint>
			<constraint name="UniqueInstanceName" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let components = self.modelParts(Component) in
          components->isUnique (i : Component | i.name.trim())]]>
				<dispname>Components of an Assembly should have unique names</dispname>
			</constraint>
			<constraint name="ValidAttributeMappingHierarchy" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let mappings = self.referenceParts (AttributeMapping) in
    let children = self.modelParts(ComponentAssembly) in
           mappings->forAll ( x : AttributeMapping | 
                let delegates = x.connectedFCOs("dstAttributeMappingDelegate", AttributeMappingDelegate) in
                       delegates->forAll ( y : FCO |
                              let  delParent : Model = y.parent() in
                                          children->exists ( z : ComponentAssembly | delParent.name() = z.name() ) ) ) ]]>
				<dispname>AttributeMappings can only be delegated from a high-level assembly to sub-assemblies, and not vice-versa (Change the connection direction)</dispname>
			</constraint>
			<constraint name="ValidPICML::CriticalPathdstCardinality40" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::CriticalPath ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentAssembly as &quot;dst&quot; over PICML::CriticalPath, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ImplementsdstCardinality72" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Implements ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentImplementation as &quot;dst&quot; over PICML::Implements, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::AssemblyConfigProperty" metaref = "6649" kind = "PICML::AssemblyConfigProperty"></role>
			<role name = "PICML::AssemblyDeployRequirement" metaref = "6650" kind = "PICML::AssemblyDeployRequirement"></role>
			<role name = "PICML::AssemblyselectRequirement" metaref = "6651" kind = "PICML::AssemblyselectRequirement"></role>
			<role name = "PICML::AttributeDelegate" metaref = "6652" kind = "PICML::AttributeDelegate"></role>
			<role name = "PICML::AttributeMapping" metaref = "6653" kind = "PICML::AttributeMapping"></role>
			<role name = "PICML::AttributeMappingDelegate" metaref = "6654" kind = "PICML::AttributeMappingDelegate"></role>
			<role name = "PICML::AttributeMappingValue" metaref = "6655" kind = "PICML::AttributeMappingValue"></role>
			<role name = "PICML::AttributeValue" metaref = "6656" kind = "PICML::AttributeValue"></role>
			<role name = "PICML::Component" metaref = "6657" kind = "PICML::Component"></role>
			<role name = "PICML::ComponentAssembly" metaref = "6658" kind = "PICML::ComponentAssembly"></role>
			<role name = "PICML::ComponentAssemblyReference" metaref = "6659" kind = "PICML::ComponentAssemblyReference"></role>
			<role name = "PICML::ComponentPackage" metaref = "6660" kind = "PICML::ComponentPackage"></role>
			<role name = "PICML::ComponentPackageReference" metaref = "6661" kind = "PICML::ComponentPackageReference"></role>
			<role name = "PICML::ComponentRef" metaref = "6662" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::EventSinkDelegate" metaref = "6663" kind = "PICML::EventSinkDelegate"></role>
			<role name = "PICML::EventSinkPublish" metaref = "6664" kind = "PICML::EventSinkPublish"></role>
			<role name = "PICML::EventSourceDelegate" metaref = "6665" kind = "PICML::EventSourceDelegate"></role>
			<role name = "PICML::EventSourcePublish" metaref = "6666" kind = "PICML::EventSourcePublish"></role>
			<role name = "PICML::ExternalDelegate" metaref = "6667" kind = "PICML::ExternalDelegate"></role>
			<role name = "PICML::ExternalReferenceEndPoint" metaref = "6668" kind = "PICML::ExternalReferenceEndPoint"></role>
			<role name = "PICML::FacetDelegate" metaref = "6669" kind = "PICML::FacetDelegate"></role>
			<role name = "PICML::FacetInvoke" metaref = "6670" kind = "PICML::FacetInvoke"></role>
			<role name = "PICML::InEventPort" metaref = "6671" kind = "PICML::InEventPort"></role>
			<role name = "PICML::OutEventPort" metaref = "6672" kind = "PICML::OutEventPort"></role>
			<role name = "PICML::PortQoS" metaref = "6673" kind = "PICML::PortQoS"></role>
			<role name = "PICML::Property" metaref = "6674" kind = "PICML::Property"></role>
			<role name = "PICML::ProvidedRequestPort" metaref = "6675" kind = "PICML::ProvidedRequestPort"></role>
			<role name = "PICML::PublishConnector" metaref = "6676" kind = "PICML::PublishConnector"></role>
			<role name = "PICML::QoSCharRef" metaref = "6677" kind = "PICML::QoSCharRef"></role>
			<role name = "PICML::QoSConnector" metaref = "6678" kind = "PICML::QoSConnector"></role>
			<role name = "PICML::QoSReq" metaref = "6679" kind = "PICML::QoSReq"></role>
			<role name = "PICML::RecepInvoke" metaref = "6680" kind = "PICML::RecepInvoke"></role>
			<role name = "PICML::ReceptacleDelegate" metaref = "6681" kind = "PICML::ReceptacleDelegate"></role>
			<role name = "PICML::RequiredRequestPort" metaref = "6682" kind = "PICML::RequiredRequestPort"></role>
			<role name = "PICML::Requirement" metaref = "6683" kind = "PICML::Requirement"></role>
			<role name = "PICML::deliverTo" metaref = "6684" kind = "PICML::deliverTo"></role>
			<role name = "PICML::emit" metaref = "6685" kind = "PICML::emit"></role>
			<role name = "PICML::invoke" metaref = "6686" kind = "PICML::invoke"></role>
			<role name = "PICML::publish" metaref = "6687" kind = "PICML::publish"></role>
			<aspect name = "Packaging" metaref = "6357" attributes = "UUID label" >
				<part metaref = "6688" role = "PICML::AssemblyConfigProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6689" role = "PICML::AssemblyDeployRequirement" primary = "yes" linked = "no"></part>
				<part metaref = "6690" role = "PICML::AssemblyselectRequirement" primary = "yes" linked = "no"></part>
				<part metaref = "6691" role = "PICML::AttributeDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6692" role = "PICML::AttributeMapping" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6693" role = "PICML::AttributeMappingDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6694" role = "PICML::AttributeMappingValue" primary = "yes" linked = "no"></part>
				<part metaref = "6695" role = "PICML::AttributeValue" primary = "yes" linked = "no"></part>
				<part metaref = "6696" role = "PICML::Component" primary = "yes" linked = "no"></part>
				<part metaref = "6697" role = "PICML::ComponentAssembly" primary = "yes" linked = "no"></part>
				<part metaref = "6698" role = "PICML::ComponentAssemblyReference" primary = "yes" kindaspect = "Packaging" linked = "no"></part>
				<part metaref = "6699" role = "PICML::ComponentPackage" primary = "yes" linked = "no"></part>
				<part metaref = "6700" role = "PICML::ComponentPackageReference" primary = "yes" linked = "no"></part>
				<part metaref = "6701" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6702" role = "PICML::EventSinkDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6703" role = "PICML::EventSourceDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6704" role = "PICML::ExternalDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6705" role = "PICML::ExternalReferenceEndPoint" primary = "yes" linked = "no"></part>
				<part metaref = "6706" role = "PICML::FacetDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6707" role = "PICML::InEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6708" role = "PICML::OutEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6709" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "6710" role = "PICML::ProvidedRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6711" role = "PICML::PublishConnector" primary = "yes" linked = "no"></part>
				<part metaref = "6712" role = "PICML::ReceptacleDelegate" primary = "yes" linked = "no"></part>
				<part metaref = "6713" role = "PICML::RequiredRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6714" role = "PICML::Requirement" primary = "yes" linked = "no"></part>
				<part metaref = "6715" role = "PICML::deliverTo" primary = "yes" linked = "no"></part>
				<part metaref = "6716" role = "PICML::emit" primary = "yes" linked = "no"></part>
				<part metaref = "6717" role = "PICML::invoke" primary = "yes" linked = "no"></part>
				<part metaref = "6718" role = "PICML::publish" primary = "yes" linked = "no"></part>
			</aspect>
			<aspect name = "QoS" metaref = "6352" attributes = "UUID label" >
				<part metaref = "6719" role = "PICML::Component" primary = "yes" linked = "no"></part>
				<part metaref = "6720" role = "PICML::ComponentAssemblyReference" primary = "yes" kindaspect = "Packaging" linked = "no"></part>
				<part metaref = "6721" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6722" role = "PICML::EventSinkPublish" primary = "yes" linked = "no"></part>
				<part metaref = "6723" role = "PICML::EventSourcePublish" primary = "yes" linked = "no"></part>
				<part metaref = "6724" role = "PICML::FacetInvoke" primary = "yes" linked = "no"></part>
				<part metaref = "6725" role = "PICML::InEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6726" role = "PICML::OutEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6727" role = "PICML::PortQoS" primary = "yes" linked = "no"></part>
				<part metaref = "6728" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "6729" role = "PICML::ProvidedRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
				<part metaref = "6730" role = "PICML::QoSCharRef" primary = "yes" linked = "no"></part>
				<part metaref = "6731" role = "PICML::QoSConnector" primary = "yes" linked = "no"></part>
				<part metaref = "6732" role = "PICML::QoSReq" primary = "yes" linked = "no"></part>
				<part metaref = "6733" role = "PICML::RecepInvoke" primary = "yes" linked = "no"></part>
				<part metaref = "6734" role = "PICML::RequiredRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "yes"></part>
			</aspect>
		</model>
		<model name = "PICML::ComponentContainer" metaref = "1369" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::ComponentContainerPartCardinality179" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentRef" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentContainer, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::ComponentConfigProperty" metaref = "6735" kind = "PICML::ComponentConfigProperty"></role>
			<role name = "PICML::ComponentInfoProperty" metaref = "6736" kind = "PICML::ComponentInfoProperty"></role>
			<role name = "PICML::ComponentProperty" metaref = "6737" kind = "PICML::ComponentProperty"></role>
			<role name = "PICML::ComponentPropertyDescription" metaref = "6738" kind = "PICML::ComponentPropertyDescription"></role>
			<role name = "PICML::ComponentRef" metaref = "6739" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::Property" metaref = "6740" kind = "PICML::Property"></role>
			<aspect name = "Packaging" metaref = "3857" >
				<part metaref = "6741" role = "PICML::ComponentConfigProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6742" role = "PICML::ComponentInfoProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6743" role = "PICML::ComponentProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6744" role = "PICML::ComponentPropertyDescription" primary = "yes" linked = "no"></part>
				<part metaref = "6745" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6746" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ComponentFactory" metaref = "1383" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="componentfactory.bmp"></regnode>
			<constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
				<dispname>A parent must have the same type as its child</dispname>
			</constraint>
			<constraint name="NoDeriveAndSupport" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[referenceParts ("Inherits")->size > 0 implies referenceParts ("Supports")->size = 0]]>
				<dispname>A derived Component or ComponentFactory may not directly support an Object</dispname>
			</constraint>
			<constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
				<dispname>Immediate parents must all be unique</dispname>
			</constraint>
			<constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
				<dispname>There is a cycle in the inheritance graph</dispname>
			</constraint>
			<constraint name="OneParent" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.parts ("Inherits")->size < 2]]>
				<dispname>ComponentDef and ComponentManager may have only one parent</dispname>
			</constraint>
			<constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let a = parts () - parts ("Inherits") - parts ("Supports") - parts ("MakeMemberPrivate") - parts ("PrivateFlag") in
          a->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>Declarations in a scope must have unique names</dispname>
			</constraint>
			<constraint name="UniqueOperationNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[
            allOps (self)->forAll (x, y: gme::Model | x.name = y.name implies x == y)
          ]]>
				<dispname>Local, inherited and supported operations must all have unique names</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentFactoryPartCardinality180" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::LookupKey" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentFactory, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ManagesComponentdstCardinality88" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::ManagesComponent ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ComponentFactory as &quot;dst&quot; over PICML::ManagesComponent, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::Aggregate" metaref = "6747" kind = "PICML::Aggregate"></role>
			<role name = "PICML::Alias" metaref = "6748" kind = "PICML::Alias"></role>
			<role name = "PICML::Attribute" metaref = "6749" kind = "PICML::Attribute"></role>
			<role name = "PICML::Collection" metaref = "6750" kind = "PICML::Collection"></role>
			<role name = "PICML::Constant" metaref = "6751" kind = "PICML::Constant"></role>
			<role name = "PICML::Enum" metaref = "6752" kind = "PICML::Enum"></role>
			<role name = "PICML::Exception" metaref = "6753" kind = "PICML::Exception"></role>
			<role name = "PICML::FactoryOperation" metaref = "6754" kind = "PICML::FactoryOperation"></role>
			<role name = "PICML::Inherits" metaref = "6755" kind = "PICML::Inherits"></role>
			<role name = "PICML::LookupKey" metaref = "6756" kind = "PICML::LookupKey"></role>
			<role name = "PICML::LookupOperation" metaref = "6757" kind = "PICML::LookupOperation"></role>
			<role name = "PICML::OnewayOperation" metaref = "6758" kind = "PICML::OnewayOperation"></role>
			<role name = "PICML::ReadonlyAttribute" metaref = "6759" kind = "PICML::ReadonlyAttribute"></role>
			<role name = "PICML::Supports" metaref = "6760" kind = "PICML::Supports"></role>
			<role name = "PICML::SwitchedAggregate" metaref = "6761" kind = "PICML::SwitchedAggregate"></role>
			<role name = "PICML::TwowayOperation" metaref = "6762" kind = "PICML::TwowayOperation"></role>
			<aspect name = "InterfaceDefinition" metaref = "3880" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6763" role = "PICML::Aggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6764" role = "PICML::Alias" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6765" role = "PICML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "6766" role = "PICML::Collection" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6767" role = "PICML::Constant" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6768" role = "PICML::Enum" primary = "yes" linked = "no"></part>
				<part metaref = "6769" role = "PICML::Exception" primary = "yes" linked = "no"></part>
				<part metaref = "6770" role = "PICML::FactoryOperation" primary = "yes" linked = "no"></part>
				<part metaref = "6771" role = "PICML::Inherits" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6772" role = "PICML::LookupKey" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6773" role = "PICML::LookupOperation" primary = "yes" linked = "no"></part>
				<part metaref = "6774" role = "PICML::OnewayOperation" primary = "yes" linked = "no"></part>
				<part metaref = "6775" role = "PICML::ReadonlyAttribute" primary = "yes" linked = "no"></part>
				<part metaref = "6776" role = "PICML::Supports" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6777" role = "PICML::SwitchedAggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6778" role = "PICML::TwowayOperation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ComponentImplementationContainer" metaref = "1417" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ImplementationXor" eventmask = "0x80000000" depth = "1" priority = "1">
				<![CDATA[(self.modelParts (ComponentAssembly)->size = 1 implies self.atomParts (MonolithicImplementation)->size = 0)and
          (self.atomParts (MonolithicImplementation)->size = 1 implies self.modelParts (ComponentAssembly)->size = 0)]]>
				<dispname>ComponentImplementation can either be Monolithic or be assembly based, but not both</dispname>
			</constraint>
			<constraint name="UniquePrimaryArtifacts" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let artifacts = self.referenceParts(ImplementationArtifactReference) in
   artifacts->isUnique (i : ImplementationArtifactReference | i.name.trim())]]>
				<dispname>Primary Artifacts of a MonolithicImplementation should have unique names</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentImplementationContainerPartCardinality181" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentImplementation" ) -> size + self.parts( "PICML::MonolithicImplementation" ) -> size + self.parts( "PICML::ComponentAssembly" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentImplementationContainer, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentImplementationContainerPartCardinality182" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentRef" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentImplementationContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentImplementationContainerPartCardinality183" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::Implements" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentImplementationContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ComponentImplementationContainerPartCardinality184" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PathReference" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentImplementationContainer, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Capability" metaref = "6779" kind = "PICML::Capability"></role>
			<role name = "PICML::ComponentAssembly" metaref = "6780" kind = "PICML::ComponentAssembly"></role>
			<role name = "PICML::ComponentRef" metaref = "6781" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::ConfigProperty" metaref = "6782" kind = "PICML::ConfigProperty"></role>
			<role name = "PICML::CriticalPath" metaref = "6783" kind = "PICML::CriticalPath"></role>
			<role name = "PICML::ImplementationArtifactReference" metaref = "6784" kind = "PICML::ImplementationArtifactReference"></role>
			<role name = "PICML::ImplementationCapability" metaref = "6785" kind = "PICML::ImplementationCapability"></role>
			<role name = "PICML::ImplementationDependency" metaref = "6786" kind = "PICML::ImplementationDependency"></role>
			<role name = "PICML::ImplementationDependsOn" metaref = "6787" kind = "PICML::ImplementationDependsOn"></role>
			<role name = "PICML::ImplementationRequirement" metaref = "6788" kind = "PICML::ImplementationRequirement"></role>
			<role name = "PICML::Implements" metaref = "6789" kind = "PICML::Implements"></role>
			<role name = "PICML::InfoProperty" metaref = "6790" kind = "PICML::InfoProperty"></role>
			<role name = "PICML::MonolithDeployRequirement" metaref = "6791" kind = "PICML::MonolithDeployRequirement"></role>
			<role name = "PICML::MonolithExecParameter" metaref = "6792" kind = "PICML::MonolithExecParameter"></role>
			<role name = "PICML::MonolithicImplementation" metaref = "6793" kind = "PICML::MonolithicImplementation"></role>
			<role name = "PICML::MonolithprimaryArtifact" metaref = "6794" kind = "PICML::MonolithprimaryArtifact"></role>
			<role name = "PICML::PathReference" metaref = "6795" kind = "PICML::PathReference"></role>
			<role name = "PICML::Property" metaref = "6796" kind = "PICML::Property"></role>
			<aspect name = "Packaging" metaref = "3915" >
				<part metaref = "6797" role = "PICML::Capability" primary = "yes" linked = "no"></part>
				<part metaref = "6798" role = "PICML::ComponentAssembly" primary = "yes" linked = "no"></part>
				<part metaref = "6799" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6800" role = "PICML::ConfigProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6801" role = "PICML::CriticalPath" primary = "yes" linked = "no"></part>
				<part metaref = "6802" role = "PICML::ImplementationArtifactReference" primary = "yes" linked = "no"></part>
				<part metaref = "6803" role = "PICML::ImplementationCapability" primary = "yes" linked = "no"></part>
				<part metaref = "6804" role = "PICML::ImplementationDependency" primary = "yes" linked = "no"></part>
				<part metaref = "6805" role = "PICML::ImplementationDependsOn" primary = "yes" linked = "no"></part>
				<part metaref = "6806" role = "PICML::ImplementationRequirement" primary = "yes" linked = "no"></part>
				<part metaref = "6807" role = "PICML::Implements" primary = "yes" linked = "no"></part>
				<part metaref = "6808" role = "PICML::InfoProperty" primary = "yes" linked = "no"></part>
				<part metaref = "6809" role = "PICML::MonolithDeployRequirement" primary = "yes" linked = "no"></part>
				<part metaref = "6810" role = "PICML::MonolithExecParameter" primary = "yes" linked = "no"></part>
				<part metaref = "6811" role = "PICML::MonolithicImplementation" primary = "yes" linked = "no"></part>
				<part metaref = "6812" role = "PICML::MonolithprimaryArtifact" primary = "yes" linked = "no"></part>
				<part metaref = "6813" role = "PICML::PathReference" primary = "yes" kindaspect = "PathDiagram" linked = "no"></part>
				<part metaref = "6814" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ComponentPropertyDescription" metaref = "1451" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="ComponentProperty.bmp"></regnode>
			<constraint name="ValidPICML::ComponentPropertyDescriptionPartCardinality185" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::DataType" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ComponentPropertyDescription, has to match 1.</dispname>
			</constraint>
			<role name = "PICML::DataType" metaref = "6815" kind = "PICML::DataType"></role>
			<aspect name = "Packaging" metaref = "3935" >
				<part metaref = "6816" role = "PICML::DataType" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::CompositeAction" metaref = "6482" attributes = "Repetitions LogAction" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="composite.bmp"></regnode>
				<regnode name = "isTypeShown" value ="true"></regnode>
			<constraint name="ValidPICML::CompositeActionPartCardinality186" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::Finish" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::CompositeAction, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::CompositeActionPartCardinality187" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::InputAction" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::CompositeAction, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::EffectdstCardinality46" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Effect ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ActionBase as &quot;dst&quot; over PICML::Effect, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TransitionsrcCardinality135" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Transition ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ActionBase as &quot;src&quot; over PICML::Transition, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Action" metaref = "6817" kind = "PICML::Action"></role>
			<role name = "PICML::CompositeAction" metaref = "6818" kind = "PICML::CompositeAction"></role>
			<role name = "PICML::Effect" metaref = "6819" kind = "PICML::Effect"></role>
			<role name = "PICML::Finish" metaref = "6820" kind = "PICML::Finish"></role>
			<role name = "PICML::InputAction" metaref = "6821" kind = "PICML::InputAction"></role>
			<role name = "PICML::OutputAction" metaref = "6822" kind = "PICML::OutputAction"></role>
			<role name = "PICML::Property" metaref = "6823" kind = "PICML::Property"></role>
			<role name = "PICML::State" metaref = "6824" kind = "PICML::State"></role>
			<role name = "PICML::Transition" metaref = "6825" kind = "PICML::Transition"></role>
			<aspect name = "Behavior" metaref = "3947" attributes = "Repetitions LogAction" >
				<part metaref = "6826" role = "PICML::Action" primary = "yes" linked = "no"></part>
				<part metaref = "6827" role = "PICML::CompositeAction" primary = "yes" linked = "no"></part>
				<part metaref = "6828" role = "PICML::Effect" primary = "yes" linked = "no"></part>
				<part metaref = "6829" role = "PICML::Finish" primary = "yes" linked = "no"></part>
				<part metaref = "6830" role = "PICML::InputAction" primary = "yes" linked = "no"></part>
				<part metaref = "6831" role = "PICML::OutputAction" primary = "yes" linked = "no"></part>
				<part metaref = "6832" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "6833" role = "PICML::State" primary = "yes" linked = "no"></part>
				<part metaref = "6834" role = "PICML::Transition" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ConnectedComponent" metaref = "2011" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidPICML::DstEdgedstCardinality42" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::DstEdge ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;dst&quot; over PICML::DstEdge, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SrcEdgesrcCardinality129" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::SrcEdge ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::GraphVertex as &quot;src&quot; over PICML::SrcEdge, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::DstEdge" metaref = "6835" kind = "PICML::DstEdge"></role>
			<role name = "PICML::InEventPort" metaref = "6836" kind = "PICML::InEventPort"></role>
			<role name = "PICML::OutEventPort" metaref = "6837" kind = "PICML::OutEventPort"></role>
			<role name = "PICML::ProvidedRequestPort" metaref = "6838" kind = "PICML::ProvidedRequestPort"></role>
			<role name = "PICML::RequiredRequestPort" metaref = "6839" kind = "PICML::RequiredRequestPort"></role>
			<aspect name = "PathDiagram" metaref = "3969" >
				<part metaref = "6840" role = "PICML::DstEdge" primary = "yes" linked = "no"></part>
				<part metaref = "6841" role = "PICML::InEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6842" role = "PICML::OutEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6843" role = "PICML::ProvidedRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6844" role = "PICML::RequiredRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::DeploymentPlan" metaref = "1455" attributes = "UUID label" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "PICML::CollocationGroup" metaref = "6845" kind = "PICML::CollocationGroup"></role>
			<role name = "PICML::ComponentAssemblyReference" metaref = "6846" kind = "PICML::ComponentAssemblyReference"></role>
			<role name = "PICML::ComponentRef" metaref = "6847" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::InstanceMapping" metaref = "6848" kind = "PICML::InstanceMapping"></role>
			<role name = "PICML::NodeReference" metaref = "6849" kind = "PICML::NodeReference"></role>
			<role name = "PICML::SharedComponentReference" metaref = "6850" kind = "PICML::SharedComponentReference"></role>
			<aspect name = "NodeMapping" metaref = "3988" attributes = "UUID label" >
				<part metaref = "6851" role = "PICML::CollocationGroup" primary = "yes" linked = "no"></part>
				<part metaref = "6852" role = "PICML::ComponentAssemblyReference" primary = "yes" kindaspect = "Packaging" linked = "no"></part>
				<part metaref = "6853" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6854" role = "PICML::InstanceMapping" primary = "yes" linked = "no"></part>
				<part metaref = "6855" role = "PICML::NodeReference" primary = "yes" kindaspect = "Target" linked = "no"></part>
				<part metaref = "6856" role = "PICML::SharedComponentReference" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Domain" metaref = "1467" attributes = "UUID label" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Domain"></regnode>
			<role name = "PICML::Bridge" metaref = "6857" kind = "PICML::Bridge"></role>
			<role name = "PICML::Bridge2Interconnect" metaref = "6858" kind = "PICML::Bridge2Interconnect"></role>
			<role name = "PICML::Interconnect" metaref = "6859" kind = "PICML::Interconnect"></role>
			<role name = "PICML::Interconnect2Bridge" metaref = "6860" kind = "PICML::Interconnect2Bridge"></role>
			<role name = "PICML::Interconnect2Node" metaref = "6861" kind = "PICML::Interconnect2Node"></role>
			<role name = "PICML::Node" metaref = "6862" kind = "PICML::Node"></role>
			<role name = "PICML::Node2Interconnect" metaref = "6863" kind = "PICML::Node2Interconnect"></role>
			<role name = "PICML::Property" metaref = "6864" kind = "PICML::Property"></role>
			<role name = "PICML::SharedResource" metaref = "6865" kind = "PICML::SharedResource"></role>
			<role name = "PICML::Shares" metaref = "6866" kind = "PICML::Shares"></role>
			<aspect name = "Target" metaref = "4005" attributes = "UUID label" >
				<part metaref = "6867" role = "PICML::Bridge" primary = "yes" linked = "no"></part>
				<part metaref = "6868" role = "PICML::Bridge2Interconnect" primary = "yes" linked = "no"></part>
				<part metaref = "6869" role = "PICML::Interconnect" primary = "yes" linked = "no"></part>
				<part metaref = "6870" role = "PICML::Interconnect2Bridge" primary = "yes" linked = "no"></part>
				<part metaref = "6871" role = "PICML::Interconnect2Node" primary = "yes" linked = "no"></part>
				<part metaref = "6872" role = "PICML::Node" primary = "yes" linked = "no"></part>
				<part metaref = "6873" role = "PICML::Node2Interconnect" primary = "yes" linked = "no"></part>
				<part metaref = "6874" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "6875" role = "PICML::SharedResource" primary = "yes" linked = "no"></part>
				<part metaref = "6876" role = "PICML::Shares" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Enum" metaref = "1489" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="enum.bmp"></regnode>
			<constraint name="UniqueEnumValues" eventmask = "0x80000010" depth = "1" priority = "1">
				<![CDATA[atomParts ()->forAll (x, y : gme::Atom | x <> y implies x.name <> y.name)]]>
				<dispname>An enum&apos;s member names must be unique</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidPICML::EnumPartCardinality188" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::EnumValue" ) -> size in
                     (partCount >= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::Enum, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::EnumValue" metaref = "6877" kind = "PICML::EnumValue"></role>
			<aspect name = "InterfaceDefinition" metaref = "4017" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6878" role = "PICML::EnumValue" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Event" metaref = "1493" attributes = "VersionTag PrefixTag SpecifyIdTag abstract" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="event.bmp"></regnode>
			<constraint name="ConcreteEventParent" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let concrete_parents = self.parts ("Inherits")->select (x : gme::Model | x.oclAsType (Event).abstract = false)
          in
          if (self.abstract = true) then
          concrete_parents->size = 0
          else
          concrete_parents->size < 2
          endif]]>
				<dispname>An abstract Event can have no concrete parent, if it is concrete it can have at most one.</dispname>
			</constraint>
			<constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
				<dispname>A parent must have the same type as its child</dispname>
			</constraint>
			<constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
				<dispname>Immediate parents must all be unique</dispname>
			</constraint>
			<constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
				<dispname>There is a cycle in the inheritance graph</dispname>
			</constraint>
			<constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let a = parts () - parts ("Inherits") - parts ("Supports") - parts ("MakeMemberPrivate") - parts ("PrivateFlag") in
          a->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>Declarations in a scope must have unique names</dispname>
			</constraint>
			<constraint name="UniqueOperationNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[
            allOps (self)->forAll (x, y: gme::Model | x.name = y.name implies x == y)
          ]]>
				<dispname>Local, inherited and supported operations must all have unique names</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<attrdef name="abstract" metaref = "6879" valuetype = "boolean" defvalue = "false">
			</attrdef>
			<role name = "PICML::Aggregate" metaref = "6880" kind = "PICML::Aggregate"></role>
			<role name = "PICML::Alias" metaref = "6881" kind = "PICML::Alias"></role>
			<role name = "PICML::Attribute" metaref = "6882" kind = "PICML::Attribute"></role>
			<role name = "PICML::Collection" metaref = "6883" kind = "PICML::Collection"></role>
			<role name = "PICML::Constant" metaref = "6884" kind = "PICML::Constant"></role>
			<role name = "PICML::Enum" metaref = "6885" kind = "PICML::Enum"></role>
			<role name = "PICML::Exception" metaref = "6886" kind = "PICML::Exception"></role>
			<role name = "PICML::FactoryOperation" metaref = "6887" kind = "PICML::FactoryOperation"></role>
			<role name = "PICML::Inherits" metaref = "6888" kind = "PICML::Inherits"></role>
			<role name = "PICML::MakeMemberPrivate" metaref = "6889" kind = "PICML::MakeMemberPrivate"></role>
			<role name = "PICML::Member" metaref = "6890" kind = "PICML::Member"></role>
			<role name = "PICML::OnewayOperation" metaref = "6891" kind = "PICML::OnewayOperation"></role>
			<role name = "PICML::PrivateFlag" metaref = "6892" kind = "PICML::PrivateFlag"></role>
			<role name = "PICML::ReadonlyAttribute" metaref = "6893" kind = "PICML::ReadonlyAttribute"></role>
			<role name = "PICML::Supports" metaref = "6894" kind = "PICML::Supports"></role>
			<role name = "PICML::SwitchedAggregate" metaref = "6895" kind = "PICML::SwitchedAggregate"></role>
			<role name = "PICML::TwowayOperation" metaref = "6896" kind = "PICML::TwowayOperation"></role>
			<aspect name = "InterfaceDefinition" metaref = "4037" attributes = "VersionTag PrefixTag SpecifyIdTag abstract" >
				<part metaref = "6897" role = "PICML::Aggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6898" role = "PICML::Alias" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6899" role = "PICML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "6900" role = "PICML::Collection" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6901" role = "PICML::Constant" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6902" role = "PICML::Enum" primary = "yes" linked = "no"></part>
				<part metaref = "6903" role = "PICML::Exception" primary = "yes" linked = "no"></part>
				<part metaref = "6904" role = "PICML::FactoryOperation" primary = "yes" linked = "no"></part>
				<part metaref = "6905" role = "PICML::Inherits" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6906" role = "PICML::MakeMemberPrivate" primary = "yes" linked = "no"></part>
				<part metaref = "6907" role = "PICML::Member" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6908" role = "PICML::OnewayOperation" primary = "yes" linked = "no"></part>
				<part metaref = "6909" role = "PICML::PrivateFlag" primary = "yes" linked = "no"></part>
				<part metaref = "6910" role = "PICML::ReadonlyAttribute" primary = "yes" linked = "no"></part>
				<part metaref = "6911" role = "PICML::Supports" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6912" role = "PICML::SwitchedAggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6913" role = "PICML::TwowayOperation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Exception" metaref = "1552" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="exception.bmp"></regnode>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::Member" metaref = "6914" kind = "PICML::Member"></role>
			<aspect name = "InterfaceDefinition" metaref = "4077" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6915" role = "PICML::Member" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ExecutorProject" metaref = "1556" attributes = "libraryexport sharedname ORBServices" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="project.bmp"></regnode>
			<constraint name="ValidPICML::ExecutorProjectPartCardinality189" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ImplementationArtifactReference" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ExecutorProject, has to match 1.</dispname>
			</constraint>
			<constraint name="execOneInstance" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.instances ()->size <= 1]]>
				<dispname>One An executor project can exist as a part of the Component Project</dispname>
			</constraint>
			<role name = "PICML::ImplementationArtifactReference" metaref = "6916" kind = "PICML::ImplementationArtifactReference"></role>
			<aspect name = "LibraryArtifact" metaref = "4080" attributes = "libraryexport sharedname ORBServices" >
				<part metaref = "6917" role = "PICML::ImplementationArtifactReference" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::FactoryOperation" metaref = "1560" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="factory.bmp"></regnode>
			<constraint name="TimerMetricConnection" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[attachingConnections("MetricConnection")->size + attachingConnections("TimerConnection")->size <= 1]]>
				<dispname>An operation cannot have more than 1 Timer connection or 1 Metrics connection</dispname>
			</constraint>
			<constraint name="UniqueExceptions" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let x = self.referenceParts (ExceptionRef) in
          x->size > 0 implies
          x->forAll (a, b : ExeceptionRef | a <> b implies a.refersTo ().name <> b.refersTo ().name)]]>
				<dispname>An operation&apos;s exception list cannot have repeated names</dispname>
			</constraint>
			<constraint name="UniqueParamNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[AllParams ()->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>An operation&apos;s parameters must have unique names</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::ExceptionRef" metaref = "6918" kind = "PICML::ExceptionRef"></role>
			<role name = "PICML::InParameter" metaref = "6919" kind = "PICML::InParameter"></role>
			<aspect name = "InterfaceDefinition" metaref = "4098" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6920" role = "PICML::ExceptionRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6921" role = "PICML::InParameter" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::File" metaref = "1566" attributes = "PrefixTag" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="UniqueFileIncludes" eventmask = "0x400" depth = "1" priority = "1">
				<![CDATA[referenceParts (FileRef)->forAll (x, y : gme::Reference | x <> y implies x.refersTo ().name <> y.refersTo ().name)]]>
				<dispname>A file cannot be included more than once</dispname>
			</constraint>
			<role name = "PICML::Aggregate" metaref = "6922" kind = "PICML::Aggregate"></role>
			<role name = "PICML::Alias" metaref = "6923" kind = "PICML::Alias"></role>
			<role name = "PICML::Boxed" metaref = "6924" kind = "PICML::Boxed"></role>
			<role name = "PICML::Collection" metaref = "6925" kind = "PICML::Collection"></role>
			<role name = "PICML::Component" metaref = "6926" kind = "PICML::Component"></role>
			<role name = "PICML::ComponentFactory" metaref = "6927" kind = "PICML::ComponentFactory"></role>
			<role name = "PICML::ComponentRef" metaref = "6928" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::Constant" metaref = "6929" kind = "PICML::Constant"></role>
			<role name = "PICML::Enum" metaref = "6930" kind = "PICML::Enum"></role>
			<role name = "PICML::Event" metaref = "6931" kind = "PICML::Event"></role>
			<role name = "PICML::Exception" metaref = "6932" kind = "PICML::Exception"></role>
			<role name = "PICML::FileRef" metaref = "6933" kind = "PICML::FileRef"></role>
			<role name = "PICML::ManagesComponent" metaref = "6934" kind = "PICML::ManagesComponent"></role>
			<role name = "PICML::Object" metaref = "6935" kind = "PICML::Object"></role>
			<role name = "PICML::Package" metaref = "6936" kind = "PICML::Package"></role>
			<role name = "PICML::SwitchedAggregate" metaref = "6937" kind = "PICML::SwitchedAggregate"></role>
			<role name = "PICML::ValueObject" metaref = "6938" kind = "PICML::ValueObject"></role>
			<aspect name = "InterfaceDefinition" metaref = "4127" attributes = "PrefixTag" >
				<part metaref = "6939" role = "PICML::Aggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6940" role = "PICML::Alias" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6941" role = "PICML::Boxed" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6942" role = "PICML::Collection" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6943" role = "PICML::Component" primary = "yes" linked = "no"></part>
				<part metaref = "6944" role = "PICML::ComponentFactory" primary = "yes" linked = "no"></part>
				<part metaref = "6945" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6946" role = "PICML::Constant" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6947" role = "PICML::Enum" primary = "yes" linked = "no"></part>
				<part metaref = "6948" role = "PICML::Event" primary = "yes" linked = "no"></part>
				<part metaref = "6949" role = "PICML::Exception" primary = "yes" linked = "no"></part>
				<part metaref = "6950" role = "PICML::FileRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6951" role = "PICML::ManagesComponent" primary = "yes" linked = "no"></part>
				<part metaref = "6952" role = "PICML::Object" primary = "yes" linked = "no"></part>
				<part metaref = "6953" role = "PICML::Package" primary = "yes" linked = "no"></part>
				<part metaref = "6954" role = "PICML::SwitchedAggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6955" role = "PICML::ValueObject" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ImplementationRequirement" metaref = "1602" attributes = "resourceType resourcePort componentPort ResourceUsageKind" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="ImplementationRequirement.bmp"></regnode>
			<role name = "PICML::Property" metaref = "6956" kind = "PICML::Property"></role>
			<aspect name = "Packaging" metaref = "4146" attributes = "resourceType resourcePort componentPort ResourceUsageKind" >
				<part metaref = "6957" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::InputAction" metaref = "6499" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="InputAction.bmp"></regnode>
			<constraint name="ValidPICML::FinishsrcCardinality63" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Finish ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InputActionBase as &quot;src&quot; over PICML::Finish, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::InputsrcCardinality75" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Input ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InputActionBase as &quot;src&quot; over PICML::Input, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::MultiInputsrcCardinality97" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::MultiInput ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InputActionBase as &quot;src&quot; over PICML::MultiInput, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Property" metaref = "6958" kind = "PICML::Property"></role>
			<aspect name = "Behavior" metaref = "4150" >
				<part metaref = "6959" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Interconnect" metaref = "1606" attributes = "label" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Interconnect"></regnode>
			<constraint name="ValidPICML::Interconnect2NodedstCardinality82" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Interconnect2Node ) -> size in
                     (dstCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Interconnect as &quot;dst&quot; over PICML::Interconnect2Node, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidPICML::Node2InterconnectsrcCardinality99" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Node2Interconnect ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Interconnect as &quot;src&quot; over PICML::Node2Interconnect, has to match 1..*.</dispname>
			</constraint>
			<role name = "PICML::Resource" metaref = "6960" kind = "PICML::Resource"></role>
			<aspect name = "Target" metaref = "4153" attributes = "label" >
				<part metaref = "6961" role = "PICML::Resource" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Latency" metaref = "1610" attributes = "fileName priority rate warmup iterations resolution" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Latency.bmp"></regnode>
			<constraint name="ValidPICML::BenchmarkCharacteristicssrcCardinality25" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::BenchmarkCharacteristics ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MetricsBase as &quot;src&quot; over PICML::BenchmarkCharacteristics, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::MetricConnectionsrcCardinality89" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::MetricConnection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MetricsBase as &quot;src&quot; over PICML::MetricConnection, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::WorkloadCharacteristicsdstCardinality140" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::WorkloadCharacteristics ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MetricsBase as &quot;dst&quot; over PICML::WorkloadCharacteristics, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Average" metaref = "6962" kind = "PICML::Average"></role>
			<role name = "PICML::Jitter" metaref = "6963" kind = "PICML::Jitter"></role>
			<role name = "PICML::Maximum" metaref = "6964" kind = "PICML::Maximum"></role>
			<role name = "PICML::Minimum" metaref = "6965" kind = "PICML::Minimum"></role>
			<aspect name = "DataAnalysis" metaref = "4159" attributes = "fileName priority rate warmup iterations resolution" >
				<part metaref = "6966" role = "PICML::Average" primary = "yes" linked = "no"></part>
				<part metaref = "6967" role = "PICML::Jitter" primary = "yes" linked = "no"></part>
				<part metaref = "6968" role = "PICML::Maximum" primary = "yes" linked = "no"></part>
				<part metaref = "6969" role = "PICML::Minimum" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::LookupOperation" metaref = "1620" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="lookup.bmp"></regnode>
			<constraint name="TimerMetricConnection" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[attachingConnections("MetricConnection")->size + attachingConnections("TimerConnection")->size <= 1]]>
				<dispname>An operation cannot have more than 1 Timer connection or 1 Metrics connection</dispname>
			</constraint>
			<constraint name="UniqueExceptions" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let x = self.referenceParts (ExceptionRef) in
          x->size > 0 implies
          x->forAll (a, b : ExeceptionRef | a <> b implies a.refersTo ().name <> b.refersTo ().name)]]>
				<dispname>An operation&apos;s exception list cannot have repeated names</dispname>
			</constraint>
			<constraint name="UniqueParamNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[AllParams ()->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>An operation&apos;s parameters must have unique names</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::ExceptionRef" metaref = "6970" kind = "PICML::ExceptionRef"></role>
			<role name = "PICML::InParameter" metaref = "6971" kind = "PICML::InParameter"></role>
			<aspect name = "InterfaceDefinition" metaref = "4166" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "6972" role = "PICML::ExceptionRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6973" role = "PICML::InParameter" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::MPC" metaref = "1626" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "PICML::Project" metaref = "6974" kind = "PICML::Project"></role>
			<role name = "PICML::Workspaces" metaref = "6975" kind = "PICML::Workspaces"></role>
			<aspect name = "Workspace" metaref = "4171" >
				<part metaref = "6976" role = "PICML::Project" primary = "yes" linked = "no"></part>
				<part metaref = "6977" role = "PICML::Workspaces" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Node" metaref = "1632" attributes = "label" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Node"></regnode>
			<role name = "PICML::Resource" metaref = "6978" kind = "PICML::Resource"></role>
			<aspect name = "Target" metaref = "4175" attributes = "label" >
				<part metaref = "6979" role = "PICML::Resource" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Object" metaref = "1636" attributes = "VersionTag PrefixTag SpecifyIdTag local abstract" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="object.bmp"></regnode>
			<constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
				<dispname>A parent must have the same type as its child</dispname>
			</constraint>
			<constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
				<dispname>Immediate parents must all be unique</dispname>
			</constraint>
			<constraint name="NoNonLocalFromLocal" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[if (self.local = true) then
          true
          else
          let parents = self.parts ("Inherits")->collect (x : gme::Reference | x.refersTo ()) in
          parents->forAll (x : gme::Model | x.oclAsType (Object).local = false)
          endif]]>
				<dispname>A non-local Object cannot inherit from a local one</dispname>
			</constraint>
			<constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
				<dispname>There is a cycle in the inheritance graph</dispname>
			</constraint>
			<constraint name="NotLocalAndAbstract" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[not local or not abstract]]>
				<dispname>An ObjectDef cannot be both local and abstract</dispname>
			</constraint>
			<constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let a = parts () - parts ("Inherits") - parts ("Supports") - parts ("MakeMemberPrivate") - parts ("PrivateFlag") in
          a->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>Declarations in a scope must have unique names</dispname>
			</constraint>
			<constraint name="UniqueOperationNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[
            allOps (self)->forAll (x, y: gme::Model | x.name = y.name implies x == y)
          ]]>
				<dispname>Local, inherited and supported operations must all have unique names</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<attrdef name="abstract" metaref = "6980" valuetype = "boolean" defvalue = "false">
			</attrdef>
			<attrdef name="local" metaref = "6981" valuetype = "boolean" defvalue = "false">
			</attrdef>
			<role name = "PICML::Aggregate" metaref = "6982" kind = "PICML::Aggregate"></role>
			<role name = "PICML::Alias" metaref = "6983" kind = "PICML::Alias"></role>
			<role name = "PICML::Attribute" metaref = "6984" kind = "PICML::Attribute"></role>
			<role name = "PICML::Collection" metaref = "6985" kind = "PICML::Collection"></role>
			<role name = "PICML::Constant" metaref = "6986" kind = "PICML::Constant"></role>
			<role name = "PICML::Enum" metaref = "6987" kind = "PICML::Enum"></role>
			<role name = "PICML::Exception" metaref = "6988" kind = "PICML::Exception"></role>
			<role name = "PICML::Inherits" metaref = "6989" kind = "PICML::Inherits"></role>
			<role name = "PICML::OnewayOperation" metaref = "6990" kind = "PICML::OnewayOperation"></role>
			<role name = "PICML::ReadonlyAttribute" metaref = "6991" kind = "PICML::ReadonlyAttribute"></role>
			<role name = "PICML::SwitchedAggregate" metaref = "6992" kind = "PICML::SwitchedAggregate"></role>
			<role name = "PICML::TwowayOperation" metaref = "6993" kind = "PICML::TwowayOperation"></role>
			<aspect name = "InterfaceDefinition" metaref = "4194" attributes = "VersionTag PrefixTag SpecifyIdTag local abstract" >
				<part metaref = "6994" role = "PICML::Aggregate" primary = "yes" linked = "no"></part>
				<part metaref = "6995" role = "PICML::Alias" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6996" role = "PICML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "6997" role = "PICML::Collection" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6998" role = "PICML::Constant" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "6999" role = "PICML::Enum" primary = "yes" linked = "no"></part>
				<part metaref = "7000" role = "PICML::Exception" primary = "yes" linked = "no"></part>
				<part metaref = "7001" role = "PICML::Inherits" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7002" role = "PICML::OnewayOperation" primary = "yes" linked = "no"></part>
				<part metaref = "7003" role = "PICML::ReadonlyAttribute" primary = "yes" linked = "no"></part>
				<part metaref = "7004" role = "PICML::SwitchedAggregate" primary = "yes" linked = "no"></part>
				<part metaref = "7005" role = "PICML::TwowayOperation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::OnewayOperation" metaref = "1664" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="oneway.bmp"></regnode>
			<constraint name="TimerMetricConnection" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[attachingConnections("MetricConnection")->size + attachingConnections("TimerConnection")->size <= 1]]>
				<dispname>An operation cannot have more than 1 Timer connection or 1 Metrics connection</dispname>
			</constraint>
			<constraint name="UniqueParamNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[AllParams ()->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>An operation&apos;s parameters must have unique names</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::InParameter" metaref = "7006" kind = "PICML::InParameter"></role>
			<aspect name = "InterfaceDefinition" metaref = "4208" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "7007" role = "PICML::InParameter" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::OutputAction" metaref = "6500" attributes = "Repetitions LogAction" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="action.bmp"></regnode>
				<regnode name = "icon" value ="OutputAction.bmp"></regnode>
				<regnode name = "isTypeShown" value ="true"></regnode>
			<constraint name="ValidPICML::EffectdstCardinality46" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::Effect ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ActionBase as &quot;dst&quot; over PICML::Effect, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TransitionsrcCardinality135" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Transition ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ActionBase as &quot;src&quot; over PICML::Transition, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Property" metaref = "7008" kind = "PICML::Property"></role>
			<aspect name = "Behavior" metaref = "4212" attributes = "Repetitions LogAction" >
				<part metaref = "7009" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Package" metaref = "1668" attributes = "VersionTag PrefixTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="package.bmp"></regnode>
			<constraint name="NonEmptyPackage" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[self.parts ()->size > 0]]>
				<dispname>A package cannot be empty</dispname>
			</constraint>
			<constraint name="UniquePackageDeclNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[parts ()->forAll (
          x, y : gme::FCO | x.name == y.name implies (x == y or
          (x.oclIsTypeOf (Package) and y.oclIsTypeOf (Package)) or
          (x.oclIsTypeOf (gme::Connection) or y.oclIsTypeOf (gme::Connection)))
          )
          ]]>
				<dispname>Declarations in a Package must have unique names unless they are themselves Packages</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::Aggregate" metaref = "7010" kind = "PICML::Aggregate"></role>
			<role name = "PICML::Alias" metaref = "7011" kind = "PICML::Alias"></role>
			<role name = "PICML::Boxed" metaref = "7012" kind = "PICML::Boxed"></role>
			<role name = "PICML::Collection" metaref = "7013" kind = "PICML::Collection"></role>
			<role name = "PICML::Component" metaref = "7014" kind = "PICML::Component"></role>
			<role name = "PICML::ComponentFactory" metaref = "7015" kind = "PICML::ComponentFactory"></role>
			<role name = "PICML::ComponentRef" metaref = "7016" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::Constant" metaref = "7017" kind = "PICML::Constant"></role>
			<role name = "PICML::Enum" metaref = "7018" kind = "PICML::Enum"></role>
			<role name = "PICML::Event" metaref = "7019" kind = "PICML::Event"></role>
			<role name = "PICML::Exception" metaref = "7020" kind = "PICML::Exception"></role>
			<role name = "PICML::ManagesComponent" metaref = "7021" kind = "PICML::ManagesComponent"></role>
			<role name = "PICML::Object" metaref = "7022" kind = "PICML::Object"></role>
			<role name = "PICML::Package" metaref = "7023" kind = "PICML::Package"></role>
			<role name = "PICML::SwitchedAggregate" metaref = "7024" kind = "PICML::SwitchedAggregate"></role>
			<role name = "PICML::ValueObject" metaref = "7025" kind = "PICML::ValueObject"></role>
			<aspect name = "InterfaceDefinition" metaref = "4230" attributes = "VersionTag PrefixTag SpecifyIdTag" >
				<part metaref = "7026" role = "PICML::Aggregate" primary = "yes" linked = "no"></part>
				<part metaref = "7027" role = "PICML::Alias" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7028" role = "PICML::Boxed" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7029" role = "PICML::Collection" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7030" role = "PICML::Component" primary = "yes" linked = "no"></part>
				<part metaref = "7031" role = "PICML::ComponentFactory" primary = "yes" linked = "no"></part>
				<part metaref = "7032" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7033" role = "PICML::Constant" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7034" role = "PICML::Enum" primary = "yes" linked = "no"></part>
				<part metaref = "7035" role = "PICML::Event" primary = "yes" linked = "no"></part>
				<part metaref = "7036" role = "PICML::Exception" primary = "yes" linked = "no"></part>
				<part metaref = "7037" role = "PICML::ManagesComponent" primary = "yes" linked = "no"></part>
				<part metaref = "7038" role = "PICML::Object" primary = "yes" linked = "no"></part>
				<part metaref = "7039" role = "PICML::Package" primary = "yes" linked = "no"></part>
				<part metaref = "7040" role = "PICML::SwitchedAggregate" primary = "yes" linked = "no"></part>
				<part metaref = "7041" role = "PICML::ValueObject" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::PackageConfigurationContainer" metaref = "1702" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="PackageConfXor" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts(PackageConfigurationReference)->size = 1
          xor self.referenceParts(ComponentPackageReference)->size = 1
          xor self.atomParts(ComponentPackage)->size = 1]]>
				<dispname>A PackageConfiguration can either specialize another PackageConfiguration, or contain a ComponentPackage, or contain a reference to a ComponentPackage</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfigurationContainerPartCardinality190" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentPackage" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageConfigurationContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfigurationContainerPartCardinality191" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PackageConfiguration" ) -> size in
                     (partCount >= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageConfigurationContainer, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfigurationContainerPartCardinality192" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentPackageReference" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageConfigurationContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfigurationContainerPartCardinality193" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PackageConfBasePackage" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageConfigurationContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfigurationContainerPartCardinality194" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PackageConfReference" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageConfigurationContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageConfigurationContainerPartCardinality195" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PackageConfSpecializedConfig" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageConfigurationContainer, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::ComponentPackage" metaref = "7042" kind = "PICML::ComponentPackage"></role>
			<role name = "PICML::ComponentPackageReference" metaref = "7043" kind = "PICML::ComponentPackageReference"></role>
			<role name = "PICML::PackageConfBasePackage" metaref = "7044" kind = "PICML::PackageConfBasePackage"></role>
			<role name = "PICML::PackageConfConfigProperty" metaref = "7045" kind = "PICML::PackageConfConfigProperty"></role>
			<role name = "PICML::PackageConfReference" metaref = "7046" kind = "PICML::PackageConfReference"></role>
			<role name = "PICML::PackageConfSelectRequirement" metaref = "7047" kind = "PICML::PackageConfSelectRequirement"></role>
			<role name = "PICML::PackageConfSpecializedConfig" metaref = "7048" kind = "PICML::PackageConfSpecializedConfig"></role>
			<role name = "PICML::PackageConfiguration" metaref = "7049" kind = "PICML::PackageConfiguration"></role>
			<role name = "PICML::Property" metaref = "7050" kind = "PICML::Property"></role>
			<role name = "PICML::Requirement" metaref = "7051" kind = "PICML::Requirement"></role>
			<aspect name = "Packaging" metaref = "4259" >
				<part metaref = "7052" role = "PICML::ComponentPackage" primary = "yes" linked = "no"></part>
				<part metaref = "7053" role = "PICML::ComponentPackageReference" primary = "yes" linked = "no"></part>
				<part metaref = "7054" role = "PICML::PackageConfBasePackage" primary = "yes" linked = "no"></part>
				<part metaref = "7055" role = "PICML::PackageConfConfigProperty" primary = "yes" linked = "no"></part>
				<part metaref = "7056" role = "PICML::PackageConfReference" primary = "yes" linked = "no"></part>
				<part metaref = "7057" role = "PICML::PackageConfSelectRequirement" primary = "yes" linked = "no"></part>
				<part metaref = "7058" role = "PICML::PackageConfSpecializedConfig" primary = "yes" linked = "no"></part>
				<part metaref = "7059" role = "PICML::PackageConfiguration" primary = "yes" linked = "no"></part>
				<part metaref = "7060" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "7061" role = "PICML::Requirement" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::PackageContainer" metaref = "1724" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="MatchingInterfaces" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let pkgInterface = self.referenceParts (ComponentRef) in
let impls = self.referenceParts(ComponentImplementationReference) in
  impls->forAll (i : ComponentImplementationReference | 
        let implementation: ComponentImplementation = i.refersTo() in
        let interfaces = implementation.connectedFCOs(Implements) in
            interfaces->forAll ( j: Component | 
               pkgInterface->forAll ( k: ComponentRef |
                       j.name() = k.refersTo().name() ) ) )]]>
				<dispname>Monolithic implementation in a ComponentPackage should all implement the same component interface</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageContainerPartCardinality196" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentPackage" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageContainerPartCardinality197" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ComponentRef" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PackageContainerPartCardinality198" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PackageInterface" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::PackageContainer, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::ComponentImplementationReference" metaref = "7062" kind = "PICML::ComponentImplementationReference"></role>
			<role name = "PICML::ComponentPackage" metaref = "7063" kind = "PICML::ComponentPackage"></role>
			<role name = "PICML::ComponentRef" metaref = "7064" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::Implementation" metaref = "7065" kind = "PICML::Implementation"></role>
			<role name = "PICML::PackageConfigProperty" metaref = "7066" kind = "PICML::PackageConfigProperty"></role>
			<role name = "PICML::PackageInfoProperty" metaref = "7067" kind = "PICML::PackageInfoProperty"></role>
			<role name = "PICML::PackageInterface" metaref = "7068" kind = "PICML::PackageInterface"></role>
			<role name = "PICML::Property" metaref = "7069" kind = "PICML::Property"></role>
			<aspect name = "Packaging" metaref = "4280" >
				<part metaref = "7070" role = "PICML::ComponentImplementationReference" primary = "yes" kindaspect = "Packaging" linked = "no"></part>
				<part metaref = "7071" role = "PICML::ComponentPackage" primary = "yes" linked = "no"></part>
				<part metaref = "7072" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7073" role = "PICML::Implementation" primary = "yes" linked = "no"></part>
				<part metaref = "7074" role = "PICML::PackageConfigProperty" primary = "yes" linked = "no"></part>
				<part metaref = "7075" role = "PICML::PackageInfoProperty" primary = "yes" linked = "no"></part>
				<part metaref = "7076" role = "PICML::PackageInterface" primary = "yes" linked = "no"></part>
				<part metaref = "7077" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Path" metaref = "2116" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "PICML::ComponentRef" metaref = "7078" kind = "PICML::ComponentRef"></role>
			<role name = "PICML::ConnectedComponent" metaref = "7079" kind = "PICML::ConnectedComponent"></role>
			<role name = "PICML::DisplayNode" metaref = "7080" kind = "PICML::DisplayNode"></role>
			<role name = "PICML::DstEdge" metaref = "7081" kind = "PICML::DstEdge"></role>
			<role name = "PICML::Edge" metaref = "7082" kind = "PICML::Edge"></role>
			<role name = "PICML::EdgeProperty" metaref = "7083" kind = "PICML::EdgeProperty"></role>
			<role name = "PICML::InEventPort" metaref = "7084" kind = "PICML::InEventPort"></role>
			<role name = "PICML::OutEventPort" metaref = "7085" kind = "PICML::OutEventPort"></role>
			<role name = "PICML::Property" metaref = "7086" kind = "PICML::Property"></role>
			<role name = "PICML::ProvidedRequestPort" metaref = "7087" kind = "PICML::ProvidedRequestPort"></role>
			<role name = "PICML::RequiredRequestPort" metaref = "7088" kind = "PICML::RequiredRequestPort"></role>
			<role name = "PICML::SrcEdge" metaref = "7089" kind = "PICML::SrcEdge"></role>
			<aspect name = "PathDiagram" metaref = "4301" >
				<part metaref = "7090" role = "PICML::ComponentRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7091" role = "PICML::ConnectedComponent" primary = "yes" linked = "no"></part>
				<part metaref = "7092" role = "PICML::DisplayNode" primary = "yes" linked = "no"></part>
				<part metaref = "7093" role = "PICML::DstEdge" primary = "yes" linked = "no"></part>
				<part metaref = "7094" role = "PICML::Edge" primary = "yes" linked = "no"></part>
				<part metaref = "7095" role = "PICML::EdgeProperty" primary = "yes" linked = "no"></part>
				<part metaref = "7096" role = "PICML::InEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7097" role = "PICML::OutEventPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7098" role = "PICML::Property" primary = "yes" linked = "no"></part>
				<part metaref = "7099" role = "PICML::ProvidedRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7100" role = "PICML::RequiredRequestPort" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7101" role = "PICML::SrcEdge" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Paths" metaref = "3072" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "PICML::Path" metaref = "7102" kind = "PICML::Path"></role>
			<role name = "PICML::PathProperty" metaref = "7103" kind = "PICML::PathProperty"></role>
			<role name = "PICML::Property" metaref = "7104" kind = "PICML::Property"></role>
			<aspect name = "PathDiagram" metaref = "4317" >
				<part metaref = "7105" role = "PICML::Path" primary = "yes" linked = "no"></part>
				<part metaref = "7106" role = "PICML::PathProperty" primary = "yes" linked = "no"></part>
				<part metaref = "7107" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::PeriodicAction" metaref = "6501" attributes = "Period Probability" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="timer.bmp"></regnode>
			<constraint name="ValidPICML::FinishsrcCardinality63" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Finish ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InputActionBase as &quot;src&quot; over PICML::Finish, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::InputsrcCardinality75" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Input ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InputActionBase as &quot;src&quot; over PICML::Input, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::MultiInputsrcCardinality97" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::MultiInput ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::InputActionBase as &quot;src&quot; over PICML::MultiInput, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Property" metaref = "7108" kind = "PICML::Property"></role>
			<aspect name = "Behavior" metaref = "4323" attributes = "Period Probability" >
				<part metaref = "7109" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Project" metaref = "1742" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="comp-proj.bmp"></regnode>
			<role name = "PICML::ExecutorProject" metaref = "7110" kind = "PICML::ExecutorProject"></role>
			<role name = "PICML::ExtResourceConn" metaref = "7111" kind = "PICML::ExtResourceConn"></role>
			<role name = "PICML::ExternalResources" metaref = "7112" kind = "PICML::ExternalResources"></role>
			<role name = "PICML::ImplementationArtifact" metaref = "7113" kind = "PICML::ImplementationArtifact"></role>
			<role name = "PICML::ServantProject" metaref = "7114" kind = "PICML::ServantProject"></role>
			<role name = "PICML::StubProject" metaref = "7115" kind = "PICML::StubProject"></role>
			<aspect name = "ComponentLibraries" metaref = "4345" >
				<part metaref = "7116" role = "PICML::ExecutorProject" primary = "yes" linked = "no"></part>
				<part metaref = "7117" role = "PICML::ExtResourceConn" primary = "yes" linked = "no"></part>
				<part metaref = "7118" role = "PICML::ExternalResources" primary = "yes" linked = "no"></part>
				<part metaref = "7119" role = "PICML::ServantProject" primary = "yes" linked = "no"></part>
				<part metaref = "7120" role = "PICML::StubProject" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Property" metaref = "1755" attributes = "DataValue" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Property.bmp"></regnode>
			<constraint name="ValidPICML::AttributeMappingValuesrcCardinality21" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::AttributeMappingValue ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::Property as &quot;src&quot; over PICML::AttributeMappingValue, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::PropertyPartCardinality199" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::DataType" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::Property, has to match 1.</dispname>
			</constraint>
			<role name = "PICML::DataType" metaref = "7121" kind = "PICML::DataType"></role>
			<aspect name = "Packaging" metaref = "4352" attributes = "DataValue" >
				<part metaref = "7122" role = "PICML::DataType" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ReadonlyAttribute" metaref = "1785" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="readonlyattribute.bmp"></regnode>
			<constraint name="DelegateOrValue" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeValue)->size = 1 implies self.attachingConnections(AttributeDelegate)->size = 0]]>
				<dispname>A value can be specified for an Attribute directly, or it can have a value delegated to it via an AttributeMapping, but not both.</dispname>
			</constraint>
			<constraint name="MatchingAttributeDelegateType" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let attrs = self.referenceParts(AttributeMember) in 
let delegates = self.connectedFCOs(AttributeDelegate) in
    attrs->forAll (attr : Reference | 
                      delegates->forAll (x : AttributeMapping | 
                          let refAttr : Model = x.refersTo() in
                               refAttr.referenceParts(AttributeMember)->forAll (prop : Reference |
                                    attr.refersTo().kindName() = prop.refersTo().kindName()   )  )  )]]>
				<dispname>An AttributeMapping can be used to delegate values to attributes of the same type</dispname>
			</constraint>
			<constraint name="MatchingPropertyType" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let attrs = self.referenceParts(AttributeMember) in 
let props = self.connectedFCOs(AttributeValue) in
    attrs->forAll (attr : Reference | 
                      props->forAll (x : Property | x.referenceParts(DataType)->forAll (prop : Reference |
                         attr.refersTo().kindName() = prop.refersTo().kindName()   )  )  )]]>
				<dispname>The type of the value of a property should match the type of the attribute.</dispname>
			</constraint>
			<constraint name="SingleDelegate" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeDelegate)->size() <= 1]]>
				<dispname>An attribute can be delegated to from only one AttributeMapping</dispname>
			</constraint>
			<constraint name="SingleValue" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[self.attachingConnections(AttributeValue)->size() <= 1]]>
				<dispname>Only one value can be specified for an attribute</dispname>
			</constraint>
			<constraint name="ValidPICML::AttributeDelegatesrcCardinality17" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::AttributeDelegate ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ReadonlyAttribute as &quot;src&quot; over PICML::AttributeDelegate, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::AttributeValuedstCardinality24" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::AttributeValue ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::ReadonlyAttribute as &quot;dst&quot; over PICML::AttributeValue, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ReadonlyAttributePartCardinality200" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::AttributeMember" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ReadonlyAttribute, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::AttributeMember" metaref = "7123" kind = "PICML::AttributeMember"></role>
			<role name = "PICML::GetException" metaref = "7124" kind = "PICML::GetException"></role>
			<aspect name = "InterfaceDefinition" metaref = "4444" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "7125" role = "PICML::AttributeMember" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7126" role = "PICML::GetException" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Requirement" metaref = "1791" attributes = "resourceType" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Requirement.bmp"></regnode>
			<role name = "PICML::Property" metaref = "7127" kind = "PICML::Property"></role>
			<aspect name = "Packaging" metaref = "4451" attributes = "resourceType" >
				<part metaref = "7128" role = "PICML::Property" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Resource" metaref = "1795" attributes = "resourceType" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Resource"></regnode>
			<constraint name="AtleastOneResourceType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.resourceType <> ""]]>
				<dispname>ResourceType should contain atleast one element</dispname>
			</constraint>
			<role name = "PICML::SatisfierProperty" metaref = "7129" kind = "PICML::SatisfierProperty"></role>
			<aspect name = "Target" metaref = "4454" attributes = "resourceType" >
				<part metaref = "7130" role = "PICML::SatisfierProperty" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::SatisfierProperty" metaref = "1799" attributes = "dynamic DataValue SatisfierPropertyKind" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="SatisfierProperty.bmp"></regnode>
			<constraint name="ValidPICML::SatisfierPropertyPartCardinality201" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::DataType" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::SatisfierProperty, has to match 1.</dispname>
			</constraint>
			<role name = "PICML::DataType" metaref = "7131" kind = "PICML::DataType"></role>
			<aspect name = "Packaging" metaref = "4471" attributes = "dynamic DataValue SatisfierPropertyKind" >
				<part metaref = "7132" role = "PICML::DataType" primary = "yes" linked = "no"></part>
			</aspect>
			<aspect name = "Target" metaref = "4469" attributes = "dynamic DataValue SatisfierPropertyKind" >
				<part metaref = "7133" role = "PICML::DataType" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ServantProject" metaref = "1803" attributes = "libraryexport sharedname ORBServices" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="project.bmp"></regnode>
			<constraint name="ValidPICML::ServantProjectPartCardinality202" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::FileRef" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ServantProject, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::ServantProjectPartCardinality203" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ImplementationArtifactReference" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::ServantProject, has to match 1.</dispname>
			</constraint>
			<constraint name="servantOneInstance" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.instances ()->size <= 1]]>
				<dispname>Only A servant project can exists as a part of the Component project</dispname>
			</constraint>
			<role name = "PICML::FileRef" metaref = "7134" kind = "PICML::FileRef"></role>
			<role name = "PICML::ImplementationArtifactReference" metaref = "7135" kind = "PICML::ImplementationArtifactReference"></role>
			<aspect name = "LibraryArtifact" metaref = "4475" attributes = "libraryexport sharedname ORBServices" >
				<part metaref = "7136" role = "PICML::FileRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7137" role = "PICML::ImplementationArtifactReference" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::SharedResource" metaref = "1809" attributes = "resourceType" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="SharedResource"></regnode>
			<constraint name="AtleastOneResourceType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.resourceType <> ""]]>
				<dispname>ResourceType should contain atleast one element</dispname>
			</constraint>
			<constraint name="ValidPICML::SharessrcCardinality127" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::Shares ) -> size in
                     (srcCount >= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::SharedResource as &quot;src&quot; over PICML::Shares, has to match 1..*.</dispname>
			</constraint>
			<role name = "PICML::SatisfierProperty" metaref = "7138" kind = "PICML::SatisfierProperty"></role>
			<aspect name = "Target" metaref = "4479" attributes = "resourceType" >
				<part metaref = "7139" role = "PICML::SatisfierProperty" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::StubProject" metaref = "1813" attributes = "libraryexport sharedname ORBServices" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="project.bmp"></regnode>
			<constraint name="ValidPICML::StubProjectPartCardinality204" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::FileRef" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::StubProject, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::StubProjectPartCardinality205" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ImplementationArtifactReference" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::StubProject, has to match 1.</dispname>
			</constraint>
			<constraint name="stubOneInstance" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.instances ()->size <= 1]]>
				<dispname>Only One stub project can exisit as a part of the Component project</dispname>
			</constraint>
			<role name = "PICML::FileRef" metaref = "7140" kind = "PICML::FileRef"></role>
			<role name = "PICML::ImplementationArtifactReference" metaref = "7141" kind = "PICML::ImplementationArtifactReference"></role>
			<aspect name = "LibraryArtifact" metaref = "4495" attributes = "libraryexport sharedname ORBServices" >
				<part metaref = "7142" role = "PICML::FileRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7143" role = "PICML::ImplementationArtifactReference" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::SwitchedAggregate" metaref = "1819" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="switchedaggregate.bmp"></regnode>
			<constraint name="DefaultCaseCardinality" eventmask = "0x80000000" depth = "1" priority = "1">
				<![CDATA[parts (Member)->forAll (
          x : gme::FCO | let labels = x.connectedFCOs ()
          in
          labels->exists (y : gme::Atom | y.name = "default") implies labels->size = 1
          )]]>
				<dispname>A default member cannot have multiple labels</dispname>
			</constraint>
			<constraint name="LegalDiscriminatorType" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[referenceParts (Discriminator) -> forAll (
          x : gme::Reference | x.refersTo ().isTypeOf (Enum) or
          x.refersTo ().isTypeOf (Boolean) or
          x.refersTo ().isTypeOf (Byte) or
          x.refersTo ().isTypeOf (ShortInteger) or
          x.refersTo ().isTypeOf (LongInteger))]]>
				<dispname>Discriminator must have integer, character, boolean or enum type</dispname>
			</constraint>
			<constraint name="UniqueLabelNames" eventmask = "0x80000010" depth = "1" priority = "1">
				<![CDATA[parts ("Label")->forAll (a, b : gme::Atom | a <> b implies a.name <> b.name)]]>
				<dispname>Labels in the same scope must be unique</dispname>
			</constraint>
			<constraint name="UniqueMemberNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[parts (Member)->forAll (x, y : gme::Reference |  x <> y implies x.name <> y.name)]]>
				<dispname>Members of an aggregate type must have unique names</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidPICML::SwitchedAggregatePartCardinality206" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::Label" ) -> size in
                     (partCount >= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::SwitchedAggregate, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidPICML::SwitchedAggregatePartCardinality207" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::Discriminator" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::SwitchedAggregate, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::SwitchedAggregatePartCardinality208" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::LabelConnection" ) -> size in
                     (partCount >= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::SwitchedAggregate, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::Discriminator" metaref = "7144" kind = "PICML::Discriminator"></role>
			<role name = "PICML::Label" metaref = "7145" kind = "PICML::Label"></role>
			<role name = "PICML::LabelConnection" metaref = "7146" kind = "PICML::LabelConnection"></role>
			<role name = "PICML::Member" metaref = "7147" kind = "PICML::Member"></role>
			<aspect name = "InterfaceDefinition" metaref = "4502" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "7148" role = "PICML::Discriminator" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7149" role = "PICML::Label" primary = "yes" linked = "no"></part>
				<part metaref = "7150" role = "PICML::LabelConnection" primary = "yes" linked = "no"></part>
				<part metaref = "7151" role = "PICML::Member" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Throughput" metaref = "1829" attributes = "fileName priority rate warmup iterations resolution" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="Throughput.bmp"></regnode>
			<constraint name="ValidPICML::BenchmarkCharacteristicssrcCardinality25" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::BenchmarkCharacteristics ) -> size in
                     (srcCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MetricsBase as &quot;src&quot; over PICML::BenchmarkCharacteristics, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::MetricConnectionsrcCardinality89" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let srcCount = self.attachingConnections( "dst", PICML::MetricConnection ) -> size in
                     (srcCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MetricsBase as &quot;src&quot; over PICML::MetricConnection, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::WorkloadCharacteristicsdstCardinality140" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", PICML::WorkloadCharacteristics ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to PICML::MetricsBase as &quot;dst&quot; over PICML::WorkloadCharacteristics, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::Average" metaref = "7152" kind = "PICML::Average"></role>
			<role name = "PICML::Jitter" metaref = "7153" kind = "PICML::Jitter"></role>
			<role name = "PICML::Maximum" metaref = "7154" kind = "PICML::Maximum"></role>
			<role name = "PICML::Minimum" metaref = "7155" kind = "PICML::Minimum"></role>
			<aspect name = "DataAnalysis" metaref = "4514" attributes = "fileName priority rate warmup iterations resolution" >
				<part metaref = "7156" role = "PICML::Average" primary = "yes" linked = "no"></part>
				<part metaref = "7157" role = "PICML::Jitter" primary = "yes" linked = "no"></part>
				<part metaref = "7158" role = "PICML::Maximum" primary = "yes" linked = "no"></part>
				<part metaref = "7159" role = "PICML::Minimum" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::TopLevelPackageContainer" metaref = "1839" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="TopLevelPackageConfiguration.bmp"></regnode>
			<constraint name="ValidPICML::TopLevelPackageContainerPartCardinality209" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::TopLevelPackage" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::TopLevelPackageContainer, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TopLevelPackageContainerPartCardinality210" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::PackageConfigurationReference" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::TopLevelPackageContainer, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidPICML::TopLevelPackageContainerPartCardinality211" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::package" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::TopLevelPackageContainer, has to match 0..1.</dispname>
			</constraint>
			<role name = "PICML::PackageConfigurationReference" metaref = "7160" kind = "PICML::PackageConfigurationReference"></role>
			<role name = "PICML::TopLevelPackage" metaref = "7161" kind = "PICML::TopLevelPackage"></role>
			<role name = "PICML::package" metaref = "7162" kind = "PICML::package"></role>
			<aspect name = "Packaging" metaref = "4522" >
				<part metaref = "7163" role = "PICML::PackageConfigurationReference" primary = "yes" linked = "no"></part>
				<part metaref = "7164" role = "PICML::TopLevelPackage" primary = "yes" linked = "no"></part>
				<part metaref = "7165" role = "PICML::package" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::TwowayOperation" metaref = "1847" attributes = "VersionTag SpecifyIdTag" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="twoway.bmp"></regnode>
			<constraint name="TimerMetricConnection" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[attachingConnections("MetricConnection")->size + attachingConnections("TimerConnection")->size <= 1]]>
				<dispname>An operation cannot have more than 1 Timer connection or 1 Metrics connection</dispname>
			</constraint>
			<constraint name="UniqueExceptions" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let x = self.referenceParts (ExceptionRef) in
          x->size > 0 implies
          x->forAll (a, b : ExeceptionRef | a <> b implies a.refersTo ().name <> b.refersTo ().name)]]>
				<dispname>An operation&apos;s exception list cannot have repeated names</dispname>
			</constraint>
			<constraint name="UniqueParamNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[AllParams ()->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>An operation&apos;s parameters must have unique names</dispname>
			</constraint>
			<constraint name="ValidPICML::TwowayOperationPartCardinality212" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "PICML::ReturnType" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by PICML::TwowayOperation, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<role name = "PICML::ExceptionRef" metaref = "7166" kind = "PICML::ExceptionRef"></role>
			<role name = "PICML::InParameter" metaref = "7167" kind = "PICML::InParameter"></role>
			<role name = "PICML::InoutParameter" metaref = "7168" kind = "PICML::InoutParameter"></role>
			<role name = "PICML::OutParameter" metaref = "7169" kind = "PICML::OutParameter"></role>
			<role name = "PICML::ReturnType" metaref = "7170" kind = "PICML::ReturnType"></role>
			<aspect name = "InterfaceDefinition" metaref = "4531" attributes = "VersionTag SpecifyIdTag" >
				<part metaref = "7171" role = "PICML::ExceptionRef" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7172" role = "PICML::InParameter" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7173" role = "PICML::InoutParameter" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7174" role = "PICML::OutParameter" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7175" role = "PICML::ReturnType" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::ValueObject" metaref = "1859" attributes = "VersionTag PrefixTag SpecifyIdTag abstract" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="value.bmp"></regnode>
			<constraint name="ConcreteValueParent" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let concrete_parents =
          self.parts ("Inherits")->select (x : gme::Reference | x.refersTo ().oclAsType (ValueObject).abstract = false)
          in
          if (self.abstract = true) then
          concrete_parents->size = 0
          else
          concrete_parents->size < 2
          endif]]>
				<dispname>An abstract ValueDef can have no concrete parent, if it is concrete it can have at most one.</dispname>
			</constraint>
			<constraint name="InheritsSameType" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x : gme::Reference | x.refersTo ().type () = self.type ())]]>
				<dispname>A parent must have the same type as its child</dispname>
			</constraint>
			<constraint name="NoDuplicateImmediateParents" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[self.referenceParts (Inherits)->forAll (x, y : gme::Reference | x <> y implies x.refersTo () <> y.refersTo ())]]>
				<dispname>Immediate parents must all be unique</dispname>
			</constraint>
			<constraint name="NoRecursiveInheritance" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[self.inheritsRecursive (self)->forAll (x : gme::Model | x <> self)]]>
				<dispname>There is a cycle in the inheritance graph</dispname>
			</constraint>
			<constraint name="UniqueInheritableDeclNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let a = parts () - parts ("Inherits") - parts ("Supports") - parts ("MakeMemberPrivate") - parts ("PrivateFlag") in
          a->forAll (x, y : gme::FCO | x <> y implies x.name <> y.name)]]>
				<dispname>Declarations in a scope must have unique names</dispname>
			</constraint>
			<constraint name="UniqueOperationNames" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[
            allOps (self)->forAll (x, y: gme::Model | x.name = y.name implies x == y)
          ]]>
				<dispname>Local, inherited and supported operations must all have unique names</dispname>
			</constraint>
			<constraint name="ValidIdentifier" eventmask = "0x80000011" depth = "1" priority = "1">
				<![CDATA[name.trim().match( "^[a-zA-Z][_a-zA-Z0-9]*$" )]]>
				<dispname>Not a valid identifier</dispname>
			</constraint>
			<constraint name="ValidVersion" eventmask = "0x1" depth = "1" priority = "1">
				<![CDATA[VersionTag <> "" implies VersionTag.trim ().match ("^[0-9]+\.[0-9]+$")]]>
				<dispname>Version must be a valid decimal number</dispname>
			</constraint>
			<attrdef name="abstract" metaref = "7176" valuetype = "boolean" defvalue = "false">
			</attrdef>
			<role name = "PICML::Aggregate" metaref = "7177" kind = "PICML::Aggregate"></role>
			<role name = "PICML::Alias" metaref = "7178" kind = "PICML::Alias"></role>
			<role name = "PICML::Attribute" metaref = "7179" kind = "PICML::Attribute"></role>
			<role name = "PICML::Collection" metaref = "7180" kind = "PICML::Collection"></role>
			<role name = "PICML::Constant" metaref = "7181" kind = "PICML::Constant"></role>
			<role name = "PICML::Enum" metaref = "7182" kind = "PICML::Enum"></role>
			<role name = "PICML::Exception" metaref = "7183" kind = "PICML::Exception"></role>
			<role name = "PICML::FactoryOperation" metaref = "7184" kind = "PICML::FactoryOperation"></role>
			<role name = "PICML::Inherits" metaref = "7185" kind = "PICML::Inherits"></role>
			<role name = "PICML::MakeMemberPrivate" metaref = "7186" kind = "PICML::MakeMemberPrivate"></role>
			<role name = "PICML::Member" metaref = "7187" kind = "PICML::Member"></role>
			<role name = "PICML::OnewayOperation" metaref = "7188" kind = "PICML::OnewayOperation"></role>
			<role name = "PICML::PrivateFlag" metaref = "7189" kind = "PICML::PrivateFlag"></role>
			<role name = "PICML::ReadonlyAttribute" metaref = "7190" kind = "PICML::ReadonlyAttribute"></role>
			<role name = "PICML::Supports" metaref = "7191" kind = "PICML::Supports"></role>
			<role name = "PICML::SwitchedAggregate" metaref = "7192" kind = "PICML::SwitchedAggregate"></role>
			<role name = "PICML::TwowayOperation" metaref = "7193" kind = "PICML::TwowayOperation"></role>
			<aspect name = "InterfaceDefinition" metaref = "4555" attributes = "VersionTag PrefixTag SpecifyIdTag abstract" >
				<part metaref = "7194" role = "PICML::Aggregate" primary = "yes" linked = "no"></part>
				<part metaref = "7195" role = "PICML::Alias" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7196" role = "PICML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "7197" role = "PICML::Collection" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7198" role = "PICML::Constant" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7199" role = "PICML::Enum" primary = "yes" linked = "no"></part>
				<part metaref = "7200" role = "PICML::Exception" primary = "yes" linked = "no"></part>
				<part metaref = "7201" role = "PICML::FactoryOperation" primary = "yes" linked = "no"></part>
				<part metaref = "7202" role = "PICML::Inherits" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7203" role = "PICML::MakeMemberPrivate" primary = "yes" linked = "no"></part>
				<part metaref = "7204" role = "PICML::Member" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7205" role = "PICML::OnewayOperation" primary = "yes" linked = "no"></part>
				<part metaref = "7206" role = "PICML::PrivateFlag" primary = "yes" linked = "no"></part>
				<part metaref = "7207" role = "PICML::ReadonlyAttribute" primary = "yes" linked = "no"></part>
				<part metaref = "7208" role = "PICML::Supports" primary = "yes" kindaspect = "InterfaceDefinition" linked = "no"></part>
				<part metaref = "7209" role = "PICML::SwitchedAggregate" primary = "yes" linked = "no"></part>
				<part metaref = "7210" role = "PICML::TwowayOperation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::Worker" metaref = "6502" attributes = "Abstract" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="worker.gif"></regnode>
			<constraint name="DuplicateAction" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let actions = self.parts (Action) in

actions->isUnique (iter : Action | iter->name ())
]]>
				<dispname>Worker contains duplicate actions</dispname>
			</constraint>
			<role name = "PICML::Action" metaref = "7211" kind = "PICML::Action"></role>
			<role name = "PICML::CompositeAction" metaref = "7212" kind = "PICML::CompositeAction"></role>
			<role name = "PICML::OutputAction" metaref = "7213" kind = "PICML::OutputAction"></role>
			<aspect name = "Behavior" metaref = "4577" attributes = "Abstract" >
				<part metaref = "7214" role = "PICML::Action" primary = "yes" linked = "no"></part>
				<part metaref = "7215" role = "PICML::CompositeAction" primary = "yes" linked = "no"></part>
				<part metaref = "7216" role = "PICML::OutputAction" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::WorkerFile" metaref = "6509" attributes = "Location" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="package.bmp"></regnode>
				<regnode name = "icon" value ="file.bmp"></regnode>
			<role name = "PICML::Worker" metaref = "7217" kind = "PICML::Worker"></role>
			<role name = "PICML::WorkerPackage" metaref = "7218" kind = "PICML::WorkerPackage"></role>
			<aspect name = "Behavior" metaref = "4584" attributes = "Location" >
				<part metaref = "7219" role = "PICML::Worker" primary = "yes" linked = "no"></part>
				<part metaref = "7220" role = "PICML::WorkerPackage" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::WorkerLibrary" metaref = "6514" attributes = "Location" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="UniqueWorker" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let workers = self->parts (Worker) in
    workers->isUnique (iter : Worker | iter->name ())]]>
				<dispname>Worker library constains duplicate worker names</dispname>
			</constraint>
			<role name = "PICML::WorkerFile" metaref = "7221" kind = "PICML::WorkerFile"></role>
			<aspect name = "Behavior" metaref = "4589" attributes = "Location" >
				<part metaref = "7222" role = "PICML::WorkerFile" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "PICML::WorkerPackage" metaref = "6517" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="package.bmp"></regnode>
			<role name = "PICML::Worker" metaref = "7223" kind = "PICML::Worker"></role>
			<role name = "PICML::WorkerPackage" metaref = "7224" kind = "PICML::WorkerPackage"></role>
			<aspect name = "Behavior" metaref = "4594" >
				<part metaref = "7225" role = "PICML::Worker" primary = "yes" linked = "no"></part>
				<part metaref = "7226" role = "PICML::WorkerPackage" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "SIML::System" metaref = "4685" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "SIML::Module" metaref = "6407" kind = "SIML::Module"></role>
			<role name = "SIML::PortProxy" metaref = "6408" kind = "SIML::PortProxy"></role>
			<aspect name = "Integration" metaref = "4803" >
				<part metaref = "6409" role = "SIML::Module" primary = "yes" linked = "no"></part>
				<part metaref = "6410" role = "SIML::PortProxy" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Binding" metaref = "7253" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="binding.gif"></regnode>
			<constraint name="ValidWSML::BindingPartCardinality213" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::ExtensibleBinding" ) -> size + self.parts( "WSML::SOAPBinding" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Binding, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::BindingPartCardinality214" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Binding, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::BindingPortTypedstCardinality154" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::BindingPortType ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::Binding as &quot;dst&quot; over WSML::BindingPortType, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::BindingOperation" metaref = "7254" kind = "WSML::BindingOperation"></role>
			<role name = "WSML::BindsOperation" metaref = "7255" kind = "WSML::BindsOperation"></role>
			<role name = "WSML::Documentation" metaref = "7256" kind = "WSML::Documentation"></role>
			<role name = "WSML::OperationRef" metaref = "7257" kind = "WSML::OperationRef"></role>
			<role name = "WSML::SOAPBinding" metaref = "7258" kind = "WSML::SOAPBinding"></role>
			<aspect name = "ServiceDefinition" metaref = "4812" >
				<part metaref = "7259" role = "WSML::BindingOperation" primary = "yes" linked = "no"></part>
				<part metaref = "7260" role = "WSML::BindsOperation" primary = "yes" linked = "no"></part>
				<part metaref = "7261" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7262" role = "WSML::OperationRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7263" role = "WSML::SOAPBinding" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::BindingOperation" metaref = "7264" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="bindingoperation.gif"></regnode>
			<constraint name="ValidWSML::BindingOperationPartCardinality215" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::ExtensibleMessage" ) -> size + self.parts( "WSML::SOAPBody" ) -> size + self.parts( "WSML::SOAPFault" ) -> size + self.parts( "WSML::SOAPHeaderFault" ) -> size + self.parts( "WSML::SOAPHeader" ) -> size in
                     (partCount >= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::BindingOperation, has to match 1..*.</dispname>
			</constraint>
			<constraint name="ValidWSML::BindingOperationPartCardinality216" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::ExtensibleOperation" ) -> size + self.parts( "WSML::SOAPOperation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::BindingOperation, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::BindingOperationPartCardinality217" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::BindingOperation, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::BindsOperationdstCardinality156" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::BindsOperation ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::BindingOperation as &quot;dst&quot; over WSML::BindsOperation, has to match 0..1.</dispname>
			</constraint>
			<role name = "WSML::BodyBinding" metaref = "7265" kind = "WSML::BodyBinding"></role>
			<role name = "WSML::BodyParts" metaref = "7266" kind = "WSML::BodyParts"></role>
			<role name = "WSML::Documentation" metaref = "7267" kind = "WSML::Documentation"></role>
			<role name = "WSML::FaultRef" metaref = "7268" kind = "WSML::FaultRef"></role>
			<role name = "WSML::HeaderBinding" metaref = "7269" kind = "WSML::HeaderBinding"></role>
			<role name = "WSML::HeaderMessage" metaref = "7270" kind = "WSML::HeaderMessage"></role>
			<role name = "WSML::HeaderPart" metaref = "7271" kind = "WSML::HeaderPart"></role>
			<role name = "WSML::InputRef" metaref = "7272" kind = "WSML::InputRef"></role>
			<role name = "WSML::MessageRef" metaref = "7273" kind = "WSML::MessageRef"></role>
			<role name = "WSML::OutputRef" metaref = "7274" kind = "WSML::OutputRef"></role>
			<role name = "WSML::PartRef" metaref = "7275" kind = "WSML::PartRef"></role>
			<role name = "WSML::SOAPBody" metaref = "7276" kind = "WSML::SOAPBody"></role>
			<role name = "WSML::SOAPFault" metaref = "7277" kind = "WSML::SOAPFault"></role>
			<role name = "WSML::SOAPFaultExtension" metaref = "7278" kind = "WSML::SOAPFaultExtension"></role>
			<role name = "WSML::SOAPHeader" metaref = "7279" kind = "WSML::SOAPHeader"></role>
			<role name = "WSML::SOAPHeaderFault" metaref = "7280" kind = "WSML::SOAPHeaderFault"></role>
			<role name = "WSML::SOAPOperation" metaref = "7281" kind = "WSML::SOAPOperation"></role>
			<aspect name = "ServiceDefinition" metaref = "4835" >
				<part metaref = "7282" role = "WSML::BodyBinding" primary = "yes" linked = "no"></part>
				<part metaref = "7283" role = "WSML::BodyParts" primary = "yes" linked = "no"></part>
				<part metaref = "7284" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7285" role = "WSML::FaultRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7286" role = "WSML::HeaderBinding" primary = "yes" linked = "no"></part>
				<part metaref = "7287" role = "WSML::HeaderMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7288" role = "WSML::HeaderPart" primary = "yes" linked = "no"></part>
				<part metaref = "7289" role = "WSML::InputRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7290" role = "WSML::MessageRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7291" role = "WSML::OutputRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7292" role = "WSML::PartRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7293" role = "WSML::SOAPBody" primary = "yes" linked = "no"></part>
				<part metaref = "7294" role = "WSML::SOAPFault" primary = "yes" linked = "no"></part>
				<part metaref = "7295" role = "WSML::SOAPFaultExtension" primary = "yes" linked = "no"></part>
				<part metaref = "7296" role = "WSML::SOAPHeader" primary = "yes" linked = "no"></part>
				<part metaref = "7297" role = "WSML::SOAPHeaderFault" primary = "yes" linked = "no"></part>
				<part metaref = "7298" role = "WSML::SOAPOperation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Definitions" metaref = "1090" attributes = "targetNamespace" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="definitions.gif"></regnode>
			<constraint name="ValidWSML::DefinitionsPartCardinality218" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Definitions, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::DefinitionsPartCardinality219" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Messages" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Definitions, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::DefinitionsPartCardinality220" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Types" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Definitions, has to match 0..1.</dispname>
			</constraint>
			<attrdef name="targetNamespace" metaref = "7299" valuetype = "string" defvalue = "">
			</attrdef>
			<role name = "WSML::Attribute" metaref = "7300" kind = "WSML::Attribute"></role>
			<role name = "WSML::Binding" metaref = "7301" kind = "WSML::Binding"></role>
			<role name = "WSML::BindingPortType" metaref = "7302" kind = "WSML::BindingPortType"></role>
			<role name = "WSML::Documentation" metaref = "7303" kind = "WSML::Documentation"></role>
			<role name = "WSML::Import" metaref = "7304" kind = "WSML::Import"></role>
			<role name = "WSML::Messages" metaref = "7305" kind = "WSML::Messages"></role>
			<role name = "WSML::PortType" metaref = "7306" kind = "WSML::PortType"></role>
			<role name = "WSML::Service" metaref = "7307" kind = "WSML::Service"></role>
			<role name = "WSML::Types" metaref = "7308" kind = "WSML::Types"></role>
			<aspect name = "ServiceDefinition" metaref = "4863" attributes = "targetNamespace" >
				<part metaref = "7309" role = "WSML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "7310" role = "WSML::Binding" primary = "yes" linked = "no"></part>
				<part metaref = "7311" role = "WSML::BindingPortType" primary = "yes" linked = "no"></part>
				<part metaref = "7312" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7313" role = "WSML::Import" primary = "yes" linked = "no"></part>
				<part metaref = "7314" role = "WSML::Messages" primary = "yes" linked = "no"></part>
				<part metaref = "7315" role = "WSML::PortType" primary = "yes" linked = "no"></part>
				<part metaref = "7316" role = "WSML::Service" primary = "yes" linked = "no"></part>
				<part metaref = "7317" role = "WSML::Types" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Documentation" metaref = "1113" attributes = "DocText Mixed" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="documentation.bmp"></regnode>
			<role name = "WSML::Element" metaref = "7318" kind = "WSML::Element"></role>
			<aspect name = "ServiceDefinition" metaref = "4874" attributes = "DocText Mixed" >
				<part metaref = "7319" role = "WSML::Element" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Element" metaref = "7320" attributes = "schemaType Order" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="element.bmp"></regnode>
			<role name = "WSML::Attribute" metaref = "7321" kind = "WSML::Attribute"></role>
			<role name = "WSML::Element" metaref = "7322" kind = "WSML::Element"></role>
			<aspect name = "ServiceDefinition" metaref = "4878" attributes = "schemaType Order" >
				<part metaref = "7323" role = "WSML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "7324" role = "WSML::Element" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Fault" metaref = "1123" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="fault.bmp"></regnode>
			<constraint name="ValidWSML::FaultMessagedstCardinality162" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::FaultMessage ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::Fault as &quot;dst&quot; over WSML::FaultMessage, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7325" kind = "WSML::Documentation"></role>
			<aspect name = "ServiceDefinition" metaref = "4882" >
				<part metaref = "7326" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Import" metaref = "7327" attributes = "namespace location" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="import.bmp"></regnode>
			<constraint name="ValidWSML::ImportPartCardinality221" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Definitions" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Import, has to match 1.</dispname>
			</constraint>
			<attrdef name="location" metaref = "7328" valuetype = "string" defvalue = "">
			</attrdef>
			<attrdef name="namespace" metaref = "7329" valuetype = "string" defvalue = "">
			</attrdef>
			<role name = "WSML::Definitions" metaref = "7330" kind = "WSML::Definitions"></role>
			<role name = "WSML::Documentation" metaref = "7331" kind = "WSML::Documentation"></role>
			<aspect name = "ServiceDefinition" metaref = "4888" attributes = "namespace location" >
				<part metaref = "7332" role = "WSML::Definitions" primary = "yes" linked = "no"></part>
				<part metaref = "7333" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Input" metaref = "7334" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="input.bmp"></regnode>
			<constraint name="ValidWSML::InputMessagedstCardinality170" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::InputMessage ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::Input as &quot;dst&quot; over WSML::InputMessage, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7335" kind = "WSML::Documentation"></role>
			<aspect name = "ServiceDefinition" metaref = "4892" >
				<part metaref = "7336" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Message" metaref = "7337" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="message.bmp"></regnode>
			<role name = "WSML::Part" metaref = "7338" kind = "WSML::Part"></role>
			<aspect name = "ServiceDefinition" metaref = "4895" >
				<part metaref = "7339" role = "WSML::Part" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Messages" metaref = "1550" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="messages.bmp"></regnode>
			<role name = "WSML::Message" metaref = "7340" kind = "WSML::Message"></role>
			<aspect name = "ServiceDefinition" metaref = "4898" >
				<part metaref = "7341" role = "WSML::Message" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::NotificationOperation" metaref = "7342" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="notification.bmp"></regnode>
				<regnode name = "porticon" value ="operationport.gif"></regnode>
			<constraint name="ValidWSML::NotificationOperationPartCardinality222" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Output" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::NotificationOperation, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::OperationPartCardinality224" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Operation, has to match 0..1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7343" kind = "WSML::Documentation"></role>
			<role name = "WSML::FaultMessage" metaref = "7344" kind = "WSML::FaultMessage"></role>
			<role name = "WSML::InputMessage" metaref = "7345" kind = "WSML::InputMessage"></role>
			<role name = "WSML::MessageRef" metaref = "7346" kind = "WSML::MessageRef"></role>
			<role name = "WSML::Output" metaref = "7347" kind = "WSML::Output"></role>
			<role name = "WSML::OutputMessage" metaref = "7348" kind = "WSML::OutputMessage"></role>
			<aspect name = "ServiceDefinition" metaref = "4906" >
				<part metaref = "7349" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7350" role = "WSML::FaultMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7351" role = "WSML::InputMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7352" role = "WSML::MessageRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7353" role = "WSML::Output" primary = "yes" linked = "no"></part>
				<part metaref = "7354" role = "WSML::OutputMessage" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::OneWayOperation" metaref = "7355" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="oneway.gif"></regnode>
				<regnode name = "porticon" value ="operationport.gif"></regnode>
			<constraint name="ValidWSML::OneWayOperationPartCardinality223" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Input" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::OneWayOperation, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::OperationPartCardinality224" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Operation, has to match 0..1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7356" kind = "WSML::Documentation"></role>
			<role name = "WSML::FaultMessage" metaref = "7357" kind = "WSML::FaultMessage"></role>
			<role name = "WSML::Input" metaref = "7358" kind = "WSML::Input"></role>
			<role name = "WSML::InputMessage" metaref = "7359" kind = "WSML::InputMessage"></role>
			<role name = "WSML::MessageRef" metaref = "7360" kind = "WSML::MessageRef"></role>
			<role name = "WSML::OutputMessage" metaref = "7361" kind = "WSML::OutputMessage"></role>
			<aspect name = "ServiceDefinition" metaref = "4919" >
				<part metaref = "7362" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7363" role = "WSML::FaultMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7364" role = "WSML::Input" primary = "yes" linked = "no"></part>
				<part metaref = "7365" role = "WSML::InputMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7366" role = "WSML::MessageRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7367" role = "WSML::OutputMessage" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Output" metaref = "7368" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="output.bmp"></regnode>
			<constraint name="ValidWSML::OutputMessagedstCardinality172" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::OutputMessage ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::Output as &quot;dst&quot; over WSML::OutputMessage, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7369" kind = "WSML::Documentation"></role>
			<aspect name = "ServiceDefinition" metaref = "4927" >
				<part metaref = "7370" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Port" metaref = "7371" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="wsdlport.bmp"></regnode>
				<regnode name = "porticon" value ="port.gif"></regnode>
			<constraint name="ValidWSML::PortBindingdstCardinality174" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::PortBinding ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::Port as &quot;dst&quot; over WSML::PortBinding, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::PortPartCardinality225" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::ExtensiblePort" ) -> size + self.parts( "WSML::SOAPAddress" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Port, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::PortPartCardinality226" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Port, has to match 0..1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7372" kind = "WSML::Documentation"></role>
			<role name = "WSML::SOAPAddress" metaref = "7373" kind = "WSML::SOAPAddress"></role>
			<aspect name = "ServiceDefinition" metaref = "6308" >
				<part metaref = "7374" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7375" role = "WSML::SOAPAddress" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::PortType" metaref = "7376" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="porttype.bmp"></regnode>
			<constraint name="ValidWSML::PortTypePartCardinality227" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::PortType, has to match 0..1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7377" kind = "WSML::Documentation"></role>
			<role name = "WSML::NotificationOperation" metaref = "7378" kind = "WSML::NotificationOperation"></role>
			<role name = "WSML::OneWayOperation" metaref = "7379" kind = "WSML::OneWayOperation"></role>
			<role name = "WSML::RequestResponseOperation" metaref = "7380" kind = "WSML::RequestResponseOperation"></role>
			<role name = "WSML::SolicitResponseOperation" metaref = "7381" kind = "WSML::SolicitResponseOperation"></role>
			<aspect name = "ServiceDefinition" metaref = "4934" >
				<part metaref = "7382" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7383" role = "WSML::NotificationOperation" primary = "yes" linked = "yes"></part>
				<part metaref = "7384" role = "WSML::OneWayOperation" primary = "yes" linked = "yes"></part>
				<part metaref = "7385" role = "WSML::RequestResponseOperation" primary = "yes" linked = "yes"></part>
				<part metaref = "7386" role = "WSML::SolicitResponseOperation" primary = "yes" linked = "yes"></part>
			</aspect>
		</model>
		<model name = "WSML::RequestResponseOperation" metaref = "7387" attributes = "parameterOrder" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="requestresponse.bmp"></regnode>
				<regnode name = "porticon" value ="operationport.gif"></regnode>
			<constraint name="ValidWSML::OperationPartCardinality224" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Operation, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::RequestResponseOperationPartCardinality228" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Input" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::RequestResponseOperation, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::RequestResponseOperationPartCardinality229" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Output" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::RequestResponseOperation, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7388" kind = "WSML::Documentation"></role>
			<role name = "WSML::Fault" metaref = "7389" kind = "WSML::Fault"></role>
			<role name = "WSML::FaultMessage" metaref = "7390" kind = "WSML::FaultMessage"></role>
			<role name = "WSML::Input" metaref = "7391" kind = "WSML::Input"></role>
			<role name = "WSML::InputMessage" metaref = "7392" kind = "WSML::InputMessage"></role>
			<role name = "WSML::MessageRef" metaref = "7393" kind = "WSML::MessageRef"></role>
			<role name = "WSML::Output" metaref = "7394" kind = "WSML::Output"></role>
			<role name = "WSML::OutputMessage" metaref = "7395" kind = "WSML::OutputMessage"></role>
			<aspect name = "ServiceDefinition" metaref = "4948" attributes = "parameterOrder" >
				<part metaref = "7396" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7397" role = "WSML::Fault" primary = "yes" linked = "no"></part>
				<part metaref = "7398" role = "WSML::FaultMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7399" role = "WSML::Input" primary = "yes" linked = "no"></part>
				<part metaref = "7400" role = "WSML::InputMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7401" role = "WSML::MessageRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7402" role = "WSML::Output" primary = "yes" linked = "no"></part>
				<part metaref = "7403" role = "WSML::OutputMessage" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::SOAPHeader" metaref = "7404" attributes = "use required encodingStyle namespace" >
				<regnode name = "namePosition" value ="4"></regnode>
			<constraint name="ValidWSML::HeaderMessagedstCardinality166" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::HeaderMessage ) -> size in
                     (dstCount <= 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::SOAPHeaders as &quot;dst&quot; over WSML::HeaderMessage, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::HeaderPartdstCardinality168" eventmask = "0x800" depth = "1" priority = "1">
				<![CDATA[let dstCount = self.attachingConnections( "src", WSML::HeaderPart ) -> size in
                     (dstCount = 1)]]>
				<dispname>Multiplicity of objects, which are associated to WSML::SOAPHeaders as &quot;dst&quot; over WSML::HeaderPart, has to match 1.</dispname>
			</constraint>
			<attrdef name="namespace" metaref = "7405" valuetype = "string" defvalue = "">
			</attrdef>
			<role name = "WSML::SOAPHeaderFault" metaref = "7406" kind = "WSML::SOAPHeaderFault"></role>
			<aspect name = "ServiceDefinition" metaref = "4959" attributes = "use required encodingStyle namespace" >
				<part metaref = "7407" role = "WSML::SOAPHeaderFault" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Schema" metaref = "7408" attributes = "targetNamespace" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="schema.bmp"></regnode>
			<attrdef name="targetNamespace" metaref = "7409" valuetype = "string" defvalue = "">
			</attrdef>
			<role name = "WSML::Attribute" metaref = "7410" kind = "WSML::Attribute"></role>
			<role name = "WSML::Element" metaref = "7411" kind = "WSML::Element"></role>
			<role name = "WSML::SchemaImport" metaref = "7412" kind = "WSML::SchemaImport"></role>
			<role name = "WSML::SchemaReference" metaref = "7413" kind = "WSML::SchemaReference"></role>
			<aspect name = "ServiceDefinition" metaref = "4966" attributes = "targetNamespace" >
				<part metaref = "7414" role = "WSML::Attribute" primary = "yes" linked = "no"></part>
				<part metaref = "7415" role = "WSML::Element" primary = "yes" linked = "no"></part>
				<part metaref = "7416" role = "WSML::SchemaImport" primary = "yes" linked = "no"></part>
				<part metaref = "7417" role = "WSML::SchemaReference" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::SchemaBuiltins" metaref = "7418" >
				<regnode name = "namePosition" value ="4"></regnode>
			<role name = "WSML::AtomicType" metaref = "7419" kind = "WSML::AtomicType"></role>
			<aspect name = "ServiceDefinition" metaref = "4972" >
				<part metaref = "7420" role = "WSML::AtomicType" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::SchemaImport" metaref = "7421" attributes = "id namespace schemaLocation" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="schemareference.gif"></regnode>
				<regnode name = "icon" value ="schemaimport.gif"></regnode>
			<constraint name="ValidWSML::SchemaReferencePartCardinality230" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Schema" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::SchemaReference, has to match 1.</dispname>
			</constraint>
			<attrdef name="namespace" metaref = "7422" valuetype = "string" defvalue = "">
			</attrdef>
			<role name = "WSML::Schema" metaref = "7423" kind = "WSML::Schema"></role>
			<aspect name = "ServiceDefinition" metaref = "4976" attributes = "id namespace schemaLocation" >
				<part metaref = "7424" role = "WSML::Schema" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::SchemaReference" metaref = "7425" attributes = "id schemaLocation" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="schemareference.gif"></regnode>
			<constraint name="ValidWSML::SchemaReferencePartCardinality230" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Schema" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::SchemaReference, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::Schema" metaref = "7426" kind = "WSML::Schema"></role>
			<aspect name = "ServiceDefinition" metaref = "4979" attributes = "id schemaLocation" >
				<part metaref = "7427" role = "WSML::Schema" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Service" metaref = "7428" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="service.bmp"></regnode>
			<role name = "WSML::BindingRef" metaref = "7429" kind = "WSML::BindingRef"></role>
			<role name = "WSML::Port" metaref = "7430" kind = "WSML::Port"></role>
			<role name = "WSML::PortBinding" metaref = "7431" kind = "WSML::PortBinding"></role>
			<aspect name = "ServiceDefinition" metaref = "6398" >
				<part metaref = "7432" role = "WSML::BindingRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7433" role = "WSML::Port" primary = "yes" linked = "yes"></part>
				<part metaref = "7434" role = "WSML::PortBinding" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::SolicitResponseOperation" metaref = "1234" attributes = "parameterOrder" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="solicitresponse.bmp"></regnode>
				<regnode name = "porticon" value ="operationport.gif"></regnode>
			<constraint name="ValidWSML::OperationPartCardinality224" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Operation, has to match 0..1.</dispname>
			</constraint>
			<constraint name="ValidWSML::SolicitResponseOperationPartCardinality231" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Input" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::SolicitResponseOperation, has to match 1.</dispname>
			</constraint>
			<constraint name="ValidWSML::SolicitResponseOperationPartCardinality232" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Output" ) -> size in
                     (partCount = 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::SolicitResponseOperation, has to match 1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7435" kind = "WSML::Documentation"></role>
			<role name = "WSML::Fault" metaref = "7436" kind = "WSML::Fault"></role>
			<role name = "WSML::FaultMessage" metaref = "7437" kind = "WSML::FaultMessage"></role>
			<role name = "WSML::Input" metaref = "7438" kind = "WSML::Input"></role>
			<role name = "WSML::InputMessage" metaref = "7439" kind = "WSML::InputMessage"></role>
			<role name = "WSML::MessageRef" metaref = "7440" kind = "WSML::MessageRef"></role>
			<role name = "WSML::Output" metaref = "7441" kind = "WSML::Output"></role>
			<role name = "WSML::OutputMessage" metaref = "7442" kind = "WSML::OutputMessage"></role>
			<aspect name = "ServiceDefinition" metaref = "4989" attributes = "parameterOrder" >
				<part metaref = "7443" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7444" role = "WSML::Fault" primary = "yes" linked = "no"></part>
				<part metaref = "7445" role = "WSML::FaultMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7446" role = "WSML::Input" primary = "yes" linked = "no"></part>
				<part metaref = "7447" role = "WSML::InputMessage" primary = "yes" linked = "no"></part>
				<part metaref = "7448" role = "WSML::MessageRef" primary = "yes" kindaspect = "ServiceDefinition" linked = "no"></part>
				<part metaref = "7449" role = "WSML::Output" primary = "yes" linked = "no"></part>
				<part metaref = "7450" role = "WSML::OutputMessage" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<model name = "WSML::Types" metaref = "7451" >
				<regnode name = "namePosition" value ="4"></regnode>
				<regnode name = "icon" value ="types.bmp"></regnode>
			<constraint name="ValidWSML::TypesPartCardinality233" eventmask = "0x0" depth = "1" priority = "1">
				<![CDATA[let partCount = self.parts( "WSML::Documentation" ) -> size in
                     (partCount <= 1)]]>
				<dispname>Multiplicity of parts, which are contained by WSML::Types, has to match 0..1.</dispname>
			</constraint>
			<role name = "WSML::Documentation" metaref = "7452" kind = "WSML::Documentation"></role>
			<role name = "WSML::Schema" metaref = "7453" kind = "WSML::Schema"></role>
			<aspect name = "ServiceDefinition" metaref = "5000" >
				<part metaref = "7454" role = "WSML::Documentation" primary = "yes" linked = "no"></part>
				<part metaref = "7455" role = "WSML::Schema" primary = "yes" linked = "no"></part>
			</aspect>
		</model>
		<folder name = "PICML::ComponentAnalyses" metaref = "1896"  rootobjects = "PICML::BenchmarkAnalysis" >
		</folder>
		<folder name = "PICML::ComponentBuild" metaref = "1897"  rootobjects = "PICML::MPC" >
		</folder>
		<folder name = "PICML::ComponentImplementations" metaref = "1898"  rootobjects = "PICML::ComponentImplementationContainer" >
			<constraint name="UniqueComponentImplementations" eventmask = "0x0" depth = "1" priority = "2">
				<![CDATA[let artifacts = self.models(ComponentImplementationContainer) in
   artifacts->isUnique (i : ComponentImplementationContainer | i.name.trim())]]>
				<dispname>ComponentImplementationContainers should have unique names</dispname>
			</constraint>
		</folder>
		<folder name = "PICML::ComponentPackages" metaref = "1899"  rootobjects = "PICML::PackageContainer" >
		</folder>
		<folder name = "PICML::ComponentTypes" metaref = "1900"  rootobjects = "PICML::ComponentContainer" >
		</folder>
		<folder name = "PICML::DeploymentPlans" metaref = "1901"  rootobjects = "PICML::DeploymentPlan" >
		</folder>
		<folder name = "PICML::ImplementationArtifacts" metaref = "1903"  rootobjects = "PICML::ArtifactContainer" >
		</folder>
		<folder name = "PICML::InterfaceDefinitions" metaref = "1904"  rootobjects = "PICML::File" >
			<constraint name="UniqueGlobalDeclNames" eventmask = "0x0" depth = "0" priority = "1">
				<![CDATA[allFileScopeDecls ()->forAll (
          x, y : gme::FCO | x <> y and (not x.isTypeOf (Package) or not y.isTypeOf (Package)) implies x.name <> y.name
          )]]>
				<dispname>Declarations at global scope must have unique names unless they are Packages</dispname>
			</constraint>
		</folder>
		<folder name = "PICML::PackageConfigurations" metaref = "1905"  rootobjects = "PICML::PackageConfigurationContainer" >
		</folder>
		<folder name = "PICML::PathDiagrams" metaref = "3173"  rootobjects = "PICML::Paths" >
		</folder>
		<folder name = "PICML::PredefinedTypes" metaref = "1906"  rootobjects = "PICML::Boolean PICML::Byte PICML::GenericObject PICML::GenericValue PICML::GenericValueObject PICML::LongInteger PICML::RealNumber PICML::ShortInteger PICML::String PICML::TypeEncoding PICML::TypeKind" >
		</folder>
		<folder name = "PICML::Targets" metaref = "1907"  rootobjects = "PICML::Domain" >
		</folder>
		<folder name = "PICML::TopLevelPackages" metaref = "1908"  rootobjects = "PICML::TopLevelPackageContainer" >
		</folder>
		<folder name = "PICML::WorkerLibraries" metaref = "6522"  rootobjects = "PICML::WorkerLibrary" >
		</folder>
	</folder>
</paradigm>
