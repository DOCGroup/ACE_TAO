/*
 *  @file: fco_utils.h
 *
 *  Inline methods for simple BON class operations
 *
 *  @author: Emre Turkay <emre.turkay@vanderbilt.edu>
 */

#ifndef _FCO_UTILS_H_
#define _FCO_UTILS_H_

#include "BON.h"
#include "BONImpl.h"

#include <iostream>
#include <string>

// returns the title attribute of given fco
template<class FCO_CLASS> inline std::string
title(FCO_CLASS& fco)
{
	std::string title_ = fco->getAttribute("title")->getStringValue();
	if (title_.size() == 0)
		return fco->getName();
	else
		return title_;
}

// returns the description attribute of given fco
template<class FCO_CLASS> inline std::string
description(FCO_CLASS& fco)
{
	return fco->getAttribute("description")->getStringValue();
}

// transforms a given string into C doublequote valid form.
inline std::string
cpp_string(const std::string& str)
{
	std::string result;
	for (size_t i=0; i < str.size(); ++i) {
		switch (str[i]) {
		case '\n':
			result += std::string("\\n");
			break;
		case '"':
			result += std::string("\\\"");
			break;
		case '\\':
			result += std::string("\\\\");
			break;
		default:
			result += str[i];
		}
		if (i && (i % 80 == 0))
			result += std::string("\"\\\n\"");
	}
	return result;
}

// returns a -unique- function name for the given fco
inline std::string
get_func_name(const BON::FCO& object)
{
	std::string func_name = object->getID();
	std::replace(func_name.begin(), func_name.end(), '-', '_');
	func_name = std::string("rule_") + func_name;
	return func_name;
}

// returns a function name for the given fco id
inline std::string
get_func_name(const std::string& id)
{
	std::string func_name = id;
	std::replace(func_name.begin(), func_name.end(), '-', '_');
	func_name = std::string("rule_") + func_name;
	return func_name;
}

// prints out a file header, stating the file is generated.  used for both c++ html files.
inline void
generated_file_header(std::ostream& os, const char* section_start, const char* section_end)
{
	os << section_start << std::endl
	   << "  This file is automatically generated by the OCML tool.\n"
	   << "  Do not edit this file, all changes to this file will be erased.\n"
	   << section_end << std::endl << std::endl;
}

// returns a given option's path in the form of:
//   ["Some_Category"]["Some_Other_Category"]["Some_Option"]
inline std::string
option_path(BON::FCO& fco)
{
	return
		(BON::FCO(fco->getParent()) ? option_path(BON::FCO(fco->getParent())) : std::string())+
		std::string("[\"") + fco->getName() + std::string("\"]");
}

// returns the referenced fco by a reference connection end
inline BON::FCO
get_ref(BON::ConnectionEnd obj)
{
	return BON::Reference(obj)->getReferred();
}

// functor, used to sort FCOs by their names
struct lt_fco {
	bool operator()(BON::FCO fco1, BON::FCO fco2) const
	{
		return (title(fco1) < title(fco2));
	}
};

#endif // _FCO_UTILS_H_
