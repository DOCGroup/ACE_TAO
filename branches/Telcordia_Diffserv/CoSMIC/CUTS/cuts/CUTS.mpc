// $Id$

//=============================================================================
// PROJECT : CUTS_stub
//=============================================================================

project(CUTS_stub): rt_server, cuts_client_dnc, ciao_events_base_dnc {
  sharedname     = CUTS_stub

  idlflags      += -Wb,export_macro=CUTS_STUB_Export \
                   -Wb,export_include=CUTS_stub_export.h \
                   -I $(CUTS_ROOT)

  dynamicflags   = CUTS_STUB_BUILD_DLL

  IDL_Files {
    CUTS.idl
    performance.idl
    Events.idl
  }

  Header_Files {

  }

  Source_Files {
    CUTSC.cpp
    CUTSS.cpp
    performanceC.cpp
    performanceS.cpp
    EventsC.cpp
    EventsS.cpp
    
    Benchmark_Agent_i.cpp
    IDL_Streams.cpp
  }
}

//=============================================================================
// PROJECT : CUTS_exec
//=============================================================================

project (CUTS_exec) : rt_server, cuts_component_dnc {
  after     += CUTS_svnt
  sharedname = CUTS_exec
  libs      += CUTS_stub

  idlflags  +=  -Wb,export_macro=CUTS_EXEC_Export \
                -Wb,export_include=CUTS_exec_export.h

  dynamicflags = CUTS_EXEC_BUILD_DLL

  IDL_Files {

  }

  Source_Files {
    CCM_CoWorkEr.cpp
  }

  Template_Files {
    CCM_CoWorkEr_T.cpp
    CCM_Event_Handler_T.cpp
    CCM_Event_Producer_T.cpp
    CCM_Events_T.cpp
    CCM_Factory_T.cpp
  }
}

//=============================================================================
// PROJECT : CUTS
//=============================================================================

project (CUTS) : cutslib {
  sharedname = CUTS

  dynamicflags += CUTS_BUILD_DLL

  after += CUTS_Utils
  after -= CUTS

  libs += CUTS_Utils
  libs -= CUTS

  Header_Files {
    config.h
    CUTS_export.h
    WML_Macros.h
  }

  Source_Files {
    Action.cpp
    Action_Iterator.cpp
    ActivationRecord.cpp
    Benchmark_Agent.cpp
    Component_Metric.cpp
    Counter.cpp
    Event_Guard.cpp
    Event_Handler.cpp
    Event_Handler_Message.cpp
    Host_Table.cpp
    Operation_Measurement.cpp
    PortAgent.cpp
    Port_Measurement.cpp
    Port_Measurement_Pool.cpp
    Port_Metric.cpp
    Component_Registry.cpp
    Testing_Service.cpp
    Time.cpp
    Time_Metric.cpp
    Time_Measurement.cpp
    System_Metric.cpp
    System_Metrics_Visitor.cpp
    Worker.cpp
    Worker_Library.cpp
    Worker_Measurement.cpp
    XML_System_Metrics_Visitor.cpp
  }

  Template_Files {
    Action_T.cpp
    Action_Iterator_T.cpp
    Activation_Record_T.cpp
    Async_Event_Handler_T.cpp
    Auto_Release_Ptr.cpp
    Counter_T.cpp
    Event_Guard_T.cpp
    Event_Handler_T.cpp
    Event_Handler_Manager_T.cpp
    Trigger_T.cpp
    Sync_Event_Handler_T.cpp
    Worker_T.cpp
  }
}
