// -*- IDL -*-

//=============================================================================
/**
 * @file    CUTS.idl
 *
 * $Id$
 *
 * This file contains the information shared between all components in
 * Component Workload Emulator (CoWorkEr) Utilization Test Suite (CUTS).
 *
 * @author James H. Hill <hillj@isis.vanderbilt.edu>
 */
//=============================================================================

#ifndef _CUTS_IDL_
#define _CUTS_IDL_

#include "cuts/performance.idl"
#include <Components.idl>

module CUTS
{
  exception Binding_Failed        { };
  exception ID_Not_Found          { };
  exception Operation_Failed      { };
  exception Registration_Failed   { };
  exception Registration_Limit    { };

  // Forward decl.
  interface Benchmark_Agent;

  //===========================================================================
  /**
   *
   */
  //===========================================================================

  struct Component_Registration
  {
    /// Benchmark agent of the component.
    Benchmark_Agent agent;

    /// UUID of the CoWorkEr.
    string name;

    /// IP address of the CoWorkEr.
    string ipaddr;

    /// Name of the host with the CoWorkEr.
    string hostname;
  };

  //===========================================================================
  /**
   * @struct Path_Element
   */
  //===========================================================================

  struct Path_Element
  {
    /// UUID of the component.
    string node;

    /// Name of the source port.
    string src;

    /// Name of the destination port.
    string dst;
  };

  /// Type definition for a path sequence.
  typedef sequence <Path_Element> Path_Sequence;

  //===========================================================================
  /**
   * @interface Path_Measurement
   */
  //===========================================================================

  interface Path_Measurement
  {
    const unsigned short BPF_TRANSIT = 1;
    const unsigned short BPF_PROCESS = 2;
    const unsigned short BPF_BOTH    = 3;

    long bind_to_path (in Path_Sequence path, in unsigned short flags)
      raises (Binding_Failed);

    void unbind_to_path (in long path_id)
      raises (ID_Not_Found);

    Event_Time_Info execution_time (in long path_id)
      raises (ID_Not_Found, Operation_Failed);
  };

  //===========================================================================
  /**
   * @interface BDC_Control_Handle
   */
  //===========================================================================

  interface BDC_Control_Handle
  {
    void collect_performance_data ();
  };

  //===========================================================================
  /**
   * @interface Benchmark_Agent
   */
  //===========================================================================

  interface Benchmark_Agent
  {
    /// Get the performance data from the agent.
    Benchmark_Data collect_performance_data ();
  };

  //===========================================================================
  /**
   * @interface Testing_Service
   */
  //===========================================================================

  interface Testing_Service
  {
    long register_component (in Component_Registration creg)
      raises (Registration_Failed,
              Registration_Limit);

    void unregister_component (in Component_Registration creg)
      raises (ID_Not_Found);
  };
};

#endif  // !defined _CUTS_IDL_
