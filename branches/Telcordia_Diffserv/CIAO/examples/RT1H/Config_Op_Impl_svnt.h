// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_GLUE_SESSION_CONFIG_OP_IMPL_SVNT_H
#define CIAO_GLUE_SESSION_CONFIG_OP_IMPL_SVNT_H

#include /**/ "ace/pre.h"

#include "Config_Op_ImplEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Container_Base.h"
#include "ciao/Context_Impl_T.h"
#include "ciao/Servant_Impl_T.h"
#include "ciao/Home_Servant_Impl_T.h"

#include "Config_OpS.h"

namespace TSCE
{
  namespace CIDL_Config_Op_Impl
  {
    class Config_Op_Servant;

    class CONFIG_OP_IMPL_SVNT_Export Config_Op_Context
      : public virtual CIAO::Context_Impl<
          ::TSCE::CCM_Config_Op_Context,
          Config_Op_Servant,
          ::TSCE::Config_Op,
          ::TSCE::Config_Op_var
        >
    {
      public:
      // We will allow the servant glue code we generate to access our state.
      friend class Config_Op_Servant;

      Config_Op_Context (
        ::Components::CCMHome_ptr h,
        ::CIAO::Session_Container *c,
        Config_Op_Servant *sv);

      virtual ~Config_Op_Context (void);

      // Operations for Config_Op receptacles and event sources,
      // defined in ::TSCE::CCM_Config_Op_Context.

      virtual void
      push_command (
        ::TSCE::Command_Event *ev
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      virtual ::CUTS::Testing_Service_ptr
      get_connection_cuts_testing_service (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      // CIAO-specific.

      static Config_Op_Context *
      _narrow (
        ::Components::SessionContext_ptr p
        ACE_ENV_ARG_DECL_WITH_DEFAULTS);

      protected:
      // Methods that manage this component's connections and consumers.

      virtual ::Components::Cookie *
      subscribe_command (
        ::TSCE::Command_EventConsumer_ptr c
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::ExceededConnectionLimit));

      // CIAO-specific.
      ::Components::Cookie *
      subscribe_command_generic (
        ::Components::EventConsumerBase_ptr c
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::ExceededConnectionLimit));

      virtual ::TSCE::Command_EventConsumer_ptr
      unsubscribe_command (
        ::Components::Cookie *ck
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidConnection));

      virtual void
      connect_cuts_testing_service (
        ::CUTS::Testing_Service_ptr
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::AlreadyConnected,
                       ::Components::InvalidConnection));

      virtual ::CUTS::Testing_Service_ptr
      disconnect_cuts_testing_service (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::NoConnection));

      protected:
      ACE_Active_Map_Manager<
      ::TSCE::Command_EventConsumer_var>
      ciao_publishes_command_map_;

      ACE_Active_Map_Manager<
      ::Components::EventConsumerBase_var>
      ciao_publishes_command_generic_map_;

      // Simplex cuts_testing_service connection.
      ::CUTS::Testing_Service_var
      ciao_uses_cuts_testing_service_;
    };

    class CONFIG_OP_IMPL_SVNT_Export Config_Op_Servant
      : public virtual CIAO::Servant_Impl<
          POA_TSCE::Config_Op,
          ::TSCE::CCM_Config_Op,
          Config_Op_Context
        >
    {
      public:

      typedef ::TSCE::CCM_Config_Op _exec_type;

      Config_Op_Servant (
        ::TSCE::CCM_Config_Op_ptr executor,
        ::Components::CCMHome_ptr h,
        const char *ins_name,
        ::CIAO::Home_Servant_Impl_Base *hs,
        ::CIAO::Session_Container *c,
        ::CIAO::REC_POL_MAP &rec_pol_map);

      virtual ~Config_Op_Servant (void);

      virtual void
      set_attributes (
        const ::Components::ConfigValues &descr
        ACE_ENV_ARG_DECL);

      // Supported operations.

      // Public port operations.

      virtual ::Components::Cookie *
      subscribe_command (
        ::TSCE::Command_EventConsumer_ptr c
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::ExceededConnectionLimit));

      // CIAO-specific.
      ::Components::Cookie *
      subscribe_command_generic (
        ::Components::EventConsumerBase_ptr c
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::ExceededConnectionLimit));

      virtual ::TSCE::Command_EventConsumer_ptr
      unsubscribe_command (
        ::Components::Cookie *ck
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidConnection));

      // Servant class for the assessment consumer.
      class CONFIG_OP_IMPL_SVNT_Export Assessment_EventConsumer_assessment_Servant
      : public virtual POA_TSCE::Assessment_EventConsumer
      {
        public:
        Assessment_EventConsumer_assessment_Servant (
          ::TSCE::CCM_Config_Op_ptr executor,
          ::TSCE::CCM_Config_Op_Context_ptr c);

        virtual ~Assessment_EventConsumer_assessment_Servant (void);

        virtual void
        push_Assessment_Event (
          ::TSCE::Assessment_Event *evt
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Inherited from ::Components::EventConsumerBase.
        virtual void
        push_event ( ::Components::EventBase *ev
                    ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::BadEventType));

        // CIAO-specific in ::Components::EventConsumerBase.
        virtual CORBA::Boolean
        ciao_is_substitutable (
          const char *event_repo_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Get component implementation.
        virtual CORBA::Object_ptr
        _get_component (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        protected:
        ::TSCE::CCM_Config_Op_var
        executor_;

        ::TSCE::CCM_Config_Op_Context_var
        ctx_;
      };

      virtual ::TSCE::Assessment_EventConsumer_ptr
      get_consumer_assessment (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      // Servant class for the status consumer.
      class CONFIG_OP_IMPL_SVNT_Export Status_EventConsumer_status_Servant
      : public virtual POA_TSCE::Status_EventConsumer
      {
        public:
        Status_EventConsumer_status_Servant (
          ::TSCE::CCM_Config_Op_ptr executor,
          ::TSCE::CCM_Config_Op_Context_ptr c);

        virtual ~Status_EventConsumer_status_Servant (void);

        virtual void
        push_Status_Event (
          ::TSCE::Status_Event *evt
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Inherited from ::Components::EventConsumerBase.
        virtual void
        push_event ( ::Components::EventBase *ev
                    ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::BadEventType));

        // CIAO-specific in ::Components::EventConsumerBase.
        virtual CORBA::Boolean
        ciao_is_substitutable (
          const char *event_repo_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Get component implementation.
        virtual CORBA::Object_ptr
        _get_component (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        protected:
        ::TSCE::CCM_Config_Op_var
        executor_;

        ::TSCE::CCM_Config_Op_Context_var
        ctx_;
      };

      virtual ::TSCE::Status_EventConsumer_ptr
      get_consumer_status (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      virtual void
      connect_cuts_testing_service (
        ::CUTS::Testing_Service_ptr c
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::AlreadyConnected,
                       ::Components::InvalidConnection));

      virtual ::CUTS::Testing_Service_ptr
      disconnect_cuts_testing_service (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::NoConnection));

      virtual ::CUTS::Testing_Service_ptr
      get_connection_cuts_testing_service (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      // Component attribute operations.

      // Operations for Receptacles interface.

      virtual ::Components::Cookie *
      connect (
        const char *name,
        CORBA::Object_ptr connection
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidName,
                       ::Components::InvalidConnection,
                       ::Components::AlreadyConnected,
                       ::Components::ExceededConnectionLimit));

      virtual CORBA::Object_ptr
      disconnect (
        const char *name,
        ::Components::Cookie *ck
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidName,
                       ::Components::InvalidConnection,
                       ::Components::CookieRequired,
                       ::Components::NoConnection));

      virtual ::Components::ReceptacleDescriptions *
      get_all_receptacles (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      // Operations for Events interface.

      virtual ::Components::Cookie *
      subscribe (
        const char *publisher_name,
        ::Components::EventConsumerBase_ptr subscriber
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidName,
                       ::Components::InvalidConnection,
                       ::Components::ExceededConnectionLimit));

      virtual ::Components::EventConsumerBase_ptr
      unsubscribe (
        const char *publisher_name,
        ::Components::Cookie *ck
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidName,
                       ::Components::InvalidConnection));

      virtual void
      connect_consumer (
        const char *emitter_name,
        ::Components::EventConsumerBase_ptr consumer
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidName,
                       ::Components::AlreadyConnected,
                       ::Components::InvalidConnection));

      virtual ::Components::EventConsumerBase_ptr
      disconnect_consumer (
        const char *source_name
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::InvalidName,
                       ::Components::NoConnection));

      virtual ::Components::PublisherDescriptions *
      get_all_publishers (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      virtual ::Components::EmitterDescriptions *
      get_all_emitters (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      // CIAO specific operations on the servant. 
      CORBA::Object_ptr
      get_facet_executor (
        const char *name
        ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      private:

      ::TSCE::Assessment_EventConsumer_var
      consumes_assessment_;

      ::TSCE::Status_EventConsumer_var
      consumes_status_;

      const char *ins_name_;

      private:

      void
      populate_port_tables (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      ::Components::EventConsumerBase_ptr
      get_consumer_assessment_i (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));

      ::Components::EventConsumerBase_ptr
      get_consumer_status_i (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC (( ::CORBA::SystemException));
    };

    class CONFIG_OP_IMPL_SVNT_Export Config_Op_Factory_Servant
      : public virtual
          ::CIAO::Home_Servant_Impl<
              ::POA_TSCE::Config_Op_Factory,
              ::TSCE::CCM_Config_Op_Factory,
              Config_Op_Servant
            >
    {
      public:

      Config_Op_Factory_Servant (
        ::TSCE::CCM_Config_Op_Factory_ptr exe,
        const char *ins_name,
        ::CIAO::Session_Container *c,
        ::CIAO::REC_POL_MAP &rec_pol_map);

      virtual ~Config_Op_Factory_Servant (void);

      // Home operations.
      // Home factory and finder operations.

      // Attribute operations.
    };

    extern "C" CONFIG_OP_IMPL_SVNT_Export ::PortableServer::Servant
    create_TSCE_Config_Op_Factory_Servant (
      ::Components::HomeExecutorBase_ptr p,
      CIAO::Session_Container *c,
      const char *ins_name,
      ::CIAO::REC_POL_MAP &rec_pol_map
      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
  }
}

#include /**/ "ace/post.h"

#endif /* CIAO_GLUE_SESSION_CONFIG_OP_IMPL_SVNT_H */

