// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "Web_Input_Adapter_exec.h"
#include "Plan_Deployment_exec.h"
#include "Component_Control_exec.h"
#include "web_common/web_common_impl.h"
#include "ciao/CIAO_common.h"
#include "tao/IFR_Client/IFR_BasicC.h"
#include "tao/ObjectIdListC.h"
#include "tao/ORB_Core.h"
#include "ace/ARGV.h"
#include "ace/Env_Value_T.h"
#include <string>

namespace
{
  // Environment variables that will be read by this executor class.
  ACE_Env_Value <const char*> CIAO_ROOT ("CIAO_ROOT", "");

  // Environment variables that will be put into the environment to be
  // read by JAWS Web Server or the web_input_adapter.cgi program
  const char * JAWS_DOCUMENT_ROOT =
    "JAWS_DOCUMENT_ROOT=%s/RACE/Input_Adapters/Web_Input_Adapter";
  const char * WEB_INPUT_ADAPTER_IOR = "WEB_INPUT_ADAPTER_IOR=%s";
  const char * PLAN_DEPLOYMENT_IOR = "PLAN_DEPLOYMENT_IOR=%s";
  const char * COMPONENT_CONTROL_IOR = "COMPONENT_CONTROL_IOR=%s";
  const char * IFR_SERVICE_ORBINITREF = "InterfaceRepositoryIOR=%s";
}

namespace CIAO
{
  namespace RACE
  {
    namespace CIDL_Web_Input_Adapter_Impl
    {
      //==================================================================
      // Component Executor Implementation Class:   Web_Input_Adapter_exec_i
      //==================================================================

      Web_Input_Adapter_exec_i::Web_Input_Adapter_exec_i (void)
        :
        plan_deployment_exec_i_ (new Plan_Deployment_exec_i (*this)),
        component_control_exec_i_ (new Component_Control_exec_i (*this))
      {
      }

      Web_Input_Adapter_exec_i::~Web_Input_Adapter_exec_i (void)
      {
        CORBA::release (this->context_);
        CORBA::release (this->plan_deployment_exec_i_);
        CORBA::release (this->component_control_exec_i_);
      }

      // Supported or inherited operations.

      // Attribute operations.

      char *
      Web_Input_Adapter_exec_i::ifr_service_ior (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ))
      {
        return CORBA::string_dup (ifr_service_ior_);
      }

      void
      Web_Input_Adapter_exec_i::ifr_service_ior (
        const char * ifr_service_ior
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        ::CORBA::SystemException
      ))
      {
        this->ifr_service_ior_ = CORBA::string_dup (ifr_service_ior);
      }

      // Port operations.

      void
      Web_Input_Adapter_exec_i::push_dance_depment (
          ::CIAO::RACE::Web_Deployment * e
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          ::CORBA::SystemException
        ))
      {
        ACE_DEBUG ((LM_DEBUG, "In Web_Input_Adapter_exec_i::push_dance_depment (%x)\n",
                   e));
        e->_add_ref ();
        this->last_obv_ = e;
        ACE_DEBUG ((LM_DEBUG, "Exit Web_Input_Adapter_exec_i::push_dance_depment (%x)\n",
                   e));
      }

      ::CIAO::RACE::CCM_Component_Control_ptr
      Web_Input_Adapter_exec_i::get_comp_control (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          ::CORBA::SystemException
        ))
      {
        return CCM_Component_Control::_duplicate (this->component_control_exec_i_);
      }

      ::CIAO::RACE::CCM_Plan_Deployment_ptr
      Web_Input_Adapter_exec_i::get_plan_depment (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          ::CORBA::SystemException
        ))
      {
        return CCM_Plan_Deployment::_duplicate (this->plan_deployment_exec_i_);
      }

      // Operations from Components::SessionComponent

      void
      Web_Input_Adapter_exec_i::set_session_context (
      ::Components::SessionContext_ptr ctx
      ACE_ENV_ARG_DECL)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        this->context_ =
        Web_Input_Adapter_Context::_narrow (
        ctx
        ACE_ENV_ARG_PARAMETER);
        ACE_CHECK;

        if (this->context_ == 0)
        {
          ACE_THROW (CORBA::INTERNAL ());
        }

        this->orb_ = this->context_->_ciao_the_Container()->the_ORB ();
      }

      void
      Web_Input_Adapter_exec_i::ciao_preactivate (
      ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Web_Input_Adapter_exec_i::ciao_postactivate (
      ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Web_Input_Adapter_exec_i::ccm_activate (
      ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        ACE_DEBUG ((LM_DEBUG, "Web_Input_Adapter_exec_i::ccm_activate \n"));

        TAO_OBV_REGISTER_FACTORY (
        ::OBV_CIAO::RACE::Web_Deployment_Factory,
        ::CIAO::RACE::Web_Deployment);

        // Guarantee the presence of an ORBInitRef for the
        // IFR Service.  This is to support the activities of
        // the Component Control facet.
        CORBA::Object_var repo_obj;
        {
          std::string repo_from ("");
          int repo_live = 0;
          CORBA::Repository_var repo;

          // Try to use the IOR from the ifr_service_ior component
          // attribute.  Register the referred-to object as an
          // ORBInitRef.  Keep track of whether or not the object
          // really is an IFR Service.
          if (this->ifr_service_ior_) {
            repo_from = "\"ifr_service_ior\" component attribute";
            ACE_TRY {
              repo_obj = this->orb_->string_to_object (this->ifr_service_ior_);
              repo = CORBA::Repository::_narrow (repo_obj.in ());
              if (! CORBA::is_nil (repo_obj.in ())) {
                this->orb_->register_initial_reference ("InterfaceRepository", repo_obj.in ());
                if (! CORBA::is_nil (repo.in ())) {
                  repo->lookup_id ("IDL:omg.org/CORBA/Object:1.0");
                  repo_live = 1;
                }
              }
            } ACE_CATCHANY {
              ACE_DEBUG ((LM_DEBUG,
                          "CORBA Exception on IFR access: %s\n",
                          ACE_ANY_EXCEPTION._info ().fast_rep ()));
            } ACE_ENDTRY;
          }

          // If the ifr_service_ior component attribute was unset or
          // didn't produce an object, then look for a command-line
          // setting for the IFR Service ORBInitRef.
          if (CORBA::is_nil (repo_obj.in ())) {
            ACE_TRY {
              repo_obj = this->orb_->resolve_initial_references ("InterfaceRepository");
              repo = CORBA::Repository::_narrow (repo_obj.in ());
              if (! CORBA::is_nil (repo_obj.in ())) {
                repo_from = "ORBInitRef";
                if (! CORBA::is_nil (repo.in ())) {
                  repo->lookup_id ("IDL:omg.org/CORBA/Object:1.0");
                  repo_live = 1;
                }
              }
            } ACE_CATCHANY {
              ACE_DEBUG ((LM_DEBUG,
                          "CORBA Exception on IFR access: %s\n",
                          ACE_ANY_EXCEPTION._info ().fast_rep ()));
            } ACE_ENDTRY;
          }

          // Inform the user of what happened
          if (repo_from == "")
            ACE_DEBUG ((LM_DEBUG,
                        "IFR Service IOR not found.\n"));
          else {
            ACE_DEBUG ((LM_DEBUG,
                        "IFR Service IOR obtained from %s\n",
                        repo_from.c_str ()));
            if (!repo_live)
              ACE_DEBUG ((LM_DEBUG,
                          "Problem with IFR Service IOR: %s\n",
                          CORBA::is_nil (repo_obj.in ()) ? "invalid IOR" :
                          CORBA::is_nil (repo.in ()) ? "IOR points to wrong service" :
                          "IFR Service dead or broken"));
          }
        }

        // Set up environment variables that will be read by JAWS
        // Web Server
        char env_buffer [BUFSIZ];
        ACE_OS::snprintf (env_buffer, BUFSIZ,
                          JAWS_DOCUMENT_ROOT,
                          (const char*) CIAO_ROOT);
        ACE_OS::putenv (ACE_OS::strdup (env_buffer));

        {
          // Set up environment variable for our own component IOR.
          // (This environment variable matters to the
          // Web_Input_Adapter_cgi implementation)
          CORBA::Object_var CCM_ref = this->context_->get_CCM_object ();
          CORBA::String_var component_ior =
            this->orb_->object_to_string (CCM_ref.in ());

          ACE_OS::snprintf (env_buffer, BUFSIZ,
                            WEB_INPUT_ADAPTER_IOR,
                            component_ior.in ());
          ACE_OS::putenv (ACE_OS::strdup (env_buffer));

          // Set up environment variable for the IOR of the
          // Plan_Deployment facet.
          Web_Input_Adapter_var narrowed_CCM_ref =
            Web_Input_Adapter::_narrow (CCM_ref.in ());
          Plan_Deployment_var plan_depment =
            narrowed_CCM_ref->provide_plan_depment ();
          CORBA::String_var plan_depment_ior =
            this->orb_->object_to_string (plan_depment.in ());

          ACE_OS::snprintf (env_buffer, BUFSIZ,
                            PLAN_DEPLOYMENT_IOR,
                            plan_depment_ior.in ());
          ACE_OS::putenv (ACE_OS::strdup (env_buffer));

          // Set up environment variable for the IOR of the Component
          // Control facet.
          Component_Control_var comp_control =
            narrowed_CCM_ref->provide_comp_control ();
          CORBA::String_var comp_control_ior =
            this->orb_->object_to_string (comp_control.in ());

          ACE_OS::snprintf (env_buffer, BUFSIZ,
                            COMPONENT_CONTROL_IOR,
                            comp_control_ior.in ());
          ACE_OS::putenv (ACE_OS::strdup (env_buffer));

          // Set up environment variable for the IOR of the IFR
          // Service.
          if (! CORBA::is_nil (repo_obj.in ())) {
            CORBA::String_var ifr_service_ior =
              this->orb_->object_to_string (repo_obj.in ());

            ACE_OS::snprintf (env_buffer, BUFSIZ,
                              IFR_SERVICE_ORBINITREF,
                              ifr_service_ior.in ());
            ACE_OS::putenv (ACE_OS::strdup (env_buffer));
          }
        }

        // Set up argv for JAWS Web Server
        ACE_ARGV argv ("HTTP_Server -p 80 "
                       "-n 20 "
                       "-i SYNCH "
                       "-t POOL "
                       "-b 50 "
                       "-f THR_NEW_LWP");

        // Initialize JAWS Web Server
        this->web_server_.init (argv.argc (), argv.argv ());

        // Obtain reference to the connect plan_ingress facet
        this->plan_ingress_ = this->context_->get_connection_ingress ();

        ACE_DEBUG ((LM_DEBUG, "exit Web_Input_Adapter_exec_i::ccm_activate\n"));
      }

      void
      Web_Input_Adapter_exec_i::ccm_passivate (
      ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Web_Input_Adapter_exec_i::ccm_remove (
      ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        ACE_DEBUG ((LM_DEBUG, "Web_Input_Adapter_exec_i::ccm_remove\n"));
        this->web_server_.fini ();
      }

      // Operations used by facet executors
      ::CIAO::RACE::Web_Deployment *
      Web_Input_Adapter_exec_i::process_plan (
      ::Deployment::DeploymentPlan & plan,
      ::Deployment::PackageConfiguration & pcd
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((CORBA::SystemException))
      {
        ACE_DEBUG ((LM_DEBUG, "Web_Input_Adapter_exec_i::process_plan\n"));

        ::CIAO::RACE::Plan_Actions plan_action_seq;

        /// Create a Plan_Action_seq structure of length 1.
        plan_action_seq.length (1);

        /// Now populate the Plan_Action_seq structure.

        /// @@ Right now, the action is hard-coded as DEPLOY. When we modify
        /// the web-input-adapter to tear-down string(s) using RACE, the
        /// code snippet below must also be modified.
        plan_action_seq [0].command = DEPLOY;
        plan_action_seq [0].plan = plan;
        plan_action_seq [0].package = pcd;

        this->last_obv_ = 0;
        if (! CORBA::is_nil (this->plan_ingress_.in ()))
        {
          this->plan_ingress_->analyze_plan (plan_action_seq);
        }
        if (this->last_obv_.in () != 0)
        {
          ACE_DEBUG ((LM_DEBUG, "Received Web_Deployment obv from RACE\n"));
          ACE_DEBUG ((LM_DEBUG, "Web_Deployment is at %x\n", last_obv_.in ()));
          ::OBV_CIAO::RACE::Web_Deployment_impl *i = dynamic_cast< ::OBV_CIAO::RACE::Web_Deployment_impl* > (last_obv_.in ());
          if (i) {
            ACE_DEBUG ((LM_DEBUG, "Web_Deployment_impl is at %x\n", i));
            i->plan ();
            ACE_DEBUG ((LM_DEBUG, "Accessed plan in Web_Deployment_impl\n"));
          } else {
            ACE_DEBUG ((LM_DEBUG, "Web_Deployment is not a Web_Deployment_impl\n", i));
          }
          this->last_obv_->plan ();
          ACE_DEBUG ((LM_DEBUG, "Accessed plan in Web_Deployment\n"));
          plan = this->last_obv_->plan ();
          ACE_DEBUG ((LM_DEBUG, "Took plan from in Web_Deployment\n"));
        }
        ACE_DEBUG ((LM_DEBUG, "Exit Web_Input_Adapter_exec_i::process_plan\n"));
        return this->last_obv_.ptr ();
      }

      //==================================================================
      // Home Executor Implementation Class:   Web_Input_Adapter_Home_exec_i
      //==================================================================

      Web_Input_Adapter_Home_exec_i::Web_Input_Adapter_Home_exec_i (void)
      {
      }

      Web_Input_Adapter_Home_exec_i::~Web_Input_Adapter_Home_exec_i (void)
      {
      }

      // Supported or inherited operations.

      // Home operations.

      // Factory and finder operations.

      // Attribute operations.

      // Implicit operations.

      ::Components::EnterpriseComponent_ptr
      Web_Input_Adapter_Home_exec_i::create (
      ACE_ENV_SINGLE_ARG_DECL)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::CCMException))
      {
        ::Components::EnterpriseComponent_ptr retval =
        ::Components::EnterpriseComponent::_nil ();

        ACE_NEW_THROW_EX (
        retval,
        Web_Input_Adapter_exec_i,
        CORBA::NO_MEMORY ());
        ACE_CHECK_RETURN (::Components::EnterpriseComponent::_nil ());

        return retval;
      }

      extern "C" WEB_INPUT_ADAPTER_EXEC_Export ::Components::HomeExecutorBase_ptr
      create_CIAO_RACE_Web_Input_Adapter_Home_Impl (void)
      {
        ::Components::HomeExecutorBase_ptr retval =
        ::Components::HomeExecutorBase::_nil ();

        ACE_NEW_RETURN (
        retval,
        Web_Input_Adapter_Home_exec_i,
        ::Components::HomeExecutorBase::_nil ());

        return retval;
      }
    }
  }
}
