// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_GLUE_SESSION_NODEAPPTEST_ROUNDTRIP_SVNT_H
#define CIAO_GLUE_SESSION_NODEAPPTEST_ROUNDTRIP_SVNT_H

#include /**/ "ace/pre.h"

#include "NodeAppTest_RoundTripEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Container_Base.h"
#include "ciao/Context_Impl_T.h"
#include "ciao/Servant_Impl_T.h"
#include "ciao/Home_Servant_Impl_T.h"

#include "NodeAppTest_RoundTripS.h"

namespace CIAO_FACET_NodeAppTest
{
  template <typename T>
  class LatencyTest_Servant_T
  : public virtual POA_NodeAppTest::LatencyTest
  {
    public:
    LatencyTest_Servant_T (
      ::NodeAppTest::CCM_LatencyTest_ptr executor,
      ::Components::CCMContext_ptr ctx);

    virtual ~LatencyTest_Servant_T (void);

    virtual ::CORBA::Long
    cube_long (
      ::CORBA::Long param
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Get component implementation.
    virtual CORBA::Object_ptr
    _get_component (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    protected:
    // Facet executor.
    ::NodeAppTest::CCM_LatencyTest_var executor_;

    // Context object.
    ::Components::CCMContext_var ctx_;
  };

  typedef LatencyTest_Servant_T<int> LatencyTest_Servant;
}

namespace CIDL_RoundTrip_Impl
{
  class NodeAppTest_RoundTrip_Servant;

  class NODEAPPTEST_ROUNDTRIP_SVNT_Export NodeAppTest_RoundTrip_Context
    : public virtual CIAO::Context_Impl<
        ::NodeAppTest::CCM_NodeAppTest_RoundTrip_Context,
        NodeAppTest_RoundTrip_Servant,
        ::NodeAppTest::NodeAppTest_RoundTrip,
        ::NodeAppTest::NodeAppTest_RoundTrip_var
      >
  {
    public:
    // We will allow the servant glue code we generate to access our state.
    friend class NodeAppTest_RoundTrip_Servant;

    NodeAppTest_RoundTrip_Context (
      ::Components::CCMHome_ptr h,
      ::CIAO::Session_Container *c,
      NodeAppTest_RoundTrip_Servant *sv);

    virtual ~NodeAppTest_RoundTrip_Context (void);

    // Operations for NodeAppTest_RoundTrip receptacles and event sources,
    // defined in ::NodeAppTest::CCM_NodeAppTest_RoundTrip_Context.

    // CIAO-specific.

    static NodeAppTest_RoundTrip_Context *
    _narrow (
      ::Components::SessionContext_ptr p
      ACE_ENV_ARG_DECL_WITH_DEFAULTS);

    protected:
    // Methods that manage this component's connections and consumers.

    protected:
  };

  class NODEAPPTEST_ROUNDTRIP_SVNT_Export NodeAppTest_RoundTrip_Servant
    : public virtual CIAO::Servant_Impl<
        POA_NodeAppTest::NodeAppTest_RoundTrip,
        ::NodeAppTest::CCM_NodeAppTest_RoundTrip,
        NodeAppTest_RoundTrip_Context
      >
  {
    public:

    typedef ::NodeAppTest::CCM_NodeAppTest_RoundTrip _exec_type;

    NodeAppTest_RoundTrip_Servant (
      ::NodeAppTest::CCM_NodeAppTest_RoundTrip_ptr executor,
      ::Components::CCMHome_ptr h,
      const char *ins_name,
      ::CIAO::Home_Servant_Impl_Base *hs,
      ::CIAO::Session_Container *c,
      ::CIAO::REC_POL_MAP &rec_pol_map);

    virtual ~NodeAppTest_RoundTrip_Servant (void);

    virtual void
    set_attributes (
      const ::Components::ConfigValues &descr
      ACE_ENV_ARG_DECL);

    // Supported operations.

    virtual ::CORBA::Long
    cube_long (
      ::CORBA::Long param
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Public port operations.

    virtual ::NodeAppTest::LatencyTest_ptr
    provide_facet_1 (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::NodeAppTest::LatencyTest_ptr
    provide_facet_2 (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Component attribute operations.

    // Operations for Receptacles interface.

    virtual ::Components::Cookie *
    connect (
      const char *name,
      CORBA::Object_ptr connection
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection,
                     ::Components::AlreadyConnected,
                     ::Components::ExceededConnectionLimit));

    virtual CORBA::Object_ptr
    disconnect (
      const char *name,
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection,
                     ::Components::CookieRequired,
                     ::Components::NoConnection));

    virtual ::Components::ReceptacleDescriptions *
    get_all_receptacles (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Operations for Events interface.

    virtual ::Components::Cookie *
    subscribe (
      const char *publisher_name,
      ::Components::EventConsumerBase_ptr subscriber
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection,
                     ::Components::ExceededConnectionLimit));

    virtual ::Components::EventConsumerBase_ptr
    unsubscribe (
      const char *publisher_name,
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection));

    virtual void
    connect_consumer (
      const char *emitter_name,
      ::Components::EventConsumerBase_ptr consumer
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::AlreadyConnected,
                     ::Components::InvalidConnection));

    virtual ::Components::EventConsumerBase_ptr
    disconnect_consumer (
      const char *source_name
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::NoConnection));

    virtual ::Components::PublisherDescriptions *
    get_all_publishers (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::Components::EmitterDescriptions *
    get_all_emitters (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // CIAO specific operations on the servant. 
    CORBA::Object_ptr
    get_facet_executor (
      const char *name
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    private:

    ::NodeAppTest::LatencyTest_var
    provide_facet_1_;

    ::NodeAppTest::LatencyTest_var
    provide_facet_2_;

    const char *ins_name_;

    private:

    void
    populate_port_tables (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    ::CORBA::Object_ptr
    provide_facet_1_i (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    ::CORBA::Object_ptr
    provide_facet_2_i (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));
  };

  class NODEAPPTEST_ROUNDTRIP_SVNT_Export NodeAppTest_RoundTripHome_Servant
    : public virtual
        ::CIAO::Home_Servant_Impl<
            ::POA_NodeAppTest::NodeAppTest_RoundTripHome,
            ::NodeAppTest::CCM_NodeAppTest_RoundTripHome,
            NodeAppTest_RoundTrip_Servant
          >
  {
    public:

    NodeAppTest_RoundTripHome_Servant (
      ::NodeAppTest::CCM_NodeAppTest_RoundTripHome_ptr exe,
      const char *ins_name,
      ::CIAO::Session_Container *c,
      ::CIAO::REC_POL_MAP &rec_pol_map);

    virtual ~NodeAppTest_RoundTripHome_Servant (void);

    // Home operations.
    // Home factory and finder operations.

    // Attribute operations.
  };

  extern "C" NODEAPPTEST_ROUNDTRIP_SVNT_Export ::PortableServer::Servant
  create_NodeAppTest_NodeAppTest_RoundTripHome_Servant (
    ::Components::HomeExecutorBase_ptr p,
    CIAO::Session_Container *c,
    const char *ins_name,
    ::CIAO::REC_POL_MAP &rec_pol_map
    ACE_ENV_ARG_DECL_WITH_DEFAULTS);
}

#include /**/ "ace/post.h"

#endif /* CIAO_GLUE_SESSION_NODEAPPTEST_ROUNDTRIP_SVNT_H */

