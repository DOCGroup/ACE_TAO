// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_GLUE_SESSION_TARGETMANAGER_SVNT_H
#define CIAO_GLUE_SESSION_TARGETMANAGER_SVNT_H

#include /**/ "ace/pre.h"

#include "TargetManagerEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Container_Base.h"
#include "ciao/Context_Impl_T.h"
#include "ciao/Servant_Impl_T.h"
#include "ciao/Home_Servant_Impl_T.h"

#include "TargetManagerS.h"

namespace CIAO_FACET_Deployment
{
  template <typename T>
  class TargetManager_Servant_T
  : public virtual POA_Deployment::TargetManager
  {
    public:
    TargetManager_Servant_T (
      ::Deployment::CCM_TargetManager_ptr executor,
      ::Components::CCMContext_ptr ctx);

    virtual ~TargetManager_Servant_T (void);

    virtual ::Deployment::Domain *
    getAllResources (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::Deployment::Domain *
    getAvailableResources (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual void
    commitResources (
      const ::Deployment::DeploymentPlan & plan
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Deployment::ResourceNotAvailable,
                     ::Deployment::PlanError));

    virtual void
    releaseResources (
      const ::Deployment::DeploymentPlan & argname
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual void
    updateDomain (
      const ::CORBA::StringSeq & elements,
      const ::Deployment::Domain & domainSubset,
      ::Deployment::DomainUpdateKind updateKind
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Get component implementation.
    virtual CORBA::Object_ptr
    _get_component (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    protected:
    // Facet executor.
    ::Deployment::CCM_TargetManager_var executor_;

    // Context object.
    ::Components::CCMContext_var ctx_;
  };

  typedef TargetManager_Servant_T<int> TargetManager_Servant;
}

namespace CIAO_FACET_CIAO
{
  template <typename T>
  class TargetManagerExt_Servant_T
  : public virtual POA_CIAO::TargetManagerExt
  {
    public:
    TargetManagerExt_Servant_T (
      ::CIAO::CCM_TargetManagerExt_ptr executor,
      ::Components::CCMContext_ptr ctx);

    virtual ~TargetManagerExt_Servant_T (void);

    virtual ::CORBA::Long
    get_pid (
      const char * component_uuid
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::CIAO::Host_Infos *
    get_host_cpu (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::CIAO::Component_Infos *
    get_component_cpu (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::CIAO::Host_NodeManager_seq *
    get_all_node_managers (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Get component implementation.
    virtual CORBA::Object_ptr
    _get_component (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    protected:
    // Facet executor.
    ::CIAO::CCM_TargetManagerExt_var executor_;

    // Context object.
    ::Components::CCMContext_var ctx_;
  };

  typedef TargetManagerExt_Servant_T<int> TargetManagerExt_Servant;
}

namespace CIDL_TargetManager_i
{
  class TargetManagerImpl_Servant;

  class TARGETMANAGER_SVNT_Export TargetManagerImpl_Context
    : public virtual CIAO::Context_Impl<
        ::CIAO::CCM_TargetManagerImpl_Context,
        TargetManagerImpl_Servant,
        ::CIAO::TargetManagerImpl,
        ::CIAO::TargetManagerImpl_var
      >
  {
    public:
    // We will allow the servant glue code we generate to access our state.
    friend class TargetManagerImpl_Servant;

    TargetManagerImpl_Context (
      ::Components::CCMHome_ptr h,
      ::CIAO::Session_Container *c,
      TargetManagerImpl_Servant *sv);

    virtual ~TargetManagerImpl_Context (void);

    // Operations for TargetManagerImpl receptacles and event sources,
    // defined in ::CIAO::CCM_TargetManagerImpl_Context.

    virtual void
    push_changes (
      ::CIAO::Domain_Changed_Event *ev
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // CIAO-specific.

    static TargetManagerImpl_Context *
    _narrow (
      ::Components::SessionContext_ptr p
      ACE_ENV_ARG_DECL_WITH_DEFAULTS);

    protected:
    // Methods that manage this component's connections and consumers.

    virtual ::Components::Cookie *
    subscribe_changes (
      ::CIAO::Domain_Changed_EventConsumer_ptr c
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::ExceededConnectionLimit));

    // CIAO-specific.
    ::Components::Cookie *
    subscribe_changes_generic (
      ::Components::EventConsumerBase_ptr c
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::ExceededConnectionLimit));

    virtual ::CIAO::Domain_Changed_EventConsumer_ptr
    unsubscribe_changes (
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidConnection));

    protected:
    ACE_Active_Map_Manager<
    ::CIAO::Domain_Changed_EventConsumer_var>
    ciao_publishes_changes_map_;

    ACE_Active_Map_Manager<
    ::Components::EventConsumerBase_var>
    ciao_publishes_changes_generic_map_;
  };

  class TARGETMANAGER_SVNT_Export TargetManagerImpl_Servant
    : public virtual CIAO::Servant_Impl<
        POA_CIAO::TargetManagerImpl,
        ::CIAO::CCM_TargetManagerImpl,
        TargetManagerImpl_Context
      >
  {
    public:

    typedef ::CIAO::CCM_TargetManagerImpl _exec_type;

    TargetManagerImpl_Servant (
      ::CIAO::CCM_TargetManagerImpl_ptr executor,
      ::Components::CCMHome_ptr h,
      const char *ins_name,
      ::CIAO::Home_Servant_Impl_Base *hs,
      ::CIAO::Session_Container *c,
      ::CIAO::REC_POL_MAP &rec_pol_map);

    virtual ~TargetManagerImpl_Servant (void);

    virtual void
    set_attributes (
      const ::Components::ConfigValues &descr
      ACE_ENV_ARG_DECL);

    // Supported operations.

    // Public port operations.

    virtual ::Deployment::TargetManager_ptr
    provide_targetMgr (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::CIAO::TargetManagerExt_ptr
    provide_target_manager_ext (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::Components::Cookie *
    subscribe_changes (
      ::CIAO::Domain_Changed_EventConsumer_ptr c
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::ExceededConnectionLimit));

    // CIAO-specific.
    ::Components::Cookie *
    subscribe_changes_generic (
      ::Components::EventConsumerBase_ptr c
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::ExceededConnectionLimit));

    virtual ::CIAO::Domain_Changed_EventConsumer_ptr
    unsubscribe_changes (
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidConnection));

    // Component attribute operations.

    // Operations for Receptacles interface.

    virtual ::Components::Cookie *
    connect (
      const char *name,
      CORBA::Object_ptr connection
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection,
                     ::Components::AlreadyConnected,
                     ::Components::ExceededConnectionLimit));

    virtual CORBA::Object_ptr
    disconnect (
      const char *name,
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection,
                     ::Components::CookieRequired,
                     ::Components::NoConnection));

    virtual ::Components::ReceptacleDescriptions *
    get_all_receptacles (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Operations for Events interface.

    virtual ::Components::Cookie *
    subscribe (
      const char *publisher_name,
      ::Components::EventConsumerBase_ptr subscriber
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection,
                     ::Components::ExceededConnectionLimit));

    virtual ::Components::EventConsumerBase_ptr
    unsubscribe (
      const char *publisher_name,
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::InvalidConnection));

    virtual void
    connect_consumer (
      const char *emitter_name,
      ::Components::EventConsumerBase_ptr consumer
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::AlreadyConnected,
                     ::Components::InvalidConnection));

    virtual ::Components::EventConsumerBase_ptr
    disconnect_consumer (
      const char *source_name
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::Components::InvalidName,
                     ::Components::NoConnection));

    virtual ::Components::PublisherDescriptions *
    get_all_publishers (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::Components::EmitterDescriptions *
    get_all_emitters (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // CIAO specific operations on the servant. 
    CORBA::Object_ptr
    get_facet_executor (
      const char *name
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    private:

    ::Deployment::TargetManager_var
    provide_targetMgr_;

    ::CIAO::TargetManagerExt_var
    provide_target_manager_ext_;

    const char *ins_name_;

    private:

    void
    populate_port_tables (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    ::CORBA::Object_ptr
    provide_targetMgr_i (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    ::CORBA::Object_ptr
    provide_target_manager_ext_i (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));
  };

  class TARGETMANAGER_SVNT_Export TargetManagerHome_Servant
    : public virtual
        ::CIAO::Home_Servant_Impl<
            ::POA_CIAO::TargetManagerHome,
            ::CIAO::CCM_TargetManagerHome,
            TargetManagerImpl_Servant
          >
  {
    public:

    TargetManagerHome_Servant (
      ::CIAO::CCM_TargetManagerHome_ptr exe,
      const char *ins_name,
      ::CIAO::Session_Container *c,
      CIAO::REC_POL_MAP &rec_pol_map);

    virtual ~TargetManagerHome_Servant (void);

    // Home operations.
    // Home factory and finder operations.

    // Attribute operations.
  };

  extern "C" TARGETMANAGER_SVNT_Export ::PortableServer::Servant
  create_CIAO_TargetManagerHome_Servant (
    ::Components::HomeExecutorBase_ptr p,
    CIAO::Session_Container *c,
    const char *ins_name,
    CIAO::REC_POL_MAP &rec_pol_map
    ACE_ENV_ARG_DECL_WITH_DEFAULTS);
}

#include /**/ "ace/post.h"

#endif /* CIAO_GLUE_SESSION_TARGETMANAGER_SVNT_H */

