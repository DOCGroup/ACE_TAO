// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_GLUE_SESSION_WEB_INPUT_ADAPTER_SVNT_H
#define CIAO_GLUE_SESSION_WEB_INPUT_ADAPTER_SVNT_H

#include /**/ "ace/pre.h"

#include "Web_Input_AdapterEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Container_Base.h"
#include "ciao/Context_Impl_T.h"
#include "ciao/Servant_Impl_T.h"
#include "ciao/Home_Servant_Impl_T.h"

#include "Web_Input_AdapterS.h"

namespace CIAO_FACET_CIAO_RACE
{
  template <typename T>
  class Component_Control_Servant_T
  : public virtual POA_CIAO::RACE::Component_Control
  {
    public:
    Component_Control_Servant_T (
      ::CIAO::RACE::CCM_Component_Control_ptr executor,
      ::Components::CCMContext_ptr ctx);

    virtual ~Component_Control_Servant_T (void);

    virtual ::CORBA::Boolean
    is_initialized (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual void
    init_component_tree (
      ::Components::CCMObject_ptr root
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::CIAO::RACE::Component_Tree_Node *
    get_component_tree (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::CIAO::RACE::Component_Control::TreeNotInitialized));

    virtual ::CIAO::RACE::AttbuteSeq *
    get_component_attributes (
      const char * component_name
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::CIAO::RACE::Component_Control::TreeNotInitialized,
                     ::CIAO::RACE::Component_Control::NoSuchComponent));

    virtual void
    set_component_attribute (
      const char * component_name,
      const ::CIAO::RACE::Attbute & bute
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException,
                     ::CIAO::RACE::Component_Control::TreeNotInitialized,
                     ::CIAO::RACE::Component_Control::NoSuchComponent));

    // Get component implementation.
    virtual CORBA::Object_ptr
    _get_component (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    protected:
    // Facet executor.
    ::CIAO::RACE::CCM_Component_Control_var executor_;

    // Context object.
    ::Components::CCMContext_var ctx_;
  };

  typedef Component_Control_Servant_T<int> Component_Control_Servant;
}

namespace CIAO_FACET_CIAO_RACE
{
  template <typename T>
  class Plan_Deployment_Servant_T
  : public virtual POA_CIAO::RACE::Plan_Deployment
  {
    public:
    Plan_Deployment_Servant_T (
      ::CIAO::RACE::CCM_Plan_Deployment_ptr executor,
      ::Components::CCMContext_ptr ctx);

    virtual ~Plan_Deployment_Servant_T (void);

    virtual ::CIAO::RACE::Component_AllocationSeq *
    allocate_plan (
      const char * uri,
      ::CORBA::Boolean use_race
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual void
    deploy_plan (
      const char * uri,
      ::CORBA::Boolean use_race
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual void
    teardown_plan (
      const char * uri
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    virtual ::CIAO::RACE::Plan_UriSeq *
    get_deployed_plan_uris (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Get component implementation.
    virtual CORBA::Object_ptr
    _get_component (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    protected:
    // Facet executor.
    ::CIAO::RACE::CCM_Plan_Deployment_var executor_;

    // Context object.
    ::Components::CCMContext_var ctx_;
  };

  typedef Plan_Deployment_Servant_T<int> Plan_Deployment_Servant;
}

namespace CIAO
{
  namespace RACE
  {
    namespace CIDL_Web_Input_Adapter_Impl
    {
      class Web_Input_Adapter_Servant;

      class WEB_INPUT_ADAPTER_SVNT_Export Web_Input_Adapter_Context
        : public virtual CIAO::Context_Impl<
            ::CIAO::RACE::CCM_Web_Input_Adapter_Context,
            Web_Input_Adapter_Servant,
            ::CIAO::RACE::Web_Input_Adapter,
            ::CIAO::RACE::Web_Input_Adapter_var
          >
      {
        public:
        // We will allow the servant glue code we generate to access our state.
        friend class Web_Input_Adapter_Servant;

        Web_Input_Adapter_Context (
          ::Components::CCMHome_ptr h,
          ::CIAO::Session_Container *c,
          Web_Input_Adapter_Servant *sv);

        virtual ~Web_Input_Adapter_Context (void);

        // Operations for Web_Input_Adapter receptacles and event sources,
        // defined in ::CIAO::RACE::CCM_Web_Input_Adapter_Context.

        virtual ::CIAO::RACE::PlanIngress_ptr
        get_connection_ingress (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // CIAO-specific.

        static Web_Input_Adapter_Context *
        _narrow (
          ::Components::SessionContext_ptr p
          ACE_ENV_ARG_DECL_WITH_DEFAULTS);

        protected:
        // Methods that manage this component's connections and consumers.

        virtual void
        connect_ingress (
          ::CIAO::RACE::PlanIngress_ptr
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::AlreadyConnected,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::PlanIngress_ptr
        disconnect_ingress (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::NoConnection));

        protected:
        // Simplex ingress connection.
        ::CIAO::RACE::PlanIngress_var
        ciao_uses_ingress_;
      };

      class WEB_INPUT_ADAPTER_SVNT_Export Web_Input_Adapter_Servant
        : public virtual CIAO::Servant_Impl<
            POA_CIAO::RACE::Web_Input_Adapter,
            ::CIAO::RACE::CCM_Web_Input_Adapter,
            Web_Input_Adapter_Context
          >
      {
        public:

        typedef ::CIAO::RACE::CCM_Web_Input_Adapter _exec_type;

        Web_Input_Adapter_Servant (
          ::CIAO::RACE::CCM_Web_Input_Adapter_ptr executor,
          ::Components::CCMHome_ptr h,
          const char *ins_name,
          ::CIAO::Home_Servant_Impl_Base *hs,
          ::CIAO::Session_Container *c,
          CIAO::REC_POL_MAP &rec_pol_map);

        virtual ~Web_Input_Adapter_Servant (void);

        virtual void
        set_attributes (
          const ::Components::ConfigValues &descr
          ACE_ENV_ARG_DECL);

        // Supported operations.

        // Public port operations.

        virtual void
        connect_ingress (
          ::CIAO::RACE::PlanIngress_ptr c
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::AlreadyConnected,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::PlanIngress_ptr
        disconnect_ingress (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::NoConnection));

        virtual ::CIAO::RACE::PlanIngress_ptr
        get_connection_ingress (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::CIAO::RACE::Component_Control_ptr
        provide_comp_control (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::CIAO::RACE::Plan_Deployment_ptr
        provide_plan_depment (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Servant class for the dance_depment consumer.
        class WEB_INPUT_ADAPTER_SVNT_Export Web_DeploymentConsumer_dance_depment_Servant
        : public virtual POA_CIAO::RACE::Web_DeploymentConsumer
        {
          public:
          Web_DeploymentConsumer_dance_depment_Servant (
            ::CIAO::RACE::CCM_Web_Input_Adapter_ptr executor,
            ::CIAO::RACE::CCM_Web_Input_Adapter_Context_ptr c);

          virtual ~Web_DeploymentConsumer_dance_depment_Servant (void);

          virtual void
          push_Web_Deployment (
            ::CIAO::RACE::Web_Deployment *evt
            ACE_ENV_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException));

          // Inherited from ::Components::EventConsumerBase.
          virtual void
          push_event ( ::Components::EventBase *ev
                      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException,
                           ::Components::BadEventType));

          // CIAO-specific in ::Components::EventConsumerBase.
          virtual CORBA::Boolean
          ciao_is_substitutable (
            const char *event_repo_id
            ACE_ENV_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException));

          // Get component implementation.
          virtual CORBA::Object_ptr
          _get_component (
            ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException));

          protected:
          ::CIAO::RACE::CCM_Web_Input_Adapter_var
          executor_;

          ::CIAO::RACE::CCM_Web_Input_Adapter_Context_var
          ctx_;
        };

        virtual ::CIAO::RACE::Web_DeploymentConsumer_ptr
        get_consumer_dance_depment (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Component attribute operations.

        virtual char *
        ifr_service_ior (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        void
        ifr_service_ior (
          const char * ifr_service_ior
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Operations for Receptacles interface.

        virtual ::Components::Cookie *
        connect (
          const char *name,
          CORBA::Object_ptr connection
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection,
                         ::Components::AlreadyConnected,
                         ::Components::ExceededConnectionLimit));

        virtual CORBA::Object_ptr
        disconnect (
          const char *name,
          ::Components::Cookie *ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection,
                         ::Components::CookieRequired,
                         ::Components::NoConnection));

        virtual ::Components::ReceptacleDescriptions *
        get_all_receptacles (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Operations for Events interface.

        virtual ::Components::Cookie *
        subscribe (
          const char *publisher_name,
          ::Components::EventConsumerBase_ptr subscriber
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection,
                         ::Components::ExceededConnectionLimit));

        virtual ::Components::EventConsumerBase_ptr
        unsubscribe (
          const char *publisher_name,
          ::Components::Cookie *ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection));

        virtual void
        connect_consumer (
          const char *emitter_name,
          ::Components::EventConsumerBase_ptr consumer
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::AlreadyConnected,
                         ::Components::InvalidConnection));

        virtual ::Components::EventConsumerBase_ptr
        disconnect_consumer (
          const char *source_name
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::NoConnection));

        virtual ::Components::PublisherDescriptions *
        get_all_publishers (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::Components::EmitterDescriptions *
        get_all_emitters (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // CIAO specific operations on the servant. 
        CORBA::Object_ptr
        get_facet_executor (
          const char *name
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        private:

        ::CIAO::RACE::Component_Control_var
        provide_comp_control_;

        ::CIAO::RACE::Plan_Deployment_var
        provide_plan_depment_;

        ::CIAO::RACE::Web_DeploymentConsumer_var
        consumes_dance_depment_;

        const char *ins_name_;

        private:

        void
        populate_port_tables (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        ::CORBA::Object_ptr
        provide_comp_control_i (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        ::CORBA::Object_ptr
        provide_plan_depment_i (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        ::Components::EventConsumerBase_ptr
        get_consumer_dance_depment_i (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));
      };

      class WEB_INPUT_ADAPTER_SVNT_Export Web_Input_Adapter_Home_Servant
        : public virtual
            ::CIAO::Home_Servant_Impl<
                ::POA_CIAO::RACE::Web_Input_Adapter_Home,
                ::CIAO::RACE::CCM_Web_Input_Adapter_Home,
                Web_Input_Adapter_Servant
              >
      {
        public:

        Web_Input_Adapter_Home_Servant (
          ::CIAO::RACE::CCM_Web_Input_Adapter_Home_ptr exe,
          const char *ins_name,
          ::CIAO::Session_Container *c,
          CIAO::REC_POL_MAP &rec_pol_map);

        virtual ~Web_Input_Adapter_Home_Servant (void);

        // Home operations.
        // Home factory and finder operations.

        // Attribute operations.
      };

      extern "C" WEB_INPUT_ADAPTER_SVNT_Export ::PortableServer::Servant
      create_CIAO_RACE_Web_Input_Adapter_Home_Servant (
        ::Components::HomeExecutorBase_ptr p,
        CIAO::Session_Container *c,
        const char *ins_name,
        CIAO::REC_POL_MAP &rec_pol_map
        ACE_ENV_ARG_DECL_WITH_DEFAULTS);
    }
  }
}

#include /**/ "ace/post.h"

#endif /* CIAO_GLUE_SESSION_WEB_INPUT_ADAPTER_SVNT_H */

