// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "NetQoSPlanner_exec.h"
#include "ciao/CIAO_common.h"
#include "ciao/NetQoSC.h"
#include <iostream>

namespace CIAO
{
  namespace RACE
  {
    namespace CIDL_NetQoSPlanner_Impl
    {
      //==================================================================
      // Facet Executor Implementation Class:   Planner_I_exec_i
      //==================================================================

      Planner_I_exec_i::Planner_I_exec_i (void)
      {
      }

      Planner_I_exec_i::~Planner_I_exec_i (void)
      {
      }

      // Operations from ::CIAO::RACE::Planner_I

      ::CORBA::Boolean
      Planner_I_exec_i::process_plan (
        ::CIAO::RACE::Plan_Actions &  plans
        ACE_ENV_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::CIAO::RACE::PlannerFailure))
      {
        // Your code here.
        //ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner::Planner_I_exec_i::process_plan()\n"));

        for (size_t i = 0; i < plans.length (); ++i)
          {
            ::CIAO::RACE::Plan_Action plan_action = plans [i];
            ::Deployment::DeploymentPlan dep_plan = plan_action.plan;
            //ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner: Inside plans.length loop\n"));

            for (size_t j = 0;
                 j < dep_plan.infoProperty.length();
                 ++j)
              {
                //ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner: Inside infoProperty loop\n"));
                if (ACE_OS::strcmp (dep_plan.infoProperty[j].name.in (),
                                    "CIAONetworkQoS") == 0)
                 {
                   ::Deployment::DiffservInfos dscp_infos;

                   time_t t;
                   time (&t);
                   srandom (t);

                   //ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner: Inside CIAONetworkQoS\n"));
                   ::CIAO::DAnCE::NetworkQoS::NetQoSRequirement *net_qos_req;
                   if (dep_plan.infoProperty [j].value >>= net_qos_req)
                    {
                       //ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner: Any successful\n"));
                       size_t set_len = net_qos_req->conn_qos_set.length();
                       for (size_t k = 0; k < set_len; ++k)
                         {
                           ::CIAO::DAnCE::NetworkQoS::ConnectionQoS conn_qos
                            = net_qos_req->conn_qos_set[k];
                           for (size_t conn_num = 0; 
                                conn_num < conn_qos.connections.length (); 
                                ++conn_num)
                             {
                               /*
                               std::cerr
                               << "Connection Name = " << conn_qos.connections [conn_num].connection_name   << std::endl
                               << "client Name = " << conn_qos.connections [conn_num].client                << std::endl
                               << "client Port Name = " << conn_qos.connections [conn_num].client_port_name << std::endl
                               << "server Name = " << conn_qos.connections [conn_num].server                << std::endl
                               << "server Port Name = " << conn_qos.connections [conn_num].server_port_name << std::endl;
                               */

                               size_t len = dscp_infos.length ();
                               dscp_infos.length (len + 1);
                               dscp_infos [conn_num].server_instance_name = conn_qos.connections [conn_num].server;
                               dscp_infos [conn_num].client_instance_name = conn_qos.connections [conn_num].client;
                               dscp_infos [conn_num].client_receptacle_name = conn_qos.connections [conn_num].client_port_name;
                               dscp_infos [conn_num].request_dscp = random () % 7;
                               dscp_infos [conn_num].reply_dscp = random () % 7;
                             }
                           /*
                           std::cerr << "fwdBWD = " << conn_qos.fwdBWD << std::endl;
                           std::cerr << "revBWD = " << conn_qos.revBWD << std::endl;

                           if (::CIAO::DAnCE::NetworkQoS::HIGH_PRIORITY == conn_qos.data_qos)
                              std::cerr << "DataTrafficQoS = NetworkQoS::HIGH_PRIORITY\n";
                           else if (::CIAO::DAnCE::NetworkQoS::HIGH_RELIABILITY == conn_qos.data_qos)
                              std::cerr << "DataTrafficQoS = NetworkQoS::HIGH_RELIABILITY\n";
                           else if (::CIAO::DAnCE::NetworkQoS::VIDEO == conn_qos.data_qos)
                              std::cerr << "DataTrafficQoS = NetworkQoS::VIDEO\n";
                           else if (::CIAO::DAnCE::NetworkQoS::VOICE == conn_qos.data_qos)
                              std::cerr << "DataTrafficQoS = NetworkQoS::VOICE\n";
                           else if (::CIAO::DAnCE::NetworkQoS::BEST_EFFORT == conn_qos.data_qos)
                              std::cerr << "DataTrafficQoS = NetworkQoS::BEST_EFFORT\n";

                           if (::CIAO::DAnCE::NetworkQoS::NORMAL == conn_qos.priority)
                              std::cerr << "Priority = NORMAL\n";
                           else if (::CIAO::DAnCE::NetworkQoS::HIGH == conn_qos.priority)
                              std::cerr << "Priority = HIGH\n";
                           else if (::CIAO::DAnCE::NetworkQoS::LOW == conn_qos.priority)
                              std::cerr << "Priority = LOW\n";
                           */
                         }
                    }
                    else
                    {
                      ACE_DEBUG ((LM_DEBUG, "Conversion to Any failed for NetworkQoS.\n"));
                    }
                    // remove NetQoS infoProperty
                    //dep_plan.infoProperty.remove (j);
                    if (dep_plan.infoProperty.length() > j+1)
                    {
                      for (size_t k = j; k < dep_plan.infoProperty.length(); ++k)
                        {
                          dep_plan.infoProperty[k] = dep_plan.infoProperty[k+1];
                        }
                    }
                    dep_plan.infoProperty.length(dep_plan.infoProperty.length() - 1);
                    this->add_network_priorities (dep_plan, dscp_infos);
                 }
              }
          }
        return true;
      }

// *********************************************************

// code that creates the deployment plan populating the network
// priority policies using the diffserv codepoint decisions.

void
Planner_I_exec_i::add_network_priorities (Deployment::DeploymentPlan & temp_plan,
                                         const Deployment::DiffservInfos & dscp_infos)
      {
        //Deployment::DeploymentPlan temp_plan = plan.in ();

        //Deployment::DiffservInfos dscp_infos;
        //Deployment::DiffservInfo dscp_info;

        //int request_array_slot = 3;
        //int reply_array_slot = 2;
/*
        dscp_info.server_instance_name =
          CORBA::string_dup ("Hello-Sender-idd");
        dscp_info.client_instance_name =
          CORBA::string_dup ("Hello-Receiver-idd");
        dscp_info.client_receptacle_name =
          CORBA::string_dup ("read_message");
        dscp_info.request_dscp = dscp[request_array_slot];
        dscp_info.reply_dscp = dscp[reply_array_slot];

        CORBA::ULong dscp_infos_len = dscp_infos.length ();
        CORBA::ULong new_dscp_infos_len;
        new_dscp_infos_len = dscp_infos_len + 1;
        dscp_infos.length (new_dscp_infos_len);
        dscp_infos[dscp_infos_len] = dscp_info;
*/
        CORBA::ULong len = dscp_infos.length ();
        CIAO::DAnCE::ServerResource server_resource;
        server_resource.Id =
          CORBA::string_dup ("test_server_resource_id");

        for (CORBA::ULong i = 0; i < len; ++i)
          {
            const char *server_instance_name =
                dscp_infos[i].server_instance_name.in ();
            const char *client_instance_name =
                dscp_infos[i].client_instance_name.in ();
            const char *client_receptacle_name =
                dscp_infos[i].client_receptacle_name.in ();
            CORBA::Long request_dscp = dscp_infos[i].request_dscp;
            CORBA::Long reply_dscp = dscp_infos[i].reply_dscp;

            CORBA::ULong instance_len = temp_plan.instance.length ();
            for (CORBA::ULong j = 0; j < instance_len; ++j)
              {
                const char *instance_name =
                  temp_plan.instance[j].name.in ();
                this->instance_map_.bind (instance_name, j);
              }

            CORBA::ULong policy_set_len;
            CORBA::ULong new_policy_set_len;
            CORBA::ULong policy_def_len;
            CORBA::ULong new_policy_def_len;
            CORBA::ULong dep_res_len;
            CORBA::ULong new_dep_res_len;
            CORBA::ULong pro_len;
            CORBA::ULong new_pro_len;
            ACE_CString policy_set_id;
            ACE_CString temp_policy_set_id;

            int server_instance_iter;
            if (this->instance_map_.find
                    (server_instance_name, server_instance_iter) == 0)
              {
                policy_set_len =
                  server_resource.orb_config.policy_set.length ();
                new_policy_set_len = policy_set_len + 1;
                server_resource.orb_config.policy_set.length (
                    new_policy_set_len);
                policy_set_id = "test_policy_set_id";
                policy_set_id += "_";
                policy_set_id += server_instance_name;
                server_resource.orb_config.policy_set[policy_set_len].Id =
                  CORBA::string_dup (policy_set_id.c_str ());
    
                policy_def_len = server_resource.orb_config.
                                    policy_set[policy_set_len].
                                      policies.length ();
                new_policy_def_len = policy_def_len + 1;
                server_resource.orb_config.policy_set[policy_set_len].
                  policies.length (new_policy_def_len);
    
                ::CIAO::DAnCE::NWPriorityModelPolicyDef npmd;
                npmd.nw_priority_model =
                  ::CIAO::DAnCE::CLIENT_PROPAGATED_NWPRIORITY;
                npmd.request_dscp = 0;
                npmd.reply_dscp = 0;
    
                server_resource.orb_config.policy_set[policy_set_len].
                  policies[policy_def_len].NWPriorityModelDef (npmd);
    
                dep_res_len =
                  temp_plan.instance[server_instance_iter].
                    deployedResource.length ();
                new_dep_res_len = dep_res_len + 1;
                temp_plan.instance[server_instance_iter].
                    deployedResource.length (new_dep_res_len);
                temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].resourceUsage =
                      Deployment::InstanceUsesResource;
                temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].requirementName =
                    CORBA::string_dup ("CIAO:PolicySet");
                temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].resourceName =
                    CORBA::string_dup ("test_server_resource_id");
                pro_len = temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].property.length ();
                new_pro_len = pro_len + 1;
                temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].property.length (
                    new_pro_len);
                temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].property[pro_len].
                      name = CORBA::string_dup ("CIAO:InstancePolicy");
                temp_plan.instance[server_instance_iter].
                  deployedResource[dep_res_len].property[pro_len].
                      value <<= policy_set_id.c_str ();
              }
    
            int client_instance_iter;
            if (this->instance_map_.find
                    (client_instance_name, client_instance_iter) == 0)
              {
                policy_set_len =
                  server_resource.orb_config.policy_set.length ();
                new_policy_set_len = policy_set_len + 1;
                server_resource.orb_config.policy_set.length (
                    new_policy_set_len);
    
                policy_set_id = "test_policy_set_id";
                policy_set_id += "_";
                policy_set_id += client_instance_name;
                temp_policy_set_id = "test_policy_set_id";
                temp_policy_set_id += "_";
                temp_policy_set_id += server_instance_name;
    
                server_resource.orb_config.policy_set[policy_set_len].Id =
                  CORBA::string_dup (policy_set_id.c_str ());
    
                policy_def_len = server_resource.orb_config.
                                    policy_set[policy_set_len].
                                      policies.length ();
                new_policy_def_len = policy_def_len + 1;
                server_resource.orb_config.policy_set[policy_set_len].
                  policies.length (new_policy_def_len);
    
                ::CIAO::DAnCE::CNWPriorityModelPolicyDef cnpmd;
                cnpmd.request_dscp = request_dscp;
                cnpmd.reply_dscp = reply_dscp;
    
                server_resource.orb_config.policy_set[policy_set_len].
                  policies[policy_def_len].CNWPriorityModelDef (cnpmd);
    
                dep_res_len =
                  temp_plan.instance[client_instance_iter].
                    deployedResource.length ();
                new_dep_res_len = dep_res_len + 1;
                temp_plan.instance[client_instance_iter].
                    deployedResource.length (new_dep_res_len);
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].resourceUsage =
                      Deployment::InstanceUsesResource;
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].requirementName =
                    CORBA::string_dup ("CIAO:PolicySet");
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].resourceName =
                    CORBA::string_dup ("test_server_resource_id");
    
                pro_len = temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property.length ();
                new_pro_len = pro_len + 1;
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property.length (
                    new_pro_len);
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property[pro_len].
                      name = CORBA::string_dup ("CIAO:ReceptaclePolicy");
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property[pro_len].
                      value <<= policy_set_id.c_str ();
    
                pro_len = temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property.length ();
                new_pro_len = pro_len + 1;
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property.length (
                    new_pro_len);
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property[pro_len].
                      name = client_receptacle_name;
                temp_plan.instance[client_instance_iter].
                  deployedResource[dep_res_len].property[pro_len].
                      value <<= policy_set_id.c_str ();
              }
          }
    
        CORBA::ULong new_info_prop_len;
        CORBA::ULong info_prop_len = temp_plan.infoProperty.length ();
        new_info_prop_len = info_prop_len + 1;
        temp_plan.infoProperty.length (new_info_prop_len);
        temp_plan.infoProperty[0].name =
            CORBA::string_dup ("CIAOServerResources");
        temp_plan.infoProperty[0].value <<= server_resource;
      }
    
      ::CORBA::Boolean
      Planner_I_exec_i::process_domain_change (
        const ::CIAO::RACE::Planner_I::Domain_Changes & /* changes */,
        ::CIAO::RACE::Plan_Actions_out /* plans */
        ACE_ENV_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                      ::CIAO::RACE::PlannerFailure))
      {
        // Your code here.
        return true;
      }

      char *
      Planner_I_exec_i::name (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException))
      {
        // Your code here.
        ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner::Planner_I_exec_i::name()\n"));
        return CORBA::string_dup ("NetQoSPlanner");
      }

      //==================================================================
      // Component Executor Implementation Class:   NetQosPlanner_exec_i
      //==================================================================

      NetQosPlanner_exec_i::NetQosPlanner_exec_i (void)
      {
      }

      NetQosPlanner_exec_i::~NetQosPlanner_exec_i (void)
      {
      }

      // Supported or inherited operations.

      // Attribute operations.

      char *
      NetQosPlanner_exec_i::name (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException))
      {
        ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner_exec_i::name()\n"));
        return CORBA::string_dup ("NetQoSPlanner");
        // Your code here.
        //return 0;
      }

      void
      NetQosPlanner_exec_i::name (
        const char * /* name */
        ACE_ENV_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException))
      {
        // Your code here.
      }

      char *
      NetQosPlanner_exec_i::type (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException))
      {
        ACE_DEBUG ((LM_DEBUG, "NetQoSPlanner_exec_i::type()\n"));
        return CORBA::string_dup ("Network QoS Planner");
        // Your code here.
        //return 0;
      }

      void
      NetQosPlanner_exec_i::type (
        const char * /* type */
        ACE_ENV_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException))
      {
        // Your code here.
      }

      // Port operations.

      ::CIAO::RACE::CCM_Planner_I_ptr
      NetQosPlanner_exec_i::get_planner_i (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException))
      {
        // Your code here.
        return new Planner_I_exec_i ();
        //return ::CIAO::RACE::CCM_Planner_I::_nil ();
      }

      // Operations from Components::SessionComponent

      void
      NetQosPlanner_exec_i::set_session_context (
        ::Components::SessionContext_ptr ctx
        ACE_ENV_ARG_DECL)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        this->context_ =
          NetQosPlanner_Context::_narrow (
            ctx
            ACE_ENV_ARG_PARAMETER);
        ACE_CHECK;

        if (this->context_ == 0)
        {
          ACE_THROW ( ::CORBA::INTERNAL ());
        }
      }

      void
      NetQosPlanner_exec_i::ciao_preactivate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        // Your code here.
      }

      void
      NetQosPlanner_exec_i::ciao_postactivate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        // Your code here.
      }

      void
      NetQosPlanner_exec_i::ccm_activate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        // Your code here.
      }

      void
      NetQosPlanner_exec_i::ccm_passivate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        // Your code here.
      }

      void
      NetQosPlanner_exec_i::ccm_remove (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        // Your code here.
      }

      //==================================================================
      // Home Executor Implementation Class:   NetQoSPlanner_Home_exec_i
      //==================================================================

      NetQoSPlanner_Home_exec_i::NetQoSPlanner_Home_exec_i (void)
      {
      }

      NetQoSPlanner_Home_exec_i::~NetQoSPlanner_Home_exec_i (void)
      {
      }

      // Supported or inherited operations.

      // Home operations.

      // Factory and finder operations.

      // Attribute operations.

      // Implicit operations.

      ::Components::EnterpriseComponent_ptr
      NetQoSPlanner_Home_exec_i::create (
        ACE_ENV_SINGLE_ARG_DECL)
      ACE_THROW_SPEC (( ::CORBA::SystemException,
                       ::Components::CCMException))
      {
        ::Components::EnterpriseComponent_ptr retval =
          ::Components::EnterpriseComponent::_nil ();

        ACE_NEW_THROW_EX (
          retval,
          NetQosPlanner_exec_i,
          ::CORBA::NO_MEMORY ());
        ACE_CHECK_RETURN (::Components::EnterpriseComponent::_nil ());

        return retval;
      }

      extern "C" NETQOSPLANNER_EXEC_Export ::Components::HomeExecutorBase_ptr
      create_CIAO_RACE_NetQoSPlanner_Home_Impl (void)
      {
        ::Components::HomeExecutorBase_ptr retval =
          ::Components::HomeExecutorBase::_nil ();

        ACE_NEW_RETURN (
          retval,
          NetQoSPlanner_Home_exec_i,
          ::Components::HomeExecutorBase::_nil ());

        return retval;
      }
    }
  }
}

