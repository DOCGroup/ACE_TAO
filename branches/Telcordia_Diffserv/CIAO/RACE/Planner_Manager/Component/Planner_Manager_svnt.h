// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_GLUE_SESSION_PLANNER_MANAGER_SVNT_H
#define CIAO_GLUE_SESSION_PLANNER_MANAGER_SVNT_H

#include /**/ "ace/pre.h"

#include "Planner_ManagerEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Container_Base.h"
#include "ciao/Context_Impl_T.h"
#include "ciao/Servant_Impl_T.h"
#include "ciao/Home_Servant_Impl_T.h"

#include "Planner_ManagerS.h"

namespace CIAO_FACET_CIAO_RACE
{
  template <typename T>
  class Planner_Manager_I_Servant_T
  : public virtual POA_CIAO::RACE::Planner_Manager_I
  {
    public:
    Planner_Manager_I_Servant_T (
      ::CIAO::RACE::CCM_Planner_Manager_I_ptr executor,
      ::Components::CCMContext_ptr ctx);

    virtual ~Planner_Manager_I_Servant_T (void);

    virtual void
    execute_planners (
      const ::CIAO::RACE::Plan_Actions & plan,
      const ::CIAO::RACE::PlannerFlow & flow
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    // Get component implementation.
    virtual CORBA::Object_ptr
    _get_component (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC (( ::CORBA::SystemException));

    protected:
    // Facet executor.
    ::CIAO::RACE::CCM_Planner_Manager_I_var executor_;

    // Context object.
    ::Components::CCMContext_var ctx_;
  };

  typedef Planner_Manager_I_Servant_T<int> Planner_Manager_I_Servant;
}

namespace CIAO
{
  namespace RACE
  {
    namespace CIDL_Planner_Manager_Impl
    {
      class Planner_Manager_Servant;

      class PLANNER_MANAGER_SVNT_Export Planner_Manager_Context
        : public virtual CIAO::Context_Impl<
            ::CIAO::RACE::CCM_Planner_Manager_Context,
            Planner_Manager_Servant,
            ::CIAO::RACE::Planner_Manager,
            ::CIAO::RACE::Planner_Manager_var
          >
      {
        public:
        // We will allow the servant glue code we generate to access our state.
        friend class Planner_Manager_Servant;

        Planner_Manager_Context (
          ::Components::CCMHome_ptr h,
          ::CIAO::Session_Container *c,
          Planner_Manager_Servant *sv);

        virtual ~Planner_Manager_Context (void);

        // Operations for Planner_Manager receptacles and event sources,
        // defined in ::CIAO::RACE::CCM_Planner_Manager_Context.

        virtual ::CIAO::RACE::Planner_Manager::plannersConnections *
        get_connections_planners (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::CIAO::RACE::Planner_Manager::outputsConnections *
        get_connections_outputs (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // CIAO-specific.

        static Planner_Manager_Context *
        _narrow (
          ::Components::SessionContext_ptr p
          ACE_ENV_ARG_DECL_WITH_DEFAULTS);

        protected:
        // Methods that manage this component's connections and consumers.

        virtual ::Components::Cookie *
        connect_planners (
          ::CIAO::RACE::Planner_I_ptr
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::ExceededConnectionLimit,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::Planner_I_ptr
        disconnect_planners (
          ::Components::Cookie * ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidConnection));

        virtual ::Components::Cookie *
        connect_outputs (
          ::CIAO::RACE::PlanEgress_ptr
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::ExceededConnectionLimit,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::PlanEgress_ptr
        disconnect_outputs (
          ::Components::Cookie * ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidConnection));

        protected:
        // Multiplex planners connection.
        ACE_Active_Map_Manager<
        ::CIAO::RACE::Planner_I_var>
        ciao_uses_planners_;

        // Multiplex outputs connection.
        ACE_Active_Map_Manager<
        ::CIAO::RACE::PlanEgress_var>
        ciao_uses_outputs_;
      };

      class PLANNER_MANAGER_SVNT_Export Planner_Manager_Servant
        : public virtual CIAO::Servant_Impl<
            POA_CIAO::RACE::Planner_Manager,
            ::CIAO::RACE::CCM_Planner_Manager,
            Planner_Manager_Context
          >
      {
        public:

        typedef ::CIAO::RACE::CCM_Planner_Manager _exec_type;

        Planner_Manager_Servant (
          ::CIAO::RACE::CCM_Planner_Manager_ptr executor,
          ::Components::CCMHome_ptr h,
          const char *ins_name,
          ::CIAO::Home_Servant_Impl_Base *hs,
          ::CIAO::Session_Container *c,
          ::CIAO::REC_POL_MAP &rec_pol_map);

        virtual ~Planner_Manager_Servant (void);

        virtual void
        set_attributes (
          const ::Components::ConfigValues &descr
          ACE_ENV_ARG_DECL);

        // Supported operations.

        // Public port operations.

        virtual ::CIAO::RACE::Planner_Manager_I_ptr
        provide_planner_manager_i (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::Components::Cookie *
        connect_planners (
          ::CIAO::RACE::Planner_I_ptr c
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::ExceededConnectionLimit,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::Planner_I_ptr
        disconnect_planners (
          ::Components::Cookie * ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::Planner_Manager::plannersConnections *
        get_connections_planners (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::Components::Cookie *
        connect_outputs (
          ::CIAO::RACE::PlanEgress_ptr c
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::ExceededConnectionLimit,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::PlanEgress_ptr
        disconnect_outputs (
          ::Components::Cookie * ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidConnection));

        virtual ::CIAO::RACE::Planner_Manager::outputsConnections *
        get_connections_outputs (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Servant class for the domain_changed consumer.
        class PLANNER_MANAGER_SVNT_Export Domain_Changed_EventConsumer_domain_changed_Servant
        : public virtual POA_CIAO::Domain_Changed_EventConsumer
        {
          public:
          Domain_Changed_EventConsumer_domain_changed_Servant (
            ::CIAO::RACE::CCM_Planner_Manager_ptr executor,
            ::CIAO::RACE::CCM_Planner_Manager_Context_ptr c);

          virtual ~Domain_Changed_EventConsumer_domain_changed_Servant (void);

          virtual void
          push_Domain_Changed_Event (
            ::CIAO::Domain_Changed_Event *evt
            ACE_ENV_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException));

          // Inherited from ::Components::EventConsumerBase.
          virtual void
          push_event ( ::Components::EventBase *ev
                      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException,
                           ::Components::BadEventType));

          // CIAO-specific in ::Components::EventConsumerBase.
          virtual CORBA::Boolean
          ciao_is_substitutable (
            const char *event_repo_id
            ACE_ENV_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException));

          // Get component implementation.
          virtual CORBA::Object_ptr
          _get_component (
            ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
          ACE_THROW_SPEC (( ::CORBA::SystemException));

          protected:
          ::CIAO::RACE::CCM_Planner_Manager_var
          executor_;

          ::CIAO::RACE::CCM_Planner_Manager_Context_var
          ctx_;
        };

        virtual ::CIAO::Domain_Changed_EventConsumer_ptr
        get_consumer_domain_changed (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Component attribute operations.

        virtual ::CIAO::RACE::RACE_Classifications *
        classes (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Operations for Receptacles interface.

        virtual ::Components::Cookie *
        connect (
          const char *name,
          CORBA::Object_ptr connection
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection,
                         ::Components::AlreadyConnected,
                         ::Components::ExceededConnectionLimit));

        virtual CORBA::Object_ptr
        disconnect (
          const char *name,
          ::Components::Cookie *ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection,
                         ::Components::CookieRequired,
                         ::Components::NoConnection));

        virtual ::Components::ReceptacleDescriptions *
        get_all_receptacles (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // Operations for Events interface.

        virtual ::Components::Cookie *
        subscribe (
          const char *publisher_name,
          ::Components::EventConsumerBase_ptr subscriber
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection,
                         ::Components::ExceededConnectionLimit));

        virtual ::Components::EventConsumerBase_ptr
        unsubscribe (
          const char *publisher_name,
          ::Components::Cookie *ck
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::InvalidConnection));

        virtual void
        connect_consumer (
          const char *emitter_name,
          ::Components::EventConsumerBase_ptr consumer
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::AlreadyConnected,
                         ::Components::InvalidConnection));

        virtual ::Components::EventConsumerBase_ptr
        disconnect_consumer (
          const char *source_name
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException,
                         ::Components::InvalidName,
                         ::Components::NoConnection));

        virtual ::Components::PublisherDescriptions *
        get_all_publishers (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        virtual ::Components::EmitterDescriptions *
        get_all_emitters (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        // CIAO specific operations on the servant. 
        CORBA::Object_ptr
        get_facet_executor (
          const char *name
          ACE_ENV_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        private:

        ::CIAO::RACE::Planner_Manager_I_var
        provide_planner_manager_i_;

        ::CIAO::Domain_Changed_EventConsumer_var
        consumes_domain_changed_;

        const char *ins_name_;

        private:

        void
        populate_port_tables (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        ::CORBA::Object_ptr
        provide_planner_manager_i_i (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));

        ::Components::EventConsumerBase_ptr
        get_consumer_domain_changed_i (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
        ACE_THROW_SPEC (( ::CORBA::SystemException));
      };

      class PLANNER_MANAGER_SVNT_Export Planner_Manager_Home_Servant
        : public virtual
            ::CIAO::Home_Servant_Impl<
                ::POA_CIAO::RACE::Planner_Manager_Home,
                ::CIAO::RACE::CCM_Planner_Manager_Home,
                Planner_Manager_Servant
              >
      {
        public:

        Planner_Manager_Home_Servant (
          ::CIAO::RACE::CCM_Planner_Manager_Home_ptr exe,
          const char *ins_name,
          ::CIAO::Session_Container *c,
          ::CIAO::REC_POL_MAP &rec_pol_map);

        virtual ~Planner_Manager_Home_Servant (void);

        // Home operations.
        // Home factory and finder operations.

        // Attribute operations.
      };

      extern "C" PLANNER_MANAGER_SVNT_Export ::PortableServer::Servant
      create_CIAO_RACE_Planner_Manager_Home_Servant (
        ::Components::HomeExecutorBase_ptr p,
        CIAO::Session_Container *c,
        const char *ins_name,
        ::CIAO::REC_POL_MAP &rec_pol_map
        ACE_ENV_ARG_DECL_WITH_DEFAULTS);
    }
  }
}

#include /**/ "ace/post.h"

#endif /* CIAO_GLUE_SESSION_PLANNER_MANAGER_SVNT_H */

