--- orig/RTCORBAC.i	Wed Apr 25 00:17:43 2001
+++ RTCORBAC.i	Tue Apr 24 13:44:43 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -574,6 +574,49 @@
 #if !defined (_RTCORBA_PRIORITYMODELPOLICY___CI_)
 #define _RTCORBA_PRIORITYMODELPOLICY___CI_
 
+ACE_INLINE RTCORBA::PriorityModelPolicy_ptr
+tao_RTCORBA_PriorityModelPolicy_duplicate (
+    RTCORBA::PriorityModelPolicy_ptr p
+  )
+{
+  return RTCORBA::PriorityModelPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_PriorityModelPolicy_release (
+    RTCORBA::PriorityModelPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::PriorityModelPolicy_ptr
+tao_RTCORBA_PriorityModelPolicy_nil (
+    void
+  )
+{
+  return RTCORBA::PriorityModelPolicy::_nil ();
+}
+
+ACE_INLINE RTCORBA::PriorityModelPolicy_ptr
+tao_RTCORBA_PriorityModelPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::PriorityModelPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_PriorityModelPolicy_upcast (
+    void *src
+  )
+{
+  RTCORBA::PriorityModelPolicy **tmp =
+    ACE_static_cast (RTCORBA::PriorityModelPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -581,6 +624,49 @@
 #if !defined (_RTCORBA_THREADPOOLPOLICY___CI_)
 #define _RTCORBA_THREADPOOLPOLICY___CI_
 
+ACE_INLINE RTCORBA::ThreadpoolPolicy_ptr
+tao_RTCORBA_ThreadpoolPolicy_duplicate (
+    RTCORBA::ThreadpoolPolicy_ptr p
+  )
+{
+  return RTCORBA::ThreadpoolPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_ThreadpoolPolicy_release (
+    RTCORBA::ThreadpoolPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::ThreadpoolPolicy_ptr
+tao_RTCORBA_ThreadpoolPolicy_nil (
+    void
+  )
+{
+  return RTCORBA::ThreadpoolPolicy::_nil ();
+}
+
+ACE_INLINE RTCORBA::ThreadpoolPolicy_ptr
+tao_RTCORBA_ThreadpoolPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::ThreadpoolPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_ThreadpoolPolicy_upcast (
+    void *src
+  )
+{
+  RTCORBA::ThreadpoolPolicy **tmp =
+    ACE_static_cast (RTCORBA::ThreadpoolPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -588,6 +674,49 @@
 #if !defined (_RTCORBA_PROTOCOLPROPERTIES___CI_)
 #define _RTCORBA_PROTOCOLPROPERTIES___CI_
 
+ACE_INLINE RTCORBA::ProtocolProperties_ptr
+tao_RTCORBA_ProtocolProperties_duplicate (
+    RTCORBA::ProtocolProperties_ptr p
+  )
+{
+  return RTCORBA::ProtocolProperties::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_ProtocolProperties_release (
+    RTCORBA::ProtocolProperties_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::ProtocolProperties_ptr
+tao_RTCORBA_ProtocolProperties_nil (
+    void
+  )
+{
+  return RTCORBA::ProtocolProperties::_nil ();
+}
+
+ACE_INLINE RTCORBA::ProtocolProperties_ptr
+tao_RTCORBA_ProtocolProperties_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::ProtocolProperties::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_ProtocolProperties_upcast (
+    void *src
+  )
+{
+  RTCORBA::ProtocolProperties **tmp =
+    ACE_static_cast (RTCORBA::ProtocolProperties **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1182,6 +1311,49 @@
 #if !defined (_RTCORBA_SERVERPROTOCOLPOLICY___CI_)
 #define _RTCORBA_SERVERPROTOCOLPOLICY___CI_
 
+ACE_INLINE RTCORBA::ServerProtocolPolicy_ptr
+tao_RTCORBA_ServerProtocolPolicy_duplicate (
+    RTCORBA::ServerProtocolPolicy_ptr p
+  )
+{
+  return RTCORBA::ServerProtocolPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_ServerProtocolPolicy_release (
+    RTCORBA::ServerProtocolPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::ServerProtocolPolicy_ptr
+tao_RTCORBA_ServerProtocolPolicy_nil (
+    void
+  )
+{
+  return RTCORBA::ServerProtocolPolicy::_nil ();
+}
+
+ACE_INLINE RTCORBA::ServerProtocolPolicy_ptr
+tao_RTCORBA_ServerProtocolPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::ServerProtocolPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_ServerProtocolPolicy_upcast (
+    void *src
+  )
+{
+  RTCORBA::ServerProtocolPolicy **tmp =
+    ACE_static_cast (RTCORBA::ServerProtocolPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1189,6 +1361,49 @@
 #if !defined (_RTCORBA_CLIENTPROTOCOLPOLICY___CI_)
 #define _RTCORBA_CLIENTPROTOCOLPOLICY___CI_
 
+ACE_INLINE RTCORBA::ClientProtocolPolicy_ptr
+tao_RTCORBA_ClientProtocolPolicy_duplicate (
+    RTCORBA::ClientProtocolPolicy_ptr p
+  )
+{
+  return RTCORBA::ClientProtocolPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_ClientProtocolPolicy_release (
+    RTCORBA::ClientProtocolPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::ClientProtocolPolicy_ptr
+tao_RTCORBA_ClientProtocolPolicy_nil (
+    void
+  )
+{
+  return RTCORBA::ClientProtocolPolicy::_nil ();
+}
+
+ACE_INLINE RTCORBA::ClientProtocolPolicy_ptr
+tao_RTCORBA_ClientProtocolPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::ClientProtocolPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_ClientProtocolPolicy_upcast (
+    void *src
+  )
+{
+  RTCORBA::ClientProtocolPolicy **tmp =
+    ACE_static_cast (RTCORBA::ClientProtocolPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1196,6 +1411,49 @@
 #if !defined (_RTCORBA_PRIVATECONNECTIONPOLICY___CI_)
 #define _RTCORBA_PRIVATECONNECTIONPOLICY___CI_
 
+ACE_INLINE RTCORBA::PrivateConnectionPolicy_ptr
+tao_RTCORBA_PrivateConnectionPolicy_duplicate (
+    RTCORBA::PrivateConnectionPolicy_ptr p
+  )
+{
+  return RTCORBA::PrivateConnectionPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_PrivateConnectionPolicy_release (
+    RTCORBA::PrivateConnectionPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::PrivateConnectionPolicy_ptr
+tao_RTCORBA_PrivateConnectionPolicy_nil (
+    void
+  )
+{
+  return RTCORBA::PrivateConnectionPolicy::_nil ();
+}
+
+ACE_INLINE RTCORBA::PrivateConnectionPolicy_ptr
+tao_RTCORBA_PrivateConnectionPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::PrivateConnectionPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_PrivateConnectionPolicy_upcast (
+    void *src
+  )
+{
+  RTCORBA::PrivateConnectionPolicy **tmp =
+    ACE_static_cast (RTCORBA::PrivateConnectionPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1203,6 +1461,49 @@
 #if !defined (_RTCORBA_TCPPROTOCOLPROPERTIES___CI_)
 #define _RTCORBA_TCPPROTOCOLPROPERTIES___CI_
 
+ACE_INLINE RTCORBA::TCPProtocolProperties_ptr
+tao_RTCORBA_TCPProtocolProperties_duplicate (
+    RTCORBA::TCPProtocolProperties_ptr p
+  )
+{
+  return RTCORBA::TCPProtocolProperties::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_TCPProtocolProperties_release (
+    RTCORBA::TCPProtocolProperties_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::TCPProtocolProperties_ptr
+tao_RTCORBA_TCPProtocolProperties_nil (
+    void
+  )
+{
+  return RTCORBA::TCPProtocolProperties::_nil ();
+}
+
+ACE_INLINE RTCORBA::TCPProtocolProperties_ptr
+tao_RTCORBA_TCPProtocolProperties_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::TCPProtocolProperties::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_TCPProtocolProperties_upcast (
+    void *src
+  )
+{
+  RTCORBA::TCPProtocolProperties **tmp =
+    ACE_static_cast (RTCORBA::TCPProtocolProperties **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1210,6 +1511,49 @@
 #if !defined (_RTCORBA_GIOPPROTOCOLPROPERTIES___CI_)
 #define _RTCORBA_GIOPPROTOCOLPROPERTIES___CI_
 
+ACE_INLINE RTCORBA::GIOPProtocolProperties_ptr
+tao_RTCORBA_GIOPProtocolProperties_duplicate (
+    RTCORBA::GIOPProtocolProperties_ptr p
+  )
+{
+  return RTCORBA::GIOPProtocolProperties::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_GIOPProtocolProperties_release (
+    RTCORBA::GIOPProtocolProperties_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::GIOPProtocolProperties_ptr
+tao_RTCORBA_GIOPProtocolProperties_nil (
+    void
+  )
+{
+  return RTCORBA::GIOPProtocolProperties::_nil ();
+}
+
+ACE_INLINE RTCORBA::GIOPProtocolProperties_ptr
+tao_RTCORBA_GIOPProtocolProperties_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::GIOPProtocolProperties::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_GIOPProtocolProperties_upcast (
+    void *src
+  )
+{
+  RTCORBA::GIOPProtocolProperties **tmp =
+    ACE_static_cast (RTCORBA::GIOPProtocolProperties **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1217,6 +1561,49 @@
 #if !defined (_RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___CI_)
 #define _RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES___CI_
 
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_ptr
+tao_RTCORBA_UnixDomainProtocolProperties_duplicate (
+    RTCORBA::UnixDomainProtocolProperties_ptr p
+  )
+{
+  return RTCORBA::UnixDomainProtocolProperties::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_UnixDomainProtocolProperties_release (
+    RTCORBA::UnixDomainProtocolProperties_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_ptr
+tao_RTCORBA_UnixDomainProtocolProperties_nil (
+    void
+  )
+{
+  return RTCORBA::UnixDomainProtocolProperties::_nil ();
+}
+
+ACE_INLINE RTCORBA::UnixDomainProtocolProperties_ptr
+tao_RTCORBA_UnixDomainProtocolProperties_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::UnixDomainProtocolProperties::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_UnixDomainProtocolProperties_upcast (
+    void *src
+  )
+{
+  RTCORBA::UnixDomainProtocolProperties **tmp =
+    ACE_static_cast (RTCORBA::UnixDomainProtocolProperties **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1224,6 +1611,49 @@
 #if !defined (_RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___CI_)
 #define _RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES___CI_
 
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_ptr
+tao_RTCORBA_SharedMemoryProtocolProperties_duplicate (
+    RTCORBA::SharedMemoryProtocolProperties_ptr p
+  )
+{
+  return RTCORBA::SharedMemoryProtocolProperties::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_SharedMemoryProtocolProperties_release (
+    RTCORBA::SharedMemoryProtocolProperties_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_ptr
+tao_RTCORBA_SharedMemoryProtocolProperties_nil (
+    void
+  )
+{
+  return RTCORBA::SharedMemoryProtocolProperties::_nil ();
+}
+
+ACE_INLINE RTCORBA::SharedMemoryProtocolProperties_ptr
+tao_RTCORBA_SharedMemoryProtocolProperties_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::SharedMemoryProtocolProperties::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_SharedMemoryProtocolProperties_upcast (
+    void *src
+  )
+{
+  RTCORBA::SharedMemoryProtocolProperties **tmp =
+    ACE_static_cast (RTCORBA::SharedMemoryProtocolProperties **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1782,6 +2212,49 @@
 #if !defined (_RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY___CI_)
 #define _RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY___CI_
 
+ACE_INLINE RTCORBA::PriorityBandedConnectionPolicy_ptr
+tao_RTCORBA_PriorityBandedConnectionPolicy_duplicate (
+    RTCORBA::PriorityBandedConnectionPolicy_ptr p
+  )
+{
+  return RTCORBA::PriorityBandedConnectionPolicy::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_PriorityBandedConnectionPolicy_release (
+    RTCORBA::PriorityBandedConnectionPolicy_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::PriorityBandedConnectionPolicy_ptr
+tao_RTCORBA_PriorityBandedConnectionPolicy_nil (
+    void
+  )
+{
+  return RTCORBA::PriorityBandedConnectionPolicy::_nil ();
+}
+
+ACE_INLINE RTCORBA::PriorityBandedConnectionPolicy_ptr
+tao_RTCORBA_PriorityBandedConnectionPolicy_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::PriorityBandedConnectionPolicy::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_PriorityBandedConnectionPolicy_upcast (
+    void *src
+  )
+{
+  RTCORBA::PriorityBandedConnectionPolicy **tmp =
+    ACE_static_cast (RTCORBA::PriorityBandedConnectionPolicy **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1789,6 +2262,49 @@
 #if !defined (_RTCORBA_CURRENT___CI_)
 #define _RTCORBA_CURRENT___CI_
 
+ACE_INLINE RTCORBA::Current_ptr
+tao_RTCORBA_Current_duplicate (
+    RTCORBA::Current_ptr p
+  )
+{
+  return RTCORBA::Current::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_Current_release (
+    RTCORBA::Current_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::Current_ptr
+tao_RTCORBA_Current_nil (
+    void
+  )
+{
+  return RTCORBA::Current::_nil ();
+}
+
+ACE_INLINE RTCORBA::Current_ptr
+tao_RTCORBA_Current_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::Current::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_Current_upcast (
+    void *src
+  )
+{
+  RTCORBA::Current **tmp =
+    ACE_static_cast (RTCORBA::Current **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1796,6 +2312,49 @@
 #if !defined (_RTCORBA_MUTEX___CI_)
 #define _RTCORBA_MUTEX___CI_
 
+ACE_INLINE RTCORBA::Mutex_ptr
+tao_RTCORBA_Mutex_duplicate (
+    RTCORBA::Mutex_ptr p
+  )
+{
+  return RTCORBA::Mutex::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_Mutex_release (
+    RTCORBA::Mutex_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::Mutex_ptr
+tao_RTCORBA_Mutex_nil (
+    void
+  )
+{
+  return RTCORBA::Mutex::_nil ();
+}
+
+ACE_INLINE RTCORBA::Mutex_ptr
+tao_RTCORBA_Mutex_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::Mutex::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_Mutex_upcast (
+    void *src
+  )
+{
+  RTCORBA::Mutex **tmp =
+    ACE_static_cast (RTCORBA::Mutex **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1811,6 +2370,49 @@
 #if !defined (_RTCORBA_RTORB___CI_)
 #define _RTCORBA_RTORB___CI_
 
+ACE_INLINE RTCORBA::RTORB_ptr
+tao_RTCORBA_RTORB_duplicate (
+    RTCORBA::RTORB_ptr p
+  )
+{
+  return RTCORBA::RTORB::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_RTCORBA_RTORB_release (
+    RTCORBA::RTORB_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE RTCORBA::RTORB_ptr
+tao_RTCORBA_RTORB_nil (
+    void
+  )
+{
+  return RTCORBA::RTORB::_nil ();
+}
+
+ACE_INLINE RTCORBA::RTORB_ptr
+tao_RTCORBA_RTORB_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return RTCORBA::RTORB::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_RTCORBA_RTORB_upcast (
+    void *src
+  )
+{
+  RTCORBA::RTORB **tmp =
+    ACE_static_cast (RTCORBA::RTORB **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -1912,4 +2514,3 @@
   );
 
 #endif /* _TAO_CDR_OP_RTCORBA_PriorityBands_I_ */
-
