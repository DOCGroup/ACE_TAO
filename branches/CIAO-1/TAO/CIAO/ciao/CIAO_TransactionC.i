// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_COMPONENTS_TRANSACTION_TRANTOKEN_CI_)
#define _COMPONENTS_TRANSACTION_TRANTOKEN_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::Transaction::TranToken_var
// *************************************************************

ACE_INLINE
Components::Transaction::TranToken_var::TranToken_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::Transaction::TranToken_var::TranToken_var (TranToken *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::Transaction::TranToken_var::TranToken_var (const ::Components::Transaction::TranToken_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::Transaction::TranToken (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

// Fixed-size base types only.
ACE_INLINE
Components::Transaction::TranToken_var::TranToken_var (const ::Components::Transaction::TranToken &p)
{
  ACE_NEW (this->ptr_, ::Components::Transaction::TranToken (p));
}

ACE_INLINE
Components::Transaction::TranToken_var::~TranToken_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::Transaction::TranToken_var &
Components::Transaction::TranToken_var::operator= (TranToken *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::Transaction::TranToken_var &
Components::Transaction::TranToken_var::operator= (const ::Components::Transaction::TranToken_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          TranToken *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              TranToken (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              TranToken *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// Fixed-size types only.
ACE_INLINE
::Components::Transaction::TranToken_var &
Components::Transaction::TranToken_var::operator= (const ::Components::Transaction::TranToken &p)
{
  if (this->ptr_ != &p)
    {
      delete this->ptr_;
      ACE_NEW_RETURN (this->ptr_, ::Components::Transaction::TranToken (p), *this);
    }
  
  return *this;
}

ACE_INLINE
const ::Components::Transaction::TranToken *
Components::Transaction::TranToken_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::Transaction::TranToken *
Components::Transaction::TranToken_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::Transaction::TranToken_var::operator const ::Components::Transaction::TranToken &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::Transaction::TranToken_var::operator ::Components::Transaction::TranToken &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::Transaction::TranToken_var::operator ::Components::Transaction::TranToken &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::Octet &
Components::Transaction::TranToken_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::Octet &
Components::Transaction::TranToken_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::Octet &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::Components::Transaction::TranToken &
Components::Transaction::TranToken_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::Transaction::TranToken &
Components::Transaction::TranToken_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::Transaction::TranToken *&
Components::Transaction::TranToken_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::Transaction::TranToken *
Components::Transaction::TranToken_var::_retn (void)
{
  ::Components::Transaction::TranToken *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::Transaction::TranToken *
Components::Transaction::TranToken_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::Transaction::TranToken_out
// *************************************************************

ACE_INLINE
Components::Transaction::TranToken_out::TranToken_out (TranToken *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::Transaction::TranToken_out::TranToken_out (TranToken_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::Transaction::TranToken_out::TranToken_out (const ::Components::Transaction::TranToken_out &p)
  : ptr_ (ACE_const_cast (TranToken_out&, p).ptr_)
{}

ACE_INLINE
::Components::Transaction::TranToken_out &
Components::Transaction::TranToken_out::operator= (const ::Components::Transaction::TranToken_out &p)
{
  this->ptr_ = ACE_const_cast (TranToken_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::Transaction::TranToken_out &
Components::Transaction::TranToken_out::operator= (TranToken *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::Transaction::TranToken_out::operator ::Components::Transaction::TranToken *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::Transaction::TranToken *&
Components::Transaction::TranToken_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::Transaction::TranToken *
Components::Transaction::TranToken_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::Octet &
Components::Transaction::TranToken_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_TRANSACTION_USERTRANSACTION___CI_)
#define _COMPONENTS_TRANSACTION_USERTRANSACTION___CI_

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_Transaction_TranToken_I_
#define _TAO_CDR_OP_Components_Transaction_TranToken_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::Transaction::TranToken &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::Transaction::TranToken &
  );

#endif /* _TAO_CDR_OP_Components_Transaction_TranToken_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::NoTransaction &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::NoTransaction&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::NotSupported &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::NotSupported&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::SystemError &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::SystemError&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::RollbackError &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::RollbackError&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::HeuristicMixed &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::HeuristicMixed&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::HeuristicRollback &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::HeuristicRollback&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::Security &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::Security&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Transaction::InvalidToken &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Transaction::InvalidToken&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/cdr_op_ci.cpp:51

ACE_INLINE
CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Components::Transaction::Status &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE
CORBA::Boolean operator>> (TAO_InputCDR &strm, Components::Transaction::Status &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (Components::Transaction::Status, _tao_temp);
    }
  
  return _tao_result;
}

