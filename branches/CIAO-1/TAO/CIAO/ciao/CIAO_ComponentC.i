// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::PrimaryKeyBase::PrimaryKeyBase (void)
{}

ACE_INLINE
Components::PrimaryKeyBase::~PrimaryKeyBase (void)
{}

ACE_INLINE const char* 
Components::PrimaryKeyBase::_tao_obv_static_repository_id ()
{
  return "IDL:Components/PrimaryKeyBase:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_CCMHOME___CI_)
#define _COMPONENTS_CCMHOME___CI_

ACE_INLINE
Components::CCMHome::CCMHome (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_CCMHome_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_CCMHOMES_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_CCMHOMES_CI_

ACE_INLINE
Components::CCMHome **
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::allocbuf (CORBA::ULong nelems)
{
  Components::CCMHome **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::CCMHome*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = Components::CCMHome::_nil ();
    }
  
  return buf;
}

ACE_INLINE
void 
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::freebuf (Components::CCMHome **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::_TAO_Unbounded_Object_Sequence_Components_CCMHomes (void)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::_TAO_Unbounded_Object_Sequence_Components_CCMHomes (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_Components_CCMHomes::allocbuf (maximum))
{
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::_TAO_Unbounded_Object_Sequence_Components_CCMHomes (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::CCMHome* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::_TAO_Unbounded_Object_Sequence_Components_CCMHomes(
    const _TAO_Unbounded_Object_Sequence_Components_CCMHomes &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::CCMHome **tmp1 =
        _TAO_Unbounded_Object_Sequence_Components_CCMHomes::allocbuf (this->maximum_);
      Components::CCMHome ** const tmp2 =
        ACE_reinterpret_cast (Components::CCMHome ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = Components::CCMHome::_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes &
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::operator= (
    const _TAO_Unbounded_Object_Sequence_Components_CCMHomes &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::CCMHome **tmp =
        ACE_reinterpret_cast (Components::CCMHome **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          CORBA::release (tmp[i]);
          tmp[i] = Components::CCMHome::_nil ();
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Object_Sequence_Components_CCMHomes::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Object_Sequence_Components_CCMHomes::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Object_Sequence_Components_CCMHomes::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::CCMHome **tmp1 =
    ACE_reinterpret_cast (Components::CCMHome **, this->buffer_);
  
  Components::CCMHome ** const tmp2 =
    ACE_reinterpret_cast (Components::CCMHome ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp1[i] = Components::CCMHome::_duplicate (tmp2[i]);
    }
  
  return *this;
}

ACE_INLINE
TAO_Object_Manager<Components::CCMHome,Components::CCMHome_var>
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::CCMHome ** const tmp =
    ACE_reinterpret_cast (Components::CCMHome ** ACE_CAST_CONST, this->buffer_);
  return TAO_Object_Manager<Components::CCMHome,Components::CCMHome_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::CCMHome* *
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::get_buffer (CORBA::Boolean orphan)
{
  Components::CCMHome **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Object_Sequence_Components_CCMHomes::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::CCMHome**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::CCMHome**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::CCMHome* *
Components::_TAO_Unbounded_Object_Sequence_Components_CCMHomes::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::CCMHome ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_CCMHOMES_CI_)
#define _COMPONENTS_CCMHOMES_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::CCMHomes_var
// *************************************************************

ACE_INLINE
Components::CCMHomes_var::CCMHomes_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::CCMHomes_var::CCMHomes_var (CCMHomes *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::CCMHomes_var::CCMHomes_var (const ::Components::CCMHomes_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::CCMHomes (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::CCMHomes_var::~CCMHomes_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::CCMHomes_var &
Components::CCMHomes_var::operator= (CCMHomes *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::CCMHomes_var &
Components::CCMHomes_var::operator= (const ::Components::CCMHomes_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CCMHomes *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              CCMHomes (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              CCMHomes *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::CCMHomes *
Components::CCMHomes_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::CCMHomes *
Components::CCMHomes_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::CCMHomes_var::operator const ::Components::CCMHomes &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::CCMHomes_var::operator ::Components::CCMHomes &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::CCMHomes_var::operator ::Components::CCMHomes &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::CCMHomes_var::operator ::Components::CCMHomes *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::CCMHome, Components::CCMHome_var>
Components::CCMHomes_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::CCMHomes &
Components::CCMHomes_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::CCMHomes &
Components::CCMHomes_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::CCMHomes *&
Components::CCMHomes_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::CCMHomes *
Components::CCMHomes_var::_retn (void)
{
  ::Components::CCMHomes *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::CCMHomes *
Components::CCMHomes_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::CCMHomes_out
// *************************************************************

ACE_INLINE
Components::CCMHomes_out::CCMHomes_out (CCMHomes *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::CCMHomes_out::CCMHomes_out (CCMHomes_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::CCMHomes_out::CCMHomes_out (const ::Components::CCMHomes_out &p)
  : ptr_ (ACE_const_cast (CCMHomes_out&, p).ptr_)
{}

ACE_INLINE
::Components::CCMHomes_out &
Components::CCMHomes_out::operator= (const ::Components::CCMHomes_out &p)
{
  this->ptr_ = ACE_const_cast (CCMHomes_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::CCMHomes_out &
Components::CCMHomes_out::operator= (CCMHomes *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::CCMHomes_out::operator ::Components::CCMHomes *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::CCMHomes *&
Components::CCMHomes_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::CCMHomes *
Components::CCMHomes_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::CCMHome, Components::CCMHome_var>
Components::CCMHomes_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_KEYLESSCCMHOME___CI_)
#define _COMPONENTS_KEYLESSCCMHOME___CI_

ACE_INLINE
Components::KeylessCCMHome::KeylessCCMHome (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_KeylessCCMHome_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_HOMEFINDER___CI_)
#define _COMPONENTS_HOMEFINDER___CI_

ACE_INLINE
Components::HomeFinder::HomeFinder (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_HomeFinder_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_CONFIGURATOR___CI_)
#define _COMPONENTS_CONFIGURATOR___CI_

ACE_INLINE
Components::Configurator::Configurator (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Configurator_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::ConfigValue::ConfigValue (void)
{}

ACE_INLINE
Components::ConfigValue::~ConfigValue (void)
{}

ACE_INLINE const char* 
Components::ConfigValue::_tao_obv_static_repository_id ()
{
  return "IDL:Components/ConfigValue:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_CONFIGVALUES_CI_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_CONFIGVALUES_CI_

ACE_INLINE
Components::ConfigValue **
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::allocbuf (CORBA::ULong nelems)
{
  Components::ConfigValue **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::ConfigValue*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = 0;
    }
  
  return buf;
}

ACE_INLINE
void 
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::freebuf (Components::ConfigValue **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues (void)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::allocbuf (maximum))
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::ConfigValue* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues(
    const _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::ConfigValue **tmp1 =
        _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::allocbuf (this->maximum_);
      Components::ConfigValue ** const tmp2 =
        ACE_reinterpret_cast (Components::ConfigValue ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          if (tmp2[i] != 0)
            {
              tmp2[i]->_add_ref ();
            }
          
          tmp1[i] = tmp2 [i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues &
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::operator= (
    const _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::ConfigValue **tmp =
        ACE_reinterpret_cast (Components::ConfigValue **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (tmp[i] != 0)
            {
              tmp[i]->_remove_ref ();
            }
          
          tmp[i] = 0;
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::ConfigValue **tmp1 =
    ACE_reinterpret_cast (Components::ConfigValue **, this->buffer_);
  
  Components::ConfigValue ** const tmp2 =
    ACE_reinterpret_cast (Components::ConfigValue ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      if (tmp2[i] != 0)
        {
          tmp2[i]->_add_ref ();
        }
      
      tmp1[i] = tmp2 [i];
    }
  
  return *this;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ConfigValue,Components::ConfigValue_var>
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::ConfigValue ** const tmp =
    ACE_reinterpret_cast (Components::ConfigValue ** ACE_CAST_CONST, this->buffer_);
  return TAO_Valuetype_Manager<Components::ConfigValue,Components::ConfigValue_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::ConfigValue* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::get_buffer (CORBA::Boolean orphan)
{
  Components::ConfigValue **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::ConfigValue**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::ConfigValue**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::ConfigValue* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConfigValues::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::ConfigValue ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_CONFIGVALUES_CI_)
#define _COMPONENTS_CONFIGVALUES_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::ConfigValues_var
// *************************************************************

ACE_INLINE
Components::ConfigValues_var::ConfigValues_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::ConfigValues_var::ConfigValues_var (ConfigValues *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::ConfigValues_var::ConfigValues_var (const ::Components::ConfigValues_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::ConfigValues (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::ConfigValues_var::~ConfigValues_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::ConfigValues_var &
Components::ConfigValues_var::operator= (ConfigValues *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::ConfigValues_var &
Components::ConfigValues_var::operator= (const ::Components::ConfigValues_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ConfigValues *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ConfigValues (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ConfigValues *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::ConfigValues *
Components::ConfigValues_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::ConfigValues *
Components::ConfigValues_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::ConfigValues_var::operator const ::Components::ConfigValues &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::ConfigValues_var::operator ::Components::ConfigValues &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::ConfigValues_var::operator ::Components::ConfigValues &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::ConfigValues_var::operator ::Components::ConfigValues *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ConfigValue, Components::ConfigValue_var>
Components::ConfigValues_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::ConfigValues &
Components::ConfigValues_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::ConfigValues &
Components::ConfigValues_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::ConfigValues *&
Components::ConfigValues_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::ConfigValues *
Components::ConfigValues_var::_retn (void)
{
  ::Components::ConfigValues *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::ConfigValues *
Components::ConfigValues_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::ConfigValues_out
// *************************************************************

ACE_INLINE
Components::ConfigValues_out::ConfigValues_out (ConfigValues *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::ConfigValues_out::ConfigValues_out (ConfigValues_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::ConfigValues_out::ConfigValues_out (const ::Components::ConfigValues_out &p)
  : ptr_ (ACE_const_cast (ConfigValues_out&, p).ptr_)
{}

ACE_INLINE
::Components::ConfigValues_out &
Components::ConfigValues_out::operator= (const ::Components::ConfigValues_out &p)
{
  this->ptr_ = ACE_const_cast (ConfigValues_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::ConfigValues_out &
Components::ConfigValues_out::operator= (ConfigValues *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::ConfigValues_out::operator ::Components::ConfigValues *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::ConfigValues *&
Components::ConfigValues_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::ConfigValues *
Components::ConfigValues_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ConfigValue, Components::ConfigValue_var>
Components::ConfigValues_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_STANDARDCONFIGURATOR___CI_)
#define _COMPONENTS_STANDARDCONFIGURATOR___CI_

ACE_INLINE
Components::StandardConfigurator::StandardConfigurator (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_StandardConfigurator_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_HOMECONFIGURATION___CI_)
#define _COMPONENTS_HOMECONFIGURATION___CI_

ACE_INLINE
Components::HomeConfiguration::HomeConfiguration (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_HomeConfiguration_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::ComponentPortDescription::ComponentPortDescription (void)
{}

ACE_INLINE
Components::ComponentPortDescription::~ComponentPortDescription (void)
{}

ACE_INLINE const char* 
Components::ComponentPortDescription::_tao_obv_static_repository_id ()
{
  return "IDL:Components/ComponentPortDescription:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_CCMOBJECT___CI_)
#define _COMPONENTS_CCMOBJECT___CI_

ACE_INLINE
Components::CCMObject::CCMObject (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_CCMObject_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::Enumeration::Enumeration (void)
{}

ACE_INLINE
Components::Enumeration::~Enumeration (void)
{}

ACE_INLINE const char* 
Components::Enumeration::_tao_obv_static_repository_id ()
{
  return "IDL:Components/Enumeration:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_CCMOBJECTSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_CCMOBJECTSEQ_CI_

ACE_INLINE
Components::CCMObject **
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::allocbuf (CORBA::ULong nelems)
{
  Components::CCMObject **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::CCMObject*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = Components::CCMObject::_nil ();
    }
  
  return buf;
}

ACE_INLINE
void 
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::freebuf (Components::CCMObject **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq (void)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::allocbuf (maximum))
{
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::CCMObject* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq(
    const _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::CCMObject **tmp1 =
        _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::allocbuf (this->maximum_);
      Components::CCMObject ** const tmp2 =
        ACE_reinterpret_cast (Components::CCMObject ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = Components::CCMObject::_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq &
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::operator= (
    const _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::CCMObject **tmp =
        ACE_reinterpret_cast (Components::CCMObject **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          CORBA::release (tmp[i]);
          tmp[i] = Components::CCMObject::_nil ();
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::CCMObject **tmp1 =
    ACE_reinterpret_cast (Components::CCMObject **, this->buffer_);
  
  Components::CCMObject ** const tmp2 =
    ACE_reinterpret_cast (Components::CCMObject ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp1[i] = Components::CCMObject::_duplicate (tmp2[i]);
    }
  
  return *this;
}

ACE_INLINE
TAO_Object_Manager<Components::CCMObject,Components::CCMObject_var>
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::CCMObject ** const tmp =
    ACE_reinterpret_cast (Components::CCMObject ** ACE_CAST_CONST, this->buffer_);
  return TAO_Object_Manager<Components::CCMObject,Components::CCMObject_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::CCMObject* *
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::get_buffer (CORBA::Boolean orphan)
{
  Components::CCMObject **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::CCMObject**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::CCMObject**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::CCMObject* *
Components::_TAO_Unbounded_Object_Sequence_Components_CCMObjectSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::CCMObject ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_CCMOBJECTSEQ_CI_)
#define _COMPONENTS_CCMOBJECTSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::CCMObjectSeq_var
// *************************************************************

ACE_INLINE
Components::CCMObjectSeq_var::CCMObjectSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::CCMObjectSeq_var::CCMObjectSeq_var (CCMObjectSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::CCMObjectSeq_var::CCMObjectSeq_var (const ::Components::CCMObjectSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::CCMObjectSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::CCMObjectSeq_var::~CCMObjectSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::CCMObjectSeq_var &
Components::CCMObjectSeq_var::operator= (CCMObjectSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::CCMObjectSeq_var &
Components::CCMObjectSeq_var::operator= (const ::Components::CCMObjectSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          CCMObjectSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              CCMObjectSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              CCMObjectSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::CCMObjectSeq *
Components::CCMObjectSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::CCMObjectSeq *
Components::CCMObjectSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::CCMObjectSeq_var::operator const ::Components::CCMObjectSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::CCMObjectSeq_var::operator ::Components::CCMObjectSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::CCMObjectSeq_var::operator ::Components::CCMObjectSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::CCMObjectSeq_var::operator ::Components::CCMObjectSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::CCMObject, Components::CCMObject_var>
Components::CCMObjectSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::CCMObjectSeq &
Components::CCMObjectSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::CCMObjectSeq &
Components::CCMObjectSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::CCMObjectSeq *&
Components::CCMObjectSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::CCMObjectSeq *
Components::CCMObjectSeq_var::_retn (void)
{
  ::Components::CCMObjectSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::CCMObjectSeq *
Components::CCMObjectSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::CCMObjectSeq_out
// *************************************************************

ACE_INLINE
Components::CCMObjectSeq_out::CCMObjectSeq_out (CCMObjectSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::CCMObjectSeq_out::CCMObjectSeq_out (CCMObjectSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::CCMObjectSeq_out::CCMObjectSeq_out (const ::Components::CCMObjectSeq_out &p)
  : ptr_ (ACE_const_cast (CCMObjectSeq_out&, p).ptr_)
{}

ACE_INLINE
::Components::CCMObjectSeq_out &
Components::CCMObjectSeq_out::operator= (const ::Components::CCMObjectSeq_out &p)
{
  this->ptr_ = ACE_const_cast (CCMObjectSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::CCMObjectSeq_out &
Components::CCMObjectSeq_out::operator= (CCMObjectSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::CCMObjectSeq_out::operator ::Components::CCMObjectSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::CCMObjectSeq *&
Components::CCMObjectSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::CCMObjectSeq *
Components::CCMObjectSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::CCMObject, Components::CCMObject_var>
Components::CCMObjectSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::DefaultEnumeration::DefaultEnumeration (void)
{}

ACE_INLINE
Components::DefaultEnumeration::~DefaultEnumeration (void)
{}

ACE_INLINE const char* 
Components::DefaultEnumeration::_tao_obv_static_repository_id ()
{
  return "IDL:Components/DefaultEnumeration:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::PrimaryKeyBase *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::PrimaryKeyBase *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::PrimaryKeyBase *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::PrimaryKeyBase *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::CCMObject_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::CCMObject_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::CCMHome_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::CCMHome_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_CCMHomes_I_
#define _TAO_CDR_OP_Components_CCMHomes_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::CCMHomes &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::CCMHomes &
  );

#endif /* _TAO_CDR_OP_Components_CCMHomes_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::KeylessCCMHome_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::KeylessCCMHome_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::HomeFinder_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::HomeFinder_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Configurator_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Configurator_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::ConfigValue *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::ConfigValue *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::ConfigValue *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::ConfigValue *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_ConfigValues_I_
#define _TAO_CDR_OP_Components_ConfigValues_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::ConfigValues &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::ConfigValues &
  );

#endif /* _TAO_CDR_OP_Components_ConfigValues_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::StandardConfigurator_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::StandardConfigurator_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::HomeConfiguration_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::HomeConfiguration_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::ComponentPortDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::ComponentPortDescription *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::ComponentPortDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::ComponentPortDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::Enumeration *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::Enumeration *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::Enumeration *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::Enumeration *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_CCMObjectSeq_I_
#define _TAO_CDR_OP_Components_CCMObjectSeq_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::CCMObjectSeq &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::CCMObjectSeq &
  );

#endif /* _TAO_CDR_OP_Components_CCMObjectSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::DefaultEnumeration *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::DefaultEnumeration *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::DefaultEnumeration *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::DefaultEnumeration *&);

