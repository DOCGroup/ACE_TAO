// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:433

#ifndef _TAO_IDL_COMPONENT_BASES_H_
#define _TAO_IDL_COMPONENT_BASES_H_

#include "SecurityLevel2S.h"
#include "CosPersistentStateS.h"
#include "CosNotificationS.h"
#include "CosNotifyChannelAdminS.h"
#include "Component_BaseC.h"


#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"
#include "tao/PortableServer/Collocated_Object.h"
#include "tao/PortableServer/ThruPOA_Object_Proxy_Impl.h"
#include "tao/PortableServer/Direct_Object_Proxy_Impl.h"

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_sh.cpp:46

TAO_NAMESPACE  POA_Components
{
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class Navigation;
  typedef Navigation *Navigation_ptr;
  // Forward Classes Declaration
  class _TAO_Navigation_ThruPOA_Proxy_Impl;
  class _TAO_Navigation_Strategized_Proxy_Broker;

  class  Navigation
    : public virtual PortableServer::ServantBase
  {
  protected:
    Navigation (void);

  public:
    Navigation (const Navigation& rhs);
    virtual ~Navigation (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::Navigation *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual CORBA::Object_ptr provide_facet (
        const char * name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void provide_facet_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::FacetDescriptions * get_all_facets (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_all_facets_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::FacetDescriptions * get_named_facets (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_named_facets_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual CORBA::Boolean same_component (
        CORBA::Object_ptr object_ref
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void same_component_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_Navigation_Strategized_Proxy_Broker : public virtual ::Components::_TAO_Navigation_Proxy_Broker
  {
  public:
    _TAO_Navigation_Strategized_Proxy_Broker (void);

    virtual ~_TAO_Navigation_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_Navigation_Proxy_Impl &select_proxy (
      ::Components::Navigation *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_Navigation_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_Navigation_Strategized_Proxy_Broker *the_TAO_Navigation_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_Navigation_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_Navigation_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_Navigation_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_Navigation_ThruPOA_Proxy_Impl (void) { }

    virtual CORBA::Object_ptr provide_facet (
        CORBA_Object *_collocated_tao_target_,
        const char * name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));

    virtual ::Components::FacetDescriptions * get_all_facets (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::FacetDescriptions * get_named_facets (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));

    virtual CORBA::Boolean same_component (
        CORBA_Object *_collocated_tao_target_,
        CORBA::Object_ptr object_ref
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class Receptacles;
  typedef Receptacles *Receptacles_ptr;
  // Forward Classes Declaration
  class _TAO_Receptacles_ThruPOA_Proxy_Impl;
  class _TAO_Receptacles_Strategized_Proxy_Broker;

  class  Receptacles
    : public virtual PortableServer::ServantBase
  {
  protected:
    Receptacles (void);

  public:
    Receptacles (const Receptacles& rhs);
    virtual ~Receptacles (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::Receptacles *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::Cookie * connect (
        const char * name,
        CORBA::Object_ptr connection
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
        , Components::AlreadyConnected
        , Components::ExceededConnectionLimit
      )) = 0;

    static void connect_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void disconnect (
        const char * name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
        , Components::CookieRequired
        , Components::NoConnection
      )) = 0;

    static void disconnect_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::ConnectionDescriptions * get_connections (
        const char * name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_connections_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::ReceptacleDescriptions * get_all_receptacles (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_all_receptacles_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::ReceptacleDescriptions * get_named_receptacles (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_named_receptacles_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_Receptacles_Strategized_Proxy_Broker : public virtual ::Components::_TAO_Receptacles_Proxy_Broker
  {
  public:
    _TAO_Receptacles_Strategized_Proxy_Broker (void);

    virtual ~_TAO_Receptacles_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_Receptacles_Proxy_Impl &select_proxy (
      ::Components::Receptacles *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_Receptacles_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_Receptacles_Strategized_Proxy_Broker *the_TAO_Receptacles_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_Receptacles_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_Receptacles_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_Receptacles_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_Receptacles_ThruPOA_Proxy_Impl (void) { }

    virtual ::Components::Cookie * connect (
        CORBA_Object *_collocated_tao_target_,
        const char * name,
        CORBA::Object_ptr connection
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
        , Components::AlreadyConnected
        , Components::ExceededConnectionLimit
      ));

    virtual void disconnect (
        CORBA_Object *_collocated_tao_target_,
        const char * name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
        , Components::CookieRequired
        , Components::NoConnection
      ));

    virtual ::Components::ConnectionDescriptions * get_connections (
        CORBA_Object *_collocated_tao_target_,
        const char * name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));

    virtual ::Components::ReceptacleDescriptions * get_all_receptacles (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::ReceptacleDescriptions * get_named_receptacles (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class EventConsumerBase;
  typedef EventConsumerBase *EventConsumerBase_ptr;
  // Forward Classes Declaration
  class _TAO_EventConsumerBase_ThruPOA_Proxy_Impl;
  class _TAO_EventConsumerBase_Strategized_Proxy_Broker;

  class  EventConsumerBase
    : public virtual PortableServer::ServantBase
  {
  protected:
    EventConsumerBase (void);

  public:
    EventConsumerBase (const EventConsumerBase& rhs);
    virtual ~EventConsumerBase (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::EventConsumerBase *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void push_event (
        Components::EventBase * evt
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::BadEventType
      )) = 0;

    static void push_event_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_EventConsumerBase_Strategized_Proxy_Broker : public virtual ::Components::_TAO_EventConsumerBase_Proxy_Broker
  {
  public:
    _TAO_EventConsumerBase_Strategized_Proxy_Broker (void);

    virtual ~_TAO_EventConsumerBase_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_EventConsumerBase_Proxy_Impl &select_proxy (
      ::Components::EventConsumerBase *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_EventConsumerBase_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_EventConsumerBase_Strategized_Proxy_Broker *the_TAO_EventConsumerBase_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_EventConsumerBase_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_EventConsumerBase_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_EventConsumerBase_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_EventConsumerBase_ThruPOA_Proxy_Impl (void) { }

    virtual void push_event (
        CORBA_Object *_collocated_tao_target_,
        Components::EventBase * evt
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::BadEventType
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class Events;
  typedef Events *Events_ptr;
  // Forward Classes Declaration
  class _TAO_Events_ThruPOA_Proxy_Impl;
  class _TAO_Events_Strategized_Proxy_Broker;

  class  Events
    : public virtual PortableServer::ServantBase
  {
  protected:
    Events (void);

  public:
    Events (const Events& rhs);
    virtual ~Events (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::Events *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::EventConsumerBase_ptr get_consumer (
        const char * sink_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_consumer_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::Cookie * subscribe (
        const char * publisher_name,
        Components::EventConsumerBase_ptr subscriber
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      )) = 0;

    static void subscribe_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void unsubscribe (
        const char * publisher_name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
      )) = 0;

    static void unsubscribe_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void connect_consumer (
        const char * emitter_name,
        Components::EventConsumerBase_ptr consumer
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      )) = 0;

    static void connect_consumer_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::EventConsumerBase_ptr disconnect_consumer (
        const char * source_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::NoConnection
      )) = 0;

    static void disconnect_consumer_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::ConsumerDescriptions * get_all_consumers (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_all_consumers_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::ConsumerDescriptions * get_named_consumers (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_named_consumers_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::EmitterDescriptions * get_all_emitters (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_all_emitters_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::EmitterDescriptions * get_named_emitters (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_named_emitters_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::PublisherDescriptions * get_all_publishers (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_all_publishers_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::PublisherDescriptions * get_named_publishers (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;

    static void get_named_publishers_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_Events_Strategized_Proxy_Broker : public virtual ::Components::_TAO_Events_Proxy_Broker
  {
  public:
    _TAO_Events_Strategized_Proxy_Broker (void);

    virtual ~_TAO_Events_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_Events_Proxy_Impl &select_proxy (
      ::Components::Events *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_Events_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_Events_Strategized_Proxy_Broker *the_TAO_Events_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_Events_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_Events_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_Events_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_Events_ThruPOA_Proxy_Impl (void) { }

    virtual ::Components::EventConsumerBase_ptr get_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * sink_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));

    virtual ::Components::Cookie * subscribe (
        CORBA_Object *_collocated_tao_target_,
        const char * publisher_name,
        Components::EventConsumerBase_ptr subscriber
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      ));

    virtual void unsubscribe (
        CORBA_Object *_collocated_tao_target_,
        const char * publisher_name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
      ));

    virtual void connect_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * emitter_name,
        Components::EventConsumerBase_ptr consumer
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      ));

    virtual ::Components::EventConsumerBase_ptr disconnect_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * source_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::NoConnection
      ));

    virtual ::Components::ConsumerDescriptions * get_all_consumers (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::ConsumerDescriptions * get_named_consumers (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));

    virtual ::Components::EmitterDescriptions * get_all_emitters (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::EmitterDescriptions * get_named_emitters (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));

    virtual ::Components::PublisherDescriptions * get_all_publishers (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::PublisherDescriptions * get_named_publishers (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class CCMHome;
  typedef CCMHome *CCMHome_ptr;
  // Forward Classes Declaration
  class _TAO_CCMHome_ThruPOA_Proxy_Impl;
  class _TAO_CCMHome_Strategized_Proxy_Broker;

  class  CCMHome
    : public virtual PortableServer::ServantBase
  {
  protected:
    CCMHome (void);

  public:
    CCMHome (const CCMHome& rhs);
    virtual ~CCMHome (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::CCMHome *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::CORBA::IRObject_ptr get_component_def (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_component_def_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::CORBA::IRObject_ptr get_home_def (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_home_def_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void remove_component (
        Components::CCMObject_ptr comp
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::RemoveFailure
      )) = 0;

    static void remove_component_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_CCMHome_Strategized_Proxy_Broker : public virtual ::Components::_TAO_CCMHome_Proxy_Broker
  {
  public:
    _TAO_CCMHome_Strategized_Proxy_Broker (void);

    virtual ~_TAO_CCMHome_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_CCMHome_Proxy_Impl &select_proxy (
      ::Components::CCMHome *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_CCMHome_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_CCMHome_Strategized_Proxy_Broker *the_TAO_CCMHome_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_CCMHome_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_CCMHome_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_CCMHome_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_CCMHome_ThruPOA_Proxy_Impl (void) { }

    virtual ::CORBA::IRObject_ptr get_component_def (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::CORBA::IRObject_ptr get_home_def (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void remove_component (
        CORBA_Object *_collocated_tao_target_,
        Components::CCMObject_ptr comp
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::RemoveFailure
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class KeylessCCMHome;
  typedef KeylessCCMHome *KeylessCCMHome_ptr;
  // Forward Classes Declaration
  class _TAO_KeylessCCMHome_ThruPOA_Proxy_Impl;
  class _TAO_KeylessCCMHome_Strategized_Proxy_Broker;

  class  KeylessCCMHome
    : public virtual PortableServer::ServantBase
  {
  protected:
    KeylessCCMHome (void);

  public:
    KeylessCCMHome (const KeylessCCMHome& rhs);
    virtual ~KeylessCCMHome (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::KeylessCCMHome *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::CCMObject_ptr create_component (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::CreateFailure
      )) = 0;

    static void create_component_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_KeylessCCMHome_Strategized_Proxy_Broker : public virtual ::Components::_TAO_KeylessCCMHome_Proxy_Broker
  {
  public:
    _TAO_KeylessCCMHome_Strategized_Proxy_Broker (void);

    virtual ~_TAO_KeylessCCMHome_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_KeylessCCMHome_Proxy_Impl &select_proxy (
      ::Components::KeylessCCMHome *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_KeylessCCMHome_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_KeylessCCMHome_Strategized_Proxy_Broker *the_TAO_KeylessCCMHome_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_KeylessCCMHome_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_KeylessCCMHome_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_KeylessCCMHome_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_KeylessCCMHome_ThruPOA_Proxy_Impl (void) { }

    virtual ::Components::CCMObject_ptr create_component (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::CreateFailure
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class HomeFinder;
  typedef HomeFinder *HomeFinder_ptr;
  // Forward Classes Declaration
  class _TAO_HomeFinder_ThruPOA_Proxy_Impl;
  class _TAO_HomeFinder_Strategized_Proxy_Broker;

  class  HomeFinder
    : public virtual PortableServer::ServantBase
  {
  protected:
    HomeFinder (void);

  public:
    HomeFinder (const HomeFinder& rhs);
    virtual ~HomeFinder (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::HomeFinder *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::CCMHome_ptr find_home_by_component_type (
        const char * comp_repid
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::HomeNotFound
      )) = 0;

    static void find_home_by_component_type_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::CCMHome_ptr find_home_by_home_type (
        const char * home_repid
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::HomeNotFound
      )) = 0;

    static void find_home_by_home_type_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::CCMHome_ptr find_home_by_name (
        const char * home_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::HomeNotFound
      )) = 0;

    static void find_home_by_name_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_HomeFinder_Strategized_Proxy_Broker : public virtual ::Components::_TAO_HomeFinder_Proxy_Broker
  {
  public:
    _TAO_HomeFinder_Strategized_Proxy_Broker (void);

    virtual ~_TAO_HomeFinder_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_HomeFinder_Proxy_Impl &select_proxy (
      ::Components::HomeFinder *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_HomeFinder_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_HomeFinder_Strategized_Proxy_Broker *the_TAO_HomeFinder_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_HomeFinder_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_HomeFinder_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_HomeFinder_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_HomeFinder_ThruPOA_Proxy_Impl (void) { }

    virtual ::Components::CCMHome_ptr find_home_by_component_type (
        CORBA_Object *_collocated_tao_target_,
        const char * comp_repid
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::HomeNotFound
      ));

    virtual ::Components::CCMHome_ptr find_home_by_home_type (
        CORBA_Object *_collocated_tao_target_,
        const char * home_repid
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::HomeNotFound
      ));

    virtual ::Components::CCMHome_ptr find_home_by_name (
        CORBA_Object *_collocated_tao_target_,
        const char * home_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::HomeNotFound
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class Configurator;
  typedef Configurator *Configurator_ptr;
  // Forward Classes Declaration
  class _TAO_Configurator_ThruPOA_Proxy_Impl;
  class _TAO_Configurator_Strategized_Proxy_Broker;

  class  Configurator
    : public virtual PortableServer::ServantBase
  {
  protected:
    Configurator (void);

  public:
    Configurator (const Configurator& rhs);
    virtual ~Configurator (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::Configurator *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void configure (
        Components::CCMObject_ptr comp
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::WrongComponentType
      )) = 0;

    static void configure_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_Configurator_Strategized_Proxy_Broker : public virtual ::Components::_TAO_Configurator_Proxy_Broker
  {
  public:
    _TAO_Configurator_Strategized_Proxy_Broker (void);

    virtual ~_TAO_Configurator_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_Configurator_Proxy_Impl &select_proxy (
      ::Components::Configurator *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_Configurator_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_Configurator_Strategized_Proxy_Broker *the_TAO_Configurator_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_Configurator_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_Configurator_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl
  {
  public:
    _TAO_Configurator_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_Configurator_ThruPOA_Proxy_Impl (void) { }

    virtual void configure (
        CORBA_Object *_collocated_tao_target_,
        Components::CCMObject_ptr comp
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::WrongComponentType
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class StandardConfigurator;
  typedef StandardConfigurator *StandardConfigurator_ptr;
  // Forward Classes Declaration
  class _TAO_StandardConfigurator_ThruPOA_Proxy_Impl;
  class _TAO_StandardConfigurator_Strategized_Proxy_Broker;

  class  StandardConfigurator
    : public virtual POA_Components::Configurator
  {
  protected:
    StandardConfigurator (void);

  public:
    StandardConfigurator (const StandardConfigurator& rhs);
    virtual ~StandardConfigurator (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::StandardConfigurator *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void set_configuration (
        const Components::ConfigValues & descr
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void set_configuration_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void configure_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_StandardConfigurator_Strategized_Proxy_Broker : public virtual ::Components::_TAO_StandardConfigurator_Proxy_Broker
  {
  public:
    _TAO_StandardConfigurator_Strategized_Proxy_Broker (void);

    virtual ~_TAO_StandardConfigurator_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_StandardConfigurator_Proxy_Impl &select_proxy (
      ::Components::StandardConfigurator *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_StandardConfigurator_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_StandardConfigurator_Strategized_Proxy_Broker *the_TAO_StandardConfigurator_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_StandardConfigurator_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_StandardConfigurator_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl,
    public virtual ::POA_Components::_TAO_Configurator_ThruPOA_Proxy_Impl
  {
  public:
    _TAO_StandardConfigurator_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_StandardConfigurator_ThruPOA_Proxy_Impl (void) { }

    virtual void set_configuration (
        CORBA_Object *_collocated_tao_target_,
        const Components::ConfigValues & descr
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class HomeConfiguration;
  typedef HomeConfiguration *HomeConfiguration_ptr;
  // Forward Classes Declaration
  class _TAO_HomeConfiguration_ThruPOA_Proxy_Impl;
  class _TAO_HomeConfiguration_Strategized_Proxy_Broker;

  class  HomeConfiguration
    : public virtual POA_Components::CCMHome
  {
  protected:
    HomeConfiguration (void);

  public:
    HomeConfiguration (const HomeConfiguration& rhs);
    virtual ~HomeConfiguration (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::HomeConfiguration *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void set_configurator (
        Components::Configurator_ptr cfg
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void set_configurator_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void set_configuration_values (
        const Components::ConfigValues & config
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void set_configuration_values_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void complete_component_configuration (
        CORBA::Boolean b
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void complete_component_configuration_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void disable_home_configuration (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void disable_home_configuration_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_component_def_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_home_def_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void remove_component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_HomeConfiguration_Strategized_Proxy_Broker : public virtual ::Components::_TAO_HomeConfiguration_Proxy_Broker
  {
  public:
    _TAO_HomeConfiguration_Strategized_Proxy_Broker (void);

    virtual ~_TAO_HomeConfiguration_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_HomeConfiguration_Proxy_Impl &select_proxy (
      ::Components::HomeConfiguration *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_HomeConfiguration_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_HomeConfiguration_Strategized_Proxy_Broker *the_TAO_HomeConfiguration_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_HomeConfiguration_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_HomeConfiguration_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl,
    public virtual ::POA_Components::_TAO_CCMHome_ThruPOA_Proxy_Impl
  {
  public:
    _TAO_HomeConfiguration_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_HomeConfiguration_ThruPOA_Proxy_Impl (void) { }

    virtual void set_configurator (
        CORBA_Object *_collocated_tao_target_,
        Components::Configurator_ptr cfg
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void set_configuration_values (
        CORBA_Object *_collocated_tao_target_,
        const Components::ConfigValues & config
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void complete_component_configuration (
        CORBA_Object *_collocated_tao_target_,
        CORBA::Boolean b
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void disable_home_configuration (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

  class CCMObject;
  typedef CCMObject *CCMObject_ptr;
  // Forward Classes Declaration
  class _TAO_CCMObject_ThruPOA_Proxy_Impl;
  class _TAO_CCMObject_Strategized_Proxy_Broker;

  class  CCMObject
    : public virtual POA_Components::Navigation,
      public virtual POA_Components::Receptacles,
      public virtual POA_Components::Events
  {
  protected:
    CCMObject (void);

  public:
    CCMObject (const CCMObject& rhs);
    virtual ~CCMObject (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _non_existent_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _interface_skel (
        TAO_ServerRequest &req,
        void *servant,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    static void _component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *servant_upcall
        ACE_ENV_ARG_DECL
      );

    virtual void _dispatch (
        TAO_ServerRequest &req,
        void *_servant_upcall
        ACE_ENV_ARG_DECL
      );

    ::Components::CCMObject *_this (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::CORBA::IRObject_ptr get_component_def (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_component_def_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::CCMHome_ptr get_ccm_home (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_ccm_home_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::PrimaryKeyBase * get_primary_key (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::NoKeyAvailable
      )) = 0;

    static void get_primary_key_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void configuration_complete (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidConfiguration
      )) = 0;

    static void configuration_complete_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual void remove (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::RemoveFailure
      )) = 0;

    static void remove_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

    virtual ::Components::ComponentPortDescription * get_all_ports (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_all_ports_skel (
        TAO_ServerRequest &_tao_req,
        void *_tao_servant,
        void *_tao_servant_upcall
        ACE_ENV_ARG_DECL
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void provide_facet_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_all_facets_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_named_facets_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void same_component_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void connect_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void disconnect_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_connections_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_all_receptacles_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_named_receptacles_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_consumer_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void subscribe_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void unsubscribe_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void connect_consumer_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void disconnect_consumer_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_all_consumers_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_named_consumers_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_all_emitters_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_named_emitters_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_all_publishers_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:2201

    static void get_named_publishers_skel (
        TAO_ServerRequest &req,
        void *obj,
        void *context
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );


  };


  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

  class  _TAO_CCMObject_Strategized_Proxy_Broker : public virtual ::Components::_TAO_CCMObject_Proxy_Broker
  {
  public:
    _TAO_CCMObject_Strategized_Proxy_Broker (void);

    virtual ~_TAO_CCMObject_Strategized_Proxy_Broker (void);

    virtual ::Components::_TAO_CCMObject_Proxy_Impl &select_proxy (
      ::Components::CCMObject *object
      ACE_ENV_ARG_DECL
    );

  private:
    // Helper methods that takes care to create the proxy
    // as soon as their use is necessary.
    void create_proxy (
      int collocation_strategy
      ACE_ENV_ARG_DECL
    );

    // Caches the proxy implementations. The proxy implementation
    // are totally stateless, and those can be shared by all the
    // instances of a given IDL interface type.
    ::Components::_TAO_CCMObject_Proxy_Impl
    *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

    TAO_SYNCH_MUTEX mutex_;
    // This funxtion is used to get an handle to the unique instance
    // of the Strategized Proxy Broker that is available for a given
    // interface.

  public:
    static _TAO_CCMObject_Strategized_Proxy_Broker *the_TAO_CCMObject_Strategized_Proxy_Broker (void);
  };


  //
  //            End Strategized Proxy Broker Declaration
  ///////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////////////////////
  //                    ThruPOA  Impl. Declaration
  //

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

  class  _TAO_CCMObject_ThruPOA_Proxy_Impl :
    public virtual ::Components::_TAO_CCMObject_Proxy_Impl,
    public virtual TAO_ThruPOA_Object_Proxy_Impl,
    public virtual ::POA_Components::_TAO_Navigation_ThruPOA_Proxy_Impl,
    public virtual ::POA_Components::_TAO_Receptacles_ThruPOA_Proxy_Impl,
    public virtual ::POA_Components::_TAO_Events_ThruPOA_Proxy_Impl
  {
  public:
    _TAO_CCMObject_ThruPOA_Proxy_Impl (void);

    virtual ~_TAO_CCMObject_ThruPOA_Proxy_Impl (void) { }

    virtual ::CORBA::IRObject_ptr get_component_def (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::CCMHome_ptr get_ccm_home (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual ::Components::PrimaryKeyBase * get_primary_key (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::NoKeyAvailable
      ));

    virtual void configuration_complete (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidConfiguration
      ));

    virtual void remove (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::RemoveFailure
      ));

    virtual ::Components::ComponentPortDescription * get_all_ports (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  };

  //
  //                ThruPOA  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_sh.cpp:46

    TAO_NAMESPACE  Transaction
  {

  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_sh.cpp:81

  }
  TAO_NAMESPACE_CLOSE // module Components::Transaction

// TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_sh.cpp:46

    TAO_NAMESPACE  Deployment
  {
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

    class ComponentInstallation;
    typedef ComponentInstallation *ComponentInstallation_ptr;
    // Forward Classes Declaration
    class _TAO_ComponentInstallation_ThruPOA_Proxy_Impl;
    class _TAO_ComponentInstallation_Strategized_Proxy_Broker;

    class  ComponentInstallation
      : public virtual PortableServer::ServantBase
    {
    protected:
      ComponentInstallation (void);

    public:
      ComponentInstallation (const ComponentInstallation& rhs);
      virtual ~ComponentInstallation (void);


      virtual CORBA::Boolean _is_a (
          const char* logical_type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );

      virtual void* _downcast (
          const char* logical_type_id
        );

      static void _is_a_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _non_existent_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _interface_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _component_skel (
          TAO_ServerRequest &req,
          void *obj,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      virtual void _dispatch (
          TAO_ServerRequest &req,
          void *_servant_upcall
          ACE_ENV_ARG_DECL
        );

      ::Components::Deployment::ComponentInstallation *_this (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        );

      virtual const char* _interface_repository_id (void) const;

      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void install (
          const char * implUUID,
          const char * component_loc
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidLocation
          , Components::Deployment::InstallationFailure
        )) = 0;

      static void install_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void replace (
          const char * implUUID,
          const char * component_loc
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidLocation
          , Components::Deployment::InstallationFailure
        )) = 0;

      static void replace_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void remove (
          const char * implUUID
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::UnknownImplId
          , Components::RemoveFailure
        )) = 0;

      static void remove_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual char * get_implementation (
          const char * implUUID
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::UnknownImplId
          , Components::Deployment::InstallationFailure
        )) = 0;

      static void get_implementation_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );


    };


    ///////////////////////////////////////////////////////////////////////
    //               Strategized Proxy Broker Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

    class  _TAO_ComponentInstallation_Strategized_Proxy_Broker : public virtual ::Components::Deployment::_TAO_ComponentInstallation_Proxy_Broker
    {
    public:
      _TAO_ComponentInstallation_Strategized_Proxy_Broker (void);

      virtual ~_TAO_ComponentInstallation_Strategized_Proxy_Broker (void);

      virtual ::Components::Deployment::_TAO_ComponentInstallation_Proxy_Impl &select_proxy (
        ::Components::Deployment::ComponentInstallation *object
        ACE_ENV_ARG_DECL
      );

    private:
      // Helper methods that takes care to create the proxy
      // as soon as their use is necessary.
      void create_proxy (
        int collocation_strategy
        ACE_ENV_ARG_DECL
      );

      // Caches the proxy implementations. The proxy implementation
      // are totally stateless, and those can be shared by all the
      // instances of a given IDL interface type.
      ::Components::Deployment::_TAO_ComponentInstallation_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

      TAO_SYNCH_MUTEX mutex_;
      // This funxtion is used to get an handle to the unique instance
      // of the Strategized Proxy Broker that is available for a given
      // interface.

    public:
      static _TAO_ComponentInstallation_Strategized_Proxy_Broker *the_TAO_ComponentInstallation_Strategized_Proxy_Broker (void);
    };


    //
    //            End Strategized Proxy Broker Declaration
    ///////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////
    //                    ThruPOA  Impl. Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

    class  _TAO_ComponentInstallation_ThruPOA_Proxy_Impl :
      public virtual ::Components::Deployment::_TAO_ComponentInstallation_Proxy_Impl,
      public virtual TAO_ThruPOA_Object_Proxy_Impl
    {
    public:
      _TAO_ComponentInstallation_ThruPOA_Proxy_Impl (void);

      virtual ~_TAO_ComponentInstallation_ThruPOA_Proxy_Impl (void) { }

      virtual void install (
          CORBA_Object *_collocated_tao_target_,
          const char * implUUID,
          const char * component_loc
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidLocation
          , Components::Deployment::InstallationFailure
        ));

      virtual void replace (
          CORBA_Object *_collocated_tao_target_,
          const char * implUUID,
          const char * component_loc
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidLocation
          , Components::Deployment::InstallationFailure
        ));

      virtual void remove (
          CORBA_Object *_collocated_tao_target_,
          const char * implUUID
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::UnknownImplId
          , Components::RemoveFailure
        ));

      virtual char * get_implementation (
          CORBA_Object *_collocated_tao_target_,
          const char * implUUID
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::UnknownImplId
          , Components::Deployment::InstallationFailure
        ));


    };

    //
    //                ThruPOA  Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////


    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

    class Assembly;
    typedef Assembly *Assembly_ptr;
    // Forward Classes Declaration
    class _TAO_Assembly_ThruPOA_Proxy_Impl;
    class _TAO_Assembly_Strategized_Proxy_Broker;

    class  Assembly
      : public virtual PortableServer::ServantBase
    {
    protected:
      Assembly (void);

    public:
      Assembly (const Assembly& rhs);
      virtual ~Assembly (void);


      virtual CORBA::Boolean _is_a (
          const char* logical_type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );

      virtual void* _downcast (
          const char* logical_type_id
        );

      static void _is_a_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _non_existent_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _interface_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _component_skel (
          TAO_ServerRequest &req,
          void *obj,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      virtual void _dispatch (
          TAO_ServerRequest &req,
          void *_servant_upcall
          ACE_ENV_ARG_DECL
        );

      ::Components::Deployment::Assembly *_this (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        );

      virtual const char* _interface_repository_id (void) const;

      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void build (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void build_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void tear_down (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        )) = 0;

      static void tear_down_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::AssemblyState get_state (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void get_state_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );


    };


    ///////////////////////////////////////////////////////////////////////
    //               Strategized Proxy Broker Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

    class  _TAO_Assembly_Strategized_Proxy_Broker : public virtual ::Components::Deployment::_TAO_Assembly_Proxy_Broker
    {
    public:
      _TAO_Assembly_Strategized_Proxy_Broker (void);

      virtual ~_TAO_Assembly_Strategized_Proxy_Broker (void);

      virtual ::Components::Deployment::_TAO_Assembly_Proxy_Impl &select_proxy (
        ::Components::Deployment::Assembly *object
        ACE_ENV_ARG_DECL
      );

    private:
      // Helper methods that takes care to create the proxy
      // as soon as their use is necessary.
      void create_proxy (
        int collocation_strategy
        ACE_ENV_ARG_DECL
      );

      // Caches the proxy implementations. The proxy implementation
      // are totally stateless, and those can be shared by all the
      // instances of a given IDL interface type.
      ::Components::Deployment::_TAO_Assembly_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

      TAO_SYNCH_MUTEX mutex_;
      // This funxtion is used to get an handle to the unique instance
      // of the Strategized Proxy Broker that is available for a given
      // interface.

    public:
      static _TAO_Assembly_Strategized_Proxy_Broker *the_TAO_Assembly_Strategized_Proxy_Broker (void);
    };


    //
    //            End Strategized Proxy Broker Declaration
    ///////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////
    //                    ThruPOA  Impl. Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

    class  _TAO_Assembly_ThruPOA_Proxy_Impl :
      public virtual ::Components::Deployment::_TAO_Assembly_Proxy_Impl,
      public virtual TAO_ThruPOA_Object_Proxy_Impl
    {
    public:
      _TAO_Assembly_ThruPOA_Proxy_Impl (void);

      virtual ~_TAO_Assembly_ThruPOA_Proxy_Impl (void) { }

      virtual void build (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual void tear_down (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        ));

      virtual ::Components::Deployment::AssemblyState get_state (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));


    };

    //
    //                ThruPOA  Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////


    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

    class AssemblyFactory;
    typedef AssemblyFactory *AssemblyFactory_ptr;
    // Forward Classes Declaration
    class _TAO_AssemblyFactory_ThruPOA_Proxy_Impl;
    class _TAO_AssemblyFactory_Strategized_Proxy_Broker;

    class  AssemblyFactory
      : public virtual PortableServer::ServantBase
    {
    protected:
      AssemblyFactory (void);

    public:
      AssemblyFactory (const AssemblyFactory& rhs);
      virtual ~AssemblyFactory (void);


      virtual CORBA::Boolean _is_a (
          const char* logical_type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );

      virtual void* _downcast (
          const char* logical_type_id
        );

      static void _is_a_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _non_existent_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _interface_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _component_skel (
          TAO_ServerRequest &req,
          void *obj,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      virtual void _dispatch (
          TAO_ServerRequest &req,
          void *_servant_upcall
          ACE_ENV_ARG_DECL
        );

      ::Components::Deployment::AssemblyFactory *_this (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        );

      virtual const char* _interface_repository_id (void) const;

      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Cookie * create (
          const char * assembly_loc
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidLocation
          , Components::CreateFailure
        )) = 0;

      static void create_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::Assembly_ptr lookup (
          Components::Cookie * c
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidAssembly
        )) = 0;

      static void lookup_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void destroy (
          Components::Cookie * c
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidAssembly
          , Components::RemoveFailure
        )) = 0;

      static void destroy_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );


    };


    ///////////////////////////////////////////////////////////////////////
    //               Strategized Proxy Broker Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

    class  _TAO_AssemblyFactory_Strategized_Proxy_Broker : public virtual ::Components::Deployment::_TAO_AssemblyFactory_Proxy_Broker
    {
    public:
      _TAO_AssemblyFactory_Strategized_Proxy_Broker (void);

      virtual ~_TAO_AssemblyFactory_Strategized_Proxy_Broker (void);

      virtual ::Components::Deployment::_TAO_AssemblyFactory_Proxy_Impl &select_proxy (
        ::Components::Deployment::AssemblyFactory *object
        ACE_ENV_ARG_DECL
      );

    private:
      // Helper methods that takes care to create the proxy
      // as soon as their use is necessary.
      void create_proxy (
        int collocation_strategy
        ACE_ENV_ARG_DECL
      );

      // Caches the proxy implementations. The proxy implementation
      // are totally stateless, and those can be shared by all the
      // instances of a given IDL interface type.
      ::Components::Deployment::_TAO_AssemblyFactory_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

      TAO_SYNCH_MUTEX mutex_;
      // This funxtion is used to get an handle to the unique instance
      // of the Strategized Proxy Broker that is available for a given
      // interface.

    public:
      static _TAO_AssemblyFactory_Strategized_Proxy_Broker *the_TAO_AssemblyFactory_Strategized_Proxy_Broker (void);
    };


    //
    //            End Strategized Proxy Broker Declaration
    ///////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////
    //                    ThruPOA  Impl. Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

    class  _TAO_AssemblyFactory_ThruPOA_Proxy_Impl :
      public virtual ::Components::Deployment::_TAO_AssemblyFactory_Proxy_Impl,
      public virtual TAO_ThruPOA_Object_Proxy_Impl
    {
    public:
      _TAO_AssemblyFactory_ThruPOA_Proxy_Impl (void);

      virtual ~_TAO_AssemblyFactory_ThruPOA_Proxy_Impl (void) { }

      virtual ::Components::Cookie * create (
          CORBA_Object *_collocated_tao_target_,
          const char * assembly_loc
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidLocation
          , Components::CreateFailure
        ));

      virtual ::Components::Deployment::Assembly_ptr lookup (
          CORBA_Object *_collocated_tao_target_,
          Components::Cookie * c
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidAssembly
        ));

      virtual void destroy (
          CORBA_Object *_collocated_tao_target_,
          Components::Cookie * c
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::InvalidAssembly
          , Components::RemoveFailure
        ));


    };

    //
    //                ThruPOA  Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////


    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

    class ServerActivator;
    typedef ServerActivator *ServerActivator_ptr;
    // Forward Classes Declaration
    class _TAO_ServerActivator_ThruPOA_Proxy_Impl;
    class _TAO_ServerActivator_Strategized_Proxy_Broker;

    class  ServerActivator
      : public virtual PortableServer::ServantBase
    {
    protected:
      ServerActivator (void);

    public:
      ServerActivator (const ServerActivator& rhs);
      virtual ~ServerActivator (void);


      virtual CORBA::Boolean _is_a (
          const char* logical_type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );

      virtual void* _downcast (
          const char* logical_type_id
        );

      static void _is_a_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _non_existent_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _interface_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _component_skel (
          TAO_ServerRequest &req,
          void *obj,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      virtual void _dispatch (
          TAO_ServerRequest &req,
          void *_servant_upcall
          ACE_ENV_ARG_DECL
        );

      ::Components::Deployment::ServerActivator *_this (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        );

      virtual const char* _interface_repository_id (void) const;

      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::ComponentServer_ptr create_component_server (
          const Components::ConfigValues & config
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::CreateFailure
          , Components::InvalidConfiguration
        )) = 0;

      static void create_component_server_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void remove_component_server (
          Components::Deployment::ComponentServer_ptr server
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        )) = 0;

      static void remove_component_server_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::ComponentServers * get_component_servers (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void get_component_servers_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );


    };


    ///////////////////////////////////////////////////////////////////////
    //               Strategized Proxy Broker Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

    class  _TAO_ServerActivator_Strategized_Proxy_Broker : public virtual ::Components::Deployment::_TAO_ServerActivator_Proxy_Broker
    {
    public:
      _TAO_ServerActivator_Strategized_Proxy_Broker (void);

      virtual ~_TAO_ServerActivator_Strategized_Proxy_Broker (void);

      virtual ::Components::Deployment::_TAO_ServerActivator_Proxy_Impl &select_proxy (
        ::Components::Deployment::ServerActivator *object
        ACE_ENV_ARG_DECL
      );

    private:
      // Helper methods that takes care to create the proxy
      // as soon as their use is necessary.
      void create_proxy (
        int collocation_strategy
        ACE_ENV_ARG_DECL
      );

      // Caches the proxy implementations. The proxy implementation
      // are totally stateless, and those can be shared by all the
      // instances of a given IDL interface type.
      ::Components::Deployment::_TAO_ServerActivator_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

      TAO_SYNCH_MUTEX mutex_;
      // This funxtion is used to get an handle to the unique instance
      // of the Strategized Proxy Broker that is available for a given
      // interface.

    public:
      static _TAO_ServerActivator_Strategized_Proxy_Broker *the_TAO_ServerActivator_Strategized_Proxy_Broker (void);
    };


    //
    //            End Strategized Proxy Broker Declaration
    ///////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////
    //                    ThruPOA  Impl. Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

    class  _TAO_ServerActivator_ThruPOA_Proxy_Impl :
      public virtual ::Components::Deployment::_TAO_ServerActivator_Proxy_Impl,
      public virtual TAO_ThruPOA_Object_Proxy_Impl
    {
    public:
      _TAO_ServerActivator_ThruPOA_Proxy_Impl (void);

      virtual ~_TAO_ServerActivator_ThruPOA_Proxy_Impl (void) { }

      virtual ::Components::Deployment::ComponentServer_ptr create_component_server (
          CORBA_Object *_collocated_tao_target_,
          const Components::ConfigValues & config
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::CreateFailure
          , Components::InvalidConfiguration
        ));

      virtual void remove_component_server (
          CORBA_Object *_collocated_tao_target_,
          Components::Deployment::ComponentServer_ptr server
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        ));

      virtual ::Components::Deployment::ComponentServers * get_component_servers (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));


    };

    //
    //                ThruPOA  Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////


    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

    class ComponentServer;
    typedef ComponentServer *ComponentServer_ptr;
    // Forward Classes Declaration
    class _TAO_ComponentServer_ThruPOA_Proxy_Impl;
    class _TAO_ComponentServer_Strategized_Proxy_Broker;

    class  ComponentServer
      : public virtual PortableServer::ServantBase
    {
    protected:
      ComponentServer (void);

    public:
      ComponentServer (const ComponentServer& rhs);
      virtual ~ComponentServer (void);


      virtual CORBA::Boolean _is_a (
          const char* logical_type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );

      virtual void* _downcast (
          const char* logical_type_id
        );

      static void _is_a_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _non_existent_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _interface_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _component_skel (
          TAO_ServerRequest &req,
          void *obj,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      virtual void _dispatch (
          TAO_ServerRequest &req,
          void *_servant_upcall
          ACE_ENV_ARG_DECL
        );

      ::Components::Deployment::ComponentServer *_this (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        );

      virtual const char* _interface_repository_id (void) const;

      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::ConfigValues * configuration (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void _get_configuration_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::ServerActivator_ptr get_server_activator (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void get_server_activator_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::Container_ptr create_container (
          const Components::ConfigValues & config
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::CreateFailure
          , Components::InvalidConfiguration
        )) = 0;

      static void create_container_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void remove_container (
          Components::Deployment::Container_ptr cref
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        )) = 0;

      static void remove_container_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::Containers * get_containers (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void get_containers_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void remove (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        )) = 0;

      static void remove_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );


    };


    ///////////////////////////////////////////////////////////////////////
    //               Strategized Proxy Broker Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

    class  _TAO_ComponentServer_Strategized_Proxy_Broker : public virtual ::Components::Deployment::_TAO_ComponentServer_Proxy_Broker
    {
    public:
      _TAO_ComponentServer_Strategized_Proxy_Broker (void);

      virtual ~_TAO_ComponentServer_Strategized_Proxy_Broker (void);

      virtual ::Components::Deployment::_TAO_ComponentServer_Proxy_Impl &select_proxy (
        ::Components::Deployment::ComponentServer *object
        ACE_ENV_ARG_DECL
      );

    private:
      // Helper methods that takes care to create the proxy
      // as soon as their use is necessary.
      void create_proxy (
        int collocation_strategy
        ACE_ENV_ARG_DECL
      );

      // Caches the proxy implementations. The proxy implementation
      // are totally stateless, and those can be shared by all the
      // instances of a given IDL interface type.
      ::Components::Deployment::_TAO_ComponentServer_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

      TAO_SYNCH_MUTEX mutex_;
      // This funxtion is used to get an handle to the unique instance
      // of the Strategized Proxy Broker that is available for a given
      // interface.

    public:
      static _TAO_ComponentServer_Strategized_Proxy_Broker *the_TAO_ComponentServer_Strategized_Proxy_Broker (void);
    };


    //
    //            End Strategized Proxy Broker Declaration
    ///////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////
    //                    ThruPOA  Impl. Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

    class  _TAO_ComponentServer_ThruPOA_Proxy_Impl :
      public virtual ::Components::Deployment::_TAO_ComponentServer_Proxy_Impl,
      public virtual TAO_ThruPOA_Object_Proxy_Impl
    {
    public:
      _TAO_ComponentServer_ThruPOA_Proxy_Impl (void);

      virtual ~_TAO_ComponentServer_ThruPOA_Proxy_Impl (void) { }

      virtual ::Components::ConfigValues * configuration (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual ::Components::Deployment::ServerActivator_ptr get_server_activator (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual ::Components::Deployment::Container_ptr create_container (
          CORBA_Object *_collocated_tao_target_,
          const Components::ConfigValues & config
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::CreateFailure
          , Components::InvalidConfiguration
        ));

      virtual void remove_container (
          CORBA_Object *_collocated_tao_target_,
          Components::Deployment::Container_ptr cref
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        ));

      virtual ::Components::Deployment::Containers * get_containers (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual void remove (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        ));


    };

    //
    //                ThruPOA  Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////


    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_sh.cpp:82

    class Container;
    typedef Container *Container_ptr;
    // Forward Classes Declaration
    class _TAO_Container_ThruPOA_Proxy_Impl;
    class _TAO_Container_Strategized_Proxy_Broker;

    class  Container
      : public virtual PortableServer::ServantBase
    {
    protected:
      Container (void);

    public:
      Container (const Container& rhs);
      virtual ~Container (void);


      virtual CORBA::Boolean _is_a (
          const char* logical_type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );

      virtual void* _downcast (
          const char* logical_type_id
        );

      static void _is_a_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _non_existent_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _interface_skel (
          TAO_ServerRequest &req,
          void *servant,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      static void _component_skel (
          TAO_ServerRequest &req,
          void *obj,
          void *servant_upcall
          ACE_ENV_ARG_DECL
        );

      virtual void _dispatch (
          TAO_ServerRequest &req,
          void *_servant_upcall
          ACE_ENV_ARG_DECL
        );

      ::Components::Deployment::Container *_this (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        );

      virtual const char* _interface_repository_id (void) const;

      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::ConfigValues * configuration (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void _get_configuration_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::Deployment::ComponentServer_ptr get_component_server (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void get_component_server_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::CCMHome_ptr install_home (
          const char * id,
          const char * entrypt,
          const Components::ConfigValues & config
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::UnknownImplId
          , Components::Deployment::ImplEntryPointNotFound
          , Components::Deployment::InstallationFailure
          , Components::InvalidConfiguration
        )) = 0;

      static void install_home_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void remove_home (
          Components::CCMHome_ptr href
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        )) = 0;

      static void remove_home_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual ::Components::CCMHomes * get_homes (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;

      static void get_homes_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_sh.cpp:47

      virtual void remove (

        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        )) = 0;

      static void remove_skel (
          TAO_ServerRequest &_tao_req,
          void *_tao_servant,
          void *_tao_servant_upcall
          ACE_ENV_ARG_DECL
        );


    };


    ///////////////////////////////////////////////////////////////////////
    //               Strategized Proxy Broker Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

    class  _TAO_Container_Strategized_Proxy_Broker : public virtual ::Components::Deployment::_TAO_Container_Proxy_Broker
    {
    public:
      _TAO_Container_Strategized_Proxy_Broker (void);

      virtual ~_TAO_Container_Strategized_Proxy_Broker (void);

      virtual ::Components::Deployment::_TAO_Container_Proxy_Impl &select_proxy (
        ::Components::Deployment::Container *object
        ACE_ENV_ARG_DECL
      );

    private:
      // Helper methods that takes care to create the proxy
      // as soon as their use is necessary.
      void create_proxy (
        int collocation_strategy
        ACE_ENV_ARG_DECL
      );

      // Caches the proxy implementations. The proxy implementation
      // are totally stateless, and those can be shared by all the
      // instances of a given IDL interface type.
      ::Components::Deployment::_TAO_Container_Proxy_Impl
      *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

      TAO_SYNCH_MUTEX mutex_;
      // This funxtion is used to get an handle to the unique instance
      // of the Strategized Proxy Broker that is available for a given
      // interface.

    public:
      static _TAO_Container_Strategized_Proxy_Broker *the_TAO_Container_Strategized_Proxy_Broker (void);
    };


    //
    //            End Strategized Proxy Broker Declaration
    ///////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////
    //                    ThruPOA  Impl. Declaration
    //

    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

    class  _TAO_Container_ThruPOA_Proxy_Impl :
      public virtual ::Components::Deployment::_TAO_Container_Proxy_Impl,
      public virtual TAO_ThruPOA_Object_Proxy_Impl
    {
    public:
      _TAO_Container_ThruPOA_Proxy_Impl (void);

      virtual ~_TAO_Container_ThruPOA_Proxy_Impl (void) { }

      virtual ::Components::ConfigValues * configuration (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual ::Components::Deployment::ComponentServer_ptr get_component_server (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual ::Components::CCMHome_ptr install_home (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * entrypt,
          const Components::ConfigValues & config
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::Deployment::UnknownImplId
          , Components::Deployment::ImplEntryPointNotFound
          , Components::Deployment::InstallationFailure
          , Components::InvalidConfiguration
        ));

      virtual void remove_home (
          CORBA_Object *_collocated_tao_target_,
          Components::CCMHome_ptr href
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        ));

      virtual ::Components::CCMHomes * get_homes (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));

      virtual void remove (
          CORBA_Object *_collocated_tao_target_
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
          , Components::RemoveFailure
        ));


    };

    //
    //                ThruPOA  Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////



  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_sh.cpp:81

  }
  TAO_NAMESPACE_CLOSE // module Components::Deployment


// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_sh.cpp:81

}
TAO_NAMESPACE_CLOSE // module Components


// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:1038

#include "Component_BaseS_T.h"

#if defined (__ACE_INLINE__)
#include "Component_BaseS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */
