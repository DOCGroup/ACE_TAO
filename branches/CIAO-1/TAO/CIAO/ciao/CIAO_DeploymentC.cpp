// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:320

#include "CIAO_DeploymentC.h"

#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "CIAO_DeploymentC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_UUID[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f5555), 
  ACE_NTOHL (0x49443a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Components/Deployment/UUID:1.0
  5,
  ACE_NTOHL (0x55554944), 
  ACE_NTOHL (0x0),  // name = UUID
  CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_UUID (
    CORBA::tk_alias,
    sizeof (_oc_Components_Deployment_UUID),
    (char *) &_oc_Components_Deployment_UUID,
    0,
    sizeof (Components::Deployment::UUID)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_UUID,
    &_tc_TAO_tc_Components_Deployment_UUID
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_Location[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  47,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f4c6f), 
  ACE_NTOHL (0x63617469), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Components/Deployment/Location:1.0
  9,
  ACE_NTOHL (0x4c6f6361), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = Location
  CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_Location (
    CORBA::tk_alias,
    sizeof (_oc_Components_Deployment_Location),
    (char *) &_oc_Components_Deployment_Location,
    0,
    sizeof (Components::Deployment::Location)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Location,
    &_tc_TAO_tc_Components_Deployment_Location
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_AssemblyState[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  52,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f4173), 
  ACE_NTOHL (0x73656d62), 
  ACE_NTOHL (0x6c795374), 
  ACE_NTOHL (0x6174653a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Components/Deployment/AssemblyState:1.0
  14,
  ACE_NTOHL (0x41737365), 
  ACE_NTOHL (0x6d626c79), 
  ACE_NTOHL (0x53746174), 
  ACE_NTOHL (0x65000000),  // name = AssemblyState
  2, // member count
  9,
  ACE_NTOHL (0x494e4143), 
  ACE_NTOHL (0x54495645), 
  ACE_NTOHL (0x0),  // name = INACTIVE
  10,
  ACE_NTOHL (0x494e5345), 
  ACE_NTOHL (0x52564943), 
  ACE_NTOHL (0x45000000),  // name = INSERVICE
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_AssemblyState (
    CORBA::tk_enum,
    sizeof (_oc_Components_Deployment_AssemblyState),
    (char *) &_oc_Components_Deployment_AssemblyState,
    0,
    sizeof (Components::Deployment::AssemblyState)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_AssemblyState,
    &_tc_TAO_tc_Components_Deployment_AssemblyState
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::Deployment::UnknownImplId::UnknownImplId (void)
  : CORBA_UserException (
        "IDL:omg.org/Components/Deployment/UnknownImplId:1.0",
        "UnknownImplId"
      )
{
}

Components::Deployment::UnknownImplId::~UnknownImplId (void)
{
}

Components::Deployment::UnknownImplId::UnknownImplId (const ::Components::Deployment::UnknownImplId &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::Deployment::UnknownImplId&
Components::Deployment::UnknownImplId::operator= (const ::Components::Deployment::UnknownImplId &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::Deployment::UnknownImplId::_tao_any_destructor (void *_tao_void_pointer)
{
  UnknownImplId *tmp = ACE_static_cast (UnknownImplId*, _tao_void_pointer);
  delete tmp;
}

Components::Deployment::UnknownImplId *
Components::Deployment::UnknownImplId::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/Components/Deployment/UnknownImplId:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (UnknownImplId *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::Deployment::UnknownImplId::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::Deployment::UnknownImplId, 0);
  return retval;
}

CORBA::Exception *
Components::Deployment::UnknownImplId::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::Deployment::UnknownImplId (*this),
      0
    );
  return result;
}

void Components::Deployment::UnknownImplId::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::Deployment::UnknownImplId::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::Deployment::UnknownImplId::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::Deployment::UnknownImplId::_type (void) const
{
  return ::Components::Deployment::_tc_UnknownImplId;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_UnknownImplId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  52,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f556e), 
  ACE_NTOHL (0x6b6e6f77), 
  ACE_NTOHL (0x6e496d70), 
  ACE_NTOHL (0x6c49643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Components/Deployment/UnknownImplId:1.0
  14,
  ACE_NTOHL (0x556e6b6e), 
  ACE_NTOHL (0x6f776e49), 
  ACE_NTOHL (0x6d706c49), 
  ACE_NTOHL (0x64000000),  // name = UnknownImplId
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_UnknownImplId (
    CORBA::tk_except,
    sizeof (_oc_Components_Deployment_UnknownImplId),
    (char *) &_oc_Components_Deployment_UnknownImplId,
    0,
    sizeof (Components::Deployment::UnknownImplId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_UnknownImplId,
    &_tc_TAO_tc_Components_Deployment_UnknownImplId
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::Deployment::InvalidLocation::InvalidLocation (void)
  : CORBA_UserException (
        "IDL:omg.org/Components/Deployment/InvalidLocation:1.0",
        "InvalidLocation"
      )
{
}

Components::Deployment::InvalidLocation::~InvalidLocation (void)
{
}

Components::Deployment::InvalidLocation::InvalidLocation (const ::Components::Deployment::InvalidLocation &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::Deployment::InvalidLocation&
Components::Deployment::InvalidLocation::operator= (const ::Components::Deployment::InvalidLocation &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::Deployment::InvalidLocation::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidLocation *tmp = ACE_static_cast (InvalidLocation*, _tao_void_pointer);
  delete tmp;
}

Components::Deployment::InvalidLocation *
Components::Deployment::InvalidLocation::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/Components/Deployment/InvalidLocation:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidLocation *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::Deployment::InvalidLocation::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::Deployment::InvalidLocation, 0);
  return retval;
}

CORBA::Exception *
Components::Deployment::InvalidLocation::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::Deployment::InvalidLocation (*this),
      0
    );
  return result;
}

void Components::Deployment::InvalidLocation::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::Deployment::InvalidLocation::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::Deployment::InvalidLocation::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::Deployment::InvalidLocation::_type (void) const
{
  return ::Components::Deployment::_tc_InvalidLocation;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_InvalidLocation[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f496e), 
  ACE_NTOHL (0x76616c69), 
  ACE_NTOHL (0x644c6f63), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/InvalidLocation:1.0
  16,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c69644c), 
  ACE_NTOHL (0x6f636174), 
  ACE_NTOHL (0x696f6e00),  // name = InvalidLocation
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_InvalidLocation (
    CORBA::tk_except,
    sizeof (_oc_Components_Deployment_InvalidLocation),
    (char *) &_oc_Components_Deployment_InvalidLocation,
    0,
    sizeof (Components::Deployment::InvalidLocation)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_InvalidLocation,
    &_tc_TAO_tc_Components_Deployment_InvalidLocation
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::Deployment::InstallationFailure::InstallationFailure (void)
  : CORBA_UserException (
        "IDL:omg.org/Components/Deployment/InstallationFailure:1.0",
        "InstallationFailure"
      )
{
}

Components::Deployment::InstallationFailure::~InstallationFailure (void)
{
}

Components::Deployment::InstallationFailure::InstallationFailure (const ::Components::Deployment::InstallationFailure &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = _tao_excp.reason;
}

Components::Deployment::InstallationFailure&
Components::Deployment::InstallationFailure::operator= (const ::Components::Deployment::InstallationFailure &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  return *this;
}

void Components::Deployment::InstallationFailure::_tao_any_destructor (void *_tao_void_pointer)
{
  InstallationFailure *tmp = ACE_static_cast (InstallationFailure*, _tao_void_pointer);
  delete tmp;
}

Components::Deployment::InstallationFailure *
Components::Deployment::InstallationFailure::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/Components/Deployment/InstallationFailure:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (InstallationFailure *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::Deployment::InstallationFailure::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::Deployment::InstallationFailure, 0);
  return retval;
}

CORBA::Exception *
Components::Deployment::InstallationFailure::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::Deployment::InstallationFailure (*this),
      0
    );
  return result;
}

void Components::Deployment::InstallationFailure::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::Deployment::InstallationFailure::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::Deployment::InstallationFailure::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ctor.cpp:66

Components::Deployment::InstallationFailure::InstallationFailure (
    Components::FailureReason _tao_reason
  )  : CORBA_UserException (
        "IDL:omg.org/Components/Deployment/InstallationFailure:1.0",
        "InstallationFailure"
      )
{
  this->reason = _tao_reason;
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::Deployment::InstallationFailure::_type (void) const
{
  return ::Components::Deployment::_tc_InstallationFailure;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_InstallationFailure[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  58,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f496e), 
  ACE_NTOHL (0x7374616c), 
  ACE_NTOHL (0x6c617469), 
  ACE_NTOHL (0x6f6e4661), 
  ACE_NTOHL (0x696c7572), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/InstallationFailure:1.0
  20,
  ACE_NTOHL (0x496e7374), 
  ACE_NTOHL (0x616c6c61), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x4661696c), 
  ACE_NTOHL (0x75726500),  // name = InstallationFailure
  1, // member count
  7,
  ACE_NTOHL (0x72656173), 
  ACE_NTOHL (0x6f6e0000),  // name = reason
  CORBA::tk_alias, // typecode kind for typedefs
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    41,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74732f46), 
    ACE_NTOHL (0x61696c75), 
    ACE_NTOHL (0x72655265), 
    ACE_NTOHL (0x61736f6e), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/Components/FailureReason:1.0
    14,
    ACE_NTOHL (0x4661696c), 
    ACE_NTOHL (0x75726552), 
    ACE_NTOHL (0x6561736f), 
    ACE_NTOHL (0x6e000000),  // name = FailureReason
    CORBA::tk_ulong,


};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_InstallationFailure (
    CORBA::tk_except,
    sizeof (_oc_Components_Deployment_InstallationFailure),
    (char *) &_oc_Components_Deployment_InstallationFailure,
    0,
    sizeof (Components::Deployment::InstallationFailure)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_InstallationFailure,
    &_tc_TAO_tc_Components_Deployment_InstallationFailure
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::Deployment::InvalidAssembly::InvalidAssembly (void)
  : CORBA_UserException (
        "IDL:omg.org/Components/Deployment/InvalidAssembly:1.0",
        "InvalidAssembly"
      )
{
}

Components::Deployment::InvalidAssembly::~InvalidAssembly (void)
{
}

Components::Deployment::InvalidAssembly::InvalidAssembly (const ::Components::Deployment::InvalidAssembly &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::Deployment::InvalidAssembly&
Components::Deployment::InvalidAssembly::operator= (const ::Components::Deployment::InvalidAssembly &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::Deployment::InvalidAssembly::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidAssembly *tmp = ACE_static_cast (InvalidAssembly*, _tao_void_pointer);
  delete tmp;
}

Components::Deployment::InvalidAssembly *
Components::Deployment::InvalidAssembly::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/Components/Deployment/InvalidAssembly:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidAssembly *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::Deployment::InvalidAssembly::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::Deployment::InvalidAssembly, 0);
  return retval;
}

CORBA::Exception *
Components::Deployment::InvalidAssembly::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::Deployment::InvalidAssembly (*this),
      0
    );
  return result;
}

void Components::Deployment::InvalidAssembly::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::Deployment::InvalidAssembly::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::Deployment::InvalidAssembly::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::Deployment::InvalidAssembly::_type (void) const
{
  return ::Components::Deployment::_tc_InvalidAssembly;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_InvalidAssembly[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f496e), 
  ACE_NTOHL (0x76616c69), 
  ACE_NTOHL (0x64417373), 
  ACE_NTOHL (0x656d626c), 
  ACE_NTOHL (0x793a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/InvalidAssembly:1.0
  16,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c696441), 
  ACE_NTOHL (0x7373656d), 
  ACE_NTOHL (0x626c7900),  // name = InvalidAssembly
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_InvalidAssembly (
    CORBA::tk_except,
    sizeof (_oc_Components_Deployment_InvalidAssembly),
    (char *) &_oc_Components_Deployment_InvalidAssembly,
    0,
    sizeof (Components::Deployment::InvalidAssembly)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_InvalidAssembly,
    &_tc_TAO_tc_Components_Deployment_InvalidAssembly
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Deployment::ComponentInstallation::_tao_class_id = 0;

Components::Deployment::ComponentInstallation_ptr
tao_Components_Deployment_ComponentInstallation_duplicate (
    Components::Deployment::ComponentInstallation_ptr p
  )
{
  return Components::Deployment::ComponentInstallation::_duplicate (p);
}

void
tao_Components_Deployment_ComponentInstallation_release (
    Components::Deployment::ComponentInstallation_ptr p
  )
{
  CORBA::release (p);
}

Components::Deployment::ComponentInstallation_ptr
tao_Components_Deployment_ComponentInstallation_nil (
    void
  )
{
  return Components::Deployment::ComponentInstallation::_nil ();
}

Components::Deployment::ComponentInstallation_ptr
tao_Components_Deployment_ComponentInstallation_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Deployment::ComponentInstallation::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Deployment_ComponentInstallation_upcast (
    void *src
  )
{
  Components::Deployment::ComponentInstallation **tmp =
    ACE_static_cast (Components::Deployment::ComponentInstallation **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Deployment::ComponentInstallation_var
// *************************************************************

Components::Deployment::ComponentInstallation_var::ComponentInstallation_var (void)
  : ptr_ (ComponentInstallation::_nil ())
{}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::ptr (void) const
{
  return this->ptr_;
}

Components::Deployment::ComponentInstallation_var::ComponentInstallation_var (const ::Components::Deployment::ComponentInstallation_var &p)
  : TAO_Base_var (),
    ptr_ (ComponentInstallation::_duplicate (p.ptr ()))
{}

Components::Deployment::ComponentInstallation_var::~ComponentInstallation_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Deployment::ComponentInstallation_var &
Components::Deployment::ComponentInstallation_var::operator= (ComponentInstallation_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Deployment::ComponentInstallation_var &
Components::Deployment::ComponentInstallation_var::operator= (const ::Components::Deployment::ComponentInstallation_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Deployment::ComponentInstallation::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Deployment::ComponentInstallation_var::operator const ::Components::Deployment::ComponentInstallation_ptr &() const // cast
{
  return this->ptr_;
}

Components::Deployment::ComponentInstallation_var::operator ::Components::Deployment::ComponentInstallation_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::in (void) const
{
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr &
Components::Deployment::ComponentInstallation_var::inout (void)
{
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr &
Components::Deployment::ComponentInstallation_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::ComponentInstallation::_nil ();
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Deployment::ComponentInstallation_ptr val = this->ptr_;
  this->ptr_ = ::Components::Deployment::ComponentInstallation::_nil ();
  return val;
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::tao_duplicate (ComponentInstallation_ptr p)
{
  return ::Components::Deployment::ComponentInstallation::_duplicate (p);
}

void
Components::Deployment::ComponentInstallation_var::tao_release (ComponentInstallation_ptr p)
{
  CORBA::release (p);
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::tao_nil (void)
{
  return ::Components::Deployment::ComponentInstallation::_nil ();
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Deployment::ComponentInstallation::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Deployment::ComponentInstallation_var::tao_upcast (void *src)
{
  ComponentInstallation **tmp =
    ACE_static_cast (ComponentInstallation **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Deployment::ComponentInstallation_out
// *************************************************************

Components::Deployment::ComponentInstallation_out::ComponentInstallation_out (ComponentInstallation_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Deployment::ComponentInstallation::_nil ();
}

Components::Deployment::ComponentInstallation_out::ComponentInstallation_out (ComponentInstallation_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::ComponentInstallation::_nil ();
}

Components::Deployment::ComponentInstallation_out::ComponentInstallation_out (const ::Components::Deployment::ComponentInstallation_out &p)
  : ptr_ (ACE_const_cast (ComponentInstallation_out &, p).ptr_)
{}

::Components::Deployment::ComponentInstallation_out &
Components::Deployment::ComponentInstallation_out::operator= (const ::Components::Deployment::ComponentInstallation_out &p)
{
  this->ptr_ = ACE_const_cast (ComponentInstallation_out&, p).ptr_;
  return *this;
}

Components::Deployment::ComponentInstallation_out &
Components::Deployment::ComponentInstallation_out::operator= (const ::Components::Deployment::ComponentInstallation_var &p)
{
  this->ptr_ = ::Components::Deployment::ComponentInstallation::_duplicate (p.ptr ());
  return *this;
}

Components::Deployment::ComponentInstallation_out &
Components::Deployment::ComponentInstallation_out::operator= (ComponentInstallation_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Deployment::ComponentInstallation_out::operator ::Components::Deployment::ComponentInstallation_ptr &() // cast
{
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr &
Components::Deployment::ComponentInstallation_out::ptr (void)
{
  return this->ptr_;
}

::Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const char * implUUID,
      const char * component_loc);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install &);
  const char * implUUID_;
  const char * component_loc_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install::TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * implUUID,
    const char * component_loc    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    implUUID_ (implUUID),
    component_loc_ (component_loc)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (2);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<= implUUID_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  (*parameter_list)[len].argument <<= component_loc_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentInstallation_install_exceptiondata[] = 
  {
    Components::Deployment::_tc_InvalidLocation,
    Components::Deployment::_tc_InstallationFailure
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentInstallation_install_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const char * implUUID,
      const char * component_loc);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace &);
  const char * implUUID_;
  const char * component_loc_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace::TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * implUUID,
    const char * component_loc    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    implUUID_ (implUUID),
    component_loc_ (component_loc)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (2);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<= implUUID_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  (*parameter_list)[len].argument <<= component_loc_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentInstallation_replace_exceptiondata[] = 
  {
    Components::Deployment::_tc_InvalidLocation,
    Components::Deployment::_tc_InstallationFailure
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentInstallation_replace_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const char * implUUID);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove &);
  const char * implUUID_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove::TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * implUUID    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    implUUID_ (implUUID)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<= implUUID_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentInstallation_remove_exceptiondata[] = 
  {
    Components::Deployment::_tc_UnknownImplId,
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentInstallation_remove_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const char * implUUID);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (char * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation &);
  const char * implUUID_;
  
  char * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation::TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * implUUID    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    implUUID_ (implUUID)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<= implUUID_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentInstallation_get_implementation_exceptiondata[] = 
  {
    Components::Deployment::_tc_UnknownImplId,
    Components::Deployment::_tc_InstallationFailure
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentInstallation_get_implementation_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation::result (char * result)
{
  // Update the result. 
  this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

Components::Deployment::_TAO_ComponentInstallation_Proxy_Impl::_TAO_ComponentInstallation_Proxy_Impl (void)
{}

Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Impl::_TAO_ComponentInstallation_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Impl::install (
    CORBA_Object *_collocated_tao_target_,
    const char * implUUID,
    const char * component_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::Deployment::InstallationFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentInstallation_install_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/InvalidLocation:1.0",
      Components::Deployment::InvalidLocation::_alloc
    },
    {
      "IDL:omg.org/Components/Deployment/InstallationFailure:1.0",
      Components::Deployment::InstallationFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "install",
      7,
      2,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_install _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          implUUID,
          component_loc
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << implUUID) &&
              (_tao_out << component_loc)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentInstallation_install_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Impl::replace (
    CORBA_Object *_collocated_tao_target_,
    const char * implUUID,
    const char * component_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::Deployment::InstallationFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentInstallation_replace_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/InvalidLocation:1.0",
      Components::Deployment::InvalidLocation::_alloc
    },
    {
      "IDL:omg.org/Components/Deployment/InstallationFailure:1.0",
      Components::Deployment::InstallationFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "replace",
      7,
      2,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_replace _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          implUUID,
          component_loc
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << implUUID) &&
              (_tao_out << component_loc)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentInstallation_replace_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Impl::remove (
    CORBA_Object *_collocated_tao_target_,
    const char * implUUID
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentInstallation_remove_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/UnknownImplId:1.0",
      Components::Deployment::UnknownImplId::_alloc
    },
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "remove",
      6,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_remove _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          implUUID
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << implUUID)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentInstallation_remove_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

char * Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Impl::get_implementation (
    CORBA_Object *_collocated_tao_target_,
    const char * implUUID
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::Deployment::InstallationFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentInstallation_get_implementation_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/UnknownImplId:1.0",
      Components::Deployment::UnknownImplId::_alloc
    },
    {
      "IDL:omg.org/Components/Deployment/InstallationFailure:1.0",
      Components::Deployment::InstallationFailure::_alloc
    }
  };

CORBA::String_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_implementation",
      18,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentInstallation_get_implementation _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          implUUID
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << implUUID)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      
                    ),
                  0
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentInstallation_get_implementation_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          char * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

Components::Deployment::_TAO_ComponentInstallation_Proxy_Broker::_TAO_ComponentInstallation_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentInstallation_Proxy_Broker::~_TAO_ComponentInstallation_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentInstallation_Proxy_Broker * (*Components_Deployment__TAO_ComponentInstallation_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker *
Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker::the_TAO_ComponentInstallation_Remote_Proxy_Broker (void)
{
  static ::Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker::_TAO_ComponentInstallation_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker::~_TAO_ComponentInstallation_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentInstallation_Proxy_Impl&
Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker::select_proxy (
    ::Components::Deployment::ComponentInstallation *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Deployment::ComponentInstallation::ComponentInstallation (int collocated)
{
  this->Components_Deployment_ComponentInstallation_setup_collocation (collocated);
}

void
Components::Deployment::ComponentInstallation::Components_Deployment_ComponentInstallation_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_ComponentInstallation_Proxy_Broker_ =
      ::Components_Deployment__TAO_ComponentInstallation_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_ComponentInstallation_Proxy_Broker_ =
      ::Components::Deployment::_TAO_ComponentInstallation_Remote_Proxy_Broker::the_TAO_ComponentInstallation_Remote_Proxy_Broker ();
}

Components::Deployment::ComponentInstallation::~ComponentInstallation (void)
{}

void 
Components::Deployment::ComponentInstallation::_tao_any_destructor (void *_tao_void_pointer)
{
  ComponentInstallation *tmp = ACE_static_cast (ComponentInstallation *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return ComponentInstallation::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/Components/Deployment/ComponentInstallation:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (ComponentInstallation::_nil ());
      
      if (is_a == 0)
        {
          return ComponentInstallation::_nil ();
        }
    }
  
  return ComponentInstallation::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Deployment::ComponentInstallation_ptr 
Components::Deployment::ComponentInstallation::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ComponentInstallation::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      ComponentInstallation_ptr default_proxy = ComponentInstallation::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          Components_Deployment__TAO_ComponentInstallation_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::ComponentInstallation (
                  stub,
                  1,
                  obj->_servant ()
                ),
              ComponentInstallation::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::ComponentInstallation (
                  stub,
                  0,
                  obj->_servant ()
                ),
              ComponentInstallation::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          ComponentInstallation_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &ComponentInstallation::_tao_class_id
                )
            )
        );
}

Components::Deployment::ComponentInstallation_ptr
Components::Deployment::ComponentInstallation::_duplicate (ComponentInstallation_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Components::Deployment::ComponentInstallation::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Deployment/ComponentInstallation:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *Components::Deployment::ComponentInstallation::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components::Deployment, ComponentInstallation)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Deployment::ComponentInstallation::_interface_repository_id (void) const
{
  return "IDL:omg.org/Components/Deployment/ComponentInstallation:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::ComponentInstallation::install (
    const char * implUUID,
    const char * component_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::Deployment::InstallationFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentInstallation_Proxy_Impl &proxy = 
    this->the_TAO_ComponentInstallation_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.install (
      this,
      implUUID,
      component_loc
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::ComponentInstallation::replace (
    const char * implUUID,
    const char * component_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::Deployment::InstallationFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentInstallation_Proxy_Impl &proxy = 
    this->the_TAO_ComponentInstallation_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.replace (
      this,
      implUUID,
      component_loc
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::ComponentInstallation::remove (
    const char * implUUID
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentInstallation_Proxy_Impl &proxy = 
    this->the_TAO_ComponentInstallation_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.remove (
      this,
      implUUID
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

char * Components::Deployment::ComponentInstallation::get_implementation (
    const char * implUUID
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::Deployment::InstallationFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentInstallation_Proxy_Impl &proxy = 
    this->the_TAO_ComponentInstallation_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.get_implementation (
      this,
      implUUID
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_ComponentInstallation[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  60,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x6e737461), 
  ACE_NTOHL (0x6c6c6174), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Components/Deployment/ComponentInstallation:1.0
  22,
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74496e73), 
  ACE_NTOHL (0x74616c6c), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e000000),  // name = ComponentInstallation
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_ComponentInstallation (
    CORBA::tk_objref,
    sizeof (_oc_Components_Deployment_ComponentInstallation),
    (char *) &_oc_Components_Deployment_ComponentInstallation,
    0,
    sizeof (Components::Deployment::ComponentInstallation)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ComponentInstallation,
    &_tc_TAO_tc_Components_Deployment_ComponentInstallation
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Deployment::Assembly::_tao_class_id = 0;

Components::Deployment::Assembly_ptr
tao_Components_Deployment_Assembly_duplicate (
    Components::Deployment::Assembly_ptr p
  )
{
  return Components::Deployment::Assembly::_duplicate (p);
}

void
tao_Components_Deployment_Assembly_release (
    Components::Deployment::Assembly_ptr p
  )
{
  CORBA::release (p);
}

Components::Deployment::Assembly_ptr
tao_Components_Deployment_Assembly_nil (
    void
  )
{
  return Components::Deployment::Assembly::_nil ();
}

Components::Deployment::Assembly_ptr
tao_Components_Deployment_Assembly_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Deployment::Assembly::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Deployment_Assembly_upcast (
    void *src
  )
{
  Components::Deployment::Assembly **tmp =
    ACE_static_cast (Components::Deployment::Assembly **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Deployment::Assembly_var
// *************************************************************

Components::Deployment::Assembly_var::Assembly_var (void)
  : ptr_ (Assembly::_nil ())
{}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::ptr (void) const
{
  return this->ptr_;
}

Components::Deployment::Assembly_var::Assembly_var (const ::Components::Deployment::Assembly_var &p)
  : TAO_Base_var (),
    ptr_ (Assembly::_duplicate (p.ptr ()))
{}

Components::Deployment::Assembly_var::~Assembly_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Deployment::Assembly_var &
Components::Deployment::Assembly_var::operator= (Assembly_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Deployment::Assembly_var &
Components::Deployment::Assembly_var::operator= (const ::Components::Deployment::Assembly_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Deployment::Assembly::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Deployment::Assembly_var::operator const ::Components::Deployment::Assembly_ptr &() const // cast
{
  return this->ptr_;
}

Components::Deployment::Assembly_var::operator ::Components::Deployment::Assembly_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::in (void) const
{
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr &
Components::Deployment::Assembly_var::inout (void)
{
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr &
Components::Deployment::Assembly_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::Assembly::_nil ();
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Deployment::Assembly_ptr val = this->ptr_;
  this->ptr_ = ::Components::Deployment::Assembly::_nil ();
  return val;
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::tao_duplicate (Assembly_ptr p)
{
  return ::Components::Deployment::Assembly::_duplicate (p);
}

void
Components::Deployment::Assembly_var::tao_release (Assembly_ptr p)
{
  CORBA::release (p);
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::tao_nil (void)
{
  return ::Components::Deployment::Assembly::_nil ();
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Deployment::Assembly::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Deployment::Assembly_var::tao_upcast (void *src)
{
  Assembly **tmp =
    ACE_static_cast (Assembly **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Deployment::Assembly_out
// *************************************************************

Components::Deployment::Assembly_out::Assembly_out (Assembly_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Deployment::Assembly::_nil ();
}

Components::Deployment::Assembly_out::Assembly_out (Assembly_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::Assembly::_nil ();
}

Components::Deployment::Assembly_out::Assembly_out (const ::Components::Deployment::Assembly_out &p)
  : ptr_ (ACE_const_cast (Assembly_out &, p).ptr_)
{}

::Components::Deployment::Assembly_out &
Components::Deployment::Assembly_out::operator= (const ::Components::Deployment::Assembly_out &p)
{
  this->ptr_ = ACE_const_cast (Assembly_out&, p).ptr_;
  return *this;
}

Components::Deployment::Assembly_out &
Components::Deployment::Assembly_out::operator= (const ::Components::Deployment::Assembly_var &p)
{
  this->ptr_ = ::Components::Deployment::Assembly::_duplicate (p.ptr ());
  return *this;
}

Components::Deployment::Assembly_out &
Components::Deployment::Assembly_out::operator= (Assembly_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Deployment::Assembly_out::operator ::Components::Deployment::Assembly_ptr &() // cast
{
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr &
Components::Deployment::Assembly_out::ptr (void)
{
  return this->ptr_;
}

::Components::Deployment::Assembly_ptr
Components::Deployment::Assembly_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Assembly_build : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Assembly_build (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_Assembly_build (const TAO_ClientRequestInfo_Components_Deployment_Assembly_build &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Assembly_build &);
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Assembly_build::TAO_ClientRequestInfo_Components_Deployment_Assembly_build (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Assembly_build::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Assembly_build::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Assembly_build::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down (const TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down &);
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down::TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_Assembly_tear_down_exceptiondata[] = 
  {
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_Assembly_tear_down_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::AssemblyState result);

private:
  TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state (const TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state &);
  
  Components::Deployment::AssemblyState _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state::TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state::result (::Components::Deployment::AssemblyState result)
{
  // Update the result. 
  this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

Components::Deployment::_TAO_Assembly_Proxy_Impl::_TAO_Assembly_Proxy_Impl (void)
{}

Components::Deployment::_TAO_Assembly_Remote_Proxy_Impl::_TAO_Assembly_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_Assembly_Remote_Proxy_Impl::build (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "build",
      5,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Assembly_build _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_Assembly_Remote_Proxy_Impl::tear_down (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_Assembly_tear_down_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "tear_down",
      9,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Assembly_tear_down _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_Assembly_tear_down_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::AssemblyState Components::Deployment::_TAO_Assembly_Remote_Proxy_Impl::get_state (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::Deployment::AssemblyState _tao_retval = (Components::Deployment::AssemblyState)0;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval);
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_state",
      9,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Assembly_get_state _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval);

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval);

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval);

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  _tao_retval
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  _tao_retval
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::AssemblyState _tao_retval_info =
            _tao_retval;
          _tao_ri.result (_tao_retval_info);
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval);
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval);
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval;
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

Components::Deployment::_TAO_Assembly_Proxy_Broker::_TAO_Assembly_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Assembly_Proxy_Broker::~_TAO_Assembly_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Assembly_Proxy_Broker * (*Components_Deployment__TAO_Assembly_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker *
Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker::the_TAO_Assembly_Remote_Proxy_Broker (void)
{
  static ::Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker::_TAO_Assembly_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker::~_TAO_Assembly_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Assembly_Proxy_Impl&
Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker::select_proxy (
    ::Components::Deployment::Assembly *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Deployment::Assembly::Assembly (int collocated)
{
  this->Components_Deployment_Assembly_setup_collocation (collocated);
}

void
Components::Deployment::Assembly::Components_Deployment_Assembly_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_Assembly_Proxy_Broker_ =
      ::Components_Deployment__TAO_Assembly_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_Assembly_Proxy_Broker_ =
      ::Components::Deployment::_TAO_Assembly_Remote_Proxy_Broker::the_TAO_Assembly_Remote_Proxy_Broker ();
}

Components::Deployment::Assembly::~Assembly (void)
{}

void 
Components::Deployment::Assembly::_tao_any_destructor (void *_tao_void_pointer)
{
  Assembly *tmp = ACE_static_cast (Assembly *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Deployment::Assembly_ptr
Components::Deployment::Assembly::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return Assembly::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/Components/Deployment/Assembly:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (Assembly::_nil ());
      
      if (is_a == 0)
        {
          return Assembly::_nil ();
        }
    }
  
  return Assembly::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Deployment::Assembly_ptr 
Components::Deployment::Assembly::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Assembly::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      Assembly_ptr default_proxy = Assembly::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          Components_Deployment__TAO_Assembly_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::Assembly (
                  stub,
                  1,
                  obj->_servant ()
                ),
              Assembly::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::Assembly (
                  stub,
                  0,
                  obj->_servant ()
                ),
              Assembly::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          Assembly_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &Assembly::_tao_class_id
                )
            )
        );
}

Components::Deployment::Assembly_ptr
Components::Deployment::Assembly::_duplicate (Assembly_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Components::Deployment::Assembly::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Deployment/Assembly:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *Components::Deployment::Assembly::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components::Deployment, Assembly)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Deployment::Assembly::_interface_repository_id (void) const
{
  return "IDL:omg.org/Components/Deployment/Assembly:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::Assembly::build (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Assembly_Proxy_Impl &proxy = 
    this->the_TAO_Assembly_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.build (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::Assembly::tear_down (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Assembly_Proxy_Impl &proxy = 
    this->the_TAO_Assembly_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.tear_down (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::AssemblyState Components::Deployment::Assembly::get_state (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Assembly_Proxy_Impl &proxy = 
    this->the_TAO_Assembly_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN ((Components::Deployment::AssemblyState)0);
  
  return proxy.get_state (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_Assembly[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  47,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f4173), 
  ACE_NTOHL (0x73656d62), 
  ACE_NTOHL (0x6c793a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Components/Deployment/Assembly:1.0
  9,
  ACE_NTOHL (0x41737365), 
  ACE_NTOHL (0x6d626c79), 
  ACE_NTOHL (0x0),  // name = Assembly
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_Assembly (
    CORBA::tk_objref,
    sizeof (_oc_Components_Deployment_Assembly),
    (char *) &_oc_Components_Deployment_Assembly,
    0,
    sizeof (Components::Deployment::Assembly)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Assembly,
    &_tc_TAO_tc_Components_Deployment_Assembly
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Deployment::AssemblyFactory::_tao_class_id = 0;

Components::Deployment::AssemblyFactory_ptr
tao_Components_Deployment_AssemblyFactory_duplicate (
    Components::Deployment::AssemblyFactory_ptr p
  )
{
  return Components::Deployment::AssemblyFactory::_duplicate (p);
}

void
tao_Components_Deployment_AssemblyFactory_release (
    Components::Deployment::AssemblyFactory_ptr p
  )
{
  CORBA::release (p);
}

Components::Deployment::AssemblyFactory_ptr
tao_Components_Deployment_AssemblyFactory_nil (
    void
  )
{
  return Components::Deployment::AssemblyFactory::_nil ();
}

Components::Deployment::AssemblyFactory_ptr
tao_Components_Deployment_AssemblyFactory_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Deployment::AssemblyFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Deployment_AssemblyFactory_upcast (
    void *src
  )
{
  Components::Deployment::AssemblyFactory **tmp =
    ACE_static_cast (Components::Deployment::AssemblyFactory **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Deployment::AssemblyFactory_var
// *************************************************************

Components::Deployment::AssemblyFactory_var::AssemblyFactory_var (void)
  : ptr_ (AssemblyFactory::_nil ())
{}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::ptr (void) const
{
  return this->ptr_;
}

Components::Deployment::AssemblyFactory_var::AssemblyFactory_var (const ::Components::Deployment::AssemblyFactory_var &p)
  : TAO_Base_var (),
    ptr_ (AssemblyFactory::_duplicate (p.ptr ()))
{}

Components::Deployment::AssemblyFactory_var::~AssemblyFactory_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Deployment::AssemblyFactory_var &
Components::Deployment::AssemblyFactory_var::operator= (AssemblyFactory_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Deployment::AssemblyFactory_var &
Components::Deployment::AssemblyFactory_var::operator= (const ::Components::Deployment::AssemblyFactory_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Deployment::AssemblyFactory::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Deployment::AssemblyFactory_var::operator const ::Components::Deployment::AssemblyFactory_ptr &() const // cast
{
  return this->ptr_;
}

Components::Deployment::AssemblyFactory_var::operator ::Components::Deployment::AssemblyFactory_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::in (void) const
{
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr &
Components::Deployment::AssemblyFactory_var::inout (void)
{
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr &
Components::Deployment::AssemblyFactory_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::AssemblyFactory::_nil ();
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Deployment::AssemblyFactory_ptr val = this->ptr_;
  this->ptr_ = ::Components::Deployment::AssemblyFactory::_nil ();
  return val;
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::tao_duplicate (AssemblyFactory_ptr p)
{
  return ::Components::Deployment::AssemblyFactory::_duplicate (p);
}

void
Components::Deployment::AssemblyFactory_var::tao_release (AssemblyFactory_ptr p)
{
  CORBA::release (p);
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::tao_nil (void)
{
  return ::Components::Deployment::AssemblyFactory::_nil ();
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Deployment::AssemblyFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Deployment::AssemblyFactory_var::tao_upcast (void *src)
{
  AssemblyFactory **tmp =
    ACE_static_cast (AssemblyFactory **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Deployment::AssemblyFactory_out
// *************************************************************

Components::Deployment::AssemblyFactory_out::AssemblyFactory_out (AssemblyFactory_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Deployment::AssemblyFactory::_nil ();
}

Components::Deployment::AssemblyFactory_out::AssemblyFactory_out (AssemblyFactory_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::AssemblyFactory::_nil ();
}

Components::Deployment::AssemblyFactory_out::AssemblyFactory_out (const ::Components::Deployment::AssemblyFactory_out &p)
  : ptr_ (ACE_const_cast (AssemblyFactory_out &, p).ptr_)
{}

::Components::Deployment::AssemblyFactory_out &
Components::Deployment::AssemblyFactory_out::operator= (const ::Components::Deployment::AssemblyFactory_out &p)
{
  this->ptr_ = ACE_const_cast (AssemblyFactory_out&, p).ptr_;
  return *this;
}

Components::Deployment::AssemblyFactory_out &
Components::Deployment::AssemblyFactory_out::operator= (const ::Components::Deployment::AssemblyFactory_var &p)
{
  this->ptr_ = ::Components::Deployment::AssemblyFactory::_duplicate (p.ptr ());
  return *this;
}

Components::Deployment::AssemblyFactory_out &
Components::Deployment::AssemblyFactory_out::operator= (AssemblyFactory_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Deployment::AssemblyFactory_out::operator ::Components::Deployment::AssemblyFactory_ptr &() // cast
{
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr &
Components::Deployment::AssemblyFactory_out::ptr (void)
{
  return this->ptr_;
}

::Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const char * assembly_loc);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Cookie * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create (const TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create &);
  const char * assembly_loc_;
  
  Components::Cookie * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create::TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * assembly_loc    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    assembly_loc_ (assembly_loc)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<= assembly_loc_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_AssemblyFactory_create_exceptiondata[] = 
  {
    Components::Deployment::_tc_InvalidLocation,
    Components::_tc_CreateFailure
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_AssemblyFactory_create_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create::result (::Components::Cookie * result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      Components::Cookie * c);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::Assembly_ptr result);

private:
  TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup (const TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup &);
  Components::Cookie * c_;
  
  Components::Deployment::Assembly_ptr _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup::TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    Components::Cookie * c    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    c_ (c)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_AssemblyFactory_lookup_exceptiondata[] = 
  {
    Components::Deployment::_tc_InvalidAssembly
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_AssemblyFactory_lookup_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup::result (::Components::Deployment::Assembly_ptr result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      Components::Cookie * c);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy (const TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy &);
  Components::Cookie * c_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy::TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    Components::Cookie * c    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    c_ (c)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_AssemblyFactory_destroy_exceptiondata[] = 
  {
    Components::Deployment::_tc_InvalidAssembly,
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_AssemblyFactory_destroy_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

Components::Deployment::_TAO_AssemblyFactory_Proxy_Impl::_TAO_AssemblyFactory_Proxy_Impl (void)
{}

Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Impl::_TAO_AssemblyFactory_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Cookie * Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Impl::create (
    CORBA_Object *_collocated_tao_target_,
    const char * assembly_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::CreateFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_AssemblyFactory_create_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/InvalidLocation:1.0",
      Components::Deployment::InvalidLocation::_alloc
    },
    {
      "IDL:omg.org/Components/CreateFailure:1.0",
      Components::CreateFailure::_alloc
    }
  };

::Components::Cookie_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create",
      6,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_create _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          assembly_loc
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << assembly_loc)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      
                    ),
                  0
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_AssemblyFactory_create_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Cookie * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::Assembly_ptr Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Impl::lookup (
    CORBA_Object *_collocated_tao_target_,
    Components::Cookie * c
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidAssembly
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_AssemblyFactory_lookup_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/InvalidAssembly:1.0",
      Components::Deployment::InvalidAssembly::_alloc
    }
  };

Components::Deployment::Assembly_var _tao_retval (Components::Deployment::Assembly::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "lookup",
      6,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_lookup _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          c
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << c)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      
                    ),
                  0
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_AssemblyFactory_lookup_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::Assembly_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Impl::destroy (
    CORBA_Object *_collocated_tao_target_,
    Components::Cookie * c
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidAssembly
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_AssemblyFactory_destroy_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/InvalidAssembly:1.0",
      Components::Deployment::InvalidAssembly::_alloc
    },
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "destroy",
      7,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_AssemblyFactory_destroy _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          c
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << c)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_AssemblyFactory_destroy_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

Components::Deployment::_TAO_AssemblyFactory_Proxy_Broker::_TAO_AssemblyFactory_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_AssemblyFactory_Proxy_Broker::~_TAO_AssemblyFactory_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_AssemblyFactory_Proxy_Broker * (*Components_Deployment__TAO_AssemblyFactory_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker *
Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker::the_TAO_AssemblyFactory_Remote_Proxy_Broker (void)
{
  static ::Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker::_TAO_AssemblyFactory_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker::~_TAO_AssemblyFactory_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_AssemblyFactory_Proxy_Impl&
Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker::select_proxy (
    ::Components::Deployment::AssemblyFactory *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Deployment::AssemblyFactory::AssemblyFactory (int collocated)
{
  this->Components_Deployment_AssemblyFactory_setup_collocation (collocated);
}

void
Components::Deployment::AssemblyFactory::Components_Deployment_AssemblyFactory_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_AssemblyFactory_Proxy_Broker_ =
      ::Components_Deployment__TAO_AssemblyFactory_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_AssemblyFactory_Proxy_Broker_ =
      ::Components::Deployment::_TAO_AssemblyFactory_Remote_Proxy_Broker::the_TAO_AssemblyFactory_Remote_Proxy_Broker ();
}

Components::Deployment::AssemblyFactory::~AssemblyFactory (void)
{}

void 
Components::Deployment::AssemblyFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  AssemblyFactory *tmp = ACE_static_cast (AssemblyFactory *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return AssemblyFactory::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/Components/Deployment/AssemblyFactory:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (AssemblyFactory::_nil ());
      
      if (is_a == 0)
        {
          return AssemblyFactory::_nil ();
        }
    }
  
  return AssemblyFactory::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Deployment::AssemblyFactory_ptr 
Components::Deployment::AssemblyFactory::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return AssemblyFactory::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      AssemblyFactory_ptr default_proxy = AssemblyFactory::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          Components_Deployment__TAO_AssemblyFactory_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::AssemblyFactory (
                  stub,
                  1,
                  obj->_servant ()
                ),
              AssemblyFactory::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::AssemblyFactory (
                  stub,
                  0,
                  obj->_servant ()
                ),
              AssemblyFactory::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          AssemblyFactory_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &AssemblyFactory::_tao_class_id
                )
            )
        );
}

Components::Deployment::AssemblyFactory_ptr
Components::Deployment::AssemblyFactory::_duplicate (AssemblyFactory_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Components::Deployment::AssemblyFactory::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Deployment/AssemblyFactory:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *Components::Deployment::AssemblyFactory::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components::Deployment, AssemblyFactory)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Deployment::AssemblyFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/Components/Deployment/AssemblyFactory:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Cookie * Components::Deployment::AssemblyFactory::create (
    const char * assembly_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::CreateFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_AssemblyFactory_Proxy_Impl &proxy = 
    this->the_TAO_AssemblyFactory_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.create (
      this,
      assembly_loc
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::Assembly_ptr Components::Deployment::AssemblyFactory::lookup (
    Components::Cookie * c
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidAssembly
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_AssemblyFactory_Proxy_Impl &proxy = 
    this->the_TAO_AssemblyFactory_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.lookup (
      this,
      c
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::AssemblyFactory::destroy (
    Components::Cookie * c
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidAssembly
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_AssemblyFactory_Proxy_Impl &proxy = 
    this->the_TAO_AssemblyFactory_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.destroy (
      this,
      c
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_AssemblyFactory[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f4173), 
  ACE_NTOHL (0x73656d62), 
  ACE_NTOHL (0x6c794661), 
  ACE_NTOHL (0x63746f72), 
  ACE_NTOHL (0x793a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/AssemblyFactory:1.0
  16,
  ACE_NTOHL (0x41737365), 
  ACE_NTOHL (0x6d626c79), 
  ACE_NTOHL (0x46616374), 
  ACE_NTOHL (0x6f727900),  // name = AssemblyFactory
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_AssemblyFactory (
    CORBA::tk_objref,
    sizeof (_oc_Components_Deployment_AssemblyFactory),
    (char *) &_oc_Components_Deployment_AssemblyFactory,
    0,
    sizeof (Components::Deployment::AssemblyFactory)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_AssemblyFactory,
    &_tc_TAO_tc_Components_Deployment_AssemblyFactory
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:103

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CS_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CS_

// The Base_Sequence functions, please see tao/Sequence.h
void
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_allocate_buffer (CORBA::ULong length)
{
  Components::Deployment::ComponentServer **tmp = 0;
  tmp = _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      Components::Deployment::ComponentServer **old = ACE_reinterpret_cast (Components::Deployment::ComponentServer**, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (!this->release_)
            {
              tmp[i] = Components::Deployment::ComponentServer::_duplicate (old[i]);
            }
          else
            {
              tmp[i] = old[i];
            }
        }
      
      if (this->release_)
        {
          delete [] old;
        }
    }
  
  this->buffer_ = tmp;
}

void
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  Components::Deployment::ComponentServer **tmp = ACE_reinterpret_cast (Components::Deployment::ComponentServer**, this->buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = Components::Deployment::ComponentServer::_nil ();
    }
  
  _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::freebuf (tmp);
  this->buffer_ = 0;
}

Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::~_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers (void)
{
  this->_deallocate_buffer ();
}

void
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
{
  Components::Deployment::ComponentServer **tmp = ACE_reinterpret_cast (Components::Deployment::ComponentServer**, this->buffer_);
  
  for (CORBA::ULong i = nl; i < ol; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = Components::Deployment::ComponentServer::_nil ();
    }
}

void 
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_downcast (
    void* target,
    CORBA_Object *src
    ACE_ENV_ARG_DECL
  )
{
  Components::Deployment::ComponentServer **tmp = ACE_static_cast (Components::Deployment::ComponentServer**, target);
  *tmp = Components::Deployment::ComponentServer::_narrow (src ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA_Object*
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_upcast (void *src) const
{
  Components::Deployment::ComponentServer **tmp = ACE_static_cast (Components::Deployment::ComponentServer**, src);
  return *tmp;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CS_)
#define _COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// Components::Deployment::ComponentServers
// *************************************************************

Components::Deployment::ComponentServers::ComponentServers (void)
{}

Components::Deployment::ComponentServers::ComponentServers (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Object_Sequence<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

Components::Deployment::ComponentServers::ComponentServers (
    CORBA::ULong max,
    CORBA::ULong length,
    Components::Deployment::ComponentServer_ptr *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Object_Sequence<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

Components::Deployment::ComponentServers::ComponentServers (const ComponentServers &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Object_Sequence<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

Components::Deployment::ComponentServers::~ComponentServers (void) // dtor
{}

void Components::Deployment::ComponentServers::_tao_any_destructor (void *_tao_void_pointer)
{
  ComponentServers *tmp = ACE_static_cast (ComponentServers*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_ComponentServers[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  55,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x65727665), 
  ACE_NTOHL (0x72733a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/Components/Deployment/ComponentServers:1.0
  17,
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74536572), 
  ACE_NTOHL (0x76657273), 
  ACE_NTOHL (0x0),  // name = ComponentServers
  CORBA::tk_sequence, // typecode kind
  100, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    84, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      54,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x436f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x74732f44), 
      ACE_NTOHL (0x65706c6f), 
      ACE_NTOHL (0x796d656e), 
      ACE_NTOHL (0x742f436f), 
      ACE_NTOHL (0x6d706f6e), 
      ACE_NTOHL (0x656e7453), 
      ACE_NTOHL (0x65727665), 
      ACE_NTOHL (0x723a312e), 
      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/ComponentServer:1.0
      16,
      ACE_NTOHL (0x436f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x74536572), 
      ACE_NTOHL (0x76657200),  // name = ComponentServer

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_ComponentServers (
    CORBA::tk_alias,
    sizeof (_oc_Components_Deployment_ComponentServers),
    (char *) &_oc_Components_Deployment_ComponentServers,
    0,
    sizeof (Components::Deployment::ComponentServers)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ComponentServers,
    &_tc_TAO_tc_Components_Deployment_ComponentServers
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Deployment::ServerActivator::_tao_class_id = 0;

Components::Deployment::ServerActivator_ptr
tao_Components_Deployment_ServerActivator_duplicate (
    Components::Deployment::ServerActivator_ptr p
  )
{
  return Components::Deployment::ServerActivator::_duplicate (p);
}

void
tao_Components_Deployment_ServerActivator_release (
    Components::Deployment::ServerActivator_ptr p
  )
{
  CORBA::release (p);
}

Components::Deployment::ServerActivator_ptr
tao_Components_Deployment_ServerActivator_nil (
    void
  )
{
  return Components::Deployment::ServerActivator::_nil ();
}

Components::Deployment::ServerActivator_ptr
tao_Components_Deployment_ServerActivator_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Deployment::ServerActivator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Deployment_ServerActivator_upcast (
    void *src
  )
{
  Components::Deployment::ServerActivator **tmp =
    ACE_static_cast (Components::Deployment::ServerActivator **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Deployment::ServerActivator_var
// *************************************************************

Components::Deployment::ServerActivator_var::ServerActivator_var (void)
  : ptr_ (ServerActivator::_nil ())
{}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::ptr (void) const
{
  return this->ptr_;
}

Components::Deployment::ServerActivator_var::ServerActivator_var (const ::Components::Deployment::ServerActivator_var &p)
  : TAO_Base_var (),
    ptr_ (ServerActivator::_duplicate (p.ptr ()))
{}

Components::Deployment::ServerActivator_var::~ServerActivator_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Deployment::ServerActivator_var &
Components::Deployment::ServerActivator_var::operator= (ServerActivator_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Deployment::ServerActivator_var &
Components::Deployment::ServerActivator_var::operator= (const ::Components::Deployment::ServerActivator_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Deployment::ServerActivator::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Deployment::ServerActivator_var::operator const ::Components::Deployment::ServerActivator_ptr &() const // cast
{
  return this->ptr_;
}

Components::Deployment::ServerActivator_var::operator ::Components::Deployment::ServerActivator_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::in (void) const
{
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr &
Components::Deployment::ServerActivator_var::inout (void)
{
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr &
Components::Deployment::ServerActivator_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::ServerActivator::_nil ();
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Deployment::ServerActivator_ptr val = this->ptr_;
  this->ptr_ = ::Components::Deployment::ServerActivator::_nil ();
  return val;
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::tao_duplicate (ServerActivator_ptr p)
{
  return ::Components::Deployment::ServerActivator::_duplicate (p);
}

void
Components::Deployment::ServerActivator_var::tao_release (ServerActivator_ptr p)
{
  CORBA::release (p);
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::tao_nil (void)
{
  return ::Components::Deployment::ServerActivator::_nil ();
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Deployment::ServerActivator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Deployment::ServerActivator_var::tao_upcast (void *src)
{
  ServerActivator **tmp =
    ACE_static_cast (ServerActivator **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Deployment::ServerActivator_out
// *************************************************************

Components::Deployment::ServerActivator_out::ServerActivator_out (ServerActivator_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Deployment::ServerActivator::_nil ();
}

Components::Deployment::ServerActivator_out::ServerActivator_out (ServerActivator_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::ServerActivator::_nil ();
}

Components::Deployment::ServerActivator_out::ServerActivator_out (const ::Components::Deployment::ServerActivator_out &p)
  : ptr_ (ACE_const_cast (ServerActivator_out &, p).ptr_)
{}

::Components::Deployment::ServerActivator_out &
Components::Deployment::ServerActivator_out::operator= (const ::Components::Deployment::ServerActivator_out &p)
{
  this->ptr_ = ACE_const_cast (ServerActivator_out&, p).ptr_;
  return *this;
}

Components::Deployment::ServerActivator_out &
Components::Deployment::ServerActivator_out::operator= (const ::Components::Deployment::ServerActivator_var &p)
{
  this->ptr_ = ::Components::Deployment::ServerActivator::_duplicate (p.ptr ());
  return *this;
}

Components::Deployment::ServerActivator_out &
Components::Deployment::ServerActivator_out::operator= (ServerActivator_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Deployment::ServerActivator_out::operator ::Components::Deployment::ServerActivator_ptr &() // cast
{
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr &
Components::Deployment::ServerActivator_out::ptr (void)
{
  return this->ptr_;
}

::Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const Components::ConfigValues & config);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::ComponentServer_ptr result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server (const TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server &);
  const Components::ConfigValues & config_;
  
  Components::Deployment::ComponentServer_ptr _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server::TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const Components::ConfigValues & config    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    config_ (config)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<=  this->config_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ServerActivator_create_component_server_exceptiondata[] = 
  {
    Components::_tc_CreateFailure,
    Components::_tc_InvalidConfiguration
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ServerActivator_create_component_server_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server::result (::Components::Deployment::ComponentServer_ptr result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      Components::Deployment::ComponentServer_ptr server);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server (const TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server &);
  Components::Deployment::ComponentServer_ptr server_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server::TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    Components::Deployment::ComponentServer_ptr server    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    server_ (server)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<=  this->server_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ServerActivator_remove_component_server_exceptiondata[] = 
  {
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ServerActivator_remove_component_server_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::ComponentServers * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers (const TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers &);
  
  Components::Deployment::ComponentServers * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers::TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers::result (::Components::Deployment::ComponentServers * result)
{
  // Update the result. 
  this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

Components::Deployment::_TAO_ServerActivator_Proxy_Impl::_TAO_ServerActivator_Proxy_Impl (void)
{}

Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Impl::_TAO_ServerActivator_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::ComponentServer_ptr Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Impl::create_component_server (
    CORBA_Object *_collocated_tao_target_,
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
    , Components::InvalidConfiguration
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ServerActivator_create_component_server_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/CreateFailure:1.0",
      Components::CreateFailure::_alloc
    },
    {
      "IDL:omg.org/Components/InvalidConfiguration:1.0",
      Components::InvalidConfiguration::_alloc
    }
  };

Components::Deployment::ComponentServer_var _tao_retval (Components::Deployment::ComponentServer::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_component_server",
      23,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ServerActivator_create_component_server _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          config
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << config)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      
                    ),
                  0
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ServerActivator_create_component_server_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::ComponentServer_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Impl::remove_component_server (
    CORBA_Object *_collocated_tao_target_,
    Components::Deployment::ComponentServer_ptr server
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ServerActivator_remove_component_server_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "remove_component_server",
      23,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ServerActivator_remove_component_server _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          server
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << server)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ServerActivator_remove_component_server_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::ComponentServers * Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Impl::get_component_servers (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::Deployment::ComponentServers_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
  
  {
    Components::Deployment::ComponentServers *tmp;
    ACE_NEW_RETURN (tmp, Components::Deployment::ComponentServers, _tao_retval._retn ());
    _tao_retval = tmp;
  }
  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_component_servers",
      21,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ServerActivator_get_component_servers _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::ComponentServers * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

Components::Deployment::_TAO_ServerActivator_Proxy_Broker::_TAO_ServerActivator_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ServerActivator_Proxy_Broker::~_TAO_ServerActivator_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ServerActivator_Proxy_Broker * (*Components_Deployment__TAO_ServerActivator_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker *
Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker::the_TAO_ServerActivator_Remote_Proxy_Broker (void)
{
  static ::Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker::_TAO_ServerActivator_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker::~_TAO_ServerActivator_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ServerActivator_Proxy_Impl&
Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker::select_proxy (
    ::Components::Deployment::ServerActivator *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Deployment::ServerActivator::ServerActivator (int collocated)
{
  this->Components_Deployment_ServerActivator_setup_collocation (collocated);
}

void
Components::Deployment::ServerActivator::Components_Deployment_ServerActivator_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_ServerActivator_Proxy_Broker_ =
      ::Components_Deployment__TAO_ServerActivator_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_ServerActivator_Proxy_Broker_ =
      ::Components::Deployment::_TAO_ServerActivator_Remote_Proxy_Broker::the_TAO_ServerActivator_Remote_Proxy_Broker ();
}

Components::Deployment::ServerActivator::~ServerActivator (void)
{}

void 
Components::Deployment::ServerActivator::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerActivator *tmp = ACE_static_cast (ServerActivator *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return ServerActivator::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/Components/Deployment/ServerActivator:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (ServerActivator::_nil ());
      
      if (is_a == 0)
        {
          return ServerActivator::_nil ();
        }
    }
  
  return ServerActivator::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Deployment::ServerActivator_ptr 
Components::Deployment::ServerActivator::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ServerActivator::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      ServerActivator_ptr default_proxy = ServerActivator::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          Components_Deployment__TAO_ServerActivator_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::ServerActivator (
                  stub,
                  1,
                  obj->_servant ()
                ),
              ServerActivator::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::ServerActivator (
                  stub,
                  0,
                  obj->_servant ()
                ),
              ServerActivator::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          ServerActivator_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &ServerActivator::_tao_class_id
                )
            )
        );
}

Components::Deployment::ServerActivator_ptr
Components::Deployment::ServerActivator::_duplicate (ServerActivator_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Components::Deployment::ServerActivator::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Deployment/ServerActivator:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *Components::Deployment::ServerActivator::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components::Deployment, ServerActivator)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Deployment::ServerActivator::_interface_repository_id (void) const
{
  return "IDL:omg.org/Components/Deployment/ServerActivator:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::ComponentServer_ptr Components::Deployment::ServerActivator::create_component_server (
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
    , Components::InvalidConfiguration
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ServerActivator_Proxy_Impl &proxy = 
    this->the_TAO_ServerActivator_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.create_component_server (
      this,
      config
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::ServerActivator::remove_component_server (
    Components::Deployment::ComponentServer_ptr server
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ServerActivator_Proxy_Impl &proxy = 
    this->the_TAO_ServerActivator_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.remove_component_server (
      this,
      server
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::ComponentServers * Components::Deployment::ServerActivator::get_component_servers (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ServerActivator_Proxy_Impl &proxy = 
    this->the_TAO_ServerActivator_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.get_component_servers (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_ServerActivator[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f5365), 
  ACE_NTOHL (0x72766572), 
  ACE_NTOHL (0x41637469), 
  ACE_NTOHL (0x7661746f), 
  ACE_NTOHL (0x723a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/ServerActivator:1.0
  16,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65724163), 
  ACE_NTOHL (0x74697661), 
  ACE_NTOHL (0x746f7200),  // name = ServerActivator
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_ServerActivator (
    CORBA::tk_objref,
    sizeof (_oc_Components_Deployment_ServerActivator),
    (char *) &_oc_Components_Deployment_ServerActivator,
    0,
    sizeof (Components::Deployment::ServerActivator)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServerActivator,
    &_tc_TAO_tc_Components_Deployment_ServerActivator
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:103

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_CONTAINERS_CS_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_CONTAINERS_CS_

// The Base_Sequence functions, please see tao/Sequence.h
void
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_allocate_buffer (CORBA::ULong length)
{
  Components::Deployment::Container **tmp = 0;
  tmp = _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      Components::Deployment::Container **old = ACE_reinterpret_cast (Components::Deployment::Container**, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (!this->release_)
            {
              tmp[i] = Components::Deployment::Container::_duplicate (old[i]);
            }
          else
            {
              tmp[i] = old[i];
            }
        }
      
      if (this->release_)
        {
          delete [] old;
        }
    }
  
  this->buffer_ = tmp;
}

void
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  Components::Deployment::Container **tmp = ACE_reinterpret_cast (Components::Deployment::Container**, this->buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = Components::Deployment::Container::_nil ();
    }
  
  _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::freebuf (tmp);
  this->buffer_ = 0;
}

Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::~_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers (void)
{
  this->_deallocate_buffer ();
}

void
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
{
  Components::Deployment::Container **tmp = ACE_reinterpret_cast (Components::Deployment::Container**, this->buffer_);
  
  for (CORBA::ULong i = nl; i < ol; ++i)
    {
      CORBA::release (tmp[i]);
      tmp[i] = Components::Deployment::Container::_nil ();
    }
}

void 
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_downcast (
    void* target,
    CORBA_Object *src
    ACE_ENV_ARG_DECL
  )
{
  Components::Deployment::Container **tmp = ACE_static_cast (Components::Deployment::Container**, target);
  *tmp = Components::Deployment::Container::_narrow (src ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

CORBA_Object*
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_upcast (void *src) const
{
  Components::Deployment::Container **tmp = ACE_static_cast (Components::Deployment::Container**, src);
  return *tmp;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_DEPLOYMENT_CONTAINERS_CS_)
#define _COMPONENTS_DEPLOYMENT_CONTAINERS_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// Components::Deployment::Containers
// *************************************************************

Components::Deployment::Containers::Containers (void)
{}

Components::Deployment::Containers::Containers (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Object_Sequence<Components::Deployment::Container,Components::Deployment::Container_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

Components::Deployment::Containers::Containers (
    CORBA::ULong max,
    CORBA::ULong length,
    Components::Deployment::Container_ptr *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Object_Sequence<Components::Deployment::Container,Components::Deployment::Container_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

Components::Deployment::Containers::Containers (const Containers &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Object_Sequence<Components::Deployment::Container,Components::Deployment::Container_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

Components::Deployment::Containers::~Containers (void) // dtor
{}

void Components::Deployment::Containers::_tao_any_destructor (void *_tao_void_pointer)
{
  Containers *tmp = ACE_static_cast (Containers*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_Containers[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  49,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e657273), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/Components/Deployment/Containers:1.0
  11,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x72730000),  // name = Containers
  CORBA::tk_sequence, // typecode kind
  88, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_objref, // typecode kind
    72, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      48,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x436f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x74732f44), 
      ACE_NTOHL (0x65706c6f), 
      ACE_NTOHL (0x796d656e), 
      ACE_NTOHL (0x742f436f), 
      ACE_NTOHL (0x6e746169), 
      ACE_NTOHL (0x6e65723a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Components/Deployment/Container:1.0
      10,
      ACE_NTOHL (0x436f6e74), 
      ACE_NTOHL (0x61696e65), 
      ACE_NTOHL (0x72000000),  // name = Container

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_Containers (
    CORBA::tk_alias,
    sizeof (_oc_Components_Deployment_Containers),
    (char *) &_oc_Components_Deployment_Containers,
    0,
    sizeof (Components::Deployment::Containers)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Containers,
    &_tc_TAO_tc_Components_Deployment_Containers
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Deployment::ComponentServer::_tao_class_id = 0;

Components::Deployment::ComponentServer_ptr
tao_Components_Deployment_ComponentServer_duplicate (
    Components::Deployment::ComponentServer_ptr p
  )
{
  return Components::Deployment::ComponentServer::_duplicate (p);
}

void
tao_Components_Deployment_ComponentServer_release (
    Components::Deployment::ComponentServer_ptr p
  )
{
  CORBA::release (p);
}

Components::Deployment::ComponentServer_ptr
tao_Components_Deployment_ComponentServer_nil (
    void
  )
{
  return Components::Deployment::ComponentServer::_nil ();
}

Components::Deployment::ComponentServer_ptr
tao_Components_Deployment_ComponentServer_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Deployment::ComponentServer::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Deployment_ComponentServer_upcast (
    void *src
  )
{
  Components::Deployment::ComponentServer **tmp =
    ACE_static_cast (Components::Deployment::ComponentServer **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Deployment::ComponentServer_var
// *************************************************************

Components::Deployment::ComponentServer_var::ComponentServer_var (void)
  : ptr_ (ComponentServer::_nil ())
{}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::ptr (void) const
{
  return this->ptr_;
}

Components::Deployment::ComponentServer_var::ComponentServer_var (const ::Components::Deployment::ComponentServer_var &p)
  : TAO_Base_var (),
    ptr_ (ComponentServer::_duplicate (p.ptr ()))
{}

Components::Deployment::ComponentServer_var::~ComponentServer_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Deployment::ComponentServer_var &
Components::Deployment::ComponentServer_var::operator= (ComponentServer_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Deployment::ComponentServer_var &
Components::Deployment::ComponentServer_var::operator= (const ::Components::Deployment::ComponentServer_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Deployment::ComponentServer::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Deployment::ComponentServer_var::operator const ::Components::Deployment::ComponentServer_ptr &() const // cast
{
  return this->ptr_;
}

Components::Deployment::ComponentServer_var::operator ::Components::Deployment::ComponentServer_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::in (void) const
{
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr &
Components::Deployment::ComponentServer_var::inout (void)
{
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr &
Components::Deployment::ComponentServer_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::ComponentServer::_nil ();
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Deployment::ComponentServer_ptr val = this->ptr_;
  this->ptr_ = ::Components::Deployment::ComponentServer::_nil ();
  return val;
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::tao_duplicate (ComponentServer_ptr p)
{
  return ::Components::Deployment::ComponentServer::_duplicate (p);
}

void
Components::Deployment::ComponentServer_var::tao_release (ComponentServer_ptr p)
{
  CORBA::release (p);
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::tao_nil (void)
{
  return ::Components::Deployment::ComponentServer::_nil ();
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Deployment::ComponentServer::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Deployment::ComponentServer_var::tao_upcast (void *src)
{
  ComponentServer **tmp =
    ACE_static_cast (ComponentServer **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Deployment::ComponentServer_out
// *************************************************************

Components::Deployment::ComponentServer_out::ComponentServer_out (ComponentServer_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Deployment::ComponentServer::_nil ();
}

Components::Deployment::ComponentServer_out::ComponentServer_out (ComponentServer_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::ComponentServer::_nil ();
}

Components::Deployment::ComponentServer_out::ComponentServer_out (const ::Components::Deployment::ComponentServer_out &p)
  : ptr_ (ACE_const_cast (ComponentServer_out &, p).ptr_)
{}

::Components::Deployment::ComponentServer_out &
Components::Deployment::ComponentServer_out::operator= (const ::Components::Deployment::ComponentServer_out &p)
{
  this->ptr_ = ACE_const_cast (ComponentServer_out&, p).ptr_;
  return *this;
}

Components::Deployment::ComponentServer_out &
Components::Deployment::ComponentServer_out::operator= (const ::Components::Deployment::ComponentServer_var &p)
{
  this->ptr_ = ::Components::Deployment::ComponentServer::_duplicate (p.ptr ());
  return *this;
}

Components::Deployment::ComponentServer_out &
Components::Deployment::ComponentServer_out::operator= (ComponentServer_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Deployment::ComponentServer_out::operator ::Components::Deployment::ComponentServer_ptr &() // cast
{
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr &
Components::Deployment::ComponentServer_out::ptr (void)
{
  return this->ptr_;
}

::Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::ConfigValues * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get &);
  
  Components::ConfigValues * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get::TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get::result (::Components::ConfigValues * result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::ServerActivator_ptr result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator &);
  
  Components::Deployment::ServerActivator_ptr _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator::TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator::result (::Components::Deployment::ServerActivator_ptr result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const Components::ConfigValues & config);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::Container_ptr result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container &);
  const Components::ConfigValues & config_;
  
  Components::Deployment::Container_ptr _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container::TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const Components::ConfigValues & config    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    config_ (config)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<=  this->config_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentServer_create_container_exceptiondata[] = 
  {
    Components::_tc_CreateFailure,
    Components::_tc_InvalidConfiguration
  };
  
  exception_list->length (2);
  for (CORBA::ULong i = 0; i < 2; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentServer_create_container_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container::result (::Components::Deployment::Container_ptr result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      Components::Deployment::Container_ptr cref);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container &);
  Components::Deployment::Container_ptr cref_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container::TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    Components::Deployment::Container_ptr cref    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    cref_ (cref)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<=  this->cref_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentServer_remove_container_exceptiondata[] = 
  {
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentServer_remove_container_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::Containers * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers &);
  
  Components::Deployment::Containers * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers::TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers::result (::Components::Deployment::Containers * result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove &);
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove::TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_ComponentServer_remove_exceptiondata[] = 
  {
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_ComponentServer_remove_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

Components::Deployment::_TAO_ComponentServer_Proxy_Impl::_TAO_ComponentServer_Proxy_Impl (void)
{}

Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::_TAO_ComponentServer_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::ConfigValues * Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::configuration (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::ConfigValues_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
  
  {
    Components::ConfigValues *tmp;
    ACE_NEW_RETURN (tmp, Components::ConfigValues, _tao_retval._retn ());
    _tao_retval = tmp;
  }
  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_configuration",
      18,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentServer_configuration_get _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::ConfigValues * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::ServerActivator_ptr Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::get_server_activator (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::Deployment::ServerActivator_var _tao_retval (Components::Deployment::ServerActivator::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_server_activator",
      20,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_server_activator _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::ServerActivator_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::Container_ptr Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::create_container (
    CORBA_Object *_collocated_tao_target_,
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
    , Components::InvalidConfiguration
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentServer_create_container_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/CreateFailure:1.0",
      Components::CreateFailure::_alloc
    },
    {
      "IDL:omg.org/Components/InvalidConfiguration:1.0",
      Components::InvalidConfiguration::_alloc
    }
  };

Components::Deployment::Container_var _tao_retval (Components::Deployment::Container::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create_container",
      16,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentServer_create_container _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          config
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << config)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      
                    ),
                  0
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentServer_create_container_exceptiondata, 2 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::Container_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::remove_container (
    CORBA_Object *_collocated_tao_target_,
    Components::Deployment::Container_ptr cref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentServer_remove_container_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "remove_container",
      16,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove_container _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          cref
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << cref)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentServer_remove_container_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::Containers * Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::get_containers (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::Deployment::Containers_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
  
  {
    Components::Deployment::Containers *tmp;
    ACE_NEW_RETURN (tmp, Components::Deployment::Containers, _tao_retval._retn ());
    _tao_retval = tmp;
  }
  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_containers",
      14,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentServer_get_containers _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::Containers * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Impl::remove (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_ComponentServer_remove_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "remove",
      6,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_ComponentServer_remove _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_ComponentServer_remove_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

Components::Deployment::_TAO_ComponentServer_Proxy_Broker::_TAO_ComponentServer_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentServer_Proxy_Broker::~_TAO_ComponentServer_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentServer_Proxy_Broker * (*Components_Deployment__TAO_ComponentServer_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker *
Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker::the_TAO_ComponentServer_Remote_Proxy_Broker (void)
{
  static ::Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker::_TAO_ComponentServer_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker::~_TAO_ComponentServer_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_ComponentServer_Proxy_Impl&
Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker::select_proxy (
    ::Components::Deployment::ComponentServer *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Deployment::ComponentServer::ComponentServer (int collocated)
{
  this->Components_Deployment_ComponentServer_setup_collocation (collocated);
}

void
Components::Deployment::ComponentServer::Components_Deployment_ComponentServer_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_ComponentServer_Proxy_Broker_ =
      ::Components_Deployment__TAO_ComponentServer_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_ComponentServer_Proxy_Broker_ =
      ::Components::Deployment::_TAO_ComponentServer_Remote_Proxy_Broker::the_TAO_ComponentServer_Remote_Proxy_Broker ();
}

Components::Deployment::ComponentServer::~ComponentServer (void)
{}

void 
Components::Deployment::ComponentServer::_tao_any_destructor (void *_tao_void_pointer)
{
  ComponentServer *tmp = ACE_static_cast (ComponentServer *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return ComponentServer::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/Components/Deployment/ComponentServer:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (ComponentServer::_nil ());
      
      if (is_a == 0)
        {
          return ComponentServer::_nil ();
        }
    }
  
  return ComponentServer::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Deployment::ComponentServer_ptr 
Components::Deployment::ComponentServer::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ComponentServer::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      ComponentServer_ptr default_proxy = ComponentServer::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          Components_Deployment__TAO_ComponentServer_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::ComponentServer (
                  stub,
                  1,
                  obj->_servant ()
                ),
              ComponentServer::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::ComponentServer (
                  stub,
                  0,
                  obj->_servant ()
                ),
              ComponentServer::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          ComponentServer_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &ComponentServer::_tao_class_id
                )
            )
        );
}

Components::Deployment::ComponentServer_ptr
Components::Deployment::ComponentServer::_duplicate (ComponentServer_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Components::Deployment::ComponentServer::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Deployment/ComponentServer:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *Components::Deployment::ComponentServer::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components::Deployment, ComponentServer)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Deployment::ComponentServer::_interface_repository_id (void) const
{
  return "IDL:omg.org/Components/Deployment/ComponentServer:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::ConfigValues * Components::Deployment::ComponentServer::configuration (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentServer_Proxy_Impl &proxy = 
    this->the_TAO_ComponentServer_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.configuration (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::ServerActivator_ptr Components::Deployment::ComponentServer::get_server_activator (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentServer_Proxy_Impl &proxy = 
    this->the_TAO_ComponentServer_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.get_server_activator (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::Container_ptr Components::Deployment::ComponentServer::create_container (
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
    , Components::InvalidConfiguration
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentServer_Proxy_Impl &proxy = 
    this->the_TAO_ComponentServer_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.create_container (
      this,
      config
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::ComponentServer::remove_container (
    Components::Deployment::Container_ptr cref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentServer_Proxy_Impl &proxy = 
    this->the_TAO_ComponentServer_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.remove_container (
      this,
      cref
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::Containers * Components::Deployment::ComponentServer::get_containers (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentServer_Proxy_Impl &proxy = 
    this->the_TAO_ComponentServer_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.get_containers (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::ComponentServer::remove (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_ComponentServer_Proxy_Impl &proxy = 
    this->the_TAO_ComponentServer_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.remove (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_ComponentServer[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x65727665), 
  ACE_NTOHL (0x723a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/Components/Deployment/ComponentServer:1.0
  16,
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74536572), 
  ACE_NTOHL (0x76657200),  // name = ComponentServer
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_ComponentServer (
    CORBA::tk_objref,
    sizeof (_oc_Components_Deployment_ComponentServer),
    (char *) &_oc_Components_Deployment_ComponentServer,
    0,
    sizeof (Components::Deployment::ComponentServer)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ComponentServer,
    &_tc_TAO_tc_Components_Deployment_ComponentServer
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::Deployment::ImplEntryPointNotFound::ImplEntryPointNotFound (void)
  : CORBA_UserException (
        "IDL:omg.org/Components/Deployment/ImplEntryPointNotFound:1.0",
        "ImplEntryPointNotFound"
      )
{
}

Components::Deployment::ImplEntryPointNotFound::~ImplEntryPointNotFound (void)
{
}

Components::Deployment::ImplEntryPointNotFound::ImplEntryPointNotFound (const ::Components::Deployment::ImplEntryPointNotFound &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::Deployment::ImplEntryPointNotFound&
Components::Deployment::ImplEntryPointNotFound::operator= (const ::Components::Deployment::ImplEntryPointNotFound &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::Deployment::ImplEntryPointNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  ImplEntryPointNotFound *tmp = ACE_static_cast (ImplEntryPointNotFound*, _tao_void_pointer);
  delete tmp;
}

Components::Deployment::ImplEntryPointNotFound *
Components::Deployment::ImplEntryPointNotFound::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/Components/Deployment/ImplEntryPointNotFound:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (ImplEntryPointNotFound *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::Deployment::ImplEntryPointNotFound::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::Deployment::ImplEntryPointNotFound, 0);
  return retval;
}

CORBA::Exception *
Components::Deployment::ImplEntryPointNotFound::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::Deployment::ImplEntryPointNotFound (*this),
      0
    );
  return result;
}

void Components::Deployment::ImplEntryPointNotFound::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::Deployment::ImplEntryPointNotFound::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::Deployment::ImplEntryPointNotFound::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::Deployment::ImplEntryPointNotFound::_type (void) const
{
  return ::Components::Deployment::_tc_ImplEntryPointNotFound;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_ImplEntryPointNotFound[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  61,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f496d), 
  ACE_NTOHL (0x706c456e), 
  ACE_NTOHL (0x74727950), 
  ACE_NTOHL (0x6f696e74), 
  ACE_NTOHL (0x4e6f7446), 
  ACE_NTOHL (0x6f756e64), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/Components/Deployment/ImplEntryPointNotFound:1.0
  23,
  ACE_NTOHL (0x496d706c), 
  ACE_NTOHL (0x456e7472), 
  ACE_NTOHL (0x79506f69), 
  ACE_NTOHL (0x6e744e6f), 
  ACE_NTOHL (0x74466f75), 
  ACE_NTOHL (0x6e640000),  // name = ImplEntryPointNotFound
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_ImplEntryPointNotFound (
    CORBA::tk_except,
    sizeof (_oc_Components_Deployment_ImplEntryPointNotFound),
    (char *) &_oc_Components_Deployment_ImplEntryPointNotFound,
    0,
    sizeof (Components::Deployment::ImplEntryPointNotFound)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ImplEntryPointNotFound,
    &_tc_TAO_tc_Components_Deployment_ImplEntryPointNotFound
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Deployment::Container::_tao_class_id = 0;

Components::Deployment::Container_ptr
tao_Components_Deployment_Container_duplicate (
    Components::Deployment::Container_ptr p
  )
{
  return Components::Deployment::Container::_duplicate (p);
}

void
tao_Components_Deployment_Container_release (
    Components::Deployment::Container_ptr p
  )
{
  CORBA::release (p);
}

Components::Deployment::Container_ptr
tao_Components_Deployment_Container_nil (
    void
  )
{
  return Components::Deployment::Container::_nil ();
}

Components::Deployment::Container_ptr
tao_Components_Deployment_Container_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Deployment::Container::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Deployment_Container_upcast (
    void *src
  )
{
  Components::Deployment::Container **tmp =
    ACE_static_cast (Components::Deployment::Container **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Deployment::Container_var
// *************************************************************

Components::Deployment::Container_var::Container_var (void)
  : ptr_ (Container::_nil ())
{}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::ptr (void) const
{
  return this->ptr_;
}

Components::Deployment::Container_var::Container_var (const ::Components::Deployment::Container_var &p)
  : TAO_Base_var (),
    ptr_ (Container::_duplicate (p.ptr ()))
{}

Components::Deployment::Container_var::~Container_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Deployment::Container_var &
Components::Deployment::Container_var::operator= (Container_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Deployment::Container_var &
Components::Deployment::Container_var::operator= (const ::Components::Deployment::Container_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Deployment::Container::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Deployment::Container_var::operator const ::Components::Deployment::Container_ptr &() const // cast
{
  return this->ptr_;
}

Components::Deployment::Container_var::operator ::Components::Deployment::Container_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::in (void) const
{
  return this->ptr_;
}

::Components::Deployment::Container_ptr &
Components::Deployment::Container_var::inout (void)
{
  return this->ptr_;
}

::Components::Deployment::Container_ptr &
Components::Deployment::Container_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::Container::_nil ();
  return this->ptr_;
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Deployment::Container_ptr val = this->ptr_;
  this->ptr_ = ::Components::Deployment::Container::_nil ();
  return val;
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::tao_duplicate (Container_ptr p)
{
  return ::Components::Deployment::Container::_duplicate (p);
}

void
Components::Deployment::Container_var::tao_release (Container_ptr p)
{
  CORBA::release (p);
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::tao_nil (void)
{
  return ::Components::Deployment::Container::_nil ();
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Deployment::Container::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Deployment::Container_var::tao_upcast (void *src)
{
  Container **tmp =
    ACE_static_cast (Container **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Deployment::Container_out
// *************************************************************

Components::Deployment::Container_out::Container_out (Container_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Deployment::Container::_nil ();
}

Components::Deployment::Container_out::Container_out (Container_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Deployment::Container::_nil ();
}

Components::Deployment::Container_out::Container_out (const ::Components::Deployment::Container_out &p)
  : ptr_ (ACE_const_cast (Container_out &, p).ptr_)
{}

::Components::Deployment::Container_out &
Components::Deployment::Container_out::operator= (const ::Components::Deployment::Container_out &p)
{
  this->ptr_ = ACE_const_cast (Container_out&, p).ptr_;
  return *this;
}

Components::Deployment::Container_out &
Components::Deployment::Container_out::operator= (const ::Components::Deployment::Container_var &p)
{
  this->ptr_ = ::Components::Deployment::Container::_duplicate (p.ptr ());
  return *this;
}

Components::Deployment::Container_out &
Components::Deployment::Container_out::operator= (Container_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Deployment::Container_out::operator ::Components::Deployment::Container_ptr &() // cast
{
  return this->ptr_;
}

::Components::Deployment::Container_ptr &
Components::Deployment::Container_out::ptr (void)
{
  return this->ptr_;
}

::Components::Deployment::Container_ptr
Components::Deployment::Container_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::ConfigValues * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get (const TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get &);
  
  Components::ConfigValues * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get::TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get::result (::Components::ConfigValues * result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::Deployment::ComponentServer_ptr result);

private:
  TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server (const TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server &);
  
  Components::Deployment::ComponentServer_ptr _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server::TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server::result (::Components::Deployment::ComponentServer_ptr result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Container_install_home : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Container_install_home (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const char * id,
      const char * entrypt,
      const Components::ConfigValues & config);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::CCMHome_ptr result);

private:
  TAO_ClientRequestInfo_Components_Deployment_Container_install_home (const TAO_ClientRequestInfo_Components_Deployment_Container_install_home &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Container_install_home &);
  const char * id_;
  const char * entrypt_;
  const Components::ConfigValues & config_;
  
  Components::CCMHome_ptr _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Container_install_home::TAO_ClientRequestInfo_Components_Deployment_Container_install_home (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const char * id,
    const char * entrypt,
    const Components::ConfigValues & config    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    id_ (id),
    entrypt_ (entrypt),
    config_ (config)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Container_install_home::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (3);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<= id_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  (*parameter_list)[len].argument <<= entrypt_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  (*parameter_list)[len].argument <<=  this->config_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Container_install_home::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_Container_install_home_exceptiondata[] = 
  {
    Components::Deployment::_tc_UnknownImplId,
    Components::Deployment::_tc_ImplEntryPointNotFound,
    Components::Deployment::_tc_InstallationFailure,
    Components::_tc_InvalidConfiguration
  };
  
  exception_list->length (4);
  for (CORBA::ULong i = 0; i < 4; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_Container_install_home_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Container_install_home::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_Container_install_home::result (::Components::CCMHome_ptr result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Container_remove_home : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Container_remove_home (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      Components::CCMHome_ptr href);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_Container_remove_home (const TAO_ClientRequestInfo_Components_Deployment_Container_remove_home &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Container_remove_home &);
  Components::CCMHome_ptr href_;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Container_remove_home::TAO_ClientRequestInfo_Components_Deployment_Container_remove_home (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    Components::CCMHome_ptr href    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
    href_ (href)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Container_remove_home::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  (*parameter_list)[len].argument <<=  this->href_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Container_remove_home::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_Container_remove_home_exceptiondata[] = 
  {
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_Container_remove_home_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Container_remove_home::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Container_get_homes : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Container_get_homes (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (Components::CCMHomes * result);

private:
  TAO_ClientRequestInfo_Components_Deployment_Container_get_homes (const TAO_ClientRequestInfo_Components_Deployment_Container_get_homes &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Container_get_homes &);
  
  Components::CCMHomes * _result;
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Container_get_homes::TAO_ClientRequestInfo_Components_Deployment_Container_get_homes (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Container_get_homes::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Container_get_homes::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Container_get_homes::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_Components_Deployment_Container_get_homes::result (::Components::CCMHomes * result)
{
  // Update the result. 
  this->_result = result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_Components_Deployment_Container_remove : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_Components_Deployment_Container_remove (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_Components_Deployment_Container_remove (const TAO_ClientRequestInfo_Components_Deployment_Container_remove &);
  void operator= (const TAO_ClientRequestInfo_Components_Deployment_Container_remove &);
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:401

TAO_ClientRequestInfo_Components_Deployment_Container_remove::TAO_ClientRequestInfo_Components_Deployment_Container_remove (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_Components_Deployment_Container_remove::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_Components_Deployment_Container_remove::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_Components_Deployment_Container_remove_exceptiondata[] = 
  {
    Components::_tc_RemoveFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_Components_Deployment_Container_remove_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_Components_Deployment_Container_remove::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}



#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

Components::Deployment::_TAO_Container_Proxy_Impl::_TAO_Container_Proxy_Impl (void)
{}

Components::Deployment::_TAO_Container_Remote_Proxy_Impl::_TAO_Container_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::ConfigValues * Components::Deployment::_TAO_Container_Remote_Proxy_Impl::configuration (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::ConfigValues_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
  
  {
    Components::ConfigValues *tmp;
    ACE_NEW_RETURN (tmp, Components::ConfigValues, _tao_retval._retn ());
    _tao_retval = tmp;
  }
  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "_get_configuration",
      18,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Container_configuration_get _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::ConfigValues * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::Deployment::ComponentServer_ptr Components::Deployment::_TAO_Container_Remote_Proxy_Impl::get_component_server (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::Deployment::ComponentServer_var _tao_retval (Components::Deployment::ComponentServer::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_component_server",
      20,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Container_get_component_server _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::Deployment::ComponentServer_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::CCMHome_ptr Components::Deployment::_TAO_Container_Remote_Proxy_Impl::install_home (
    CORBA_Object *_collocated_tao_target_,
    const char * id,
    const char * entrypt,
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::Deployment::ImplEntryPointNotFound
    , Components::Deployment::InstallationFailure
    , Components::InvalidConfiguration
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_Container_install_home_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/Deployment/UnknownImplId:1.0",
      Components::Deployment::UnknownImplId::_alloc
    },
    {
      "IDL:omg.org/Components/Deployment/ImplEntryPointNotFound:1.0",
      Components::Deployment::ImplEntryPointNotFound::_alloc
    },
    {
      "IDL:omg.org/Components/Deployment/InstallationFailure:1.0",
      Components::Deployment::InstallationFailure::_alloc
    },
    {
      "IDL:omg.org/Components/InvalidConfiguration:1.0",
      Components::InvalidConfiguration::_alloc
    }
  };

Components::CCMHome_var _tao_retval (Components::CCMHome::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "install_home",
      12,
      3,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Container_install_home _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          id,
          entrypt,
          config
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << id) &&
              (_tao_out << entrypt) &&
              (_tao_out << config)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      
                    ),
                  0
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_Container_install_home_exceptiondata, 4 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::CCMHome_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_Container_Remote_Proxy_Impl::remove_home (
    CORBA_Object *_collocated_tao_target_,
    Components::CCMHome_ptr href
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_Container_remove_home_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "remove_home",
      11,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Container_remove_home _tao_ri (
          &_tao_call,
          _collocated_tao_target_,
          href
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          
          if (!(
              (_tao_out << href)
              ))
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::MARSHAL (
                      
                    )
                );
            }
          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_Container_remove_home_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::Components::CCMHomes * Components::Deployment::_TAO_Container_Remote_Proxy_Impl::get_homes (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  Components::CCMHomes_var _tao_retval;
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
  
  {
    Components::CCMHomes *tmp;
    ACE_NEW_RETURN (tmp, Components::CCMHomes, _tao_retval._retn ());
    _tao_retval = tmp;
  }
  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "get_homes",
      9,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Container_get_homes _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::Components::CCMHomes * _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

void Components::Deployment::_TAO_Container_Remote_Proxy_Impl::remove (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
    static TAO_Exception_Data _tao_Components_Deployment_Container_remove_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/RemoveFailure:1.0",
      Components::RemoveFailure::_alloc
    }
  };

TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW (CORBA::INTERNAL ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "remove",
      6,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_Components_Deployment_Container_remove _tao_ri (
          &_tao_call,
          _collocated_tao_target_
        );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK;

          
          _invoke_status =
            _tao_call.invoke (_tao_Components_Deployment_Container_remove_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK;

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    )
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

Components::Deployment::_TAO_Container_Proxy_Broker::_TAO_Container_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Container_Proxy_Broker::~_TAO_Container_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Container_Proxy_Broker * (*Components_Deployment__TAO_Container_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
Components::Deployment::_TAO_Container_Remote_Proxy_Broker *
Components::Deployment::_TAO_Container_Remote_Proxy_Broker::the_TAO_Container_Remote_Proxy_Broker (void)
{
  static ::Components::Deployment::_TAO_Container_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

Components::Deployment::_TAO_Container_Remote_Proxy_Broker::_TAO_Container_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Container_Remote_Proxy_Broker::~_TAO_Container_Remote_Proxy_Broker (void)
{
}

Components::Deployment::_TAO_Container_Proxy_Impl&
Components::Deployment::_TAO_Container_Remote_Proxy_Broker::select_proxy (
    ::Components::Deployment::Container *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Deployment::Container::Container (int collocated)
{
  this->Components_Deployment_Container_setup_collocation (collocated);
}

void
Components::Deployment::Container::Components_Deployment_Container_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_Container_Proxy_Broker_ =
      ::Components_Deployment__TAO_Container_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_Container_Proxy_Broker_ =
      ::Components::Deployment::_TAO_Container_Remote_Proxy_Broker::the_TAO_Container_Remote_Proxy_Broker ();
}

Components::Deployment::Container::~Container (void)
{}

void 
Components::Deployment::Container::_tao_any_destructor (void *_tao_void_pointer)
{
  Container *tmp = ACE_static_cast (Container *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Deployment::Container_ptr
Components::Deployment::Container::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return Container::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/Components/Deployment/Container:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (Container::_nil ());
      
      if (is_a == 0)
        {
          return Container::_nil ();
        }
    }
  
  return Container::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Deployment::Container_ptr 
Components::Deployment::Container::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Container::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      Container_ptr default_proxy = Container::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          Components_Deployment__TAO_Container_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::Container (
                  stub,
                  1,
                  obj->_servant ()
                ),
              Container::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::Components::Deployment::Container (
                  stub,
                  0,
                  obj->_servant ()
                ),
              Container::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          Container_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &Container::_tao_class_id
                )
            )
        );
}

Components::Deployment::Container_ptr
Components::Deployment::Container::_duplicate (Container_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
Components::Deployment::Container::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/Deployment/Container:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *Components::Deployment::Container::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components::Deployment, Container)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Deployment::Container::_interface_repository_id (void) const
{
  return "IDL:omg.org/Components/Deployment/Container:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::ConfigValues * Components::Deployment::Container::configuration (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Container_Proxy_Impl &proxy = 
    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.configuration (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::Deployment::ComponentServer_ptr Components::Deployment::Container::get_component_server (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Container_Proxy_Impl &proxy = 
    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.get_component_server (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::CCMHome_ptr Components::Deployment::Container::install_home (
    const char * id,
    const char * entrypt,
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::Deployment::ImplEntryPointNotFound
    , Components::Deployment::InstallationFailure
    , Components::InvalidConfiguration
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Container_Proxy_Impl &proxy = 
    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.install_home (
      this,
      id,
      entrypt,
      config
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::Container::remove_home (
    Components::CCMHome_ptr href
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Container_Proxy_Impl &proxy = 
    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.remove_home (
      this,
      href
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::Components::CCMHomes * Components::Deployment::Container::get_homes (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Container_Proxy_Impl &proxy = 
    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.get_homes (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

void Components::Deployment::Container::remove (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_Container_Proxy_Impl &proxy = 
    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
  proxy.remove (
      this
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Deployment_Container[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f44), 
  ACE_NTOHL (0x65706c6f), 
  ACE_NTOHL (0x796d656e), 
  ACE_NTOHL (0x742f436f), 
  ACE_NTOHL (0x6e746169), 
  ACE_NTOHL (0x6e65723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/Components/Deployment/Container:1.0
  10,
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x61696e65), 
  ACE_NTOHL (0x72000000),  // name = Container
};

static CORBA::TypeCode _tc_TAO_tc_Components_Deployment_Container (
    CORBA::tk_objref,
    sizeof (_oc_Components_Deployment_Container),
    (char *) &_oc_Components_Deployment_Container,
    0,
    sizeof (Components::Deployment::Container)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_BEGIN (Deployment)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Container,
    &_tc_TAO_tc_Components_Deployment_Container
  )
TAO_NAMESPACE_END
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (CORBA::Any &_tao_any, Components::Deployment::AssemblyState _tao_elem)
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      Components::Deployment::_tc_AssemblyState,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, Components::Deployment::AssemblyState &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (Components::Deployment::_tc_AssemblyState ACE_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      return 1;
    }
  }
  ACE_CATCHANY
  {
    return 0;
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::UnknownImplId &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_UnknownImplId,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::UnknownImplId *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_UnknownImplId,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::UnknownImplId::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::Deployment::UnknownImplId *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::UnknownImplId*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::UnknownImplId *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_UnknownImplId
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::Deployment::UnknownImplId *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::Deployment::UnknownImplId *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::UnknownImplId,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:omg.org/Components/Deployment/UnknownImplId:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_UnknownImplId,
                1,
                tmp,
                Components::Deployment::UnknownImplId::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::InvalidLocation &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_InvalidLocation,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::InvalidLocation *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_InvalidLocation,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::InvalidLocation::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::Deployment::InvalidLocation *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::InvalidLocation*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::InvalidLocation *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_InvalidLocation
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::Deployment::InvalidLocation *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::Deployment::InvalidLocation *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::InvalidLocation,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:omg.org/Components/Deployment/InvalidLocation:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_InvalidLocation,
                1,
                tmp,
                Components::Deployment::InvalidLocation::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::InstallationFailure &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_InstallationFailure,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::InstallationFailure *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_InstallationFailure,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::InstallationFailure::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::Deployment::InstallationFailure *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::InstallationFailure*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::InstallationFailure *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_InstallationFailure
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::Deployment::InstallationFailure *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::Deployment::InstallationFailure *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::InstallationFailure,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:omg.org/Components/Deployment/InstallationFailure:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_InstallationFailure,
                1,
                tmp,
                Components::Deployment::InstallationFailure::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::InvalidAssembly &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_InvalidAssembly,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::InvalidAssembly *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_InvalidAssembly,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::InvalidAssembly::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::Deployment::InvalidAssembly *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::InvalidAssembly*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::InvalidAssembly *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_InvalidAssembly
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::Deployment::InvalidAssembly *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::Deployment::InvalidAssembly *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::InvalidAssembly,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:omg.org/Components/Deployment/InvalidAssembly:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_InvalidAssembly,
                1,
                tmp,
                Components::Deployment::InvalidAssembly::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ComponentInstallation_ptr _tao_elem
  )
{
  Components::Deployment::ComponentInstallation_ptr _tao_objptr =
    Components::Deployment::ComponentInstallation::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ComponentInstallation_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ComponentInstallation, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          Components::Deployment::ComponentInstallation::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::ComponentInstallation_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Deployment::ComponentInstallation::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_ComponentInstallation
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            Components::Deployment::_tc_ComponentInstallation,
            1,
            _tao_elem,
            Components::Deployment::ComponentInstallation::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = Components::Deployment::ComponentInstallation::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Deployment::ComponentInstallation::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Deployment::ComponentInstallation,Components::Deployment::ComponentInstallation_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Deployment::ComponentInstallation,Components::Deployment::ComponentInstallation_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::Assembly_ptr _tao_elem
  )
{
  Components::Deployment::Assembly_ptr _tao_objptr =
    Components::Deployment::Assembly::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::Assembly_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_Assembly, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          Components::Deployment::Assembly::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::Assembly_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Deployment::Assembly::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_Assembly
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            Components::Deployment::_tc_Assembly,
            1,
            _tao_elem,
            Components::Deployment::Assembly::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = Components::Deployment::Assembly::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Deployment::Assembly::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Deployment::Assembly,Components::Deployment::Assembly_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Deployment::Assembly,Components::Deployment::Assembly_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::AssemblyFactory_ptr _tao_elem
  )
{
  Components::Deployment::AssemblyFactory_ptr _tao_objptr =
    Components::Deployment::AssemblyFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::AssemblyFactory_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_AssemblyFactory, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          Components::Deployment::AssemblyFactory::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::AssemblyFactory_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Deployment::AssemblyFactory::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_AssemblyFactory
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            Components::Deployment::_tc_AssemblyFactory,
            1,
            _tao_elem,
            Components::Deployment::AssemblyFactory::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = Components::Deployment::AssemblyFactory::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Deployment::AssemblyFactory::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Deployment::AssemblyFactory,Components::Deployment::AssemblyFactory_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Deployment::AssemblyFactory,Components::Deployment::AssemblyFactory_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::ComponentServers &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ComponentServers,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ComponentServers *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ComponentServers,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::ComponentServers::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::ComponentServers *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::ComponentServers*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::ComponentServers *&_tao_elem
  )
{
  _tao_elem = 0;
  
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_ComponentServers
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = ACE_static_cast(
            const Components::Deployment::ComponentServers*,
            _tao_any.value ()
          );
        
        return 1;
      }
    else
      {
        Components::Deployment::ComponentServers *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::ComponentServers,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_ComponentServers,
                1,
                ACE_static_cast (void *, tmp),
                Components::Deployment::ComponentServers::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ServerActivator_ptr _tao_elem
  )
{
  Components::Deployment::ServerActivator_ptr _tao_objptr =
    Components::Deployment::ServerActivator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ServerActivator_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ServerActivator, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          Components::Deployment::ServerActivator::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::ServerActivator_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Deployment::ServerActivator::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_ServerActivator
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            Components::Deployment::_tc_ServerActivator,
            1,
            _tao_elem,
            Components::Deployment::ServerActivator::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = Components::Deployment::ServerActivator::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Deployment::ServerActivator::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Deployment::ServerActivator,Components::Deployment::ServerActivator_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Deployment::ServerActivator,Components::Deployment::ServerActivator_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::Containers &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_Containers,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::Containers *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_Containers,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::Containers::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::Containers *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::Containers*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::Containers *&_tao_elem
  )
{
  _tao_elem = 0;
  
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_Containers
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = ACE_static_cast(
            const Components::Deployment::Containers*,
            _tao_any.value ()
          );
        
        return 1;
      }
    else
      {
        Components::Deployment::Containers *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::Containers,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_Containers,
                1,
                ACE_static_cast (void *, tmp),
                Components::Deployment::Containers::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ComponentServer_ptr _tao_elem
  )
{
  Components::Deployment::ComponentServer_ptr _tao_objptr =
    Components::Deployment::ComponentServer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ComponentServer_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ComponentServer, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          Components::Deployment::ComponentServer::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::ComponentServer_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Deployment::ComponentServer::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_ComponentServer
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            Components::Deployment::_tc_ComponentServer,
            1,
            _tao_elem,
            Components::Deployment::ComponentServer::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = Components::Deployment::ComponentServer::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Deployment::ComponentServer::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::Deployment::ImplEntryPointNotFound &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ImplEntryPointNotFound,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::ImplEntryPointNotFound *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_ImplEntryPointNotFound,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::Deployment::ImplEntryPointNotFound::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::Deployment::ImplEntryPointNotFound *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::Deployment::ImplEntryPointNotFound*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::Deployment::ImplEntryPointNotFound *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_ImplEntryPointNotFound
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::Deployment::ImplEntryPointNotFound *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::Deployment::ImplEntryPointNotFound *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::Deployment::ImplEntryPointNotFound,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:omg.org/Components/Deployment/ImplEntryPointNotFound:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::Deployment::_tc_ImplEntryPointNotFound,
                1,
                tmp,
                Components::Deployment::ImplEntryPointNotFound::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::Container_ptr _tao_elem
  )
{
  Components::Deployment::Container_ptr _tao_objptr =
    Components::Deployment::Container::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Deployment::Container_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::Deployment::_tc_Container, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          Components::Deployment::Container::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Deployment::Container_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Deployment::Container::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::Deployment::_tc_Container
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            Components::Deployment::_tc_Container,
            1,
            _tao_elem,
            Components::Deployment::Container::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = Components::Deployment::Container::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Deployment::Container::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Deployment::Container,Components::Deployment::Container_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Deployment::Container,Components::Deployment::Container_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::ComponentInstallation_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::ComponentInstallation_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      Components::Deployment::ComponentInstallation::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::Assembly_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::Assembly_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      Components::Deployment::Assembly::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::AssemblyFactory_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::AssemblyFactory_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      Components::Deployment::AssemblyFactory::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:103

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::ComponentServers &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::ComponentServers &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::ServerActivator_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::ServerActivator_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      Components::Deployment::ServerActivator::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:103

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::Containers &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::Containers &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::ComponentServer_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::ComponentServer_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      Components::Deployment::ComponentServer::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::Container_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::Container_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      Components::Deployment::Container::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

