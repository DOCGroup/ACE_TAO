// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_COMPONENTS_NAMELIST_CI_)
#define _COMPONENTS_NAMELIST_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::NameList_var
// *************************************************************

ACE_INLINE
Components::NameList_var::NameList_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::NameList_var::NameList_var (NameList *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::NameList_var::NameList_var (const ::Components::NameList_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::NameList (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::NameList_var::~NameList_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::NameList_var &
Components::NameList_var::operator= (NameList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::NameList_var &
Components::NameList_var::operator= (const ::Components::NameList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          NameList *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              NameList (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              NameList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::NameList *
Components::NameList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::NameList *
Components::NameList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::NameList_var::operator const ::Components::NameList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::NameList_var::operator ::Components::NameList &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::NameList_var::operator ::Components::NameList &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::NameList_var::operator ::Components::NameList *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
Components::NameList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::NameList &
Components::NameList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::NameList &
Components::NameList_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::NameList *&
Components::NameList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::NameList *
Components::NameList_var::_retn (void)
{
  ::Components::NameList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::NameList *
Components::NameList_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::NameList_out
// *************************************************************

ACE_INLINE
Components::NameList_out::NameList_out (NameList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::NameList_out::NameList_out (NameList_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::NameList_out::NameList_out (const ::Components::NameList_out &p)
  : ptr_ (ACE_const_cast (NameList_out&, p).ptr_)
{}

ACE_INLINE
::Components::NameList_out &
Components::NameList_out::operator= (const ::Components::NameList_out &p)
{
  this->ptr_ = ACE_const_cast (NameList_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::NameList_out &
Components::NameList_out::operator= (NameList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::NameList_out::operator ::Components::NameList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::NameList *&
Components::NameList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::NameList *
Components::NameList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
Components::NameList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::Cookie::Cookie (void)
{}

ACE_INLINE
Components::Cookie::~Cookie (void)
{}

ACE_INLINE const char* 
Components::Cookie::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Components/Cookie:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::PortDescription::PortDescription (void)
{}

ACE_INLINE
Components::PortDescription::~PortDescription (void)
{}

ACE_INLINE const char* 
Components::PortDescription::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Components/PortDescription:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::FacetDescription::FacetDescription (void)
{}

ACE_INLINE
Components::FacetDescription::~FacetDescription (void)
{}

ACE_INLINE const char* 
Components::FacetDescription::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Components/FacetDescription:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_FACETDESCRIPTIONS_CI_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_FACETDESCRIPTIONS_CI_

ACE_INLINE
Components::FacetDescription **
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::allocbuf (CORBA::ULong nelems)
{
  Components::FacetDescription **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::FacetDescription*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = 0;
    }
  
  return buf;
}

ACE_INLINE
void 
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::freebuf (Components::FacetDescription **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions (void)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::allocbuf (maximum))
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::FacetDescription* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions(
    const _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::FacetDescription **tmp1 =
        _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::allocbuf (this->maximum_);
      Components::FacetDescription ** const tmp2 =
        ACE_reinterpret_cast (Components::FacetDescription ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          if (tmp2[i] != 0)
            {
              tmp2[i]->_add_ref ();
            }
          
          tmp1[i] = tmp2 [i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions &
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::operator= (
    const _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::FacetDescription **tmp =
        ACE_reinterpret_cast (Components::FacetDescription **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (tmp[i] != 0)
            {
              tmp[i]->_remove_ref ();
            }
          
          tmp[i] = 0;
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::FacetDescription **tmp1 =
    ACE_reinterpret_cast (Components::FacetDescription **, this->buffer_);
  
  Components::FacetDescription ** const tmp2 =
    ACE_reinterpret_cast (Components::FacetDescription ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      if (tmp2[i] != 0)
        {
          tmp2[i]->_add_ref ();
        }
      
      tmp1[i] = tmp2 [i];
    }
  
  return *this;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::FacetDescription,Components::FacetDescription_var>
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::FacetDescription ** const tmp =
    ACE_reinterpret_cast (Components::FacetDescription ** ACE_CAST_CONST, this->buffer_);
  return TAO_Valuetype_Manager<Components::FacetDescription,Components::FacetDescription_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::FacetDescription* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::get_buffer (CORBA::Boolean orphan)
{
  Components::FacetDescription **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::FacetDescription**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::FacetDescription**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::FacetDescription* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_FacetDescriptions::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::FacetDescription ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_FACETDESCRIPTIONS_CI_)
#define _COMPONENTS_FACETDESCRIPTIONS_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::FacetDescriptions_var
// *************************************************************

ACE_INLINE
Components::FacetDescriptions_var::FacetDescriptions_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::FacetDescriptions_var::FacetDescriptions_var (FacetDescriptions *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::FacetDescriptions_var::FacetDescriptions_var (const ::Components::FacetDescriptions_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::FacetDescriptions (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::FacetDescriptions_var::~FacetDescriptions_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::FacetDescriptions_var &
Components::FacetDescriptions_var::operator= (FacetDescriptions *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::FacetDescriptions_var &
Components::FacetDescriptions_var::operator= (const ::Components::FacetDescriptions_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          FacetDescriptions *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              FacetDescriptions (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              FacetDescriptions *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::FacetDescriptions *
Components::FacetDescriptions_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::FacetDescriptions *
Components::FacetDescriptions_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::FacetDescriptions_var::operator const ::Components::FacetDescriptions &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::FacetDescriptions_var::operator ::Components::FacetDescriptions &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::FacetDescriptions_var::operator ::Components::FacetDescriptions &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::FacetDescriptions_var::operator ::Components::FacetDescriptions *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::FacetDescription, Components::FacetDescription_var>
Components::FacetDescriptions_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::FacetDescriptions &
Components::FacetDescriptions_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::FacetDescriptions &
Components::FacetDescriptions_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::FacetDescriptions *&
Components::FacetDescriptions_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::FacetDescriptions *
Components::FacetDescriptions_var::_retn (void)
{
  ::Components::FacetDescriptions *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::FacetDescriptions *
Components::FacetDescriptions_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::FacetDescriptions_out
// *************************************************************

ACE_INLINE
Components::FacetDescriptions_out::FacetDescriptions_out (FacetDescriptions *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::FacetDescriptions_out::FacetDescriptions_out (FacetDescriptions_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::FacetDescriptions_out::FacetDescriptions_out (const ::Components::FacetDescriptions_out &p)
  : ptr_ (ACE_const_cast (FacetDescriptions_out&, p).ptr_)
{}

ACE_INLINE
::Components::FacetDescriptions_out &
Components::FacetDescriptions_out::operator= (const ::Components::FacetDescriptions_out &p)
{
  this->ptr_ = ACE_const_cast (FacetDescriptions_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::FacetDescriptions_out &
Components::FacetDescriptions_out::operator= (FacetDescriptions *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::FacetDescriptions_out::operator ::Components::FacetDescriptions *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::FacetDescriptions *&
Components::FacetDescriptions_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::FacetDescriptions *
Components::FacetDescriptions_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::FacetDescription, Components::FacetDescription_var>
Components::FacetDescriptions_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_NAVIGATION___CI_)
#define _COMPONENTS_NAVIGATION___CI_

ACE_INLINE
Components::Navigation::Navigation (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Navigation_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::ConnectionDescription::ConnectionDescription (void)
{}

ACE_INLINE
Components::ConnectionDescription::~ConnectionDescription (void)
{}

ACE_INLINE const char* 
Components::ConnectionDescription::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Components/ConnectionDescription:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_CONNECTIONDESCRIPTIONS_CI_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_CONNECTIONDESCRIPTIONS_CI_

ACE_INLINE
Components::ConnectionDescription **
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::allocbuf (CORBA::ULong nelems)
{
  Components::ConnectionDescription **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::ConnectionDescription*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = 0;
    }
  
  return buf;
}

ACE_INLINE
void 
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::freebuf (Components::ConnectionDescription **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions (void)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::allocbuf (maximum))
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::ConnectionDescription* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions(
    const _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::ConnectionDescription **tmp1 =
        _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::allocbuf (this->maximum_);
      Components::ConnectionDescription ** const tmp2 =
        ACE_reinterpret_cast (Components::ConnectionDescription ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          if (tmp2[i] != 0)
            {
              tmp2[i]->_add_ref ();
            }
          
          tmp1[i] = tmp2 [i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions &
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::operator= (
    const _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::ConnectionDescription **tmp =
        ACE_reinterpret_cast (Components::ConnectionDescription **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (tmp[i] != 0)
            {
              tmp[i]->_remove_ref ();
            }
          
          tmp[i] = 0;
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::ConnectionDescription **tmp1 =
    ACE_reinterpret_cast (Components::ConnectionDescription **, this->buffer_);
  
  Components::ConnectionDescription ** const tmp2 =
    ACE_reinterpret_cast (Components::ConnectionDescription ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      if (tmp2[i] != 0)
        {
          tmp2[i]->_add_ref ();
        }
      
      tmp1[i] = tmp2 [i];
    }
  
  return *this;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ConnectionDescription,Components::ConnectionDescription_var>
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::ConnectionDescription ** const tmp =
    ACE_reinterpret_cast (Components::ConnectionDescription ** ACE_CAST_CONST, this->buffer_);
  return TAO_Valuetype_Manager<Components::ConnectionDescription,Components::ConnectionDescription_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::ConnectionDescription* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::get_buffer (CORBA::Boolean orphan)
{
  Components::ConnectionDescription **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::ConnectionDescription**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::ConnectionDescription**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::ConnectionDescription* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ConnectionDescriptions::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::ConnectionDescription ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_CONNECTIONDESCRIPTIONS_CI_)
#define _COMPONENTS_CONNECTIONDESCRIPTIONS_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::ConnectionDescriptions_var
// *************************************************************

ACE_INLINE
Components::ConnectionDescriptions_var::ConnectionDescriptions_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::ConnectionDescriptions_var::ConnectionDescriptions_var (ConnectionDescriptions *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::ConnectionDescriptions_var::ConnectionDescriptions_var (const ::Components::ConnectionDescriptions_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::ConnectionDescriptions (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::ConnectionDescriptions_var::~ConnectionDescriptions_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::ConnectionDescriptions_var &
Components::ConnectionDescriptions_var::operator= (ConnectionDescriptions *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::ConnectionDescriptions_var &
Components::ConnectionDescriptions_var::operator= (const ::Components::ConnectionDescriptions_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ConnectionDescriptions *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ConnectionDescriptions (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ConnectionDescriptions *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::ConnectionDescriptions *
Components::ConnectionDescriptions_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::ConnectionDescriptions *
Components::ConnectionDescriptions_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::ConnectionDescriptions_var::operator const ::Components::ConnectionDescriptions &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::ConnectionDescriptions_var::operator ::Components::ConnectionDescriptions &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::ConnectionDescriptions_var::operator ::Components::ConnectionDescriptions &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::ConnectionDescriptions_var::operator ::Components::ConnectionDescriptions *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ConnectionDescription, Components::ConnectionDescription_var>
Components::ConnectionDescriptions_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::ConnectionDescriptions &
Components::ConnectionDescriptions_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::ConnectionDescriptions &
Components::ConnectionDescriptions_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::ConnectionDescriptions *&
Components::ConnectionDescriptions_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::ConnectionDescriptions *
Components::ConnectionDescriptions_var::_retn (void)
{
  ::Components::ConnectionDescriptions *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::ConnectionDescriptions *
Components::ConnectionDescriptions_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::ConnectionDescriptions_out
// *************************************************************

ACE_INLINE
Components::ConnectionDescriptions_out::ConnectionDescriptions_out (ConnectionDescriptions *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::ConnectionDescriptions_out::ConnectionDescriptions_out (ConnectionDescriptions_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::ConnectionDescriptions_out::ConnectionDescriptions_out (const ::Components::ConnectionDescriptions_out &p)
  : ptr_ (ACE_const_cast (ConnectionDescriptions_out&, p).ptr_)
{}

ACE_INLINE
::Components::ConnectionDescriptions_out &
Components::ConnectionDescriptions_out::operator= (const ::Components::ConnectionDescriptions_out &p)
{
  this->ptr_ = ACE_const_cast (ConnectionDescriptions_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::ConnectionDescriptions_out &
Components::ConnectionDescriptions_out::operator= (ConnectionDescriptions *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::ConnectionDescriptions_out::operator ::Components::ConnectionDescriptions *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::ConnectionDescriptions *&
Components::ConnectionDescriptions_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::ConnectionDescriptions *
Components::ConnectionDescriptions_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ConnectionDescription, Components::ConnectionDescription_var>
Components::ConnectionDescriptions_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ci.cpp:56

ACE_INLINE
Components::ReceptacleDescription::ReceptacleDescription (void)
{}

ACE_INLINE
Components::ReceptacleDescription::~ReceptacleDescription (void)
{}

ACE_INLINE const char* 
Components::ReceptacleDescription::_tao_obv_static_repository_id ()
{
  return "IDL:omg.org/Components/ReceptacleDescription:1.0";
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_RECEPTACLEDESCRIPTIONS_CI_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_RECEPTACLEDESCRIPTIONS_CI_

ACE_INLINE
Components::ReceptacleDescription **
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::allocbuf (CORBA::ULong nelems)
{
  Components::ReceptacleDescription **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::ReceptacleDescription*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = 0;
    }
  
  return buf;
}

ACE_INLINE
void 
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::freebuf (Components::ReceptacleDescription **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions (void)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::allocbuf (maximum))
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::ReceptacleDescription* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions(
    const _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::ReceptacleDescription **tmp1 =
        _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::allocbuf (this->maximum_);
      Components::ReceptacleDescription ** const tmp2 =
        ACE_reinterpret_cast (Components::ReceptacleDescription ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          if (tmp2[i] != 0)
            {
              tmp2[i]->_add_ref ();
            }
          
          tmp1[i] = tmp2 [i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions &
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::operator= (
    const _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::ReceptacleDescription **tmp =
        ACE_reinterpret_cast (Components::ReceptacleDescription **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (tmp[i] != 0)
            {
              tmp[i]->_remove_ref ();
            }
          
          tmp[i] = 0;
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::ReceptacleDescription **tmp1 =
    ACE_reinterpret_cast (Components::ReceptacleDescription **, this->buffer_);
  
  Components::ReceptacleDescription ** const tmp2 =
    ACE_reinterpret_cast (Components::ReceptacleDescription ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      if (tmp2[i] != 0)
        {
          tmp2[i]->_add_ref ();
        }
      
      tmp1[i] = tmp2 [i];
    }
  
  return *this;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ReceptacleDescription,Components::ReceptacleDescription_var>
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::ReceptacleDescription ** const tmp =
    ACE_reinterpret_cast (Components::ReceptacleDescription ** ACE_CAST_CONST, this->buffer_);
  return TAO_Valuetype_Manager<Components::ReceptacleDescription,Components::ReceptacleDescription_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::ReceptacleDescription* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::get_buffer (CORBA::Boolean orphan)
{
  Components::ReceptacleDescription **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::ReceptacleDescription**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::ReceptacleDescription**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::ReceptacleDescription* *
Components::_TAO_Unbounded_Valuetype_Sequence_Components_ReceptacleDescriptions::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::ReceptacleDescription ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_RECEPTACLEDESCRIPTIONS_CI_)
#define _COMPONENTS_RECEPTACLEDESCRIPTIONS_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::ReceptacleDescriptions_var
// *************************************************************

ACE_INLINE
Components::ReceptacleDescriptions_var::ReceptacleDescriptions_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::ReceptacleDescriptions_var::ReceptacleDescriptions_var (ReceptacleDescriptions *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::ReceptacleDescriptions_var::ReceptacleDescriptions_var (const ::Components::ReceptacleDescriptions_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::ReceptacleDescriptions (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::ReceptacleDescriptions_var::~ReceptacleDescriptions_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::ReceptacleDescriptions_var &
Components::ReceptacleDescriptions_var::operator= (ReceptacleDescriptions *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::ReceptacleDescriptions_var &
Components::ReceptacleDescriptions_var::operator= (const ::Components::ReceptacleDescriptions_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ReceptacleDescriptions *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ReceptacleDescriptions (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ReceptacleDescriptions *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::ReceptacleDescriptions *
Components::ReceptacleDescriptions_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::ReceptacleDescriptions *
Components::ReceptacleDescriptions_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::ReceptacleDescriptions_var::operator const ::Components::ReceptacleDescriptions &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::ReceptacleDescriptions_var::operator ::Components::ReceptacleDescriptions &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::ReceptacleDescriptions_var::operator ::Components::ReceptacleDescriptions &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::ReceptacleDescriptions_var::operator ::Components::ReceptacleDescriptions *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ReceptacleDescription, Components::ReceptacleDescription_var>
Components::ReceptacleDescriptions_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::ReceptacleDescriptions &
Components::ReceptacleDescriptions_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::ReceptacleDescriptions &
Components::ReceptacleDescriptions_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::ReceptacleDescriptions *&
Components::ReceptacleDescriptions_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::ReceptacleDescriptions *
Components::ReceptacleDescriptions_var::_retn (void)
{
  ::Components::ReceptacleDescriptions *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::ReceptacleDescriptions *
Components::ReceptacleDescriptions_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::ReceptacleDescriptions_out
// *************************************************************

ACE_INLINE
Components::ReceptacleDescriptions_out::ReceptacleDescriptions_out (ReceptacleDescriptions *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::ReceptacleDescriptions_out::ReceptacleDescriptions_out (ReceptacleDescriptions_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::ReceptacleDescriptions_out::ReceptacleDescriptions_out (const ::Components::ReceptacleDescriptions_out &p)
  : ptr_ (ACE_const_cast (ReceptacleDescriptions_out&, p).ptr_)
{}

ACE_INLINE
::Components::ReceptacleDescriptions_out &
Components::ReceptacleDescriptions_out::operator= (const ::Components::ReceptacleDescriptions_out &p)
{
  this->ptr_ = ACE_const_cast (ReceptacleDescriptions_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::ReceptacleDescriptions_out &
Components::ReceptacleDescriptions_out::operator= (ReceptacleDescriptions *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::ReceptacleDescriptions_out::operator ::Components::ReceptacleDescriptions *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::ReceptacleDescriptions *&
Components::ReceptacleDescriptions_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::ReceptacleDescriptions *
Components::ReceptacleDescriptions_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Valuetype_Manager<Components::ReceptacleDescription, Components::ReceptacleDescription_var>
Components::ReceptacleDescriptions_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_RECEPTACLES___CI_)
#define _COMPONENTS_RECEPTACLES___CI_

ACE_INLINE
Components::Receptacles::Receptacles (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Receptacles_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_NameList_I_
#define _TAO_CDR_OP_Components_NameList_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::NameList &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::NameList &
  );

#endif /* _TAO_CDR_OP_Components_NameList_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::Cookie *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::Cookie *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::Cookie *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::Cookie *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::PortDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::PortDescription *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::PortDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::PortDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::FacetDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::FacetDescription *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::FacetDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::FacetDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_FacetDescriptions_I_
#define _TAO_CDR_OP_Components_FacetDescriptions_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::FacetDescriptions &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::FacetDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_FacetDescriptions_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::InvalidName &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::InvalidName&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::InvalidConnection &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::InvalidConnection&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::ExceededConnectionLimit &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::ExceededConnectionLimit&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::AlreadyConnected &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::AlreadyConnected&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::NoConnection &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::NoConnection&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::CookieRequired &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::CookieRequired&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::CreateFailure &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      if (
        (strm << _tao_aggregate.reason)
       )
        {
          return 1;
        }
      else
        {
          return 0;
        }
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::CreateFailure &_tao_aggregate
  )
{
  // Demarshal the members.
  if (
    (strm >> _tao_aggregate.reason)
  )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::FinderFailure &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      if (
        (strm << _tao_aggregate.reason)
       )
        {
          return 1;
        }
      else
        {
          return 0;
        }
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::FinderFailure &_tao_aggregate
  )
{
  // Demarshal the members.
  if (
    (strm >> _tao_aggregate.reason)
  )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::RemoveFailure &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      if (
        (strm << _tao_aggregate.reason)
       )
        {
          return 1;
        }
      else
        {
          return 0;
        }
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::RemoveFailure &_tao_aggregate
  )
{
  // Demarshal the members.
  if (
    (strm >> _tao_aggregate.reason)
  )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::DuplicateKeyValue &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::DuplicateKeyValue&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::InvalidKey &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::InvalidKey&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::UnknownKeyValue &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::UnknownKeyValue&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::NoKeyAvailable &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::NoKeyAvailable&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::BadEventType &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      if (
        (strm << _tao_aggregate.expected_event_type.in ())
       )
        {
          return 1;
        }
      else
        {
          return 0;
        }
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::BadEventType &_tao_aggregate
  )
{
  // Demarshal the members.
  if (
    (strm >> _tao_aggregate.expected_event_type.out ())
  )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::HomeNotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::HomeNotFound&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::WrongComponentType &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::WrongComponentType&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::InvalidConfiguration &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      if (
        (strm << _tao_aggregate.reason) &&
        (strm << _tao_aggregate.name.in ())
       )
        {
          return 1;
        }
      else
        {
          return 0;
        }
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::InvalidConfiguration &_tao_aggregate
  )
{
  // Demarshal the members.
  if (
    (strm >> _tao_aggregate.reason) &&
    (strm >> _tao_aggregate.name.out ())
  )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::IllegalState &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::IllegalState&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Navigation_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Navigation_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::ConnectionDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::ConnectionDescription *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::ConnectionDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::ConnectionDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_ConnectionDescriptions_I_
#define _TAO_CDR_OP_Components_ConnectionDescriptions_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::ConnectionDescriptions &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::ConnectionDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_ConnectionDescriptions_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:712

#if defined (__ACE_INLINE__)

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::ReceptacleDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::ReceptacleDescription *);
}
TAO_NAMESPACE_CLOSE

#endif /*__ACE_INLINE__*/

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ci.cpp:60

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::ReceptacleDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::ReceptacleDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_ReceptacleDescriptions_I_
#define _TAO_CDR_OP_Components_ReceptacleDescriptions_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::ReceptacleDescriptions &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::ReceptacleDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_ReceptacleDescriptions_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Receptacles_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Receptacles_ptr &
  );

