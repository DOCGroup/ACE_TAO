// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_COSPERSISTENTSTATEC_H_
#define _TAO_IDL_COSPERSISTENTSTATEC_H_

#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO 
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

TAO_NAMESPACE  CosPersistentState
{
  
#if !defined (_COSPERSISTENTSTATE_CATALOGBASE___PTR_CH_)
#define _COSPERSISTENTSTATE_CATALOGBASE___PTR_CH_
  
  class CatalogBase;
  typedef CatalogBase *CatalogBase_ptr;
  
#endif /* end #if !defined */
  
  
#if !defined (_COSPERSISTENTSTATE_CATALOGBASE___VAR_CH_)
#define _COSPERSISTENTSTATE_CATALOGBASE___VAR_CH_
  
  class  CatalogBase_var : public TAO_Base_var
  {
  public:
    CatalogBase_var (void); // default constructor
    CatalogBase_var (CatalogBase_ptr p) : ptr_ (p) {} 
    CatalogBase_var (const CatalogBase_var &); // copy constructor
    ~CatalogBase_var (void); // destructor
    
    CatalogBase_var &operator= (CatalogBase_ptr);
    CatalogBase_var &operator= (const CatalogBase_var &);
    CatalogBase_ptr operator-> (void) const;
    
    operator const CatalogBase_ptr &() const;
    operator CatalogBase_ptr &();
    // in, inout, out, _retn 
    CatalogBase_ptr in (void) const;
    CatalogBase_ptr &inout (void);
    CatalogBase_ptr &out (void);
    CatalogBase_ptr _retn (void);
    CatalogBase_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static CatalogBase_ptr tao_duplicate (CatalogBase_ptr);
    static void tao_release (CatalogBase_ptr);
    static CatalogBase_ptr tao_nil (void);
    static CatalogBase_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    CatalogBase_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    CatalogBase_var (const TAO_Base_var &rhs);
    CatalogBase_var &operator= (const TAO_Base_var &rhs);
  };


#endif /* end #if !defined */
  
  
#if !defined (_COSPERSISTENTSTATE_CATALOGBASE___OUT_CH_)
#define _COSPERSISTENTSTATE_CATALOGBASE___OUT_CH_
  
  class  CatalogBase_out
  {
  public:
    CatalogBase_out (CatalogBase_ptr &);
    CatalogBase_out (CatalogBase_var &);
    CatalogBase_out (const CatalogBase_out &);
    CatalogBase_out &operator= (const CatalogBase_out &);
    CatalogBase_out &operator= (const CatalogBase_var &);
    CatalogBase_out &operator= (CatalogBase_ptr);
    operator CatalogBase_ptr &();
    CatalogBase_ptr &ptr (void);
    CatalogBase_ptr operator-> (void);
  
  private:
    CatalogBase_ptr &ptr_;
  };
  
  
#endif /* end #if !defined */
  
  // *************************************************************
  // CosPersistentState::CatalogBase
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:106
  // *************************************************************
  
  
#if !defined (_COSPERSISTENTSTATE_CATALOGBASE_CH_)
#define _COSPERSISTENTSTATE_CATALOGBASE_CH_
  
  class  CatalogBase
    : public virtual CORBA_Object
  {
  public:
  #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef CatalogBase_ptr _ptr_type;
    typedef CatalogBase_var _var_type;
  #endif /* ! __GNUC__ || g++ >= 2.8 */

    static int _tao_class_id;
    
    // The static operations.
    static CatalogBase_ptr _duplicate (CatalogBase_ptr obj);
    
    static CatalogBase_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static CatalogBase_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static CatalogBase_ptr _nil (void)
      {
        return (CatalogBase_ptr)0;
      }
    
    static void _tao_any_destructor (void*);
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;

  protected:
    CatalogBase (void);
    
    virtual ~CatalogBase (void);
  
  private:
    CatalogBase (const CatalogBase &);
    void operator= (const CatalogBase &);
  };
  
  
#endif /* end #if !defined */
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_CatalogBase;
  
  
#if !defined (_COSPERSISTENTSTATE_TYPEID_CH_)
#define _COSPERSISTENTSTATE_TYPEID_CH_
  
  class TypeId;
  class TypeId_var;
  
  // *************************************************************
  // TypeId
  // *************************************************************
  
  class  TypeId : public 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::Octet>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    TypeId (void); // default ctor
    TypeId (CORBA::ULong max); // uses max size
    TypeId (
        CORBA::ULong max, 
        CORBA::ULong length, 
        CORBA::Octet *buffer, 
        CORBA::Boolean release = 0
      );
    TypeId (const TypeId &); // copy ctor
    ~TypeId (void);
    static void _tao_any_destructor (void*);
    
#if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef TypeId_var _var_type;
#endif /* ! __GNUC__ || g++ >= 2.8 */
    
    
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    TypeId (
        CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : TAO_Unbounded_Sequence<CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
    
  };
  
#endif /* end #if !defined */
  
  
#if !defined (_COSPERSISTENTSTATE_TYPEID___VAR_CH_)
#define _COSPERSISTENTSTATE_TYPEID___VAR_CH_
  
  // *************************************************************
  // class CosPersistentState::TypeId_var
  // *************************************************************
  
  class  TypeId_var
  {
  public:
    TypeId_var (void);
    TypeId_var (TypeId *);
    TypeId_var (const TypeId_var &);
    // Fixed-size base types only.
    TypeId_var (const TypeId &);
    ~TypeId_var (void);
    
    TypeId_var &operator= (TypeId *);
    TypeId_var &operator= (const TypeId_var &);
    // Fixed-size base types only.
    TypeId_var &operator= (const TypeId &);
    TypeId *operator-> (void);
    const TypeId *operator-> (void) const;
    
    operator const TypeId &() const;
    operator TypeId &();
    operator TypeId &() const;
    
    CORBA::Octet & operator[] (CORBA::ULong index);
    const CORBA::Octet & operator[] (CORBA::ULong index) const;
    
    // in, inout, out, _retn 
    const TypeId &in (void) const;
    TypeId &inout (void);
    TypeId *&out (void);
    TypeId *_retn (void);
    TypeId *ptr (void) const;
  
  private:
    TypeId *ptr_;
  };
  
  
#endif /* end #if !defined */
  
  
#if !defined (_COSPERSISTENTSTATE_TYPEID___OUT_CH_)
#define _COSPERSISTENTSTATE_TYPEID___OUT_CH_
  
  class  TypeId_out
  {
  public:
    TypeId_out (TypeId *&);
    TypeId_out (TypeId_var &);
    TypeId_out (const TypeId_out &);
    TypeId_out &operator= (const TypeId_out &);
    TypeId_out &operator= (TypeId *);
    operator TypeId *&();
    TypeId *&ptr (void);
    TypeId *operator-> (void);
    CORBA::Octet & operator[] (CORBA::ULong index);
  
  private:
    TypeId *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const TypeId_var &);
  };
  
  
#endif /* end #if !defined */
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_TypeId;
  
  typedef char * Pid;
  typedef CORBA::String_var Pid_var;
  typedef CORBA::String_out Pid_out;
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Pid;
  
  
}
TAO_NAMESPACE_CLOSE // module CosPersistentState

// Any operators for interface CosPersistentState::CatalogBase
 void operator<<= (CORBA::Any &, CosPersistentState::CatalogBase_ptr); // copying
 void operator<<= (CORBA::Any &, CosPersistentState::CatalogBase_ptr *); // non-copying
 CORBA::Boolean operator>>= (const CORBA::Any &, CosPersistentState::CatalogBase_ptr &);
 void operator<<= (CORBA::Any &, const CosPersistentState::TypeId &); // copying version
 void operator<<= (CORBA::Any &, CosPersistentState::TypeId*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, CosPersistentState::TypeId *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const CosPersistentState::TypeId *&);

#ifndef __ACE_INLINE__


#if !defined _TAO_CDR_OP_CosPersistentState_TypeId_H_
#define _TAO_CDR_OP_CosPersistentState_TypeId_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CosPersistentState::TypeId &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPersistentState::TypeId &
  );

#endif /* _TAO_CDR_OP_CosPersistentState_TypeId_H_ */


#endif /* __ACE_INLINE__ */


#if defined (__ACE_INLINE__)
#include "CosPersistentStateC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */
