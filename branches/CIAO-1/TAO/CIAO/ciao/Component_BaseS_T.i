// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Navigation_tie<T>::Navigation_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Navigation_tie<T>::Navigation_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Navigation_tie<T>::Navigation_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Navigation_tie<T>::Navigation_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Navigation_tie<T>::~Navigation_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Navigation_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Navigation_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Navigation_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Navigation_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Navigation_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Navigation_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Navigation::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
CORBA::Object_ptr POA_Components::Navigation_tie<T>::provide_facet  (
    const char * name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->provide_facet (
name
  );
}

template <class T> ACE_INLINE
::Components::FacetDescriptions * POA_Components::Navigation_tie<T>::get_all_facets  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_facets (

  );
}

template <class T> ACE_INLINE
::Components::FacetDescriptions * POA_Components::Navigation_tie<T>::get_named_facets  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_facets (
names
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_Components::Navigation_tie<T>::same_component  (
    CORBA::Object_ptr object_ref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->same_component (
object_ref
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Receptacles_tie<T>::Receptacles_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Receptacles_tie<T>::Receptacles_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Receptacles_tie<T>::Receptacles_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Receptacles_tie<T>::Receptacles_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Receptacles_tie<T>::~Receptacles_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Receptacles_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Receptacles_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Receptacles_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Receptacles_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Receptacles_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Receptacles_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Receptacles::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::Cookie * POA_Components::Receptacles_tie<T>::connect  (
    const char * name,
    CORBA::Object_ptr connection
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::InvalidConnection
    , Components::AlreadyConnected
    , Components::ExceededConnectionLimit
  ))
{
  return this->ptr_->connect (
name,
    connection
  );
}

template <class T> ACE_INLINE
void POA_Components::Receptacles_tie<T>::disconnect  (
    const char * name,
    Components::Cookie * ck
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::InvalidConnection
    , Components::CookieRequired
    , Components::NoConnection
  ))
{
  this->ptr_->disconnect (
name,
    ck
  );
}

template <class T> ACE_INLINE
::Components::ConnectionDescriptions * POA_Components::Receptacles_tie<T>::get_connections  (
    const char * name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_connections (
name
  );
}

template <class T> ACE_INLINE
::Components::ReceptacleDescriptions * POA_Components::Receptacles_tie<T>::get_all_receptacles  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_receptacles (

  );
}

template <class T> ACE_INLINE
::Components::ReceptacleDescriptions * POA_Components::Receptacles_tie<T>::get_named_receptacles  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_receptacles (
names
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::EventConsumerBase_tie<T>::EventConsumerBase_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::EventConsumerBase_tie<T>::EventConsumerBase_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::EventConsumerBase_tie<T>::EventConsumerBase_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::EventConsumerBase_tie<T>::EventConsumerBase_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::EventConsumerBase_tie<T>::~EventConsumerBase_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::EventConsumerBase_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::EventConsumerBase_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::EventConsumerBase_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::EventConsumerBase_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::EventConsumerBase_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::EventConsumerBase_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->EventConsumerBase::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
void POA_Components::EventConsumerBase_tie<T>::push_event  (
    Components::EventBase * evt
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::BadEventType
  ))
{
  this->ptr_->push_event (
evt
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Events_tie<T>::Events_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Events_tie<T>::Events_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Events_tie<T>::Events_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Events_tie<T>::Events_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Events_tie<T>::~Events_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Events_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Events_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Events_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Events_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Events_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Events_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Events::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::EventConsumerBase_ptr POA_Components::Events_tie<T>::get_consumer  (
    const char * sink_name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_consumer (
sink_name
  );
}

template <class T> ACE_INLINE
::Components::Cookie * POA_Components::Events_tie<T>::subscribe  (
    const char * publisher_name,
    Components::EventConsumerBase_ptr subscriber
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::AlreadyConnected
    , Components::InvalidConnection
  ))
{
  return this->ptr_->subscribe (
publisher_name,
    subscriber
  );
}

template <class T> ACE_INLINE
void POA_Components::Events_tie<T>::unsubscribe  (
    const char * publisher_name,
    Components::Cookie * ck
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::InvalidConnection
  ))
{
  this->ptr_->unsubscribe (
publisher_name,
    ck
  );
}

template <class T> ACE_INLINE
void POA_Components::Events_tie<T>::connect_consumer  (
    const char * emitter_name,
    Components::EventConsumerBase_ptr consumer
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::AlreadyConnected
    , Components::InvalidConnection
  ))
{
  this->ptr_->connect_consumer (
emitter_name,
    consumer
  );
}

template <class T> ACE_INLINE
::Components::EventConsumerBase_ptr POA_Components::Events_tie<T>::disconnect_consumer  (
    const char * source_name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::NoConnection
  ))
{
  return this->ptr_->disconnect_consumer (
source_name
  );
}

template <class T> ACE_INLINE
::Components::ConsumerDescriptions * POA_Components::Events_tie<T>::get_all_consumers  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_consumers (

  );
}

template <class T> ACE_INLINE
::Components::ConsumerDescriptions * POA_Components::Events_tie<T>::get_named_consumers  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_consumers (
names
  );
}

template <class T> ACE_INLINE
::Components::EmitterDescriptions * POA_Components::Events_tie<T>::get_all_emitters  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_emitters (

  );
}

template <class T> ACE_INLINE
::Components::EmitterDescriptions * POA_Components::Events_tie<T>::get_named_emitters  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_emitters (
names
  );
}

template <class T> ACE_INLINE
::Components::PublisherDescriptions * POA_Components::Events_tie<T>::get_all_publishers  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_publishers (

  );
}

template <class T> ACE_INLINE
::Components::PublisherDescriptions * POA_Components::Events_tie<T>::get_named_publishers  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_publishers (
names
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::CCMHome_tie<T>::CCMHome_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::CCMHome_tie<T>::CCMHome_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::CCMHome_tie<T>::CCMHome_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::CCMHome_tie<T>::CCMHome_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::CCMHome_tie<T>::~CCMHome_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::CCMHome_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::CCMHome_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::CCMHome_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::CCMHome_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::CCMHome_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::CCMHome_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->CCMHome::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::CORBA::IRObject_ptr POA_Components::CCMHome_tie<T>::get_component_def  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_component_def (

  );
}

template <class T> ACE_INLINE
::CORBA::IRObject_ptr POA_Components::CCMHome_tie<T>::get_home_def  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_home_def (

  );
}

template <class T> ACE_INLINE
void POA_Components::CCMHome_tie<T>::remove_component  (
    Components::CCMObject_ptr comp
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove_component (
comp
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::KeylessCCMHome_tie<T>::KeylessCCMHome_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::KeylessCCMHome_tie<T>::KeylessCCMHome_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::KeylessCCMHome_tie<T>::KeylessCCMHome_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::KeylessCCMHome_tie<T>::KeylessCCMHome_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::KeylessCCMHome_tie<T>::~KeylessCCMHome_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::KeylessCCMHome_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::KeylessCCMHome_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::KeylessCCMHome_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::KeylessCCMHome_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::KeylessCCMHome_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::KeylessCCMHome_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->KeylessCCMHome::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::CCMObject_ptr POA_Components::KeylessCCMHome_tie<T>::create_component  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
  ))
{
  return this->ptr_->create_component (

  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::HomeFinder_tie<T>::HomeFinder_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::HomeFinder_tie<T>::HomeFinder_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::HomeFinder_tie<T>::HomeFinder_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::HomeFinder_tie<T>::HomeFinder_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::HomeFinder_tie<T>::~HomeFinder_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::HomeFinder_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::HomeFinder_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::HomeFinder_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::HomeFinder_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::HomeFinder_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::HomeFinder_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->HomeFinder::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::CCMHome_ptr POA_Components::HomeFinder_tie<T>::find_home_by_component_type  (
    const char * comp_repid
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::HomeNotFound
  ))
{
  return this->ptr_->find_home_by_component_type (
comp_repid
  );
}

template <class T> ACE_INLINE
::Components::CCMHome_ptr POA_Components::HomeFinder_tie<T>::find_home_by_home_type  (
    const char * home_repid
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::HomeNotFound
  ))
{
  return this->ptr_->find_home_by_home_type (
home_repid
  );
}

template <class T> ACE_INLINE
::Components::CCMHome_ptr POA_Components::HomeFinder_tie<T>::find_home_by_name  (
    const char * home_name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::HomeNotFound
  ))
{
  return this->ptr_->find_home_by_name (
home_name
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Configurator_tie<T>::Configurator_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Configurator_tie<T>::Configurator_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Configurator_tie<T>::Configurator_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Configurator_tie<T>::Configurator_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Configurator_tie<T>::~Configurator_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Configurator_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Configurator_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Configurator_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Configurator_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Configurator_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Configurator_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Configurator::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
void POA_Components::Configurator_tie<T>::configure  (
    Components::CCMObject_ptr comp
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::WrongComponentType
  ))
{
  this->ptr_->configure (
comp
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::StandardConfigurator_tie<T>::StandardConfigurator_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::StandardConfigurator_tie<T>::StandardConfigurator_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::StandardConfigurator_tie<T>::StandardConfigurator_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::StandardConfigurator_tie<T>::StandardConfigurator_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::StandardConfigurator_tie<T>::~StandardConfigurator_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::StandardConfigurator_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::StandardConfigurator_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::StandardConfigurator_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::StandardConfigurator_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::StandardConfigurator_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::StandardConfigurator_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->StandardConfigurator::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
void POA_Components::StandardConfigurator_tie<T>::set_configuration  (
    const Components::ConfigValues & descr
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->set_configuration (
descr
  );
}

template <class T> ACE_INLINE
void POA_Components::StandardConfigurator_tie<T>::configure  (
    Components::CCMObject_ptr comp
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::WrongComponentType
  ))
{
  this->ptr_->configure (
comp
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::HomeConfiguration_tie<T>::HomeConfiguration_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::HomeConfiguration_tie<T>::HomeConfiguration_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::HomeConfiguration_tie<T>::HomeConfiguration_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::HomeConfiguration_tie<T>::HomeConfiguration_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::HomeConfiguration_tie<T>::~HomeConfiguration_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::HomeConfiguration_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::HomeConfiguration_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::HomeConfiguration_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::HomeConfiguration_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::HomeConfiguration_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::HomeConfiguration_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->HomeConfiguration::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
void POA_Components::HomeConfiguration_tie<T>::set_configurator  (
    Components::Configurator_ptr cfg
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->set_configurator (
cfg
  );
}

template <class T> ACE_INLINE
void POA_Components::HomeConfiguration_tie<T>::set_configuration_values  (
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->set_configuration_values (
config
  );
}

template <class T> ACE_INLINE
void POA_Components::HomeConfiguration_tie<T>::complete_component_configuration  (
    CORBA::Boolean b
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->complete_component_configuration (
b
  );
}

template <class T> ACE_INLINE
void POA_Components::HomeConfiguration_tie<T>::disable_home_configuration  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->disable_home_configuration (

  );
}

template <class T> ACE_INLINE
::CORBA::IRObject_ptr POA_Components::HomeConfiguration_tie<T>::get_component_def  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_component_def (

  );
}

template <class T> ACE_INLINE
::CORBA::IRObject_ptr POA_Components::HomeConfiguration_tie<T>::get_home_def  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_home_def (

  );
}

template <class T> ACE_INLINE
void POA_Components::HomeConfiguration_tie<T>::remove_component  (
    Components::CCMObject_ptr comp
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove_component (
comp
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::CCMObject_tie<T>::CCMObject_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::CCMObject_tie<T>::CCMObject_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::CCMObject_tie<T>::CCMObject_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::CCMObject_tie<T>::CCMObject_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::CCMObject_tie<T>::~CCMObject_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::CCMObject_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::CCMObject_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::CCMObject_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::CCMObject_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::CCMObject_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::CCMObject_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->CCMObject::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::CORBA::IRObject_ptr POA_Components::CCMObject_tie<T>::get_component_def  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_component_def (

  );
}

template <class T> ACE_INLINE
::Components::CCMHome_ptr POA_Components::CCMObject_tie<T>::get_ccm_home  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_ccm_home (

  );
}

template <class T> ACE_INLINE
::Components::PrimaryKeyBase * POA_Components::CCMObject_tie<T>::get_primary_key  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::NoKeyAvailable
  ))
{
  return this->ptr_->get_primary_key (

  );
}

template <class T> ACE_INLINE
void POA_Components::CCMObject_tie<T>::configuration_complete  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidConfiguration
  ))
{
  this->ptr_->configuration_complete (

  );
}

template <class T> ACE_INLINE
void POA_Components::CCMObject_tie<T>::remove  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove (

  );
}

template <class T> ACE_INLINE
::Components::ComponentPortDescription * POA_Components::CCMObject_tie<T>::get_all_ports  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_ports (

  );
}

template <class T> ACE_INLINE
CORBA::Object_ptr POA_Components::CCMObject_tie<T>::provide_facet  (
    const char * name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->provide_facet (
name
  );
}

template <class T> ACE_INLINE
::Components::FacetDescriptions * POA_Components::CCMObject_tie<T>::get_all_facets  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_facets (

  );
}

template <class T> ACE_INLINE
::Components::FacetDescriptions * POA_Components::CCMObject_tie<T>::get_named_facets  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_facets (
names
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_Components::CCMObject_tie<T>::same_component  (
    CORBA::Object_ptr object_ref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->same_component (
object_ref
  );
}

template <class T> ACE_INLINE
::Components::Cookie * POA_Components::CCMObject_tie<T>::connect  (
    const char * name,
    CORBA::Object_ptr connection
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::InvalidConnection
    , Components::AlreadyConnected
    , Components::ExceededConnectionLimit
  ))
{
  return this->ptr_->connect (
name,
    connection
  );
}

template <class T> ACE_INLINE
void POA_Components::CCMObject_tie<T>::disconnect  (
    const char * name,
    Components::Cookie * ck
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::InvalidConnection
    , Components::CookieRequired
    , Components::NoConnection
  ))
{
  this->ptr_->disconnect (
name,
    ck
  );
}

template <class T> ACE_INLINE
::Components::ConnectionDescriptions * POA_Components::CCMObject_tie<T>::get_connections  (
    const char * name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_connections (
name
  );
}

template <class T> ACE_INLINE
::Components::ReceptacleDescriptions * POA_Components::CCMObject_tie<T>::get_all_receptacles  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_receptacles (

  );
}

template <class T> ACE_INLINE
::Components::ReceptacleDescriptions * POA_Components::CCMObject_tie<T>::get_named_receptacles  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_receptacles (
names
  );
}

template <class T> ACE_INLINE
::Components::EventConsumerBase_ptr POA_Components::CCMObject_tie<T>::get_consumer  (
    const char * sink_name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_consumer (
sink_name
  );
}

template <class T> ACE_INLINE
::Components::Cookie * POA_Components::CCMObject_tie<T>::subscribe  (
    const char * publisher_name,
    Components::EventConsumerBase_ptr subscriber
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::AlreadyConnected
    , Components::InvalidConnection
  ))
{
  return this->ptr_->subscribe (
publisher_name,
    subscriber
  );
}

template <class T> ACE_INLINE
void POA_Components::CCMObject_tie<T>::unsubscribe  (
    const char * publisher_name,
    Components::Cookie * ck
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::InvalidConnection
  ))
{
  this->ptr_->unsubscribe (
publisher_name,
    ck
  );
}

template <class T> ACE_INLINE
void POA_Components::CCMObject_tie<T>::connect_consumer  (
    const char * emitter_name,
    Components::EventConsumerBase_ptr consumer
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::AlreadyConnected
    , Components::InvalidConnection
  ))
{
  this->ptr_->connect_consumer (
emitter_name,
    consumer
  );
}

template <class T> ACE_INLINE
::Components::EventConsumerBase_ptr POA_Components::CCMObject_tie<T>::disconnect_consumer  (
    const char * source_name
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
    , Components::NoConnection
  ))
{
  return this->ptr_->disconnect_consumer (
source_name
  );
}

template <class T> ACE_INLINE
::Components::ConsumerDescriptions * POA_Components::CCMObject_tie<T>::get_all_consumers  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_consumers (

  );
}

template <class T> ACE_INLINE
::Components::ConsumerDescriptions * POA_Components::CCMObject_tie<T>::get_named_consumers  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_consumers (
names
  );
}

template <class T> ACE_INLINE
::Components::EmitterDescriptions * POA_Components::CCMObject_tie<T>::get_all_emitters  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_emitters (

  );
}

template <class T> ACE_INLINE
::Components::EmitterDescriptions * POA_Components::CCMObject_tie<T>::get_named_emitters  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_emitters (
names
  );
}

template <class T> ACE_INLINE
::Components::PublisherDescriptions * POA_Components::CCMObject_tie<T>::get_all_publishers  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_all_publishers (

  );
}

template <class T> ACE_INLINE
::Components::PublisherDescriptions * POA_Components::CCMObject_tie<T>::get_named_publishers  (
    const Components::NameList & names
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::InvalidName
  ))
{
  return this->ptr_->get_named_publishers (
names
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentInstallation_tie<T>::ComponentInstallation_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentInstallation_tie<T>::ComponentInstallation_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentInstallation_tie<T>::ComponentInstallation_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentInstallation_tie<T>::ComponentInstallation_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentInstallation_tie<T>::~ComponentInstallation_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Deployment::ComponentInstallation_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ComponentInstallation_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ComponentInstallation_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Deployment::ComponentInstallation_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ComponentInstallation_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Deployment::ComponentInstallation_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ComponentInstallation::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
void POA_Components::Deployment::ComponentInstallation_tie<T>::install  (
    const char * implUUID,
    const char * component_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::Deployment::InstallationFailure
  ))
{
  this->ptr_->install (
implUUID,
    component_loc
  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::ComponentInstallation_tie<T>::replace  (
    const char * implUUID,
    const char * component_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::Deployment::InstallationFailure
  ))
{
  this->ptr_->replace (
implUUID,
    component_loc
  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::ComponentInstallation_tie<T>::remove  (
    const char * implUUID
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove (
implUUID
  );
}

template <class T> ACE_INLINE
char * POA_Components::Deployment::ComponentInstallation_tie<T>::get_implementation  (
    const char * implUUID
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::Deployment::InstallationFailure
  ))
{
  return this->ptr_->get_implementation (
implUUID
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Deployment::Assembly_tie<T>::Assembly_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Assembly_tie<T>::Assembly_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Assembly_tie<T>::Assembly_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Assembly_tie<T>::Assembly_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Assembly_tie<T>::~Assembly_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Deployment::Assembly_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::Assembly_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::Assembly_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Deployment::Assembly_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::Assembly_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Deployment::Assembly_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Assembly::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
void POA_Components::Deployment::Assembly_tie<T>::build  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->build (

  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::Assembly_tie<T>::tear_down  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->tear_down (

  );
}

template <class T> ACE_INLINE
::Components::Deployment::AssemblyState POA_Components::Deployment::Assembly_tie<T>::get_state  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_state (

  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Deployment::AssemblyFactory_tie<T>::AssemblyFactory_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::AssemblyFactory_tie<T>::AssemblyFactory_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::AssemblyFactory_tie<T>::AssemblyFactory_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::AssemblyFactory_tie<T>::AssemblyFactory_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::AssemblyFactory_tie<T>::~AssemblyFactory_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Deployment::AssemblyFactory_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::AssemblyFactory_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::AssemblyFactory_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Deployment::AssemblyFactory_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::AssemblyFactory_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Deployment::AssemblyFactory_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->AssemblyFactory::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::Cookie * POA_Components::Deployment::AssemblyFactory_tie<T>::create  (
    const char * assembly_loc
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidLocation
    , Components::CreateFailure
  ))
{
  return this->ptr_->create (
assembly_loc
  );
}

template <class T> ACE_INLINE
::Components::Deployment::Assembly_ptr POA_Components::Deployment::AssemblyFactory_tie<T>::lookup  (
    Components::Cookie * c
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidAssembly
  ))
{
  return this->ptr_->lookup (
c
  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::AssemblyFactory_tie<T>::destroy  (
    Components::Cookie * c
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::InvalidAssembly
    , Components::RemoveFailure
  ))
{
  this->ptr_->destroy (
c
  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Deployment::ServerActivator_tie<T>::ServerActivator_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ServerActivator_tie<T>::ServerActivator_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ServerActivator_tie<T>::ServerActivator_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ServerActivator_tie<T>::ServerActivator_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ServerActivator_tie<T>::~ServerActivator_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Deployment::ServerActivator_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ServerActivator_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ServerActivator_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Deployment::ServerActivator_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ServerActivator_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Deployment::ServerActivator_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ServerActivator::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::Deployment::ComponentServer_ptr POA_Components::Deployment::ServerActivator_tie<T>::create_component_server  (
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
    , Components::InvalidConfiguration
  ))
{
  return this->ptr_->create_component_server (
config
  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::ServerActivator_tie<T>::remove_component_server  (
    Components::Deployment::ComponentServer_ptr server
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove_component_server (
server
  );
}

template <class T> ACE_INLINE
::Components::Deployment::ComponentServers * POA_Components::Deployment::ServerActivator_tie<T>::get_component_servers  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_component_servers (

  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentServer_tie<T>::ComponentServer_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentServer_tie<T>::ComponentServer_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentServer_tie<T>::ComponentServer_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentServer_tie<T>::ComponentServer_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::ComponentServer_tie<T>::~ComponentServer_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Deployment::ComponentServer_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ComponentServer_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ComponentServer_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Deployment::ComponentServer_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::ComponentServer_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Deployment::ComponentServer_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->ComponentServer::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::ConfigValues * POA_Components::Deployment::ComponentServer_tie<T>::configuration  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->configuration (

  );
}

template <class T> ACE_INLINE
::Components::Deployment::ServerActivator_ptr POA_Components::Deployment::ComponentServer_tie<T>::get_server_activator  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_server_activator (

  );
}

template <class T> ACE_INLINE
::Components::Deployment::Container_ptr POA_Components::Deployment::ComponentServer_tie<T>::create_container  (
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
    , Components::InvalidConfiguration
  ))
{
  return this->ptr_->create_container (
config
  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::ComponentServer_tie<T>::remove_container  (
    Components::Deployment::Container_ptr cref
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove_container (
cref
  );
}

template <class T> ACE_INLINE
::Components::Deployment::Containers * POA_Components::Deployment::ComponentServer_tie<T>::get_containers  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_containers (

  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::ComponentServer_tie<T>::remove  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove (

  );
}

#endif /* ACE_HAS_USING_KEYWORD */

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_Components::Deployment::Container_tie<T>::Container_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Container_tie<T>::Container_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Container_tie<T>::Container_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Container_tie<T>::Container_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_Components::Deployment::Container_tie<T>::~Container_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_Components::Deployment::Container_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::Container_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::Container_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_Components::Deployment::Container_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_Components::Deployment::Container_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_Components::Deployment::Container_tie<T>::_default_POA (ACE_ENV_SINGLE_ARG_DECL)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->Container::_default_POA (ACE_ENV_SINGLE_ARG_PARAMETER);
}

template <class T> ACE_INLINE
::Components::ConfigValues * POA_Components::Deployment::Container_tie<T>::configuration  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->configuration (

  );
}

template <class T> ACE_INLINE
::Components::Deployment::ComponentServer_ptr POA_Components::Deployment::Container_tie<T>::get_component_server  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_component_server (

  );
}

template <class T> ACE_INLINE
::Components::CCMHome_ptr POA_Components::Deployment::Container_tie<T>::install_home  (
    const char * id,
    const char * entrypt,
    const Components::ConfigValues & config
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::Deployment::UnknownImplId
    , Components::Deployment::ImplEntryPointNotFound
    , Components::Deployment::InstallationFailure
    , Components::InvalidConfiguration
  ))
{
  return this->ptr_->install_home (
id,
    entrypt,
    config
  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::Container_tie<T>::remove_home  (
    Components::CCMHome_ptr href
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove_home (
href
  );
}

template <class T> ACE_INLINE
::Components::CCMHomes * POA_Components::Deployment::Container_tie<T>::get_homes  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->get_homes (

  );
}

template <class T> ACE_INLINE
void POA_Components::Deployment::Container_tie<T>::remove  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::RemoveFailure
  ))
{
  this->ptr_->remove (

  );
}

#endif /* ACE_HAS_USING_KEYWORD */

