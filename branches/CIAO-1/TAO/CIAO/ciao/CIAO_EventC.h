// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:151

#ifndef _TAO_IDL_CIAO_EVENTC_H_
#define _TAO_IDL_CIAO_EVENTC_H_

#include "ace/pre.h"
#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "CIAO_export.h"

#include "CIAO_BaseC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO CIAO_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO CIAO_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:45

TAO_NAMESPACE  Components
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:52
  
  class EventBase;

#if !defined (_COMPONENTS_EVENTBASE___PTR_CH_)
#define _COMPONENTS_EVENTBASE___PTR_CH_
  
  typedef EventBase *EventBase_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTBASE___VAR_CH_)
#define _COMPONENTS_EVENTBASE___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:181
  
  class CIAO_Export EventBase_var
  {
  public:
    EventBase_var (void);
    EventBase_var (EventBase*);
    EventBase_var (const EventBase*); // (TAO extension)
    EventBase_var (const EventBase_var &);
    ~EventBase_var (void);
    
    EventBase_var &operator= (EventBase*);
    EventBase_var &operator= (const EventBase_var &);
    EventBase* operator-> (void) const;
    
    operator const EventBase* () const;
    operator EventBase* ();
    // in, inout, out, _retn 
    EventBase* in (void) const;
    EventBase*& inout (void);
    EventBase*& out (void);
    EventBase* _retn (void);
    EventBase* ptr (void) const;
    
    // Hooks used by template sequence and valuetype manager classes
    // for non-defined forward declared valuetypes.
    static void tao_add_ref (EventBase *);
    static void tao_remove_ref (EventBase *);
  
  private:
    EventBase* ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTBASE___OUT_CH_)
#define _COMPONENTS_EVENTBASE___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:490
  
  class CIAO_Export EventBase_out
  {
  public:
    EventBase_out (EventBase* &);
    EventBase_out (EventBase_var &);
    EventBase_out (const EventBase_out &);
    EventBase_out &operator= (const EventBase_out &);
    EventBase_out &operator= (const EventBase_var &);
    EventBase_out &operator= (EventBase*);
    operator EventBase*& ();
    EventBase*& ptr (void);
    EventBase* operator-> (void);
    
  private:
    EventBase* &ptr_;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:96

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTBASE_CH_)
#define _COMPONENTS_EVENTBASE_CH_
  
  class CIAO_Export EventBase
    : public virtual CORBA_ValueBase
  {
  public:
    typedef EventBase_var _var_type;
    static EventBase* _downcast (CORBA::ValueBase* );
    // The address of static _downcast is implicit used as type id

    // (TAO extensions or internals)
    static CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        EventBase *&
      );
    virtual const char* _tao_obv_repository_id (void) const;
    static const char* _tao_obv_static_repository_id (void);
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:315
  
  protected:
    EventBase (void);
    virtual ~EventBase (void);
    
    // TAO internals
    virtual void *_tao_obv_narrow (ptr_arith_t);
    
  private:
    EventBase (const EventBase &);
    void operator= (const EventBase &);
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EventBase;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_COMPONENTS_EVENTCONSUMERBASE___PTR_CH_)
#define _COMPONENTS_EVENTCONSUMERBASE___PTR_CH_
  
  class EventConsumerBase;
  typedef EventConsumerBase *EventConsumerBase_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTCONSUMERBASE___VAR_CH_)
#define _COMPONENTS_EVENTCONSUMERBASE___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class CIAO_Export EventConsumerBase_var : public TAO_Base_var
  {
  public:
    EventConsumerBase_var (void); // default constructor
    EventConsumerBase_var (EventConsumerBase_ptr p) : ptr_ (p) {} 
    EventConsumerBase_var (const EventConsumerBase_var &); // copy constructor
    ~EventConsumerBase_var (void); // destructor
    
    EventConsumerBase_var &operator= (EventConsumerBase_ptr);
    EventConsumerBase_var &operator= (const EventConsumerBase_var &);
    EventConsumerBase_ptr operator-> (void) const;
    
    operator const EventConsumerBase_ptr &() const;
    operator EventConsumerBase_ptr &();
    // in, inout, out, _retn 
    EventConsumerBase_ptr in (void) const;
    EventConsumerBase_ptr &inout (void);
    EventConsumerBase_ptr &out (void);
    EventConsumerBase_ptr _retn (void);
    EventConsumerBase_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static EventConsumerBase_ptr tao_duplicate (EventConsumerBase_ptr);
    static void tao_release (EventConsumerBase_ptr);
    static EventConsumerBase_ptr tao_nil (void);
    static EventConsumerBase_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    EventConsumerBase_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    EventConsumerBase_var (const TAO_Base_var &rhs);
    EventConsumerBase_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTCONSUMERBASE___OUT_CH_)
#define _COMPONENTS_EVENTCONSUMERBASE___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class CIAO_Export EventConsumerBase_out
  {
  public:
    EventConsumerBase_out (EventConsumerBase_ptr &);
    EventConsumerBase_out (EventConsumerBase_var &);
    EventConsumerBase_out (const EventConsumerBase_out &);
    EventConsumerBase_out &operator= (const EventConsumerBase_out &);
    EventConsumerBase_out &operator= (const EventConsumerBase_var &);
    EventConsumerBase_out &operator= (EventConsumerBase_ptr);
    operator EventConsumerBase_ptr &();
    EventConsumerBase_ptr &ptr (void);
    EventConsumerBase_ptr operator-> (void);
  
  private:
    EventConsumerBase_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_COMPONENTS_EVENTCONSUMERBASE_CH_)
#define _COMPONENTS_EVENTCONSUMERBASE_CH_
  
  class _TAO_EventConsumerBase_Proxy_Impl;
  class _TAO_EventConsumerBase_Remote_Proxy_Impl;
  class _TAO_EventConsumerBase_Proxy_Broker;
  class _TAO_EventConsumerBase_Remote_Proxy_Broker;
  
  class CIAO_Export EventConsumerBase
    : public virtual CORBA::Object
  {
  public:
    typedef EventConsumerBase_ptr _ptr_type;
    typedef EventConsumerBase_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static EventConsumerBase_ptr _duplicate (EventConsumerBase_ptr obj);
    
    static EventConsumerBase_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static EventConsumerBase_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static EventConsumerBase_ptr _nil (void)
      {
        return (EventConsumerBase_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void push_event (
        Components::EventBase * evt
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::BadEventType
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  private:
    _TAO_EventConsumerBase_Proxy_Broker *the_TAO_EventConsumerBase_Proxy_Broker_;
  
  protected:
    EventConsumerBase (int collocated = 0);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void Components_EventConsumerBase_setup_collocation (int collocated);
    
    EventConsumerBase (
        TAO_Stub *objref, 
        CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0
      );
    virtual ~EventConsumerBase (void);
    
    friend class _TAO_EventConsumerBase_Remote_Proxy_Impl;
    friend class _TAO_EventConsumerBase_ThruPOA_Proxy_Impl;
    friend class _TAO_EventConsumerBase_Direct_Proxy_Impl;
  
  private:
    EventConsumerBase (const EventConsumerBase &);
    void operator= (const EventConsumerBase &);
  };
  
  // The Proxy Implementations are used by each interface to
  // perform a call. Each different implementation encapsulates
  // an invocation logic.
  
  
  ///////////////////////////////////////////////////////////////////////
  //                    Base Proxy Impl. Declaration
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
  
  class CIAO_Export _TAO_EventConsumerBase_Proxy_Impl
    : public virtual TAO_Object_Proxy_Impl
  {
  public:
    virtual ~_TAO_EventConsumerBase_Proxy_Impl (void) {}
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual void push_event (
        CORBA_Object *_collocated_tao_target_,
        Components::EventBase * evt
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::BadEventType
      )) = 0;
  
  protected:
    _TAO_EventConsumerBase_Proxy_Impl (void);
  };
  
  //
  //               End Base Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////
  
  
  ///////////////////////////////////////////////////////////////////////
  //                Remote Proxy Impl. Declaration
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
  
  class CIAO_Export _TAO_EventConsumerBase_Remote_Proxy_Impl
    : public virtual _TAO_EventConsumerBase_Proxy_Impl,
      public virtual TAO_Remote_Object_Proxy_Impl
  {
  public:
    _TAO_EventConsumerBase_Remote_Proxy_Impl (void);
    
    virtual ~_TAO_EventConsumerBase_Remote_Proxy_Impl (void) {}
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual void push_event (
        CORBA_Object *_collocated_tao_target_,
        Components::EventBase * evt
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::BadEventType
      ));
  };
  
  //
  //             End Remote Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////
  
  // The Proxy Brokers are used by each interface to get
  // the right proxy for performing a call. In the new 
  // collocation scheme, the proxy to be used can vary on
  // a call by call basis.
  
  ///////////////////////////////////////////////////////////////////////
  //                 Base Proxy Broker Declaration 
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
  
  class CIAO_Export _TAO_EventConsumerBase_Proxy_Broker
  {
  public:
    virtual ~_TAO_EventConsumerBase_Proxy_Broker (void);
    virtual _TAO_EventConsumerBase_Proxy_Impl &select_proxy (
        EventConsumerBase *object
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      ) = 0;
    
  protected:
    _TAO_EventConsumerBase_Proxy_Broker (void);
    
  };
  
  //
  //              End Base Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////
  
    
  ///////////////////////////////////////////////////////////////////////
  //                 Remote Proxy Broker Declaration 
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
  
  class CIAO_Export _TAO_EventConsumerBase_Remote_Proxy_Broker
    : public virtual _TAO_EventConsumerBase_Proxy_Broker
  {
  public: 
    _TAO_EventConsumerBase_Remote_Proxy_Broker (void);
    
    virtual ~_TAO_EventConsumerBase_Remote_Proxy_Broker (void);
    
    virtual _TAO_EventConsumerBase_Proxy_Impl &select_proxy (
        EventConsumerBase *object
        ACE_ENV_ARG_DECL
      );
    
  private:
    _TAO_EventConsumerBase_Remote_Proxy_Impl remote_proxy_impl_;
  
  public:
    // This member function is used to get an handle to the unique instance
    // of the Remote Proxy Broker that is available for a given
    // interface.
    static _TAO_EventConsumerBase_Remote_Proxy_Broker *the_TAO_EventConsumerBase_Remote_Proxy_Broker (void);
  };
  
  //
  //              End Remote Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EventConsumerBase;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:52
  
  class ConsumerDescription;

#if !defined (_COMPONENTS_CONSUMERDESCRIPTION___PTR_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTION___PTR_CH_
  
  typedef ConsumerDescription *ConsumerDescription_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONSUMERDESCRIPTION___VAR_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTION___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:181
  
  class CIAO_Export ConsumerDescription_var
  {
  public:
    ConsumerDescription_var (void);
    ConsumerDescription_var (ConsumerDescription*);
    ConsumerDescription_var (const ConsumerDescription*); // (TAO extension)
    ConsumerDescription_var (const ConsumerDescription_var &);
    ~ConsumerDescription_var (void);
    
    ConsumerDescription_var &operator= (ConsumerDescription*);
    ConsumerDescription_var &operator= (const ConsumerDescription_var &);
    ConsumerDescription* operator-> (void) const;
    
    operator const ConsumerDescription* () const;
    operator ConsumerDescription* ();
    // in, inout, out, _retn 
    ConsumerDescription* in (void) const;
    ConsumerDescription*& inout (void);
    ConsumerDescription*& out (void);
    ConsumerDescription* _retn (void);
    ConsumerDescription* ptr (void) const;
    
    // Hooks used by template sequence and valuetype manager classes
    // for non-defined forward declared valuetypes.
    static void tao_add_ref (ConsumerDescription *);
    static void tao_remove_ref (ConsumerDescription *);
  
  private:
    ConsumerDescription* ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONSUMERDESCRIPTION___OUT_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTION___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:490
  
  class CIAO_Export ConsumerDescription_out
  {
  public:
    ConsumerDescription_out (ConsumerDescription* &);
    ConsumerDescription_out (ConsumerDescription_var &);
    ConsumerDescription_out (const ConsumerDescription_out &);
    ConsumerDescription_out &operator= (const ConsumerDescription_out &);
    ConsumerDescription_out &operator= (const ConsumerDescription_var &);
    ConsumerDescription_out &operator= (ConsumerDescription*);
    operator ConsumerDescription*& ();
    ConsumerDescription*& ptr (void);
    ConsumerDescription* operator-> (void);
    
  private:
    ConsumerDescription* &ptr_;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:96

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONSUMERDESCRIPTION_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTION_CH_
  
  class CIAO_Export ConsumerDescription
    : public virtual PortDescription
  {
  public:
    typedef ConsumerDescription_var _var_type;
    static ConsumerDescription* _downcast (CORBA::ValueBase* );
    // The address of static _downcast is implicit used as type id

    // (TAO extensions or internals)
    static CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        ConsumerDescription *&
      );
    virtual const char* _tao_obv_repository_id (void) const;
    static const char* _tao_obv_static_repository_id (void);
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:239
    
    virtual void consumer (Components::EventConsumerBase_ptr) = 0;
    virtual Components::EventConsumerBase_ptr consumer (void) const = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:315
  
  protected:
    ConsumerDescription (void);
    virtual ~ConsumerDescription (void);
    
    // TAO internals
    virtual void *_tao_obv_narrow (ptr_arith_t);
    virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    
  private:
    ConsumerDescription (const ConsumerDescription &);
    void operator= (const ConsumerDescription &);
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_ConsumerDescription (TAO_OutputCDR &) = 0;
    virtual CORBA::Boolean _tao_unmarshal__Components_ConsumerDescription (TAO_InputCDR &) = 0;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONSUMERDESCRIPTION___INIT_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTION___INIT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_init_ch.cpp:71
  
  class CIAO_Export ConsumerDescription_init : public virtual CORBA_ValueFactoryBase
  {
  public:
    ConsumerDescription_init (void);
    virtual ~ConsumerDescription_init (void);
    
    static ConsumerDescription_init* _downcast (CORBA_ValueFactoryBase* );
    
    virtual CORBA::ValueBase *create_for_unmarshal (void);
    
    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ConsumerDescription;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:62

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_CONSUMERDESCRIPTIONS_CH_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_CONSUMERDESCRIPTIONS_CH_
  
  class CIAO_Export _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions
    : public TAO_Unbounded_Base_Sequence
  {
  public:
    _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions (void);
    _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions (CORBA::ULong maximum);
    _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions (
        CORBA::ULong maximum,
        CORBA::ULong length,
        ConsumerDescription* *value,
        CORBA::Boolean release = 0
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions (
        const _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions &rhs
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions &operator= (
        const _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions &rhs
      );
    virtual ~_TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions (void);
    
    // = Accessors.
    TAO_Valuetype_Manager<Components::ConsumerDescription,Components::ConsumerDescription_var> operator[] (CORBA::ULong index) const;
    
    // = Static operations.
    static ConsumerDescription **allocbuf (CORBA::ULong nelems);
    static void freebuf (ConsumerDescription **buffer);
    
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    ConsumerDescription* *get_buffer (CORBA::Boolean orphan = 0);
    const ConsumerDescription* *get_buffer (void) const;
    virtual void _shrink_buffer (
        CORBA::ULong nl,
        CORBA::ULong ol
      );
  };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_CONSUMERDESCRIPTIONS_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTIONS_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
  
  class ConsumerDescriptions;
  class ConsumerDescriptions_var;
  
  // *************************************************************
  // Components::ConsumerDescriptions
  // *************************************************************
  
  class CIAO_Export ConsumerDescriptions : public 
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Valuetype_Sequence_Components_ConsumerDescriptions
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Valuetype_Sequence<ConsumerDescription,ConsumerDescription_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    ConsumerDescriptions (void);
    ConsumerDescriptions (CORBA::ULong max);
    ConsumerDescriptions (
        CORBA::ULong max, 
        CORBA::ULong length, 
        ConsumerDescription_ptr *buffer, 
        CORBA::Boolean release = 0
      );
    ConsumerDescriptions (const ConsumerDescriptions &);
    ~ConsumerDescriptions (void);
    
    static void _tao_any_destructor (void*);
    
    typedef ConsumerDescriptions_var _var_type;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONSUMERDESCRIPTIONS___VAR_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTIONS___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
  
  // *************************************************************
  // class Components::ConsumerDescriptions_var
  // *************************************************************
  
  class CIAO_Export ConsumerDescriptions_var
  {
  public:
    ConsumerDescriptions_var (void);
    ConsumerDescriptions_var (ConsumerDescriptions *);
    ConsumerDescriptions_var (const ConsumerDescriptions_var &);
    ~ConsumerDescriptions_var (void);
    
    ConsumerDescriptions_var &operator= (ConsumerDescriptions *);
    ConsumerDescriptions_var &operator= (const ConsumerDescriptions_var &);
    ConsumerDescriptions *operator-> (void);
    const ConsumerDescriptions *operator-> (void) const;
    
    operator const ConsumerDescriptions &() const;
    operator ConsumerDescriptions &();
    operator ConsumerDescriptions &() const;
    
    // Variable-size base types only.
    operator ConsumerDescriptions *&();
    
    TAO_Valuetype_Manager<ConsumerDescription, ConsumerDescription_var> operator[] (CORBA::ULong index);
    
    // in, inout, out, _retn 
    const ConsumerDescriptions &in (void) const;
    ConsumerDescriptions &inout (void);
    ConsumerDescriptions *&out (void);
    ConsumerDescriptions *_retn (void);
    ConsumerDescriptions *ptr (void) const;
  
  private:
    ConsumerDescriptions *ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_CONSUMERDESCRIPTIONS___OUT_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTIONS___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
  
  class CIAO_Export ConsumerDescriptions_out
  {
  public:
    ConsumerDescriptions_out (ConsumerDescriptions *&);
    ConsumerDescriptions_out (ConsumerDescriptions_var &);
    ConsumerDescriptions_out (const ConsumerDescriptions_out &);
    ConsumerDescriptions_out &operator= (const ConsumerDescriptions_out &);
    ConsumerDescriptions_out &operator= (ConsumerDescriptions *);
    operator ConsumerDescriptions *&();
    ConsumerDescriptions *&ptr (void);
    ConsumerDescriptions *operator-> (void);
    TAO_Valuetype_Manager<ConsumerDescription, ConsumerDescription_var> operator[] (CORBA::ULong index);
  
  private:
    ConsumerDescriptions *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const ConsumerDescriptions_var &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ConsumerDescriptions;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:52
  
  class EmitterDescription;

#if !defined (_COMPONENTS_EMITTERDESCRIPTION___PTR_CH_)
#define _COMPONENTS_EMITTERDESCRIPTION___PTR_CH_
  
  typedef EmitterDescription *EmitterDescription_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EMITTERDESCRIPTION___VAR_CH_)
#define _COMPONENTS_EMITTERDESCRIPTION___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:181
  
  class CIAO_Export EmitterDescription_var
  {
  public:
    EmitterDescription_var (void);
    EmitterDescription_var (EmitterDescription*);
    EmitterDescription_var (const EmitterDescription*); // (TAO extension)
    EmitterDescription_var (const EmitterDescription_var &);
    ~EmitterDescription_var (void);
    
    EmitterDescription_var &operator= (EmitterDescription*);
    EmitterDescription_var &operator= (const EmitterDescription_var &);
    EmitterDescription* operator-> (void) const;
    
    operator const EmitterDescription* () const;
    operator EmitterDescription* ();
    // in, inout, out, _retn 
    EmitterDescription* in (void) const;
    EmitterDescription*& inout (void);
    EmitterDescription*& out (void);
    EmitterDescription* _retn (void);
    EmitterDescription* ptr (void) const;
    
    // Hooks used by template sequence and valuetype manager classes
    // for non-defined forward declared valuetypes.
    static void tao_add_ref (EmitterDescription *);
    static void tao_remove_ref (EmitterDescription *);
  
  private:
    EmitterDescription* ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EMITTERDESCRIPTION___OUT_CH_)
#define _COMPONENTS_EMITTERDESCRIPTION___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:490
  
  class CIAO_Export EmitterDescription_out
  {
  public:
    EmitterDescription_out (EmitterDescription* &);
    EmitterDescription_out (EmitterDescription_var &);
    EmitterDescription_out (const EmitterDescription_out &);
    EmitterDescription_out &operator= (const EmitterDescription_out &);
    EmitterDescription_out &operator= (const EmitterDescription_var &);
    EmitterDescription_out &operator= (EmitterDescription*);
    operator EmitterDescription*& ();
    EmitterDescription*& ptr (void);
    EmitterDescription* operator-> (void);
    
  private:
    EmitterDescription* &ptr_;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:96

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EMITTERDESCRIPTION_CH_)
#define _COMPONENTS_EMITTERDESCRIPTION_CH_
  
  class CIAO_Export EmitterDescription
    : public virtual PortDescription
  {
  public:
    typedef EmitterDescription_var _var_type;
    static EmitterDescription* _downcast (CORBA::ValueBase* );
    // The address of static _downcast is implicit used as type id

    // (TAO extensions or internals)
    static CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        EmitterDescription *&
      );
    virtual const char* _tao_obv_repository_id (void) const;
    static const char* _tao_obv_static_repository_id (void);
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:239
    
    virtual void consumer (Components::EventConsumerBase_ptr) = 0;
    virtual Components::EventConsumerBase_ptr consumer (void) const = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:315
  
  protected:
    EmitterDescription (void);
    virtual ~EmitterDescription (void);
    
    // TAO internals
    virtual void *_tao_obv_narrow (ptr_arith_t);
    virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    
  private:
    EmitterDescription (const EmitterDescription &);
    void operator= (const EmitterDescription &);
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_EmitterDescription (TAO_OutputCDR &) = 0;
    virtual CORBA::Boolean _tao_unmarshal__Components_EmitterDescription (TAO_InputCDR &) = 0;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EMITTERDESCRIPTION___INIT_CH_)
#define _COMPONENTS_EMITTERDESCRIPTION___INIT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_init_ch.cpp:71
  
  class CIAO_Export EmitterDescription_init : public virtual CORBA_ValueFactoryBase
  {
  public:
    EmitterDescription_init (void);
    virtual ~EmitterDescription_init (void);
    
    static EmitterDescription_init* _downcast (CORBA_ValueFactoryBase* );
    
    virtual CORBA::ValueBase *create_for_unmarshal (void);
    
    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EmitterDescription;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:62

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_EMITTERDESCRIPTIONS_CH_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_EMITTERDESCRIPTIONS_CH_
  
  class CIAO_Export _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions
    : public TAO_Unbounded_Base_Sequence
  {
  public:
    _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions (void);
    _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions (CORBA::ULong maximum);
    _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions (
        CORBA::ULong maximum,
        CORBA::ULong length,
        EmitterDescription* *value,
        CORBA::Boolean release = 0
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions (
        const _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions &rhs
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions &operator= (
        const _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions &rhs
      );
    virtual ~_TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions (void);
    
    // = Accessors.
    TAO_Valuetype_Manager<Components::EmitterDescription,Components::EmitterDescription_var> operator[] (CORBA::ULong index) const;
    
    // = Static operations.
    static EmitterDescription **allocbuf (CORBA::ULong nelems);
    static void freebuf (EmitterDescription **buffer);
    
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    EmitterDescription* *get_buffer (CORBA::Boolean orphan = 0);
    const EmitterDescription* *get_buffer (void) const;
    virtual void _shrink_buffer (
        CORBA::ULong nl,
        CORBA::ULong ol
      );
  };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_EMITTERDESCRIPTIONS_CH_)
#define _COMPONENTS_EMITTERDESCRIPTIONS_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
  
  class EmitterDescriptions;
  class EmitterDescriptions_var;
  
  // *************************************************************
  // Components::EmitterDescriptions
  // *************************************************************
  
  class CIAO_Export EmitterDescriptions : public 
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Valuetype_Sequence_Components_EmitterDescriptions
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Valuetype_Sequence<EmitterDescription,EmitterDescription_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    EmitterDescriptions (void);
    EmitterDescriptions (CORBA::ULong max);
    EmitterDescriptions (
        CORBA::ULong max, 
        CORBA::ULong length, 
        EmitterDescription_ptr *buffer, 
        CORBA::Boolean release = 0
      );
    EmitterDescriptions (const EmitterDescriptions &);
    ~EmitterDescriptions (void);
    
    static void _tao_any_destructor (void*);
    
    typedef EmitterDescriptions_var _var_type;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EMITTERDESCRIPTIONS___VAR_CH_)
#define _COMPONENTS_EMITTERDESCRIPTIONS___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
  
  // *************************************************************
  // class Components::EmitterDescriptions_var
  // *************************************************************
  
  class CIAO_Export EmitterDescriptions_var
  {
  public:
    EmitterDescriptions_var (void);
    EmitterDescriptions_var (EmitterDescriptions *);
    EmitterDescriptions_var (const EmitterDescriptions_var &);
    ~EmitterDescriptions_var (void);
    
    EmitterDescriptions_var &operator= (EmitterDescriptions *);
    EmitterDescriptions_var &operator= (const EmitterDescriptions_var &);
    EmitterDescriptions *operator-> (void);
    const EmitterDescriptions *operator-> (void) const;
    
    operator const EmitterDescriptions &() const;
    operator EmitterDescriptions &();
    operator EmitterDescriptions &() const;
    
    // Variable-size base types only.
    operator EmitterDescriptions *&();
    
    TAO_Valuetype_Manager<EmitterDescription, EmitterDescription_var> operator[] (CORBA::ULong index);
    
    // in, inout, out, _retn 
    const EmitterDescriptions &in (void) const;
    EmitterDescriptions &inout (void);
    EmitterDescriptions *&out (void);
    EmitterDescriptions *_retn (void);
    EmitterDescriptions *ptr (void) const;
  
  private:
    EmitterDescriptions *ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EMITTERDESCRIPTIONS___OUT_CH_)
#define _COMPONENTS_EMITTERDESCRIPTIONS___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
  
  class CIAO_Export EmitterDescriptions_out
  {
  public:
    EmitterDescriptions_out (EmitterDescriptions *&);
    EmitterDescriptions_out (EmitterDescriptions_var &);
    EmitterDescriptions_out (const EmitterDescriptions_out &);
    EmitterDescriptions_out &operator= (const EmitterDescriptions_out &);
    EmitterDescriptions_out &operator= (EmitterDescriptions *);
    operator EmitterDescriptions *&();
    EmitterDescriptions *&ptr (void);
    EmitterDescriptions *operator-> (void);
    TAO_Valuetype_Manager<EmitterDescription, EmitterDescription_var> operator[] (CORBA::ULong index);
  
  private:
    EmitterDescriptions *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const EmitterDescriptions_var &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EmitterDescriptions;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:52
  
  class SubscriberDescription;

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTION___PTR_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTION___PTR_CH_
  
  typedef SubscriberDescription *SubscriberDescription_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTION___VAR_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTION___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:181
  
  class CIAO_Export SubscriberDescription_var
  {
  public:
    SubscriberDescription_var (void);
    SubscriberDescription_var (SubscriberDescription*);
    SubscriberDescription_var (const SubscriberDescription*); // (TAO extension)
    SubscriberDescription_var (const SubscriberDescription_var &);
    ~SubscriberDescription_var (void);
    
    SubscriberDescription_var &operator= (SubscriberDescription*);
    SubscriberDescription_var &operator= (const SubscriberDescription_var &);
    SubscriberDescription* operator-> (void) const;
    
    operator const SubscriberDescription* () const;
    operator SubscriberDescription* ();
    // in, inout, out, _retn 
    SubscriberDescription* in (void) const;
    SubscriberDescription*& inout (void);
    SubscriberDescription*& out (void);
    SubscriberDescription* _retn (void);
    SubscriberDescription* ptr (void) const;
    
    // Hooks used by template sequence and valuetype manager classes
    // for non-defined forward declared valuetypes.
    static void tao_add_ref (SubscriberDescription *);
    static void tao_remove_ref (SubscriberDescription *);
  
  private:
    SubscriberDescription* ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTION___OUT_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTION___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:490
  
  class CIAO_Export SubscriberDescription_out
  {
  public:
    SubscriberDescription_out (SubscriberDescription* &);
    SubscriberDescription_out (SubscriberDescription_var &);
    SubscriberDescription_out (const SubscriberDescription_out &);
    SubscriberDescription_out &operator= (const SubscriberDescription_out &);
    SubscriberDescription_out &operator= (const SubscriberDescription_var &);
    SubscriberDescription_out &operator= (SubscriberDescription*);
    operator SubscriberDescription*& ();
    SubscriberDescription*& ptr (void);
    SubscriberDescription* operator-> (void);
    
  private:
    SubscriberDescription* &ptr_;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:96

#endif /* end #if !defined */

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTION_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTION_CH_
  
  class CIAO_Export SubscriberDescription
    : public virtual PortDescription
  {
  public:
    typedef SubscriberDescription_var _var_type;
    static SubscriberDescription* _downcast (CORBA::ValueBase* );
    // The address of static _downcast is implicit used as type id

    // (TAO extensions or internals)
    static CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        SubscriberDescription *&
      );
    virtual const char* _tao_obv_repository_id (void) const;
    static const char* _tao_obv_static_repository_id (void);
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:325
    
    virtual void ck (Components::Cookie *) = 0;
    virtual Components::Cookie *ck (void) const = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:239
    
    virtual void consumer (Components::EventConsumerBase_ptr) = 0;
    virtual Components::EventConsumerBase_ptr consumer (void) const = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:315
  
  protected:
    SubscriberDescription (void);
    virtual ~SubscriberDescription (void);
    
    // TAO internals
    virtual void *_tao_obv_narrow (ptr_arith_t);
    virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    
  private:
    SubscriberDescription (const SubscriberDescription &);
    void operator= (const SubscriberDescription &);
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_SubscriberDescription (TAO_OutputCDR &) = 0;
    virtual CORBA::Boolean _tao_unmarshal__Components_SubscriberDescription (TAO_InputCDR &) = 0;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTION___INIT_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTION___INIT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_init_ch.cpp:71
  
  class CIAO_Export SubscriberDescription_init : public virtual CORBA_ValueFactoryBase
  {
  public:
    SubscriberDescription_init (void);
    virtual ~SubscriberDescription_init (void);
    
    static SubscriberDescription_init* _downcast (CORBA_ValueFactoryBase* );
    
    virtual CORBA::ValueBase *create_for_unmarshal (void);
    
    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_SubscriberDescription;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:62

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_SUBSCRIBERDESCRIPTIONS_CH_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_SUBSCRIBERDESCRIPTIONS_CH_
  
  class CIAO_Export _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions
    : public TAO_Unbounded_Base_Sequence
  {
  public:
    _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions (void);
    _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions (CORBA::ULong maximum);
    _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions (
        CORBA::ULong maximum,
        CORBA::ULong length,
        SubscriberDescription* *value,
        CORBA::Boolean release = 0
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions (
        const _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions &rhs
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions &operator= (
        const _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions &rhs
      );
    virtual ~_TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions (void);
    
    // = Accessors.
    TAO_Valuetype_Manager<Components::SubscriberDescription,Components::SubscriberDescription_var> operator[] (CORBA::ULong index) const;
    
    // = Static operations.
    static SubscriberDescription **allocbuf (CORBA::ULong nelems);
    static void freebuf (SubscriberDescription **buffer);
    
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    SubscriberDescription* *get_buffer (CORBA::Boolean orphan = 0);
    const SubscriberDescription* *get_buffer (void) const;
    virtual void _shrink_buffer (
        CORBA::ULong nl,
        CORBA::ULong ol
      );
  };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTIONS_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTIONS_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
  
  class SubscriberDescriptions;
  class SubscriberDescriptions_var;
  
  // *************************************************************
  // Components::SubscriberDescriptions
  // *************************************************************
  
  class CIAO_Export SubscriberDescriptions : public 
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Valuetype_Sequence_Components_SubscriberDescriptions
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Valuetype_Sequence<SubscriberDescription,SubscriberDescription_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    SubscriberDescriptions (void);
    SubscriberDescriptions (CORBA::ULong max);
    SubscriberDescriptions (
        CORBA::ULong max, 
        CORBA::ULong length, 
        SubscriberDescription_ptr *buffer, 
        CORBA::Boolean release = 0
      );
    SubscriberDescriptions (const SubscriberDescriptions &);
    ~SubscriberDescriptions (void);
    
    static void _tao_any_destructor (void*);
    
    typedef SubscriberDescriptions_var _var_type;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTIONS___VAR_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTIONS___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
  
  // *************************************************************
  // class Components::SubscriberDescriptions_var
  // *************************************************************
  
  class CIAO_Export SubscriberDescriptions_var
  {
  public:
    SubscriberDescriptions_var (void);
    SubscriberDescriptions_var (SubscriberDescriptions *);
    SubscriberDescriptions_var (const SubscriberDescriptions_var &);
    ~SubscriberDescriptions_var (void);
    
    SubscriberDescriptions_var &operator= (SubscriberDescriptions *);
    SubscriberDescriptions_var &operator= (const SubscriberDescriptions_var &);
    SubscriberDescriptions *operator-> (void);
    const SubscriberDescriptions *operator-> (void) const;
    
    operator const SubscriberDescriptions &() const;
    operator SubscriberDescriptions &();
    operator SubscriberDescriptions &() const;
    
    // Variable-size base types only.
    operator SubscriberDescriptions *&();
    
    TAO_Valuetype_Manager<SubscriberDescription, SubscriberDescription_var> operator[] (CORBA::ULong index);
    
    // in, inout, out, _retn 
    const SubscriberDescriptions &in (void) const;
    SubscriberDescriptions &inout (void);
    SubscriberDescriptions *&out (void);
    SubscriberDescriptions *_retn (void);
    SubscriberDescriptions *ptr (void) const;
  
  private:
    SubscriberDescriptions *ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTIONS___OUT_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTIONS___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
  
  class CIAO_Export SubscriberDescriptions_out
  {
  public:
    SubscriberDescriptions_out (SubscriberDescriptions *&);
    SubscriberDescriptions_out (SubscriberDescriptions_var &);
    SubscriberDescriptions_out (const SubscriberDescriptions_out &);
    SubscriberDescriptions_out &operator= (const SubscriberDescriptions_out &);
    SubscriberDescriptions_out &operator= (SubscriberDescriptions *);
    operator SubscriberDescriptions *&();
    SubscriberDescriptions *&ptr (void);
    SubscriberDescriptions *operator-> (void);
    TAO_Valuetype_Manager<SubscriberDescription, SubscriberDescription_var> operator[] (CORBA::ULong index);
  
  private:
    SubscriberDescriptions *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const SubscriberDescriptions_var &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_SubscriberDescriptions;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:52
  
  class PublisherDescription;

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTION___PTR_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTION___PTR_CH_
  
  typedef PublisherDescription *PublisherDescription_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTION___VAR_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTION___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:181
  
  class CIAO_Export PublisherDescription_var
  {
  public:
    PublisherDescription_var (void);
    PublisherDescription_var (PublisherDescription*);
    PublisherDescription_var (const PublisherDescription*); // (TAO extension)
    PublisherDescription_var (const PublisherDescription_var &);
    ~PublisherDescription_var (void);
    
    PublisherDescription_var &operator= (PublisherDescription*);
    PublisherDescription_var &operator= (const PublisherDescription_var &);
    PublisherDescription* operator-> (void) const;
    
    operator const PublisherDescription* () const;
    operator PublisherDescription* ();
    // in, inout, out, _retn 
    PublisherDescription* in (void) const;
    PublisherDescription*& inout (void);
    PublisherDescription*& out (void);
    PublisherDescription* _retn (void);
    PublisherDescription* ptr (void) const;
    
    // Hooks used by template sequence and valuetype manager classes
    // for non-defined forward declared valuetypes.
    static void tao_add_ref (PublisherDescription *);
    static void tao_remove_ref (PublisherDescription *);
  
  private:
    PublisherDescription* ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTION___OUT_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTION___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:490
  
  class CIAO_Export PublisherDescription_out
  {
  public:
    PublisherDescription_out (PublisherDescription* &);
    PublisherDescription_out (PublisherDescription_var &);
    PublisherDescription_out (const PublisherDescription_out &);
    PublisherDescription_out &operator= (const PublisherDescription_out &);
    PublisherDescription_out &operator= (const PublisherDescription_var &);
    PublisherDescription_out &operator= (PublisherDescription*);
    operator PublisherDescription*& ();
    PublisherDescription*& ptr (void);
    PublisherDescription* operator-> (void);
    
  private:
    PublisherDescription* &ptr_;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:96

#endif /* end #if !defined */

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTION_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTION_CH_
  
  class CIAO_Export PublisherDescription
    : public virtual PortDescription
  {
  public:
    typedef PublisherDescription_var _var_type;
    static PublisherDescription* _downcast (CORBA::ValueBase* );
    // The address of static _downcast is implicit used as type id

    // (TAO extensions or internals)
    static CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        PublisherDescription *&
      );
    virtual const char* _tao_obv_repository_id (void) const;
    static const char* _tao_obv_static_repository_id (void);
    
    static void _tao_any_destructor (void *);virtual void consumer (const Components::SubscriberDescriptions &) = 0;
    virtual const Components::SubscriberDescriptions &consumer (void) const = 0;
    virtual Components::SubscriberDescriptions &consumer (void) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_ch.cpp:315
  
  protected:
    PublisherDescription (void);
    virtual ~PublisherDescription (void);
    
    // TAO internals
    virtual void *_tao_obv_narrow (ptr_arith_t);
    virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    
  private:
    PublisherDescription (const PublisherDescription &);
    void operator= (const PublisherDescription &);
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_PublisherDescription (TAO_OutputCDR &) = 0;
    virtual CORBA::Boolean _tao_unmarshal__Components_PublisherDescription (TAO_InputCDR &) = 0;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTION___INIT_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTION___INIT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_init_ch.cpp:71
  
  class CIAO_Export PublisherDescription_init : public virtual CORBA_ValueFactoryBase
  {
  public:
    PublisherDescription_init (void);
    virtual ~PublisherDescription_init (void);
    
    static PublisherDescription_init* _downcast (CORBA_ValueFactoryBase* );
    
    virtual CORBA::ValueBase *create_for_unmarshal (void);
    
    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id (void);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_PublisherDescription;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ch.cpp:62

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_PUBLISHERDESCRIPTIONS_CH_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_PUBLISHERDESCRIPTIONS_CH_
  
  class CIAO_Export _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions
    : public TAO_Unbounded_Base_Sequence
  {
  public:
    _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions (void);
    _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions (CORBA::ULong maximum);
    _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions (
        CORBA::ULong maximum,
        CORBA::ULong length,
        PublisherDescription* *value,
        CORBA::Boolean release = 0
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions (
        const _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions &rhs
      );
    _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions &operator= (
        const _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions &rhs
      );
    virtual ~_TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions (void);
    
    // = Accessors.
    TAO_Valuetype_Manager<Components::PublisherDescription,Components::PublisherDescription_var> operator[] (CORBA::ULong index) const;
    
    // = Static operations.
    static PublisherDescription **allocbuf (CORBA::ULong nelems);
    static void freebuf (PublisherDescription **buffer);
    
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    PublisherDescription* *get_buffer (CORBA::Boolean orphan = 0);
    const PublisherDescription* *get_buffer (void) const;
    virtual void _shrink_buffer (
        CORBA::ULong nl,
        CORBA::ULong ol
      );
  };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTIONS_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTIONS_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
  
  class PublisherDescriptions;
  class PublisherDescriptions_var;
  
  // *************************************************************
  // Components::PublisherDescriptions
  // *************************************************************
  
  class CIAO_Export PublisherDescriptions : public 
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Valuetype_Sequence_Components_PublisherDescriptions
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Valuetype_Sequence<PublisherDescription,PublisherDescription_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    PublisherDescriptions (void);
    PublisherDescriptions (CORBA::ULong max);
    PublisherDescriptions (
        CORBA::ULong max, 
        CORBA::ULong length, 
        PublisherDescription_ptr *buffer, 
        CORBA::Boolean release = 0
      );
    PublisherDescriptions (const PublisherDescriptions &);
    ~PublisherDescriptions (void);
    
    static void _tao_any_destructor (void*);
    
    typedef PublisherDescriptions_var _var_type;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTIONS___VAR_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTIONS___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
  
  // *************************************************************
  // class Components::PublisherDescriptions_var
  // *************************************************************
  
  class CIAO_Export PublisherDescriptions_var
  {
  public:
    PublisherDescriptions_var (void);
    PublisherDescriptions_var (PublisherDescriptions *);
    PublisherDescriptions_var (const PublisherDescriptions_var &);
    ~PublisherDescriptions_var (void);
    
    PublisherDescriptions_var &operator= (PublisherDescriptions *);
    PublisherDescriptions_var &operator= (const PublisherDescriptions_var &);
    PublisherDescriptions *operator-> (void);
    const PublisherDescriptions *operator-> (void) const;
    
    operator const PublisherDescriptions &() const;
    operator PublisherDescriptions &();
    operator PublisherDescriptions &() const;
    
    // Variable-size base types only.
    operator PublisherDescriptions *&();
    
    TAO_Valuetype_Manager<PublisherDescription, PublisherDescription_var> operator[] (CORBA::ULong index);
    
    // in, inout, out, _retn 
    const PublisherDescriptions &in (void) const;
    PublisherDescriptions &inout (void);
    PublisherDescriptions *&out (void);
    PublisherDescriptions *_retn (void);
    PublisherDescriptions *ptr (void) const;
  
  private:
    PublisherDescriptions *ptr_;
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTIONS___OUT_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTIONS___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
  
  class CIAO_Export PublisherDescriptions_out
  {
  public:
    PublisherDescriptions_out (PublisherDescriptions *&);
    PublisherDescriptions_out (PublisherDescriptions_var &);
    PublisherDescriptions_out (const PublisherDescriptions_out &);
    PublisherDescriptions_out &operator= (const PublisherDescriptions_out &);
    PublisherDescriptions_out &operator= (PublisherDescriptions *);
    operator PublisherDescriptions *&();
    PublisherDescriptions *&ptr (void);
    PublisherDescriptions *operator-> (void);
    TAO_Valuetype_Manager<PublisherDescription, PublisherDescription_var> operator[] (CORBA::ULong index);
  
  private:
    PublisherDescriptions *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const PublisherDescriptions_var &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_PublisherDescriptions;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_COMPONENTS_EVENTS___PTR_CH_)
#define _COMPONENTS_EVENTS___PTR_CH_
  
  class Events;
  typedef Events *Events_ptr;

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTS___VAR_CH_)
#define _COMPONENTS_EVENTS___VAR_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class CIAO_Export Events_var : public TAO_Base_var
  {
  public:
    Events_var (void); // default constructor
    Events_var (Events_ptr p) : ptr_ (p) {} 
    Events_var (const Events_var &); // copy constructor
    ~Events_var (void); // destructor
    
    Events_var &operator= (Events_ptr);
    Events_var &operator= (const Events_var &);
    Events_ptr operator-> (void) const;
    
    operator const Events_ptr &() const;
    operator Events_ptr &();
    // in, inout, out, _retn 
    Events_ptr in (void) const;
    Events_ptr &inout (void);
    Events_ptr &out (void);
    Events_ptr _retn (void);
    Events_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static Events_ptr tao_duplicate (Events_ptr);
    static void tao_release (Events_ptr);
    static Events_ptr tao_nil (void);
    static Events_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    Events_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    Events_var (const TAO_Base_var &rhs);
    Events_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_COMPONENTS_EVENTS___OUT_CH_)
#define _COMPONENTS_EVENTS___OUT_CH_
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class CIAO_Export Events_out
  {
  public:
    Events_out (Events_ptr &);
    Events_out (Events_var &);
    Events_out (const Events_out &);
    Events_out &operator= (const Events_out &);
    Events_out &operator= (const Events_var &);
    Events_out &operator= (Events_ptr);
    operator Events_ptr &();
    Events_ptr &ptr (void);
    Events_ptr operator-> (void);
  
  private:
    Events_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_COMPONENTS_EVENTS_CH_)
#define _COMPONENTS_EVENTS_CH_
  
  class _TAO_Events_Proxy_Impl;
  class _TAO_Events_Remote_Proxy_Impl;
  class _TAO_Events_Proxy_Broker;
  class _TAO_Events_Remote_Proxy_Broker;
  
  class CIAO_Export Events
    : public virtual CORBA::Object
  {
  public:
    typedef Events_ptr _ptr_type;
    typedef Events_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static Events_ptr _duplicate (Events_ptr obj);
    
    static Events_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Events_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Events_ptr _nil (void)
      {
        return (Events_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::EventConsumerBase_ptr get_consumer (
        const char * sink_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::Cookie * subscribe (
        const char * publisher_name,
        Components::EventConsumerBase_ptr subscriber
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void unsubscribe (
        const char * publisher_name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void connect_consumer (
        const char * emitter_name,
        Components::EventConsumerBase_ptr consumer
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::EventConsumerBase_ptr disconnect_consumer (
        const char * source_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::NoConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::ConsumerDescriptions * get_all_consumers (
        
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::ConsumerDescriptions * get_named_consumers (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::EmitterDescriptions * get_all_emitters (
        
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::EmitterDescriptions * get_named_emitters (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::PublisherDescriptions * get_all_publishers (
        
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Components::PublisherDescriptions * get_named_publishers (
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  private:
    _TAO_Events_Proxy_Broker *the_TAO_Events_Proxy_Broker_;
  
  protected:
    Events (int collocated = 0);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void Components_Events_setup_collocation (int collocated);
    
    Events (
        TAO_Stub *objref, 
        CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0
      );
    virtual ~Events (void);
    
    friend class _TAO_Events_Remote_Proxy_Impl;
    friend class _TAO_Events_ThruPOA_Proxy_Impl;
    friend class _TAO_Events_Direct_Proxy_Impl;
  
  private:
    Events (const Events &);
    void operator= (const Events &);
  };
  
  // The Proxy Implementations are used by each interface to
  // perform a call. Each different implementation encapsulates
  // an invocation logic.
  
  
  ///////////////////////////////////////////////////////////////////////
  //                    Base Proxy Impl. Declaration
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
  
  class CIAO_Export _TAO_Events_Proxy_Impl
    : public virtual TAO_Object_Proxy_Impl
  {
  public:
    virtual ~_TAO_Events_Proxy_Impl (void) {}
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::EventConsumerBase_ptr get_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * sink_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::Cookie * subscribe (
        CORBA_Object *_collocated_tao_target_,
        const char * publisher_name,
        Components::EventConsumerBase_ptr subscriber
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual void unsubscribe (
        CORBA_Object *_collocated_tao_target_,
        const char * publisher_name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual void connect_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * emitter_name,
        Components::EventConsumerBase_ptr consumer
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::EventConsumerBase_ptr disconnect_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * source_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::NoConnection
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::ConsumerDescriptions * get_all_consumers (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::ConsumerDescriptions * get_named_consumers (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::EmitterDescriptions * get_all_emitters (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::EmitterDescriptions * get_named_emitters (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::PublisherDescriptions * get_all_publishers (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
    
    virtual ::Components::PublisherDescriptions * get_named_publishers (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      )) = 0;
  
  protected:
    _TAO_Events_Proxy_Impl (void);
  };
  
  //
  //               End Base Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////
  
  
  ///////////////////////////////////////////////////////////////////////
  //                Remote Proxy Impl. Declaration
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
  
  class CIAO_Export _TAO_Events_Remote_Proxy_Impl
    : public virtual _TAO_Events_Proxy_Impl,
      public virtual TAO_Remote_Object_Proxy_Impl
  {
  public:
    _TAO_Events_Remote_Proxy_Impl (void);
    
    virtual ~_TAO_Events_Remote_Proxy_Impl (void) {}
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::EventConsumerBase_ptr get_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * sink_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::Cookie * subscribe (
        CORBA_Object *_collocated_tao_target_,
        const char * publisher_name,
        Components::EventConsumerBase_ptr subscriber
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual void unsubscribe (
        CORBA_Object *_collocated_tao_target_,
        const char * publisher_name,
        Components::Cookie * ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::InvalidConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual void connect_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * emitter_name,
        Components::EventConsumerBase_ptr consumer
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::AlreadyConnected
        , Components::InvalidConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::EventConsumerBase_ptr disconnect_consumer (
        CORBA_Object *_collocated_tao_target_,
        const char * source_name
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
        , Components::NoConnection
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::ConsumerDescriptions * get_all_consumers (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::ConsumerDescriptions * get_named_consumers (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::EmitterDescriptions * get_all_emitters (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::EmitterDescriptions * get_named_emitters (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::PublisherDescriptions * get_all_publishers (
        CORBA_Object *_collocated_tao_target_
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
    
    virtual ::Components::PublisherDescriptions * get_named_publishers (
        CORBA_Object *_collocated_tao_target_,
        const Components::NameList & names
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , Components::InvalidName
      ));
  };
  
  //
  //             End Remote Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////
  
  // The Proxy Brokers are used by each interface to get
  // the right proxy for performing a call. In the new 
  // collocation scheme, the proxy to be used can vary on
  // a call by call basis.
  
  ///////////////////////////////////////////////////////////////////////
  //                 Base Proxy Broker Declaration 
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
  
  class CIAO_Export _TAO_Events_Proxy_Broker
  {
  public:
    virtual ~_TAO_Events_Proxy_Broker (void);
    virtual _TAO_Events_Proxy_Impl &select_proxy (
        Events *object
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      ) = 0;
    
  protected:
    _TAO_Events_Proxy_Broker (void);
    
  };
  
  //
  //              End Base Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////
  
    
  ///////////////////////////////////////////////////////////////////////
  //                 Remote Proxy Broker Declaration 
  //
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
  
  class CIAO_Export _TAO_Events_Remote_Proxy_Broker
    : public virtual _TAO_Events_Proxy_Broker
  {
  public: 
    _TAO_Events_Remote_Proxy_Broker (void);
    
    virtual ~_TAO_Events_Remote_Proxy_Broker (void);
    
    virtual _TAO_Events_Proxy_Impl &select_proxy (
        Events *object
        ACE_ENV_ARG_DECL
      );
    
  private:
    _TAO_Events_Remote_Proxy_Impl remote_proxy_impl_;
  
  public:
    // This member function is used to get an handle to the unique instance
    // of the Remote Proxy Broker that is available for a given
    // interface.
    static _TAO_Events_Remote_Proxy_Broker *the_TAO_Events_Remote_Proxy_Broker (void);
  };
  
  //
  //              End Remote Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Events;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:64

}
TAO_NAMESPACE_CLOSE // module Components

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/root.cpp:80

extern CIAO_Export
Components::_TAO_EventConsumerBase_Proxy_Broker *
(*Components__TAO_EventConsumerBase_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern CIAO_Export
Components::_TAO_Events_Proxy_Broker *
(*Components__TAO_Events_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/obv_module.cpp:55

TAO_NAMESPACE  OBV_Components
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_obv_ch.cpp:58

#if !defined (_COMPONENTS_CONSUMERDESCRIPTION___OBV_CH_)
#define _COMPONENTS_CONSUMERDESCRIPTION___OBV_CH_
  
  // OBV_ class
  class CIAO_Export ConsumerDescription
    : public virtual Components::ConsumerDescription,
      public virtual OBV_Components::PortDescription
  {
  public:
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:239
    
    virtual void consumer (Components::EventConsumerBase_ptr);
    virtual Components::EventConsumerBase_ptr consumer (void) const;
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_ConsumerDescription (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal__Components_ConsumerDescription (TAO_InputCDR &);
    CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &);
    CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &);
  
  private:
    Components::EventConsumerBase_var _pd_consumer;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_obv_ch.cpp:58

#if !defined (_COMPONENTS_EMITTERDESCRIPTION___OBV_CH_)
#define _COMPONENTS_EMITTERDESCRIPTION___OBV_CH_
  
  // OBV_ class
  class CIAO_Export EmitterDescription
    : public virtual Components::EmitterDescription,
      public virtual OBV_Components::PortDescription
  {
  public:
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:239
    
    virtual void consumer (Components::EventConsumerBase_ptr);
    virtual Components::EventConsumerBase_ptr consumer (void) const;
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_EmitterDescription (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal__Components_EmitterDescription (TAO_InputCDR &);
    CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &);
    CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &);
  
  private:
    Components::EventConsumerBase_var _pd_consumer;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_obv_ch.cpp:58

#if !defined (_COMPONENTS_SUBSCRIBERDESCRIPTION___OBV_CH_)
#define _COMPONENTS_SUBSCRIBERDESCRIPTION___OBV_CH_
  
  // OBV_ class
  class CIAO_Export SubscriberDescription
    : public virtual Components::SubscriberDescription,
      public virtual OBV_Components::PortDescription
  {
  public:
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:325
    
    virtual void ck (Components::Cookie *);
    virtual Components::Cookie *ck (void) const;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_ch.cpp:239
    
    virtual void consumer (Components::EventConsumerBase_ptr);
    virtual Components::EventConsumerBase_ptr consumer (void) const;
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_SubscriberDescription (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal__Components_SubscriberDescription (TAO_InputCDR &);
    CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &);
    CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &);
  
  private:
    Components::Cookie_var _pd_ck;
    Components::EventConsumerBase_var _pd_consumer;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_obv_ch.cpp:58

#if !defined (_COMPONENTS_PUBLISHERDESCRIPTION___OBV_CH_)
#define _COMPONENTS_PUBLISHERDESCRIPTION___OBV_CH_
  
  // OBV_ class
  class CIAO_Export PublisherDescription
    : public virtual Components::PublisherDescription,
      public virtual OBV_Components::PortDescription
  {
  public:virtual void consumer (const Components::SubscriberDescriptions &);
    virtual const Components::SubscriberDescriptions &consumer (void) const;
    virtual Components::SubscriberDescriptions &consumer (void);
    
  protected:
    virtual CORBA::Boolean _tao_marshal__Components_PublisherDescription (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal__Components_PublisherDescription (TAO_InputCDR &);
    CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &);
    CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &);
  
  private:
    Components::SubscriberDescriptions _pd_consumer;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/obv_module.cpp:85

}TAO_NAMESPACE_CLOSE

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_ch.cpp:54

CIAO_Export void operator<<= (CORBA::Any &, Components::EventBase *); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::EventBase **); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::EventBase *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

CIAO_Export void operator<<= (CORBA::Any &, Components::EventConsumerBase_ptr); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::EventConsumerBase_ptr *); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::EventConsumerBase_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_ch.cpp:54

CIAO_Export void operator<<= (CORBA::Any &, Components::ConsumerDescription *); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::ConsumerDescription **); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::ConsumerDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

CIAO_Export void operator<<= (CORBA::Any &, const Components::ConsumerDescriptions &); // copying version
CIAO_Export void operator<<= (CORBA::Any &, Components::ConsumerDescriptions*); // noncopying version
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::ConsumerDescriptions *&); // deprecated
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Components::ConsumerDescriptions *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_ch.cpp:54

CIAO_Export void operator<<= (CORBA::Any &, Components::EmitterDescription *); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::EmitterDescription **); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::EmitterDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

CIAO_Export void operator<<= (CORBA::Any &, const Components::EmitterDescriptions &); // copying version
CIAO_Export void operator<<= (CORBA::Any &, Components::EmitterDescriptions*); // noncopying version
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::EmitterDescriptions *&); // deprecated
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Components::EmitterDescriptions *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_ch.cpp:54

CIAO_Export void operator<<= (CORBA::Any &, Components::SubscriberDescription *); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::SubscriberDescription **); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::SubscriberDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

CIAO_Export void operator<<= (CORBA::Any &, const Components::SubscriberDescriptions &); // copying version
CIAO_Export void operator<<= (CORBA::Any &, Components::SubscriberDescriptions*); // noncopying version
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::SubscriberDescriptions *&); // deprecated
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Components::SubscriberDescriptions *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_ch.cpp:54

CIAO_Export void operator<<= (CORBA::Any &, Components::PublisherDescription *); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::PublisherDescription **); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::PublisherDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

CIAO_Export void operator<<= (CORBA::Any &, const Components::PublisherDescriptions &); // copying version
CIAO_Export void operator<<= (CORBA::Any &, Components::PublisherDescriptions*); // noncopying version
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::PublisherDescriptions *&); // deprecated
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const Components::PublisherDescriptions *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

CIAO_Export void operator<<= (CORBA::Any &, Components::Events_ptr); // copying
CIAO_Export void operator<<= (CORBA::Any &, Components::Events_ptr *); // non-copying
CIAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, Components::Events_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:682

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::EventBase *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::EventBase *);
}
TAO_NAMESPACE_CLOSE

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ch.cpp:61

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::EventBase *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::EventBase *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::EventConsumerBase_ptr );
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::EventConsumerBase_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:682

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::ConsumerDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::ConsumerDescription *);
}
TAO_NAMESPACE_CLOSE

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ch.cpp:61

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::ConsumerDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::ConsumerDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_Components_ConsumerDescriptions_H_
#define _TAO_CDR_OP_Components_ConsumerDescriptions_H_

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::ConsumerDescriptions &
  );
CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::ConsumerDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_ConsumerDescriptions_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:682

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::EmitterDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::EmitterDescription *);
}
TAO_NAMESPACE_CLOSE

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ch.cpp:61

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::EmitterDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::EmitterDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_Components_EmitterDescriptions_H_
#define _TAO_CDR_OP_Components_EmitterDescriptions_H_

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::EmitterDescriptions &
  );
CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::EmitterDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_EmitterDescriptions_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:682

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::SubscriberDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::SubscriberDescription *);
}
TAO_NAMESPACE_CLOSE

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ch.cpp:61

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::SubscriberDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::SubscriberDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_Components_SubscriberDescriptions_H_
#define _TAO_CDR_OP_Components_SubscriberDescriptions_H_

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::SubscriberDescriptions &
  );
CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::SubscriberDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_SubscriberDescriptions_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:682

TAO_NAMESPACE CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (Components::PublisherDescription *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (Components::PublisherDescription *);
}
TAO_NAMESPACE_CLOSE

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_ch.cpp:61

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::PublisherDescription *);
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::PublisherDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_Components_PublisherDescriptions_H_
#define _TAO_CDR_OP_Components_PublisherDescriptions_H_

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::PublisherDescriptions &
  );
CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::PublisherDescriptions &
  );

#endif /* _TAO_CDR_OP_Components_PublisherDescriptions_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

CIAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const Components::Events_ptr );
CIAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, Components::Events_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:1007

#if defined (__ACE_INLINE__)
#include "CIAO_EventC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */

