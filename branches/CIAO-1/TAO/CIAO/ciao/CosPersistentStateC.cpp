// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "CosPersistentStateC.h"

#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "CosPersistentStateC.i"
#endif /* !defined INLINE */


// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:67

int CosPersistentState::CatalogBase::_tao_class_id = 0;

CosPersistentState::CatalogBase_ptr
tao_CosPersistentState_CatalogBase_duplicate (
    CosPersistentState::CatalogBase_ptr p
  )
{
  return CosPersistentState::CatalogBase::_duplicate (p);
}

void
tao_CosPersistentState_CatalogBase_release (
    CosPersistentState::CatalogBase_ptr p
  )
{
  CORBA::release (p);
}

CosPersistentState::CatalogBase_ptr
tao_CosPersistentState_CatalogBase_nil (
    void
  )
{
  return CosPersistentState::CatalogBase::_nil ();
}

CosPersistentState::CatalogBase_ptr
tao_CosPersistentState_CatalogBase_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CosPersistentState::CatalogBase::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CosPersistentState_CatalogBase_upcast (
    void *src
  )
{
  CosPersistentState::CatalogBase **tmp =
    ACE_static_cast (CosPersistentState::CatalogBase **, src);
  return *tmp;
}

// *************************************************************
// CosPersistentState::CatalogBase_var
// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:654
// *************************************************************

CosPersistentState::CatalogBase_var::CatalogBase_var (void) // default constructor
  : ptr_ (CatalogBase::_nil ())
{}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::ptr (void) const
{
  return this->ptr_;
}

CosPersistentState::CatalogBase_var::CatalogBase_var (const ::CosPersistentState::CatalogBase_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (CatalogBase::_duplicate (p.ptr ()))
{}

CosPersistentState::CatalogBase_var::~CatalogBase_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

CosPersistentState::CatalogBase_var &
CosPersistentState::CatalogBase_var::operator= (CatalogBase_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CosPersistentState::CatalogBase_var &
CosPersistentState::CatalogBase_var::operator= (const ::CosPersistentState::CatalogBase_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CosPersistentState::CatalogBase::_duplicate (p.ptr ());
  }
  return *this;
}

CosPersistentState::CatalogBase_var::operator const ::CosPersistentState::CatalogBase_ptr &() const // cast
{
  return this->ptr_;
}

CosPersistentState::CatalogBase_var::operator ::CosPersistentState::CatalogBase_ptr &() // cast 
{
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::operator-> (void) const
{
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::in (void) const
{
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr &
CosPersistentState::CatalogBase_var::inout (void)
{
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr &
CosPersistentState::CatalogBase_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CosPersistentState::CatalogBase::_nil ();
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CosPersistentState::CatalogBase_ptr val = this->ptr_;
  this->ptr_ = ::CosPersistentState::CatalogBase::_nil ();
  return val;
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::tao_duplicate (CatalogBase_ptr p)
{
  return ::CosPersistentState::CatalogBase::_duplicate (p);
}

void
CosPersistentState::CatalogBase_var::tao_release (CatalogBase_ptr p)
{
  CORBA::release (p);
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::tao_nil (void)
{
  return ::CosPersistentState::CatalogBase::_nil ();
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CosPersistentState::CatalogBase::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CosPersistentState::CatalogBase_var::tao_upcast (void *src)
{
  CatalogBase **tmp =
    ACE_static_cast (CatalogBase **, src);
  return *tmp;
}

// *************************************************************
// CosPersistentState::CatalogBase_out
// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:932
// *************************************************************

CosPersistentState::CatalogBase_out::CatalogBase_out (CatalogBase_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CosPersistentState::CatalogBase::_nil ();
}

CosPersistentState::CatalogBase_out::CatalogBase_out (CatalogBase_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CosPersistentState::CatalogBase::_nil ();
}

CosPersistentState::CatalogBase_out::CatalogBase_out (const ::CosPersistentState::CatalogBase_out &p) // copy constructor
  : ptr_ (ACE_const_cast (CatalogBase_out &, p).ptr_)
{}

::CosPersistentState::CatalogBase_out &
CosPersistentState::CatalogBase_out::operator= (const ::CosPersistentState::CatalogBase_out &p)
{
  this->ptr_ = ACE_const_cast (CatalogBase_out&, p).ptr_;
  return *this;
}

CosPersistentState::CatalogBase_out &
CosPersistentState::CatalogBase_out::operator= (const ::CosPersistentState::CatalogBase_var &p)
{
  this->ptr_ = ::CosPersistentState::CatalogBase::_duplicate (p.ptr ());
  return *this;
}

CosPersistentState::CatalogBase_out &
CosPersistentState::CatalogBase_out::operator= (CatalogBase_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CosPersistentState::CatalogBase_out::operator ::CosPersistentState::CatalogBase_ptr &() // cast
{
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr &
CosPersistentState::CatalogBase_out::ptr (void) // ptr
{
  return this->ptr_;
}

::CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase_out::operator-> (void)
{
  return this->ptr_;
}


// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:198

CosPersistentState::CatalogBase::CatalogBase (void)
{}

CosPersistentState::CatalogBase::~CatalogBase (void)
{}

void CosPersistentState::CatalogBase::_tao_any_destructor (void *_tao_void_pointer)
{
  CatalogBase *tmp = ACE_static_cast (CatalogBase*, _tao_void_pointer);
  CORBA::release (tmp);
}

CosPersistentState::CatalogBase_ptr CosPersistentState::CatalogBase::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CatalogBase::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CosPersistentState::CatalogBase_ptr 
CosPersistentState::CatalogBase::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    return CatalogBase::_nil ();
  return
      ACE_reinterpret_cast
        (
          CatalogBase_ptr,
            obj->_tao_QueryInterface
              (
                ACE_reinterpret_cast
                  (
                    ptr_arith_t,
                    &CatalogBase::_tao_class_id
                  )
              )
        );
}

CosPersistentState::CatalogBase_ptr
CosPersistentState::CatalogBase::_duplicate (CatalogBase_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

void *CosPersistentState::CatalogBase::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::CosPersistentState, CatalogBase)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* CosPersistentState::CatalogBase::_interface_repository_id (void) const
{
  return "IDL:CosPersistentState/CatalogBase:1.0";
}

static const CORBA::Long _oc_CosPersistentState_CatalogBase[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f7350), 
  ACE_NTOHL (0x65727369), 
  ACE_NTOHL (0x7374656e), 
  ACE_NTOHL (0x74537461), 
  ACE_NTOHL (0x74652f43), 
  ACE_NTOHL (0x6174616c), 
  ACE_NTOHL (0x6f674261), 
  ACE_NTOHL (0x73653a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:CosPersistentState/CatalogBase:1.0
  12,
  ACE_NTOHL (0x43617461), 
  ACE_NTOHL (0x6c6f6742), 
  ACE_NTOHL (0x61736500),  // name = CatalogBase
};

static CORBA::TypeCode _tc_TAO_tc_CosPersistentState_CatalogBase (
    CORBA::tk_objref,
    sizeof (_oc_CosPersistentState_CatalogBase),
    (char *) &_oc_CosPersistentState_CatalogBase,
    0,
    sizeof (CosPersistentState::CatalogBase)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (CosPersistentState)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_CatalogBase, &_tc_TAO_tc_CosPersistentState_CatalogBase)
TAO_NAMESPACE_END


#if !defined (_COSPERSISTENTSTATE_TYPEID_CS_)
#define _COSPERSISTENTSTATE_TYPEID_CS_

// *************************************************************
// CosPersistentState::TypeId
// *************************************************************

CosPersistentState::TypeId::TypeId (void)
{}
CosPersistentState::TypeId::TypeId (CORBA::ULong max) // uses max size
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}
CosPersistentState::TypeId::TypeId (CORBA::ULong max, CORBA::ULong length, CORBA::Octet *buffer, CORBA::Boolean release)
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}
CosPersistentState::TypeId::TypeId (const TypeId &seq) // copy ctor
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}
CosPersistentState::TypeId::~TypeId (void) // dtor
{}
void CosPersistentState::TypeId::_tao_any_destructor (void *_tao_void_pointer)
{
  TypeId *tmp = ACE_static_cast (TypeId*, _tao_void_pointer);
  delete tmp;
}


#endif /* end #if !defined */

static const CORBA::Long _oc_CosPersistentState_TypeId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f7350), 
  ACE_NTOHL (0x65727369), 
  ACE_NTOHL (0x7374656e), 
  ACE_NTOHL (0x74537461), 
  ACE_NTOHL (0x74652f54), 
  ACE_NTOHL (0x79706549), 
  ACE_NTOHL (0x643a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:CosPersistentState/TypeId:1.0
  7,
  ACE_NTOHL (0x54797065), 
  ACE_NTOHL (0x49640000),  // name = TypeId
  CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_CosPersistentState_TypeId (
    CORBA::tk_alias,
    sizeof (_oc_CosPersistentState_TypeId),
    (char *) &_oc_CosPersistentState_TypeId,
    0,
    sizeof (CosPersistentState::TypeId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (CosPersistentState)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_TypeId, &_tc_TAO_tc_CosPersistentState_TypeId)
TAO_NAMESPACE_END

static const CORBA::Long _oc_CosPersistentState_Pid[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f7350), 
  ACE_NTOHL (0x65727369), 
  ACE_NTOHL (0x7374656e), 
  ACE_NTOHL (0x74537461), 
  ACE_NTOHL (0x74652f50), 
  ACE_NTOHL (0x69643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:CosPersistentState/Pid:1.0
  4,
  ACE_NTOHL (0x50696400),  // name = Pid
  CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_CosPersistentState_Pid (
    CORBA::tk_alias,
    sizeof (_oc_CosPersistentState_Pid),
    (char *) &_oc_CosPersistentState_Pid,
    0,
    sizeof (CosPersistentState::Pid)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (CosPersistentState)
TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_Pid, &_tc_TAO_tc_CosPersistentState_Pid)
TAO_NAMESPACE_END


// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:60

void operator<<= (
    CORBA::Any &_tao_any,
    CosPersistentState::CatalogBase_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      CosPersistentState::_tc_CatalogBase, 
      1,
      CosPersistentState::CatalogBase::_duplicate (_tao_elem),
      CosPersistentState::CatalogBase::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

void operator<<= (
    CORBA::Any &_tao_any,
    CosPersistentState::CatalogBase_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      CosPersistentState::_tc_CatalogBase, 
      1,
      *_tao_elem,
      CosPersistentState::CatalogBase::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CosPersistentState::CatalogBase_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CosPersistentState::CatalogBase::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          CosPersistentState::_tc_CatalogBase
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CosPersistentState::CatalogBase_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
    
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CosPersistentState::CatalogBase::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CosPersistentState::CatalogBase,CosPersistentState::CatalogBase_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
#  pragma instantiate TAO_Object_Manager<CosPersistentState::CatalogBase,CosPersistentState::CatalogBase_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */


// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:61

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const CosPersistentState::TypeId &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          CosPersistentState::_tc_TypeId,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    CosPersistentState::TypeId *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          CosPersistentState::_tc_TypeId,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          CosPersistentState::TypeId::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    CosPersistentState::TypeId *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const CosPersistentState::TypeId*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const CosPersistentState::TypeId *&_tao_elem
  )
{
  _tao_elem = 0;
  
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          CosPersistentState::_tc_TypeId
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = ACE_static_cast(
            const CosPersistentState::TypeId*,
            _tao_any.value ()
          );
        
        return 1;
      }
    else
      {
        CosPersistentState::TypeId *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            CosPersistentState::TypeId,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                CosPersistentState::_tc_TypeId,
                1,
                ACE_static_cast (void *, tmp),
                CosPersistentState::TypeId::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPersistentState::TypeId &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    {
      TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
        ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (CosPersistentState::TypeId *)&_tao_sequence);
      if (oseq->mb ())
        return strm.write_octet_array_mb (oseq->mb ());
      else
        return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    }
    
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
  
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPersistentState::TypeId &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // Add a check to the length of the sequence
    // to make sure it does not exceed the length
    // of the stream. (See bug 1159.)
    if (_tao_seq_len > strm.length())
      return 0;
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len) 
      return 1;
    // retrieve all the elements
    
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    if (ACE_BIT_DISABLED (strm.start ()->flags (),
    ACE_Message_Block::DONT_DELETE))
    {
      TAO_ORB_Core* orb_core = strm.orb_core ();
      if (orb_core != 0 &&
      strm.orb_core ()->resource_factory ()->
      input_cdr_allocator_type_locked () == 1)
      {
        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
          ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
        oseq->replace (_tao_seq_len, strm.start ());
        oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
        strm.skip_bytes (_tao_seq_len);
        return 1;
      }
    }
    return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
  
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
  }
  return 0; // error
}

